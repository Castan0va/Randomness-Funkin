// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_DateTools
#include <DateTools.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_crypto_BaseCode
#include <haxe/crypto/BaseCode.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hscriptBase_Interp
#include <hscriptBase/Interp.h>
#endif
#ifndef INCLUDED_hscriptBase_Parser
#include <hscriptBase/Parser.h>
#endif
#ifndef INCLUDED_hscriptBase_Tools
#include <hscriptBase/Tools.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_macro_Macro
#include <macro/Macro.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_tea_SScript
#include <tea/SScript.h>
#endif
#ifndef INCLUDED_tea_backend__SScriptException_SScriptException_Impl_
#include <tea/backend/_SScriptException/SScriptException_Impl_.h>
#endif
#ifndef INCLUDED_tea_backend_crypto_Base32
#include <tea/backend/crypto/Base32.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ffc4a688e712d40b_60_new,"tea.SScript","new",0x7a4ca312,"tea.SScript.new","tea/SScript.hx",60,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_312_execute,"tea.SScript","execute",0x452a1de7,"tea.SScript.execute","tea/SScript.hx",312,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_363_set,"tea.SScript","set",0x7a506e54,"tea.SScript.set","tea/SScript.hx",363,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_355_set,"tea.SScript","set",0x7a506e54,"tea.SScript.set","tea/SScript.hx",355,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_400_setClass,"tea.SScript","setClass",0xd6e10944,"tea.SScript.setClass","tea/SScript.hx",400,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_435_setClassString,"tea.SScript","setClassString",0x4845f135,"tea.SScript.setClassString","tea/SScript.hx",435,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_472_setSpecialObject,"tea.SScript","setSpecialObject",0x4a1adae4,"tea.SScript.setSpecialObject","tea/SScript.hx",472,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_502_locals,"tea.SScript","locals",0xaf3ddd36,"tea.SScript.locals","tea/SScript.hx",502,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_527_unset,"tea.SScript","unset",0x2ec7561b,"tea.SScript.unset","tea/SScript.hx",527,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_546_get,"tea.SScript","get",0x7a475348,"tea.SScript.get","tea/SScript.hx",546,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_616_call,"tea.SScript","call",0x8179a1ac,"tea.SScript.call","tea/SScript.hx",616,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_581_call,"tea.SScript","call",0x8179a1ac,"tea.SScript.call","tea/SScript.hx",581,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_693_clear,"tea.SScript","clear",0xd033d4bf,"tea.SScript.clear","tea/SScript.hx",693,0x727e4fdf)
static const ::String _hx_array_data_6e1d7220_18[] = {
	HX_("true",4e,a7,03,4d),HX_("false",a3,35,4f,fb),HX_("null",87,9e,0e,49),HX_("trace",85,8e,1f,16),
};
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_717_exists,"tea.SScript","exists",0x155e866a,"tea.SScript.exists","tea/SScript.hx",717,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_737_preset,"tea.SScript","preset",0x043f1bed,"tea.SScript.preset","tea/SScript.hx",737,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_766_resetInterp,"tea.SScript","resetInterp",0x2490d1b5,"tea.SScript.resetInterp","tea/SScript.hx",766,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_778_doFile,"tea.SScript","doFile",0x693ddc35,"tea.SScript.doFile","tea/SScript.hx",778,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_830_doString,"tea.SScript","doString",0x259bd6ca,"tea.SScript.doString","tea/SScript.hx",830,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_909_toString,"tea.SScript","toString",0xb8c2f8ba,"tea.SScript.toString","tea/SScript.hx",909,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_979_destroy,"tea.SScript","destroy",0x9da340ac,"tea.SScript.destroy","tea/SScript.hx",979,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_1007_get_variables,"tea.SScript","get_variables",0xf2609bc0,"tea.SScript.get_variables","tea/SScript.hx",1007,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_1015_setPackagePath,"tea.SScript","setPackagePath",0xc5cc5a57,"tea.SScript.setPackagePath","tea/SScript.hx",1015,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_1023_get_packagePath,"tea.SScript","get_packagePath",0xbba44594,"tea.SScript.get_packagePath","tea/SScript.hx",1023,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_1036_set_customOrigin,"tea.SScript","set_customOrigin",0xdb6f3082,"tea.SScript.set_customOrigin","tea/SScript.hx",1036,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_1067_get_parsingExceptions,"tea.SScript","get_parsingExceptions",0x6dc76b9d,"tea.SScript.get_parsingExceptions","tea/SScript.hx",1067,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_941_listScripts,"tea.SScript","listScripts",0xc9d943fc,"tea.SScript.listScripts","tea/SScript.hx",941,0x727e4fdf)
static const ::String _hx_array_data_6e1d7220_35[] = {
	HX_("hx",10,5b,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_1032_get_BlankReg,"tea.SScript","get_BlankReg",0xb5f7b597,"tea.SScript.get_BlankReg","tea/SScript.hx",1032,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_1045_set_defaultTypeCheck,"tea.SScript","set_defaultTypeCheck",0x4b207c38,"tea.SScript.set_defaultTypeCheck","tea/SScript.hx",1045,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_1056_set_defaultDebug,"tea.SScript","set_defaultDebug",0x1d4b4ddd,"tea.SScript.set_defaultDebug","tea/SScript.hx",1056,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_65_boot,"tea.SScript","boot",0x80db0d40,"tea.SScript.boot","tea/SScript.hx",65,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_70_boot,"tea.SScript","boot",0x80db0d40,"tea.SScript.boot","tea/SScript.hx",70,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_75_boot,"tea.SScript","boot",0x80db0d40,"tea.SScript.boot","tea/SScript.hx",75,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_80_boot,"tea.SScript","boot",0x80db0d40,"tea.SScript.boot","tea/SScript.hx",80,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_85_boot,"tea.SScript","boot",0x80db0d40,"tea.SScript.boot","tea/SScript.hx",85,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_90_boot,"tea.SScript","boot",0x80db0d40,"tea.SScript.boot","tea/SScript.hx",90,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_95_boot,"tea.SScript","boot",0x80db0d40,"tea.SScript.boot","tea/SScript.hx",95,0x727e4fdf)
HX_LOCAL_STACK_FRAME(_hx_pos_ffc4a688e712d40b_97_boot,"tea.SScript","boot",0x80db0d40,"tea.SScript.boot","tea/SScript.hx",97,0x727e4fdf)
namespace tea{

void SScript_obj::__construct(::String __o_scriptPath, ::Dynamic __o_preset, ::Dynamic __o_startExecute){
            		::String scriptPath = __o_scriptPath;
            		if (::hx::IsNull(__o_scriptPath)) scriptPath = HX_("",00,00,00,00);
            		 ::Dynamic preset = __o_preset;
            		if (::hx::IsNull(__o_preset)) preset = true;
            		 ::Dynamic startExecute = __o_startExecute;
            		if (::hx::IsNull(__o_startExecute)) startExecute = true;
            	HX_GC_STACKFRAME(&_hx_pos_ffc4a688e712d40b_60_new)
HXLINE( 197)		this->packagePath = HX_("",00,00,00,00);
HXLINE( 187)		this->debugTraces = false;
HXLINE( 182)		this->traces = false;
HXLINE( 177)		this->scriptFile = HX_("",00,00,00,00);
HXLINE( 172)		this->active = true;
HXLINE( 165)		this->script = HX_("",00,00,00,00);
HXLINE( 142)		this->notAllowedClasses = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 137)		this->lastReportedCallTime = ((Float)-1);
HXLINE( 130)		this->lastReportedTime = ((Float)-1);
HXLINE( 123)		this->typeCheck = false;
HXLINE( 118)		this->ID = null();
HXLINE( 215)		int timer = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 215)		Float time;
HXDLIN( 215)		if ((timer > 0)) {
HXLINE( 215)			time = (( (Float)(timer) ) / ( (Float)(1000) ));
            		}
            		else {
HXLINE( 215)			time = ( (Float)(0) );
            		}
HXLINE( 218)		if (::hx::IsNull( ::tea::SScript_obj::defines )) {
HXLINE( 220)			::tea::SScript_obj::defines =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 222)			::String contents = null();
HXLINE( 223)			::String path = ::macro::Macro_obj::get_definePath();
HXLINE( 225)			if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 227)				 ::tea::backend::crypto::Base32 contents1 =  ::tea::backend::crypto::Base32_obj::__alloc( HX_CTX );
HXDLIN( 227)				contents = contents1->decodeString(::sys::io::File_obj::getContent(path));
HXLINE( 228)				::sys::FileSystem_obj::deleteFile(path);
HXLINE( 230)				{
HXLINE( 230)					int _g = 0;
HXDLIN( 230)					::Array< ::String > _g1 = contents.split(HX_("\n",0a,00,00,00));
HXDLIN( 230)					while((_g < _g1->length)){
HXLINE( 230)						::String i = _g1->__get(_g);
HXDLIN( 230)						_g = (_g + 1);
HXLINE( 232)						i = ::StringTools_obj::trim(i);
HXLINE( 234)						::String d1 = null();
HXDLIN( 234)						::String d2 = null();
HXLINE( 235)						::Array< ::String > define = i.split(HX_("|",7c,00,00,00));
HXLINE( 236)						if ((define->length == 2)) {
HXLINE( 238)							d1 = define->__get(0);
HXLINE( 239)							d2 = define->__get(1);
            						}
            						else {
HXLINE( 241)							if ((define->length == 1)) {
HXLINE( 243)								d1 = define->__get(0);
HXLINE( 244)								d2 = HX_("1",31,00,00,00);
            							}
            						}
HXLINE( 247)						if (::hx::IsNotNull( d1 )) {
HXLINE( 248)							::String v;
HXDLIN( 248)							if (::hx::IsNotNull( d2 )) {
HXLINE( 248)								v = d2;
            							}
            							else {
HXLINE( 248)								v = HX_("1",31,00,00,00);
            							}
HXDLIN( 248)							::tea::SScript_obj::defines->set(d1,v);
            						}
            					}
            				}
            			}
            			else {
HXLINE( 253)				::tea::SScript_obj::defines->set(HX_("true",4e,a7,03,4d),HX_("1",31,00,00,00));
HXLINE( 254)				::tea::SScript_obj::defines->set(HX_("haxe",26,34,08,45),HX_("1",31,00,00,00));
HXLINE( 255)				::tea::SScript_obj::defines->set(HX_("sys",0d,ad,57,00),HX_("1",31,00,00,00));
            			}
            		}
HXLINE( 266)		if (::hx::IsNotNull( ::tea::SScript_obj::defaultTypeCheck )) {
HXLINE( 267)			this->typeCheck = ( (bool)(::tea::SScript_obj::defaultTypeCheck) );
            		}
HXLINE( 268)		if (::hx::IsNotNull( ::tea::SScript_obj::defaultDebug )) {
HXLINE( 269)			this->debugTraces = ( (bool)(::tea::SScript_obj::defaultDebug) );
            		}
HXLINE( 271)		this->interp =  ::hscriptBase::Interp_obj::__alloc( HX_CTX );
HXLINE( 272)		this->interp->script = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 274)		this->parser =  ::hscriptBase::Parser_obj::__alloc( HX_CTX );
HXLINE( 276)		if (( (bool)(preset) )) {
HXLINE( 277)			this->preset();
            		}
HXLINE( 279)		{
HXLINE( 279)			::Dynamic map = ::tea::SScript_obj::globalVariables;
HXDLIN( 279)			::Dynamic _g_map = map;
HXDLIN( 279)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 279)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 279)				::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 279)				 ::Dynamic _g_value = ::haxe::IMap_obj::get(_g_map,key);
HXDLIN( 279)				::String _g_key = key;
HXDLIN( 279)				::String i1 = _g_key;
HXDLIN( 279)				 ::Dynamic k = _g_value;
HXLINE( 281)				if (::hx::IsNotNull( i1 )) {
HXLINE( 282)					this->set(i1,k);
            				}
            			}
            		}
HXLINE( 285)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 287)			this->doFile(scriptPath);
HXLINE( 288)			if (( (bool)(startExecute) )) {
HXLINE( 289)				this->execute();
            			}
HXLINE( 290)			int timer1 = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 290)			Float _hx_tmp;
HXDLIN( 290)			if ((timer1 > 0)) {
HXLINE( 290)				_hx_tmp = (( (Float)(timer1) ) / ( (Float)(1000) ));
            			}
            			else {
HXLINE( 290)				_hx_tmp = ( (Float)(0) );
            			}
HXDLIN( 290)			this->lastReportedTime = (_hx_tmp - time);
HXLINE( 292)			bool _hx_tmp1;
HXDLIN( 292)			bool _hx_tmp2;
HXDLIN( 292)			if (this->debugTraces) {
HXLINE( 292)				_hx_tmp2 = ::hx::IsNotNull( scriptPath );
            			}
            			else {
HXLINE( 292)				_hx_tmp2 = false;
            			}
HXDLIN( 292)			if (_hx_tmp2) {
HXLINE( 292)				_hx_tmp1 = (scriptPath.length > 0);
            			}
            			else {
HXLINE( 292)				_hx_tmp1 = false;
            			}
HXDLIN( 292)			if (_hx_tmp1) {
HXLINE( 294)				if ((this->lastReportedTime == 0)) {
HXLINE( 295)					::haxe::Log_obj::trace(HX_("SScript instance created instantly (0s)",11,34,5c,3a),::hx::SourceInfo(HX_("tea/SScript.hx",df,4f,7e,72),295,HX_("tea.SScript",20,72,1d,6e),HX_("new",60,d0,53,00)));
            				}
            				else {
HXLINE( 297)					::haxe::Log_obj::trace(((HX_("SScript instance created in ",fa,89,6b,12) + this->lastReportedTime) + HX_("s",73,00,00,00)),::hx::SourceInfo(HX_("tea/SScript.hx",df,4f,7e,72),297,HX_("tea.SScript",20,72,1d,6e),HX_("new",60,d0,53,00)));
            				}
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g2 = _hx_e;
HXLINE( 302)				this->lastReportedTime = ( (Float)(-1) );
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}

Dynamic SScript_obj::__CreateEmpty() { return new SScript_obj; }

void *SScript_obj::_hx_vtable = 0;

Dynamic SScript_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SScript_obj > _hx_result = new SScript_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool SScript_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1f20a2ee;
}

void SScript_obj::execute(){
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_312_execute)
HXLINE( 313)		if (this->_destroyed) {
HXLINE( 314)			return;
            		}
HXLINE( 316)		bool _hx_tmp;
HXDLIN( 316)		if (::hx::IsNotNull( this->interp )) {
HXLINE( 316)			_hx_tmp = !(this->active);
            		}
            		else {
HXLINE( 316)			_hx_tmp = true;
            		}
HXDLIN( 316)		if (_hx_tmp) {
HXLINE( 317)			return;
            		}
HXLINE( 319)		::String origin;
HXLINE( 320)		bool origin1;
HXDLIN( 320)		if (::hx::IsNotNull( this->customOrigin )) {
HXLINE( 320)			origin1 = (this->customOrigin.length > 0);
            		}
            		else {
HXLINE( 320)			origin1 = false;
            		}
HXDLIN( 320)		if (origin1) {
HXLINE( 319)			origin = this->customOrigin;
            		}
            		else {
HXLINE( 322)			bool origin2;
HXDLIN( 322)			if (::hx::IsNotNull( this->scriptFile )) {
HXLINE( 322)				origin2 = (this->scriptFile.length > 0);
            			}
            			else {
HXLINE( 322)				origin2 = false;
            			}
HXDLIN( 322)			if (origin2) {
HXLINE( 319)				origin = this->scriptFile;
            			}
            			else {
HXLINE( 319)				origin = HX_("SScript",be,42,6a,f7);
            			}
            		}
HXLINE( 328)		bool _hx_tmp1;
HXDLIN( 328)		if (::hx::IsNotNull( this->script )) {
HXLINE( 328)			_hx_tmp1 = (this->script.length > 0);
            		}
            		else {
HXLINE( 328)			_hx_tmp1 = false;
            		}
HXDLIN( 328)		if (_hx_tmp1) {
HXLINE( 330)			this->resetInterp();
HXLINE( 332)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 334)				 ::Dynamic expr = this->parser->parseString(this->script,origin);
HXLINE( 335)				 ::Dynamic r = this->interp->execute(expr);
HXLINE( 336)				this->returnValue = r;
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE( 338)					 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE( 339)					{
HXLINE( 340)						this->parsingException = ::tea::backend::_SScriptException::SScriptException_Impl__obj::fromException(e);
HXLINE( 341)						this->returnValue = null();
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SScript_obj,execute,(void))

 ::tea::SScript SScript_obj::set(::String key, ::Dynamic obj){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::tea::SScript,_gthis) HXARGC(2)
            		void _hx_run(::String key, ::Dynamic obj){
            			HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_363_set)
HXLINE( 364)			if (::hx::IsNull( key )) {
HXLINE( 365)				return;
            			}
HXLINE( 367)			if (::hscriptBase::Tools_obj::keys->contains(key)) {
HXLINE( 368)				HX_STACK_DO_THROW(((HX_("",00,00,00,00) + key) + HX_(" is a keyword, set something else",e5,46,d7,e6)));
            			}
            			else {
HXLINE( 369)				bool setVar;
HXDLIN( 369)				if (::hx::IsNotNull( obj )) {
HXLINE( 369)					setVar = ::macro::Macro_obj::macroClasses->contains(obj);
            				}
            				else {
HXLINE( 369)					setVar = false;
            				}
HXDLIN( 369)				if (setVar) {
HXLINE( 370)					HX_STACK_DO_THROW(((((HX_("",00,00,00,00) + key) + HX_(" cannot be a Macro class (tried to set ",80,82,e6,c4)) + ::Type_obj::getClassName(obj)) + HX_(")",29,00,00,00)));
            				}
            			}
HXLINE( 372)			if (!(_gthis->active)) {
HXLINE( 373)				return;
            			}
HXLINE( 375)			bool setVar1;
HXDLIN( 375)			if (::hx::IsNotNull( _gthis->interp )) {
HXLINE( 375)				setVar1 = !(_gthis->active);
            			}
            			else {
HXLINE( 375)				setVar1 = true;
            			}
HXDLIN( 375)			if (setVar1) {
HXLINE( 377)				if (_gthis->traces) {
HXLINE( 379)					if (::hx::IsNull( _gthis->interp )) {
HXLINE( 380)						::haxe::Log_obj::trace(HX_("This script is unusable!",cd,d5,e4,32),::hx::SourceInfo(HX_("tea/SScript.hx",df,4f,7e,72),380,HX_("tea.SScript",20,72,1d,6e),HX_("set",a2,9b,57,00)));
            					}
            					else {
HXLINE( 382)						::haxe::Log_obj::trace(HX_("This script is not active!",ab,75,7e,36),::hx::SourceInfo(HX_("tea/SScript.hx",df,4f,7e,72),382,HX_("tea.SScript",20,72,1d,6e),HX_("set",a2,9b,57,00)));
            					}
            				}
            			}
            			else {
HXLINE( 386)				 ::Dynamic v = obj;
HXDLIN( 386)				_gthis->interp->variables->set(key,v);
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_355_set)
HXDLIN( 355)		 ::tea::SScript _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 356)		if (this->_destroyed) {
HXLINE( 357)			return null();
            		}
HXLINE( 359)		bool _hx_tmp;
HXDLIN( 359)		bool _hx_tmp1;
HXDLIN( 359)		if (::hx::IsNotNull( obj )) {
HXLINE( 359)			_hx_tmp1 = ::Std_obj::isOfType(obj,::hx::ClassOf< ::hx::Class >());
            		}
            		else {
HXLINE( 359)			_hx_tmp1 = false;
            		}
HXDLIN( 359)		if (_hx_tmp1) {
HXLINE( 359)			_hx_tmp = this->notAllowedClasses->contains(obj);
            		}
            		else {
HXLINE( 359)			_hx_tmp = false;
            		}
HXDLIN( 359)		if (_hx_tmp) {
HXLINE( 360)			HX_STACK_DO_THROW(((HX_("Tried to set ",0d,8f,18,62) + ::Type_obj::getClassName(obj)) + HX_(" which is not allowed.",46,be,51,07)));
            		}
HXLINE( 362)		 ::Dynamic setVar =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE( 389)		setVar(key,obj);
HXLINE( 390)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(SScript_obj,set,return )

 ::tea::SScript SScript_obj::setClass(::hx::Class cl){
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_400_setClass)
HXLINE( 401)		if (this->_destroyed) {
HXLINE( 402)			return null();
            		}
HXLINE( 404)		if (::hx::IsNull( cl )) {
HXLINE( 406)			if (this->traces) {
HXLINE( 408)				::haxe::Log_obj::trace(HX_("Class cannot be null",ef,ce,40,49),::hx::SourceInfo(HX_("tea/SScript.hx",df,4f,7e,72),408,HX_("tea.SScript",20,72,1d,6e),HX_("setClass",36,e1,8c,56)));
            			}
HXLINE( 411)			return null();
            		}
HXLINE( 414)		::String clName = ::Type_obj::getClassName(cl);
HXLINE( 415)		if (::hx::IsNotNull( clName )) {
HXLINE( 417)			::Array< ::String > splitCl = clName.split(HX_(".",2e,00,00,00));
HXLINE( 418)			if ((splitCl->length > 1)) {
HXLINE( 420)				clName = splitCl->__get((splitCl->length - 1));
            			}
HXLINE( 423)			this->set(clName,cl);
            		}
HXLINE( 425)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SScript_obj,setClass,return )

 ::tea::SScript SScript_obj::setClassString(::String cl){
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_435_setClassString)
HXLINE( 436)		if (this->_destroyed) {
HXLINE( 437)			return null();
            		}
HXLINE( 439)		bool _hx_tmp;
HXDLIN( 439)		if (::hx::IsNotNull( cl )) {
HXLINE( 439)			_hx_tmp = (cl.length < 1);
            		}
            		else {
HXLINE( 439)			_hx_tmp = true;
            		}
HXDLIN( 439)		if (_hx_tmp) {
HXLINE( 441)			if (this->traces) {
HXLINE( 442)				::haxe::Log_obj::trace(HX_("Class cannot be null",ef,ce,40,49),::hx::SourceInfo(HX_("tea/SScript.hx",df,4f,7e,72),442,HX_("tea.SScript",20,72,1d,6e),HX_("setClassString",a7,4a,37,30)));
            			}
HXLINE( 444)			return null();
            		}
HXLINE( 447)		::hx::Class cls = ::Type_obj::resolveClass(cl);
HXLINE( 448)		if (::hx::IsNotNull( cls )) {
HXLINE( 450)			if ((cl.split(HX_(".",2e,00,00,00))->length > 1)) {
HXLINE( 452)				cl = cl.split(HX_(".",2e,00,00,00))->__get((cl.split(HX_(".",2e,00,00,00))->length - 1));
            			}
HXLINE( 455)			this->set(cl,cls);
            		}
HXLINE( 457)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SScript_obj,setClassString,return )

 ::tea::SScript SScript_obj::setSpecialObject( ::Dynamic obj, ::Dynamic __o_includeFunctions,::Array< ::String > exclusions){
            		 ::Dynamic includeFunctions = __o_includeFunctions;
            		if (::hx::IsNull(__o_includeFunctions)) includeFunctions = true;
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_472_setSpecialObject)
HXLINE( 473)		if (this->_destroyed) {
HXLINE( 474)			return null();
            		}
HXLINE( 475)		if (!(this->active)) {
HXLINE( 476)			return ::hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 477)		if (::hx::IsNull( obj )) {
HXLINE( 478)			return ::hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 479)		if (::hx::IsNull( exclusions )) {
HXLINE( 480)			exclusions = ::Array_obj< ::String >::__new();
            		}
HXLINE( 482)		::cpp::VirtualArray types = ::cpp::VirtualArray_obj::__new(5)->init(0,::hx::ClassOf< int >())->init(1,::hx::ClassOf< ::String >())->init(2,::hx::ClassOf< ::Float >())->init(3,::hx::ClassOf< bool >())->init(4,::hx::ArrayBase::__mClass);
HXLINE( 483)		{
HXLINE( 483)			int _g = 0;
HXDLIN( 483)			while((_g < types->get_length())){
HXLINE( 483)				 ::Dynamic i = types->__get(_g);
HXDLIN( 483)				_g = (_g + 1);
HXLINE( 484)				if (::Std_obj::isOfType(obj,i)) {
HXLINE( 485)					HX_STACK_DO_THROW((HX_("Special object cannot be ",5a,81,26,44) + ::Std_obj::string(i)));
            				}
            			}
            		}
HXLINE( 487)		if (::hx::IsNull( this->interp->specialObject )) {
HXLINE( 488)			this->interp->specialObject =  ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("exclusions",e5,ad,ac,ac),null())
            				->setFixed(1,HX_("obj",f7,8f,54,00),null())
            				->setFixed(2,HX_("includeFunctions",13,e7,b1,03),null()));
            		}
HXLINE( 490)		this->interp->specialObject->__SetField(HX_("obj",f7,8f,54,00),obj,::hx::paccDynamic);
HXLINE( 491)		this->interp->specialObject->__SetField(HX_("exclusions",e5,ad,ac,ac),exclusions->copy(),::hx::paccDynamic);
HXLINE( 492)		this->interp->specialObject->__SetField(HX_("includeFunctions",13,e7,b1,03),includeFunctions,::hx::paccDynamic);
HXLINE( 493)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(SScript_obj,setSpecialObject,return )

 ::haxe::ds::StringMap SScript_obj::locals(){
            	HX_GC_STACKFRAME(&_hx_pos_ffc4a688e712d40b_502_locals)
HXLINE( 503)		if (this->_destroyed) {
HXLINE( 504)			return null();
            		}
HXLINE( 506)		if (!(this->active)) {
HXLINE( 507)			return  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
HXLINE( 509)		 ::haxe::ds::StringMap newMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 510)		{
HXLINE( 510)			 ::Dynamic i = this->interp->locals->keys();
HXDLIN( 510)			while(( (bool)(i->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 510)				::String i1 = ( (::String)(i->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 512)				 ::Dynamic v = this->interp->locals->get(i1);
HXLINE( 513)				if (::hx::IsNotNull( v )) {
HXLINE( 514)					 ::Dynamic v1 =  ::Dynamic(v->__Field(HX_("r",72,00,00,00),::hx::paccDynamic));
HXDLIN( 514)					newMap->set(i1,v1);
            				}
            			}
            		}
HXLINE( 516)		return newMap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SScript_obj,locals,return )

 ::tea::SScript SScript_obj::unset(::String key){
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_527_unset)
HXLINE( 528)		if (this->_destroyed) {
HXLINE( 529)			return null();
            		}
HXLINE( 531)		bool _hx_tmp;
HXDLIN( 531)		bool _hx_tmp1;
HXDLIN( 531)		bool _hx_tmp2;
HXDLIN( 531)		if (::hx::IsNotNull( this->interp )) {
HXLINE( 531)			_hx_tmp2 = !(this->active);
            		}
            		else {
HXLINE( 531)			_hx_tmp2 = true;
            		}
HXDLIN( 531)		if (!(_hx_tmp2)) {
HXLINE( 531)			_hx_tmp1 = ::hx::IsNull( key );
            		}
            		else {
HXLINE( 531)			_hx_tmp1 = true;
            		}
HXDLIN( 531)		if (!(_hx_tmp1)) {
HXLINE( 531)			_hx_tmp = !(this->interp->variables->exists(key));
            		}
            		else {
HXLINE( 531)			_hx_tmp = true;
            		}
HXDLIN( 531)		if (_hx_tmp) {
HXLINE( 532)			return null();
            		}
HXLINE( 534)		this->interp->variables->remove(key);
HXLINE( 535)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SScript_obj,unset,return )

 ::Dynamic SScript_obj::get(::String key){
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_546_get)
HXLINE( 547)		if (this->_destroyed) {
HXLINE( 548)			return null();
            		}
HXLINE( 550)		bool _hx_tmp;
HXDLIN( 550)		if (::hx::IsNotNull( this->interp )) {
HXLINE( 550)			_hx_tmp = !(this->active);
            		}
            		else {
HXLINE( 550)			_hx_tmp = true;
            		}
HXDLIN( 550)		if (_hx_tmp) {
HXLINE( 552)			if (this->traces) {
HXLINE( 554)				if (::hx::IsNull( this->interp )) {
HXLINE( 555)					::haxe::Log_obj::trace(HX_("This script is unusable!",cd,d5,e4,32),::hx::SourceInfo(HX_("tea/SScript.hx",df,4f,7e,72),555,HX_("tea.SScript",20,72,1d,6e),HX_("get",96,80,4e,00)));
            				}
            				else {
HXLINE( 557)					::haxe::Log_obj::trace(HX_("This script is not active!",ab,75,7e,36),::hx::SourceInfo(HX_("tea/SScript.hx",df,4f,7e,72),557,HX_("tea.SScript",20,72,1d,6e),HX_("get",96,80,4e,00)));
            				}
            			}
HXLINE( 560)			return null();
            		}
HXLINE( 563)		 ::haxe::ds::StringMap l = this->locals();
HXLINE( 564)		if (l->exists(key)) {
HXLINE( 565)			return l->get(key);
            		}
HXLINE( 567)		if (this->exists(key)) {
HXLINE( 567)			return this->interp->variables->get(key);
            		}
            		else {
HXLINE( 567)			return null();
            		}
HXDLIN( 567)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(SScript_obj,get,return )

 ::Dynamic SScript_obj::call(::String func,::cpp::VirtualArray args){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,caller,::Array< ::String >,pushedExceptions) HXARGC(1)
            		void _hx_run(::String e){
            			HX_GC_STACKFRAME(&_hx_pos_ffc4a688e712d40b_616_call)
HXLINE( 617)			if (!(pushedExceptions->contains(e))) {
HXLINE( 618)				::Array< ::Dynamic> caller1 = ( (::Array< ::Dynamic>)(caller->__get(0)->__Field(HX_("exceptions",44,35,34,1d),::hx::paccDynamic)) );
HXDLIN( 618)				caller1->push(::tea::backend::_SScriptException::SScriptException_Impl__obj::_new( ::haxe::Exception_obj::__alloc( HX_CTX ,e,null(),null())));
            			}
HXLINE( 620)			pushedExceptions->push(e);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_ffc4a688e712d40b_581_call)
HXLINE( 582)		if (this->_destroyed) {
HXLINE( 584)			::String _hx_tmp;
HXDLIN( 584)			bool _hx_tmp1;
HXDLIN( 584)			if (::hx::IsNotNull( this->scriptFile )) {
HXLINE( 584)				_hx_tmp1 = (this->scriptFile.length > 0);
            			}
            			else {
HXLINE( 584)				_hx_tmp1 = false;
            			}
HXDLIN( 584)			if (_hx_tmp1) {
HXLINE( 584)				_hx_tmp = this->scriptFile;
            			}
            			else {
HXLINE( 584)				_hx_tmp = HX_("SScript instance",37,b5,90,6d);
            			}
HXLINE( 583)			return  ::Dynamic(::hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("succeeded",61,56,29,fb),false)
            				->setFixed(1,HX_("calledFunction",b5,00,41,03),func)
            				->setFixed(2,HX_("exceptions",44,35,34,1d),::Array_obj< ::Dynamic>::__new(1)->init(0,::tea::backend::_SScriptException::SScriptException_Impl__obj::_new( ::haxe::Exception_obj::__alloc( HX_CTX ,(_hx_tmp + HX_(" is destroyed.",8b,32,93,44)),null(),null()))))
            				->setFixed(3,HX_("returnValue",a1,4c,95,3e),null()));
            		}
HXLINE( 590)		if (!(this->active)) {
HXLINE( 592)			::String _hx_tmp2;
HXDLIN( 592)			bool _hx_tmp3;
HXDLIN( 592)			if (::hx::IsNotNull( this->scriptFile )) {
HXLINE( 592)				_hx_tmp3 = (this->scriptFile.length > 0);
            			}
            			else {
HXLINE( 592)				_hx_tmp3 = false;
            			}
HXDLIN( 592)			if (_hx_tmp3) {
HXLINE( 592)				_hx_tmp2 = this->scriptFile;
            			}
            			else {
HXLINE( 592)				_hx_tmp2 = HX_("SScript instance",37,b5,90,6d);
            			}
HXLINE( 591)			return  ::Dynamic(::hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("succeeded",61,56,29,fb),false)
            				->setFixed(1,HX_("calledFunction",b5,00,41,03),func)
            				->setFixed(2,HX_("exceptions",44,35,34,1d),::Array_obj< ::Dynamic>::__new(1)->init(0,::tea::backend::_SScriptException::SScriptException_Impl__obj::_new( ::haxe::Exception_obj::__alloc( HX_CTX ,(_hx_tmp2 + HX_(" is not active.",85,72,b2,e8)),null(),null()))))
            				->setFixed(3,HX_("returnValue",a1,4c,95,3e),null()));
            		}
HXLINE( 598)		int timer = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 598)		Float time;
HXDLIN( 598)		if ((timer > 0)) {
HXLINE( 598)			time = (( (Float)(timer) ) / ( (Float)(1000) ));
            		}
            		else {
HXLINE( 598)			time = ( (Float)(0) );
            		}
HXLINE( 600)		::String scriptFile;
HXDLIN( 600)		bool scriptFile1;
HXDLIN( 600)		if (::hx::IsNotNull( this->scriptFile )) {
HXLINE( 600)			scriptFile1 = (this->scriptFile.length > 0);
            		}
            		else {
HXLINE( 600)			scriptFile1 = false;
            		}
HXDLIN( 600)		if (scriptFile1) {
HXLINE( 600)			scriptFile = this->scriptFile;
            		}
            		else {
HXLINE( 600)			scriptFile = HX_("",00,00,00,00);
            		}
HXLINE( 601)		::Array< ::Dynamic> caller = ::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("succeeded",61,56,29,fb),false)
            			->setFixed(1,HX_("calledFunction",b5,00,41,03),func)
            			->setFixed(2,HX_("exceptions",44,35,34,1d),::Array_obj< ::Dynamic>::__new(0))
            			->setFixed(3,HX_("returnValue",a1,4c,95,3e),null())));
HXLINE( 608)		bool _hx_tmp4;
HXDLIN( 608)		if (::hx::IsNotNull( scriptFile )) {
HXLINE( 608)			_hx_tmp4 = (scriptFile.length > 0);
            		}
            		else {
HXLINE( 608)			_hx_tmp4 = false;
            		}
HXDLIN( 608)		if (_hx_tmp4) {
HXLINE( 609)			::Reflect_obj::setField(caller->__get(0),HX_("fileName",e7,5a,43,62),scriptFile);
            		}
HXLINE( 611)		if (::hx::IsNull( args )) {
HXLINE( 612)			args = ::cpp::VirtualArray_obj::__new();
            		}
HXLINE( 614)		::Array< ::String > pushedExceptions = ::Array_obj< ::String >::__new();
HXLINE( 615)		 ::Dynamic pushException =  ::Dynamic(new _hx_Closure_0(caller,pushedExceptions));
HXLINE( 622)		if (::hx::IsNull( func )) {
HXLINE( 624)			if (this->traces) {
HXLINE( 625)				::haxe::Log_obj::trace(((HX_("Function name cannot be null for ",63,f7,68,cd) + scriptFile) + HX_("!",21,00,00,00)),::hx::SourceInfo(HX_("tea/SScript.hx",df,4f,7e,72),625,HX_("tea.SScript",20,72,1d,6e),HX_("call",9e,18,ba,41)));
            			}
HXLINE( 627)			pushException(((HX_("Function name cannot be null for ",63,f7,68,cd) + scriptFile) + HX_("!",21,00,00,00)));
HXLINE( 628)			return caller->__get(0);
            		}
HXLINE( 631)		 ::Dynamic fun = this->get(func);
HXLINE( 632)		bool _hx_tmp5;
HXDLIN( 632)		if (this->exists(func)) {
HXLINE( 632)			_hx_tmp5 = ::hx::IsPointerNotEq( ::Type_obj::_hx_typeof(fun),::ValueType_obj::TFunction_dyn() );
            		}
            		else {
HXLINE( 632)			_hx_tmp5 = false;
            		}
HXDLIN( 632)		if (_hx_tmp5) {
HXLINE( 634)			if (this->traces) {
HXLINE( 635)				::haxe::Log_obj::trace(((HX_("",00,00,00,00) + func) + HX_(" is not a function",fa,f7,c7,36)),::hx::SourceInfo(HX_("tea/SScript.hx",df,4f,7e,72),635,HX_("tea.SScript",20,72,1d,6e),HX_("call",9e,18,ba,41)));
            			}
HXLINE( 637)			pushException(((HX_("",00,00,00,00) + func) + HX_(" is not a function",fa,f7,c7,36)));
            		}
            		else {
HXLINE( 639)			bool _hx_tmp6;
HXDLIN( 639)			if (::hx::IsNotNull( this->interp )) {
HXLINE( 639)				_hx_tmp6 = !(this->exists(func));
            			}
            			else {
HXLINE( 639)				_hx_tmp6 = true;
            			}
HXDLIN( 639)			if (_hx_tmp6) {
HXLINE( 641)				if (::hx::IsNull( this->interp )) {
HXLINE( 643)					if (this->traces) {
HXLINE( 644)						::haxe::Log_obj::trace(HX_("Interpreter is null!",4a,de,45,aa),::hx::SourceInfo(HX_("tea/SScript.hx",df,4f,7e,72),644,HX_("tea.SScript",20,72,1d,6e),HX_("call",9e,18,ba,41)));
            					}
HXLINE( 646)					pushException(HX_("Interpreter is null!",4a,de,45,aa));
            				}
            				else {
HXLINE( 650)					if (this->traces) {
HXLINE( 651)						::haxe::Log_obj::trace(((((HX_("Function ",e8,e9,d5,55) + func) + HX_(" does not exist in ",de,a3,13,4c)) + scriptFile) + HX_(".",2e,00,00,00)),::hx::SourceInfo(HX_("tea/SScript.hx",df,4f,7e,72),651,HX_("tea.SScript",20,72,1d,6e),HX_("call",9e,18,ba,41)));
            					}
HXLINE( 653)					bool _hx_tmp7;
HXDLIN( 653)					if (::hx::IsNotNull( scriptFile )) {
HXLINE( 653)						_hx_tmp7 = (scriptFile.length > 1);
            					}
            					else {
HXLINE( 653)						_hx_tmp7 = false;
            					}
HXDLIN( 653)					if (_hx_tmp7) {
HXLINE( 654)						pushException(((((HX_("Function ",e8,e9,d5,55) + func) + HX_(" does not exist in ",de,a3,13,4c)) + scriptFile) + HX_(".",2e,00,00,00)));
            					}
            					else {
HXLINE( 656)						pushException(((HX_("Function ",e8,e9,d5,55) + func) + HX_(" does not exist in SScript instance.",79,fd,5b,f3)));
            					}
            				}
            			}
            			else {
HXLINE( 661)				 ::Dynamic oldCaller = caller->__get(0);
HXLINE( 662)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 664)					 ::Dynamic functionField = ::Reflect_obj::callMethod(::hx::ObjectPtr<OBJ_>(this),fun,args);
HXLINE( 665)					caller[0] =  ::Dynamic(::hx::Anon_obj::Create(4)
            						->setFixed(0,HX_("succeeded",61,56,29,fb),true)
            						->setFixed(1,HX_("calledFunction",b5,00,41,03),func)
            						->setFixed(2,HX_("exceptions",44,35,34,1d), ::Dynamic(caller->__get(0)->__Field(HX_("exceptions",44,35,34,1d),::hx::paccDynamic)))
            						->setFixed(3,HX_("returnValue",a1,4c,95,3e),functionField));
HXLINE( 672)					bool _hx_tmp8;
HXDLIN( 672)					if (::hx::IsNotNull( scriptFile )) {
HXLINE( 672)						_hx_tmp8 = (scriptFile.length > 0);
            					}
            					else {
HXLINE( 672)						_hx_tmp8 = false;
            					}
HXDLIN( 672)					if (_hx_tmp8) {
HXLINE( 673)						::Reflect_obj::setField(caller->__get(0),HX_("fileName",e7,5a,43,62),scriptFile);
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
HXLINE( 676)						 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE( 677)						{
HXLINE( 678)							caller[0] = oldCaller;
HXLINE( 679)							::Array< ::Dynamic> caller1 = ( (::Array< ::Dynamic>)(caller->__get(0)->__Field(HX_("exceptions",44,35,34,1d),::hx::paccDynamic)) );
HXDLIN( 679)							caller1->insert(0,::tea::backend::_SScriptException::SScriptException_Impl__obj::_new(e));
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXLINE( 682)		int timer1 = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 682)		Float _hx_tmp9;
HXDLIN( 682)		if ((timer1 > 0)) {
HXLINE( 682)			_hx_tmp9 = (( (Float)(timer1) ) / ( (Float)(1000) ));
            		}
            		else {
HXLINE( 682)			_hx_tmp9 = ( (Float)(0) );
            		}
HXDLIN( 682)		this->lastReportedCallTime = (_hx_tmp9 - time);
HXLINE( 684)		return caller->__get(0);
            	}


HX_DEFINE_DYNAMIC_FUNC2(SScript_obj,call,return )

 ::tea::SScript SScript_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_693_clear)
HXLINE( 694)		if (this->_destroyed) {
HXLINE( 695)			return null();
            		}
HXLINE( 696)		if (!(this->active)) {
HXLINE( 697)			return ::hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 699)		if (::hx::IsNull( this->interp )) {
HXLINE( 700)			return ::hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 702)		::Array< ::String > importantThings = ::Array_obj< ::String >::fromData( _hx_array_data_6e1d7220_18,4);
HXLINE( 704)		{
HXLINE( 704)			 ::Dynamic i = this->interp->variables->keys();
HXDLIN( 704)			while(( (bool)(i->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 704)				::String i1 = ( (::String)(i->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 705)				if (!(importantThings->contains(i1))) {
HXLINE( 706)					this->interp->variables->remove(i1);
            				}
            			}
            		}
HXLINE( 708)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SScript_obj,clear,return )

bool SScript_obj::exists(::String key){
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_717_exists)
HXLINE( 718)		if (this->_destroyed) {
HXLINE( 719)			return false;
            		}
HXLINE( 720)		if (!(this->active)) {
HXLINE( 721)			return false;
            		}
HXLINE( 723)		if (::hx::IsNull( this->interp )) {
HXLINE( 724)			return false;
            		}
HXLINE( 725)		 ::haxe::ds::StringMap l = this->locals();
HXLINE( 726)		if (l->exists(key)) {
HXLINE( 727)			return l->exists(key);
            		}
HXLINE( 729)		return this->interp->variables->exists(key);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SScript_obj,exists,return )

void SScript_obj::preset(){
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_737_preset)
HXLINE( 738)		if (this->_destroyed) {
HXLINE( 739)			return;
            		}
HXLINE( 740)		if (!(this->active)) {
HXLINE( 741)			return;
            		}
HXLINE( 743)		this->setClass(::hx::ClassOf< ::Date >());
HXLINE( 744)		this->setClass(::hx::ClassOf< ::DateTools >());
HXLINE( 745)		this->setClass(::hx::ClassOf< ::Math >());
HXLINE( 746)		this->setClass(::hx::ClassOf< ::Reflect >());
HXLINE( 747)		this->setClass(::hx::ClassOf< ::Std >());
HXLINE( 748)		this->setClass(::hx::ClassOf< ::tea::SScript >());
HXLINE( 749)		this->setClass(::hx::ClassOf< ::StringTools >());
HXLINE( 750)		this->setClass(::hx::ClassOf< ::Type >());
HXLINE( 753)		this->setClass(::hx::ClassOf< ::sys::io::File >());
HXLINE( 754)		this->setClass(::hx::ClassOf< ::sys::FileSystem >());
HXLINE( 755)		this->setClass(::hx::ClassOf< ::Sys >());
            	}


HX_DEFINE_DYNAMIC_FUNC0(SScript_obj,preset,(void))

void SScript_obj::resetInterp(){
            	HX_GC_STACKFRAME(&_hx_pos_ffc4a688e712d40b_766_resetInterp)
HXLINE( 767)		if (this->_destroyed) {
HXLINE( 768)			return;
            		}
HXLINE( 769)		if (::hx::IsNull( this->interp )) {
HXLINE( 770)			return;
            		}
HXLINE( 772)		this->interp->locals =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 773)		while((this->interp->declared->length > 0)){
HXLINE( 774)			this->interp->declared->pop();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SScript_obj,resetInterp,(void))

void SScript_obj::doFile(::String scriptPath){
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_778_doFile)
HXLINE( 779)		this->parsingException = null();
HXLINE( 781)		if (this->_destroyed) {
HXLINE( 782)			return;
            		}
HXLINE( 784)		bool _hx_tmp;
HXDLIN( 784)		bool _hx_tmp1;
HXDLIN( 784)		if (::hx::IsNotNull( scriptPath )) {
HXLINE( 784)			_hx_tmp1 = (scriptPath.length < 1);
            		}
            		else {
HXLINE( 784)			_hx_tmp1 = true;
            		}
HXDLIN( 784)		if (!(_hx_tmp1)) {
HXLINE( 784)			_hx_tmp = ::tea::SScript_obj::get_BlankReg()->match(scriptPath);
            		}
            		else {
HXLINE( 784)			_hx_tmp = true;
            		}
HXDLIN( 784)		if (_hx_tmp) {
HXLINE( 786)			this->ID = (::tea::SScript_obj::IDCount + 1);
HXLINE( 787)			::tea::SScript_obj::IDCount++;
HXLINE( 788)			{
HXLINE( 788)				::Dynamic this1 = ::tea::SScript_obj::global;
HXDLIN( 788)				( ( ::haxe::ds::StringMap)(this1) )->set(::Std_obj::string(this->ID),::hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE( 789)			return;
            		}
HXLINE( 792)		bool _hx_tmp2;
HXDLIN( 792)		if (::hx::IsNotNull( scriptPath )) {
HXLINE( 792)			_hx_tmp2 = (scriptPath.length > 0);
            		}
            		else {
HXLINE( 792)			_hx_tmp2 = false;
            		}
HXDLIN( 792)		if (_hx_tmp2) {
HXLINE( 795)			if (::sys::FileSystem_obj::exists(scriptPath)) {
HXLINE( 797)				this->scriptFile = scriptPath;
HXLINE( 798)				this->script = ::sys::io::File_obj::getContent(scriptPath);
            			}
            			else {
HXLINE( 802)				this->scriptFile = HX_("",00,00,00,00);
HXLINE( 803)				this->script = scriptPath;
            			}
HXLINE( 810)			bool _hx_tmp3;
HXDLIN( 810)			if (::hx::IsNotNull( this->scriptFile )) {
HXLINE( 810)				_hx_tmp3 = (this->scriptFile.length > 0);
            			}
            			else {
HXLINE( 810)				_hx_tmp3 = false;
            			}
HXDLIN( 810)			if (_hx_tmp3) {
HXLINE( 811)				::tea::SScript_obj::global->set(this->scriptFile,::hx::ObjectPtr<OBJ_>(this));
            			}
            			else {
HXLINE( 812)				bool _hx_tmp4;
HXDLIN( 812)				if (::hx::IsNotNull( this->script )) {
HXLINE( 812)					_hx_tmp4 = (this->script.length > 0);
            				}
            				else {
HXLINE( 812)					_hx_tmp4 = false;
            				}
HXDLIN( 812)				if (_hx_tmp4) {
HXLINE( 813)					::tea::SScript_obj::global->set(this->script,::hx::ObjectPtr<OBJ_>(this));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SScript_obj,doFile,(void))

 ::tea::SScript SScript_obj::doString(::String string,::String origin){
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_830_doString)
HXLINE( 831)		if (this->_destroyed) {
HXLINE( 832)			return null();
            		}
HXLINE( 833)		if (!(this->active)) {
HXLINE( 834)			return null();
            		}
HXLINE( 835)		bool _hx_tmp;
HXDLIN( 835)		bool _hx_tmp1;
HXDLIN( 835)		if (::hx::IsNotNull( string )) {
HXLINE( 835)			_hx_tmp1 = (string.length < 1);
            		}
            		else {
HXLINE( 835)			_hx_tmp1 = true;
            		}
HXDLIN( 835)		if (!(_hx_tmp1)) {
HXLINE( 835)			_hx_tmp = ::tea::SScript_obj::get_BlankReg()->match(string);
            		}
            		else {
HXLINE( 835)			_hx_tmp = true;
            		}
HXDLIN( 835)		if (_hx_tmp) {
HXLINE( 836)			return ::hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 838)		this->parsingException = null();
HXLINE( 840)		int timer = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 840)		Float time;
HXDLIN( 840)		if ((timer > 0)) {
HXLINE( 840)			time = (( (Float)(timer) ) / ( (Float)(1000) ));
            		}
            		else {
HXLINE( 840)			time = ( (Float)(0) );
            		}
HXLINE( 841)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 844)			if (::sys::FileSystem_obj::exists(string)) {
HXLINE( 846)				this->scriptFile = string;
HXLINE( 847)				origin = string;
HXLINE( 848)				string = ::sys::io::File_obj::getContent(string);
            			}
HXLINE( 852)			::String og = origin;
HXLINE( 853)			bool _hx_tmp2;
HXDLIN( 853)			if (::hx::IsNotNull( og )) {
HXLINE( 853)				_hx_tmp2 = (og.length > 0);
            			}
            			else {
HXLINE( 853)				_hx_tmp2 = false;
            			}
HXDLIN( 853)			if (_hx_tmp2) {
HXLINE( 854)				this->set_customOrigin(og);
            			}
HXLINE( 855)			bool _hx_tmp3;
HXDLIN( 855)			if (::hx::IsNotNull( og )) {
HXLINE( 855)				_hx_tmp3 = (og.length < 1);
            			}
            			else {
HXLINE( 855)				_hx_tmp3 = true;
            			}
HXDLIN( 855)			if (_hx_tmp3) {
HXLINE( 856)				og = this->customOrigin;
            			}
HXLINE( 857)			bool _hx_tmp4;
HXDLIN( 857)			if (::hx::IsNotNull( og )) {
HXLINE( 857)				_hx_tmp4 = (og.length < 1);
            			}
            			else {
HXLINE( 857)				_hx_tmp4 = true;
            			}
HXDLIN( 857)			if (_hx_tmp4) {
HXLINE( 858)				og = HX_("SScript",be,42,6a,f7);
            			}
HXLINE( 860)			bool _hx_tmp5;
HXDLIN( 860)			if (this->active) {
HXLINE( 860)				_hx_tmp5 = ::hx::IsNull( this->interp );
            			}
            			else {
HXLINE( 860)				_hx_tmp5 = true;
            			}
HXDLIN( 860)			if (_hx_tmp5) {
HXLINE( 861)				return null();
            			}
HXLINE( 863)			this->resetInterp();
HXLINE( 865)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 867)				this->script = string;
HXLINE( 869)				bool _hx_tmp6;
HXDLIN( 869)				if (::hx::IsNotNull( this->scriptFile )) {
HXLINE( 869)					_hx_tmp6 = (this->scriptFile.length > 0);
            				}
            				else {
HXLINE( 869)					_hx_tmp6 = false;
            				}
HXDLIN( 869)				if (_hx_tmp6) {
HXLINE( 871)					if (::hx::IsNotNull( this->ID )) {
HXLINE( 872)						::Dynamic this1 = ::tea::SScript_obj::global;
HXDLIN( 872)						( ( ::haxe::ds::StringMap)(this1) )->remove(::Std_obj::string(this->ID));
            					}
HXLINE( 873)					::tea::SScript_obj::global->set(this->scriptFile,::hx::ObjectPtr<OBJ_>(this));
            				}
            				else {
HXLINE( 875)					bool _hx_tmp7;
HXDLIN( 875)					if (::hx::IsNotNull( this->script )) {
HXLINE( 875)						_hx_tmp7 = (this->script.length > 0);
            					}
            					else {
HXLINE( 875)						_hx_tmp7 = false;
            					}
HXDLIN( 875)					if (_hx_tmp7) {
HXLINE( 877)						if (::hx::IsNotNull( this->ID )) {
HXLINE( 878)							::Dynamic this2 = ::tea::SScript_obj::global;
HXDLIN( 878)							( ( ::haxe::ds::StringMap)(this2) )->remove(::Std_obj::string(this->ID));
            						}
HXLINE( 879)						::tea::SScript_obj::global->set(this->script,::hx::ObjectPtr<OBJ_>(this));
            					}
            				}
HXLINE( 882)				 ::Dynamic expr = this->parser->parseString(this->script,og);
HXLINE( 883)				 ::Dynamic r = this->interp->execute(expr);
HXLINE( 884)				this->returnValue = r;
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE( 886)					 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE( 887)					{
HXLINE( 888)						this->script = HX_("",00,00,00,00);
HXLINE( 889)						this->parsingException = ::tea::backend::_SScriptException::SScriptException_Impl__obj::fromException(e);
HXLINE( 890)						this->returnValue = null();
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 893)			int timer1 = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 893)			Float _hx_tmp8;
HXDLIN( 893)			if ((timer1 > 0)) {
HXLINE( 893)				_hx_tmp8 = (( (Float)(timer1) ) / ( (Float)(1000) ));
            			}
            			else {
HXLINE( 893)				_hx_tmp8 = ( (Float)(0) );
            			}
HXDLIN( 893)			this->lastReportedTime = (_hx_tmp8 - time);
HXLINE( 895)			if (this->debugTraces) {
HXLINE( 897)				if ((this->lastReportedTime == 0)) {
HXLINE( 898)					::haxe::Log_obj::trace(HX_("SScript instance created instantly (0s)",11,34,5c,3a),::hx::SourceInfo(HX_("tea/SScript.hx",df,4f,7e,72),898,HX_("tea.SScript",20,72,1d,6e),HX_("doString",bc,ae,47,a5)));
            				}
            				else {
HXLINE( 900)					::haxe::Log_obj::trace(((HX_("SScript instance created in ",fa,89,6b,12) + this->lastReportedTime) + HX_("s",73,00,00,00)),::hx::SourceInfo(HX_("tea/SScript.hx",df,4f,7e,72),900,HX_("tea.SScript",20,72,1d,6e),HX_("doString",bc,ae,47,a5)));
            				}
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g1 = _hx_e;
HXLINE( 903)				this->lastReportedTime = ( (Float)(-1) );
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 905)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(SScript_obj,doString,return )

::String SScript_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_909_toString)
HXLINE( 910)		if (this->_destroyed) {
HXLINE( 911)			return HX_("null",87,9e,0e,49);
            		}
HXLINE( 913)		bool _hx_tmp;
HXDLIN( 913)		if (::hx::IsNotNull( this->scriptFile )) {
HXLINE( 913)			_hx_tmp = (this->scriptFile.length > 0);
            		}
            		else {
HXLINE( 913)			_hx_tmp = false;
            		}
HXDLIN( 913)		if (_hx_tmp) {
HXLINE( 914)			return this->scriptFile;
            		}
HXLINE( 916)		return HX_("[SScript SScript]",dc,5f,eb,25);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SScript_obj,toString,return )

void SScript_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_979_destroy)
HXLINE( 980)		if (this->_destroyed) {
HXLINE( 981)			return;
            		}
HXLINE( 983)		bool _hx_tmp;
HXDLIN( 983)		bool _hx_tmp1;
HXDLIN( 983)		if (::tea::SScript_obj::global->exists(this->script)) {
HXLINE( 983)			_hx_tmp1 = ::hx::IsNotNull( this->script );
            		}
            		else {
HXLINE( 983)			_hx_tmp1 = false;
            		}
HXDLIN( 983)		if (_hx_tmp1) {
HXLINE( 983)			_hx_tmp = (this->script.length > 0);
            		}
            		else {
HXLINE( 983)			_hx_tmp = false;
            		}
HXDLIN( 983)		if (_hx_tmp) {
HXLINE( 984)			::tea::SScript_obj::global->remove(this->script);
            		}
HXLINE( 985)		bool _hx_tmp2;
HXDLIN( 985)		bool _hx_tmp3;
HXDLIN( 985)		if (::tea::SScript_obj::global->exists(this->scriptFile)) {
HXLINE( 985)			_hx_tmp3 = ::hx::IsNotNull( this->scriptFile );
            		}
            		else {
HXLINE( 985)			_hx_tmp3 = false;
            		}
HXDLIN( 985)		if (_hx_tmp3) {
HXLINE( 985)			_hx_tmp2 = (this->scriptFile.length > 0);
            		}
            		else {
HXLINE( 985)			_hx_tmp2 = false;
            		}
HXDLIN( 985)		if (_hx_tmp2) {
HXLINE( 986)			::tea::SScript_obj::global->remove(this->scriptFile);
            		}
HXLINE( 988)		this->clear();
HXLINE( 989)		this->resetInterp();
HXLINE( 991)		this->set_customOrigin(null());
HXLINE( 992)		this->parser = null();
HXLINE( 993)		this->interp = null();
HXLINE( 994)		this->script = null();
HXLINE( 995)		this->scriptFile = null();
HXLINE( 996)		this->active = false;
HXLINE( 997)		this->notAllowedClasses = null();
HXLINE( 998)		this->lastReportedCallTime = ( (Float)(-1) );
HXLINE( 999)		this->lastReportedTime = ( (Float)(-1) );
HXLINE(1000)		this->ID = null();
HXLINE(1001)		this->parsingException = null();
HXLINE(1002)		this->returnValue = null();
HXLINE(1003)		this->_destroyed = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SScript_obj,destroy,(void))

 ::haxe::ds::StringMap SScript_obj::get_variables(){
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_1007_get_variables)
HXLINE(1008)		if (this->_destroyed) {
HXLINE(1009)			return null();
            		}
HXLINE(1011)		return this->interp->variables;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SScript_obj,get_variables,return )

::String SScript_obj::setPackagePath(::String p){
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_1015_setPackagePath)
HXLINE(1016)		if (this->_destroyed) {
HXLINE(1017)			return null();
            		}
HXLINE(1019)		return (this->packagePath = p);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SScript_obj,setPackagePath,return )

::String SScript_obj::get_packagePath(){
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_1023_get_packagePath)
HXLINE(1024)		if (this->_destroyed) {
HXLINE(1025)			return null();
            		}
HXLINE(1027)		return this->packagePath;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SScript_obj,get_packagePath,return )

::String SScript_obj::set_customOrigin(::String value){
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_1036_set_customOrigin)
HXLINE(1037)		if (this->_destroyed) {
HXLINE(1038)			return null();
            		}
HXLINE(1040)		this->parser->origin = value;
HXLINE(1041)		return (this->customOrigin = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SScript_obj,set_customOrigin,return )

::Array< ::Dynamic> SScript_obj::get_parsingExceptions(){
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_1067_get_parsingExceptions)
HXLINE(1068)		if (this->_destroyed) {
HXLINE(1069)			return null();
            		}
HXLINE(1071)		if (::hx::IsNull( this->parsingException )) {
HXLINE(1072)			return ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE(1074)		return ::Array_obj< ::Dynamic>::__new(1)->init(0,::tea::backend::_SScriptException::SScriptException_Impl__obj::toException(this->parsingException));
            	}


HX_DEFINE_DYNAMIC_FUNC0(SScript_obj,get_parsingExceptions,return )

 ::Dynamic SScript_obj::IGNORE_RETURN;

 ::Dynamic SScript_obj::STOP_RETURN;

 ::Dynamic SScript_obj::VERSION;

 ::Dynamic SScript_obj::defaultTypeCheck;

 ::Dynamic SScript_obj::defaultDebug;

 ::haxe::ds::StringMap SScript_obj::globalVariables;

 ::haxe::ds::StringMap SScript_obj::global;

int SScript_obj::IDCount;

 ::haxe::ds::StringMap SScript_obj::defines;

::Array< ::Dynamic> SScript_obj::listScripts(::String path,::Array< ::String > extensions){
            	HX_GC_STACKFRAME(&_hx_pos_ffc4a688e712d40b_941_listScripts)
HXLINE( 942)		if (!(::StringTools_obj::endsWith(path,HX_("/",2f,00,00,00)))) {
HXLINE( 943)			path = (path + HX_("/",2f,00,00,00));
            		}
HXLINE( 945)		bool _hx_tmp;
HXDLIN( 945)		if (::hx::IsNotNull( extensions )) {
HXLINE( 945)			_hx_tmp = (extensions->length < 1);
            		}
            		else {
HXLINE( 945)			_hx_tmp = true;
            		}
HXDLIN( 945)		if (_hx_tmp) {
HXLINE( 946)			extensions = ::Array_obj< ::String >::fromData( _hx_array_data_6e1d7220_35,1);
            		}
HXLINE( 948)		::Array< ::Dynamic> list = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 950)		bool _hx_tmp1;
HXDLIN( 950)		if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 950)			_hx_tmp1 = ::sys::FileSystem_obj::isDirectory(path);
            		}
            		else {
HXLINE( 950)			_hx_tmp1 = false;
            		}
HXDLIN( 950)		if (_hx_tmp1) {
HXLINE( 952)			::Array< ::String > files = ::sys::FileSystem_obj::readDirectory(path);
HXLINE( 953)			{
HXLINE( 953)				int _g = 0;
HXDLIN( 953)				while((_g < files->length)){
HXLINE( 953)					::String i = files->__get(_g);
HXDLIN( 953)					_g = (_g + 1);
HXLINE( 955)					bool hasExtension = false;
HXLINE( 956)					{
HXLINE( 956)						int _g1 = 0;
HXDLIN( 956)						while((_g1 < extensions->length)){
HXLINE( 956)							::String l = extensions->__get(_g1);
HXDLIN( 956)							_g1 = (_g1 + 1);
HXLINE( 958)							if (::StringTools_obj::endsWith(i,l)) {
HXLINE( 960)								hasExtension = true;
HXLINE( 961)								goto _hx_goto_33;
            							}
            						}
            						_hx_goto_33:;
            					}
HXLINE( 964)					bool _hx_tmp2;
HXDLIN( 964)					if (hasExtension) {
HXLINE( 964)						_hx_tmp2 = ::sys::FileSystem_obj::exists((path + i));
            					}
            					else {
HXLINE( 964)						_hx_tmp2 = false;
            					}
HXDLIN( 964)					if (_hx_tmp2) {
HXLINE( 965)						list->push( ::tea::SScript_obj::__alloc( HX_CTX ,(path + i),null(),null()));
            					}
            				}
            			}
            		}
HXLINE( 970)		return list;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SScript_obj,listScripts,return )

 ::EReg SScript_obj::get_BlankReg(){
            	HX_GC_STACKFRAME(&_hx_pos_ffc4a688e712d40b_1032_get_BlankReg)
HXDLIN(1032)		return  ::EReg_obj::__alloc( HX_CTX ,HX_("^[\n\r\t]$",30,29,fc,71),HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SScript_obj,get_BlankReg,return )

 ::Dynamic SScript_obj::set_defaultTypeCheck( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_1045_set_defaultTypeCheck)
HXLINE(1046)		{
HXLINE(1046)			 ::Dynamic i = ::tea::SScript_obj::global->iterator();
HXDLIN(1046)			while(( (bool)(i->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1046)				 ::tea::SScript i1 = ( ( ::tea::SScript)(i->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1048)				bool _hx_tmp;
HXDLIN(1048)				if (::hx::IsNull( value )) {
HXLINE(1048)					_hx_tmp = false;
            				}
            				else {
HXLINE(1048)					_hx_tmp = ( (bool)(value) );
            				}
HXDLIN(1048)				i1->typeCheck = _hx_tmp;
            			}
            		}
HXLINE(1052)		return (::tea::SScript_obj::defaultTypeCheck = value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SScript_obj,set_defaultTypeCheck,return )

 ::Dynamic SScript_obj::set_defaultDebug( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_1056_set_defaultDebug)
HXLINE(1057)		{
HXLINE(1057)			 ::Dynamic i = ::tea::SScript_obj::global->iterator();
HXDLIN(1057)			while(( (bool)(i->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1057)				 ::tea::SScript i1 = ( ( ::tea::SScript)(i->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1059)				bool _hx_tmp;
HXDLIN(1059)				if (::hx::IsNull( value )) {
HXLINE(1059)					_hx_tmp = false;
            				}
            				else {
HXLINE(1059)					_hx_tmp = ( (bool)(value) );
            				}
HXDLIN(1059)				i1->debugTraces = _hx_tmp;
            			}
            		}
HXLINE(1063)		return (::tea::SScript_obj::defaultDebug = value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SScript_obj,set_defaultDebug,return )


::hx::ObjectPtr< SScript_obj > SScript_obj::__new(::String __o_scriptPath, ::Dynamic __o_preset, ::Dynamic __o_startExecute) {
	::hx::ObjectPtr< SScript_obj > __this = new SScript_obj();
	__this->__construct(__o_scriptPath,__o_preset,__o_startExecute);
	return __this;
}

::hx::ObjectPtr< SScript_obj > SScript_obj::__alloc(::hx::Ctx *_hx_ctx,::String __o_scriptPath, ::Dynamic __o_preset, ::Dynamic __o_startExecute) {
	SScript_obj *__this = (SScript_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SScript_obj), true, "tea.SScript"));
	*(void **)__this = SScript_obj::_hx_vtable;
	__this->__construct(__o_scriptPath,__o_preset,__o_startExecute);
	return __this;
}

SScript_obj::SScript_obj()
{
}

void SScript_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SScript);
	HX_MARK_MEMBER_NAME(customOrigin,"customOrigin");
	HX_MARK_MEMBER_NAME(returnValue,"returnValue");
	HX_MARK_MEMBER_NAME(ID,"ID");
	HX_MARK_MEMBER_NAME(typeCheck,"typeCheck");
	HX_MARK_MEMBER_NAME(lastReportedTime,"lastReportedTime");
	HX_MARK_MEMBER_NAME(lastReportedCallTime,"lastReportedCallTime");
	HX_MARK_MEMBER_NAME(notAllowedClasses,"notAllowedClasses");
	HX_MARK_MEMBER_NAME(interp,"interp");
	HX_MARK_MEMBER_NAME(parser,"parser");
	HX_MARK_MEMBER_NAME(script,"script");
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_MEMBER_NAME(scriptFile,"scriptFile");
	HX_MARK_MEMBER_NAME(traces,"traces");
	HX_MARK_MEMBER_NAME(debugTraces,"debugTraces");
	HX_MARK_MEMBER_NAME(parsingException,"parsingException");
	HX_MARK_MEMBER_NAME(packagePath,"packagePath");
	HX_MARK_MEMBER_NAME(_destroyed,"_destroyed");
	HX_MARK_END_CLASS();
}

void SScript_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(customOrigin,"customOrigin");
	HX_VISIT_MEMBER_NAME(returnValue,"returnValue");
	HX_VISIT_MEMBER_NAME(ID,"ID");
	HX_VISIT_MEMBER_NAME(typeCheck,"typeCheck");
	HX_VISIT_MEMBER_NAME(lastReportedTime,"lastReportedTime");
	HX_VISIT_MEMBER_NAME(lastReportedCallTime,"lastReportedCallTime");
	HX_VISIT_MEMBER_NAME(notAllowedClasses,"notAllowedClasses");
	HX_VISIT_MEMBER_NAME(interp,"interp");
	HX_VISIT_MEMBER_NAME(parser,"parser");
	HX_VISIT_MEMBER_NAME(script,"script");
	HX_VISIT_MEMBER_NAME(active,"active");
	HX_VISIT_MEMBER_NAME(scriptFile,"scriptFile");
	HX_VISIT_MEMBER_NAME(traces,"traces");
	HX_VISIT_MEMBER_NAME(debugTraces,"debugTraces");
	HX_VISIT_MEMBER_NAME(parsingException,"parsingException");
	HX_VISIT_MEMBER_NAME(packagePath,"packagePath");
	HX_VISIT_MEMBER_NAME(_destroyed,"_destroyed");
}

::hx::Val SScript_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ID") ) { return ::hx::Val( ID ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"call") ) { return ::hx::Val( call_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"unset") ) { return ::hx::Val( unset_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return ::hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"interp") ) { return ::hx::Val( interp ); }
		if (HX_FIELD_EQ(inName,"parser") ) { return ::hx::Val( parser ); }
		if (HX_FIELD_EQ(inName,"script") ) { return ::hx::Val( script ); }
		if (HX_FIELD_EQ(inName,"active") ) { return ::hx::Val( active ); }
		if (HX_FIELD_EQ(inName,"traces") ) { return ::hx::Val( traces ); }
		if (HX_FIELD_EQ(inName,"locals") ) { return ::hx::Val( locals_dyn() ); }
		if (HX_FIELD_EQ(inName,"exists") ) { return ::hx::Val( exists_dyn() ); }
		if (HX_FIELD_EQ(inName,"preset") ) { return ::hx::Val( preset_dyn() ); }
		if (HX_FIELD_EQ(inName,"doFile") ) { return ::hx::Val( doFile_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"execute") ) { return ::hx::Val( execute_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setClass") ) { return ::hx::Val( setClass_dyn() ); }
		if (HX_FIELD_EQ(inName,"doString") ) { return ::hx::Val( doString_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"typeCheck") ) { return ::hx::Val( typeCheck ); }
		if (HX_FIELD_EQ(inName,"variables") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_variables() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scriptFile") ) { return ::hx::Val( scriptFile ); }
		if (HX_FIELD_EQ(inName,"_destroyed") ) { return ::hx::Val( _destroyed ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"returnValue") ) { return ::hx::Val( returnValue ); }
		if (HX_FIELD_EQ(inName,"debugTraces") ) { return ::hx::Val( debugTraces ); }
		if (HX_FIELD_EQ(inName,"packagePath") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_packagePath() : packagePath ); }
		if (HX_FIELD_EQ(inName,"resetInterp") ) { return ::hx::Val( resetInterp_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"customOrigin") ) { return ::hx::Val( customOrigin ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_variables") ) { return ::hx::Val( get_variables_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"setClassString") ) { return ::hx::Val( setClassString_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPackagePath") ) { return ::hx::Val( setPackagePath_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_packagePath") ) { return ::hx::Val( get_packagePath_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"lastReportedTime") ) { return ::hx::Val( lastReportedTime ); }
		if (HX_FIELD_EQ(inName,"parsingException") ) { return ::hx::Val( parsingException ); }
		if (HX_FIELD_EQ(inName,"setSpecialObject") ) { return ::hx::Val( setSpecialObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_customOrigin") ) { return ::hx::Val( set_customOrigin_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"notAllowedClasses") ) { return ::hx::Val( notAllowedClasses ); }
		if (HX_FIELD_EQ(inName,"parsingExceptions") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_parsingExceptions() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"lastReportedCallTime") ) { return ::hx::Val( lastReportedCallTime ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_parsingExceptions") ) { return ::hx::Val( get_parsingExceptions_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SScript_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"global") ) { outValue = ( global ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"VERSION") ) { outValue = ( VERSION ); return true; }
		if (HX_FIELD_EQ(inName,"IDCount") ) { outValue = ( IDCount ); return true; }
		if (HX_FIELD_EQ(inName,"defines") ) { outValue = ( defines ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"BlankReg") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_BlankReg() ); return true; } }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"STOP_RETURN") ) { outValue = ( STOP_RETURN ); return true; }
		if (HX_FIELD_EQ(inName,"listScripts") ) { outValue = listScripts_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultDebug") ) { outValue = ( defaultDebug ); return true; }
		if (HX_FIELD_EQ(inName,"get_BlankReg") ) { outValue = get_BlankReg_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"IGNORE_RETURN") ) { outValue = ( IGNORE_RETURN ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"globalVariables") ) { outValue = ( globalVariables ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"defaultTypeCheck") ) { outValue = ( defaultTypeCheck ); return true; }
		if (HX_FIELD_EQ(inName,"set_defaultDebug") ) { outValue = set_defaultDebug_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"set_defaultTypeCheck") ) { outValue = set_defaultTypeCheck_dyn(); return true; }
	}
	return false;
}

::hx::Val SScript_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ID") ) { ID=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"interp") ) { interp=inValue.Cast<  ::hscriptBase::Interp >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parser") ) { parser=inValue.Cast<  ::hscriptBase::Parser >(); return inValue; }
		if (HX_FIELD_EQ(inName,"script") ) { script=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"active") ) { active=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"traces") ) { traces=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"typeCheck") ) { typeCheck=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scriptFile") ) { scriptFile=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_destroyed") ) { _destroyed=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"returnValue") ) { returnValue=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"debugTraces") ) { debugTraces=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"packagePath") ) { packagePath=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"customOrigin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_customOrigin(inValue.Cast< ::String >()) );customOrigin=inValue.Cast< ::String >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"lastReportedTime") ) { lastReportedTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parsingException") ) { parsingException=inValue.Cast<  ::haxe::Exception >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"notAllowedClasses") ) { notAllowedClasses=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"lastReportedCallTime") ) { lastReportedCallTime=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool SScript_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"global") ) { global=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"VERSION") ) { VERSION=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"IDCount") ) { IDCount=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"defines") ) { defines=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"STOP_RETURN") ) { STOP_RETURN=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultDebug") ) { if (inCallProp == ::hx::paccAlways)  ioValue = ( set_defaultDebug(ioValue.Cast<  ::Dynamic >()) ); else defaultDebug=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"IGNORE_RETURN") ) { IGNORE_RETURN=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"globalVariables") ) { globalVariables=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"defaultTypeCheck") ) { if (inCallProp == ::hx::paccAlways)  ioValue = ( set_defaultTypeCheck(ioValue.Cast<  ::Dynamic >()) ); else defaultTypeCheck=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void SScript_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("customOrigin",77,70,9e,4a));
	outFields->push(HX_("returnValue",a1,4c,95,3e));
	outFields->push(HX_("ID",db,3f,00,00));
	outFields->push(HX_("typeCheck",ae,f3,8e,0a));
	outFields->push(HX_("lastReportedTime",36,a7,34,87));
	outFields->push(HX_("lastReportedCallTime",74,db,fa,f3));
	outFields->push(HX_("notAllowedClasses",d1,82,87,c7));
	outFields->push(HX_("variables",b7,e2,62,82));
	outFields->push(HX_("interp",d4,79,86,9e));
	outFields->push(HX_("parser",df,9c,88,ed));
	outFields->push(HX_("script",0b,4e,60,47));
	outFields->push(HX_("active",c6,41,46,16));
	outFields->push(HX_("scriptFile",27,aa,9c,3c));
	outFields->push(HX_("traces",4e,26,7d,45));
	outFields->push(HX_("debugTraces",01,ed,ef,4d));
	outFields->push(HX_("parsingException",ff,3d,8a,3f));
	outFields->push(HX_("packagePath",4b,78,ff,05));
	outFields->push(HX_("parsingExceptions",94,01,6c,59));
	outFields->push(HX_("_destroyed",9a,b3,c9,4f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SScript_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(SScript_obj,customOrigin),HX_("customOrigin",77,70,9e,4a)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SScript_obj,returnValue),HX_("returnValue",a1,4c,95,3e)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SScript_obj,ID),HX_("ID",db,3f,00,00)},
	{::hx::fsBool,(int)offsetof(SScript_obj,typeCheck),HX_("typeCheck",ae,f3,8e,0a)},
	{::hx::fsFloat,(int)offsetof(SScript_obj,lastReportedTime),HX_("lastReportedTime",36,a7,34,87)},
	{::hx::fsFloat,(int)offsetof(SScript_obj,lastReportedCallTime),HX_("lastReportedCallTime",74,db,fa,f3)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(SScript_obj,notAllowedClasses),HX_("notAllowedClasses",d1,82,87,c7)},
	{::hx::fsObject /*  ::hscriptBase::Interp */ ,(int)offsetof(SScript_obj,interp),HX_("interp",d4,79,86,9e)},
	{::hx::fsObject /*  ::hscriptBase::Parser */ ,(int)offsetof(SScript_obj,parser),HX_("parser",df,9c,88,ed)},
	{::hx::fsString,(int)offsetof(SScript_obj,script),HX_("script",0b,4e,60,47)},
	{::hx::fsBool,(int)offsetof(SScript_obj,active),HX_("active",c6,41,46,16)},
	{::hx::fsString,(int)offsetof(SScript_obj,scriptFile),HX_("scriptFile",27,aa,9c,3c)},
	{::hx::fsBool,(int)offsetof(SScript_obj,traces),HX_("traces",4e,26,7d,45)},
	{::hx::fsBool,(int)offsetof(SScript_obj,debugTraces),HX_("debugTraces",01,ed,ef,4d)},
	{::hx::fsObject /*  ::haxe::Exception */ ,(int)offsetof(SScript_obj,parsingException),HX_("parsingException",ff,3d,8a,3f)},
	{::hx::fsString,(int)offsetof(SScript_obj,packagePath),HX_("packagePath",4b,78,ff,05)},
	{::hx::fsBool,(int)offsetof(SScript_obj,_destroyed),HX_("_destroyed",9a,b3,c9,4f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo SScript_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &SScript_obj::IGNORE_RETURN,HX_("IGNORE_RETURN",7d,a3,ce,e0)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &SScript_obj::STOP_RETURN,HX_("STOP_RETURN",8d,8e,f6,02)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &SScript_obj::VERSION,HX_("VERSION",f8,ba,c5,fc)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &SScript_obj::defaultTypeCheck,HX_("defaultTypeCheck",ad,5a,87,cd)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &SScript_obj::defaultDebug,HX_("defaultDebug",d2,8d,7a,8c)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &SScript_obj::globalVariables,HX_("globalVariables",d4,cc,01,94)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &SScript_obj::global,HX_("global",63,31,b2,a7)},
	{::hx::fsInt,(void *) &SScript_obj::IDCount,HX_("IDCount",f4,1a,74,e9)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &SScript_obj::defines,HX_("defines",d8,37,08,a1)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String SScript_obj_sMemberFields[] = {
	HX_("customOrigin",77,70,9e,4a),
	HX_("returnValue",a1,4c,95,3e),
	HX_("ID",db,3f,00,00),
	HX_("typeCheck",ae,f3,8e,0a),
	HX_("lastReportedTime",36,a7,34,87),
	HX_("lastReportedCallTime",74,db,fa,f3),
	HX_("notAllowedClasses",d1,82,87,c7),
	HX_("interp",d4,79,86,9e),
	HX_("parser",df,9c,88,ed),
	HX_("script",0b,4e,60,47),
	HX_("active",c6,41,46,16),
	HX_("scriptFile",27,aa,9c,3c),
	HX_("traces",4e,26,7d,45),
	HX_("debugTraces",01,ed,ef,4d),
	HX_("parsingException",ff,3d,8a,3f),
	HX_("packagePath",4b,78,ff,05),
	HX_("_destroyed",9a,b3,c9,4f),
	HX_("execute",35,0a,0d,cc),
	HX_("set",a2,9b,57,00),
	HX_("setClass",36,e1,8c,56),
	HX_("setClassString",a7,4a,37,30),
	HX_("setSpecialObject",d6,f4,2a,14),
	HX_("locals",a8,74,bf,59),
	HX_("unset",e9,f2,ee,a6),
	HX_("get",96,80,4e,00),
	HX_("call",9e,18,ba,41),
	HX_("clear",8d,71,5b,48),
	HX_("exists",dc,1d,e0,bf),
	HX_("preset",5f,b3,c0,ae),
	HX_("resetInterp",03,fd,9a,3e),
	HX_("doFile",a7,73,bf,13),
	HX_("doString",bc,ae,47,a5),
	HX_("toString",ac,d0,6e,38),
	HX_("destroy",fa,2c,86,24),
	HX_("get_variables",8e,b6,c6,43),
	HX_("setPackagePath",c9,b3,bd,ad),
	HX_("get_packagePath",e2,2f,e1,c6),
	HX_("set_customOrigin",74,4a,7f,a5),
	HX_("get_parsingExceptions",6b,04,1a,d8),
	::String(null()) };

static void SScript_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SScript_obj::IGNORE_RETURN,"IGNORE_RETURN");
	HX_MARK_MEMBER_NAME(SScript_obj::STOP_RETURN,"STOP_RETURN");
	HX_MARK_MEMBER_NAME(SScript_obj::VERSION,"VERSION");
	HX_MARK_MEMBER_NAME(SScript_obj::defaultTypeCheck,"defaultTypeCheck");
	HX_MARK_MEMBER_NAME(SScript_obj::defaultDebug,"defaultDebug");
	HX_MARK_MEMBER_NAME(SScript_obj::globalVariables,"globalVariables");
	HX_MARK_MEMBER_NAME(SScript_obj::global,"global");
	HX_MARK_MEMBER_NAME(SScript_obj::IDCount,"IDCount");
	HX_MARK_MEMBER_NAME(SScript_obj::defines,"defines");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SScript_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SScript_obj::IGNORE_RETURN,"IGNORE_RETURN");
	HX_VISIT_MEMBER_NAME(SScript_obj::STOP_RETURN,"STOP_RETURN");
	HX_VISIT_MEMBER_NAME(SScript_obj::VERSION,"VERSION");
	HX_VISIT_MEMBER_NAME(SScript_obj::defaultTypeCheck,"defaultTypeCheck");
	HX_VISIT_MEMBER_NAME(SScript_obj::defaultDebug,"defaultDebug");
	HX_VISIT_MEMBER_NAME(SScript_obj::globalVariables,"globalVariables");
	HX_VISIT_MEMBER_NAME(SScript_obj::global,"global");
	HX_VISIT_MEMBER_NAME(SScript_obj::IDCount,"IDCount");
	HX_VISIT_MEMBER_NAME(SScript_obj::defines,"defines");
};

#endif

::hx::Class SScript_obj::__mClass;

static ::String SScript_obj_sStaticFields[] = {
	HX_("IGNORE_RETURN",7d,a3,ce,e0),
	HX_("STOP_RETURN",8d,8e,f6,02),
	HX_("VERSION",f8,ba,c5,fc),
	HX_("defaultTypeCheck",ad,5a,87,cd),
	HX_("defaultDebug",d2,8d,7a,8c),
	HX_("globalVariables",d4,cc,01,94),
	HX_("global",63,31,b2,a7),
	HX_("IDCount",f4,1a,74,e9),
	HX_("defines",d8,37,08,a1),
	HX_("listScripts",4a,6f,e3,e3),
	HX_("get_BlankReg",89,6e,d3,64),
	HX_("set_defaultTypeCheck",2a,77,a9,b8),
	HX_("set_defaultDebug",cf,67,5b,e7),
	::String(null())
};

void SScript_obj::__register()
{
	SScript_obj _hx_dummy;
	SScript_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("tea.SScript",20,72,1d,6e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SScript_obj::__GetStatic;
	__mClass->mSetStaticField = &SScript_obj::__SetStatic;
	__mClass->mMarkFunc = SScript_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(SScript_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SScript_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SScript_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SScript_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SScript_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SScript_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SScript_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_65_boot)
HXDLIN(  65)		IGNORE_RETURN = HX_("#0IGNORE#0RETURN#0VALUE#0",15,30,0d,de);
            	}
{
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_70_boot)
HXDLIN(  70)		STOP_RETURN = HX_("#1STOP#1RETURN#1VALUE#1",03,c2,38,24);
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_75_boot)
HXDLIN(  75)			 ::Dynamic this1 = 0;
HXDLIN(  75)			{
HXDLIN(  75)				::String string = HX_("",00,00,00,00);
HXDLIN(  75)				{
HXDLIN(  75)					{
HXDLIN(  75)						int i = 7;
HXDLIN(  75)						string = (string + ::Std_obj::string(i));
            					}
HXDLIN(  75)					{
HXDLIN(  75)						int i1 = 7;
HXDLIN(  75)						string = (string + ::Std_obj::string(i1));
            					}
HXDLIN(  75)					{
HXDLIN(  75)						int i2 = 0;
HXDLIN(  75)						string = (string + ::Std_obj::string(i2));
            					}
            				}
HXDLIN(  75)				this1 = ::Std_obj::parseInt(string);
            			}
HXDLIN(  75)			return this1;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_75_boot)
HXDLIN(  75)		VERSION =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_80_boot)
HXDLIN(  80)		defaultTypeCheck = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_85_boot)
HXDLIN(  85)		defaultDebug = null();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_ffc4a688e712d40b_90_boot)
HXDLIN(  90)		globalVariables =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_ffc4a688e712d40b_95_boot)
HXDLIN(  95)		global =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_ffc4a688e712d40b_97_boot)
HXDLIN(  97)		IDCount = 0;
            	}
}

} // end namespace tea
