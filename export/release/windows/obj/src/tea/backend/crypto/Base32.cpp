// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_haxe_crypto_BaseCode
#include <haxe/crypto/BaseCode.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_tea_backend_crypto_Base32
#include <tea/backend/crypto/Base32.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2779f5182b1154f5_12_new,"tea.backend.crypto.Base32","new",0x4742f317,"tea.backend.crypto.Base32.new","tea/backend/crypto/Base32.hx",12,0x347bc11a)
HX_LOCAL_STACK_FRAME(_hx_pos_2779f5182b1154f5_8_boot,"tea.backend.crypto.Base32","boot",0x0b6ac19b,"tea.backend.crypto.Base32.boot","tea/backend/crypto/Base32.hx",8,0x347bc11a)
namespace tea{
namespace backend{
namespace crypto{

void Base32_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_2779f5182b1154f5_12_new)
HXDLIN(  12)		super::__construct(::haxe::io::Bytes_obj::ofString(::tea::backend::crypto::Base32_obj::CHARS,null()));
            	}

Dynamic Base32_obj::__CreateEmpty() { return new Base32_obj; }

void *Base32_obj::_hx_vtable = 0;

Dynamic Base32_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Base32_obj > _hx_result = new Base32_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Base32_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1af39d41) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1af39d41;
	} else {
		return inClassId==(int)0x34980465;
	}
}

::String Base32_obj::CHARS;


::hx::ObjectPtr< Base32_obj > Base32_obj::__new() {
	::hx::ObjectPtr< Base32_obj > __this = new Base32_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Base32_obj > Base32_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Base32_obj *__this = (Base32_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Base32_obj), true, "tea.backend.crypto.Base32"));
	*(void **)__this = Base32_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Base32_obj::Base32_obj()
{
}

bool Base32_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"CHARS") ) { outValue = ( CHARS ); return true; }
	}
	return false;
}

bool Base32_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"CHARS") ) { CHARS=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Base32_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Base32_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &Base32_obj::CHARS,HX_("CHARS",bd,d4,a1,c3)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Base32_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Base32_obj::CHARS,"CHARS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Base32_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Base32_obj::CHARS,"CHARS");
};

#endif

::hx::Class Base32_obj::__mClass;

static ::String Base32_obj_sStaticFields[] = {
	HX_("CHARS",bd,d4,a1,c3),
	::String(null())
};

void Base32_obj::__register()
{
	Base32_obj _hx_dummy;
	Base32_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("tea.backend.crypto.Base32",a5,1b,c0,75);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Base32_obj::__GetStatic;
	__mClass->mSetStaticField = &Base32_obj::__SetStatic;
	__mClass->mMarkFunc = Base32_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Base32_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Base32_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Base32_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Base32_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Base32_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Base32_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2779f5182b1154f5_8_boot)
HXDLIN(   8)		CHARS = HX_("0123456789ABCDEFGHIJKLMNOPQRSTUV",70,bb,42,ef);
            	}
}

} // end namespace tea
} // end namespace backend
} // end namespace crypto
