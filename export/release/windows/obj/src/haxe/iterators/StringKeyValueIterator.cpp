// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_haxe_iterators_StringKeyValueIterator
#include <haxe/iterators/StringKeyValueIterator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f769983672387093_39_new,"haxe.iterators.StringKeyValueIterator","new",0x47385434,"haxe.iterators.StringKeyValueIterator.new","C:\\HaxeToolkit\\haxe\\std/haxe/iterators/StringKeyValueIterator.hx",39,0x819d0713)
namespace haxe{
namespace iterators{

void StringKeyValueIterator_obj::__construct(::String s){
            	HX_STACKFRAME(&_hx_pos_f769983672387093_39_new)
HXDLIN(  39)		this->s = s;
            	}

Dynamic StringKeyValueIterator_obj::__CreateEmpty() { return new StringKeyValueIterator_obj; }

void *StringKeyValueIterator_obj::_hx_vtable = 0;

Dynamic StringKeyValueIterator_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StringKeyValueIterator_obj > _hx_result = new StringKeyValueIterator_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool StringKeyValueIterator_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0a24f310;
}


StringKeyValueIterator_obj::StringKeyValueIterator_obj()
{
}

void StringKeyValueIterator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StringKeyValueIterator);
	HX_MARK_MEMBER_NAME(s,"s");
	HX_MARK_END_CLASS();
}

void StringKeyValueIterator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(s,"s");
}

::hx::Val StringKeyValueIterator_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"s") ) { return ::hx::Val( s ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val StringKeyValueIterator_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"s") ) { s=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StringKeyValueIterator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("s",73,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StringKeyValueIterator_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(StringKeyValueIterator_obj,s),HX_("s",73,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *StringKeyValueIterator_obj_sStaticStorageInfo = 0;
#endif

static ::String StringKeyValueIterator_obj_sMemberFields[] = {
	HX_("s",73,00,00,00),
	::String(null()) };

::hx::Class StringKeyValueIterator_obj::__mClass;

void StringKeyValueIterator_obj::__register()
{
	StringKeyValueIterator_obj _hx_dummy;
	StringKeyValueIterator_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.iterators.StringKeyValueIterator",42,6a,0d,24);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StringKeyValueIterator_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StringKeyValueIterator_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StringKeyValueIterator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StringKeyValueIterator_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace iterators
