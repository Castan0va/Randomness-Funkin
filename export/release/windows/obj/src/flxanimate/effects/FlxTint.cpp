// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flxanimate_effects_FlxColorEffect
#include <flxanimate/effects/FlxColorEffect.h>
#endif
#ifndef INCLUDED_flxanimate_effects_FlxTint
#include <flxanimate/effects/FlxTint.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5e2a5fec5462ca67_23_new,"flxanimate.effects.FlxTint","new",0x391102b4,"flxanimate.effects.FlxTint.new","flxanimate/effects/FlxTint.hx",23,0xa0944ebe)
HX_LOCAL_STACK_FRAME(_hx_pos_5e2a5fec5462ca67_29_process,"flxanimate.effects.FlxTint","process",0x33318ec3,"flxanimate.effects.FlxTint.process","flxanimate/effects/FlxTint.hx",29,0xa0944ebe)
HX_LOCAL_STACK_FRAME(_hx_pos_5e2a5fec5462ca67_41_set_tint,"flxanimate.effects.FlxTint","set_tint",0xe33cbf24,"flxanimate.effects.FlxTint.set_tint","flxanimate/effects/FlxTint.hx",41,0xa0944ebe)
namespace flxanimate{
namespace effects{

void FlxTint_obj::__construct(int tint,Float multiplier){
            	HX_STACKFRAME(&_hx_pos_5e2a5fec5462ca67_23_new)
HXLINE(  24)		super::__construct();
HXLINE(  25)		{
HXLINE(  25)			int Value = ::Math_obj::round((multiplier * ( (Float)(255) )));
HXDLIN(  25)			tint = (tint & 16777215);
HXDLIN(  25)			int tint1;
HXDLIN(  25)			if ((Value > 255)) {
HXLINE(  25)				tint1 = 255;
            			}
            			else {
HXLINE(  25)				if ((Value < 0)) {
HXLINE(  25)					tint1 = 0;
            				}
            				else {
HXLINE(  25)					tint1 = Value;
            				}
            			}
HXDLIN(  25)			tint = (tint | (tint1 << 24));
            		}
HXLINE(  26)		this->set_tint(tint);
            	}

Dynamic FlxTint_obj::__CreateEmpty() { return new FlxTint_obj; }

void *FlxTint_obj::_hx_vtable = 0;

Dynamic FlxTint_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxTint_obj > _hx_result = new FlxTint_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxTint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4fae23f1) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x4fae23f1;
	} else {
		return inClassId==(int)0x75bbd45a;
	}
}

void FlxTint_obj::process(){
            	HX_STACKFRAME(&_hx_pos_5e2a5fec5462ca67_29_process)
HXLINE(  30)		Float multiplier = (( (Float)(((this->tint >> 24) & 255)) ) / ( (Float)(255) ));
HXLINE(  31)		Float cMultiplier = (( (Float)(1) ) - multiplier);
HXLINE(  32)		this->c_Transform->redMultiplier = cMultiplier;
HXLINE(  33)		this->c_Transform->redOffset = ( (Float)(::Math_obj::round((( (Float)(((this->tint >> 16) & 255)) ) * multiplier))) );
HXLINE(  34)		this->c_Transform->greenMultiplier = cMultiplier;
HXLINE(  35)		this->c_Transform->greenOffset = ( (Float)(::Math_obj::round((( (Float)(((this->tint >> 8) & 255)) ) * multiplier))) );
HXLINE(  36)		this->c_Transform->blueMultiplier = cMultiplier;
HXLINE(  37)		this->c_Transform->blueOffset = ( (Float)(::Math_obj::round((( (Float)((this->tint & 255)) ) * multiplier))) );
            	}


int FlxTint_obj::set_tint(int value){
            	HX_STACKFRAME(&_hx_pos_5e2a5fec5462ca67_41_set_tint)
HXLINE(  42)		if ((this->tint != value)) {
HXLINE(  42)			this->renderDirty = true;
            		}
HXLINE(  44)		return (this->tint = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTint_obj,set_tint,return )


::hx::ObjectPtr< FlxTint_obj > FlxTint_obj::__new(int tint,Float multiplier) {
	::hx::ObjectPtr< FlxTint_obj > __this = new FlxTint_obj();
	__this->__construct(tint,multiplier);
	return __this;
}

::hx::ObjectPtr< FlxTint_obj > FlxTint_obj::__alloc(::hx::Ctx *_hx_ctx,int tint,Float multiplier) {
	FlxTint_obj *__this = (FlxTint_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxTint_obj), true, "flxanimate.effects.FlxTint"));
	*(void **)__this = FlxTint_obj::_hx_vtable;
	__this->__construct(tint,multiplier);
	return __this;
}

FlxTint_obj::FlxTint_obj()
{
}

::hx::Val FlxTint_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"tint") ) { return ::hx::Val( tint ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"process") ) { return ::hx::Val( process_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"set_tint") ) { return ::hx::Val( set_tint_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxTint_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"tint") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_tint(inValue.Cast< int >()) );tint=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("tint",fb,cc,fc,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxTint_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(FlxTint_obj,tint),HX_("tint",fb,cc,fc,4c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxTint_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTint_obj_sMemberFields[] = {
	HX_("tint",fb,cc,fc,4c),
	HX_("process",6f,a2,4a,f1),
	HX_("set_tint",f8,e1,14,7b),
	::String(null()) };

::hx::Class FlxTint_obj::__mClass;

void FlxTint_obj::__register()
{
	FlxTint_obj _hx_dummy;
	FlxTint_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.effects.FlxTint",c2,d8,4c,43);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxTint_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxTint_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTint_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flxanimate
} // end namespace effects
