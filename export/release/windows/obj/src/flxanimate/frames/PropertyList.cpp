// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_flxanimate_frames_PropertyList
#include <flxanimate/frames/PropertyList.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_Access_Impl_
#include <haxe/xml/_Access/Access_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_HasNodeAccess_Impl_
#include <haxe/xml/_Access/HasNodeAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_NodeAccess_Impl_
#include <haxe/xml/_Access/NodeAccess_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f26789f07b71deda_586_parse,"flxanimate.frames.PropertyList","parse",0xe259c601,"flxanimate.frames.PropertyList.parse","flxanimate/frames/FlxAnimateFrames.hx",586,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_f26789f07b71deda_592_parseDate,"flxanimate.frames.PropertyList","parseDate",0x9a57dccf,"flxanimate.frames.PropertyList.parseDate","flxanimate/frames/FlxAnimateFrames.hx",592,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_f26789f07b71deda_606_parseDict,"flxanimate.frames.PropertyList","parseDict",0x9a5de017,"flxanimate.frames.PropertyList.parseDict","flxanimate/frames/FlxAnimateFrames.hx",606,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_f26789f07b71deda_623_parseValue,"flxanimate.frames.PropertyList","parseValue",0xcfb9c5b0,"flxanimate.frames.PropertyList.parseValue","flxanimate/frames/FlxAnimateFrames.hx",623,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_f26789f07b71deda_578_boot,"flxanimate.frames.PropertyList","boot",0x1ed58224,"flxanimate.frames.PropertyList.boot","flxanimate/frames/FlxAnimateFrames.hx",578,0x11169520)
namespace flxanimate{
namespace frames{

void PropertyList_obj::__construct() { }

Dynamic PropertyList_obj::__CreateEmpty() { return new PropertyList_obj; }

void *PropertyList_obj::_hx_vtable = 0;

Dynamic PropertyList_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PropertyList_obj > _hx_result = new PropertyList_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PropertyList_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x660dbd88;
}

 ::EReg PropertyList_obj::_dateRegex;

 ::Dynamic PropertyList_obj::parse(::String text){
            	HX_STACKFRAME(&_hx_pos_f26789f07b71deda_586_parse)
HXLINE( 587)		 ::Xml x = ::Xml_obj::parse(text)->firstElement();
HXDLIN( 587)		bool _hx_tmp;
HXDLIN( 587)		if ((x->nodeType != ::Xml_obj::Document)) {
HXLINE( 587)			_hx_tmp = (x->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE( 587)			_hx_tmp = false;
            		}
HXDLIN( 587)		if (_hx_tmp) {
HXLINE( 587)			HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(x->nodeType)));
            		}
HXDLIN( 587)		 ::Xml fast = x;
HXLINE( 588)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(fast,HX_("dict",76,59,69,42))) {
HXLINE( 588)			return ::flxanimate::frames::PropertyList_obj::parseDict(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(fast,HX_("dict",76,59,69,42)));
            		}
            		else {
HXLINE( 588)			return  ::Dynamic(::hx::Anon_obj::Create(0));
            		}
HXDLIN( 588)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PropertyList_obj,parse,return )

 ::Date PropertyList_obj::parseDate(::String text){
            	HX_STACKFRAME(&_hx_pos_f26789f07b71deda_592_parseDate)
HXLINE( 593)		if (!(::flxanimate::frames::PropertyList_obj::_dateRegex->match(text))) {
HXLINE( 595)			HX_STACK_DO_THROW(((HX_("Invalid date \"",d9,c7,ff,ef) + text) + HX_("\" (only yyyy-mm-dd and yyyy-mm-ddThh:mm:ssZ supported)",76,4f,2d,5d)));
            		}
HXLINE( 597)		text = ::flxanimate::frames::PropertyList_obj::_dateRegex->matched(1);
HXLINE( 598)		if (::hx::IsNotNull( ::flxanimate::frames::PropertyList_obj::_dateRegex->matched(2) )) {
HXLINE( 600)			text = (text + (HX_(" ",20,00,00,00) + ::flxanimate::frames::PropertyList_obj::_dateRegex->matched(2)));
            		}
HXLINE( 602)		return ::Date_obj::fromString(text);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PropertyList_obj,parseDate,return )

 ::Dynamic PropertyList_obj::parseDict( ::Xml node){
            	HX_STACKFRAME(&_hx_pos_f26789f07b71deda_606_parseDict)
HXLINE( 607)		::String key = null();
HXLINE( 608)		 ::Dynamic result =  ::Dynamic(::hx::Anon_obj::Create(0));
HXLINE( 609)		{
HXLINE( 609)			 ::Dynamic childNode = node->elements();
HXDLIN( 609)			while(( (bool)(childNode->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 609)				 ::Xml childNode1 = ( ( ::Xml)(childNode->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 611)				::String _hx_tmp;
HXDLIN( 611)				if ((childNode1->nodeType == ::Xml_obj::Document)) {
HXLINE( 611)					_hx_tmp = HX_("Document",3b,ab,c4,74);
            				}
            				else {
HXLINE( 611)					if ((childNode1->nodeType != ::Xml_obj::Element)) {
HXLINE( 611)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(childNode1->nodeType)));
            					}
HXDLIN( 611)					_hx_tmp = childNode1->nodeName;
            				}
HXDLIN( 611)				if ((_hx_tmp == HX_("key",9f,89,51,00))) {
HXLINE( 613)					key = ::haxe::xml::_Access::Access_Impl__obj::get_innerData(childNode1);
            				}
            				else {
HXLINE( 614)					if (::hx::IsNotNull( key )) {
HXLINE( 616)						::Reflect_obj::setField(result,key,::flxanimate::frames::PropertyList_obj::parseValue(childNode1));
            					}
            				}
            			}
            		}
HXLINE( 619)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PropertyList_obj,parseDict,return )

 ::Dynamic PropertyList_obj::parseValue( ::Xml node){
            	HX_STACKFRAME(&_hx_pos_f26789f07b71deda_623_parseValue)
HXLINE( 624)		 ::Dynamic value = null();
HXLINE( 625)		{
HXLINE( 625)			::String _g;
HXDLIN( 625)			if ((node->nodeType == ::Xml_obj::Document)) {
HXLINE( 625)				_g = HX_("Document",3b,ab,c4,74);
            			}
            			else {
HXLINE( 625)				if ((node->nodeType != ::Xml_obj::Element)) {
HXLINE( 625)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(node->nodeType)));
            				}
HXDLIN( 625)				_g = node->nodeName;
            			}
HXDLIN( 625)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("array",99,6d,8f,25)) ){
HXLINE( 628)				value = ::cpp::VirtualArray_obj::__new();
HXLINE( 629)				{
HXLINE( 629)					 ::Dynamic childNode = node->elements();
HXDLIN( 629)					while(( (bool)(childNode->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 629)						 ::Xml childNode1 = ( ( ::Xml)(childNode->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 631)						 ::Dynamic value1 =  ::Dynamic(value->__Field(HX_("push",da,11,61,4a),::hx::paccDynamic));
HXDLIN( 631)						value1(::flxanimate::frames::PropertyList_obj::parseValue(childNode1));
            					}
            				}
HXLINE( 627)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("data",2a,56,63,42)) ){
HXLINE( 650)				value = ::haxe::xml::_Access::Access_Impl__obj::get_innerData(node);
HXDLIN( 650)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("date",2e,56,63,42)) ){
HXLINE( 638)				value = ::flxanimate::frames::PropertyList_obj::parseDate(::haxe::xml::_Access::Access_Impl__obj::get_innerData(node));
HXDLIN( 638)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("dict",76,59,69,42)) ){
HXLINE( 635)				value = ::flxanimate::frames::PropertyList_obj::parseDict(node);
HXDLIN( 635)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("false",a3,35,4f,fb)) ){
HXLINE( 656)				value = false;
HXDLIN( 656)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("integer",be,bd,1b,17)) ){
HXLINE( 662)				value = ::Std_obj::parseInt(::haxe::xml::_Access::Access_Impl__obj::get_innerData(node));
HXDLIN( 662)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("real",5e,4b,a7,4b)) ){
HXLINE( 659)				value = ::Std_obj::parseFloat(::haxe::xml::_Access::Access_Impl__obj::get_innerData(node));
HXDLIN( 659)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE( 641)				 ::Dynamic thing = ::haxe::xml::_Access::Access_Impl__obj::get_innerData(node);
HXLINE( 642)				if (::hx::IsEq( thing->__Field(HX_("charAt",69,79,75,b7),::hx::paccDynamic)(0),HX_("{",7b,00,00,00) )) {
HXLINE( 644)					thing = ::StringTools_obj::replace(( (::String)(thing) ),HX_("{",7b,00,00,00),HX_("",00,00,00,00));
HXLINE( 645)					thing = ::StringTools_obj::replace(( (::String)(thing) ),HX_("}",7d,00,00,00),HX_("",00,00,00,00));
HXLINE( 646)					thing = thing->__Field(HX_("split",da,ea,6e,81),::hx::paccDynamic)(HX_(",",2c,00,00,00));
            				}
HXLINE( 648)				value = thing;
HXLINE( 640)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("true",4e,a7,03,4d)) ){
HXLINE( 653)				value = true;
HXDLIN( 653)				goto _hx_goto_4;
            			}
            			_hx_goto_4:;
            		}
HXLINE( 664)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PropertyList_obj,parseValue,return )


PropertyList_obj::PropertyList_obj()
{
}

bool PropertyList_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { outValue = parse_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"parseDate") ) { outValue = parseDate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"parseDict") ) { outValue = parseDict_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_dateRegex") ) { outValue = ( _dateRegex ); return true; }
		if (HX_FIELD_EQ(inName,"parseValue") ) { outValue = parseValue_dyn(); return true; }
	}
	return false;
}

bool PropertyList_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"_dateRegex") ) { _dateRegex=ioValue.Cast<  ::EReg >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *PropertyList_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo PropertyList_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::EReg */ ,(void *) &PropertyList_obj::_dateRegex,HX_("_dateRegex",7a,9d,be,21)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void PropertyList_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PropertyList_obj::_dateRegex,"_dateRegex");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PropertyList_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PropertyList_obj::_dateRegex,"_dateRegex");
};

#endif

::hx::Class PropertyList_obj::__mClass;

static ::String PropertyList_obj_sStaticFields[] = {
	HX_("_dateRegex",7a,9d,be,21),
	HX_("parse",33,90,55,bd),
	HX_("parseDate",01,a8,09,ca),
	HX_("parseDict",49,ab,0f,ca),
	HX_("parseValue",3e,c6,99,5b),
	::String(null())
};

void PropertyList_obj::__register()
{
	PropertyList_obj _hx_dummy;
	PropertyList_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.frames.PropertyList",bc,27,7f,88);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PropertyList_obj::__GetStatic;
	__mClass->mSetStaticField = &PropertyList_obj::__SetStatic;
	__mClass->mMarkFunc = PropertyList_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PropertyList_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< PropertyList_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PropertyList_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PropertyList_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PropertyList_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PropertyList_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_f26789f07b71deda_578_boot)
HXDLIN( 578)		_dateRegex =  ::EReg_obj::__alloc( HX_CTX ,HX_("(\\d{4}-\\d{2}-\\d{2})(?:T(\\d{2}:\\d{2}:\\d{2})Z)?",09,02,21,c9),HX_("",00,00,00,00));
            	}
}

} // end namespace flxanimate
} // end namespace frames
