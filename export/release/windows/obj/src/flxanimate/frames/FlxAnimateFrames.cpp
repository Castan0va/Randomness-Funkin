// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flxanimate_frames_FlxAnimateFrames
#include <flxanimate/frames/FlxAnimateFrames.h>
#endif
#ifndef INCLUDED_flxanimate_frames_PropertyList
#include <flxanimate/frames/PropertyList.h>
#endif
#ifndef INCLUDED_flxanimate_zip_Zip
#include <flxanimate/zip/Zip.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_List
#include <haxe/ds/List.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_ds__List_ListNode
#include <haxe/ds/_List/ListNode.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_AttribAccess_Impl_
#include <haxe/xml/_Access/AttribAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_HasAttribAccess_Impl_
#include <haxe/xml/_Access/HasAttribAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_NodeListAccess_Impl_
#include <haxe/xml/_Access/NodeListAccess_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_34_new,"flxanimate.frames.FlxAnimateFrames","new",0x9b6c2230,"flxanimate.frames.FlxAnimateFrames.new","flxanimate/frames/FlxAnimateFrames.hx",34,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_160_animateConcat,"flxanimate.frames.FlxAnimateFrames","animateConcat",0x238f3c65,"flxanimate.frames.FlxAnimateFrames.animateConcat","flxanimate/frames/FlxAnimateFrames.hx",160,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_49_fromTextureAtlas,"flxanimate.frames.FlxAnimateFrames","fromTextureAtlas",0x13062f2a,"flxanimate.frames.FlxAnimateFrames.fromTextureAtlas","flxanimate/frames/FlxAnimateFrames.hx",49,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_100_fromTextureAtlas,"flxanimate.frames.FlxAnimateFrames","fromTextureAtlas",0x13062f2a,"flxanimate.frames.FlxAnimateFrames.fromTextureAtlas","flxanimate/frames/FlxAnimateFrames.hx",100,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_177_fromSparrow,"flxanimate.frames.FlxAnimateFrames","fromSparrow",0x6d634192,"flxanimate.frames.FlxAnimateFrames.fromSparrow","flxanimate/frames/FlxAnimateFrames.hx",177,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_246_fromAnimateAtlas,"flxanimate.frames.FlxAnimateFrames","fromAnimateAtlas",0x8be5efa4,"flxanimate.frames.FlxAnimateFrames.fromAnimateAtlas","flxanimate/frames/FlxAnimateFrames.hx",246,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_276_fromJson,"flxanimate.frames.FlxAnimateFrames","fromJson",0xe4912ce2,"flxanimate.frames.FlxAnimateFrames.fromJson","flxanimate/frames/FlxAnimateFrames.hx",276,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_335_fromEdgeAnimate,"flxanimate.frames.FlxAnimateFrames","fromEdgeAnimate",0x4e4cac6a,"flxanimate.frames.FlxAnimateFrames.fromEdgeAnimate","flxanimate/frames/FlxAnimateFrames.hx",335,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_344_fromStarling,"flxanimate.frames.FlxAnimateFrames","fromStarling",0xebd01c82,"flxanimate.frames.FlxAnimateFrames.fromStarling","flxanimate/frames/FlxAnimateFrames.hx",344,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_390_fromCocos2D,"flxanimate.frames.FlxAnimateFrames","fromCocos2D",0x92828b33,"flxanimate.frames.FlxAnimateFrames.fromCocos2D","flxanimate/frames/FlxAnimateFrames.hx",390,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_440_fromEaselJS,"flxanimate.frames.FlxAnimateFrames","fromEaselJS",0x7c76568d,"flxanimate.frames.FlxAnimateFrames.fromEaselJS","flxanimate/frames/FlxAnimateFrames.hx",440,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_485_cocosHelper,"flxanimate.frames.FlxAnimateFrames","cocosHelper",0xb70676b9,"flxanimate.frames.FlxAnimateFrames.cocosHelper","flxanimate/frames/FlxAnimateFrames.hx",485,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_508_starlingHelper,"flxanimate.frames.FlxAnimateFrames","starlingHelper",0x10eb6486,"flxanimate.frames.FlxAnimateFrames.starlingHelper","flxanimate/frames/FlxAnimateFrames.hx",508,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_531_textureAtlasHelper,"flxanimate.frames.FlxAnimateFrames","textureAtlasHelper",0xf8c7982e,"flxanimate.frames.FlxAnimateFrames.textureAtlasHelper","flxanimate/frames/FlxAnimateFrames.hx",531,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_552_texturePackerHelper,"flxanimate.frames.FlxAnimateFrames","texturePackerHelper",0x896214df,"flxanimate.frames.FlxAnimateFrames.texturePackerHelper","flxanimate/frames/FlxAnimateFrames.hx",552,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_573_max,"flxanimate.frames.FlxAnimateFrames","max",0x9b6b5c74,"flxanimate.frames.FlxAnimateFrames.max","flxanimate/frames/FlxAnimateFrames.hx",573,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_38_boot,"flxanimate.frames.FlxAnimateFrames","boot",0x5b4ac862,"flxanimate.frames.FlxAnimateFrames.boot","flxanimate/frames/FlxAnimateFrames.hx",38,0x11169520)
namespace flxanimate{
namespace frames{

void FlxAnimateFrames_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_34_new)
HXLINE(  35)		super::__construct(null(),null());
HXLINE(  36)		this->parents = ::Array_obj< ::Dynamic>::__new(0);
            	}

Dynamic FlxAnimateFrames_obj::__CreateEmpty() { return new FlxAnimateFrames_obj; }

void *FlxAnimateFrames_obj::_hx_vtable = 0;

Dynamic FlxAnimateFrames_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxAnimateFrames_obj > _hx_result = new FlxAnimateFrames_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxAnimateFrames_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x42bbdcd2) {
		if (inClassId<=(int)0x1ee6bdec) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1ee6bdec;
		} else {
			return inClassId==(int)0x42bbdcd2;
		}
	} else {
		return inClassId==(int)0x7907b929;
	}
}

 ::flxanimate::frames::FlxAnimateFrames FlxAnimateFrames_obj::animateConcat( ::flixel::graphics::frames::FlxFramesCollection frames){
            	HX_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_160_animateConcat)
HXLINE( 161)		if ((this->parents->indexOf(frames->parent,null()) == -1)) {
HXLINE( 162)			this->parents->push(frames->parent);
            		}
HXLINE( 163)		{
HXLINE( 163)			int _g = 0;
HXDLIN( 163)			::Array< ::Dynamic> _g1 = frames->frames;
HXDLIN( 163)			while((_g < _g1->length)){
HXLINE( 163)				 ::flixel::graphics::frames::FlxFrame frame = _g1->__get(_g).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN( 163)				_g = (_g + 1);
HXLINE( 165)				this->frames->push(frame);
HXLINE( 166)				this->framesByName->set(frame->name,frame);
            			}
            		}
HXLINE( 168)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAnimateFrames_obj,animateConcat,return )

 ::Dynamic FlxAnimateFrames_obj::data;

 ::haxe::ds::List FlxAnimateFrames_obj::zip;

 ::flixel::graphics::frames::FlxAtlasFrames FlxAnimateFrames_obj::fromTextureAtlas(::String Path){
            	HX_GC_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_49_fromTextureAtlas)
HXLINE(  50)		 ::flxanimate::frames::FlxAnimateFrames frames =  ::flxanimate::frames::FlxAnimateFrames_obj::__alloc( HX_CTX );
HXLINE(  52)		bool _hx_tmp;
HXDLIN(  52)		if (::hx::IsNull( ::flxanimate::frames::FlxAnimateFrames_obj::zip )) {
HXLINE(  52)			_hx_tmp = (::haxe::io::Path_obj::extension(Path) == HX_("zip",e1,ee,5c,00));
            		}
            		else {
HXLINE(  52)			_hx_tmp = true;
            		}
HXDLIN(  52)		if (_hx_tmp) {
HXLINE(  58)			 ::haxe::ds::StringMap imagemap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  59)			 ::haxe::ds::StringMap jsonMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  60)			 ::haxe::ds::List thing;
HXDLIN(  60)			if (::hx::IsNotNull( ::flxanimate::frames::FlxAnimateFrames_obj::zip )) {
HXLINE(  60)				thing = ::flxanimate::frames::FlxAnimateFrames_obj::zip;
            			}
            			else {
HXLINE(  60)				thing = ::flxanimate::zip::Zip_obj::unzip(::flxanimate::zip::Zip_obj::readZip(::sys::io::File_obj::getBytes(Path)));
            			}
HXLINE(  61)			{
HXLINE(  61)				 ::haxe::ds::_List::ListNode _g_head = thing->h;
HXDLIN(  61)				while(::hx::IsNotNull( _g_head )){
HXLINE(  61)					 ::Dynamic val = _g_head->item;
HXDLIN(  61)					_g_head = _g_head->next;
HXDLIN(  61)					 ::Dynamic list = val;
HXLINE(  63)					if ((::haxe::io::Path_obj::extension(( (::String)(list->__Field(HX_("fileName",e7,5a,43,62),::hx::paccDynamic)) )) == HX_("json",28,42,68,46))) {
HXLINE(  65)						::String key = ( (::String)(list->__Field(HX_("fileName",e7,5a,43,62),::hx::paccDynamic)) );
HXDLIN(  65)						::String text = ( ( ::haxe::io::Bytes)(list->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic)) )->toString();
HXDLIN(  65)						jsonMap->set(key, ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,::StringTools_obj::replace(text,::String::fromCharCode(65279),HX_("",00,00,00,00)))->doParse());
            					}
            					else {
HXLINE(  67)						if ((::haxe::io::Path_obj::extension(( (::String)(list->__Field(HX_("fileName",e7,5a,43,62),::hx::paccDynamic)) )) == HX_("png",a9,5c,55,00))) {
HXLINE(  69)							::Array< ::String > name = ( (::String)(list->__Field(HX_("fileName",e7,5a,43,62),::hx::paccDynamic)) ).split(HX_("/",2f,00,00,00));
HXLINE(  70)							imagemap->set(name->__get((name->length - 1)), ::Dynamic(list->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic)));
            						}
            					}
            				}
            			}
HXLINE(  74)			{
HXLINE(  74)				 ::Dynamic curJson = jsonMap->iterator();
HXDLIN(  74)				while(( (bool)(curJson->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  74)					 ::Dynamic curJson1 = curJson->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXLINE(  76)					 ::openfl::display::BitmapData curImage = ::openfl::display::BitmapData_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(( ( ::haxe::io::Bytes)(imagemap->get( ::Dynamic( ::Dynamic(curJson1->__Field(HX_("meta",c5,4a,59,48),::hx::paccDynamic))->__Field(HX_("image",5b,1f,69,bd),::hx::paccDynamic)))) )),null());
HXLINE(  77)					if (::hx::IsNotNull( curImage )) {
HXLINE(  79)						int _g = 0;
HXDLIN(  79)						::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)( ::Dynamic(curJson1->__Field(HX_("ATLAS",2b,85,cb,a4),::hx::paccDynamic))->__Field(HX_("SPRITES",ae,7c,5e,df),::hx::paccDynamic)) );
HXDLIN(  79)						while((_g < _g1->length)){
HXLINE(  79)							 ::Dynamic sprites = _g1->__get(_g);
HXDLIN(  79)							_g = (_g + 1);
HXLINE(  81)							 ::flixel::graphics::FlxGraphic _hx_tmp1 = ::flixel::FlxG_obj::bitmap->add(curImage,null(),null());
HXDLIN(  81)							frames->pushFrame(::flxanimate::frames::FlxAnimateFrames_obj::textureAtlasHelper(_hx_tmp1,sprites->__Field(HX_("SPRITE",05,88,18,76),::hx::paccDynamic),curJson1->__Field(HX_("meta",c5,4a,59,48),::hx::paccDynamic)),null());
            						}
            					}
            					else {
HXLINE(  85)						::flixel::FlxG_obj::log->advanced( ::Dynamic(((HX_("the Image called \"",13,5a,c4,73) +  ::Dynamic(curJson1->__Field(HX_("meta",c5,4a,59,48),::hx::paccDynamic))->__Field(HX_("image",5b,1f,69,bd),::hx::paccDynamic)) + HX_("\" isnt in this zip file!",0d,10,fa,27))),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            					}
            				}
            			}
            		}
            		else {
HXLINE(  92)			::Array< ::String > _g2 = ::Array_obj< ::String >::__new(0);
HXDLIN(  92)			{
HXLINE(  92)				int _g3 = 0;
HXDLIN(  92)				::Array< ::String > _g4 = ::sys::FileSystem_obj::readDirectory(Path);
HXDLIN(  92)				while((_g3 < _g4->length)){
HXLINE(  92)					::String v = _g4->__get(_g3);
HXDLIN(  92)					_g3 = (_g3 + 1);
HXDLIN(  92)					bool _hx_tmp2;
HXDLIN(  92)					if (::StringTools_obj::startsWith(v,HX_("spritemap",b7,bf,1c,56))) {
HXLINE(  92)						_hx_tmp2 = ::StringTools_obj::endsWith(v.toLowerCase(),HX_(".json",56,f1,d6,c2));
            					}
            					else {
HXLINE(  92)						_hx_tmp2 = false;
            					}
HXDLIN(  92)					if (_hx_tmp2) {
HXLINE(  92)						_g2->push(v);
            					}
            				}
            			}
HXDLIN(  92)			::Array< ::String > texts = _g2;
HXLINE(  93)			{
HXLINE(  93)				int _g5 = 0;
HXDLIN(  93)				int _g6 = texts->length;
HXDLIN(  93)				while((_g5 < _g6)){
HXLINE(  93)					_g5 = (_g5 + 1);
HXDLIN(  93)					int i = (_g5 - 1);
HXDLIN(  93)					texts[i] = (((HX_("",00,00,00,00) + Path) + HX_("/",2f,00,00,00)) + texts->__get(i));
            				}
            			}
HXLINE(  97)			if ((texts->length > 1)) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            				int _hx_run(::String a,::String b){
            					HX_GC_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_100_fromTextureAtlas)
HXLINE( 101)					 ::Dynamic an = ::Std_obj::parseInt(::haxe::io::Path_obj::withoutDirectory(a).charAt(9));
HXLINE( 102)					 ::Dynamic bn = ::Std_obj::parseInt(::haxe::io::Path_obj::withoutDirectory(b).charAt(9));
HXLINE( 103)					bool _hx_tmp;
HXDLIN( 103)					if (!(::Math_obj::isNaN(( (Float)(an) )))) {
HXLINE( 103)						_hx_tmp = ::Math_obj::isNaN(( (Float)(bn) ));
            					}
            					else {
HXLINE( 103)						_hx_tmp = true;
            					}
HXDLIN( 103)					if (_hx_tmp) {
HXLINE( 104)						return 0;
            					}
HXLINE( 106)					return (( (int)(an) ) - ( (int)(bn) ));
            				}
            				HX_END_LOCAL_FUNC2(return)

HXLINE(  99)				texts->sort( ::Dynamic(new _hx_Closure_0()));
            			}
HXLINE( 109)			::Array< ::Dynamic> spritemaps = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 110)			{
HXLINE( 110)				int _g7 = 0;
HXDLIN( 110)				while((_g7 < texts->length)){
HXLINE( 110)					::String text1 = texts->__get(_g7);
HXDLIN( 110)					_g7 = (_g7 + 1);
HXLINE( 113)					::String txt = ::sys::io::File_obj::getContent(text1);
HXLINE( 117)					if (::hx::IsEq( txt.charCodeAt(0),65279 )) {
HXLINE( 118)						txt = txt.substring(1,null());
            					}
HXLINE( 119)					 ::Dynamic json =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,txt)->doParse();
HXLINE( 122)					spritemaps->push( ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("image",5b,1f,69,bd),::openfl::display::BitmapData_obj::fromFile(( (::String)((((HX_("",00,00,00,00) + Path) + HX_("/",2f,00,00,00)) +  ::Dynamic(json->__Field(HX_("meta",c5,4a,59,48),::hx::paccDynamic))->__Field(HX_("image",5b,1f,69,bd),::hx::paccDynamic))) )))
            						->setFixed(1,HX_("json",28,42,68,46),json)));
            				}
            			}
HXLINE( 128)			{
HXLINE( 128)				int _g8 = 0;
HXDLIN( 128)				while((_g8 < spritemaps->length)){
HXLINE( 128)					 ::Dynamic spritemap = spritemaps->__get(_g8);
HXDLIN( 128)					_g8 = (_g8 + 1);
HXLINE( 130)					if (::hx::IsNull( spritemap->__Field(HX_("image",5b,1f,69,bd),::hx::paccDynamic) )) {
HXLINE( 132)						::flixel::FlxG_obj::log->advanced( ::Dynamic(((((HX_("the image called \"",f3,c5,6e,c9) +  ::Dynamic( ::Dynamic(spritemap->__Field(HX_("json",28,42,68,46),::hx::paccDynamic))->__Field(HX_("meta",c5,4a,59,48),::hx::paccDynamic))->__Field(HX_("image",5b,1f,69,bd),::hx::paccDynamic)) + HX_("\" does not exist in Path ",3f,e8,91,81)) + Path) + HX_(", maybe you changed the image Path somewhere else?",8b,5d,68,2f))),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
HXLINE( 133)						continue;
            					}
HXLINE( 136)					 ::flixel::graphics::FlxGraphic graphic = ::flixel::FlxG_obj::bitmap->add( ::Dynamic(spritemap->__Field(HX_("image",5b,1f,69,bd),::hx::paccDynamic)),null(),null());
HXLINE( 137)					 ::flixel::graphics::frames::FlxAtlasFrames spritemapFrames = ::flixel::graphics::frames::FlxAtlasFrames_obj::findFrame(graphic,null());
HXLINE( 138)					if (::hx::IsNull( spritemapFrames )) {
HXLINE( 140)						spritemapFrames =  ::flxanimate::frames::FlxAnimateFrames_obj::__alloc( HX_CTX );
HXLINE( 141)						{
HXLINE( 141)							int _g9 = 0;
HXDLIN( 141)							::Array< ::Dynamic> _g10 = ( (::Array< ::Dynamic>)( ::Dynamic( ::Dynamic(spritemap->__Field(HX_("json",28,42,68,46),::hx::paccDynamic))->__Field(HX_("ATLAS",2b,85,cb,a4),::hx::paccDynamic))->__Field(HX_("SPRITES",ae,7c,5e,df),::hx::paccDynamic)) );
HXDLIN( 141)							while((_g9 < _g10->length)){
HXLINE( 141)								 ::Dynamic curSprite = _g10->__get(_g9);
HXDLIN( 141)								_g9 = (_g9 + 1);
HXLINE( 143)								spritemapFrames->pushFrame(::flxanimate::frames::FlxAnimateFrames_obj::textureAtlasHelper(graphic,curSprite->__Field(HX_("SPRITE",05,88,18,76),::hx::paccDynamic), ::Dynamic(spritemap->__Field(HX_("json",28,42,68,46),::hx::paccDynamic))->__Field(HX_("meta",c5,4a,59,48),::hx::paccDynamic)),null());
            							}
            						}
            					}
HXLINE( 146)					graphic->addFrameCollection(spritemapFrames);
HXLINE( 147)					frames->animateConcat(spritemapFrames);
            				}
            			}
HXLINE( 150)			if (::hx::IsPointerEq( frames->frames,::Array_obj< ::Dynamic>::__new(0) )) {
HXLINE( 152)				::flixel::FlxG_obj::log->advanced(HX_("the Frames parsing couldn't parse any of the frames, it's completely empty! \n Maybe you misspelled the Path?",ff,0a,77,40),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
HXLINE( 153)				return null();
            			}
            		}
HXLINE( 156)		return frames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxAnimateFrames_obj,fromTextureAtlas,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAnimateFrames_obj::fromSparrow( ::Dynamic Path, ::Dynamic Image){
            	HX_GC_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_177_fromSparrow)
HXLINE( 178)		bool _hx_tmp;
HXDLIN( 178)		bool _hx_tmp1;
HXDLIN( 178)		if (::Std_obj::isOfType(Path,::hx::ClassOf< ::String >())) {
HXLINE( 178)			_hx_tmp1 = !(::sys::FileSystem_obj::exists(( (::String)(Path) )));
            		}
            		else {
HXLINE( 178)			_hx_tmp1 = false;
            		}
HXDLIN( 178)		if (_hx_tmp1) {
HXLINE( 178)			_hx_tmp = !(::openfl::utils::Assets_obj::exists(( (::String)(Path) ),null()));
            		}
            		else {
HXLINE( 178)			_hx_tmp = false;
            		}
HXDLIN( 178)		if (_hx_tmp) {
HXLINE( 179)			return null();
            		}
HXLINE( 181)		 ::Xml x;
HXDLIN( 181)		if (::Std_obj::isOfType(Path,::hx::ClassOf< ::String >())) {
HXLINE( 181)			x = ::Xml_obj::parse(::sys::io::File_obj::getContent(( (::String)(Path) )))->firstElement();
            		}
            		else {
HXLINE( 181)			x = ( ( ::Xml)(Path->__Field(HX_("firstElement",6c,c4,9c,2f),::hx::paccDynamic)()) );
            		}
HXDLIN( 181)		bool _hx_tmp2;
HXDLIN( 181)		if ((x->nodeType != ::Xml_obj::Document)) {
HXLINE( 181)			_hx_tmp2 = (x->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE( 181)			_hx_tmp2 = false;
            		}
HXDLIN( 181)		if (_hx_tmp2) {
HXLINE( 181)			HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(x->nodeType)));
            		}
HXDLIN( 181)		 ::Xml data = x;
HXLINE( 182)		if (::hx::IsNull( Image )) {
HXLINE( 184)			if (::Std_obj::isOfType(Path,::hx::ClassOf< ::String >())) {
HXLINE( 186)				::String Image1 = ::haxe::io::Path_obj::directory(( (::String)(Path) ));
HXDLIN( 186)				Image = (Image1 + ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(data,HX_("imagePath",a0,7a,86,2c)));
            			}
            			else {
HXLINE( 189)				return null();
            			}
            		}
HXLINE( 191)		 ::flixel::graphics::FlxGraphic graphic = ::flixel::FlxG_obj::bitmap->add(Image,null(),null());
HXLINE( 192)		if (::hx::IsNull( graphic )) {
HXLINE( 193)			return null();
            		}
HXLINE( 196)		 ::flixel::graphics::frames::FlxAtlasFrames frames = ::flixel::graphics::frames::FlxAtlasFrames_obj::findFrame(graphic,null());
HXLINE( 197)		if (::hx::IsNotNull( frames )) {
HXLINE( 198)			return frames;
            		}
HXLINE( 200)		frames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__alloc( HX_CTX ,graphic,null());
HXLINE( 202)		{
HXLINE( 202)			int _g = 0;
HXDLIN( 202)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("SubTexture",5b,7b,fb,11));
HXDLIN( 202)			while((_g < _g1->length)){
HXLINE( 202)				 ::Xml texture = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN( 202)				_g = (_g + 1);
HXLINE( 204)				bool version2 = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(texture,HX_("width",06,b6,62,ca));
HXLINE( 205)				::String name = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("name",4b,72,ff,48));
HXLINE( 206)				bool trimmed = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(texture,HX_("frameX",8b,af,85,ac));
HXLINE( 207)				::String width;
HXDLIN( 207)				if (version2) {
HXLINE( 207)					width = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("width",06,b6,62,ca));
            				}
            				else {
HXLINE( 207)					width = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("w",77,00,00,00));
            				}
HXLINE( 208)				::String height;
HXDLIN( 208)				if (version2) {
HXLINE( 208)					height = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("height",e7,07,4c,02));
            				}
            				else {
HXLINE( 208)					height = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("h",68,00,00,00));
            				}
HXLINE( 209)				bool rotated;
HXDLIN( 209)				if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(texture,HX_("rotated",a9,49,1d,f1))) {
HXLINE( 209)					rotated = (::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("rotated",a9,49,1d,f1)) == HX_("true",4e,a7,03,4d));
            				}
            				else {
HXLINE( 209)					rotated = false;
            				}
HXLINE( 210)				bool flipX;
HXDLIN( 210)				if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(texture,HX_("flipX",0b,45,92,02))) {
HXLINE( 210)					flipX = (::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("flipX",0b,45,92,02)) == HX_("true",4e,a7,03,4d));
            				}
            				else {
HXLINE( 210)					flipX = false;
            				}
HXLINE( 211)				bool flipY;
HXDLIN( 211)				if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(texture,HX_("flipY",0c,45,92,02))) {
HXLINE( 211)					flipY = (::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("flipY",0c,45,92,02)) == HX_("true",4e,a7,03,4d));
            				}
            				else {
HXLINE( 211)					flipY = false;
            				}
HXLINE( 213)				Float X = ::Std_obj::parseFloat(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("x",78,00,00,00)));
HXDLIN( 213)				Float Y = ::Std_obj::parseFloat(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("y",79,00,00,00)));
HXDLIN( 213)				Float Width = ::Std_obj::parseFloat(width);
HXDLIN( 213)				Float Height = ::Std_obj::parseFloat(height);
HXDLIN( 213)				 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 213)				_this->x = X;
HXDLIN( 213)				_this->y = Y;
HXDLIN( 213)				_this->width = Width;
HXDLIN( 213)				_this->height = Height;
HXDLIN( 213)				 ::flixel::math::FlxRect rect = _this;
HXDLIN( 213)				rect->_inPool = false;
HXDLIN( 213)				 ::flixel::math::FlxRect rect1 = rect;
HXLINE( 216)				 ::flixel::math::FlxRect size;
HXDLIN( 216)				if (trimmed) {
HXLINE( 216)					 ::Dynamic size1 = ::Std_obj::parseInt(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("frameX",8b,af,85,ac)));
HXDLIN( 216)					 ::Dynamic size2 = ::Std_obj::parseInt(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("frameY",8c,af,85,ac)));
HXDLIN( 216)					 ::Dynamic size3 = ::Std_obj::parseInt(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("frameWidth",99,ea,88,ad)));
HXDLIN( 216)					size =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,size1,size2,size3,::Std_obj::parseInt(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("frameHeight",f4,d3,93,e0))));
            				}
            				else {
HXLINE( 217)					Float size4;
HXDLIN( 217)					if ((rect1->width == 0)) {
HXLINE( 217)						size4 = ( (Float)(1) );
            					}
            					else {
HXLINE( 217)						size4 = rect1->width;
            					}
HXDLIN( 217)					Float size5;
HXDLIN( 217)					if ((rect1->height == 0)) {
HXLINE( 217)						size5 = ( (Float)(1) );
            					}
            					else {
HXLINE( 217)						size5 = rect1->height;
            					}
HXLINE( 216)					size =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,size4,size5);
            				}
HXLINE( 219)				bool _hx_tmp3;
HXDLIN( 219)				if ((rect1->width != 0)) {
HXLINE( 219)					_hx_tmp3 = (rect1->height == 0);
            				}
            				else {
HXLINE( 219)					_hx_tmp3 = true;
            				}
HXDLIN( 219)				if (_hx_tmp3) {
HXLINE( 221)					frames->addEmptyFrame(size);
HXLINE( 222)					continue;
            				}
HXLINE( 225)				int angle;
HXDLIN( 225)				if (rotated) {
HXLINE( 225)					angle = -90;
            				}
            				else {
HXLINE( 225)					angle = 0;
            				}
HXLINE( 227)				Float x1 = -(size->x);
HXDLIN( 227)				Float y = -(size->y);
HXDLIN( 227)				 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x1,y);
HXDLIN( 227)				point->_inPool = false;
HXDLIN( 227)				 ::flixel::math::FlxBasePoint offset = point;
HXLINE( 228)				Float x2 = size->width;
HXDLIN( 228)				Float y1 = size->height;
HXDLIN( 228)				 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x2,y1);
HXDLIN( 228)				point1->_inPool = false;
HXDLIN( 228)				 ::flixel::math::FlxBasePoint ImageSize = point1;
HXLINE( 230)				bool _hx_tmp4;
HXDLIN( 230)				if (rotated) {
HXLINE( 230)					_hx_tmp4 = !(trimmed);
            				}
            				else {
HXLINE( 230)					_hx_tmp4 = false;
            				}
HXDLIN( 230)				if (_hx_tmp4) {
HXLINE( 231)					Float y2 = size->width;
HXDLIN( 231)					ImageSize->set_x(size->height);
HXDLIN( 231)					ImageSize->set_y(y2);
            				}
HXLINE( 233)				frames->addAtlasFrame(rect1,ImageSize,offset,name,angle,flipX,flipY,null());
            			}
            		}
HXLINE( 236)		return frames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAnimateFrames_obj,fromSparrow,return )

 ::flxanimate::frames::FlxAnimateFrames FlxAnimateFrames_obj::fromAnimateAtlas( ::Dynamic Data, ::Dynamic Image){
            	HX_GC_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_246_fromAnimateAtlas)
HXLINE( 247)		 ::flxanimate::frames::FlxAnimateFrames frames =  ::flxanimate::frames::FlxAnimateFrames_obj::__alloc( HX_CTX );
HXLINE( 248)		 ::flixel::graphics::FlxGraphic graphic = ::flixel::FlxG_obj::bitmap->add(Image,null(),null());
HXLINE( 249)		 ::flixel::graphics::frames::FlxAtlasFrames spritemapFrames = ::flixel::graphics::frames::FlxAtlasFrames_obj::findFrame(graphic,null());
HXLINE( 250)		if (::hx::IsNull( spritemapFrames )) {
HXLINE( 252)			spritemapFrames =  ::flxanimate::frames::FlxAnimateFrames_obj::__alloc( HX_CTX );
HXLINE( 253)			{
HXLINE( 253)				int _g = 0;
HXDLIN( 253)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)( ::Dynamic(Data->__Field(HX_("ATLAS",2b,85,cb,a4),::hx::paccDynamic))->__Field(HX_("SPRITES",ae,7c,5e,df),::hx::paccDynamic)) );
HXDLIN( 253)				while((_g < _g1->length)){
HXLINE( 253)					 ::Dynamic curSprite = _g1->__get(_g);
HXDLIN( 253)					_g = (_g + 1);
HXLINE( 255)					spritemapFrames->pushFrame(::flxanimate::frames::FlxAnimateFrames_obj::textureAtlasHelper(graphic,curSprite->__Field(HX_("SPRITE",05,88,18,76),::hx::paccDynamic),Data->__Field(HX_("meta",c5,4a,59,48),::hx::paccDynamic)),null());
            				}
            			}
            		}
HXLINE( 258)		graphic->addFrameCollection(spritemapFrames);
HXLINE( 259)		frames->animateConcat(spritemapFrames);
HXLINE( 261)		if (::hx::IsPointerEq( frames->frames,::Array_obj< ::Dynamic>::__new(0) )) {
HXLINE( 263)			::flixel::FlxG_obj::log->advanced(HX_("the Frames parsing couldn't parse any of the frames, it's completely empty! \n Maybe you misspelled the Path?",ff,0a,77,40),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
HXLINE( 264)			return null();
            		}
HXLINE( 266)		return frames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAnimateFrames_obj,fromAnimateAtlas,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAnimateFrames_obj::fromJson( ::Dynamic Path, ::Dynamic Image){
            	HX_GC_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_276_fromJson)
HXLINE( 277)		bool _hx_tmp;
HXDLIN( 277)		if (::Std_obj::isOfType(Path,::hx::ClassOf< ::String >())) {
HXLINE( 277)			_hx_tmp = !(::openfl::utils::Assets_obj::exists(( (::String)(Path) ),null()));
            		}
            		else {
HXLINE( 277)			_hx_tmp = false;
            		}
HXDLIN( 277)		if (_hx_tmp) {
HXLINE( 278)			return null();
            		}
HXLINE( 280)		 ::Dynamic data;
HXDLIN( 280)		if (::Std_obj::isOfType(Path,::hx::ClassOf< ::String >())) {
HXLINE( 280)			data =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,::sys::io::File_obj::getContent(( (::String)(Path) )))->doParse();
            		}
            		else {
HXLINE( 280)			data = Path;
            		}
HXLINE( 281)		if (::hx::IsNull( Image )) {
HXLINE( 283)			if (::Std_obj::isOfType(Path,::hx::ClassOf< ::String >())) {
HXLINE( 285)				 ::Dynamic splitDir = Path->__Field(HX_("split",da,ea,6e,81),::hx::paccDynamic)(HX_("/",2f,00,00,00));
HXLINE( 286)				splitDir->__Field(HX_("pop",91,5d,55,00),::hx::paccDynamic)();
HXLINE( 287)				splitDir->__Field(HX_("push",da,11,61,4a),::hx::paccDynamic)( ::Dynamic( ::Dynamic(data->__Field(HX_("meta",c5,4a,59,48),::hx::paccDynamic))->__Field(HX_("image",5b,1f,69,bd),::hx::paccDynamic)));
HXLINE( 288)				Image = splitDir->__Field(HX_("join",ea,33,65,46),::hx::paccDynamic)(HX_("/",2f,00,00,00));
            			}
            			else {
HXLINE( 292)				::flixel::FlxG_obj::log->advanced(HX_("The Path isn't a String but a Json, you need to set an image if you use Jsons!",c4,9f,88,1a),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
HXLINE( 293)				return null();
            			}
            		}
HXLINE( 297)		 ::flixel::graphics::FlxGraphic graphic = ::flixel::FlxG_obj::bitmap->add(Image,null(),null());
HXLINE( 298)		if (::hx::IsNull( graphic )) {
HXLINE( 299)			return null();
            		}
HXLINE( 302)		 ::flixel::graphics::frames::FlxAtlasFrames frames = ::flixel::graphics::frames::FlxAtlasFrames_obj::findFrame(graphic,null());
HXLINE( 303)		if (::hx::IsNotNull( frames )) {
HXLINE( 304)			return frames;
            		}
HXLINE( 306)		frames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__alloc( HX_CTX ,graphic,null());
HXLINE( 309)		if (::Std_obj::isOfType( ::Dynamic(data->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic)),::hx::ArrayBase::__mClass)) {
HXLINE( 311)			int _g = 0;
HXDLIN( 311)			::Array< ::Dynamic> _g1 = ::Lambda_obj::array(data->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic));
HXDLIN( 311)			while((_g < _g1->length)){
HXLINE( 311)				 ::Dynamic frame = _g1->__get(_g);
HXDLIN( 311)				_g = (_g + 1);
HXLINE( 313)				::flxanimate::frames::FlxAnimateFrames_obj::texturePackerHelper(( (::String)(frame->__Field(HX_("filename",c7,2e,6a,77),::hx::paccDynamic)) ),frame,frames);
            			}
            		}
            		else {
HXLINE( 319)			int _g2 = 0;
HXDLIN( 319)			::Array< ::String > _g3 = ::Reflect_obj::fields( ::Dynamic(data->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic)));
HXDLIN( 319)			while((_g2 < _g3->length)){
HXLINE( 319)				::String frameName = _g3->__get(_g2);
HXDLIN( 319)				_g2 = (_g2 + 1);
HXLINE( 321)				::flxanimate::frames::FlxAnimateFrames_obj::texturePackerHelper(frameName,::Reflect_obj::field( ::Dynamic(data->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic)),frameName),frames);
            			}
            		}
HXLINE( 325)		return frames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAnimateFrames_obj,fromJson,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAnimateFrames_obj::fromEdgeAnimate(::String Path, ::Dynamic Image){
            	HX_GC_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_335_fromEdgeAnimate)
HXDLIN( 335)		 ::Dynamic _hx_tmp;
HXDLIN( 335)		if (::StringTools_obj::startsWith(Path,HX_("{",7b,00,00,00))) {
HXDLIN( 335)			_hx_tmp =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,Path)->doParse();
            		}
            		else {
HXDLIN( 335)			_hx_tmp = Path;
            		}
HXDLIN( 335)		return ::flxanimate::frames::FlxAnimateFrames_obj::fromJson(_hx_tmp,Image);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAnimateFrames_obj,fromEdgeAnimate,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAnimateFrames_obj::fromStarling( ::Dynamic Path, ::Dynamic Image){
            	HX_GC_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_344_fromStarling)
HXLINE( 345)		bool _hx_tmp;
HXDLIN( 345)		if (::Std_obj::isOfType(Path,::hx::ClassOf< ::String >())) {
HXLINE( 345)			_hx_tmp = !(::openfl::utils::Assets_obj::exists(( (::String)(Path) ),null()));
            		}
            		else {
HXLINE( 345)			_hx_tmp = false;
            		}
HXDLIN( 345)		if (_hx_tmp) {
HXLINE( 346)			return null();
            		}
HXLINE( 347)		 ::Dynamic data;
HXDLIN( 347)		if (::Std_obj::isOfType(Path,::hx::ClassOf< ::String >())) {
HXLINE( 347)			data = ::flxanimate::frames::PropertyList_obj::parse(::openfl::utils::Assets_obj::getText(( (::String)(Path) )));
            		}
            		else {
HXLINE( 347)			data = Path;
            		}
HXLINE( 348)		if (::hx::IsNull( Image )) {
HXLINE( 350)			if (::Std_obj::isOfType(Path,::hx::ClassOf< ::String >())) {
HXLINE( 352)				 ::Dynamic splitDir = Path->__Field(HX_("split",da,ea,6e,81),::hx::paccDynamic)(HX_("/",2f,00,00,00));
HXLINE( 353)				splitDir->__Field(HX_("pop",91,5d,55,00),::hx::paccDynamic)();
HXLINE( 354)				splitDir->__Field(HX_("push",da,11,61,4a),::hx::paccDynamic)( ::Dynamic( ::Dynamic(data->__Field(HX_("metadata",6f,e7,19,40),::hx::paccDynamic))->__Field(HX_("textureFileName",e2,b2,62,c9),::hx::paccDynamic)));
HXLINE( 355)				Image = splitDir->__Field(HX_("join",ea,33,65,46),::hx::paccDynamic)(HX_("/",2f,00,00,00));
            			}
            			else {
HXLINE( 359)				return null();
            			}
            		}
HXLINE( 364)		 ::flixel::graphics::FlxGraphic graphic = ::flixel::FlxG_obj::bitmap->add(Image,false,null());
HXLINE( 365)		if (::hx::IsNull( graphic )) {
HXLINE( 366)			return null();
            		}
HXLINE( 369)		 ::flixel::graphics::frames::FlxAtlasFrames frames = ::flixel::graphics::frames::FlxAtlasFrames_obj::findFrame(graphic,null());
HXLINE( 370)		if (::hx::IsNotNull( frames )) {
HXLINE( 371)			return frames;
            		}
HXLINE( 373)		frames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__alloc( HX_CTX ,graphic,null());
HXLINE( 375)		{
HXLINE( 375)			int _g = 0;
HXDLIN( 375)			::Array< ::String > _g1 = ::Reflect_obj::fields( ::Dynamic(data->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic)));
HXDLIN( 375)			while((_g < _g1->length)){
HXLINE( 375)				::String frameName = _g1->__get(_g);
HXDLIN( 375)				_g = (_g + 1);
HXLINE( 377)				::flxanimate::frames::FlxAnimateFrames_obj::starlingHelper(frameName,::Reflect_obj::field( ::Dynamic(data->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic)),frameName),frames);
            			}
            		}
HXLINE( 380)		return frames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAnimateFrames_obj,fromStarling,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAnimateFrames_obj::fromCocos2D(::String Path, ::Dynamic Image){
            	HX_GC_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_390_fromCocos2D)
HXLINE( 391)		if (!(::openfl::utils::Assets_obj::exists(Path,null()))) {
HXLINE( 392)			return null();
            		}
HXLINE( 393)		 ::Dynamic data = ::flxanimate::frames::PropertyList_obj::parse(::openfl::utils::Assets_obj::getText(Path));
HXLINE( 394)		if (::hx::IsEq(  ::Dynamic(data->__Field(HX_("metadata",6f,e7,19,40),::hx::paccDynamic))->__Field(HX_("format",37,8f,8e,fd),::hx::paccDynamic),2 )) {
HXLINE( 396)			return ::flxanimate::frames::FlxAnimateFrames_obj::fromStarling(Path,Image);
            		}
            		else {
HXLINE( 400)			if (::hx::IsNull( Image )) {
HXLINE( 402)				if (::Std_obj::isOfType(Path,::hx::ClassOf< ::String >())) {
HXLINE( 404)					::Array< ::String > splitDir = Path.split(HX_("/",2f,00,00,00));
HXLINE( 405)					splitDir->pop();
HXLINE( 406)					splitDir->push( ::Dynamic( ::Dynamic( ::Dynamic(data->__Field(HX_("metadata",6f,e7,19,40),::hx::paccDynamic))->__Field(HX_("target",51,f3,ec,86),::hx::paccDynamic))->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)));
HXLINE( 407)					Image = splitDir->join(HX_("/",2f,00,00,00));
            				}
            				else {
HXLINE( 411)					return null();
            				}
            			}
HXLINE( 414)			 ::flixel::graphics::FlxGraphic graphic = ::flixel::FlxG_obj::bitmap->add(Image,null(),null());
HXLINE( 415)			if (::hx::IsNull( graphic )) {
HXLINE( 416)				return null();
            			}
HXLINE( 419)			 ::flixel::graphics::frames::FlxAtlasFrames frames = ::flixel::graphics::frames::FlxAtlasFrames_obj::findFrame(graphic,null());
HXLINE( 420)			if (::hx::IsNotNull( frames )) {
HXLINE( 421)				return frames;
            			}
HXLINE( 423)			frames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__alloc( HX_CTX ,graphic,null());
HXLINE( 425)			{
HXLINE( 425)				int _g = 0;
HXDLIN( 425)				::Array< ::String > _g1 = ::Reflect_obj::fields( ::Dynamic(data->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic)));
HXDLIN( 425)				while((_g < _g1->length)){
HXLINE( 425)					::String frameName = _g1->__get(_g);
HXDLIN( 425)					_g = (_g + 1);
HXLINE( 427)					::flxanimate::frames::FlxAnimateFrames_obj::cocosHelper(frameName,::Reflect_obj::field( ::Dynamic(data->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic)),frameName),frames);
            				}
            			}
HXLINE( 430)			return frames;
            		}
HXLINE( 394)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAnimateFrames_obj,fromCocos2D,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAnimateFrames_obj::fromEaselJS(::String Path, ::Dynamic Image){
            	HX_GC_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_440_fromEaselJS)
HXLINE( 441)		 ::flixel::graphics::frames::FlxAtlasFrames hugeFrames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 442)		::Array< ::String > separatedJS = ::openfl::utils::Assets_obj::getText(Path).split(HX_("\n",0a,00,00,00));
HXLINE( 443)		::Array< ::String > lines = ::Array_obj< ::String >::__new(0);
HXLINE( 444)		{
HXLINE( 444)			int _g = 0;
HXDLIN( 444)			while((_g < separatedJS->length)){
HXLINE( 444)				::String line = separatedJS->__get(_g);
HXDLIN( 444)				_g = (_g + 1);
HXLINE( 446)				if ((line.indexOf(HX_("new createjs.SpriteSheet({",64,ba,60,3b),null()) != -1)) {
HXLINE( 447)					lines->push(line);
            				}
            			}
            		}
HXLINE( 449)		::Array< ::String > names = ::Array_obj< ::String >::__new(0);
HXLINE( 450)		::Array< ::Dynamic> jsons = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 451)		{
HXLINE( 451)			int _g1 = 0;
HXDLIN( 451)			while((_g1 < lines->length)){
HXLINE( 451)				::String line1 = lines->__get(_g1);
HXDLIN( 451)				_g1 = (_g1 + 1);
HXLINE( 453)				names->push(::StringTools_obj::replace(line1.split(HX_(".",2e,00,00,00))->__get(0),HX_("_",5f,00,00,00),HX_(" ",20,00,00,00)));
HXLINE( 454)				::String curJson = ::StringTools_obj::replace(::StringTools_obj::replace(line1.split(HX_("(",28,00,00,00))->__get(1),HX_(")",29,00,00,00),HX_("",00,00,00,00)),HX_(";",3b,00,00,00),HX_("",00,00,00,00));
HXLINE( 455)				 ::Dynamic parsedJson =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX , ::EReg_obj::__alloc( HX_CTX ,HX_("({|,\\s*)(\\S+)(\\s*:)",7e,35,70,6b),HX_("g",67,00,00,00))->replace(curJson,HX_("$1\"$2\"$3",4e,85,69,74)))->doParse();
HXLINE( 456)				jsons->push(parsedJson);
            			}
            		}
HXLINE( 458)		::String prevName = HX_("",00,00,00,00);
HXLINE( 459)		::Array< ::String > imagePath = Path.split(HX_("/",2f,00,00,00));
HXLINE( 460)		imagePath->pop();
HXLINE( 461)		{
HXLINE( 461)			int _g2 = 0;
HXDLIN( 461)			int _g3 = names->length;
HXDLIN( 461)			while((_g2 < _g3)){
HXLINE( 461)				_g2 = (_g2 + 1);
HXDLIN( 461)				int i = (_g2 - 1);
HXLINE( 463)				int times = 0;
HXLINE( 464)				::String name = names->__get(i);
HXLINE( 465)				 ::Dynamic json = jsons->__get(i);
HXLINE( 466)				 ::flixel::_hx_system::frontEnds::BitmapFrontEnd bitmap = ::flixel::FlxG_obj::bitmap;
HXDLIN( 466)				::String bitmap1;
HXDLIN( 466)				if (::hx::IsNull( Image )) {
HXLINE( 466)					::String bitmap2 = ((HX_("",00,00,00,00) + imagePath->join(HX_("/",2f,00,00,00))) + HX_("/",2f,00,00,00));
HXDLIN( 466)					bitmap1 = (bitmap2 +  ::Dynamic(json->__Field(HX_("images",b8,50,92,fe),::hx::paccDynamic))->__GetItem(0));
            				}
            				else {
HXLINE( 466)					bitmap1 = ( (::String)(Image) );
            				}
HXDLIN( 466)				 ::flixel::graphics::FlxGraphic bitmap3 = bitmap->add(::openfl::utils::Assets_obj::getBitmapData(bitmap1,null()),null(),null());
HXLINE( 467)				 ::flixel::graphics::frames::FlxAtlasFrames frames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__alloc( HX_CTX ,bitmap3,null());
HXLINE( 468)				{
HXLINE( 468)					int _g4 = 0;
HXDLIN( 468)					::Array< ::Dynamic> _g5 = ( (::Array< ::Dynamic>)(json->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic)) );
HXDLIN( 468)					while((_g4 < _g5->length)){
HXLINE( 468)						::Array< int > frame = _g5->__get(_g4).StaticCast< ::Array< int > >();
HXDLIN( 468)						_g4 = (_g4 + 1);
HXLINE( 470)						 ::flixel::math::FlxRect frameRect =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,frame->__get(0),frame->__get(1),frame->__get(2),frame->__get(3));
HXLINE( 471)						Float x = frameRect->width;
HXDLIN( 471)						Float y = frameRect->height;
HXDLIN( 471)						 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 471)						point->_inPool = false;
HXDLIN( 471)						 ::flixel::math::FlxBasePoint sourceSize = point;
HXLINE( 472)						 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(-(frame->__get(5)),-(frame->__get(6)));
HXDLIN( 472)						point1->_inPool = false;
HXDLIN( 472)						 ::flixel::math::FlxBasePoint offset = point1;
HXLINE( 473)						frames->addAtlasFrame(frameRect,sourceSize,offset,(name + ::Std_obj::string(times)),null(),null(),null(),null());
HXLINE( 474)						times = (times + 1);
            					}
            				}
HXLINE( 476)				{
HXLINE( 476)					int _g6 = 0;
HXDLIN( 476)					::Array< ::Dynamic> _g7 = frames->frames;
HXDLIN( 476)					while((_g6 < _g7->length)){
HXLINE( 476)						 ::flixel::graphics::frames::FlxFrame frame1 = _g7->__get(_g6).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN( 476)						_g6 = (_g6 + 1);
HXLINE( 478)						hugeFrames->pushFrame(frame1,null());
            					}
            				}
            			}
            		}
HXLINE( 481)		return hugeFrames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAnimateFrames_obj,fromEaselJS,return )

void FlxAnimateFrames_obj::cocosHelper(::String FrameName, ::Dynamic FrameData, ::flixel::graphics::frames::FlxAtlasFrames Frames){
            	HX_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_485_cocosHelper)
HXLINE( 486)		bool rotated = ( (bool)(FrameData->__Field(HX_("textureRotated",0e,4a,de,12),::hx::paccDynamic)) );
HXLINE( 487)		::String name = FrameName;
HXLINE( 488)		Float x = ::Std_obj::parseFloat(( (::String)( ::Dynamic(FrameData->__Field(HX_("spriteSourceSize",a1,7f,c1,03),::hx::paccDynamic))->__GetItem(0)) ));
HXDLIN( 488)		Float y = ::Std_obj::parseFloat(( (::String)( ::Dynamic(FrameData->__Field(HX_("spriteSourceSize",a1,7f,c1,03),::hx::paccDynamic))->__GetItem(1)) ));
HXDLIN( 488)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 488)		point->_inPool = false;
HXDLIN( 488)		 ::flixel::math::FlxBasePoint sourceSize = point;
HXLINE( 489)		Float x1 = -(::Std_obj::parseFloat(( (::String)( ::Dynamic(FrameData->__Field(HX_("spriteOffset",78,39,22,f8),::hx::paccDynamic))->__GetItem(0)) )));
HXDLIN( 489)		Float y1 = -(::Std_obj::parseFloat(( (::String)( ::Dynamic(FrameData->__Field(HX_("spriteOffset",78,39,22,f8),::hx::paccDynamic))->__GetItem(1)) )));
HXDLIN( 489)		 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x1,y1);
HXDLIN( 489)		point1->_inPool = false;
HXDLIN( 489)		 ::flixel::math::FlxBasePoint offset = point1;
HXLINE( 490)		int angle = 0;
HXLINE( 491)		 ::flixel::math::FlxRect frameRect = null();
HXLINE( 493)		::Array< ::String > frame = ( (::Array< ::String >)(FrameData->__Field(HX_("textureRect",9f,4b,26,02),::hx::paccDynamic)) );
HXLINE( 494)		if (rotated) {
HXLINE( 496)			Float X = ::Std_obj::parseFloat(frame->__get(0));
HXDLIN( 496)			Float Y = ::Std_obj::parseFloat(frame->__get(1));
HXDLIN( 496)			Float Width = ::Std_obj::parseFloat(frame->__get(3));
HXDLIN( 496)			Float Height = ::Std_obj::parseFloat(frame->__get(2));
HXDLIN( 496)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 496)			_this->x = X;
HXDLIN( 496)			_this->y = Y;
HXDLIN( 496)			_this->width = Width;
HXDLIN( 496)			_this->height = Height;
HXDLIN( 496)			 ::flixel::math::FlxRect rect = _this;
HXDLIN( 496)			rect->_inPool = false;
HXDLIN( 496)			frameRect = rect;
HXLINE( 497)			angle = -90;
            		}
            		else {
HXLINE( 501)			Float X1 = ::Std_obj::parseFloat(frame->__get(0));
HXDLIN( 501)			Float Y1 = ::Std_obj::parseFloat(frame->__get(1));
HXDLIN( 501)			Float Width1 = ::Std_obj::parseFloat(frame->__get(2));
HXDLIN( 501)			Float Height1 = ::Std_obj::parseFloat(frame->__get(3));
HXDLIN( 501)			 ::flixel::math::FlxRect _this1 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 501)			_this1->x = X1;
HXDLIN( 501)			_this1->y = Y1;
HXDLIN( 501)			_this1->width = Width1;
HXDLIN( 501)			_this1->height = Height1;
HXDLIN( 501)			 ::flixel::math::FlxRect rect1 = _this1;
HXDLIN( 501)			rect1->_inPool = false;
HXDLIN( 501)			frameRect = rect1;
            		}
HXLINE( 504)		Frames->addAtlasFrame(frameRect,sourceSize,offset,name,angle,null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxAnimateFrames_obj,cocosHelper,(void))

void FlxAnimateFrames_obj::starlingHelper(::String FrameName, ::Dynamic FrameData, ::flixel::graphics::frames::FlxAtlasFrames Frames){
            	HX_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_508_starlingHelper)
HXLINE( 509)		bool rotated = ( (bool)(FrameData->__Field(HX_("rotated",a9,49,1d,f1),::hx::paccDynamic)) );
HXLINE( 510)		::String name = FrameName;
HXLINE( 511)		Float x = ::Std_obj::parseFloat(( (::String)( ::Dynamic(FrameData->__Field(HX_("sourceSize",3c,87,b7,74),::hx::paccDynamic))->__GetItem(0)) ));
HXDLIN( 511)		Float y = ::Std_obj::parseFloat(( (::String)( ::Dynamic(FrameData->__Field(HX_("sourceSize",3c,87,b7,74),::hx::paccDynamic))->__GetItem(1)) ));
HXDLIN( 511)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 511)		point->_inPool = false;
HXDLIN( 511)		 ::flixel::math::FlxBasePoint sourceSize = point;
HXLINE( 512)		Float x1 = -(::Std_obj::parseFloat(( (::String)( ::Dynamic(FrameData->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic))->__GetItem(0)) )));
HXDLIN( 512)		Float y1 = -(::Std_obj::parseFloat(( (::String)( ::Dynamic(FrameData->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic))->__GetItem(1)) )));
HXDLIN( 512)		 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x1,y1);
HXDLIN( 512)		point1->_inPool = false;
HXDLIN( 512)		 ::flixel::math::FlxBasePoint offset = point1;
HXLINE( 513)		int angle = 0;
HXLINE( 514)		 ::flixel::math::FlxRect frameRect = null();
HXLINE( 516)		::Array< ::String > frame = ( (::Array< ::String >)(FrameData->__Field(HX_("frame",2d,78,83,06),::hx::paccDynamic)) );
HXLINE( 517)		if (rotated) {
HXLINE( 519)			Float X = ::Std_obj::parseFloat(frame->__get(0));
HXDLIN( 519)			Float Y = ::Std_obj::parseFloat(frame->__get(1));
HXDLIN( 519)			Float Width = ::Std_obj::parseFloat(frame->__get(3));
HXDLIN( 519)			Float Height = ::Std_obj::parseFloat(frame->__get(2));
HXDLIN( 519)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 519)			_this->x = X;
HXDLIN( 519)			_this->y = Y;
HXDLIN( 519)			_this->width = Width;
HXDLIN( 519)			_this->height = Height;
HXDLIN( 519)			 ::flixel::math::FlxRect rect = _this;
HXDLIN( 519)			rect->_inPool = false;
HXDLIN( 519)			frameRect = rect;
HXLINE( 520)			angle = -90;
            		}
            		else {
HXLINE( 524)			Float X1 = ::Std_obj::parseFloat(frame->__get(0));
HXDLIN( 524)			Float Y1 = ::Std_obj::parseFloat(frame->__get(1));
HXDLIN( 524)			Float Width1 = ::Std_obj::parseFloat(frame->__get(2));
HXDLIN( 524)			Float Height1 = ::Std_obj::parseFloat(frame->__get(3));
HXDLIN( 524)			 ::flixel::math::FlxRect _this1 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 524)			_this1->x = X1;
HXDLIN( 524)			_this1->y = Y1;
HXDLIN( 524)			_this1->width = Width1;
HXDLIN( 524)			_this1->height = Height1;
HXDLIN( 524)			 ::flixel::math::FlxRect rect1 = _this1;
HXDLIN( 524)			rect1->_inPool = false;
HXDLIN( 524)			frameRect = rect1;
            		}
HXLINE( 527)		Frames->addAtlasFrame(frameRect,sourceSize,offset,name,angle,null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxAnimateFrames_obj,starlingHelper,(void))

 ::flixel::graphics::frames::FlxFrame FlxAnimateFrames_obj::textureAtlasHelper( ::flixel::graphics::FlxGraphic SpriteMap, ::Dynamic limb, ::Dynamic curMeta){
            	HX_GC_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_531_textureAtlasHelper)
HXLINE( 533)		int width;
HXDLIN( 533)		if (( (bool)(limb->__Field(HX_("rotated",a9,49,1d,f1),::hx::paccDynamic)) )) {
HXLINE( 533)			width = ( (int)(limb->__Field(HX_("h",68,00,00,00),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 533)			width = ( (int)(limb->__Field(HX_("w",77,00,00,00),::hx::paccDynamic)) );
            		}
HXLINE( 534)		int height;
HXDLIN( 534)		if (( (bool)(limb->__Field(HX_("rotated",a9,49,1d,f1),::hx::paccDynamic)) )) {
HXLINE( 534)			height = ( (int)(limb->__Field(HX_("w",77,00,00,00),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 534)			height = ( (int)(limb->__Field(HX_("h",68,00,00,00),::hx::paccDynamic)) );
            		}
HXLINE( 537)		 ::flixel::graphics::frames::FlxFrame curFrame =  ::flixel::graphics::frames::FlxFrame_obj::__alloc( HX_CTX ,SpriteMap,null(),null(),null(),null());
HXLINE( 539)		curFrame->name = ( (::String)(limb->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
HXLINE( 540)		{
HXLINE( 540)			 ::flixel::math::FlxBasePoint this1 = curFrame->sourceSize;
HXDLIN( 540)			this1->set_x(( (Float)(width) ));
HXDLIN( 540)			this1->set_y(( (Float)(height) ));
            		}
HXLINE( 541)		curFrame->set_frame( ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,limb->__Field(HX_("x",78,00,00,00),::hx::paccDynamic),limb->__Field(HX_("y",79,00,00,00),::hx::paccDynamic),limb->__Field(HX_("w",77,00,00,00),::hx::paccDynamic),limb->__Field(HX_("h",68,00,00,00),::hx::paccDynamic)));
HXLINE( 543)		if (( (bool)(limb->__Field(HX_("rotated",a9,49,1d,f1),::hx::paccDynamic)) )) {
HXLINE( 545)			curFrame->angle = -90;
            		}
HXLINE( 548)		return curFrame;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxAnimateFrames_obj,textureAtlasHelper,return )

void FlxAnimateFrames_obj::texturePackerHelper(::String FrameName, ::Dynamic FrameData, ::flixel::graphics::frames::FlxAtlasFrames Frames){
            	HX_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_552_texturePackerHelper)
HXLINE( 553)		bool rotated = ( (bool)(FrameData->__Field(HX_("rotated",a9,49,1d,f1),::hx::paccDynamic)) );
HXLINE( 554)		::String name = FrameName;
HXLINE( 555)		Float x = ( (Float)( ::Dynamic(FrameData->__Field(HX_("sourceSize",3c,87,b7,74),::hx::paccDynamic))->__Field(HX_("w",77,00,00,00),::hx::paccDynamic)) );
HXDLIN( 555)		Float y = ( (Float)( ::Dynamic(FrameData->__Field(HX_("sourceSize",3c,87,b7,74),::hx::paccDynamic))->__Field(HX_("h",68,00,00,00),::hx::paccDynamic)) );
HXDLIN( 555)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 555)		point->_inPool = false;
HXDLIN( 555)		 ::flixel::math::FlxBasePoint sourceSize = point;
HXLINE( 556)		Float x1 = ( (Float)( ::Dynamic(FrameData->__Field(HX_("spriteSourceSize",a1,7f,c1,03),::hx::paccDynamic))->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN( 556)		Float y1 = ( (Float)( ::Dynamic(FrameData->__Field(HX_("spriteSourceSize",a1,7f,c1,03),::hx::paccDynamic))->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN( 556)		 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x1,y1);
HXDLIN( 556)		point1->_inPool = false;
HXDLIN( 556)		 ::flixel::math::FlxBasePoint offset = point1;
HXLINE( 557)		int angle = 0;
HXLINE( 558)		 ::flixel::math::FlxRect frameRect = null();
HXLINE( 560)		if (rotated) {
HXLINE( 562)			Float X = ( (Float)( ::Dynamic(FrameData->__Field(HX_("frame",2d,78,83,06),::hx::paccDynamic))->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN( 562)			Float Y = ( (Float)( ::Dynamic(FrameData->__Field(HX_("frame",2d,78,83,06),::hx::paccDynamic))->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN( 562)			Float Width = ( (Float)( ::Dynamic(FrameData->__Field(HX_("frame",2d,78,83,06),::hx::paccDynamic))->__Field(HX_("h",68,00,00,00),::hx::paccDynamic)) );
HXDLIN( 562)			Float Height = ( (Float)( ::Dynamic(FrameData->__Field(HX_("frame",2d,78,83,06),::hx::paccDynamic))->__Field(HX_("w",77,00,00,00),::hx::paccDynamic)) );
HXDLIN( 562)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 562)			_this->x = X;
HXDLIN( 562)			_this->y = Y;
HXDLIN( 562)			_this->width = Width;
HXDLIN( 562)			_this->height = Height;
HXDLIN( 562)			 ::flixel::math::FlxRect rect = _this;
HXDLIN( 562)			rect->_inPool = false;
HXDLIN( 562)			frameRect = rect;
HXLINE( 563)			angle = -90;
            		}
            		else {
HXLINE( 567)			Float X1 = ( (Float)( ::Dynamic(FrameData->__Field(HX_("frame",2d,78,83,06),::hx::paccDynamic))->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN( 567)			Float Y1 = ( (Float)( ::Dynamic(FrameData->__Field(HX_("frame",2d,78,83,06),::hx::paccDynamic))->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN( 567)			Float Width1 = ( (Float)( ::Dynamic(FrameData->__Field(HX_("frame",2d,78,83,06),::hx::paccDynamic))->__Field(HX_("w",77,00,00,00),::hx::paccDynamic)) );
HXDLIN( 567)			Float Height1 = ( (Float)( ::Dynamic(FrameData->__Field(HX_("frame",2d,78,83,06),::hx::paccDynamic))->__Field(HX_("h",68,00,00,00),::hx::paccDynamic)) );
HXDLIN( 567)			 ::flixel::math::FlxRect _this1 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 567)			_this1->x = X1;
HXDLIN( 567)			_this1->y = Y1;
HXDLIN( 567)			_this1->width = Width1;
HXDLIN( 567)			_this1->height = Height1;
HXDLIN( 567)			 ::flixel::math::FlxRect rect1 = _this1;
HXDLIN( 567)			rect1->_inPool = false;
HXDLIN( 567)			frameRect = rect1;
            		}
HXLINE( 570)		Frames->addAtlasFrame(frameRect,sourceSize,offset,name,angle,null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxAnimateFrames_obj,texturePackerHelper,(void))

int FlxAnimateFrames_obj::max(int a,int b){
            	HX_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_573_max)
HXDLIN( 573)		if ((a < b)) {
HXDLIN( 573)			return b;
            		}
            		else {
HXDLIN( 573)			return a;
            		}
HXDLIN( 573)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAnimateFrames_obj,max,return )


::hx::ObjectPtr< FlxAnimateFrames_obj > FlxAnimateFrames_obj::__new() {
	::hx::ObjectPtr< FlxAnimateFrames_obj > __this = new FlxAnimateFrames_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< FlxAnimateFrames_obj > FlxAnimateFrames_obj::__alloc(::hx::Ctx *_hx_ctx) {
	FlxAnimateFrames_obj *__this = (FlxAnimateFrames_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxAnimateFrames_obj), true, "flxanimate.frames.FlxAnimateFrames"));
	*(void **)__this = FlxAnimateFrames_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxAnimateFrames_obj::FlxAnimateFrames_obj()
{
}

void FlxAnimateFrames_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxAnimateFrames);
	HX_MARK_MEMBER_NAME(parents,"parents");
	 ::flixel::graphics::frames::FlxAtlasFrames_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxAnimateFrames_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(parents,"parents");
	 ::flixel::graphics::frames::FlxAtlasFrames_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxAnimateFrames_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"parents") ) { return ::hx::Val( parents ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"animateConcat") ) { return ::hx::Val( animateConcat_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxAnimateFrames_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"zip") ) { outValue = ( zip ); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { outValue = ( data ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromJson") ) { outValue = fromJson_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fromSparrow") ) { outValue = fromSparrow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromCocos2D") ) { outValue = fromCocos2D_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromEaselJS") ) { outValue = fromEaselJS_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cocosHelper") ) { outValue = cocosHelper_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromStarling") ) { outValue = fromStarling_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"starlingHelper") ) { outValue = starlingHelper_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"fromEdgeAnimate") ) { outValue = fromEdgeAnimate_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"fromTextureAtlas") ) { outValue = fromTextureAtlas_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromAnimateAtlas") ) { outValue = fromAnimateAtlas_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"textureAtlasHelper") ) { outValue = textureAtlasHelper_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"texturePackerHelper") ) { outValue = texturePackerHelper_dyn(); return true; }
	}
	return false;
}

::hx::Val FlxAnimateFrames_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"parents") ) { parents=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxAnimateFrames_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"zip") ) { zip=ioValue.Cast<  ::haxe::ds::List >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void FlxAnimateFrames_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("parents",09,80,c6,e0));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxAnimateFrames_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxAnimateFrames_obj,parents),HX_("parents",09,80,c6,e0)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FlxAnimateFrames_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &FlxAnimateFrames_obj::data,HX_("data",2a,56,63,42)},
	{::hx::fsObject /*  ::haxe::ds::List */ ,(void *) &FlxAnimateFrames_obj::zip,HX_("zip",e1,ee,5c,00)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxAnimateFrames_obj_sMemberFields[] = {
	HX_("parents",09,80,c6,e0),
	HX_("animateConcat",95,86,d0,a5),
	::String(null()) };

static void FlxAnimateFrames_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxAnimateFrames_obj::data,"data");
	HX_MARK_MEMBER_NAME(FlxAnimateFrames_obj::zip,"zip");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxAnimateFrames_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxAnimateFrames_obj::data,"data");
	HX_VISIT_MEMBER_NAME(FlxAnimateFrames_obj::zip,"zip");
};

#endif

::hx::Class FlxAnimateFrames_obj::__mClass;

static ::String FlxAnimateFrames_obj_sStaticFields[] = {
	HX_("data",2a,56,63,42),
	HX_("zip",e1,ee,5c,00),
	HX_("fromTextureAtlas",fa,62,e9,b8),
	HX_("fromSparrow",c2,9f,ec,33),
	HX_("fromAnimateAtlas",74,23,c9,31),
	HX_("fromJson",b2,10,34,a4),
	HX_("fromEdgeAnimate",9a,e2,18,db),
	HX_("fromStarling",52,28,79,dd),
	HX_("fromCocos2D",63,e9,0b,59),
	HX_("fromEaselJS",bd,b4,ff,42),
	HX_("cocosHelper",e9,d4,8f,7d),
	HX_("starlingHelper",56,04,cb,87),
	HX_("textureAtlasHelper",fe,5f,bb,44),
	HX_("texturePackerHelper",0f,23,bd,b2),
	HX_("max",a4,0a,53,00),
	::String(null())
};

void FlxAnimateFrames_obj::__register()
{
	FlxAnimateFrames_obj _hx_dummy;
	FlxAnimateFrames_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.frames.FlxAnimateFrames",3e,8a,4b,fc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxAnimateFrames_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxAnimateFrames_obj::__SetStatic;
	__mClass->mMarkFunc = FlxAnimateFrames_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxAnimateFrames_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxAnimateFrames_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxAnimateFrames_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxAnimateFrames_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxAnimateFrames_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxAnimateFrames_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxAnimateFrames_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_38_boot)
HXDLIN(  38)		data = null();
            	}
}

} // end namespace flxanimate
} // end namespace frames
