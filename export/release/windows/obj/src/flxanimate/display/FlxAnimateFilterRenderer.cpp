// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flxanimate_display_FlxAnimateFilterRenderer
#include <flxanimate/display/FlxAnimateFilterRenderer.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectShader
#include <openfl/display/DisplayObjectShader.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display__internal_CairoGraphics
#include <openfl/display/_internal/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8386f3c0461dca99_50_new,"flxanimate.display.FlxAnimateFilterRenderer","new",0x4f914de7,"flxanimate.display.FlxAnimateFilterRenderer.new","flxanimate/display/FlxAnimateFilterRenderer.hx",50,0xe66e19a7)
HX_LOCAL_STACK_FRAME(_hx_pos_8386f3c0461dca99_58_setRenderer,"flxanimate.display.FlxAnimateFilterRenderer","setRenderer",0x550d6b8c,"flxanimate.display.FlxAnimateFilterRenderer.setRenderer","flxanimate/display/FlxAnimateFilterRenderer.hx",58,0xe66e19a7)
HX_LOCAL_STACK_FRAME(_hx_pos_8386f3c0461dca99_90_applyFilter,"flxanimate.display.FlxAnimateFilterRenderer","applyFilter",0x3300bc4d,"flxanimate.display.FlxAnimateFilterRenderer.applyFilter","flxanimate/display/FlxAnimateFilterRenderer.hx",90,0xe66e19a7)
HX_LOCAL_STACK_FRAME(_hx_pos_8386f3c0461dca99_151_applyBlend,"flxanimate.display.FlxAnimateFilterRenderer","applyBlend",0xedfcb55c,"flxanimate.display.FlxAnimateFilterRenderer.applyBlend","flxanimate/display/FlxAnimateFilterRenderer.hx",151,0xe66e19a7)
HX_LOCAL_STACK_FRAME(_hx_pos_8386f3c0461dca99_174_graphicstoBitmapData,"flxanimate.display.FlxAnimateFilterRenderer","graphicstoBitmapData",0x6a383ef8,"flxanimate.display.FlxAnimateFilterRenderer.graphicstoBitmapData","flxanimate/display/FlxAnimateFilterRenderer.hx",174,0xe66e19a7)
namespace flxanimate{
namespace display{

void FlxAnimateFilterRenderer_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_8386f3c0461dca99_50_new)
HXDLIN(  50)		this->renderer =  ::openfl::display::OpenGLRenderer_obj::__alloc( HX_CTX ,::flixel::FlxG_obj::game->stage->context3D,null());
            	}

Dynamic FlxAnimateFilterRenderer_obj::__CreateEmpty() { return new FlxAnimateFilterRenderer_obj; }

void *FlxAnimateFilterRenderer_obj::_hx_vtable = 0;

Dynamic FlxAnimateFilterRenderer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxAnimateFilterRenderer_obj > _hx_result = new FlxAnimateFilterRenderer_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxAnimateFilterRenderer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x58c662dd;
}

void FlxAnimateFilterRenderer_obj::setRenderer( ::openfl::display::DisplayObjectRenderer renderer, ::openfl::geom::Rectangle rect){
            	HX_GC_STACKFRAME(&_hx_pos_8386f3c0461dca99_58_setRenderer)
HXLINE(  59)		 ::flixel::FlxGame displayObject = ::flixel::FlxG_obj::game;
HXLINE(  60)		Float pixelRatio = ::flixel::FlxG_obj::game->stage->_hx___renderer->_hx___pixelRatio;
HXLINE(  62)		int offsetX;
HXDLIN(  62)		if ((rect->x > 0)) {
HXLINE(  62)			offsetX = ::Math_obj::ceil(rect->x);
            		}
            		else {
HXLINE(  62)			offsetX = ::Math_obj::floor(rect->x);
            		}
HXLINE(  63)		int offsetY;
HXDLIN(  63)		if ((rect->y > 0)) {
HXLINE(  63)			offsetY = ::Math_obj::ceil(rect->y);
            		}
            		else {
HXLINE(  63)			offsetY = ::Math_obj::floor(rect->y);
            		}
HXLINE(  64)		if (::hx::IsNull( renderer->_hx___worldTransform )) {
HXLINE(  66)			renderer->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  67)			renderer->_hx___worldColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE(  69)		if (::hx::IsNull( displayObject->_hx___cacheBitmapColorTransform )) {
HXLINE(  69)			displayObject->_hx___cacheBitmapColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE(  71)		renderer->_hx___stage = displayObject->stage;
HXLINE(  73)		renderer->_hx___allowSmoothing = true;
HXLINE(  74)		renderer->_hx___setBlendMode(10);
HXLINE(  75)		renderer->_hx___worldAlpha = (( (Float)(1) ) / displayObject->_hx___worldAlpha);
HXLINE(  77)		renderer->_hx___worldTransform->identity();
HXLINE(  78)		renderer->_hx___worldTransform->invert();
HXLINE(  79)		 ::openfl::geom::Matrix renderer1 = renderer->_hx___worldTransform;
HXDLIN(  79)		renderer1->concat( ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null()));
HXLINE(  80)		 ::openfl::geom::Matrix fh = renderer->_hx___worldTransform;
HXDLIN(  80)		fh->tx = (fh->tx - ( (Float)(offsetX) ));
HXLINE(  81)		 ::openfl::geom::Matrix fh1 = renderer->_hx___worldTransform;
HXDLIN(  81)		fh1->ty = (fh1->ty - ( (Float)(offsetY) ));
HXLINE(  82)		renderer->_hx___worldTransform->scale(pixelRatio,pixelRatio);
HXLINE(  84)		renderer->_hx___pixelRatio = pixelRatio;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxAnimateFilterRenderer_obj,setRenderer,(void))

 ::openfl::display::BitmapData FlxAnimateFilterRenderer_obj::applyFilter( ::openfl::display::BitmapData bmp,::Array< ::Dynamic> filters, ::openfl::geom::Rectangle rect){
            	HX_GC_STACKFRAME(&_hx_pos_8386f3c0461dca99_90_applyFilter)
HXLINE(  91)		bool _hx_tmp;
HXDLIN(  91)		if (::hx::IsNotNull( filters )) {
HXLINE(  91)			_hx_tmp = (filters->length == 0);
            		}
            		else {
HXLINE(  91)			_hx_tmp = true;
            		}
HXDLIN(  91)		if (_hx_tmp) {
HXLINE(  91)			return bmp;
            		}
HXLINE(  93)		this->renderer->_hx___setBlendMode(10);
HXLINE(  94)		this->renderer->_hx___worldAlpha = ( (Float)(1) );
HXLINE(  96)		if (::hx::IsNull( this->renderer->_hx___worldTransform )) {
HXLINE(  98)			this->renderer->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  99)			this->renderer->_hx___worldColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE( 102)		 ::openfl::display::BitmapData bitmap =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::Math_obj::ceil(rect->width),::Math_obj::ceil(rect->height),true,0);
HXLINE( 103)		 ::openfl::display::BitmapData bitmap2 = bitmap->clone();
HXLINE( 106)		 ::openfl::display::BitmapData bitmap3 = bitmap2->clone();
HXLINE( 109)		 ::openfl::geom::Rectangle bmp1 = bmp->rect;
HXDLIN( 109)		bitmap->copyPixels(bmp,bmp1, ::openfl::geom::Point_obj::__alloc( HX_CTX ,(( (Float)((bitmap->width - bmp->width)) ) * ((Float)0.5)),(( (Float)((bitmap->height - bmp->height)) ) * ((Float)0.5))),null(),null(),null());
HXLINE( 111)		this->renderer->_hx___setBlendMode(10);
HXLINE( 113)		this->renderer->_hx___worldAlpha = ( (Float)(1) );
HXLINE( 114)		this->renderer->_hx___worldTransform->identity();
HXLINE( 115)		this->renderer->_hx___worldColorTransform->_hx___identity();
HXLINE( 118)		 ::openfl::display::Shader shader;
HXDLIN( 118)		 ::openfl::display::BitmapData cacheBitmap = null();
HXLINE( 120)		{
HXLINE( 120)			int _g = 0;
HXDLIN( 120)			while((_g < filters->length)){
HXLINE( 120)				 ::openfl::filters::BitmapFilter filter = filters->__get(_g).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN( 120)				_g = (_g + 1);
HXLINE( 122)				if (filter->_hx___preserveObject) {
HXLINE( 124)					this->renderer->_hx___setRenderTarget(bitmap3);
HXLINE( 125)					this->renderer->_hx___renderFilterPass(bitmap,this->renderer->_hx___defaultDisplayShader,filter->_hx___smooth,null());
            				}
HXLINE( 128)				{
HXLINE( 128)					int _g1 = 0;
HXDLIN( 128)					int _g2 = filter->_hx___numShaderPasses;
HXDLIN( 128)					while((_g1 < _g2)){
HXLINE( 128)						_g1 = (_g1 + 1);
HXDLIN( 128)						int i = (_g1 - 1);
HXLINE( 130)						 ::openfl::display::BitmapData shader1;
HXDLIN( 130)						if (filter->_hx___preserveObject) {
HXLINE( 130)							shader1 = bitmap3;
            						}
            						else {
HXLINE( 130)							shader1 = null();
            						}
HXDLIN( 130)						shader = filter->_hx___initShader(this->renderer,i,shader1);
HXLINE( 131)						this->renderer->_hx___setBlendMode(filter->_hx___shaderBlendMode);
HXLINE( 132)						this->renderer->_hx___setRenderTarget(bitmap2);
HXLINE( 133)						this->renderer->_hx___renderFilterPass(bitmap,shader,filter->_hx___smooth,null());
HXLINE( 135)						cacheBitmap = bitmap;
HXLINE( 136)						bitmap = bitmap2;
HXLINE( 137)						bitmap2 = cacheBitmap;
            					}
            				}
HXLINE( 139)				filter->_hx___renderDirty = false;
            			}
            		}
HXLINE( 142)		bitmap2->dispose();
HXLINE( 143)		bitmap3->dispose();
HXLINE( 144)		if (::hx::IsNotNull( cacheBitmap )) {
HXLINE( 145)			cacheBitmap->dispose();
            		}
HXLINE( 147)		return bitmap;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxAnimateFilterRenderer_obj,applyFilter,return )

 ::openfl::display::BitmapData FlxAnimateFilterRenderer_obj::applyBlend( ::Dynamic blend, ::openfl::display::BitmapData bitmap){
            	HX_GC_STACKFRAME(&_hx_pos_8386f3c0461dca99_151_applyBlend)
HXLINE( 152)		 ::openfl::display::BitmapData bmp =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,bitmap->width,bitmap->height,null(),0);
HXLINE( 158)		 ::openfl::display::CairoRenderer renderer =  ::openfl::display::CairoRenderer_obj::__alloc( HX_CTX , ::lime::graphics::cairo::Cairo_obj::__alloc( HX_CTX ,bmp->getSurface()));
HXLINE( 161)		this->setRenderer(renderer,bmp->rect);
HXLINE( 162)		renderer->_hx___setBlendMode(blend);
HXLINE( 167)		bmp->_hx___drawCairo(bitmap,renderer);
HXLINE( 170)		return bmp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxAnimateFilterRenderer_obj,applyBlend,return )

 ::openfl::display::BitmapData FlxAnimateFilterRenderer_obj::graphicstoBitmapData( ::openfl::display::Graphics gfx){
            	HX_STACKFRAME(&_hx_pos_8386f3c0461dca99_174_graphicstoBitmapData)
HXLINE( 175)		::openfl::display::_internal::CairoGraphics_obj::render(gfx,( ( ::openfl::display::CairoRenderer)(this->renderer->_hx___softwareRenderer) ));
HXLINE( 176)		 ::openfl::display::BitmapData bmp = gfx->_hx___bitmap;
HXLINE( 178)		gfx->_hx___bitmap = null();
HXLINE( 179)		gfx->_hx___renderTransform->identity();
HXLINE( 181)		return bmp;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAnimateFilterRenderer_obj,graphicstoBitmapData,return )


::hx::ObjectPtr< FlxAnimateFilterRenderer_obj > FlxAnimateFilterRenderer_obj::__new() {
	::hx::ObjectPtr< FlxAnimateFilterRenderer_obj > __this = new FlxAnimateFilterRenderer_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< FlxAnimateFilterRenderer_obj > FlxAnimateFilterRenderer_obj::__alloc(::hx::Ctx *_hx_ctx) {
	FlxAnimateFilterRenderer_obj *__this = (FlxAnimateFilterRenderer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxAnimateFilterRenderer_obj), true, "flxanimate.display.FlxAnimateFilterRenderer"));
	*(void **)__this = FlxAnimateFilterRenderer_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxAnimateFilterRenderer_obj::FlxAnimateFilterRenderer_obj()
{
}

void FlxAnimateFilterRenderer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxAnimateFilterRenderer);
	HX_MARK_MEMBER_NAME(renderer,"renderer");
	HX_MARK_MEMBER_NAME(context,"context");
	HX_MARK_END_CLASS();
}

void FlxAnimateFilterRenderer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(renderer,"renderer");
	HX_VISIT_MEMBER_NAME(context,"context");
}

::hx::Val FlxAnimateFilterRenderer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { return ::hx::Val( context ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"renderer") ) { return ::hx::Val( renderer ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"applyBlend") ) { return ::hx::Val( applyBlend_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setRenderer") ) { return ::hx::Val( setRenderer_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyFilter") ) { return ::hx::Val( applyFilter_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"graphicstoBitmapData") ) { return ::hx::Val( graphicstoBitmapData_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxAnimateFilterRenderer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { context=inValue.Cast<  ::openfl::display3D::Context3D >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"renderer") ) { renderer=inValue.Cast<  ::openfl::display::OpenGLRenderer >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxAnimateFilterRenderer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("renderer",43,c5,db,b2));
	outFields->push(HX_("context",ef,95,77,19));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxAnimateFilterRenderer_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::OpenGLRenderer */ ,(int)offsetof(FlxAnimateFilterRenderer_obj,renderer),HX_("renderer",43,c5,db,b2)},
	{::hx::fsObject /*  ::openfl::display3D::Context3D */ ,(int)offsetof(FlxAnimateFilterRenderer_obj,context),HX_("context",ef,95,77,19)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxAnimateFilterRenderer_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxAnimateFilterRenderer_obj_sMemberFields[] = {
	HX_("renderer",43,c5,db,b2),
	HX_("context",ef,95,77,19),
	HX_("setRenderer",05,8f,3c,e3),
	HX_("applyFilter",c6,df,2f,c1),
	HX_("applyBlend",03,64,46,60),
	HX_("graphicstoBitmapData",5f,64,bf,2f),
	::String(null()) };

::hx::Class FlxAnimateFilterRenderer_obj::__mClass;

void FlxAnimateFilterRenderer_obj::__register()
{
	FlxAnimateFilterRenderer_obj _hx_dummy;
	FlxAnimateFilterRenderer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.display.FlxAnimateFilterRenderer",75,ce,74,7d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxAnimateFilterRenderer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxAnimateFilterRenderer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxAnimateFilterRenderer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxAnimateFilterRenderer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flxanimate
} // end namespace display
