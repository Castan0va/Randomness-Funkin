// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxElement
#include <flxanimate/animate/FlxElement.h>
#endif
#ifndef INCLUDED_flxanimate_animate_SymbolParameters
#include <flxanimate/animate/SymbolParameters.h>
#endif
#ifndef INCLUDED_flxanimate_data_AnimationData
#include <flxanimate/data/AnimationData.h>
#endif
#ifndef INCLUDED_flxanimate_data_ColorEffect
#include <flxanimate/data/ColorEffect.h>
#endif
#ifndef INCLUDED_flxanimate_data_Loop
#include <flxanimate/data/Loop.h>
#endif
#ifndef INCLUDED_flxanimate_data_SymbolT
#include <flxanimate/data/SymbolT.h>
#endif
#ifndef INCLUDED_flxanimate_effects_FlxColorEffect
#include <flxanimate/effects/FlxColorEffect.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a5b45c946faf294d_27_new,"flxanimate.animate.SymbolParameters","new",0xd89b2680,"flxanimate.animate.SymbolParameters.new","flxanimate/animate/SymbolParameters.hx",27,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_129_destroy,"flxanimate.animate.SymbolParameters","destroy",0x0f03131a,"flxanimate.animate.SymbolParameters.destroy","flxanimate/animate/SymbolParameters.hx",129,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_140_set_type,"flxanimate.animate.SymbolParameters","set_type",0xbded7d97,"flxanimate.animate.SymbolParameters.set_type","flxanimate/animate/SymbolParameters.hx",140,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_157_update,"flxanimate.animate.SymbolParameters","update",0xc29ec3e9,"flxanimate.animate.SymbolParameters.update","flxanimate/animate/SymbolParameters.hx",157,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_172_set_loop,"flxanimate.animate.SymbolParameters","set_loop",0xb89c3141,"flxanimate.animate.SymbolParameters.set_loop","flxanimate/animate/SymbolParameters.hx",172,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_185_set_firstFrame,"flxanimate.animate.SymbolParameters","set_firstFrame",0xf051507a,"flxanimate.animate.SymbolParameters.set_firstFrame","flxanimate/animate/SymbolParameters.hx",185,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_196_reset,"flxanimate.animate.SymbolParameters","reset",0xe02967ef,"flxanimate.animate.SymbolParameters.reset","flxanimate/animate/SymbolParameters.hx",196,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_208_get__colorEffect,"flxanimate.animate.SymbolParameters","get__colorEffect",0x5c79dcbe,"flxanimate.animate.SymbolParameters.get__colorEffect","flxanimate/animate/SymbolParameters.hx",208,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_212_set_colorEffect,"flxanimate.animate.SymbolParameters","set_colorEffect",0xe0792717,"flxanimate.animate.SymbolParameters.set_colorEffect","flxanimate/animate/SymbolParameters.hx",212,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_230_set_filters,"flxanimate.animate.SymbolParameters","set_filters",0x08687efe,"flxanimate.animate.SymbolParameters.set_filters","flxanimate/animate/SymbolParameters.hx",230,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_251_get_cacheAsBitmap,"flxanimate.animate.SymbolParameters","get_cacheAsBitmap",0xbe255c5a,"flxanimate.animate.SymbolParameters.get_cacheAsBitmap","flxanimate/animate/SymbolParameters.hx",251,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_260_set_cacheAsBitmap,"flxanimate.animate.SymbolParameters","set_cacheAsBitmap",0xe1933466,"flxanimate.animate.SymbolParameters.set_cacheAsBitmap","flxanimate/animate/SymbolParameters.hx",260,0xb2eaa92e)
namespace flxanimate{
namespace animate{

void SymbolParameters_obj::__construct(::String name,::String __o_instance, ::flxanimate::data::SymbolT __o_type, ::flxanimate::data::Loop __o_loop){
            		::String instance = __o_instance;
            		if (::hx::IsNull(__o_instance)) instance = HX_("",00,00,00,00);
            		 ::flxanimate::data::SymbolT type = __o_type;
            		if (::hx::IsNull(__o_type)) type = ::flxanimate::data::SymbolT_obj::Graphic_dyn();
            		 ::flxanimate::data::Loop loop = __o_loop;
            		if (::hx::IsNull(__o_loop)) loop = ::flxanimate::data::Loop_obj::Loop_dyn();
            	HX_GC_STACKFRAME(&_hx_pos_a5b45c946faf294d_27_new)
HXLINE(  89)		this->_layerDirty = false;
HXLINE(  85)		this->_renderDirty = false;
HXLINE(  80)		this->_cacheAsBitmap = false;
HXLINE( 115)		this->name = name;
HXLINE( 116)		this->instance = instance;
HXLINE( 117)		this->set_type(type);
HXLINE( 118)		this->set_loop(loop);
HXLINE( 119)		this->set_firstFrame(0);
HXLINE( 120)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 120)		point->_inPool = false;
HXDLIN( 120)		this->transformationPoint = point;
HXLINE( 121)		this->set_colorEffect(::flxanimate::data::ColorEffect_obj::None_dyn());
HXLINE( 122)		this->_curFrame = -1;
HXLINE( 123)		this->set_filters(null());
HXLINE( 124)		this->cacheAsBitmapMatrix =  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 125)		this->_cacheBitmapMatrix =  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}

Dynamic SymbolParameters_obj::__CreateEmpty() { return new SymbolParameters_obj; }

void *SymbolParameters_obj::_hx_vtable = 0;

Dynamic SymbolParameters_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SymbolParameters_obj > _hx_result = new SymbolParameters_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool SymbolParameters_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x26325a8c;
}

void SymbolParameters_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_129_destroy)
HXLINE( 130)		this->instance = null();
HXLINE( 131)		this->set_type(null());
HXLINE( 132)		this->reverse = false;
HXLINE( 133)		this->set_firstFrame(0);
HXLINE( 134)		this->name = null();
HXLINE( 135)		this->set_colorEffect(null());
HXLINE( 136)		this->transformationPoint = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SymbolParameters_obj,destroy,(void))

 ::flxanimate::data::SymbolT SymbolParameters_obj::set_type( ::flxanimate::data::SymbolT type){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_140_set_type)
HXLINE( 141)		this->type = type;
HXLINE( 142)		 ::flxanimate::data::Loop _hx_tmp;
HXDLIN( 142)		if (::hx::IsNull( type )) {
HXLINE( 142)			_hx_tmp = null();
            		}
            		else {
HXLINE( 142)			_hx_tmp = ::flxanimate::data::Loop_obj::Loop_dyn();
            		}
HXDLIN( 142)		this->set_loop(_hx_tmp);
HXLINE( 144)		if (::hx::IsPointerEq( type,::flxanimate::data::SymbolT_obj::Graphic_dyn() )) {
HXLINE( 146)			this->set_filters(null());
HXLINE( 147)			::flixel::util::FlxDestroyUtil_obj::destroy(this->_filterBitmap);
HXLINE( 148)			this->set_cacheAsBitmap(false);
            		}
HXLINE( 151)		return type;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SymbolParameters_obj,set_type,return )

void SymbolParameters_obj::update(){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_157_update)
HXLINE( 158)		bool _hx_tmp;
HXDLIN( 158)		bool _hx_tmp1;
HXDLIN( 158)		if (::hx::IsNotNull( this->filters )) {
HXLINE( 158)			_hx_tmp1 = (this->filters->length == 0);
            		}
            		else {
HXLINE( 158)			_hx_tmp1 = true;
            		}
HXDLIN( 158)		if (!(_hx_tmp1)) {
HXLINE( 158)			_hx_tmp = this->_renderDirty;
            		}
            		else {
HXLINE( 158)			_hx_tmp = true;
            		}
HXDLIN( 158)		if (_hx_tmp) {
HXLINE( 158)			return;
            		}
HXLINE( 160)		{
HXLINE( 160)			int _g = 0;
HXDLIN( 160)			::Array< ::Dynamic> _g1 = this->filters;
HXDLIN( 160)			while((_g < _g1->length)){
HXLINE( 160)				 ::openfl::filters::BitmapFilter filter = _g1->__get(_g).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN( 160)				_g = (_g + 1);
HXLINE( 163)				if (filter->_hx___renderDirty) {
HXLINE( 165)					this->_renderDirty = true;
HXLINE( 166)					return;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SymbolParameters_obj,update,(void))

 ::flxanimate::data::Loop SymbolParameters_obj::set_loop( ::flxanimate::data::Loop loop){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_172_set_loop)
HXLINE( 173)		if (::hx::IsNull( this->type )) {
HXLINE( 173)			return (this->loop = null());
            		}
HXLINE( 174)		 ::flxanimate::data::Loop _hx_tmp;
HXDLIN( 174)		switch((int)(this->type->_hx_getIndex())){
            			case (int)1: {
HXLINE( 174)				_hx_tmp = ::flxanimate::data::Loop_obj::Loop_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 174)				_hx_tmp = ::flxanimate::data::Loop_obj::SingleFrame_dyn();
            			}
            			break;
            			default:{
HXLINE( 174)				_hx_tmp = loop;
            			}
            		}
HXDLIN( 174)		this->loop = _hx_tmp;
HXLINE( 181)		return loop;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SymbolParameters_obj,set_loop,return )

int SymbolParameters_obj::set_firstFrame(int value){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_185_set_firstFrame)
HXLINE( 186)		bool _hx_tmp;
HXDLIN( 186)		if (::hx::IsPointerEq( this->type,::flxanimate::data::SymbolT_obj::Graphic_dyn() )) {
HXLINE( 186)			_hx_tmp = (this->firstFrame != value);
            		}
            		else {
HXLINE( 186)			_hx_tmp = false;
            		}
HXDLIN( 186)		if (_hx_tmp) {
HXLINE( 188)			this->firstFrame = value;
HXLINE( 189)			this->_layerDirty = true;
            		}
HXLINE( 192)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SymbolParameters_obj,set_firstFrame,return )

void SymbolParameters_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_196_reset)
HXLINE( 197)		this->name = null();
HXLINE( 198)		this->set_type(::flxanimate::data::SymbolT_obj::Graphic_dyn());
HXLINE( 199)		this->set_loop(::flxanimate::data::Loop_obj::Loop_dyn());
HXLINE( 200)		this->instance = HX_("",00,00,00,00);
HXLINE( 201)		this->set_firstFrame(0);
HXLINE( 202)		{
HXLINE( 202)			 ::flixel::math::FlxBasePoint this1 = this->transformationPoint;
HXDLIN( 202)			this1->set_x(( (Float)(0) ));
HXDLIN( 202)			this1->set_y(( (Float)(0) ));
            		}
HXLINE( 203)		this->set_colorEffect(::flxanimate::data::ColorEffect_obj::None_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC0(SymbolParameters_obj,reset,(void))

 ::openfl::geom::ColorTransform SymbolParameters_obj::get__colorEffect(){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_208_get__colorEffect)
HXDLIN( 208)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SymbolParameters_obj,get__colorEffect,return )

 ::flxanimate::effects::FlxColorEffect SymbolParameters_obj::set_colorEffect( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_212_set_colorEffect)
HXLINE( 213)		if (this->get_cacheAsBitmap()) {
HXLINE( 214)			this->_renderDirty = true;
            		}
HXLINE( 216)		if (::hx::IsNull( value )) {
HXLINE( 217)			value = ::flxanimate::data::ColorEffect_obj::None_dyn();
            		}
HXLINE( 219)		if (::Std_obj::isOfType(value,::hx::ClassOf< ::flxanimate::data::ColorEffect >())) {
HXLINE( 221)			this->colorEffect = ::flxanimate::data::AnimationData_obj::parseColorEffect(value);
            		}
            		else {
HXLINE( 224)			this->colorEffect = ( ( ::flxanimate::effects::FlxColorEffect)(value) );
            		}
HXLINE( 226)		return this->colorEffect;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SymbolParameters_obj,set_colorEffect,return )

::Array< ::Dynamic> SymbolParameters_obj::set_filters(::Array< ::Dynamic> filters){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_230_set_filters)
HXLINE( 231)		if (::hx::IsPointerEq( this->type,::flxanimate::data::SymbolT_obj::Graphic_dyn() )) {
HXLINE( 231)			return null();
            		}
HXLINE( 233)		bool _hx_tmp;
HXDLIN( 233)		if (::hx::IsNotNull( filters )) {
HXLINE( 233)			_hx_tmp = (filters->length > 0);
            		}
            		else {
HXLINE( 233)			_hx_tmp = false;
            		}
HXDLIN( 233)		if (_hx_tmp) {
HXLINE( 235)			this->_renderDirty = true;
            		}
            		else {
HXLINE( 240)			if (this->_cacheAsBitmap) {
HXLINE( 241)				this->_renderDirty = true;
            			}
            			else {
HXLINE( 243)				this->_filterBitmap = ( ( ::flixel::graphics::frames::FlxFrame)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_filterBitmap)) );
            			}
            		}
HXLINE( 247)		return (this->filters = filters);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SymbolParameters_obj,set_filters,return )

bool SymbolParameters_obj::get_cacheAsBitmap(){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_251_get_cacheAsBitmap)
HXLINE( 252)		if (::hx::IsPointerEq( this->type,::flxanimate::data::SymbolT_obj::Graphic_dyn() )) {
HXLINE( 252)			return false;
            		}
HXLINE( 255)		bool _hx_tmp;
HXDLIN( 255)		if (::hx::IsNotNull( this->filters )) {
HXLINE( 255)			_hx_tmp = (this->filters->length > 0);
            		}
            		else {
HXLINE( 255)			_hx_tmp = false;
            		}
HXDLIN( 255)		if (_hx_tmp) {
HXLINE( 255)			return true;
            		}
HXLINE( 257)		return this->_cacheAsBitmap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SymbolParameters_obj,get_cacheAsBitmap,return )

bool SymbolParameters_obj::set_cacheAsBitmap(bool value){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_260_set_cacheAsBitmap)
HXLINE( 261)		if (::hx::IsPointerEq( this->type,::flxanimate::data::SymbolT_obj::Graphic_dyn() )) {
HXLINE( 261)			return false;
            		}
HXLINE( 263)		if (value) {
HXLINE( 263)			this->_renderDirty = true;
            		}
HXLINE( 265)		return (this->_cacheAsBitmap = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SymbolParameters_obj,set_cacheAsBitmap,return )


::hx::ObjectPtr< SymbolParameters_obj > SymbolParameters_obj::__new(::String name,::String __o_instance, ::flxanimate::data::SymbolT __o_type, ::flxanimate::data::Loop __o_loop) {
	::hx::ObjectPtr< SymbolParameters_obj > __this = new SymbolParameters_obj();
	__this->__construct(name,__o_instance,__o_type,__o_loop);
	return __this;
}

::hx::ObjectPtr< SymbolParameters_obj > SymbolParameters_obj::__alloc(::hx::Ctx *_hx_ctx,::String name,::String __o_instance, ::flxanimate::data::SymbolT __o_type, ::flxanimate::data::Loop __o_loop) {
	SymbolParameters_obj *__this = (SymbolParameters_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SymbolParameters_obj), true, "flxanimate.animate.SymbolParameters"));
	*(void **)__this = SymbolParameters_obj::_hx_vtable;
	__this->__construct(name,__o_instance,__o_type,__o_loop);
	return __this;
}

SymbolParameters_obj::SymbolParameters_obj()
{
}

void SymbolParameters_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SymbolParameters);
	HX_MARK_MEMBER_NAME(_parent,"_parent");
	HX_MARK_MEMBER_NAME(_filterBitmap,"_filterBitmap");
	HX_MARK_MEMBER_NAME(instance,"instance");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(loop,"loop");
	HX_MARK_MEMBER_NAME(reverse,"reverse");
	HX_MARK_MEMBER_NAME(firstFrame,"firstFrame");
	HX_MARK_MEMBER_NAME(_curFrame,"_curFrame");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(colorEffect,"colorEffect");
	HX_MARK_MEMBER_NAME(_cacheAsBitmap,"_cacheAsBitmap");
	HX_MARK_MEMBER_NAME(_renderDirty,"_renderDirty");
	HX_MARK_MEMBER_NAME(_layerDirty,"_layerDirty");
	HX_MARK_MEMBER_NAME(_colorEffect,"_colorEffect");
	HX_MARK_MEMBER_NAME(transformationPoint,"transformationPoint");
	HX_MARK_MEMBER_NAME(filters,"filters");
	HX_MARK_MEMBER_NAME(cacheAsBitmapMatrix,"cacheAsBitmapMatrix");
	HX_MARK_MEMBER_NAME(_cacheBitmapMatrix,"_cacheBitmapMatrix");
	HX_MARK_END_CLASS();
}

void SymbolParameters_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_parent,"_parent");
	HX_VISIT_MEMBER_NAME(_filterBitmap,"_filterBitmap");
	HX_VISIT_MEMBER_NAME(instance,"instance");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(loop,"loop");
	HX_VISIT_MEMBER_NAME(reverse,"reverse");
	HX_VISIT_MEMBER_NAME(firstFrame,"firstFrame");
	HX_VISIT_MEMBER_NAME(_curFrame,"_curFrame");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(colorEffect,"colorEffect");
	HX_VISIT_MEMBER_NAME(_cacheAsBitmap,"_cacheAsBitmap");
	HX_VISIT_MEMBER_NAME(_renderDirty,"_renderDirty");
	HX_VISIT_MEMBER_NAME(_layerDirty,"_layerDirty");
	HX_VISIT_MEMBER_NAME(_colorEffect,"_colorEffect");
	HX_VISIT_MEMBER_NAME(transformationPoint,"transformationPoint");
	HX_VISIT_MEMBER_NAME(filters,"filters");
	HX_VISIT_MEMBER_NAME(cacheAsBitmapMatrix,"cacheAsBitmapMatrix");
	HX_VISIT_MEMBER_NAME(_cacheBitmapMatrix,"_cacheBitmapMatrix");
}

::hx::Val SymbolParameters_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return ::hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"loop") ) { return ::hx::Val( loop ); }
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return ::hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_parent") ) { return ::hx::Val( _parent ); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return ::hx::Val( reverse ); }
		if (HX_FIELD_EQ(inName,"filters") ) { return ::hx::Val( filters ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { return ::hx::Val( instance ); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return ::hx::Val( set_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_loop") ) { return ::hx::Val( set_loop_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_curFrame") ) { return ::hx::Val( _curFrame ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"firstFrame") ) { return ::hx::Val( firstFrame ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"colorEffect") ) { return ::hx::Val( colorEffect ); }
		if (HX_FIELD_EQ(inName,"_layerDirty") ) { return ::hx::Val( _layerDirty ); }
		if (HX_FIELD_EQ(inName,"set_filters") ) { return ::hx::Val( set_filters_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_renderDirty") ) { return ::hx::Val( _renderDirty ); }
		if (HX_FIELD_EQ(inName,"_colorEffect") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get__colorEffect() : _colorEffect ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_filterBitmap") ) { return ::hx::Val( _filterBitmap ); }
		if (HX_FIELD_EQ(inName,"cacheAsBitmap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_cacheAsBitmap() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_cacheAsBitmap") ) { return ::hx::Val( _cacheAsBitmap ); }
		if (HX_FIELD_EQ(inName,"set_firstFrame") ) { return ::hx::Val( set_firstFrame_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"set_colorEffect") ) { return ::hx::Val( set_colorEffect_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get__colorEffect") ) { return ::hx::Val( get__colorEffect_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_cacheAsBitmap") ) { return ::hx::Val( get_cacheAsBitmap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_cacheAsBitmap") ) { return ::hx::Val( set_cacheAsBitmap_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_cacheBitmapMatrix") ) { return ::hx::Val( _cacheBitmapMatrix ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"transformationPoint") ) { return ::hx::Val( transformationPoint ); }
		if (HX_FIELD_EQ(inName,"cacheAsBitmapMatrix") ) { return ::hx::Val( cacheAsBitmapMatrix ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SymbolParameters_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_type(inValue.Cast<  ::flxanimate::data::SymbolT >()) );type=inValue.Cast<  ::flxanimate::data::SymbolT >(); return inValue; }
		if (HX_FIELD_EQ(inName,"loop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_loop(inValue.Cast<  ::flxanimate::data::Loop >()) );loop=inValue.Cast<  ::flxanimate::data::Loop >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_parent") ) { _parent=inValue.Cast<  ::flxanimate::animate::FlxElement >(); return inValue; }
		if (HX_FIELD_EQ(inName,"reverse") ) { reverse=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"filters") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_filters(inValue.Cast< ::Array< ::Dynamic> >()) );filters=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_curFrame") ) { _curFrame=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"firstFrame") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_firstFrame(inValue.Cast< int >()) );firstFrame=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"colorEffect") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_colorEffect(inValue.Cast<  ::flxanimate::effects::FlxColorEffect >()) );colorEffect=inValue.Cast<  ::flxanimate::effects::FlxColorEffect >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_layerDirty") ) { _layerDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_renderDirty") ) { _renderDirty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_colorEffect") ) { _colorEffect=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_filterBitmap") ) { _filterBitmap=inValue.Cast<  ::flixel::graphics::frames::FlxFrame >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cacheAsBitmap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_cacheAsBitmap(inValue.Cast< bool >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_cacheAsBitmap") ) { _cacheAsBitmap=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_cacheBitmapMatrix") ) { _cacheBitmapMatrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"transformationPoint") ) { transformationPoint=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cacheAsBitmapMatrix") ) { cacheAsBitmapMatrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SymbolParameters_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_parent",c9,16,f5,5b));
	outFields->push(HX_("_filterBitmap",a6,d0,d2,df));
	outFields->push(HX_("instance",95,1f,e1,59));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("loop",64,a6,b7,47));
	outFields->push(HX_("reverse",22,39,fc,1a));
	outFields->push(HX_("firstFrame",dd,c1,61,44));
	outFields->push(HX_("_curFrame",ec,69,c7,95));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("colorEffect",54,ec,cb,1a));
	outFields->push(HX_("cacheAsBitmap",e3,82,0f,6a));
	outFields->push(HX_("_cacheAsBitmap",24,73,61,a8));
	outFields->push(HX_("_renderDirty",dd,2a,8b,0b));
	outFields->push(HX_("_layerDirty",a0,d5,e9,51));
	outFields->push(HX_("_colorEffect",55,9a,d5,80));
	outFields->push(HX_("transformationPoint",c7,cd,1b,d6));
	outFields->push(HX_("filters",bb,a1,46,09));
	outFields->push(HX_("cacheAsBitmapMatrix",84,f9,81,95));
	outFields->push(HX_("_cacheBitmapMatrix",b3,bd,43,b8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SymbolParameters_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flxanimate::animate::FlxElement */ ,(int)offsetof(SymbolParameters_obj,_parent),HX_("_parent",c9,16,f5,5b)},
	{::hx::fsObject /*  ::flixel::graphics::frames::FlxFrame */ ,(int)offsetof(SymbolParameters_obj,_filterBitmap),HX_("_filterBitmap",a6,d0,d2,df)},
	{::hx::fsString,(int)offsetof(SymbolParameters_obj,instance),HX_("instance",95,1f,e1,59)},
	{::hx::fsObject /*  ::flxanimate::data::SymbolT */ ,(int)offsetof(SymbolParameters_obj,type),HX_("type",ba,f2,08,4d)},
	{::hx::fsObject /*  ::flxanimate::data::Loop */ ,(int)offsetof(SymbolParameters_obj,loop),HX_("loop",64,a6,b7,47)},
	{::hx::fsBool,(int)offsetof(SymbolParameters_obj,reverse),HX_("reverse",22,39,fc,1a)},
	{::hx::fsInt,(int)offsetof(SymbolParameters_obj,firstFrame),HX_("firstFrame",dd,c1,61,44)},
	{::hx::fsInt,(int)offsetof(SymbolParameters_obj,_curFrame),HX_("_curFrame",ec,69,c7,95)},
	{::hx::fsString,(int)offsetof(SymbolParameters_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsObject /*  ::flxanimate::effects::FlxColorEffect */ ,(int)offsetof(SymbolParameters_obj,colorEffect),HX_("colorEffect",54,ec,cb,1a)},
	{::hx::fsBool,(int)offsetof(SymbolParameters_obj,_cacheAsBitmap),HX_("_cacheAsBitmap",24,73,61,a8)},
	{::hx::fsBool,(int)offsetof(SymbolParameters_obj,_renderDirty),HX_("_renderDirty",dd,2a,8b,0b)},
	{::hx::fsBool,(int)offsetof(SymbolParameters_obj,_layerDirty),HX_("_layerDirty",a0,d5,e9,51)},
	{::hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(int)offsetof(SymbolParameters_obj,_colorEffect),HX_("_colorEffect",55,9a,d5,80)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(SymbolParameters_obj,transformationPoint),HX_("transformationPoint",c7,cd,1b,d6)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(SymbolParameters_obj,filters),HX_("filters",bb,a1,46,09)},
	{::hx::fsObject /*  ::flixel::math::FlxMatrix */ ,(int)offsetof(SymbolParameters_obj,cacheAsBitmapMatrix),HX_("cacheAsBitmapMatrix",84,f9,81,95)},
	{::hx::fsObject /*  ::flixel::math::FlxMatrix */ ,(int)offsetof(SymbolParameters_obj,_cacheBitmapMatrix),HX_("_cacheBitmapMatrix",b3,bd,43,b8)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SymbolParameters_obj_sStaticStorageInfo = 0;
#endif

static ::String SymbolParameters_obj_sMemberFields[] = {
	HX_("_parent",c9,16,f5,5b),
	HX_("_filterBitmap",a6,d0,d2,df),
	HX_("instance",95,1f,e1,59),
	HX_("type",ba,f2,08,4d),
	HX_("loop",64,a6,b7,47),
	HX_("reverse",22,39,fc,1a),
	HX_("firstFrame",dd,c1,61,44),
	HX_("_curFrame",ec,69,c7,95),
	HX_("name",4b,72,ff,48),
	HX_("colorEffect",54,ec,cb,1a),
	HX_("_cacheAsBitmap",24,73,61,a8),
	HX_("_renderDirty",dd,2a,8b,0b),
	HX_("_layerDirty",a0,d5,e9,51),
	HX_("_colorEffect",55,9a,d5,80),
	HX_("transformationPoint",c7,cd,1b,d6),
	HX_("filters",bb,a1,46,09),
	HX_("cacheAsBitmapMatrix",84,f9,81,95),
	HX_("_cacheBitmapMatrix",b3,bd,43,b8),
	HX_("destroy",fa,2c,86,24),
	HX_("set_type",b7,07,21,7b),
	HX_("update",09,86,05,87),
	HX_("set_loop",61,bb,cf,75),
	HX_("set_firstFrame",9a,32,77,da),
	HX_("reset",cf,49,c8,e6),
	HX_("get__colorEffect",de,86,74,85),
	HX_("set_colorEffect",f7,20,79,d7),
	HX_("set_filters",de,08,ae,99),
	HX_("get_cacheAsBitmap",3a,8e,7f,70),
	HX_("set_cacheAsBitmap",46,66,ed,93),
	::String(null()) };

::hx::Class SymbolParameters_obj::__mClass;

void SymbolParameters_obj::__register()
{
	SymbolParameters_obj _hx_dummy;
	SymbolParameters_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.animate.SymbolParameters",8e,26,ee,2d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SymbolParameters_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SymbolParameters_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SymbolParameters_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SymbolParameters_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flxanimate
} // end namespace animate
