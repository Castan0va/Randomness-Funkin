// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flxanimate_data_AnimationData
#include <flxanimate/data/AnimationData.h>
#endif
#ifndef INCLUDED_flxanimate_data_ColorEffect
#include <flxanimate/data/ColorEffect.h>
#endif
#ifndef INCLUDED_flxanimate_data__AnimationData_AdjustColorFilter_Impl_
#include <flxanimate/data/_AnimationData/AdjustColorFilter_Impl_.h>
#endif
#ifndef INCLUDED_flxanimate_data__AnimationData_BevelFilter_Impl_
#include <flxanimate/data/_AnimationData/BevelFilter_Impl_.h>
#endif
#ifndef INCLUDED_flxanimate_data__AnimationData_BlurFilter_Impl_
#include <flxanimate/data/_AnimationData/BlurFilter_Impl_.h>
#endif
#ifndef INCLUDED_flxanimate_data__AnimationData_ColorEffects_Impl_
#include <flxanimate/data/_AnimationData/ColorEffects_Impl_.h>
#endif
#ifndef INCLUDED_flxanimate_data__AnimationData_GlowFilter_Impl_
#include <flxanimate/data/_AnimationData/GlowFilter_Impl_.h>
#endif
#ifndef INCLUDED_flxanimate_effects_FlxAdvanced
#include <flxanimate/effects/FlxAdvanced.h>
#endif
#ifndef INCLUDED_flxanimate_effects_FlxAlpha
#include <flxanimate/effects/FlxAlpha.h>
#endif
#ifndef INCLUDED_flxanimate_effects_FlxBrightness
#include <flxanimate/effects/FlxBrightness.h>
#endif
#ifndef INCLUDED_flxanimate_effects_FlxColorEffect
#include <flxanimate/effects/FlxColorEffect.h>
#endif
#ifndef INCLUDED_flxanimate_effects_FlxTint
#include <flxanimate/effects/FlxTint.h>
#endif
#ifndef INCLUDED_flxanimate_filters_BevelFilter
#include <flxanimate/filters/BevelFilter.h>
#endif
#ifndef INCLUDED_flxanimate_motion_AdjustColor
#include <flxanimate/motion/AdjustColor.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_BlurFilter
#include <openfl/filters/BlurFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ColorMatrixFilter
#include <openfl/filters/ColorMatrixFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_GlowFilter
#include <openfl/filters/GlowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_00525f223802bb12_21_setFieldBool,"flxanimate.data.AnimationData","setFieldBool",0xf2e61f07,"flxanimate.data.AnimationData.setFieldBool","flxanimate/data/AnimationData.hx",21,0xa9372435)
HX_LOCAL_STACK_FRAME(_hx_pos_00525f223802bb12_46_fromColorJson,"flxanimate.data.AnimationData","fromColorJson",0x064139bc,"flxanimate.data.AnimationData.fromColorJson","flxanimate/data/AnimationData.hx",46,0xa9372435)
HX_LOCAL_STACK_FRAME(_hx_pos_00525f223802bb12_81_colorFromString,"flxanimate.data.AnimationData","colorFromString",0xdccd5939,"flxanimate.data.AnimationData.colorFromString","flxanimate/data/AnimationData.hx",81,0xa9372435)
HX_LOCAL_STACK_FRAME(_hx_pos_00525f223802bb12_88_fromFilterJson,"flxanimate.data.AnimationData","fromFilterJson",0x4c405c4f,"flxanimate.data.AnimationData.fromFilterJson","flxanimate/data/AnimationData.hx",88,0xa9372435)
HX_LOCAL_STACK_FRAME(_hx_pos_00525f223802bb12_135_parseColorEffect,"flxanimate.data.AnimationData","parseColorEffect",0x28816666,"flxanimate.data.AnimationData.parseColorEffect","flxanimate/data/AnimationData.hx",135,0xa9372435)
namespace flxanimate{
namespace data{

void AnimationData_obj::__construct() { }

Dynamic AnimationData_obj::__CreateEmpty() { return new AnimationData_obj; }

void *AnimationData_obj::_hx_vtable = 0;

Dynamic AnimationData_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AnimationData_obj > _hx_result = new AnimationData_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AnimationData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0c259335;
}

 ::Dynamic AnimationData_obj::setFieldBool( ::Dynamic abstracto,::Array< ::String > things, ::Dynamic set){
            	HX_STACKFRAME(&_hx_pos_00525f223802bb12_21_setFieldBool)
HXLINE(  25)		if (::hx::IsNull( abstracto )) {
HXLINE(  26)			return ::Reflect_obj::field( ::Dynamic(::hx::Anon_obj::Create(0)),HX_("",00,00,00,00));
            		}
HXLINE(  27)		{
HXLINE(  27)			int _g = 0;
HXDLIN(  27)			while((_g < things->length)){
HXLINE(  27)				::String thing = things->__get(_g);
HXDLIN(  27)				_g = (_g + 1);
HXLINE(  29)				if (::hx::IsNotNull( set )) {
HXLINE(  31)					::Reflect_obj::setField(abstracto,thing,set);
HXLINE(  32)					return set;
            				}
HXLINE(  34)				if (::Reflect_obj::hasField(abstracto,thing)) {
HXLINE(  36)					return ::Reflect_obj::field(abstracto,thing);
            				}
            			}
            		}
HXLINE(  39)		return ::Reflect_obj::field(abstracto,HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AnimationData_obj,setFieldBool,return )

 ::flxanimate::data::ColorEffect AnimationData_obj::fromColorJson( ::Dynamic effect){
            	HX_GC_STACKFRAME(&_hx_pos_00525f223802bb12_46_fromColorJson)
HXLINE(  47)		 ::flxanimate::data::ColorEffect colorEffect = ::flxanimate::data::ColorEffect_obj::None_dyn();
HXLINE(  49)		if (::hx::IsNull( effect )) {
HXLINE(  49)			return colorEffect;
            		}
HXLINE(  51)		::String _hx_switch_0 = ::flxanimate::data::_AnimationData::ColorEffects_Impl__obj::get_M(effect);
            		if (  (_hx_switch_0==HX_("AD",e3,38,00,00)) ||  (_hx_switch_0==HX_("Advanced",c2,25,2d,15)) ){
HXLINE(  63)			 ::openfl::geom::ColorTransform CT =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  64)			CT->redMultiplier = ::flxanimate::data::_AnimationData::ColorEffects_Impl__obj::get_RM(effect);
HXLINE(  65)			CT->redOffset = ( (Float)(::flxanimate::data::_AnimationData::ColorEffects_Impl__obj::get_RO(effect)) );
HXLINE(  66)			CT->greenMultiplier = ::flxanimate::data::_AnimationData::ColorEffects_Impl__obj::get_GM(effect);
HXLINE(  67)			CT->greenOffset = ( (Float)(::flxanimate::data::_AnimationData::ColorEffects_Impl__obj::get_GO(effect)) );
HXLINE(  68)			CT->blueMultiplier = ::flxanimate::data::_AnimationData::ColorEffects_Impl__obj::get_BM(effect);
HXLINE(  69)			CT->blueOffset = ( (Float)(::flxanimate::data::_AnimationData::ColorEffects_Impl__obj::get_BO(effect)) );
HXLINE(  70)			CT->alphaMultiplier = ::flxanimate::data::_AnimationData::ColorEffects_Impl__obj::get_AM(effect);
HXLINE(  71)			CT->alphaOffset = ( (Float)(::flxanimate::data::_AnimationData::ColorEffects_Impl__obj::get_AO(effect)) );
HXLINE(  72)			colorEffect = ::flxanimate::data::ColorEffect_obj::Advanced(CT);
HXLINE(  62)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Alpha",3e,17,c4,b4)) ||  (_hx_switch_0==HX_("CA",9e,3a,00,00)) ){
HXLINE(  58)			colorEffect = ::flxanimate::data::ColorEffect_obj::Alpha(::flxanimate::data::_AnimationData::ColorEffects_Impl__obj::get_AM(effect));
HXDLIN(  58)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Brightness",f1,91,22,5c)) ||  (_hx_switch_0==HX_("CBRT",21,a8,7b,2c)) ){
HXLINE(  60)			colorEffect = ::flxanimate::data::ColorEffect_obj::Brightness(::flxanimate::data::_AnimationData::ColorEffects_Impl__obj::get_BRT(effect));
HXDLIN(  60)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("T",54,00,00,00)) ||  (_hx_switch_0==HX_("Tint",1b,f9,d5,37)) ){
HXLINE(  54)			::String tc = (HX_("0x",48,2a,00,00) + ::flxanimate::data::_AnimationData::ColorEffects_Impl__obj::get_TC(effect).substring(1,null()));
HXLINE(  56)			 ::Dynamic colorEffect1 = ::Std_obj::parseInt(tc);
HXDLIN(  56)			colorEffect = ::flxanimate::data::ColorEffect_obj::Tint(colorEffect1,::flxanimate::data::_AnimationData::ColorEffects_Impl__obj::get_TM(effect));
HXLINE(  53)			goto _hx_goto_2;
            		}
            		/* default */{
HXLINE(  75)			 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
HXDLIN(  75)			 ::Dynamic data = ((HX_("color Effect mode \"",37,e4,ad,de) + ::flxanimate::data::_AnimationData::ColorEffects_Impl__obj::get_M(effect)) + HX_("\" is invalid or not supported!",1c,7e,a6,56));
HXDLIN(  75)			_this->advanced(data,::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            		}
            		_hx_goto_2:;
HXLINE(  77)		return colorEffect;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AnimationData_obj,fromColorJson,return )

 ::Dynamic AnimationData_obj::colorFromString(::String color){
            	HX_STACKFRAME(&_hx_pos_00525f223802bb12_81_colorFromString)
HXDLIN(  81)		return ::Std_obj::parseInt((HX_("0x",48,2a,00,00) + color.substring(1,null())));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AnimationData_obj,colorFromString,return )

::Array< ::Dynamic> AnimationData_obj::fromFilterJson( ::Dynamic filters){
            	HX_GC_STACKFRAME(&_hx_pos_00525f223802bb12_88_fromFilterJson)
HXLINE(  89)		if (::hx::IsNull( filters )) {
HXLINE(  89)			return null();
            		}
HXLINE(  91)		::Array< ::Dynamic> bitmapFilter = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  93)		{
HXLINE(  93)			int _g = 0;
HXDLIN(  93)			::Array< ::String > _g1 = ::Reflect_obj::fields(filters);
HXDLIN(  93)			while((_g < _g1->length)){
HXLINE(  93)				::String filter = _g1->__get(_g);
HXDLIN(  93)				_g = (_g + 1);
HXLINE(  95)				::String _hx_switch_0 = filter;
            				if (  (_hx_switch_0==HX_("ACF",24,8d,31,00)) ||  (_hx_switch_0==HX_("AdjustColorFilter",0c,f9,e5,fb)) ){
HXLINE( 109)					 ::Dynamic adjustColor = ::Reflect_obj::field(filters,filter);
HXLINE( 111)					 ::flxanimate::motion::AdjustColor colorAdjust =  ::flxanimate::motion::AdjustColor_obj::__alloc( HX_CTX );
HXLINE( 113)					colorAdjust->set_hue(::flxanimate::data::_AnimationData::AdjustColorFilter_Impl__obj::get_H(adjustColor));
HXLINE( 114)					colorAdjust->set_brightness(::flxanimate::data::_AnimationData::AdjustColorFilter_Impl__obj::get_BRT(adjustColor));
HXLINE( 115)					colorAdjust->set_contrast(::flxanimate::data::_AnimationData::AdjustColorFilter_Impl__obj::get_CT(adjustColor));
HXLINE( 116)					colorAdjust->set_saturation(::flxanimate::data::_AnimationData::AdjustColorFilter_Impl__obj::get_SAT(adjustColor));
HXLINE( 118)					bitmapFilter->push( ::openfl::filters::ColorMatrixFilter_obj::__alloc( HX_CTX ,colorAdjust->calculateFinalFlatArray()));
HXLINE( 108)					goto _hx_goto_6;
            				}
            				if (  (_hx_switch_0==HX_("BF",c4,39,00,00)) ||  (_hx_switch_0==HX_("BevelFilter",b2,0b,be,27)) ){
HXLINE( 122)					 ::Dynamic bevel = ::Reflect_obj::field(filters,filter);
HXLINE( 123)					Float _hx_tmp = ::flxanimate::data::_AnimationData::BevelFilter_Impl__obj::get_DST(bevel);
HXDLIN( 123)					Float _hx_tmp1 = ::flxanimate::data::_AnimationData::BevelFilter_Impl__obj::get_AL(bevel);
HXDLIN( 123)					 ::Dynamic _hx_tmp2 = ::flxanimate::data::AnimationData_obj::colorFromString(::flxanimate::data::_AnimationData::BevelFilter_Impl__obj::get_HC(bevel));
HXDLIN( 123)					Float _hx_tmp3 = ::flxanimate::data::_AnimationData::BevelFilter_Impl__obj::get_HA(bevel);
HXDLIN( 123)					 ::Dynamic _hx_tmp4 = ::flxanimate::data::AnimationData_obj::colorFromString(::flxanimate::data::_AnimationData::BevelFilter_Impl__obj::get_SC(bevel));
HXDLIN( 123)					Float _hx_tmp5 = ::flxanimate::data::_AnimationData::BevelFilter_Impl__obj::get_SA(bevel);
HXDLIN( 123)					Float _hx_tmp6 = ::flxanimate::data::_AnimationData::BlurFilter_Impl__obj::get_BLX(bevel);
HXDLIN( 123)					Float _hx_tmp7 = ::flxanimate::data::_AnimationData::BlurFilter_Impl__obj::get_BLY(bevel);
HXDLIN( 123)					Float _hx_tmp8 = ::flxanimate::data::_AnimationData::BevelFilter_Impl__obj::get_STR(bevel);
HXDLIN( 123)					int _hx_tmp9 = ::flxanimate::data::_AnimationData::BlurFilter_Impl__obj::get_Q(bevel);
HXDLIN( 123)					::String _hx_tmp10 = ::flxanimate::data::_AnimationData::BevelFilter_Impl__obj::get_TP(bevel);
HXDLIN( 123)					bitmapFilter->push( ::flxanimate::filters::BevelFilter_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,::flxanimate::data::_AnimationData::BevelFilter_Impl__obj::get_KK(bevel)));
HXLINE( 121)					goto _hx_goto_6;
            				}
            				if (  (_hx_switch_0==HX_("BLF",3c,57,32,00)) ||  (_hx_switch_0==HX_("BlurFilter",df,d1,71,f3)) ){
HXLINE( 104)					 ::Dynamic blur = ::Reflect_obj::field(filters,filter);
HXLINE( 105)					Float _hx_tmp11 = ::flxanimate::data::_AnimationData::BlurFilter_Impl__obj::get_BLX(blur);
HXDLIN( 105)					Float _hx_tmp12 = ::flxanimate::data::_AnimationData::BlurFilter_Impl__obj::get_BLY(blur);
HXDLIN( 105)					bitmapFilter->push( ::openfl::filters::BlurFilter_obj::__alloc( HX_CTX ,_hx_tmp11,_hx_tmp12,::flxanimate::data::_AnimationData::BlurFilter_Impl__obj::get_Q(blur)));
HXLINE( 103)					goto _hx_goto_6;
            				}
            				if (  (_hx_switch_0==HX_("GF",1f,3e,00,00)) ||  (_hx_switch_0==HX_("GlowFilter",45,ce,a2,2d)) ){
HXLINE(  99)					 ::Dynamic glow = ::Reflect_obj::field(filters,filter);
HXLINE( 100)					 ::Dynamic _hx_tmp13 = ::flxanimate::data::AnimationData_obj::colorFromString(::flxanimate::data::_AnimationData::GlowFilter_Impl__obj::get_C(glow));
HXDLIN( 100)					Float _hx_tmp14 = ::flxanimate::data::_AnimationData::GlowFilter_Impl__obj::get_A(glow);
HXDLIN( 100)					Float _hx_tmp15 = ::flxanimate::data::_AnimationData::BlurFilter_Impl__obj::get_BLX(glow);
HXDLIN( 100)					Float _hx_tmp16 = ::flxanimate::data::_AnimationData::BlurFilter_Impl__obj::get_BLY(glow);
HXDLIN( 100)					Float _hx_tmp17 = ::flxanimate::data::_AnimationData::GlowFilter_Impl__obj::get_STR(glow);
HXDLIN( 100)					int _hx_tmp18 = ::flxanimate::data::_AnimationData::BlurFilter_Impl__obj::get_Q(glow);
HXDLIN( 100)					bool _hx_tmp19 = ::flxanimate::data::_AnimationData::GlowFilter_Impl__obj::get_IN(glow);
HXDLIN( 100)					bitmapFilter->push( ::openfl::filters::GlowFilter_obj::__alloc( HX_CTX ,_hx_tmp13,_hx_tmp14,_hx_tmp15,_hx_tmp16,_hx_tmp17,_hx_tmp18,_hx_tmp19,::flxanimate::data::_AnimationData::GlowFilter_Impl__obj::get_KK(glow)));
HXLINE(  98)					goto _hx_goto_6;
            				}
            				_hx_goto_6:;
            			}
            		}
HXLINE( 128)		return bitmapFilter;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AnimationData_obj,fromFilterJson,return )

 ::flxanimate::effects::FlxColorEffect AnimationData_obj::parseColorEffect( ::flxanimate::data::ColorEffect __o_colorEffect){
            		 ::flxanimate::data::ColorEffect colorEffect = __o_colorEffect;
            		if (::hx::IsNull(__o_colorEffect)) colorEffect = ::flxanimate::data::ColorEffect_obj::None_dyn();
            	HX_GC_STACKFRAME(&_hx_pos_00525f223802bb12_135_parseColorEffect)
HXLINE( 136)		 ::flxanimate::effects::FlxColorEffect CT = null();
HXLINE( 138)		if ((::Array_obj< ::Dynamic>::__new(2)->init(0,::flxanimate::data::ColorEffect_obj::None_dyn())->init(1,null())->indexOf(colorEffect,null()) == -1)) {
HXLINE( 140)			::cpp::VirtualArray params = ::Type_obj::enumParameters(colorEffect);
HXLINE( 141)			::String _hx_switch_0 = ::Type_obj::enumConstructor(colorEffect);
            			if (  (_hx_switch_0==HX_("Advanced",c2,25,2d,15)) ){
HXLINE( 146)				CT =  ::flxanimate::effects::FlxAdvanced_obj::__alloc( HX_CTX ,( ( ::openfl::geom::ColorTransform)(params->__get(0)) ));
HXDLIN( 146)				goto _hx_goto_8;
            			}
            			if (  (_hx_switch_0==HX_("Alpha",3e,17,c4,b4)) ){
HXLINE( 144)				CT =  ::flxanimate::effects::FlxAlpha_obj::__alloc( HX_CTX ,( (Float)(params->__get(0)) ));
HXDLIN( 144)				goto _hx_goto_8;
            			}
            			if (  (_hx_switch_0==HX_("Brightness",f1,91,22,5c)) ){
HXLINE( 145)				CT =  ::flxanimate::effects::FlxBrightness_obj::__alloc( HX_CTX ,( (Float)(params->__get(0)) ));
HXDLIN( 145)				goto _hx_goto_8;
            			}
            			if (  (_hx_switch_0==HX_("Tint",1b,f9,d5,37)) ){
HXLINE( 143)				CT =  ::flxanimate::effects::FlxTint_obj::__alloc( HX_CTX ,( (int)(params->__get(0)) ),( (Float)(params->__get(1)) ));
HXDLIN( 143)				goto _hx_goto_8;
            			}
            			/* default */{
HXLINE( 147)				CT =  ::flxanimate::effects::FlxColorEffect_obj::__alloc( HX_CTX );
            			}
            			_hx_goto_8:;
            		}
HXLINE( 152)		return CT;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AnimationData_obj,parseColorEffect,return )


AnimationData_obj::AnimationData_obj()
{
}

bool AnimationData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"setFieldBool") ) { outValue = setFieldBool_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fromColorJson") ) { outValue = fromColorJson_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fromFilterJson") ) { outValue = fromFilterJson_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"colorFromString") ) { outValue = colorFromString_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"parseColorEffect") ) { outValue = parseColorEffect_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *AnimationData_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *AnimationData_obj_sStaticStorageInfo = 0;
#endif

::hx::Class AnimationData_obj::__mClass;

static ::String AnimationData_obj_sStaticFields[] = {
	HX_("setFieldBool",02,ea,b9,fc),
	HX_("fromColorJson",61,0a,bf,95),
	HX_("colorFromString",1e,5d,dc,a3),
	HX_("fromFilterJson",0a,1c,d9,4a),
	HX_("parseColorEffect",e1,ca,95,8e),
	::String(null())
};

void AnimationData_obj::__register()
{
	AnimationData_obj _hx_dummy;
	AnimationData_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.data.AnimationData",89,36,82,47);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AnimationData_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(AnimationData_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< AnimationData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AnimationData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AnimationData_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flxanimate
} // end namespace data
