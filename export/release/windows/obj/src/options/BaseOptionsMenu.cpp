// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_InputFormatter
#include <backend/InputFormatter.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadModel
#include <flixel/input/gamepad/FlxGamepadModel.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad__FlxGamepadInputID_FlxGamepadInputID_Impl_
#include <flixel/input/gamepad/_FlxGamepadInputID/FlxGamepadInputID_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_objects_Alignment
#include <objects/Alignment.h>
#endif
#ifndef INCLUDED_objects_AlphaCharacter
#include <objects/AlphaCharacter.h>
#endif
#ifndef INCLUDED_objects_Alphabet
#include <objects/Alphabet.h>
#endif
#ifndef INCLUDED_objects_AttachedText
#include <objects/AttachedText.h>
#endif
#ifndef INCLUDED_objects_CheckboxThingie
#include <objects/CheckboxThingie.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_options_BaseOptionsMenu
#include <options/BaseOptionsMenu.h>
#endif
#ifndef INCLUDED_options_Option
#include <options/Option.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_11861b212311743c_13_new,"options.BaseOptionsMenu","new",0x99505d4e,"options.BaseOptionsMenu.new","options/BaseOptionsMenu.hx",13,0x82de5a23)
HX_LOCAL_STACK_FRAME(_hx_pos_11861b212311743c_111_addOption,"options.BaseOptionsMenu","addOption",0xc780fbe4,"options.BaseOptionsMenu.addOption","options/BaseOptionsMenu.hx",111,0x82de5a23)
HX_LOCAL_STACK_FRAME(_hx_pos_11861b212311743c_127_update,"options.BaseOptionsMenu","update",0xdab941db,"options.BaseOptionsMenu.update","options/BaseOptionsMenu.hx",127,0x82de5a23)
HX_LOCAL_STACK_FRAME(_hx_pos_11861b212311743c_295_bindingKeyUpdate,"options.BaseOptionsMenu","bindingKeyUpdate",0xf77abf55,"options.BaseOptionsMenu.bindingKeyUpdate","options/BaseOptionsMenu.hx",295,0x82de5a23)
HX_LOCAL_STACK_FRAME(_hx_pos_11861b212311743c_397_updateBind,"options.BaseOptionsMenu","updateBind",0x7b9eed38,"options.BaseOptionsMenu.updateBind","options/BaseOptionsMenu.hx",397,0x82de5a23)
HX_LOCAL_STACK_FRAME(_hx_pos_11861b212311743c_427_playstationCheck,"options.BaseOptionsMenu","playstationCheck",0xac279ffa,"options.BaseOptionsMenu.playstationCheck","options/BaseOptionsMenu.hx",427,0x82de5a23)
HX_LOCAL_STACK_FRAME(_hx_pos_11861b212311743c_448_closeBinding,"options.BaseOptionsMenu","closeBinding",0xb14be7bf,"options.BaseOptionsMenu.closeBinding","options/BaseOptionsMenu.hx",448,0x82de5a23)
HX_LOCAL_STACK_FRAME(_hx_pos_11861b212311743c_461_updateTextFrom,"options.BaseOptionsMenu","updateTextFrom",0x9c56c9b2,"options.BaseOptionsMenu.updateTextFrom","options/BaseOptionsMenu.hx",461,0x82de5a23)
HX_LOCAL_STACK_FRAME(_hx_pos_11861b212311743c_476_changeSelection,"options.BaseOptionsMenu","changeSelection",0x8948d2aa,"options.BaseOptionsMenu.changeSelection","options/BaseOptionsMenu.hx",476,0x82de5a23)
HX_LOCAL_STACK_FRAME(_hx_pos_11861b212311743c_512_reloadCheckboxes,"options.BaseOptionsMenu","reloadCheckboxes",0x856a587c,"options.BaseOptionsMenu.reloadCheckboxes","options/BaseOptionsMenu.hx",512,0x82de5a23)
namespace options{

void BaseOptionsMenu_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_11861b212311743c_13_new)
HXLINE( 395)		this->MAX_KEYBIND_WIDTH = 320;
HXLINE( 122)		this->holdingEsc = ((Float)0);
HXLINE( 121)		this->bindingKey = false;
HXLINE( 119)		this->holdValue = ((Float)0);
HXLINE( 118)		this->holdTime = ((Float)0);
HXLINE( 117)		this->nextAccept = 5;
HXLINE(  16)		this->curSelected = 0;
HXLINE(  15)		this->curOption = null();
HXLINE(  35)		super::__construct();
HXLINE(  37)		if (::hx::IsNull( this->title )) {
HXLINE(  37)			this->title = HX_("Options",3e,5b,4f,ad);
            		}
HXLINE(  38)		if (::hx::IsNull( this->rpcTitle )) {
HXLINE(  38)			this->rpcTitle = HX_("Options Menu",e1,25,4c,98);
            		}
HXLINE(  41)		::backend::DiscordClient_obj::changePresence(this->rpcTitle,null(),null(),null(),null());
HXLINE(  44)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  44)		this->bg = _hx_tmp->loadGraphic(::backend::Paths_obj::image(HX_("menuDesat",26,91,04,72),null(),null()),null(),null(),null(),null(),null());
HXLINE(  45)		this->bg->set_color(-1412611);
HXLINE(  46)		{
HXLINE(  46)			 ::flixel::FlxSprite _this = this->bg;
HXDLIN(  46)			int axes = 17;
HXDLIN(  46)			bool _hx_tmp1;
HXDLIN(  46)			if ((axes != 1)) {
HXLINE(  46)				_hx_tmp1 = (axes == 17);
            			}
            			else {
HXLINE(  46)				_hx_tmp1 = true;
            			}
HXDLIN(  46)			if (_hx_tmp1) {
HXLINE(  46)				int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN(  46)				_this->set_x(((( (Float)(_hx_tmp2) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  46)			bool _hx_tmp3;
HXDLIN(  46)			if ((axes != 16)) {
HXLINE(  46)				_hx_tmp3 = (axes == 17);
            			}
            			else {
HXLINE(  46)				_hx_tmp3 = true;
            			}
HXDLIN(  46)			if (_hx_tmp3) {
HXLINE(  46)				int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN(  46)				_this->set_y(((( (Float)(_hx_tmp4) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  47)		this->bg->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  48)		this->add(this->bg);
HXLINE(  51)		this->grpOptions =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  52)		this->add(this->grpOptions);
HXLINE(  54)		this->grpTexts =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  55)		this->add(this->grpTexts);
HXLINE(  57)		this->checkboxGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  58)		this->add(this->checkboxGroup);
HXLINE(  60)		this->descBox =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-16777216,null(),null());
HXLINE(  61)		this->descBox->set_alpha(((Float)0.6));
HXLINE(  62)		this->add(this->descBox);
HXLINE(  64)		 ::objects::Alphabet titleText =  ::objects::Alphabet_obj::__alloc( HX_CTX ,( (Float)(75) ),( (Float)(45) ),this->title,true);
HXLINE(  65)		titleText->setScale(((Float)0.6),null());
HXLINE(  66)		titleText->set_alpha(((Float)0.4));
HXLINE(  67)		this->add(titleText);
HXLINE(  69)		this->descText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,50,600,1180,HX_("",00,00,00,00),32,null());
HXLINE(  70)		 ::flixel::text::FlxText _hx_tmp5 = this->descText;
HXDLIN(  70)		::String file = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN(  70)		::String _hx_tmp6;
HXDLIN(  70)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE(  70)			_hx_tmp6 = file;
            		}
            		else {
HXLINE(  70)			_hx_tmp6 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN(  70)		_hx_tmp5->setFormat(_hx_tmp6,32,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  71)		{
HXLINE(  71)			 ::flixel::math::FlxBasePoint this1 = this->descText->scrollFactor;
HXDLIN(  71)			this1->set_x(( (Float)(0) ));
HXDLIN(  71)			this1->set_y(( (Float)(0) ));
            		}
HXLINE(  72)		this->descText->set_borderSize(((Float)2.4));
HXLINE(  73)		this->add(this->descText);
HXLINE(  75)		{
HXLINE(  75)			int _g = 0;
HXDLIN(  75)			int _g1 = this->optionsArray->length;
HXDLIN(  75)			while((_g < _g1)){
HXLINE(  75)				_g = (_g + 1);
HXDLIN(  75)				int i = (_g - 1);
HXLINE(  77)				 ::objects::Alphabet optionText =  ::objects::Alphabet_obj::__alloc( HX_CTX ,( (Float)(290) ),( (Float)(260) ),this->optionsArray->__get(i).StaticCast<  ::options::Option >()->name,false);
HXLINE(  78)				optionText->isMenuItem = true;
HXLINE(  81)				optionText->targetY = i;
HXLINE(  82)				this->grpOptions->add(optionText).StaticCast<  ::objects::Alphabet >();
HXLINE(  84)				if ((this->optionsArray->__get(i).StaticCast<  ::options::Option >()->get_type() == HX_("bool",2a,84,1b,41))) {
HXLINE(  86)					Float checkbox = (optionText->x - ( (Float)(105) ));
HXDLIN(  86)					Float optionText1 = optionText->y;
HXDLIN(  86)					 ::objects::CheckboxThingie checkbox1 =  ::objects::CheckboxThingie_obj::__alloc( HX_CTX ,checkbox,optionText1,(::Std_obj::string(this->optionsArray->__get(i).StaticCast<  ::options::Option >()->getValue()) == HX_("true",4e,a7,03,4d)));
HXLINE(  87)					checkbox1->sprTracker = optionText;
HXLINE(  88)					checkbox1->ID = i;
HXLINE(  89)					this->checkboxGroup->add(checkbox1).StaticCast<  ::objects::CheckboxThingie >();
            				}
            				else {
HXLINE(  93)					optionText->set_x((optionText->x - ( (Float)(80) )));
HXLINE(  94)					optionText->startPosition->set_x((optionText->startPosition->x - ( (Float)(80) )));
HXLINE(  96)					::String valueText = (HX_("",00,00,00,00) + ::Std_obj::string(this->optionsArray->__get(i).StaticCast<  ::options::Option >()->getValue()));
HXDLIN(  96)					 ::objects::AttachedText valueText1 =  ::objects::AttachedText_obj::__alloc( HX_CTX ,valueText,(optionText->get_width() + 60),null(),null(),null());
HXLINE(  97)					valueText1->sprTracker = optionText;
HXLINE(  98)					valueText1->copyAlpha = true;
HXLINE(  99)					valueText1->ID = i;
HXLINE( 100)					this->grpTexts->add(valueText1).StaticCast<  ::objects::AttachedText >();
HXLINE( 101)					this->optionsArray->__get(i).StaticCast<  ::options::Option >()->child = valueText1;
            				}
HXLINE( 104)				this->updateTextFrom(this->optionsArray->__get(i).StaticCast<  ::options::Option >());
            			}
            		}
HXLINE( 107)		this->changeSelection(null());
HXLINE( 108)		this->reloadCheckboxes();
            	}

Dynamic BaseOptionsMenu_obj::__CreateEmpty() { return new BaseOptionsMenu_obj; }

void *BaseOptionsMenu_obj::_hx_vtable = 0;

Dynamic BaseOptionsMenu_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BaseOptionsMenu_obj > _hx_result = new BaseOptionsMenu_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BaseOptionsMenu_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5661ffbf) {
		if (inClassId<=(int)0x3c0818b8) {
			if (inClassId<=(int)0x0cc50116) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0cc50116;
			} else {
				return inClassId==(int)0x3c0818b8;
			}
		} else {
			return inClassId==(int)0x563293a6 || inClassId==(int)0x5661ffbf;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

 ::options::Option BaseOptionsMenu_obj::addOption( ::options::Option option){
            	HX_STACKFRAME(&_hx_pos_11861b212311743c_111_addOption)
HXLINE( 112)		bool _hx_tmp;
HXDLIN( 112)		if (::hx::IsNotNull( this->optionsArray )) {
HXLINE( 112)			_hx_tmp = (this->optionsArray->length < 1);
            		}
            		else {
HXLINE( 112)			_hx_tmp = true;
            		}
HXDLIN( 112)		if (_hx_tmp) {
HXLINE( 112)			this->optionsArray = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 113)		this->optionsArray->push(option);
HXLINE( 114)		return option;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseOptionsMenu_obj,addOption,return )

void BaseOptionsMenu_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_11861b212311743c_127_update)
HXLINE( 128)		this->super::update(elapsed);
HXLINE( 130)		if (this->bindingKey) {
HXLINE( 132)			this->bindingKeyUpdate(elapsed);
HXLINE( 133)			return;
            		}
HXLINE( 136)		if (::backend::Controls_obj::instance->get_UI_UP_P()) {
HXLINE( 138)			this->changeSelection(-1);
            		}
HXLINE( 140)		if (::backend::Controls_obj::instance->get_UI_DOWN_P()) {
HXLINE( 142)			this->changeSelection(1);
            		}
HXLINE( 145)		if (::backend::Controls_obj::instance->get_BACK()) {
HXLINE( 146)			this->close();
HXLINE( 147)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 147)			_hx_tmp->play(::backend::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
            		}
HXLINE( 150)		if ((this->nextAccept <= 0)) {
HXLINE( 152)			if ((this->curOption->get_type() == HX_("bool",2a,84,1b,41))) {
HXLINE( 154)				if (::backend::Controls_obj::instance->get_ACCEPT()) {
HXLINE( 156)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 156)					_hx_tmp1->play(::backend::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 157)					 ::Dynamic _hx_tmp2 = this->curOption->setValue;
HXDLIN( 157)					 ::Dynamic _hx_tmp3;
HXDLIN( 157)					if (::hx::IsEq( this->curOption->getValue(),true )) {
HXLINE( 157)						_hx_tmp3 = false;
            					}
            					else {
HXLINE( 157)						_hx_tmp3 = true;
            					}
HXDLIN( 157)					_hx_tmp2(_hx_tmp3);
HXLINE( 158)					this->curOption->change();
HXLINE( 159)					this->reloadCheckboxes();
            				}
            			}
            			else {
HXLINE( 164)				if ((this->curOption->get_type() == HX_("keybind",dc,3a,17,b0))) {
HXLINE( 166)					if (::backend::Controls_obj::instance->get_ACCEPT()) {
HXLINE( 168)						this->bindingBlack =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-1,null(),null());
HXLINE( 169)						{
HXLINE( 169)							 ::flixel::math::FlxBasePoint this1 = this->bindingBlack->scale;
HXDLIN( 169)							Float y = ( (Float)(::flixel::FlxG_obj::height) );
HXDLIN( 169)							this1->set_x(( (Float)(::flixel::FlxG_obj::width) ));
HXDLIN( 169)							this1->set_y(y);
            						}
HXLINE( 170)						this->bindingBlack->updateHitbox();
HXLINE( 171)						this->bindingBlack->set_alpha(( (Float)(0) ));
HXLINE( 172)						::flixel::tweens::FlxTween_obj::tween(this->bindingBlack, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)0.6))),((Float)0.35), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::linear_dyn())));
HXLINE( 173)						this->add(this->bindingBlack);
HXLINE( 175)						this->bindingText =  ::objects::Alphabet_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )),( (Float)(160) ),(HX_("Rebinding ",0e,24,c5,99) + this->curOption->name),false);
HXLINE( 176)						this->bindingText->set_alignment(::objects::Alignment_obj::CENTERED_dyn());
HXLINE( 177)						this->add(this->bindingText);
HXLINE( 179)						this->bindingText2 =  ::objects::Alphabet_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )),( (Float)(340) ),HX_("Hold ESC to Cancel\nHold Backspace to Delete",25,23,57,ab),true);
HXLINE( 180)						this->bindingText2->set_alignment(::objects::Alignment_obj::CENTERED_dyn());
HXLINE( 181)						this->add(this->bindingText2);
HXLINE( 183)						this->bindingKey = true;
HXLINE( 184)						this->holdingEsc = ( (Float)(0) );
HXLINE( 185)						::backend::ClientPrefs_obj::toggleVolumeKeys(false);
HXLINE( 186)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp4 = ::flixel::FlxG_obj::sound;
HXDLIN( 186)						_hx_tmp4->play(::backend::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
            					}
            				}
            				else {
HXLINE( 189)					bool _hx_tmp5;
HXDLIN( 189)					if (!(::backend::Controls_obj::instance->get_UI_LEFT())) {
HXLINE( 189)						_hx_tmp5 = ::backend::Controls_obj::instance->get_UI_RIGHT();
            					}
            					else {
HXLINE( 189)						_hx_tmp5 = true;
            					}
HXDLIN( 189)					if (_hx_tmp5) {
HXLINE( 191)						bool pressed;
HXDLIN( 191)						if (!(::backend::Controls_obj::instance->get_UI_LEFT_P())) {
HXLINE( 191)							pressed = ::backend::Controls_obj::instance->get_UI_RIGHT_P();
            						}
            						else {
HXLINE( 191)							pressed = true;
            						}
HXLINE( 192)						bool _hx_tmp6;
HXDLIN( 192)						if (!((this->holdTime > ((Float)0.5)))) {
HXLINE( 192)							_hx_tmp6 = pressed;
            						}
            						else {
HXLINE( 192)							_hx_tmp6 = true;
            						}
HXDLIN( 192)						if (_hx_tmp6) {
HXLINE( 194)							if (pressed) {
HXLINE( 196)								 ::Dynamic add = null();
HXLINE( 197)								if ((this->curOption->get_type() != HX_("string",d1,28,30,11))) {
HXLINE( 198)									if (::backend::Controls_obj::instance->get_UI_LEFT()) {
HXLINE( 198)										add = -(this->curOption->changeValue);
            									}
            									else {
HXLINE( 198)										add = this->curOption->changeValue;
            									}
            								}
HXLINE( 200)								::String _hx_switch_0 = this->curOption->get_type();
            								if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ||  (_hx_switch_0==HX_("int",ef,0c,50,00)) ||  (_hx_switch_0==HX_("percent",c5,aa,da,78)) ){
HXLINE( 203)									this->holdValue = ( (Float)((this->curOption->getValue() + add)) );
HXLINE( 204)									if (::hx::IsLess( this->holdValue,this->curOption->minValue )) {
HXLINE( 204)										this->holdValue = ( (Float)(this->curOption->minValue) );
            									}
            									else {
HXLINE( 205)										if (::hx::IsGreater( this->holdValue,this->curOption->maxValue )) {
HXLINE( 205)											this->holdValue = ( (Float)(this->curOption->maxValue) );
            										}
            									}
HXLINE( 207)									::String _hx_switch_1 = this->curOption->get_type();
            									if (  (_hx_switch_1==HX_("int",ef,0c,50,00)) ){
HXLINE( 210)										this->holdValue = ( (Float)(::Math_obj::round(this->holdValue)) );
HXLINE( 211)										this->curOption->setValue(this->holdValue);
HXLINE( 209)										goto _hx_goto_4;
            									}
            									if (  (_hx_switch_1==HX_("float",9c,c5,96,02)) ||  (_hx_switch_1==HX_("percent",c5,aa,da,78)) ){
HXLINE( 214)										this->holdValue = ::flixel::math::FlxMath_obj::roundDecimal(this->holdValue,this->curOption->decimals);
HXLINE( 215)										this->curOption->setValue(this->holdValue);
HXLINE( 213)										goto _hx_goto_4;
            									}
            									_hx_goto_4:;
HXLINE( 202)									goto _hx_goto_3;
            								}
            								if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE( 219)									int num = this->curOption->curOption;
HXLINE( 220)									if (::backend::Controls_obj::instance->get_UI_LEFT_P()) {
HXLINE( 220)										num = (num - 1);
            									}
            									else {
HXLINE( 221)										num = (num + 1);
            									}
HXLINE( 223)									if ((num < 0)) {
HXLINE( 224)										num = (this->curOption->options->length - 1);
            									}
            									else {
HXLINE( 225)										if ((num >= this->curOption->options->length)) {
HXLINE( 226)											num = 0;
            										}
            									}
HXLINE( 228)									this->curOption->curOption = num;
HXLINE( 229)									this->curOption->setValue(this->curOption->options->__get(num));
HXLINE( 218)									goto _hx_goto_3;
            								}
            								_hx_goto_3:;
HXLINE( 232)								this->updateTextFrom(this->curOption);
HXLINE( 233)								this->curOption->change();
HXLINE( 234)								 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp7 = ::flixel::FlxG_obj::sound;
HXDLIN( 234)								_hx_tmp7->play(::backend::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
            							}
            							else {
HXLINE( 236)								if ((this->curOption->get_type() != HX_("string",d1,28,30,11))) {
HXLINE( 238)									 ::options::BaseOptionsMenu _hx_tmp8 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 238)									Float _hx_tmp9 = _hx_tmp8->holdValue;
HXDLIN( 238)									Float _hx_tmp10 = (this->curOption->scrollSpeed * elapsed);
HXDLIN( 238)									int _hx_tmp11;
HXDLIN( 238)									if (::backend::Controls_obj::instance->get_UI_LEFT()) {
HXLINE( 238)										_hx_tmp11 = -1;
            									}
            									else {
HXLINE( 238)										_hx_tmp11 = 1;
            									}
HXDLIN( 238)									_hx_tmp8->holdValue = (_hx_tmp9 + (_hx_tmp10 * ( (Float)(_hx_tmp11) )));
HXLINE( 239)									if (::hx::IsLess( this->holdValue,this->curOption->minValue )) {
HXLINE( 239)										this->holdValue = ( (Float)(this->curOption->minValue) );
            									}
            									else {
HXLINE( 240)										if (::hx::IsGreater( this->holdValue,this->curOption->maxValue )) {
HXLINE( 240)											this->holdValue = ( (Float)(this->curOption->maxValue) );
            										}
            									}
HXLINE( 242)									::String _hx_switch_2 = this->curOption->get_type();
            									if (  (_hx_switch_2==HX_("int",ef,0c,50,00)) ){
HXLINE( 245)										this->curOption->setValue(::Math_obj::round(this->holdValue));
HXDLIN( 245)										goto _hx_goto_5;
            									}
            									if (  (_hx_switch_2==HX_("float",9c,c5,96,02)) ||  (_hx_switch_2==HX_("percent",c5,aa,da,78)) ){
HXLINE( 248)										 ::Dynamic _hx_tmp12 = this->curOption->setValue;
HXDLIN( 248)										_hx_tmp12(::flixel::math::FlxMath_obj::roundDecimal(this->holdValue,this->curOption->decimals));
HXDLIN( 248)										goto _hx_goto_5;
            									}
            									_hx_goto_5:;
HXLINE( 250)									this->updateTextFrom(this->curOption);
HXLINE( 251)									this->curOption->change();
            								}
            							}
            						}
HXLINE( 255)						if ((this->curOption->get_type() != HX_("string",d1,28,30,11))) {
HXLINE( 256)							 ::options::BaseOptionsMenu _hx_tmp13 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 256)							_hx_tmp13->holdTime = (_hx_tmp13->holdTime + elapsed);
            						}
            					}
            					else {
HXLINE( 258)						bool _hx_tmp14;
HXDLIN( 258)						if (!(::backend::Controls_obj::instance->get_UI_LEFT_R())) {
HXLINE( 258)							_hx_tmp14 = ::backend::Controls_obj::instance->get_UI_RIGHT_R();
            						}
            						else {
HXLINE( 258)							_hx_tmp14 = true;
            						}
HXDLIN( 258)						if (_hx_tmp14) {
HXLINE( 260)							if ((this->holdTime > ((Float)0.5))) {
HXLINE( 260)								 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp15 = ::flixel::FlxG_obj::sound;
HXDLIN( 260)								_hx_tmp15->play(::backend::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
            							}
HXLINE( 261)							this->holdTime = ( (Float)(0) );
            						}
            					}
            				}
            			}
HXLINE( 265)			if (::backend::Controls_obj::instance->get_RESET()) {
HXLINE( 267)				 ::options::Option leOption = this->optionsArray->__get(this->curSelected).StaticCast<  ::options::Option >();
HXLINE( 268)				if ((leOption->get_type() != HX_("keybind",dc,3a,17,b0))) {
HXLINE( 270)					leOption->setValue(leOption->defaultValue);
HXLINE( 271)					if ((leOption->get_type() != HX_("bool",2a,84,1b,41))) {
HXLINE( 273)						if ((leOption->get_type() == HX_("string",d1,28,30,11))) {
HXLINE( 273)							::Array< ::String > leOption1 = leOption->options;
HXDLIN( 273)							leOption->curOption = leOption1->indexOf(leOption->getValue(),null());
            						}
HXLINE( 274)						this->updateTextFrom(leOption);
            					}
            				}
            				else {
HXLINE( 279)					 ::Dynamic _hx_tmp16;
HXDLIN( 279)					if (!(::backend::Controls_obj::instance->controllerMode)) {
HXLINE( 279)						_hx_tmp16 =  ::Dynamic(leOption->defaultKeys->__Field(HX_("keyboard",a7,bc,29,68),::hx::paccDynamic));
            					}
            					else {
HXLINE( 279)						_hx_tmp16 =  ::Dynamic(leOption->defaultKeys->__Field(HX_("gamepad",a1,e0,85,89),::hx::paccDynamic));
            					}
HXDLIN( 279)					leOption->setValue(_hx_tmp16);
HXLINE( 280)					this->updateBind(null(),leOption);
            				}
HXLINE( 282)				leOption->change();
HXLINE( 283)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp17 = ::flixel::FlxG_obj::sound;
HXDLIN( 283)				_hx_tmp17->play(::backend::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
HXLINE( 284)				this->reloadCheckboxes();
            			}
            		}
HXLINE( 288)		if ((this->nextAccept > 0)) {
HXLINE( 289)			 ::options::BaseOptionsMenu _hx_tmp18 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 289)			_hx_tmp18->nextAccept = (_hx_tmp18->nextAccept - 1);
            		}
            	}


void BaseOptionsMenu_obj::bindingKeyUpdate(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_11861b212311743c_295_bindingKeyUpdate)
HXDLIN( 295)		bool _hx_tmp;
HXDLIN( 295)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 295)		if (!(_this->keyManager->checkStatusUnsafe(27,_this->status))) {
HXDLIN( 295)			_hx_tmp = ::flixel::FlxG_obj::gamepads->anyHasState(1,1);
            		}
            		else {
HXDLIN( 295)			_hx_tmp = true;
            		}
HXDLIN( 295)		if (_hx_tmp) {
HXLINE( 297)			 ::options::BaseOptionsMenu _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 297)			_hx_tmp1->holdingEsc = (_hx_tmp1->holdingEsc + elapsed);
HXLINE( 298)			if ((this->holdingEsc > ((Float)0.5))) {
HXLINE( 300)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN( 300)				_hx_tmp2->play(::backend::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
HXLINE( 301)				this->closeBinding();
            			}
            		}
            		else {
HXLINE( 304)			bool _hx_tmp3;
HXDLIN( 304)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 304)			if (!(_this1->keyManager->checkStatusUnsafe(8,_this1->status))) {
HXLINE( 304)				_hx_tmp3 = ::flixel::FlxG_obj::gamepads->anyHasState(6,1);
            			}
            			else {
HXLINE( 304)				_hx_tmp3 = true;
            			}
HXDLIN( 304)			if (_hx_tmp3) {
HXLINE( 306)				 ::options::BaseOptionsMenu _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 306)				_hx_tmp4->holdingEsc = (_hx_tmp4->holdingEsc + elapsed);
HXLINE( 307)				if ((this->holdingEsc > ((Float)0.5))) {
HXLINE( 309)					if (!(::backend::Controls_obj::instance->controllerMode)) {
HXLINE( 309)						::String _hx_tmp5 = ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::toStringMap->get_string(-1);
HXDLIN( 309)						this->curOption->keys->__SetField(HX_("keyboard",a7,bc,29,68),_hx_tmp5,::hx::paccDynamic);
            					}
            					else {
HXLINE( 310)						::String _hx_tmp6 = ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::toStringMap->get_string(-1);
HXDLIN( 310)						this->curOption->keys->__SetField(HX_("gamepad",a1,e0,85,89),_hx_tmp6,::hx::paccDynamic);
            					}
HXLINE( 311)					::String _hx_tmp7;
HXDLIN( 311)					if (!(::backend::Controls_obj::instance->controllerMode)) {
HXLINE( 311)						_hx_tmp7 = ::backend::InputFormatter_obj::getKeyName(-1);
            					}
            					else {
HXLINE( 311)						_hx_tmp7 = ::backend::InputFormatter_obj::getGamepadName(-1);
            					}
HXDLIN( 311)					this->updateBind(_hx_tmp7,null());
HXLINE( 312)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp8 = ::flixel::FlxG_obj::sound;
HXDLIN( 312)					_hx_tmp8->play(::backend::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
HXLINE( 313)					this->closeBinding();
            				}
            			}
            			else {
HXLINE( 318)				this->holdingEsc = ( (Float)(0) );
HXLINE( 319)				bool changed = false;
HXLINE( 320)				if (!(::backend::Controls_obj::instance->controllerMode)) {
HXLINE( 322)					bool _hx_tmp9;
HXDLIN( 322)					if (!(( ( ::flixel::input::FlxBaseKeyList)(::flixel::FlxG_obj::keys->justPressed) )->get_ANY())) {
HXLINE( 322)						_hx_tmp9 = ( ( ::flixel::input::FlxBaseKeyList)(::flixel::FlxG_obj::keys->justReleased) )->get_ANY();
            					}
            					else {
HXLINE( 322)						_hx_tmp9 = true;
            					}
HXDLIN( 322)					if (_hx_tmp9) {
HXLINE( 324)						int keyPressed = ::flixel::FlxG_obj::keys->firstJustPressed();
HXLINE( 325)						int keyReleased = ::flixel::FlxG_obj::keys->firstJustReleased();
HXLINE( 327)						bool _hx_tmp10;
HXDLIN( 327)						bool _hx_tmp11;
HXDLIN( 327)						if ((keyPressed != -1)) {
HXLINE( 327)							_hx_tmp11 = (keyPressed != 27);
            						}
            						else {
HXLINE( 327)							_hx_tmp11 = false;
            						}
HXDLIN( 327)						if (_hx_tmp11) {
HXLINE( 327)							_hx_tmp10 = (keyPressed != 8);
            						}
            						else {
HXLINE( 327)							_hx_tmp10 = false;
            						}
HXDLIN( 327)						if (_hx_tmp10) {
HXLINE( 329)							changed = true;
HXLINE( 330)							::String _hx_tmp12 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::toStringMap->get_string(keyPressed);
HXDLIN( 330)							this->curOption->keys->__SetField(HX_("keyboard",a7,bc,29,68),_hx_tmp12,::hx::paccDynamic);
            						}
            						else {
HXLINE( 332)							bool _hx_tmp13;
HXDLIN( 332)							if ((keyReleased != -1)) {
HXLINE( 332)								if ((keyReleased != 27)) {
HXLINE( 332)									_hx_tmp13 = (keyReleased == 8);
            								}
            								else {
HXLINE( 332)									_hx_tmp13 = true;
            								}
            							}
            							else {
HXLINE( 332)								_hx_tmp13 = false;
            							}
HXDLIN( 332)							if (_hx_tmp13) {
HXLINE( 334)								changed = true;
HXLINE( 335)								::String _hx_tmp14 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::toStringMap->get_string(keyReleased);
HXDLIN( 335)								this->curOption->keys->__SetField(HX_("keyboard",a7,bc,29,68),_hx_tmp14,::hx::paccDynamic);
            							}
            						}
            					}
            				}
            				else {
HXLINE( 339)					bool _hx_tmp15;
HXDLIN( 339)					bool _hx_tmp16;
HXDLIN( 339)					bool _hx_tmp17;
HXDLIN( 339)					if (!(::flixel::FlxG_obj::gamepads->anyHasState(-2,2))) {
HXLINE( 339)						_hx_tmp17 = ::flixel::FlxG_obj::gamepads->anyHasState(17,2);
            					}
            					else {
HXLINE( 339)						_hx_tmp17 = true;
            					}
HXDLIN( 339)					if (!(_hx_tmp17)) {
HXLINE( 339)						_hx_tmp16 = ::flixel::FlxG_obj::gamepads->anyHasState(18,2);
            					}
            					else {
HXLINE( 339)						_hx_tmp16 = true;
            					}
HXDLIN( 339)					if (!(_hx_tmp16)) {
HXLINE( 339)						_hx_tmp15 = ::flixel::FlxG_obj::gamepads->anyHasState(-2,-1);
            					}
            					else {
HXLINE( 339)						_hx_tmp15 = true;
            					}
HXDLIN( 339)					if (_hx_tmp15) {
HXLINE( 341)						int keyPressed1 = -1;
HXLINE( 342)						int keyReleased1 = -1;
HXLINE( 343)						if (::flixel::FlxG_obj::gamepads->anyHasState(17,2)) {
HXLINE( 344)							keyPressed1 = 17;
            						}
            						else {
HXLINE( 345)							if (::flixel::FlxG_obj::gamepads->anyHasState(18,2)) {
HXLINE( 346)								keyPressed1 = 18;
            							}
            							else {
HXLINE( 349)								int _g = 0;
HXDLIN( 349)								int _g1 = ::flixel::FlxG_obj::gamepads->get_numActiveGamepads();
HXDLIN( 349)								while((_g < _g1)){
HXLINE( 349)									_g = (_g + 1);
HXDLIN( 349)									int i = (_g - 1);
HXLINE( 351)									 ::flixel::input::gamepad::FlxGamepad gamepad = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(i).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE( 352)									if (::hx::IsNotNull( gamepad )) {
HXLINE( 354)										int id = gamepad->firstJustPressedRawID();
HXDLIN( 354)										int keyPressed2;
HXDLIN( 354)										if ((id < 0)) {
HXLINE( 354)											keyPressed2 = id;
            										}
            										else {
HXLINE( 354)											keyPressed2 = gamepad->mapping->getID(id);
            										}
HXDLIN( 354)										keyPressed1 = keyPressed2;
HXLINE( 355)										int id1 = gamepad->firstJustReleasedRawID();
HXDLIN( 355)										int keyReleased2;
HXDLIN( 355)										if ((id1 < 0)) {
HXLINE( 355)											keyReleased2 = id1;
            										}
            										else {
HXLINE( 355)											keyReleased2 = gamepad->mapping->getID(id1);
            										}
HXDLIN( 355)										keyReleased1 = keyReleased2;
HXLINE( 356)										bool _hx_tmp18;
HXDLIN( 356)										if ((keyPressed1 == -1)) {
HXLINE( 356)											_hx_tmp18 = (keyReleased1 != -1);
            										}
            										else {
HXLINE( 356)											_hx_tmp18 = true;
            										}
HXDLIN( 356)										if (_hx_tmp18) {
HXLINE( 356)											goto _hx_goto_7;
            										}
            									}
            								}
            								_hx_goto_7:;
            							}
            						}
HXLINE( 361)						bool _hx_tmp19;
HXDLIN( 361)						bool _hx_tmp20;
HXDLIN( 361)						if ((keyPressed1 != -1)) {
HXLINE( 361)							_hx_tmp20 = (keyPressed1 != 6);
            						}
            						else {
HXLINE( 361)							_hx_tmp20 = false;
            						}
HXDLIN( 361)						if (_hx_tmp20) {
HXLINE( 361)							_hx_tmp19 = (keyPressed1 != 1);
            						}
            						else {
HXLINE( 361)							_hx_tmp19 = false;
            						}
HXDLIN( 361)						if (_hx_tmp19) {
HXLINE( 363)							changed = true;
HXLINE( 364)							::String _hx_tmp21 = ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::toStringMap->get_string(keyPressed1);
HXDLIN( 364)							this->curOption->keys->__SetField(HX_("gamepad",a1,e0,85,89),_hx_tmp21,::hx::paccDynamic);
            						}
            						else {
HXLINE( 366)							bool _hx_tmp22;
HXDLIN( 366)							if ((keyReleased1 != -1)) {
HXLINE( 366)								if ((keyReleased1 != 6)) {
HXLINE( 366)									_hx_tmp22 = (keyReleased1 == 1);
            								}
            								else {
HXLINE( 366)									_hx_tmp22 = true;
            								}
            							}
            							else {
HXLINE( 366)								_hx_tmp22 = false;
            							}
HXDLIN( 366)							if (_hx_tmp22) {
HXLINE( 368)								changed = true;
HXLINE( 369)								::String _hx_tmp23 = ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::toStringMap->get_string(keyReleased1);
HXDLIN( 369)								this->curOption->keys->__SetField(HX_("gamepad",a1,e0,85,89),_hx_tmp23,::hx::paccDynamic);
            							}
            						}
            					}
            				}
HXLINE( 373)				if (changed) {
HXLINE( 375)					::String key = null();
HXLINE( 376)					if (!(::backend::Controls_obj::instance->controllerMode)) {
HXLINE( 378)						if (::hx::IsNull( this->curOption->keys->__Field(HX_("keyboard",a7,bc,29,68),::hx::paccDynamic) )) {
HXLINE( 378)							this->curOption->keys->__SetField(HX_("keyboard",a7,bc,29,68),HX_("NONE",b8,da,ca,33),::hx::paccDynamic);
            						}
HXLINE( 379)						this->curOption->setValue( ::Dynamic(this->curOption->keys->__Field(HX_("keyboard",a7,bc,29,68),::hx::paccDynamic)));
HXLINE( 380)						::String s = ( (::String)(this->curOption->keys->__Field(HX_("keyboard",a7,bc,29,68),::hx::paccDynamic)) );
HXDLIN( 380)						s = s.toUpperCase();
HXDLIN( 380)						int key1;
HXDLIN( 380)						if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s)) {
HXLINE( 380)							key1 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s);
            						}
            						else {
HXLINE( 380)							key1 = -1;
            						}
HXDLIN( 380)						key = ::backend::InputFormatter_obj::getKeyName(key1);
            					}
            					else {
HXLINE( 384)						if (::hx::IsNull( this->curOption->keys->__Field(HX_("gamepad",a1,e0,85,89),::hx::paccDynamic) )) {
HXLINE( 384)							this->curOption->keys->__SetField(HX_("gamepad",a1,e0,85,89),HX_("NONE",b8,da,ca,33),::hx::paccDynamic);
            						}
HXLINE( 385)						this->curOption->setValue( ::Dynamic(this->curOption->keys->__Field(HX_("gamepad",a1,e0,85,89),::hx::paccDynamic)));
HXLINE( 386)						::String s1 = ( (::String)(this->curOption->keys->__Field(HX_("gamepad",a1,e0,85,89),::hx::paccDynamic)) );
HXDLIN( 386)						s1 = s1.toUpperCase();
HXDLIN( 386)						int key2;
HXDLIN( 386)						if (::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->exists(s1)) {
HXLINE( 386)							key2 = ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->get_int(s1);
            						}
            						else {
HXLINE( 386)							key2 = -1;
            						}
HXDLIN( 386)						key = ::backend::InputFormatter_obj::getGamepadName(key2);
            					}
HXLINE( 388)					this->updateBind(key,null());
HXLINE( 389)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp24 = ::flixel::FlxG_obj::sound;
HXDLIN( 389)					_hx_tmp24->play(::backend::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),null(),null(),null(),null(),null());
HXLINE( 390)					this->closeBinding();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseOptionsMenu_obj,bindingKeyUpdate,(void))

void BaseOptionsMenu_obj::updateBind(::String text, ::options::Option option){
            	HX_GC_STACKFRAME(&_hx_pos_11861b212311743c_397_updateBind)
HXLINE( 398)		if (::hx::IsNull( option )) {
HXLINE( 398)			option = this->curOption;
            		}
HXLINE( 399)		if (::hx::IsNull( text )) {
HXLINE( 401)			text = ( (::String)(option->getValue()) );
HXLINE( 402)			if (::hx::IsNull( text )) {
HXLINE( 402)				text = HX_("NONE",b8,da,ca,33);
            			}
HXLINE( 404)			if (!(::backend::Controls_obj::instance->controllerMode)) {
HXLINE( 405)				::String s = text;
HXDLIN( 405)				s = s.toUpperCase();
HXDLIN( 405)				int text1;
HXDLIN( 405)				if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s)) {
HXLINE( 405)					text1 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s);
            				}
            				else {
HXLINE( 405)					text1 = -1;
            				}
HXDLIN( 405)				text = ::backend::InputFormatter_obj::getKeyName(text1);
            			}
            			else {
HXLINE( 407)				::String s1 = text;
HXDLIN( 407)				s1 = s1.toUpperCase();
HXDLIN( 407)				int text2;
HXDLIN( 407)				if (::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->exists(s1)) {
HXLINE( 407)					text2 = ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->get_int(s1);
            				}
            				else {
HXLINE( 407)					text2 = -1;
            				}
HXDLIN( 407)				text = ::backend::InputFormatter_obj::getGamepadName(text2);
            			}
            		}
HXLINE( 410)		 ::objects::AttachedText bind = ( ( ::objects::AttachedText)(option->child) );
HXLINE( 411)		 ::objects::AttachedText attach =  ::objects::AttachedText_obj::__alloc( HX_CTX ,text,bind->offsetX,null(),null(),null());
HXLINE( 412)		attach->sprTracker = bind->sprTracker;
HXLINE( 413)		attach->copyAlpha = true;
HXLINE( 414)		attach->ID = bind->ID;
HXLINE( 415)		this->playstationCheck(attach);
HXLINE( 416)		int _hx_tmp = this->MAX_KEYBIND_WIDTH;
HXDLIN( 416)		attach->set_scaleX(::Math_obj::min(( (Float)(1) ),(( (Float)(_hx_tmp) ) / attach->get_width())));
HXLINE( 417)		attach->set_x(bind->x);
HXLINE( 418)		attach->set_y(bind->y);
HXLINE( 420)		option->child = attach;
HXLINE( 421)		 ::flixel::group::FlxTypedGroup _hx_tmp1 = this->grpTexts;
HXDLIN( 421)		_hx_tmp1->insert(this->grpTexts->members->indexOf(bind,null()),attach).StaticCast<  ::objects::AttachedText >();
HXLINE( 422)		this->grpTexts->remove(bind,null()).StaticCast<  ::objects::AttachedText >();
HXLINE( 423)		bind->destroy();
            	}


HX_DEFINE_DYNAMIC_FUNC2(BaseOptionsMenu_obj,updateBind,(void))

void BaseOptionsMenu_obj::playstationCheck( ::objects::Alphabet alpha){
            	HX_STACKFRAME(&_hx_pos_11861b212311743c_427_playstationCheck)
HXLINE( 428)		if (!(::backend::Controls_obj::instance->controllerMode)) {
HXLINE( 428)			return;
            		}
HXLINE( 430)		 ::flixel::input::gamepad::FlxGamepad gamepad = ::flixel::FlxG_obj::gamepads->firstActive;
HXLINE( 431)		 ::flixel::input::gamepad::FlxGamepadModel model;
HXDLIN( 431)		if (::hx::IsNotNull( gamepad )) {
HXLINE( 431)			model = gamepad->detectedModel;
            		}
            		else {
HXLINE( 431)			model = ::flixel::input::gamepad::FlxGamepadModel_obj::UNKNOWN_dyn();
            		}
HXLINE( 432)		 ::objects::AlphaCharacter letter = alpha->letters->__get(0).StaticCast<  ::objects::AlphaCharacter >();
HXLINE( 433)		if (::hx::IsPointerEq( model,::flixel::input::gamepad::FlxGamepadModel_obj::PS4_dyn() )) {
HXLINE( 435)			::String _hx_switch_0 = alpha->text;
            			if (  (_hx_switch_0==HX_("[",5b,00,00,00)) ||  (_hx_switch_0==HX_("]",5d,00,00,00)) ){
HXLINE( 438)				letter->set_image(HX_("alphabet_playstation",34,6a,13,2b));
HXLINE( 439)				letter->updateHitbox();
HXLINE( 441)				letter->offset->set_x((letter->offset->x + 4));
HXLINE( 442)				letter->offset->set_y((letter->offset->y - ( (Float)(5) )));
HXLINE( 437)				goto _hx_goto_10;
            			}
            			_hx_goto_10:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseOptionsMenu_obj,playstationCheck,(void))

void BaseOptionsMenu_obj::closeBinding(){
            	HX_STACKFRAME(&_hx_pos_11861b212311743c_448_closeBinding)
HXLINE( 449)		this->bindingKey = false;
HXLINE( 450)		this->bindingBlack->destroy();
HXLINE( 451)		this->remove(this->bindingBlack,null());
HXLINE( 453)		this->bindingText->destroy();
HXLINE( 454)		this->remove(this->bindingText,null());
HXLINE( 456)		this->bindingText2->destroy();
HXLINE( 457)		this->remove(this->bindingText2,null());
HXLINE( 458)		::backend::ClientPrefs_obj::toggleVolumeKeys(true);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseOptionsMenu_obj,closeBinding,(void))

void BaseOptionsMenu_obj::updateTextFrom( ::options::Option option){
            	HX_STACKFRAME(&_hx_pos_11861b212311743c_461_updateTextFrom)
HXLINE( 462)		if ((option->get_type() == HX_("keybind",dc,3a,17,b0))) {
HXLINE( 464)			this->updateBind(null(),option);
HXLINE( 465)			return;
            		}
HXLINE( 468)		::String text = option->displayFormat;
HXLINE( 469)		 ::Dynamic val = option->getValue();
HXLINE( 470)		if ((option->get_type() == HX_("percent",c5,aa,da,78))) {
HXLINE( 470)			val = (val * 100);
            		}
HXLINE( 471)		 ::Dynamic def = option->defaultValue;
HXLINE( 472)		option->set_text(::StringTools_obj::replace(::StringTools_obj::replace(text,HX_("%v",b1,20,00,00),( (::String)(val) )),HX_("%d",9f,20,00,00),( (::String)(def) )));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseOptionsMenu_obj,updateTextFrom,(void))

void BaseOptionsMenu_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_11861b212311743c_476_changeSelection)
HXLINE( 477)		 ::options::BaseOptionsMenu _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 477)		_hx_tmp->curSelected = (_hx_tmp->curSelected + change);
HXLINE( 478)		if ((this->curSelected < 0)) {
HXLINE( 479)			this->curSelected = (this->optionsArray->length - 1);
            		}
            		else {
HXLINE( 480)			if ((this->curSelected >= this->optionsArray->length)) {
HXLINE( 481)				this->curSelected = 0;
            			}
            		}
HXLINE( 483)		this->descText->set_text(this->optionsArray->__get(this->curSelected).StaticCast<  ::options::Option >()->description);
HXLINE( 484)		{
HXLINE( 484)			 ::flixel::text::FlxText _this = this->descText;
HXDLIN( 484)			int axes = 16;
HXDLIN( 484)			bool _hx_tmp1;
HXDLIN( 484)			if ((axes != 1)) {
HXLINE( 484)				_hx_tmp1 = (axes == 17);
            			}
            			else {
HXLINE( 484)				_hx_tmp1 = true;
            			}
HXDLIN( 484)			if (_hx_tmp1) {
HXLINE( 484)				int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN( 484)				_this->set_x(((( (Float)(_hx_tmp2) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 484)			bool _hx_tmp3;
HXDLIN( 484)			if ((axes != 16)) {
HXLINE( 484)				_hx_tmp3 = (axes == 17);
            			}
            			else {
HXLINE( 484)				_hx_tmp3 = true;
            			}
HXDLIN( 484)			if (_hx_tmp3) {
HXLINE( 484)				int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN( 484)				_this->set_y(((( (Float)(_hx_tmp4) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 485)		 ::flixel::text::FlxText fh = this->descText;
HXDLIN( 485)		fh->set_y((fh->y + 270));
HXLINE( 487)		int bullShit = 0;
HXLINE( 489)		{
HXLINE( 489)			int _g = 0;
HXDLIN( 489)			::Array< ::Dynamic> _g1 = this->grpOptions->members;
HXDLIN( 489)			while((_g < _g1->length)){
HXLINE( 489)				 ::objects::Alphabet item = _g1->__get(_g).StaticCast<  ::objects::Alphabet >();
HXDLIN( 489)				_g = (_g + 1);
HXLINE( 491)				item->targetY = (bullShit - this->curSelected);
HXLINE( 492)				bullShit = (bullShit + 1);
HXLINE( 494)				item->set_alpha(((Float)0.6));
HXLINE( 495)				if ((item->targetY == 0)) {
HXLINE( 495)					item->set_alpha(( (Float)(1) ));
            				}
            			}
            		}
HXLINE( 497)		{
HXLINE( 497)			 ::Dynamic filter = null();
HXDLIN( 497)			 ::flixel::group::FlxTypedGroupIterator text =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->grpTexts->members,filter);
HXDLIN( 497)			while(text->hasNext()){
HXLINE( 497)				 ::objects::AttachedText text1 = text->next().StaticCast<  ::objects::AttachedText >();
HXLINE( 499)				text1->set_alpha(((Float)0.6));
HXLINE( 500)				if ((text1->ID == this->curSelected)) {
HXLINE( 500)					text1->set_alpha(( (Float)(1) ));
            				}
            			}
            		}
HXLINE( 503)		this->descBox->setPosition((this->descText->x - ( (Float)(10) )),(this->descText->y - ( (Float)(10) )));
HXLINE( 504)		 ::flixel::FlxSprite _hx_tmp5 = this->descBox;
HXDLIN( 504)		int _hx_tmp6 = ::Std_obj::_hx_int((this->descText->get_width() + 20));
HXDLIN( 504)		_hx_tmp5->setGraphicSize(_hx_tmp6,::Std_obj::_hx_int((this->descText->get_height() + 25)));
HXLINE( 505)		this->descBox->updateHitbox();
HXLINE( 507)		this->curOption = this->optionsArray->__get(this->curSelected).StaticCast<  ::options::Option >();
HXLINE( 508)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp7 = ::flixel::FlxG_obj::sound;
HXDLIN( 508)		_hx_tmp7->play(::backend::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseOptionsMenu_obj,changeSelection,(void))

void BaseOptionsMenu_obj::reloadCheckboxes(){
            	HX_GC_STACKFRAME(&_hx_pos_11861b212311743c_512_reloadCheckboxes)
HXDLIN( 512)		 ::Dynamic filter = null();
HXDLIN( 512)		 ::flixel::group::FlxTypedGroupIterator checkbox =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->checkboxGroup->members,filter);
HXDLIN( 512)		while(checkbox->hasNext()){
HXDLIN( 512)			 ::objects::CheckboxThingie checkbox1 = checkbox->next().StaticCast<  ::objects::CheckboxThingie >();
HXLINE( 513)			checkbox1->set_daValue((::Std_obj::string(this->optionsArray->__get(checkbox1->ID).StaticCast<  ::options::Option >()->getValue()) == HX_("true",4e,a7,03,4d)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseOptionsMenu_obj,reloadCheckboxes,(void))


::hx::ObjectPtr< BaseOptionsMenu_obj > BaseOptionsMenu_obj::__new() {
	::hx::ObjectPtr< BaseOptionsMenu_obj > __this = new BaseOptionsMenu_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BaseOptionsMenu_obj > BaseOptionsMenu_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BaseOptionsMenu_obj *__this = (BaseOptionsMenu_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BaseOptionsMenu_obj), true, "options.BaseOptionsMenu"));
	*(void **)__this = BaseOptionsMenu_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BaseOptionsMenu_obj::BaseOptionsMenu_obj()
{
}

void BaseOptionsMenu_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BaseOptionsMenu);
	HX_MARK_MEMBER_NAME(curOption,"curOption");
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(optionsArray,"optionsArray");
	HX_MARK_MEMBER_NAME(grpOptions,"grpOptions");
	HX_MARK_MEMBER_NAME(checkboxGroup,"checkboxGroup");
	HX_MARK_MEMBER_NAME(grpTexts,"grpTexts");
	HX_MARK_MEMBER_NAME(descBox,"descBox");
	HX_MARK_MEMBER_NAME(descText,"descText");
	HX_MARK_MEMBER_NAME(title,"title");
	HX_MARK_MEMBER_NAME(rpcTitle,"rpcTitle");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(nextAccept,"nextAccept");
	HX_MARK_MEMBER_NAME(holdTime,"holdTime");
	HX_MARK_MEMBER_NAME(holdValue,"holdValue");
	HX_MARK_MEMBER_NAME(bindingKey,"bindingKey");
	HX_MARK_MEMBER_NAME(holdingEsc,"holdingEsc");
	HX_MARK_MEMBER_NAME(bindingBlack,"bindingBlack");
	HX_MARK_MEMBER_NAME(bindingText,"bindingText");
	HX_MARK_MEMBER_NAME(bindingText2,"bindingText2");
	HX_MARK_MEMBER_NAME(MAX_KEYBIND_WIDTH,"MAX_KEYBIND_WIDTH");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BaseOptionsMenu_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(curOption,"curOption");
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(optionsArray,"optionsArray");
	HX_VISIT_MEMBER_NAME(grpOptions,"grpOptions");
	HX_VISIT_MEMBER_NAME(checkboxGroup,"checkboxGroup");
	HX_VISIT_MEMBER_NAME(grpTexts,"grpTexts");
	HX_VISIT_MEMBER_NAME(descBox,"descBox");
	HX_VISIT_MEMBER_NAME(descText,"descText");
	HX_VISIT_MEMBER_NAME(title,"title");
	HX_VISIT_MEMBER_NAME(rpcTitle,"rpcTitle");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(nextAccept,"nextAccept");
	HX_VISIT_MEMBER_NAME(holdTime,"holdTime");
	HX_VISIT_MEMBER_NAME(holdValue,"holdValue");
	HX_VISIT_MEMBER_NAME(bindingKey,"bindingKey");
	HX_VISIT_MEMBER_NAME(holdingEsc,"holdingEsc");
	HX_VISIT_MEMBER_NAME(bindingBlack,"bindingBlack");
	HX_VISIT_MEMBER_NAME(bindingText,"bindingText");
	HX_VISIT_MEMBER_NAME(bindingText2,"bindingText2");
	HX_VISIT_MEMBER_NAME(MAX_KEYBIND_WIDTH,"MAX_KEYBIND_WIDTH");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val BaseOptionsMenu_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"title") ) { return ::hx::Val( title ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"descBox") ) { return ::hx::Val( descBox ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"grpTexts") ) { return ::hx::Val( grpTexts ); }
		if (HX_FIELD_EQ(inName,"descText") ) { return ::hx::Val( descText ); }
		if (HX_FIELD_EQ(inName,"rpcTitle") ) { return ::hx::Val( rpcTitle ); }
		if (HX_FIELD_EQ(inName,"holdTime") ) { return ::hx::Val( holdTime ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"curOption") ) { return ::hx::Val( curOption ); }
		if (HX_FIELD_EQ(inName,"addOption") ) { return ::hx::Val( addOption_dyn() ); }
		if (HX_FIELD_EQ(inName,"holdValue") ) { return ::hx::Val( holdValue ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpOptions") ) { return ::hx::Val( grpOptions ); }
		if (HX_FIELD_EQ(inName,"nextAccept") ) { return ::hx::Val( nextAccept ); }
		if (HX_FIELD_EQ(inName,"bindingKey") ) { return ::hx::Val( bindingKey ); }
		if (HX_FIELD_EQ(inName,"holdingEsc") ) { return ::hx::Val( holdingEsc ); }
		if (HX_FIELD_EQ(inName,"updateBind") ) { return ::hx::Val( updateBind_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		if (HX_FIELD_EQ(inName,"bindingText") ) { return ::hx::Val( bindingText ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"optionsArray") ) { return ::hx::Val( optionsArray ); }
		if (HX_FIELD_EQ(inName,"bindingBlack") ) { return ::hx::Val( bindingBlack ); }
		if (HX_FIELD_EQ(inName,"bindingText2") ) { return ::hx::Val( bindingText2 ); }
		if (HX_FIELD_EQ(inName,"closeBinding") ) { return ::hx::Val( closeBinding_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"checkboxGroup") ) { return ::hx::Val( checkboxGroup ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updateTextFrom") ) { return ::hx::Val( updateTextFrom_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"bindingKeyUpdate") ) { return ::hx::Val( bindingKeyUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"playstationCheck") ) { return ::hx::Val( playstationCheck_dyn() ); }
		if (HX_FIELD_EQ(inName,"reloadCheckboxes") ) { return ::hx::Val( reloadCheckboxes_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"MAX_KEYBIND_WIDTH") ) { return ::hx::Val( MAX_KEYBIND_WIDTH ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BaseOptionsMenu_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"title") ) { title=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"descBox") ) { descBox=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"grpTexts") ) { grpTexts=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"descText") ) { descText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rpcTitle") ) { rpcTitle=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holdTime") ) { holdTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"curOption") ) { curOption=inValue.Cast<  ::options::Option >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holdValue") ) { holdValue=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpOptions") ) { grpOptions=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nextAccept") ) { nextAccept=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bindingKey") ) { bindingKey=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holdingEsc") ) { holdingEsc=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bindingText") ) { bindingText=inValue.Cast<  ::objects::Alphabet >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"optionsArray") ) { optionsArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bindingBlack") ) { bindingBlack=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bindingText2") ) { bindingText2=inValue.Cast<  ::objects::Alphabet >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"checkboxGroup") ) { checkboxGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"MAX_KEYBIND_WIDTH") ) { MAX_KEYBIND_WIDTH=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BaseOptionsMenu_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("curOption",15,ed,07,9c));
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("optionsArray",5b,b5,f1,e8));
	outFields->push(HX_("grpOptions",f9,45,d8,00));
	outFields->push(HX_("checkboxGroup",fc,3d,bc,23));
	outFields->push(HX_("grpTexts",01,f1,99,f0));
	outFields->push(HX_("descBox",3a,20,25,19));
	outFields->push(HX_("descText",9e,53,35,f3));
	outFields->push(HX_("title",98,15,3b,10));
	outFields->push(HX_("rpcTitle",73,04,98,e2));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("nextAccept",5b,44,38,c0));
	outFields->push(HX_("holdTime",ec,cc,bf,3e));
	outFields->push(HX_("holdValue",b2,41,96,ca));
	outFields->push(HX_("bindingKey",5a,4f,70,89));
	outFields->push(HX_("holdingEsc",f2,2e,6e,8a));
	outFields->push(HX_("bindingBlack",3a,c0,99,d7));
	outFields->push(HX_("bindingText",92,0a,c8,be));
	outFields->push(HX_("bindingText2",60,35,41,30));
	outFields->push(HX_("MAX_KEYBIND_WIDTH",a8,6e,06,d8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BaseOptionsMenu_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::options::Option */ ,(int)offsetof(BaseOptionsMenu_obj,curOption),HX_("curOption",15,ed,07,9c)},
	{::hx::fsInt,(int)offsetof(BaseOptionsMenu_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(BaseOptionsMenu_obj,optionsArray),HX_("optionsArray",5b,b5,f1,e8)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(BaseOptionsMenu_obj,grpOptions),HX_("grpOptions",f9,45,d8,00)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(BaseOptionsMenu_obj,checkboxGroup),HX_("checkboxGroup",fc,3d,bc,23)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(BaseOptionsMenu_obj,grpTexts),HX_("grpTexts",01,f1,99,f0)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(BaseOptionsMenu_obj,descBox),HX_("descBox",3a,20,25,19)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(BaseOptionsMenu_obj,descText),HX_("descText",9e,53,35,f3)},
	{::hx::fsString,(int)offsetof(BaseOptionsMenu_obj,title),HX_("title",98,15,3b,10)},
	{::hx::fsString,(int)offsetof(BaseOptionsMenu_obj,rpcTitle),HX_("rpcTitle",73,04,98,e2)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(BaseOptionsMenu_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsInt,(int)offsetof(BaseOptionsMenu_obj,nextAccept),HX_("nextAccept",5b,44,38,c0)},
	{::hx::fsFloat,(int)offsetof(BaseOptionsMenu_obj,holdTime),HX_("holdTime",ec,cc,bf,3e)},
	{::hx::fsFloat,(int)offsetof(BaseOptionsMenu_obj,holdValue),HX_("holdValue",b2,41,96,ca)},
	{::hx::fsBool,(int)offsetof(BaseOptionsMenu_obj,bindingKey),HX_("bindingKey",5a,4f,70,89)},
	{::hx::fsFloat,(int)offsetof(BaseOptionsMenu_obj,holdingEsc),HX_("holdingEsc",f2,2e,6e,8a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(BaseOptionsMenu_obj,bindingBlack),HX_("bindingBlack",3a,c0,99,d7)},
	{::hx::fsObject /*  ::objects::Alphabet */ ,(int)offsetof(BaseOptionsMenu_obj,bindingText),HX_("bindingText",92,0a,c8,be)},
	{::hx::fsObject /*  ::objects::Alphabet */ ,(int)offsetof(BaseOptionsMenu_obj,bindingText2),HX_("bindingText2",60,35,41,30)},
	{::hx::fsInt,(int)offsetof(BaseOptionsMenu_obj,MAX_KEYBIND_WIDTH),HX_("MAX_KEYBIND_WIDTH",a8,6e,06,d8)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BaseOptionsMenu_obj_sStaticStorageInfo = 0;
#endif

static ::String BaseOptionsMenu_obj_sMemberFields[] = {
	HX_("curOption",15,ed,07,9c),
	HX_("curSelected",fb,eb,ab,32),
	HX_("optionsArray",5b,b5,f1,e8),
	HX_("grpOptions",f9,45,d8,00),
	HX_("checkboxGroup",fc,3d,bc,23),
	HX_("grpTexts",01,f1,99,f0),
	HX_("descBox",3a,20,25,19),
	HX_("descText",9e,53,35,f3),
	HX_("title",98,15,3b,10),
	HX_("rpcTitle",73,04,98,e2),
	HX_("bg",c5,55,00,00),
	HX_("addOption",76,08,9f,e3),
	HX_("nextAccept",5b,44,38,c0),
	HX_("holdTime",ec,cc,bf,3e),
	HX_("holdValue",b2,41,96,ca),
	HX_("bindingKey",5a,4f,70,89),
	HX_("holdingEsc",f2,2e,6e,8a),
	HX_("bindingBlack",3a,c0,99,d7),
	HX_("bindingText",92,0a,c8,be),
	HX_("bindingText2",60,35,41,30),
	HX_("update",09,86,05,87),
	HX_("bindingKeyUpdate",03,49,3b,b7),
	HX_("MAX_KEYBIND_WIDTH",a8,6e,06,d8),
	HX_("updateBind",66,e0,cb,f9),
	HX_("playstationCheck",a8,29,e8,6b),
	HX_("closeBinding",6d,82,fe,ca),
	HX_("updateTextFrom",e0,eb,e7,7b),
	HX_("changeSelection",bc,98,b5,48),
	HX_("reloadCheckboxes",2a,e2,2a,45),
	::String(null()) };

::hx::Class BaseOptionsMenu_obj::__mClass;

void BaseOptionsMenu_obj::__register()
{
	BaseOptionsMenu_obj _hx_dummy;
	BaseOptionsMenu_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("options.BaseOptionsMenu",5c,5e,30,7f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BaseOptionsMenu_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BaseOptionsMenu_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BaseOptionsMenu_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BaseOptionsMenu_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace options
