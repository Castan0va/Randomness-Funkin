// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_objects_MusicPlayer
#include <objects/MusicPlayer.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_states_FreeplayState
#include <states/FreeplayState.h>
#endif
#ifndef INCLUDED_states_SongMetadata
#include <states/SongMetadata.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c56a0156c6377e6f_13_new,"objects.MusicPlayer","new",0x136c021e,"objects.MusicPlayer.new","objects/MusicPlayer.hx",13,0x1ff9cad3)
HX_LOCAL_STACK_FRAME(_hx_pos_c56a0156c6377e6f_84_update,"objects.MusicPlayer","update",0x53f87f0b,"objects.MusicPlayer.update","objects/MusicPlayer.hx",84,0x1ff9cad3)
HX_LOCAL_STACK_FRAME(_hx_pos_c56a0156c6377e6f_216_pauseOrResume,"objects.MusicPlayer","pauseOrResume",0x6f04bf84,"objects.MusicPlayer.pauseOrResume","objects/MusicPlayer.hx",216,0x1ff9cad3)
HX_LOCAL_STACK_FRAME(_hx_pos_c56a0156c6377e6f_235_switchPlayMusic,"objects.MusicPlayer","switchPlayMusic",0x8d9c8c3b,"objects.MusicPlayer.switchPlayMusic","objects/MusicPlayer.hx",235,0x1ff9cad3)
HX_LOCAL_STACK_FRAME(_hx_pos_c56a0156c6377e6f_274_updatePlaybackTxt,"objects.MusicPlayer","updatePlaybackTxt",0xe05b45ca,"objects.MusicPlayer.updatePlaybackTxt","objects/MusicPlayer.hx",274,0x1ff9cad3)
HX_LOCAL_STACK_FRAME(_hx_pos_c56a0156c6377e6f_290_positionSong,"objects.MusicPlayer","positionSong",0x34d29fa0,"objects.MusicPlayer.positionSong","objects/MusicPlayer.hx",290,0x1ff9cad3)
HX_LOCAL_STACK_FRAME(_hx_pos_c56a0156c6377e6f_335_updateTimeTxt,"objects.MusicPlayer","updateTimeTxt",0xbd041098,"objects.MusicPlayer.updateTimeTxt","objects/MusicPlayer.hx",335,0x1ff9cad3)
HX_LOCAL_STACK_FRAME(_hx_pos_c56a0156c6377e6f_341_setPlaybackRate,"objects.MusicPlayer","setPlaybackRate",0xd33be41b,"objects.MusicPlayer.setPlaybackRate","objects/MusicPlayer.hx",341,0x1ff9cad3)
HX_LOCAL_STACK_FRAME(_hx_pos_c56a0156c6377e6f_349_get_playing,"objects.MusicPlayer","get_playing",0xbf6f8f43,"objects.MusicPlayer.get_playing","objects/MusicPlayer.hx",349,0x1ff9cad3)
HX_LOCAL_STACK_FRAME(_hx_pos_c56a0156c6377e6f_354_get_paused,"objects.MusicPlayer","get_paused",0xfb3c5279,"objects.MusicPlayer.get_paused","objects/MusicPlayer.hx",354,0x1ff9cad3)
HX_LOCAL_STACK_FRAME(_hx_pos_c56a0156c6377e6f_358_set_playbackRate,"objects.MusicPlayer","set_playbackRate",0xa2ed241a,"objects.MusicPlayer.set_playbackRate","objects/MusicPlayer.hx",358,0x1ff9cad3)
namespace objects{

void MusicPlayer_obj::__construct( ::states::FreeplayState instance){
            	HX_GC_STACKFRAME(&_hx_pos_c56a0156c6377e6f_13_new)
HXLINE(  34)		this->playbackRate = ((Float)1);
HXLINE(  33)		this->holdPitchTime = ((Float)0);
HXLINE(  28)		this->playbackSymbols = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  20)		this->playingMusic = false;
HXLINE(  38)		super::__construct(null());
HXLINE(  40)		this->instance = instance;
HXLINE(  42)		Float xPos = (( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.7));
HXLINE(  44)		this->songBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(xPos - ( (Float)(6) )),0,null())->makeGraphic(1,100,-16777216,null(),null());
HXLINE(  45)		this->songBG->set_alpha(((Float)0.6));
HXLINE(  46)		this->add(this->songBG);
HXLINE(  48)		this->playbackBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(xPos - ( (Float)(6) )),0,null())->makeGraphic(1,100,-16777216,null(),null());
HXLINE(  49)		this->playbackBG->set_alpha(((Float)0.6));
HXLINE(  50)		this->add(this->playbackBG);
HXLINE(  52)		this->songTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.7)),5,0,HX_("",00,00,00,00),32,null());
HXLINE(  53)		 ::flixel::text::FlxText _hx_tmp = this->songTxt;
HXDLIN(  53)		::String file = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN(  53)		::String _hx_tmp1;
HXDLIN(  53)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE(  53)			_hx_tmp1 = file;
            		}
            		else {
HXLINE(  53)			_hx_tmp1 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN(  53)		_hx_tmp->setFormat(_hx_tmp1,32,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE(  54)		this->add(this->songTxt);
HXLINE(  56)		this->timeTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,xPos,(this->songTxt->y + 60),0,HX_("",00,00,00,00),32,null());
HXLINE(  57)		 ::flixel::text::FlxText _hx_tmp2 = this->timeTxt;
HXDLIN(  57)		::String file1 = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN(  57)		::String _hx_tmp3;
HXDLIN(  57)		if (::sys::FileSystem_obj::exists(file1)) {
HXLINE(  57)			_hx_tmp3 = file1;
            		}
            		else {
HXLINE(  57)			_hx_tmp3 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN(  57)		_hx_tmp2->setFormat(_hx_tmp3,32,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE(  58)		this->add(this->timeTxt);
HXLINE(  60)		{
HXLINE(  60)			int _g = 0;
HXDLIN(  60)			while((_g < 2)){
HXLINE(  60)				_g = (_g + 1);
HXDLIN(  60)				int i = (_g - 1);
HXLINE(  62)				 ::flixel::text::FlxText text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  63)				::String file2 = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN(  63)				::String _hx_tmp4;
HXDLIN(  63)				if (::sys::FileSystem_obj::exists(file2)) {
HXLINE(  63)					_hx_tmp4 = file2;
            				}
            				else {
HXLINE(  63)					_hx_tmp4 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            				}
HXDLIN(  63)				text->setFormat(_hx_tmp4,32,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  64)				text->set_text(HX_("^",5e,00,00,00));
HXLINE(  65)				if ((i == 1)) {
HXLINE(  66)					text->set_flipY(true);
            				}
HXLINE(  67)				text->set_visible(false);
HXLINE(  68)				this->playbackSymbols->push(text);
HXLINE(  69)				this->add(text);
            			}
            		}
HXLINE(  72)		Float _hx_tmp5 = this->timeTxt->x;
HXDLIN(  72)		Float _hx_tmp6 = this->timeTxt->y;
HXDLIN(  72)		Float _hx_tmp7 = (_hx_tmp6 + this->timeTxt->get_height());
HXDLIN(  72)		int _hx_tmp8 = ::Std_obj::_hx_int(this->timeTxt->get_width());
HXDLIN(  72)		this->progressBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp5,_hx_tmp7,::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn(),_hx_tmp8,8,null(),HX_("",00,00,00,00),0,::Math_obj::POSITIVE_INFINITY,null());
HXLINE(  73)		this->progressBar->createFilledBar(-1,-16777216,null(),null());
HXLINE(  74)		this->add(this->progressBar);
HXLINE(  76)		this->playbackTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.6)),20,0,HX_("",00,00,00,00),32,null());
HXLINE(  77)		 ::flixel::text::FlxText _hx_tmp9 = this->playbackTxt;
HXDLIN(  77)		::String file3 = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN(  77)		::String _hx_tmp10;
HXDLIN(  77)		if (::sys::FileSystem_obj::exists(file3)) {
HXLINE(  77)			_hx_tmp10 = file3;
            		}
            		else {
HXLINE(  77)			_hx_tmp10 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN(  77)		_hx_tmp9->setFormat(_hx_tmp10,32,-1,null(),null(),null(),null());
HXLINE(  78)		this->add(this->playbackTxt);
HXLINE(  80)		this->switchPlayMusic();
            	}

Dynamic MusicPlayer_obj::__CreateEmpty() { return new MusicPlayer_obj; }

void *MusicPlayer_obj::_hx_vtable = 0;

Dynamic MusicPlayer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MusicPlayer_obj > _hx_result = new MusicPlayer_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MusicPlayer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x65724c72) {
		if (inClassId<=(int)0x62817b24) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x62817b24;
		} else {
			return inClassId==(int)0x65724c72;
		}
	} else {
		return inClassId==(int)0x7ccf8994;
	}
}

void MusicPlayer_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_c56a0156c6377e6f_84_update)
HXLINE(  85)		this->super::update(elapsed);
HXLINE(  87)		if (!(this->playingMusic)) {
HXLINE(  89)			return;
            		}
HXLINE(  92)		bool _hx_tmp;
HXDLIN(  92)		if (this->get_paused()) {
HXLINE(  92)			_hx_tmp = !(this->wasPlaying);
            		}
            		else {
HXLINE(  92)			_hx_tmp = false;
            		}
HXDLIN(  92)		if (_hx_tmp) {
HXLINE(  93)			this->songTxt->set_text(((HX_("PLAYING: ",74,05,26,47) + this->instance->songs->__get(::states::FreeplayState_obj::curSelected).StaticCast<  ::states::SongMetadata >()->songName) + HX_(" (PAUSED)",b3,20,17,72)));
            		}
            		else {
HXLINE(  95)			this->songTxt->set_text((HX_("PLAYING: ",74,05,26,47) + this->instance->songs->__get(::states::FreeplayState_obj::curSelected).StaticCast<  ::states::SongMetadata >()->songName));
            		}
HXLINE(  97)		this->positionSong();
HXLINE(  99)		if (this->instance->get_controls()->get_UI_LEFT_P()) {
HXLINE( 101)			if (this->get_playing()) {
HXLINE( 102)				this->wasPlaying = true;
            			}
HXLINE( 104)			this->pauseOrResume(null());
HXLINE( 106)			this->curTime = (::flixel::FlxG_obj::sound->music->_time - ( (Float)(1000) ));
HXLINE( 107)			this->instance->holdTime = ( (Float)(0) );
HXLINE( 109)			if ((this->curTime < 0)) {
HXLINE( 110)				this->curTime = ( (Float)(0) );
            			}
HXLINE( 112)			::flixel::FlxG_obj::sound->music->set_time(this->curTime);
HXLINE( 113)			if (::hx::IsNotNull( ::states::FreeplayState_obj::vocals )) {
HXLINE( 114)				::states::FreeplayState_obj::vocals->set_time(this->curTime);
            			}
            		}
HXLINE( 116)		if (this->instance->get_controls()->get_UI_RIGHT_P()) {
HXLINE( 118)			if (this->get_playing()) {
HXLINE( 119)				this->wasPlaying = true;
            			}
HXLINE( 121)			this->pauseOrResume(null());
HXLINE( 123)			this->curTime = (::flixel::FlxG_obj::sound->music->_time + 1000);
HXLINE( 124)			this->instance->holdTime = ( (Float)(0) );
HXLINE( 126)			if ((this->curTime > ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE( 127)				this->curTime = ::flixel::FlxG_obj::sound->music->_length;
            			}
HXLINE( 129)			::flixel::FlxG_obj::sound->music->set_time(this->curTime);
HXLINE( 130)			if (::hx::IsNotNull( ::states::FreeplayState_obj::vocals )) {
HXLINE( 131)				::states::FreeplayState_obj::vocals->set_time(this->curTime);
            			}
            		}
HXLINE( 134)		this->updateTimeTxt();
HXLINE( 136)		bool _hx_tmp1;
HXDLIN( 136)		if (!(this->instance->get_controls()->get_UI_LEFT())) {
HXLINE( 136)			_hx_tmp1 = this->instance->get_controls()->get_UI_RIGHT();
            		}
            		else {
HXLINE( 136)			_hx_tmp1 = true;
            		}
HXDLIN( 136)		if (_hx_tmp1) {
HXLINE( 138)			 ::states::FreeplayState fh = this->instance;
HXDLIN( 138)			fh->holdTime = (fh->holdTime + elapsed);
HXLINE( 139)			if ((this->instance->holdTime > ((Float)0.5))) {
HXLINE( 141)				 ::objects::MusicPlayer _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 141)				Float _hx_tmp3 = _hx_tmp2->curTime;
HXDLIN( 141)				int _hx_tmp4;
HXDLIN( 141)				if (this->instance->get_controls()->get_UI_LEFT()) {
HXLINE( 141)					_hx_tmp4 = -1;
            				}
            				else {
HXLINE( 141)					_hx_tmp4 = 1;
            				}
HXDLIN( 141)				_hx_tmp2->curTime = (_hx_tmp3 + ((( (Float)(40000) ) * elapsed) * ( (Float)(_hx_tmp4) )));
            			}
HXLINE( 144)			Float difference = ::Math_obj::abs((this->curTime - ::flixel::FlxG_obj::sound->music->_time));
HXLINE( 145)			if (((this->curTime + difference) > ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE( 145)				this->curTime = ::flixel::FlxG_obj::sound->music->_length;
            			}
            			else {
HXLINE( 146)				if (((this->curTime - difference) < 0)) {
HXLINE( 146)					this->curTime = ( (Float)(0) );
            				}
            			}
HXLINE( 148)			::flixel::FlxG_obj::sound->music->set_time(this->curTime);
HXLINE( 149)			if (::hx::IsNotNull( ::states::FreeplayState_obj::vocals )) {
HXLINE( 150)				::states::FreeplayState_obj::vocals->set_time(this->curTime);
            			}
HXLINE( 152)			this->updateTimeTxt();
            		}
HXLINE( 155)		bool _hx_tmp5;
HXDLIN( 155)		if (!(this->instance->get_controls()->get_UI_LEFT_R())) {
HXLINE( 155)			_hx_tmp5 = this->instance->get_controls()->get_UI_RIGHT_R();
            		}
            		else {
HXLINE( 155)			_hx_tmp5 = true;
            		}
HXDLIN( 155)		if (_hx_tmp5) {
HXLINE( 157)			::flixel::FlxG_obj::sound->music->set_time(this->curTime);
HXLINE( 158)			if (::hx::IsNotNull( ::states::FreeplayState_obj::vocals )) {
HXLINE( 159)				::states::FreeplayState_obj::vocals->set_time(this->curTime);
            			}
HXLINE( 161)			if (this->wasPlaying) {
HXLINE( 163)				this->pauseOrResume(true);
HXLINE( 164)				this->wasPlaying = false;
            			}
HXLINE( 167)			this->updateTimeTxt();
            		}
HXLINE( 169)		if (this->instance->get_controls()->get_UI_UP_P()) {
HXLINE( 171)			this->holdPitchTime = ( (Float)(0) );
HXLINE( 172)			this->set_playbackRate((this->playbackRate + ((Float)0.05)));
HXLINE( 173)			this->setPlaybackRate();
            		}
            		else {
HXLINE( 175)			if (this->instance->get_controls()->get_UI_DOWN_P()) {
HXLINE( 177)				this->holdPitchTime = ( (Float)(0) );
HXLINE( 178)				this->set_playbackRate((this->playbackRate - ((Float)0.05)));
HXLINE( 179)				this->setPlaybackRate();
            			}
            		}
HXLINE( 181)		bool _hx_tmp6;
HXDLIN( 181)		if (!(this->instance->get_controls()->get_UI_DOWN())) {
HXLINE( 181)			_hx_tmp6 = this->instance->get_controls()->get_UI_UP();
            		}
            		else {
HXLINE( 181)			_hx_tmp6 = true;
            		}
HXDLIN( 181)		if (_hx_tmp6) {
HXLINE( 183)			 ::objects::MusicPlayer _hx_tmp7 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 183)			_hx_tmp7->holdPitchTime = (_hx_tmp7->holdPitchTime + elapsed);
HXLINE( 184)			if ((this->holdPitchTime > ((Float)0.6))) {
HXLINE( 186)				Float _hx_tmp8 = this->playbackRate;
HXDLIN( 186)				int _hx_tmp9;
HXDLIN( 186)				if (this->instance->get_controls()->get_UI_UP()) {
HXLINE( 186)					_hx_tmp9 = 1;
            				}
            				else {
HXLINE( 186)					_hx_tmp9 = -1;
            				}
HXDLIN( 186)				this->set_playbackRate((_hx_tmp8 + (((Float)0.05) * ( (Float)(_hx_tmp9) ))));
HXLINE( 187)				this->setPlaybackRate();
            			}
            		}
HXLINE( 190)		bool _hx_tmp10;
HXDLIN( 190)		if (::hx::IsNotNull( ::states::FreeplayState_obj::vocals )) {
HXLINE( 190)			_hx_tmp10 = (::flixel::FlxG_obj::sound->music->_time > 5);
            		}
            		else {
HXLINE( 190)			_hx_tmp10 = false;
            		}
HXDLIN( 190)		if (_hx_tmp10) {
HXLINE( 192)			Float difference1 = ::Math_obj::abs((::flixel::FlxG_obj::sound->music->_time - ::states::FreeplayState_obj::vocals->_time));
HXLINE( 193)			bool _hx_tmp11;
HXDLIN( 193)			if ((difference1 >= 5)) {
HXLINE( 193)				_hx_tmp11 = !(this->get_paused());
            			}
            			else {
HXLINE( 193)				_hx_tmp11 = false;
            			}
HXDLIN( 193)			if (_hx_tmp11) {
HXLINE( 195)				this->pauseOrResume(null());
HXLINE( 196)				::states::FreeplayState_obj::vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
HXLINE( 197)				this->pauseOrResume(true);
            			}
            		}
HXLINE( 200)		this->updatePlaybackTxt();
HXLINE( 202)		if (this->instance->get_controls()->get_RESET()) {
HXLINE( 204)			this->set_playbackRate(( (Float)(1) ));
HXLINE( 205)			this->setPlaybackRate();
HXLINE( 207)			::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
HXLINE( 208)			if (::hx::IsNotNull( ::states::FreeplayState_obj::vocals )) {
HXLINE( 209)				::states::FreeplayState_obj::vocals->set_time(( (Float)(0) ));
            			}
HXLINE( 211)			this->updateTimeTxt();
            		}
            	}


void MusicPlayer_obj::pauseOrResume(::hx::Null< bool >  __o_resume){
            		bool resume = __o_resume.Default(false);
            	HX_STACKFRAME(&_hx_pos_c56a0156c6377e6f_216_pauseOrResume)
HXLINE( 217)		if (resume) {
HXLINE( 219)			::flixel::FlxG_obj::sound->music->resume();
HXLINE( 221)			if (::hx::IsNotNull( ::states::FreeplayState_obj::vocals )) {
HXLINE( 222)				::states::FreeplayState_obj::vocals->resume();
            			}
            		}
            		else {
HXLINE( 226)			::flixel::FlxG_obj::sound->music->pause();
HXLINE( 228)			if (::hx::IsNotNull( ::states::FreeplayState_obj::vocals )) {
HXLINE( 229)				::states::FreeplayState_obj::vocals->pause();
            			}
            		}
HXLINE( 231)		this->positionSong();
            	}


HX_DEFINE_DYNAMIC_FUNC1(MusicPlayer_obj,pauseOrResume,(void))

void MusicPlayer_obj::switchPlayMusic(){
            	HX_STACKFRAME(&_hx_pos_c56a0156c6377e6f_235_switchPlayMusic)
HXLINE( 236)		bool _hx_tmp;
HXDLIN( 236)		if (!(this->playingMusic)) {
HXLINE( 236)			_hx_tmp = ::backend::ClientPrefs_obj::data->autoPause;
            		}
            		else {
HXLINE( 236)			_hx_tmp = false;
            		}
HXDLIN( 236)		::flixel::FlxG_obj::autoPause = _hx_tmp;
HXLINE( 237)		this->set_active(this->set_visible(this->playingMusic));
HXLINE( 239)		 ::flixel::FlxSprite _hx_tmp1 = this->instance->scoreBG;
HXDLIN( 239)		 ::flixel::text::FlxText _hx_tmp2 = this->instance->diffText;
HXDLIN( 239)		_hx_tmp1->set_visible(_hx_tmp2->set_visible(this->instance->scoreText->set_visible(!(this->playingMusic))));
HXLINE( 240)		 ::flixel::text::FlxText _hx_tmp3 = this->songTxt;
HXDLIN( 240)		 ::flixel::text::FlxText _hx_tmp4 = this->timeTxt;
HXDLIN( 240)		 ::flixel::FlxSprite _hx_tmp5 = this->songBG;
HXDLIN( 240)		 ::flixel::text::FlxText _hx_tmp6 = this->playbackTxt;
HXDLIN( 240)		 ::flixel::FlxSprite _hx_tmp7 = this->playbackBG;
HXDLIN( 240)		_hx_tmp3->set_visible(_hx_tmp4->set_visible(_hx_tmp5->set_visible(_hx_tmp6->set_visible(_hx_tmp7->set_visible(this->progressBar->set_visible(this->playingMusic))))));
HXLINE( 242)		{
HXLINE( 242)			int _g = 0;
HXDLIN( 242)			::Array< ::Dynamic> _g1 = this->playbackSymbols;
HXDLIN( 242)			while((_g < _g1->length)){
HXLINE( 242)				 ::flixel::text::FlxText i = _g1->__get(_g).StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 242)				_g = (_g + 1);
HXLINE( 243)				i->set_visible(this->playingMusic);
            			}
            		}
HXLINE( 245)		this->holdPitchTime = ( (Float)(0) );
HXLINE( 246)		this->instance->holdTime = ( (Float)(0) );
HXLINE( 247)		this->set_playbackRate(( (Float)(1) ));
HXLINE( 248)		this->updatePlaybackTxt();
HXLINE( 250)		if (this->playingMusic) {
HXLINE( 252)			this->instance->bottomText->set_text(HX_("Press SPACE to Pause / Press ESCAPE to Exit / Press R to Reset the Song",a8,28,7f,5e));
HXLINE( 253)			this->positionSong();
HXLINE( 255)			this->progressBar->setRange(( (Float)(0) ),::flixel::FlxG_obj::sound->music->_length);
HXLINE( 256)			this->progressBar->setParent(::flixel::FlxG_obj::sound->music,HX_("time",0d,cc,fc,4c),null(),null(),null());
HXLINE( 257)			this->progressBar->set_numDivisions(1600);
HXLINE( 259)			this->updateTimeTxt();
            		}
            		else {
HXLINE( 263)			this->progressBar->setRange(( (Float)(0) ),::Math_obj::POSITIVE_INFINITY);
HXLINE( 264)			this->progressBar->setParent(null(),HX_("",00,00,00,00),null(),null(),null());
HXLINE( 265)			this->progressBar->set_numDivisions(0);
HXLINE( 267)			this->instance->bottomText->set_text(this->instance->bottomString);
HXLINE( 268)			this->instance->positionHighscore();
            		}
HXLINE( 270)		this->progressBar->updateBar();
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicPlayer_obj,switchPlayMusic,(void))

void MusicPlayer_obj::updatePlaybackTxt(){
            	HX_STACKFRAME(&_hx_pos_c56a0156c6377e6f_274_updatePlaybackTxt)
HXLINE( 275)		::String text = HX_("",00,00,00,00);
HXLINE( 276)		if (::Std_obj::isOfType(this->playbackRate,::hx::ClassOf< int >())) {
HXLINE( 277)			text = (this->playbackRate + HX_(".00",ae,11,23,00));
            		}
            		else {
HXLINE( 280)			::String playbackRate = ::Std_obj::string(this->playbackRate);
HXLINE( 281)			if ((playbackRate.split(HX_(".",2e,00,00,00))->__get(1).length < 2)) {
HXLINE( 282)				playbackRate = (playbackRate + HX_("0",30,00,00,00));
            			}
HXLINE( 284)			text = playbackRate;
            		}
HXLINE( 286)		this->playbackTxt->set_text((text + HX_("x",78,00,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicPlayer_obj,updatePlaybackTxt,(void))

void MusicPlayer_obj::positionSong(){
            	HX_STACKFRAME(&_hx_pos_c56a0156c6377e6f_290_positionSong)
HXLINE( 291)		int length = this->instance->songs->__get(::states::FreeplayState_obj::curSelected).StaticCast<  ::states::SongMetadata >()->songName.length;
HXLINE( 292)		bool shortName = (length < 5);
HXLINE( 293)		 ::flixel::text::FlxText _hx_tmp = this->songTxt;
HXDLIN( 293)		int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 293)		_hx_tmp->set_x(((( (Float)(_hx_tmp1) ) - this->songTxt->get_width()) - ( (Float)(6) )));
HXLINE( 294)		if (shortName) {
HXLINE( 295)			 ::flixel::text::FlxText fh = this->songTxt;
HXDLIN( 295)			fh->set_x((fh->x - ( (Float)(((10 * length) - length)) )));
            		}
HXLINE( 296)		this->songBG->scale->set_x(((( (Float)(::flixel::FlxG_obj::width) ) - this->songTxt->x) + 12));
HXLINE( 297)		if (shortName) {
HXLINE( 298)			 ::flixel::FlxSprite fh1 = this->songBG;
HXDLIN( 298)			fh1->scale->set_x((fh1->scale->x + (6 * length)));
            		}
HXLINE( 299)		this->songBG->set_x((( (Float)(::flixel::FlxG_obj::width) ) - (this->songBG->scale->x / ( (Float)(2) ))));
HXLINE( 300)		 ::flixel::text::FlxText _hx_tmp2 = this->timeTxt;
HXDLIN( 300)		Float _hx_tmp3 = this->songBG->x;
HXDLIN( 300)		_hx_tmp2->set_x(( (Float)(::Std_obj::_hx_int((_hx_tmp3 + (this->songBG->get_width() / ( (Float)(2) ))))) ));
HXLINE( 301)		 ::flixel::text::FlxText fh2 = this->timeTxt;
HXDLIN( 301)		Float fh3 = fh2->x;
HXDLIN( 301)		fh2->set_x((fh3 - (this->timeTxt->get_width() / ( (Float)(2) ))));
HXLINE( 302)		if (shortName) {
HXLINE( 303)			 ::flixel::text::FlxText fh4 = this->timeTxt;
HXDLIN( 303)			fh4->set_x((fh4->x - ( (Float)((length - 5)) )));
            		}
HXLINE( 305)		{
HXLINE( 305)			 ::flixel::math::FlxBasePoint this1 = this->playbackBG->scale;
HXDLIN( 305)			this1->set_x((this->playbackTxt->get_width() + 30));
            		}
HXLINE( 306)		this->playbackBG->set_x((this->songBG->x - (this->songBG->scale->x / ( (Float)(2) ))));
HXLINE( 307)		 ::flixel::FlxSprite fh5 = this->playbackBG;
HXDLIN( 307)		fh5->set_x((fh5->x - this->playbackBG->scale->x));
HXLINE( 309)		 ::flixel::text::FlxText _hx_tmp4 = this->playbackTxt;
HXDLIN( 309)		Float _hx_tmp5 = this->playbackBG->x;
HXDLIN( 309)		_hx_tmp4->set_x((_hx_tmp5 - (this->playbackTxt->get_width() / ( (Float)(2) ))));
HXLINE( 310)		 ::flixel::text::FlxText _hx_tmp6 = this->playbackTxt;
HXDLIN( 310)		_hx_tmp6->set_y(this->playbackTxt->get_height());
HXLINE( 312)		 ::flixel::ui::FlxBar _hx_tmp7 = this->progressBar;
HXDLIN( 312)		_hx_tmp7->setGraphicSize(::Std_obj::_hx_int(this->songTxt->get_width()),5);
HXLINE( 313)		 ::flixel::ui::FlxBar _hx_tmp8 = this->progressBar;
HXDLIN( 313)		Float _hx_tmp9 = this->songTxt->y;
HXDLIN( 313)		_hx_tmp8->set_y(((_hx_tmp9 + this->songTxt->get_height()) + 10));
HXLINE( 314)		 ::flixel::ui::FlxBar _hx_tmp10 = this->progressBar;
HXDLIN( 314)		Float _hx_tmp11 = this->songTxt->x;
HXDLIN( 314)		_hx_tmp10->set_x(((_hx_tmp11 + (this->songTxt->get_width() / ( (Float)(2) ))) - ( (Float)(15) )));
HXLINE( 315)		if (shortName) {
HXLINE( 317)			 ::flixel::ui::FlxBar fh6 = this->progressBar;
HXDLIN( 317)			fh6->scale->set_x((fh6->scale->x + (( (Float)(length) ) / ( (Float)(2) ))));
HXLINE( 318)			 ::flixel::ui::FlxBar fh7 = this->progressBar;
HXDLIN( 318)			fh7->set_x((fh7->x - ( (Float)((length - 10)) )));
            		}
HXLINE( 321)		{
HXLINE( 321)			int _g = 0;
HXDLIN( 321)			while((_g < 2)){
HXLINE( 321)				_g = (_g + 1);
HXDLIN( 321)				int i = (_g - 1);
HXLINE( 323)				 ::flixel::text::FlxText text = this->playbackSymbols->__get(i).StaticCast<  ::flixel::text::FlxText >();
HXLINE( 324)				Float _hx_tmp12 = this->playbackTxt->x;
HXDLIN( 324)				text->set_x(((_hx_tmp12 + (this->playbackTxt->get_width() / ( (Float)(2) ))) - ( (Float)(10) )));
HXLINE( 325)				text->set_y(this->playbackTxt->y);
HXLINE( 327)				if ((i == 0)) {
HXLINE( 328)					Float text1 = text->y;
HXDLIN( 328)					text->set_y((text1 - this->playbackTxt->get_height()));
            				}
            				else {
HXLINE( 330)					Float text2 = text->y;
HXDLIN( 330)					text->set_y((text2 + this->playbackTxt->get_height()));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicPlayer_obj,positionSong,(void))

void MusicPlayer_obj::updateTimeTxt(){
            	HX_STACKFRAME(&_hx_pos_c56a0156c6377e6f_335_updateTimeTxt)
HXLINE( 336)		::String text = (::flixel::util::FlxStringUtil_obj::formatTime((::flixel::FlxG_obj::sound->music->_time / ( (Float)(1000) )),false) + HX_(" / ",31,71,18,00));
HXDLIN( 336)		::String text1 = (text + ::flixel::util::FlxStringUtil_obj::formatTime((::flixel::FlxG_obj::sound->music->_length / ( (Float)(1000) )),false));
HXLINE( 337)		this->timeTxt->set_text(((HX_("< ",64,34,00,00) + text1) + HX_(" >",1e,1c,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicPlayer_obj,updateTimeTxt,(void))

void MusicPlayer_obj::setPlaybackRate(){
            	HX_STACKFRAME(&_hx_pos_c56a0156c6377e6f_341_setPlaybackRate)
HXLINE( 342)		::flixel::FlxG_obj::sound->music->set_pitch(this->playbackRate);
HXLINE( 343)		if (::hx::IsNotNull( ::states::FreeplayState_obj::vocals )) {
HXLINE( 344)			::states::FreeplayState_obj::vocals->set_pitch(this->playbackRate);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicPlayer_obj,setPlaybackRate,(void))

bool MusicPlayer_obj::get_playing(){
            	HX_STACKFRAME(&_hx_pos_c56a0156c6377e6f_349_get_playing)
HXDLIN( 349)		return ::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel );
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicPlayer_obj,get_playing,return )

bool MusicPlayer_obj::get_paused(){
            	HX_STACKFRAME(&_hx_pos_c56a0156c6377e6f_354_get_paused)
HXDLIN( 354)		return ::flixel::FlxG_obj::sound->music->_paused;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicPlayer_obj,get_paused,return )

Float MusicPlayer_obj::set_playbackRate(Float value){
            	HX_STACKFRAME(&_hx_pos_c56a0156c6377e6f_358_set_playbackRate)
HXLINE( 359)		Float value1 = ::flixel::math::FlxMath_obj::roundDecimal(value,2);
HXLINE( 360)		if ((value1 > 3)) {
HXLINE( 361)			value1 = ( (Float)(3) );
            		}
            		else {
HXLINE( 362)			if ((value1 <= ((Float)0.25))) {
HXLINE( 363)				value1 = ((Float)0.25);
            			}
            		}
HXLINE( 364)		return (this->playbackRate = value1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MusicPlayer_obj,set_playbackRate,return )


::hx::ObjectPtr< MusicPlayer_obj > MusicPlayer_obj::__new( ::states::FreeplayState instance) {
	::hx::ObjectPtr< MusicPlayer_obj > __this = new MusicPlayer_obj();
	__this->__construct(instance);
	return __this;
}

::hx::ObjectPtr< MusicPlayer_obj > MusicPlayer_obj::__alloc(::hx::Ctx *_hx_ctx, ::states::FreeplayState instance) {
	MusicPlayer_obj *__this = (MusicPlayer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MusicPlayer_obj), true, "objects.MusicPlayer"));
	*(void **)__this = MusicPlayer_obj::_hx_vtable;
	__this->__construct(instance);
	return __this;
}

MusicPlayer_obj::MusicPlayer_obj()
{
}

void MusicPlayer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MusicPlayer);
	HX_MARK_MEMBER_NAME(instance,"instance");
	HX_MARK_MEMBER_NAME(playingMusic,"playingMusic");
	HX_MARK_MEMBER_NAME(curTime,"curTime");
	HX_MARK_MEMBER_NAME(songBG,"songBG");
	HX_MARK_MEMBER_NAME(songTxt,"songTxt");
	HX_MARK_MEMBER_NAME(timeTxt,"timeTxt");
	HX_MARK_MEMBER_NAME(progressBar,"progressBar");
	HX_MARK_MEMBER_NAME(playbackBG,"playbackBG");
	HX_MARK_MEMBER_NAME(playbackSymbols,"playbackSymbols");
	HX_MARK_MEMBER_NAME(playbackTxt,"playbackTxt");
	HX_MARK_MEMBER_NAME(wasPlaying,"wasPlaying");
	HX_MARK_MEMBER_NAME(holdPitchTime,"holdPitchTime");
	HX_MARK_MEMBER_NAME(playbackRate,"playbackRate");
	 ::flixel::group::FlxTypedGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MusicPlayer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(instance,"instance");
	HX_VISIT_MEMBER_NAME(playingMusic,"playingMusic");
	HX_VISIT_MEMBER_NAME(curTime,"curTime");
	HX_VISIT_MEMBER_NAME(songBG,"songBG");
	HX_VISIT_MEMBER_NAME(songTxt,"songTxt");
	HX_VISIT_MEMBER_NAME(timeTxt,"timeTxt");
	HX_VISIT_MEMBER_NAME(progressBar,"progressBar");
	HX_VISIT_MEMBER_NAME(playbackBG,"playbackBG");
	HX_VISIT_MEMBER_NAME(playbackSymbols,"playbackSymbols");
	HX_VISIT_MEMBER_NAME(playbackTxt,"playbackTxt");
	HX_VISIT_MEMBER_NAME(wasPlaying,"wasPlaying");
	HX_VISIT_MEMBER_NAME(holdPitchTime,"holdPitchTime");
	HX_VISIT_MEMBER_NAME(playbackRate,"playbackRate");
	 ::flixel::group::FlxTypedGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MusicPlayer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paused() ); }
		if (HX_FIELD_EQ(inName,"songBG") ) { return ::hx::Val( songBG ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"playing") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_playing() ); }
		if (HX_FIELD_EQ(inName,"curTime") ) { return ::hx::Val( curTime ); }
		if (HX_FIELD_EQ(inName,"songTxt") ) { return ::hx::Val( songTxt ); }
		if (HX_FIELD_EQ(inName,"timeTxt") ) { return ::hx::Val( timeTxt ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { return ::hx::Val( instance ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"playbackBG") ) { return ::hx::Val( playbackBG ); }
		if (HX_FIELD_EQ(inName,"wasPlaying") ) { return ::hx::Val( wasPlaying ); }
		if (HX_FIELD_EQ(inName,"get_paused") ) { return ::hx::Val( get_paused_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"progressBar") ) { return ::hx::Val( progressBar ); }
		if (HX_FIELD_EQ(inName,"playbackTxt") ) { return ::hx::Val( playbackTxt ); }
		if (HX_FIELD_EQ(inName,"get_playing") ) { return ::hx::Val( get_playing_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"playingMusic") ) { return ::hx::Val( playingMusic ); }
		if (HX_FIELD_EQ(inName,"playbackRate") ) { return ::hx::Val( playbackRate ); }
		if (HX_FIELD_EQ(inName,"positionSong") ) { return ::hx::Val( positionSong_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"holdPitchTime") ) { return ::hx::Val( holdPitchTime ); }
		if (HX_FIELD_EQ(inName,"pauseOrResume") ) { return ::hx::Val( pauseOrResume_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateTimeTxt") ) { return ::hx::Val( updateTimeTxt_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"playbackSymbols") ) { return ::hx::Val( playbackSymbols ); }
		if (HX_FIELD_EQ(inName,"switchPlayMusic") ) { return ::hx::Val( switchPlayMusic_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPlaybackRate") ) { return ::hx::Val( setPlaybackRate_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"set_playbackRate") ) { return ::hx::Val( set_playbackRate_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"updatePlaybackTxt") ) { return ::hx::Val( updatePlaybackTxt_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MusicPlayer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"songBG") ) { songBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curTime") ) { curTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songTxt") ) { songTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeTxt") ) { timeTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=inValue.Cast<  ::states::FreeplayState >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"playbackBG") ) { playbackBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wasPlaying") ) { wasPlaying=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"progressBar") ) { progressBar=inValue.Cast<  ::flixel::ui::FlxBar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playbackTxt") ) { playbackTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"playingMusic") ) { playingMusic=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playbackRate") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_playbackRate(inValue.Cast< Float >()) );playbackRate=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"holdPitchTime") ) { holdPitchTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"playbackSymbols") ) { playbackSymbols=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MusicPlayer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("instance",95,1f,e1,59));
	outFields->push(HX_("playing",6e,0f,18,8a));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("playingMusic",57,82,1b,d8));
	outFields->push(HX_("curTime",ad,3d,12,b8));
	outFields->push(HX_("songBG",da,bc,88,2d));
	outFields->push(HX_("songTxt",9b,55,2a,aa));
	outFields->push(HX_("timeTxt",63,a0,e2,d8));
	outFields->push(HX_("progressBar",26,bc,55,e6));
	outFields->push(HX_("playbackBG",a0,48,c8,bc));
	outFields->push(HX_("playbackSymbols",40,1d,da,5d));
	outFields->push(HX_("playbackTxt",15,17,85,72));
	outFields->push(HX_("wasPlaying",45,fd,28,59));
	outFields->push(HX_("holdPitchTime",ae,0a,d2,3a));
	outFields->push(HX_("playbackRate",9b,3a,8b,c0));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MusicPlayer_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::states::FreeplayState */ ,(int)offsetof(MusicPlayer_obj,instance),HX_("instance",95,1f,e1,59)},
	{::hx::fsBool,(int)offsetof(MusicPlayer_obj,playingMusic),HX_("playingMusic",57,82,1b,d8)},
	{::hx::fsFloat,(int)offsetof(MusicPlayer_obj,curTime),HX_("curTime",ad,3d,12,b8)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MusicPlayer_obj,songBG),HX_("songBG",da,bc,88,2d)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MusicPlayer_obj,songTxt),HX_("songTxt",9b,55,2a,aa)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MusicPlayer_obj,timeTxt),HX_("timeTxt",63,a0,e2,d8)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(int)offsetof(MusicPlayer_obj,progressBar),HX_("progressBar",26,bc,55,e6)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MusicPlayer_obj,playbackBG),HX_("playbackBG",a0,48,c8,bc)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MusicPlayer_obj,playbackSymbols),HX_("playbackSymbols",40,1d,da,5d)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MusicPlayer_obj,playbackTxt),HX_("playbackTxt",15,17,85,72)},
	{::hx::fsBool,(int)offsetof(MusicPlayer_obj,wasPlaying),HX_("wasPlaying",45,fd,28,59)},
	{::hx::fsFloat,(int)offsetof(MusicPlayer_obj,holdPitchTime),HX_("holdPitchTime",ae,0a,d2,3a)},
	{::hx::fsFloat,(int)offsetof(MusicPlayer_obj,playbackRate),HX_("playbackRate",9b,3a,8b,c0)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MusicPlayer_obj_sStaticStorageInfo = 0;
#endif

static ::String MusicPlayer_obj_sMemberFields[] = {
	HX_("instance",95,1f,e1,59),
	HX_("playingMusic",57,82,1b,d8),
	HX_("curTime",ad,3d,12,b8),
	HX_("songBG",da,bc,88,2d),
	HX_("songTxt",9b,55,2a,aa),
	HX_("timeTxt",63,a0,e2,d8),
	HX_("progressBar",26,bc,55,e6),
	HX_("playbackBG",a0,48,c8,bc),
	HX_("playbackSymbols",40,1d,da,5d),
	HX_("playbackTxt",15,17,85,72),
	HX_("wasPlaying",45,fd,28,59),
	HX_("holdPitchTime",ae,0a,d2,3a),
	HX_("playbackRate",9b,3a,8b,c0),
	HX_("update",09,86,05,87),
	HX_("pauseOrResume",46,b4,51,56),
	HX_("switchPlayMusic",7d,b5,a1,99),
	HX_("updatePlaybackTxt",8c,c3,ee,d6),
	HX_("positionSong",1e,f9,b3,72),
	HX_("updateTimeTxt",5a,05,51,a4),
	HX_("setPlaybackRate",5d,0d,41,df),
	HX_("get_playing",85,6f,12,10),
	HX_("get_paused",77,b0,0b,e0),
	HX_("set_playbackRate",98,14,6c,1b),
	::String(null()) };

::hx::Class MusicPlayer_obj::__mClass;

void MusicPlayer_obj::__register()
{
	MusicPlayer_obj _hx_dummy;
	MusicPlayer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.MusicPlayer",2c,5b,c5,61);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MusicPlayer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MusicPlayer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MusicPlayer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MusicPlayer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace objects
