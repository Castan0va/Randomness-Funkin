// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_5f5af744d9ff5693
#define INCLUDED_5f5af744d9ff5693
#include "cpp/Pointer.h"
#endif
#ifndef INCLUDED_0e0693b5ce2fed3b
#define INCLUDED_0e0693b5ce2fed3b
#include "discord_register.h"
#endif
#ifndef INCLUDED_4d2c8952d9865d7f
#define INCLUDED_4d2c8952d9865d7f
#include "discord_rpc.h"
#endif
#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_llua_Lua_helper
#include <llua/Lua_helper.h>
#endif
#ifndef INCLUDED_states_MainMenuState
#include <states/MainMenuState.h>
#endif
#ifndef INCLUDED_sys_thread__Thread_HaxeThread
#include <sys/thread/_Thread/HaxeThread.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_eb10ff3c4d95691e_17_check,"backend.DiscordClient","check",0xb71fe8b7,"backend.DiscordClient.check","backend/Discord.hx",17,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_eb10ff3c4d95691e_27_prepare,"backend.DiscordClient","prepare",0xd22dfb36,"backend.DiscordClient.prepare","backend/Discord.hx",27,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_eb10ff3c4d95691e_22_prepare,"backend.DiscordClient","prepare",0xd22dfb36,"backend.DiscordClient.prepare","backend/Discord.hx",22,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_eb10ff3c4d95691e_31___default_shutdown,"backend.DiscordClient","__default_shutdown",0x9cda34e5,"backend.DiscordClient.__default_shutdown","backend/Discord.hx",31,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_eb10ff3c4d95691e_36_onReady,"backend.DiscordClient","onReady",0x1748a873,"backend.DiscordClient.onReady","backend/Discord.hx",36,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_eb10ff3c4d95691e_48_onError,"backend.DiscordClient","onError",0xa3b7d3d8,"backend.DiscordClient.onError","backend/Discord.hx",48,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_eb10ff3c4d95691e_52_onDisconnected,"backend.DiscordClient","onDisconnected",0xd255a5ab,"backend.DiscordClient.onDisconnected","backend/Discord.hx",52,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_eb10ff3c4d95691e_66_initialize,"backend.DiscordClient","initialize",0x7f7ebf01,"backend.DiscordClient.initialize","backend/Discord.hx",66,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_eb10ff3c4d95691e_56_initialize,"backend.DiscordClient","initialize",0x7f7ebf01,"backend.DiscordClient.initialize","backend/Discord.hx",56,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_eb10ff3c4d95691e_83_changePresence,"backend.DiscordClient","changePresence",0xda0d49fc,"backend.DiscordClient.changePresence","backend/Discord.hx",83,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_eb10ff3c4d95691e_108_updatePresence,"backend.DiscordClient","updatePresence",0xb5fbff95,"backend.DiscordClient.updatePresence","backend/Discord.hx",108,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_eb10ff3c4d95691e_111_resetClientID,"backend.DiscordClient","resetClientID",0x375fb6c4,"backend.DiscordClient.resetClientID","backend/Discord.hx",111,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_eb10ff3c4d95691e_114_set_clientID,"backend.DiscordClient","set_clientID",0x54a96654,"backend.DiscordClient.set_clientID","backend/Discord.hx",114,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_eb10ff3c4d95691e_129_loadModRPC,"backend.DiscordClient","loadModRPC",0x08a749ba,"backend.DiscordClient.loadModRPC","backend/Discord.hx",129,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_eb10ff3c4d95691e_140_addLuaCallbacks,"backend.DiscordClient","addLuaCallbacks",0xeeeb1ea6,"backend.DiscordClient.addLuaCallbacks","backend/Discord.hx",140,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_eb10ff3c4d95691e_142_addLuaCallbacks,"backend.DiscordClient","addLuaCallbacks",0xeeeb1ea6,"backend.DiscordClient.addLuaCallbacks","backend/Discord.hx",142,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_eb10ff3c4d95691e_145_addLuaCallbacks,"backend.DiscordClient","addLuaCallbacks",0xeeeb1ea6,"backend.DiscordClient.addLuaCallbacks","backend/Discord.hx",145,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_eb10ff3c4d95691e_10_boot,"backend.DiscordClient","boot",0x4accc723,"backend.DiscordClient.boot","backend/Discord.hx",10,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_eb10ff3c4d95691e_11_boot,"backend.DiscordClient","boot",0x4accc723,"backend.DiscordClient.boot","backend/Discord.hx",11,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_eb10ff3c4d95691e_12_boot,"backend.DiscordClient","boot",0x4accc723,"backend.DiscordClient.boot","backend/Discord.hx",12,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_eb10ff3c4d95691e_13_boot,"backend.DiscordClient","boot",0x4accc723,"backend.DiscordClient.boot","backend/Discord.hx",13,0xbaede60d)
namespace backend{

void DiscordClient_obj::__construct() { }

Dynamic DiscordClient_obj::__CreateEmpty() { return new DiscordClient_obj; }

void *DiscordClient_obj::_hx_vtable = 0;

Dynamic DiscordClient_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DiscordClient_obj > _hx_result = new DiscordClient_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DiscordClient_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1ba82363;
}

bool DiscordClient_obj::isInitialized;

::String DiscordClient_obj::_defaultID;

::String DiscordClient_obj::clientID;

 DiscordRichPresence DiscordClient_obj::presence;

void DiscordClient_obj::check(){
            	HX_STACKFRAME(&_hx_pos_eb10ff3c4d95691e_17_check)
HXDLIN(  17)		if (::backend::ClientPrefs_obj::data->discordRPC) {
HXDLIN(  17)			::backend::DiscordClient_obj::initialize();
            		}
            		else {
HXLINE(  18)			if (::backend::DiscordClient_obj::isInitialized) {
HXLINE(  18)				::backend::DiscordClient_obj::shutdown();
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(DiscordClient_obj,check,(void))

void DiscordClient_obj::prepare(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_eb10ff3c4d95691e_27_prepare)
HXLINE(  27)			if (::backend::DiscordClient_obj::isInitialized) {
HXLINE(  27)				::backend::DiscordClient_obj::shutdown();
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_eb10ff3c4d95691e_22_prepare)
HXLINE(  23)		bool _hx_tmp;
HXDLIN(  23)		if (!(::backend::DiscordClient_obj::isInitialized)) {
HXLINE(  23)			_hx_tmp = ::backend::ClientPrefs_obj::data->discordRPC;
            		}
            		else {
HXLINE(  23)			_hx_tmp = false;
            		}
HXDLIN(  23)		if (_hx_tmp) {
HXLINE(  24)			::backend::DiscordClient_obj::initialize();
            		}
HXLINE(  26)		::lime::app::Application_obj::current->_hx___window->onClose->add( ::Dynamic(new _hx_Closure_0()),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(DiscordClient_obj,prepare,(void))

HX_BEGIN_DEFAULT_FUNC(__default_shutdown,DiscordClient_obj)
void _hx_run(){
            	HX_STACKFRAME(&_hx_pos_eb10ff3c4d95691e_31___default_shutdown)
HXLINE(  32)		Discord_Shutdown();
HXLINE(  33)		::backend::DiscordClient_obj::isInitialized = false;
            	}
HX_END_LOCAL_FUNC0((void))
HX_END_DEFAULT_FUNC

::Dynamic DiscordClient_obj::shutdown;

void DiscordClient_obj::onReady(const  DiscordUser* request){
            	HX_STACKFRAME(&_hx_pos_eb10ff3c4d95691e_36_onReady)
HXLINE(  37)		 DiscordUser * requestPtr = cpp::Pointer_obj::fromRaw(request)->ptr;
HXLINE(  39)		if (::hx::IsNotEq( ::Std_obj::parseInt(::hx::TCast< ::String >::cast((*(requestPtr)).discriminator)),0 )) {
HXLINE(  40)			::haxe::Log_obj::trace(((((HX_("(Discord) Connected to User (",a6,14,1f,94) + ::hx::TCast< ::String >::cast((*(requestPtr)).username)) + HX_("#",23,00,00,00)) + ::hx::TCast< ::String >::cast((*(requestPtr)).discriminator)) + HX_(")",29,00,00,00)),::hx::SourceInfo(HX_("source/backend/Discord.hx",01,c2,09,02),40,HX_("backend.DiscordClient",1d,03,ac,0d),HX_("onReady",c4,3e,f8,7c)));
            		}
            		else {
HXLINE(  42)			::haxe::Log_obj::trace(((HX_("(Discord) Connected to User (",a6,14,1f,94) + ::hx::TCast< ::String >::cast((*(requestPtr)).username)) + HX_(")",29,00,00,00)),::hx::SourceInfo(HX_("source/backend/Discord.hx",01,c2,09,02),42,HX_("backend.DiscordClient",1d,03,ac,0d),HX_("onReady",c4,3e,f8,7c)));
            		}
HXLINE(  44)		::backend::DiscordClient_obj::changePresence(null(),null(),null(),null(),null());
            	}


void DiscordClient_obj::onError(int errorCode,const char* message){
            	HX_STACKFRAME(&_hx_pos_eb10ff3c4d95691e_48_onError)
HXDLIN(  48)		::haxe::Log_obj::trace(((((HX_("Discord: Error (",be,2c,cb,1b) + errorCode) + HX_(": ",a6,32,00,00)) + ::hx::TCast< ::String >::cast(message)) + HX_(")",29,00,00,00)),::hx::SourceInfo(HX_("source/backend/Discord.hx",01,c2,09,02),48,HX_("backend.DiscordClient",1d,03,ac,0d),HX_("onError",29,6a,67,09)));
            	}


void DiscordClient_obj::onDisconnected(int errorCode,const char* message){
            	HX_STACKFRAME(&_hx_pos_eb10ff3c4d95691e_52_onDisconnected)
HXDLIN(  52)		::haxe::Log_obj::trace(((((HX_("Discord: Disconnected (",55,e3,d3,96) + errorCode) + HX_(": ",a6,32,00,00)) + ::hx::TCast< ::String >::cast(message)) + HX_(")",29,00,00,00)),::hx::SourceInfo(HX_("source/backend/Discord.hx",01,c2,09,02),52,HX_("backend.DiscordClient",1d,03,ac,0d),HX_("onDisconnected",7a,eb,5a,b8)));
            	}


void DiscordClient_obj::initialize(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_eb10ff3c4d95691e_66_initialize)
HXLINE(  67)			::String localID = ::backend::DiscordClient_obj::clientID;
HXLINE(  68)			while((localID == ::backend::DiscordClient_obj::clientID)){
HXLINE(  71)				Discord_UpdateConnection();
HXLINE(  73)				Discord_RunCallbacks();
HXLINE(  76)				::Sys_obj::sleep(((Float)0.5));
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_eb10ff3c4d95691e_56_initialize)
HXLINE(  57)		 DiscordEventHandlers discordHandlers = DiscordEventHandlers();
HXLINE(  58)		discordHandlers.ready = ::cpp::Function< void (const  DiscordUser*)>(::hx::AnyCast(&::backend::DiscordClient_obj::onReady ));
HXLINE(  59)		discordHandlers.disconnected = ::cpp::Function< void (int,const char*)>(::hx::AnyCast(&::backend::DiscordClient_obj::onDisconnected ));
HXLINE(  60)		discordHandlers.errored = ::cpp::Function< void (int,const char*)>(::hx::AnyCast(&::backend::DiscordClient_obj::onError ));
HXLINE(  61)		const char* this1 = ::backend::DiscordClient_obj::clientID.utf8_str();
HXDLIN(  61)		Discord_Initialize(this1,&(discordHandlers),1,null());
HXLINE(  63)		if (!(::backend::DiscordClient_obj::isInitialized)) {
HXLINE(  63)			::haxe::Log_obj::trace(HX_("Discord Client initialized",f3,a9,32,06),::hx::SourceInfo(HX_("source/backend/Discord.hx",01,c2,09,02),63,HX_("backend.DiscordClient",1d,03,ac,0d),HX_("initialize",50,31,bb,ec)));
            		}
HXLINE(  65)		::sys::thread::_Thread::HaxeThread_obj::create( ::Dynamic(new _hx_Closure_0()),false);
HXLINE(  79)		::backend::DiscordClient_obj::isInitialized = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(DiscordClient_obj,initialize,(void))

void DiscordClient_obj::changePresence(::String __o_details,::String state,::String smallImageKey, ::Dynamic hasStartTimestamp, ::Dynamic endTimestamp){
            		::String details = __o_details;
            		if (::hx::IsNull(__o_details)) details = HX_("(TitleMenu)",3a,7f,1a,31);
            	HX_STACKFRAME(&_hx_pos_eb10ff3c4d95691e_83_changePresence)
HXLINE(  84)		Float startTimestamp = ( (Float)(0) );
HXLINE(  85)		if (( (bool)(hasStartTimestamp) )) {
HXLINE(  85)			startTimestamp = ::Date_obj::now()->getTime();
            		}
HXLINE(  86)		if (::hx::IsGreater( endTimestamp,0 )) {
HXLINE(  86)			endTimestamp = (startTimestamp + endTimestamp);
            		}
HXLINE(  88)		::backend::DiscordClient_obj::presence.details = details.utf8_str();
HXLINE(  89)		::backend::DiscordClient_obj::presence.state = state.utf8_str();
HXLINE(  90)		::backend::DiscordClient_obj::presence.largeImageKey = HX_("splaticon",5b,64,5e,2c).utf8_str();
HXLINE(  91)		::backend::DiscordClient_obj::presence.largeImageText = (HX_("Engine Version: ",e0,15,79,71) + ::states::MainMenuState_obj::psychEngineVersion).utf8_str();
HXLINE(  92)		::backend::DiscordClient_obj::presence.smallImageKey = smallImageKey.utf8_str();
HXLINE(  94)		::backend::DiscordClient_obj::presence.startTimestamp = ( (::cpp::Int64)(::Std_obj::_hx_int((startTimestamp / ( (Float)(1000) )))) );
HXLINE(  95)		::backend::DiscordClient_obj::presence.endTimestamp = ( (::cpp::Int64)(::Std_obj::_hx_int((( (Float)(endTimestamp) ) / ( (Float)(1000) )))) );
HXLINE(  97)		::backend::DiscordClient_obj::presence.button1Label = null();
HXLINE(  98)		::backend::DiscordClient_obj::presence.button1Url = null();
HXLINE(  99)		::backend::DiscordClient_obj::presence.button2Label = null();
HXLINE( 100)		::backend::DiscordClient_obj::presence.button2Url = null();
HXLINE( 102)		::backend::DiscordClient_obj::updatePresence();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(DiscordClient_obj,changePresence,(void))

void DiscordClient_obj::updatePresence(){
            	HX_STACKFRAME(&_hx_pos_eb10ff3c4d95691e_108_updatePresence)
HXDLIN( 108)		Discord_UpdatePresence(&(::backend::DiscordClient_obj::presence));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(DiscordClient_obj,updatePresence,(void))

void DiscordClient_obj::resetClientID(){
            	HX_STACKFRAME(&_hx_pos_eb10ff3c4d95691e_111_resetClientID)
HXDLIN( 111)		::backend::DiscordClient_obj::set_clientID(::backend::DiscordClient_obj::_defaultID);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(DiscordClient_obj,resetClientID,(void))

::String DiscordClient_obj::set_clientID(::String newID){
            	HX_STACKFRAME(&_hx_pos_eb10ff3c4d95691e_114_set_clientID)
HXLINE( 115)		bool change = (::backend::DiscordClient_obj::clientID != newID);
HXLINE( 116)		::backend::DiscordClient_obj::clientID = newID;
HXLINE( 118)		bool _hx_tmp;
HXDLIN( 118)		if (change) {
HXLINE( 118)			_hx_tmp = ::backend::DiscordClient_obj::isInitialized;
            		}
            		else {
HXLINE( 118)			_hx_tmp = false;
            		}
HXDLIN( 118)		if (_hx_tmp) {
HXLINE( 120)			::backend::DiscordClient_obj::shutdown();
HXLINE( 121)			::backend::DiscordClient_obj::initialize();
HXLINE( 122)			::backend::DiscordClient_obj::updatePresence();
            		}
HXLINE( 124)		return newID;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DiscordClient_obj,set_clientID,return )

void DiscordClient_obj::loadModRPC(){
            	HX_STACKFRAME(&_hx_pos_eb10ff3c4d95691e_129_loadModRPC)
HXLINE( 130)		 ::Dynamic pack = ::backend::Mods_obj::getPack(null());
HXLINE( 131)		bool _hx_tmp;
HXDLIN( 131)		bool _hx_tmp1;
HXDLIN( 131)		if (::hx::IsNotNull( pack )) {
HXLINE( 131)			_hx_tmp1 = ::hx::IsNotNull( pack->__Field(HX_("discordRPC",99,18,34,b0),::hx::paccDynamic) );
            		}
            		else {
HXLINE( 131)			_hx_tmp1 = false;
            		}
HXDLIN( 131)		if (_hx_tmp1) {
HXLINE( 131)			_hx_tmp = ::hx::IsNotEq( pack->__Field(HX_("discordRPC",99,18,34,b0),::hx::paccDynamic),::backend::DiscordClient_obj::clientID );
            		}
            		else {
HXLINE( 131)			_hx_tmp = false;
            		}
HXDLIN( 131)		if (_hx_tmp) {
HXLINE( 133)			::backend::DiscordClient_obj::set_clientID(( (::String)(pack->__Field(HX_("discordRPC",99,18,34,b0),::hx::paccDynamic)) ));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(DiscordClient_obj,loadModRPC,(void))

void DiscordClient_obj::addLuaCallbacks( cpp::Reference<lua_State> lua){
            	HX_STACKFRAME(&_hx_pos_eb10ff3c4d95691e_140_addLuaCallbacks)
HXLINE( 141)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(5)
            			void _hx_run(::String details,::String state,::String smallImageKey, ::Dynamic hasStartTimestamp, ::Dynamic endTimestamp){
            				HX_STACKFRAME(&_hx_pos_eb10ff3c4d95691e_142_addLuaCallbacks)
HXLINE( 142)				::backend::DiscordClient_obj::changePresence(details,state,smallImageKey,hasStartTimestamp,endTimestamp);
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 141)			::llua::Lua_helper_obj::callbacks->set(HX_("changeDiscordPresence",77,e8,07,3c), ::Dynamic(new _hx_Closure_0()));
HXDLIN( 141)			linc::callbacks::add_callback_function(lua,HX_("changeDiscordPresence",77,e8,07,3c));
            		}
HXLINE( 145)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run(::String newID){
            				HX_STACKFRAME(&_hx_pos_eb10ff3c4d95691e_145_addLuaCallbacks)
HXLINE( 146)				if (::hx::IsNull( newID )) {
HXLINE( 146)					newID = ::backend::DiscordClient_obj::_defaultID;
            				}
HXLINE( 147)				::backend::DiscordClient_obj::set_clientID(newID);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 145)			::llua::Lua_helper_obj::callbacks->set(HX_("changeDiscordClientID",22,09,c0,ea), ::Dynamic(new _hx_Closure_1()));
HXDLIN( 145)			linc::callbacks::add_callback_function(lua,HX_("changeDiscordClientID",22,09,c0,ea));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DiscordClient_obj,addLuaCallbacks,(void))


DiscordClient_obj::DiscordClient_obj()
{
}

bool DiscordClient_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"check") ) { outValue = check_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"prepare") ) { outValue = prepare_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"clientID") ) { outValue = ( clientID ); return true; }
		if (HX_FIELD_EQ(inName,"shutdown") ) { outValue = ( shutdown ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_defaultID") ) { outValue = ( _defaultID ); return true; }
		if (HX_FIELD_EQ(inName,"initialize") ) { outValue = initialize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadModRPC") ) { outValue = loadModRPC_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_clientID") ) { outValue = set_clientID_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"isInitialized") ) { outValue = ( isInitialized ); return true; }
		if (HX_FIELD_EQ(inName,"resetClientID") ) { outValue = resetClientID_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"changePresence") ) { outValue = changePresence_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"updatePresence") ) { outValue = updatePresence_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"addLuaCallbacks") ) { outValue = addLuaCallbacks_dyn(); return true; }
	}
	return false;
}

bool DiscordClient_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"clientID") ) { if (inCallProp == ::hx::paccAlways)  ioValue = ( set_clientID(ioValue.Cast< ::String >()) ); else clientID=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"shutdown") ) { shutdown=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_defaultID") ) { _defaultID=ioValue.Cast< ::String >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"isInitialized") ) { isInitialized=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *DiscordClient_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo DiscordClient_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &DiscordClient_obj::isInitialized,HX_("isInitialized",4a,45,34,40)},
	{::hx::fsString,(void *) &DiscordClient_obj::_defaultID,HX_("_defaultID",9d,06,9f,52)},
	{::hx::fsString,(void *) &DiscordClient_obj::clientID,HX_("clientID",e6,72,8f,15)},
	{::hx::fsUnknown /*  DiscordRichPresence */ ,(void *) &DiscordClient_obj::presence,HX_("presence",3b,52,d7,66)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &DiscordClient_obj::shutdown,HX_("shutdown",96,fc,0b,6b)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void DiscordClient_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DiscordClient_obj::isInitialized,"isInitialized");
	HX_MARK_MEMBER_NAME(DiscordClient_obj::_defaultID,"_defaultID");
	HX_MARK_MEMBER_NAME(DiscordClient_obj::clientID,"clientID");
	HX_MARK_MEMBER_NAME(DiscordClient_obj::presence,"presence");
	HX_MARK_MEMBER_NAME(DiscordClient_obj::shutdown,"shutdown");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DiscordClient_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DiscordClient_obj::isInitialized,"isInitialized");
	HX_VISIT_MEMBER_NAME(DiscordClient_obj::_defaultID,"_defaultID");
	HX_VISIT_MEMBER_NAME(DiscordClient_obj::clientID,"clientID");
	HX_VISIT_MEMBER_NAME(DiscordClient_obj::presence,"presence");
	HX_VISIT_MEMBER_NAME(DiscordClient_obj::shutdown,"shutdown");
};

#endif

::hx::Class DiscordClient_obj::__mClass;

static ::String DiscordClient_obj_sStaticFields[] = {
	HX_("isInitialized",4a,45,34,40),
	HX_("_defaultID",9d,06,9f,52),
	HX_("clientID",e6,72,8f,15),
	HX_("check",c8,98,b6,45),
	HX_("prepare",87,91,dd,37),
	HX_("shutdown",96,fc,0b,6b),
	HX_("initialize",50,31,bb,ec),
	HX_("changePresence",cb,8f,12,c0),
	HX_("updatePresence",64,45,01,9c),
	HX_("resetClientID",d5,5f,2e,46),
	HX_("set_clientID",63,4a,a2,df),
	HX_("loadModRPC",09,bc,e3,75),
	HX_("addLuaCallbacks",f7,ed,82,4d),
	::String(null())
};

void DiscordClient_obj::__register()
{
	DiscordClient_obj _hx_dummy;
	DiscordClient_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.DiscordClient",1d,03,ac,0d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DiscordClient_obj::__GetStatic;
	__mClass->mSetStaticField = &DiscordClient_obj::__SetStatic;
	__mClass->mMarkFunc = DiscordClient_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(DiscordClient_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< DiscordClient_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DiscordClient_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DiscordClient_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DiscordClient_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DiscordClient_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_eb10ff3c4d95691e_10_boot)
HXDLIN(  10)		isInitialized = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_eb10ff3c4d95691e_11_boot)
HXDLIN(  11)		_defaultID = HX_("863222024192262205",be,6e,40,13);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eb10ff3c4d95691e_12_boot)
HXDLIN(  12)		clientID = ::backend::DiscordClient_obj::_defaultID;
            	}
{
            	HX_STACKFRAME(&_hx_pos_eb10ff3c4d95691e_13_boot)
HXDLIN(  13)		presence = DiscordRichPresence();
            	}
	shutdown = new __default_shutdown;

}

} // end namespace backend
