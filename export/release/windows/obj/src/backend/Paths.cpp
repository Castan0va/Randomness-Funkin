// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flxanimate_FlxAnimate
#include <flxanimate/FlxAnimate.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_AssetCache
#include <lime/utils/AssetCache.h>
#endif
#ifndef INCLUDED_lime_utils_Assets
#include <lime/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_system_System
#include <openfl/system/System.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_IAssetCache
#include <openfl/utils/IAssetCache.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_31_excludeAsset,"backend.Paths","excludeAsset",0xd9600a30,"backend.Paths.excludeAsset","backend/Paths.hx",31,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_37_clearUnusedMemory,"backend.Paths","clearUnusedMemory",0xd6c80a2a,"backend.Paths.clearUnusedMemory","backend/Paths.hx",37,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_64_clearStoredMemory,"backend.Paths","clearStoredMemory",0x03cf7a37,"backend.Paths.clearStoredMemory","backend/Paths.hx",64,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_95_setCurrentLevel,"backend.Paths","setCurrentLevel",0x38c9f013,"backend.Paths.setCurrentLevel","backend/Paths.hx",95,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_99_getPath,"backend.Paths","getPath",0x40f68221,"backend.Paths.getPath","backend/Paths.hx",99,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_130_getLibraryPath,"backend.Paths","getLibraryPath",0x040ffd44,"backend.Paths.getLibraryPath","backend/Paths.hx",130,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_134_getLibraryPathForce,"backend.Paths","getLibraryPathForce",0xf7e18e07,"backend.Paths.getLibraryPathForce","backend/Paths.hx",134,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_142_getSharedPath,"backend.Paths","getSharedPath",0x31e24866,"backend.Paths.getSharedPath","backend/Paths.hx",142,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_147_txt,"backend.Paths","txt",0x9a070036,"backend.Paths.txt","backend/Paths.hx",147,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_152_xml,"backend.Paths","xml",0x9a09ff9d,"backend.Paths.xml","backend/Paths.hx",152,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_157_json,"backend.Paths","json",0x25793da2,"backend.Paths.json","backend/Paths.hx",157,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_162_shaderFragment,"backend.Paths","shaderFragment",0x2f2ae00f,"backend.Paths.shaderFragment","backend/Paths.hx",162,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_166_shaderVertex,"backend.Paths","shaderVertex",0xb9407de3,"backend.Paths.shaderVertex","backend/Paths.hx",166,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_170_lua,"backend.Paths","lua",0x9a00eb7e,"backend.Paths.lua","backend/Paths.hx",170,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_174_video,"backend.Paths","video",0x86c723c1,"backend.Paths.video","backend/Paths.hx",174,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_185_sound,"backend.Paths","sound",0xd0979c15,"backend.Paths.sound","backend/Paths.hx",185,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_192_soundRandom,"backend.Paths","soundRandom",0x459aeff8,"backend.Paths.soundRandom","backend/Paths.hx",192,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_196_music,"backend.Paths","music",0x6025dfeb,"backend.Paths.music","backend/Paths.hx",196,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_202_voices,"backend.Paths","voices",0xdf2c247b,"backend.Paths.voices","backend/Paths.hx",202,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_211_inst,"backend.Paths","inst",0x24cc3f40,"backend.Paths.inst","backend/Paths.hx",211,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_219_image,"backend.Paths","image",0x0d342ea1,"backend.Paths.image","backend/Paths.hx",219,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_256_cacheBitmap,"backend.Paths","cacheBitmap",0xea8c0397,"backend.Paths.cacheBitmap","backend/Paths.hx",256,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_290_getTextFromFile,"backend.Paths","getTextFromFile",0x5992934f,"backend.Paths.getTextFromFile","backend/Paths.hx",290,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_316_font,"backend.Paths","font",0x22d15949,"backend.Paths.font","backend/Paths.hx",316,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_327_fileExists,"backend.Paths","fileExists",0x881e3872,"backend.Paths.fileExists","backend/Paths.hx",327,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_350_getAtlas,"backend.Paths","getAtlas",0x00419d4f,"backend.Paths.getAtlas","backend/Paths.hx",350,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_379_getSparrowAtlas,"backend.Paths","getSparrowAtlas",0x085cce1b,"backend.Paths.getSparrowAtlas","backend/Paths.hx",379,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_394_getPackerAtlas,"backend.Paths","getPackerAtlas",0xc77f8ae9,"backend.Paths.getPackerAtlas","backend/Paths.hx",394,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_409_getAsepriteAtlas,"backend.Paths","getAsepriteAtlas",0xe23e11ca,"backend.Paths.getAsepriteAtlas","backend/Paths.hx",409,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_423_formatToSongPath,"backend.Paths","formatToSongPath",0x79918146,"backend.Paths.formatToSongPath","backend/Paths.hx",423,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_432_returnSound,"backend.Paths","returnSound",0x688821c5,"backend.Paths.returnSound","backend/Paths.hx",432,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_472_mods,"backend.Paths","mods",0x2771ceeb,"backend.Paths.mods","backend/Paths.hx",472,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_476_modsFont,"backend.Paths","modsFont",0x3d34aa5a,"backend.Paths.modsFont","backend/Paths.hx",476,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_480_modsJson,"backend.Paths","modsJson",0x3fdc8eb3,"backend.Paths.modsJson","backend/Paths.hx",480,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_484_modsVideo,"backend.Paths","modsVideo",0x834ac190,"backend.Paths.modsVideo","backend/Paths.hx",484,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_488_modsSounds,"backend.Paths","modsSounds",0xaab76e0f,"backend.Paths.modsSounds","backend/Paths.hx",488,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_492_modsImages,"backend.Paths","modsImages",0x771b1603,"backend.Paths.modsImages","backend/Paths.hx",492,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_496_modsXml,"backend.Paths","modsXml",0x1abb3bac,"backend.Paths.modsXml","backend/Paths.hx",496,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_500_modsTxt,"backend.Paths","modsTxt",0x1ab83c45,"backend.Paths.modsTxt","backend/Paths.hx",500,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_504_modsImagesJson,"backend.Paths","modsImagesJson",0x5cd341cb,"backend.Paths.modsImagesJson","backend/Paths.hx",504,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_521_modFolders,"backend.Paths","modFolders",0xc7f8825d,"backend.Paths.modFolders","backend/Paths.hx",521,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_540_loadAnimateAtlas,"backend.Paths","loadAnimateAtlas",0x34918caa,"backend.Paths.loadAnimateAtlas","backend/Paths.hx",540,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_27_boot,"backend.Paths","boot",0x202c7fac,"backend.Paths.boot","backend/Paths.hx",27,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_28_boot,"backend.Paths","boot",0x202c7fac,"backend.Paths.boot","backend/Paths.hx",28,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_35_boot,"backend.Paths","boot",0x202c7fac,"backend.Paths.boot","backend/Paths.hx",35,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_63_boot,"backend.Paths","boot",0x202c7fac,"backend.Paths.boot","backend/Paths.hx",63,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_217_boot,"backend.Paths","boot",0x202c7fac,"backend.Paths.boot","backend/Paths.hx",217,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_431_boot,"backend.Paths","boot",0x202c7fac,"backend.Paths.boot","backend/Paths.hx",431,0x7c630d0b)
namespace backend{

void Paths_obj::__construct() { }

Dynamic Paths_obj::__CreateEmpty() { return new Paths_obj; }

void *Paths_obj::_hx_vtable = 0;

Dynamic Paths_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Paths_obj > _hx_result = new Paths_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Paths_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0d5689de;
}

::String Paths_obj::SOUND_EXT;

::String Paths_obj::VIDEO_EXT;

void Paths_obj::excludeAsset(::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_31_excludeAsset)
HXDLIN(  31)		if (!(::backend::Paths_obj::dumpExclusions->contains(key))) {
HXLINE(  32)			::backend::Paths_obj::dumpExclusions->push(key);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,excludeAsset,(void))

::Array< ::String > Paths_obj::dumpExclusions;

void Paths_obj::clearUnusedMemory(){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_37_clearUnusedMemory)
HXLINE(  39)		{
HXLINE(  39)			 ::Dynamic key = ::backend::Paths_obj::currentTrackedAssets->keys();
HXDLIN(  39)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  39)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  41)				bool _hx_tmp;
HXDLIN(  41)				if (!(::backend::Paths_obj::localTrackedAssets->contains(key1))) {
HXLINE(  41)					_hx_tmp = !(::backend::Paths_obj::dumpExclusions->contains(key1));
            				}
            				else {
HXLINE(  41)					_hx_tmp = false;
            				}
HXDLIN(  41)				if (_hx_tmp) {
HXLINE(  42)					 ::flixel::graphics::FlxGraphic obj = ( ( ::flixel::graphics::FlxGraphic)(::backend::Paths_obj::currentTrackedAssets->get(key1)) );
HXLINE(  44)					if (::hx::IsNotNull( obj )) {
HXLINE(  46)						::flixel::FlxG_obj::bitmap->_cache->remove(key1);
HXLINE(  47)						::openfl::utils::IAssetCache_obj::removeBitmapData(::openfl::utils::Assets_obj::cache,key1);
HXLINE(  48)						::backend::Paths_obj::currentTrackedAssets->remove(key1);
HXLINE(  51)						obj->persist = false;
HXLINE(  52)						obj->set_destroyOnNoUse(true);
HXLINE(  53)						obj->destroy();
            					}
            				}
            			}
            		}
HXLINE(  59)		::openfl::_hx_system::System_obj::gc();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Paths_obj,clearUnusedMemory,(void))

::Array< ::String > Paths_obj::localTrackedAssets;

void Paths_obj::clearStoredMemory(){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_64_clearStoredMemory)
HXLINE(  67)		{
HXLINE(  67)			 ::Dynamic key = ::flixel::FlxG_obj::bitmap->_cache->keys();
HXDLIN(  67)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  67)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  69)				 ::flixel::graphics::FlxGraphic obj = ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(key1)) );
HXLINE(  70)				bool _hx_tmp;
HXDLIN(  70)				if (::hx::IsNotNull( obj )) {
HXLINE(  70)					_hx_tmp = !(::backend::Paths_obj::currentTrackedAssets->exists(key1));
            				}
            				else {
HXLINE(  70)					_hx_tmp = false;
            				}
HXDLIN(  70)				if (_hx_tmp) {
HXLINE(  72)					::openfl::utils::IAssetCache_obj::removeBitmapData(::openfl::utils::Assets_obj::cache,key1);
HXLINE(  73)					::flixel::FlxG_obj::bitmap->_cache->remove(key1);
HXLINE(  74)					obj->destroy();
            				}
            			}
            		}
HXLINE(  79)		{
HXLINE(  79)			::Dynamic map = ::backend::Paths_obj::currentTrackedSounds;
HXDLIN(  79)			::Dynamic _g_map = map;
HXDLIN(  79)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN(  79)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  79)				::String key2 = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  79)				 ::openfl::media::Sound _g_value = ( ( ::openfl::media::Sound)(::haxe::IMap_obj::get(_g_map,key2)) );
HXDLIN(  79)				::String _g_key = key2;
HXDLIN(  79)				::String key3 = _g_key;
HXDLIN(  79)				 ::openfl::media::Sound asset = _g_value;
HXLINE(  81)				bool _hx_tmp1;
HXDLIN(  81)				bool _hx_tmp2;
HXDLIN(  81)				if (!(::backend::Paths_obj::localTrackedAssets->contains(key3))) {
HXLINE(  81)					_hx_tmp2 = !(::backend::Paths_obj::dumpExclusions->contains(key3));
            				}
            				else {
HXLINE(  81)					_hx_tmp2 = false;
            				}
HXDLIN(  81)				if (_hx_tmp2) {
HXLINE(  81)					_hx_tmp1 = ::hx::IsNotNull( asset );
            				}
            				else {
HXLINE(  81)					_hx_tmp1 = false;
            				}
HXDLIN(  81)				if (_hx_tmp1) {
HXLINE(  83)					::lime::utils::Assets_obj::cache->clear(key3);
HXLINE(  84)					::backend::Paths_obj::currentTrackedSounds->remove(key3);
            				}
            			}
            		}
HXLINE(  88)		::backend::Paths_obj::localTrackedAssets = ::Array_obj< ::String >::__new(0);
HXLINE(  89)		::openfl::utils::IAssetCache_obj::clear(::openfl::utils::Assets_obj::cache,HX_("songs",fe,36,c7,80));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Paths_obj,clearStoredMemory,(void))

::String Paths_obj::currentLevel;

void Paths_obj::setCurrentLevel(::String name){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_95_setCurrentLevel)
HXDLIN(  95)		::backend::Paths_obj::currentLevel = name.toLowerCase();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,setCurrentLevel,(void))

::String Paths_obj::getPath(::String file,::String __o_type,::String library, ::Dynamic __o_modsAllowed){
            		::String type = __o_type;
            		if (::hx::IsNull(__o_type)) type = HX_("TEXT",ad,94,ba,37);
            		 ::Dynamic modsAllowed = __o_modsAllowed;
            		if (::hx::IsNull(__o_modsAllowed)) modsAllowed = false;
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_99_getPath)
HXLINE( 101)		if (( (bool)(modsAllowed) )) {
HXLINE( 103)			::String customFile = file;
HXLINE( 104)			if (::hx::IsNotNull( library )) {
HXLINE( 105)				customFile = (((HX_("",00,00,00,00) + library) + HX_("/",2f,00,00,00)) + file);
            			}
HXLINE( 107)			::String modded = ::backend::Paths_obj::modFolders(customFile);
HXLINE( 108)			if (::sys::FileSystem_obj::exists(modded)) {
HXLINE( 108)				return modded;
            			}
            		}
HXLINE( 112)		if (::hx::IsNotNull( library )) {
HXLINE( 113)			return ::backend::Paths_obj::getLibraryPath(file,library);
            		}
HXLINE( 115)		if (::hx::IsNotNull( ::backend::Paths_obj::currentLevel )) {
HXLINE( 117)			::String levelPath = HX_("",00,00,00,00);
HXLINE( 118)			if ((::backend::Paths_obj::currentLevel != HX_("shared",a5,5e,2b,1d))) {
HXLINE( 119)				::String level = ::backend::Paths_obj::currentLevel;
HXDLIN( 119)				if (::hx::IsNull( level )) {
HXLINE( 119)					level = HX_("week_assets",ae,a0,93,a0);
            				}
HXDLIN( 119)				::String returnPath = ((((HX_("week_assets",ae,a0,93,a0) + HX_(":assets/",52,05,4a,2c)) + level) + HX_("/",2f,00,00,00)) + file);
HXDLIN( 119)				levelPath = returnPath;
HXLINE( 120)				if (::openfl::utils::Assets_obj::exists(levelPath,type)) {
HXLINE( 121)					return levelPath;
            				}
            			}
            		}
HXLINE( 125)		::String file1 = file;
HXDLIN( 125)		if (::hx::IsNull( file1 )) {
HXLINE( 125)			file1 = HX_("",00,00,00,00);
            		}
HXDLIN( 125)		return (HX_("assets/shared/",1e,69,1e,47) + file1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Paths_obj,getPath,return )

::String Paths_obj::getLibraryPath(::String file,::String __o_library){
            		::String library = __o_library;
            		if (::hx::IsNull(__o_library)) library = HX_("shared",a5,5e,2b,1d);
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_130_getLibraryPath)
HXDLIN( 130)		if ((library == HX_("shared",a5,5e,2b,1d))) {
HXDLIN( 130)			::String file1 = file;
HXDLIN( 130)			if (::hx::IsNull( file1 )) {
HXDLIN( 130)				file1 = HX_("",00,00,00,00);
            			}
HXDLIN( 130)			return (HX_("assets/shared/",1e,69,1e,47) + file1);
            		}
            		else {
HXDLIN( 130)			::String level = null();
HXDLIN( 130)			if (::hx::IsNull( level )) {
HXDLIN( 130)				level = library;
            			}
HXDLIN( 130)			::String returnPath = (((((HX_("",00,00,00,00) + library) + HX_(":assets/",52,05,4a,2c)) + level) + HX_("/",2f,00,00,00)) + file);
HXDLIN( 130)			return returnPath;
            		}
HXDLIN( 130)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,getLibraryPath,return )

::String Paths_obj::getLibraryPathForce(::String file,::String library,::String level){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_134_getLibraryPathForce)
HXLINE( 135)		if (::hx::IsNull( level )) {
HXLINE( 135)			level = library;
            		}
HXLINE( 136)		::String returnPath = (((((HX_("",00,00,00,00) + library) + HX_(":assets/",52,05,4a,2c)) + level) + HX_("/",2f,00,00,00)) + file);
HXLINE( 137)		return returnPath;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Paths_obj,getLibraryPathForce,return )

::String Paths_obj::getSharedPath(::String __o_file){
            		::String file = __o_file;
            		if (::hx::IsNull(__o_file)) file = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_142_getSharedPath)
HXDLIN( 142)		return (HX_("assets/shared/",1e,69,1e,47) + file);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,getSharedPath,return )

::String Paths_obj::txt(::String key,::String library){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_147_txt)
HXDLIN( 147)		return ::backend::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + key) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,txt,return )

::String Paths_obj::xml(::String key,::String library){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_152_xml)
HXDLIN( 152)		return ::backend::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + key) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,xml,return )

::String Paths_obj::json(::String key,::String library){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_157_json)
HXDLIN( 157)		return ::backend::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + key) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,json,return )

::String Paths_obj::shaderFragment(::String key,::String library){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_162_shaderFragment)
HXDLIN( 162)		return ::backend::Paths_obj::getPath(((HX_("shaders/",c1,f6,2a,36) + key) + HX_(".frag",60,48,31,c0)),HX_("TEXT",ad,94,ba,37),library,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,shaderFragment,return )

::String Paths_obj::shaderVertex(::String key,::String library){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_166_shaderVertex)
HXDLIN( 166)		return ::backend::Paths_obj::getPath(((HX_("shaders/",c1,f6,2a,36) + key) + HX_(".vert",df,e3,ba,ca)),HX_("TEXT",ad,94,ba,37),library,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,shaderVertex,return )

::String Paths_obj::lua(::String key,::String library){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_170_lua)
HXDLIN( 170)		return ::backend::Paths_obj::getPath(((HX_("",00,00,00,00) + key) + HX_(".lua",4a,2a,ba,1e)),HX_("TEXT",ad,94,ba,37),library,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,lua,return )

::String Paths_obj::video(::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_174_video)
HXLINE( 176)		::String file = ::backend::Paths_obj::modFolders((((HX_("videos/",97,cd,86,fd) + key) + HX_(".",2e,00,00,00)) + HX_("mp4",71,17,53,00)));
HXLINE( 177)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 178)			return file;
            		}
HXLINE( 181)		return (((HX_("assets/videos/",cb,c4,dd,db) + key) + HX_(".",2e,00,00,00)) + HX_("mp4",71,17,53,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,video,return )

 ::openfl::media::Sound Paths_obj::sound(::String key,::String library){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_185_sound)
HXLINE( 186)		 ::openfl::media::Sound sound = ::backend::Paths_obj::returnSound(HX_("sounds",c4,a8,2e,32),key,library);
HXLINE( 187)		return sound;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,sound,return )

 ::openfl::media::Sound Paths_obj::soundRandom(::String key,int min,int max,::String library){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_192_soundRandom)
HXDLIN( 192)		return ::backend::Paths_obj::sound((key + ::flixel::FlxG_obj::random->_hx_int(min,max,null())),library);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Paths_obj,soundRandom,return )

 ::openfl::media::Sound Paths_obj::music(::String key,::String library){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_196_music)
HXLINE( 197)		 ::openfl::media::Sound file = ::backend::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),key,library);
HXLINE( 198)		return file;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,music,return )

 ::Dynamic Paths_obj::voices(::String song,::String postfix){
            	HX_GC_STACKFRAME(&_hx_pos_359943aa63fd1400_202_voices)
HXLINE( 203)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN( 203)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN( 203)		::String path = invalidChars->split(::StringTools_obj::replace(song,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN( 203)		::String songKey = ((HX_("",00,00,00,00) + hideChars->split(path)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34));
HXLINE( 204)		if (::hx::IsNotNull( postfix )) {
HXLINE( 204)			songKey = (songKey + (HX_("-",2d,00,00,00) + postfix));
            		}
HXLINE( 206)		 ::openfl::media::Sound voices = ::backend::Paths_obj::returnSound(null(),songKey,HX_("songs",fe,36,c7,80));
HXLINE( 207)		return voices;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,voices,return )

 ::Dynamic Paths_obj::inst(::String song){
            	HX_GC_STACKFRAME(&_hx_pos_359943aa63fd1400_211_inst)
HXLINE( 212)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN( 212)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN( 212)		::String path = invalidChars->split(::StringTools_obj::replace(song,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN( 212)		::String songKey = ((HX_("",00,00,00,00) + hideChars->split(path)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Inst",95,b3,69,40));
HXLINE( 213)		 ::openfl::media::Sound inst = ::backend::Paths_obj::returnSound(null(),songKey,HX_("songs",fe,36,c7,80));
HXLINE( 214)		return inst;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,inst,return )

 ::haxe::ds::StringMap Paths_obj::currentTrackedAssets;

 ::flixel::graphics::FlxGraphic Paths_obj::image(::String key,::String library, ::Dynamic __o_allowGPU){
            		 ::Dynamic allowGPU = __o_allowGPU;
            		if (::hx::IsNull(__o_allowGPU)) allowGPU = true;
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_219_image)
HXLINE( 220)		 ::openfl::display::BitmapData bitmap = null();
HXLINE( 221)		::String file = null();
HXLINE( 224)		file = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".png",3b,2d,bd,1e)));
HXLINE( 225)		if (::backend::Paths_obj::currentTrackedAssets->exists(file)) {
HXLINE( 227)			::backend::Paths_obj::localTrackedAssets->push(file);
HXLINE( 228)			return ( ( ::flixel::graphics::FlxGraphic)(::backend::Paths_obj::currentTrackedAssets->get(file)) );
            		}
            		else {
HXLINE( 230)			if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 231)				bitmap = ::openfl::display::BitmapData_obj::fromFile(file);
            			}
            			else {
HXLINE( 235)				file = ::backend::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library,null());
HXLINE( 236)				if (::backend::Paths_obj::currentTrackedAssets->exists(file)) {
HXLINE( 238)					::backend::Paths_obj::localTrackedAssets->push(file);
HXLINE( 239)					return ( ( ::flixel::graphics::FlxGraphic)(::backend::Paths_obj::currentTrackedAssets->get(file)) );
            				}
            				else {
HXLINE( 241)					if (::openfl::utils::Assets_obj::exists(file,HX_("IMAGE",3b,57,57,3b))) {
HXLINE( 242)						bitmap = ::openfl::utils::Assets_obj::getBitmapData(file,null());
            					}
            				}
            			}
            		}
HXLINE( 245)		if (::hx::IsNotNull( bitmap )) {
HXLINE( 247)			 ::flixel::graphics::FlxGraphic retVal = ::backend::Paths_obj::cacheBitmap(file,bitmap,allowGPU);
HXLINE( 248)			if (::hx::IsNotNull( retVal )) {
HXLINE( 248)				return retVal;
            			}
            		}
HXLINE( 251)		::haxe::Log_obj::trace(((HX_("oh no its returning null NOOOO (",5b,b0,87,b4) + file) + HX_(")",29,00,00,00)),::hx::SourceInfo(HX_("source/backend/Paths.hx",ff,43,8c,3d),251,HX_("backend.Paths",34,17,99,92),HX_("image",5b,1f,69,bd)));
HXLINE( 252)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Paths_obj,image,return )

 ::flixel::graphics::FlxGraphic Paths_obj::cacheBitmap(::String file, ::openfl::display::BitmapData bitmap, ::Dynamic __o_allowGPU){
            		 ::Dynamic allowGPU = __o_allowGPU;
            		if (::hx::IsNull(__o_allowGPU)) allowGPU = true;
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_256_cacheBitmap)
HXLINE( 257)		if (::hx::IsNull( bitmap )) {
HXLINE( 260)			if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 261)				bitmap = ::openfl::display::BitmapData_obj::fromFile(file);
            			}
            			else {
HXLINE( 265)				if (::openfl::utils::Assets_obj::exists(file,HX_("IMAGE",3b,57,57,3b))) {
HXLINE( 266)					bitmap = ::openfl::utils::Assets_obj::getBitmapData(file,null());
            				}
            			}
HXLINE( 269)			if (::hx::IsNull( bitmap )) {
HXLINE( 269)				return null();
            			}
            		}
HXLINE( 272)		::backend::Paths_obj::localTrackedAssets->push(file);
HXLINE( 273)		bool _hx_tmp;
HXDLIN( 273)		if (( (bool)(allowGPU) )) {
HXLINE( 273)			_hx_tmp = ::backend::ClientPrefs_obj::data->cacheOnGPU;
            		}
            		else {
HXLINE( 273)			_hx_tmp = false;
            		}
HXDLIN( 273)		if (_hx_tmp) {
HXLINE( 275)			 ::openfl::display3D::textures::RectangleTexture texture = ::openfl::Lib_obj::get_current()->stage->context3D->createRectangleTexture(bitmap->width,bitmap->height,1,true);
HXLINE( 276)			texture->uploadFromBitmapData(bitmap);
HXLINE( 277)			bitmap->image->set_data(null());
HXLINE( 278)			bitmap->dispose();
HXLINE( 279)			bitmap->disposeImage();
HXLINE( 280)			bitmap = ::openfl::display::BitmapData_obj::fromTexture(texture);
            		}
HXLINE( 282)		 ::flixel::graphics::FlxGraphic newGraphic = ::flixel::graphics::FlxGraphic_obj::fromBitmapData(bitmap,false,file,null());
HXLINE( 283)		newGraphic->persist = true;
HXLINE( 284)		newGraphic->set_destroyOnNoUse(false);
HXLINE( 285)		::backend::Paths_obj::currentTrackedAssets->set(file,newGraphic);
HXLINE( 286)		return newGraphic;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Paths_obj,cacheBitmap,return )

::String Paths_obj::getTextFromFile(::String key, ::Dynamic __o_ignoreMods){
            		 ::Dynamic ignoreMods = __o_ignoreMods;
            		if (::hx::IsNull(__o_ignoreMods)) ignoreMods = false;
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_290_getTextFromFile)
HXLINE( 293)		bool _hx_tmp;
HXDLIN( 293)		if (!(( (bool)(ignoreMods) ))) {
HXLINE( 293)			_hx_tmp = ::sys::FileSystem_obj::exists(::backend::Paths_obj::modFolders(key));
            		}
            		else {
HXLINE( 293)			_hx_tmp = false;
            		}
HXDLIN( 293)		if (_hx_tmp) {
HXLINE( 294)			return ::sys::io::File_obj::getContent(::backend::Paths_obj::modFolders(key));
            		}
HXLINE( 297)		::String file = key;
HXDLIN( 297)		if (::hx::IsNull( file )) {
HXLINE( 297)			file = HX_("",00,00,00,00);
            		}
HXDLIN( 297)		if (::sys::FileSystem_obj::exists((HX_("assets/shared/",1e,69,1e,47) + file))) {
HXLINE( 298)			::String file1 = key;
HXDLIN( 298)			if (::hx::IsNull( file1 )) {
HXLINE( 298)				file1 = HX_("",00,00,00,00);
            			}
HXDLIN( 298)			return ::sys::io::File_obj::getContent((HX_("assets/shared/",1e,69,1e,47) + file1));
            		}
HXLINE( 300)		if (::hx::IsNotNull( ::backend::Paths_obj::currentLevel )) {
HXLINE( 302)			::String levelPath = HX_("",00,00,00,00);
HXLINE( 303)			if ((::backend::Paths_obj::currentLevel != HX_("shared",a5,5e,2b,1d))) {
HXLINE( 304)				::String level = ::backend::Paths_obj::currentLevel;
HXDLIN( 304)				if (::hx::IsNull( level )) {
HXLINE( 304)					level = HX_("week_assets",ae,a0,93,a0);
            				}
HXDLIN( 304)				::String returnPath = ((((HX_("week_assets",ae,a0,93,a0) + HX_(":assets/",52,05,4a,2c)) + level) + HX_("/",2f,00,00,00)) + key);
HXDLIN( 304)				levelPath = returnPath;
HXLINE( 305)				if (::sys::FileSystem_obj::exists(levelPath)) {
HXLINE( 306)					return ::sys::io::File_obj::getContent(levelPath);
            				}
            			}
            		}
HXLINE( 310)		::String path = ::backend::Paths_obj::getPath(key,HX_("TEXT",ad,94,ba,37),null(),null());
HXLINE( 311)		if (::openfl::utils::Assets_obj::exists(path,HX_("TEXT",ad,94,ba,37))) {
HXLINE( 311)			return ::lime::utils::Assets_obj::getText(path);
            		}
HXLINE( 312)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,getTextFromFile,return )

::String Paths_obj::font(::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_316_font)
HXLINE( 318)		::String file = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + key));
HXLINE( 319)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 320)			return file;
            		}
HXLINE( 323)		return (HX_("assets/fonts/",37,ff,a5,9c) + key);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,font,return )

bool Paths_obj::fileExists(::String key,::String type, ::Dynamic __o_ignoreMods,::String library){
            		 ::Dynamic ignoreMods = __o_ignoreMods;
            		if (::hx::IsNull(__o_ignoreMods)) ignoreMods = false;
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_327_fileExists)
HXLINE( 329)		if (!(( (bool)(ignoreMods) ))) {
HXLINE( 331)			{
HXLINE( 331)				int _g = 0;
HXDLIN( 331)				::Array< ::String > _g1 = ::backend::Mods_obj::globalMods;
HXDLIN( 331)				while((_g < _g1->length)){
HXLINE( 331)					::String mod = _g1->__get(_g);
HXDLIN( 331)					_g = (_g + 1);
HXLINE( 332)					::String key1 = (((HX_("",00,00,00,00) + mod) + HX_("/",2f,00,00,00)) + key);
HXDLIN( 332)					if (::hx::IsNull( key1 )) {
HXLINE( 332)						key1 = HX_("",00,00,00,00);
            					}
HXDLIN( 332)					if (::sys::FileSystem_obj::exists((HX_("mods/",9e,2f,58,0c) + key1))) {
HXLINE( 333)						return true;
            					}
            				}
            			}
HXLINE( 335)			bool _hx_tmp;
HXDLIN( 335)			::String key2 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + key);
HXDLIN( 335)			if (::hx::IsNull( key2 )) {
HXLINE( 335)				key2 = HX_("",00,00,00,00);
            			}
HXDLIN( 335)			if (!(::sys::FileSystem_obj::exists((HX_("mods/",9e,2f,58,0c) + key2)))) {
HXLINE( 335)				::String key3 = key;
HXDLIN( 335)				if (::hx::IsNull( key3 )) {
HXLINE( 335)					key3 = HX_("",00,00,00,00);
            				}
HXDLIN( 335)				_hx_tmp = ::sys::FileSystem_obj::exists((HX_("mods/",9e,2f,58,0c) + key3));
            			}
            			else {
HXLINE( 335)				_hx_tmp = true;
            			}
HXDLIN( 335)			if (_hx_tmp) {
HXLINE( 336)				return true;
            			}
HXLINE( 338)			::String key4 = (HX_("",00,00,00,00) + key);
HXDLIN( 338)			if (::hx::IsNull( key4 )) {
HXLINE( 338)				key4 = HX_("",00,00,00,00);
            			}
HXDLIN( 338)			if (::sys::FileSystem_obj::exists((HX_("mods/",9e,2f,58,0c) + key4))) {
HXLINE( 339)				return true;
            			}
            		}
HXLINE( 343)		if (::openfl::utils::Assets_obj::exists(::backend::Paths_obj::getPath(key,type,library,false),null())) {
HXLINE( 344)			return true;
            		}
HXLINE( 346)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Paths_obj,fileExists,return )

 ::flixel::graphics::frames::FlxAtlasFrames Paths_obj::getAtlas(::String key,::String library, ::Dynamic __o_allowGPU){
            		 ::Dynamic allowGPU = __o_allowGPU;
            		if (::hx::IsNull(__o_allowGPU)) allowGPU = true;
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_350_getAtlas)
HXLINE( 351)		bool useMod = false;
HXLINE( 352)		 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(key,library,allowGPU);
HXLINE( 354)		 ::Dynamic myXml = ::backend::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library,true);
HXLINE( 355)		bool _hx_tmp;
HXDLIN( 355)		if (!(::openfl::utils::Assets_obj::exists(( (::String)(myXml) ),null()))) {
HXLINE( 355)			if (::sys::FileSystem_obj::exists(( (::String)(myXml) ))) {
HXLINE( 355)				useMod = true;
HXDLIN( 355)				_hx_tmp = useMod;
            			}
            			else {
HXLINE( 355)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 355)			_hx_tmp = true;
            		}
HXDLIN( 355)		if (_hx_tmp) {
HXLINE( 358)			 ::Dynamic _hx_tmp1;
HXDLIN( 358)			if (useMod) {
HXLINE( 358)				_hx_tmp1 = ::sys::io::File_obj::getContent(( (::String)(myXml) ));
            			}
            			else {
HXLINE( 358)				_hx_tmp1 = myXml;
            			}
HXDLIN( 358)			return ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded,_hx_tmp1);
            		}
            		else {
HXLINE( 365)			 ::Dynamic myJson = ::backend::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library,true);
HXLINE( 366)			bool _hx_tmp2;
HXDLIN( 366)			if (!(::openfl::utils::Assets_obj::exists(( (::String)(myJson) ),null()))) {
HXLINE( 366)				if (::sys::FileSystem_obj::exists(( (::String)(myJson) ))) {
HXLINE( 366)					useMod = true;
HXDLIN( 366)					_hx_tmp2 = useMod;
            				}
            				else {
HXLINE( 366)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE( 366)				_hx_tmp2 = true;
            			}
HXDLIN( 366)			if (_hx_tmp2) {
HXLINE( 369)				 ::Dynamic _hx_tmp3;
HXDLIN( 369)				if (useMod) {
HXLINE( 369)					_hx_tmp3 = ::sys::io::File_obj::getContent(( (::String)(myJson) ));
            				}
            				else {
HXLINE( 369)					_hx_tmp3 = myJson;
            				}
HXDLIN( 369)				return ::flixel::graphics::frames::FlxAtlasFrames_obj::fromTexturePackerJson(imageLoaded,_hx_tmp3,null());
            			}
            		}
HXLINE( 375)		 ::flixel::graphics::FlxGraphic imageLoaded1 = ::backend::Paths_obj::image(key,library,true);
HXDLIN( 375)		bool txtExists = false;
HXDLIN( 375)		::String txt = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".txt",02,3f,c0,1e)));
HXDLIN( 375)		if (::sys::FileSystem_obj::exists(txt)) {
HXLINE( 375)			txtExists = true;
            		}
HXDLIN( 375)		::String _hx_tmp4;
HXDLIN( 375)		if (txtExists) {
HXLINE( 375)			_hx_tmp4 = ::sys::io::File_obj::getContent(txt);
            		}
            		else {
HXLINE( 375)			_hx_tmp4 = ::backend::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".txt",02,3f,c0,1e)),null(),library,null());
            		}
HXDLIN( 375)		return ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSpriteSheetPacker(imageLoaded1,_hx_tmp4);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Paths_obj,getAtlas,return )

 ::flixel::graphics::frames::FlxAtlasFrames Paths_obj::getSparrowAtlas(::String key,::String library, ::Dynamic __o_allowGPU){
            		 ::Dynamic allowGPU = __o_allowGPU;
            		if (::hx::IsNull(__o_allowGPU)) allowGPU = true;
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_379_getSparrowAtlas)
HXLINE( 380)		 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(key,library,allowGPU);
HXLINE( 382)		bool xmlExists = false;
HXLINE( 384)		::String xml = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e)));
HXLINE( 385)		if (::sys::FileSystem_obj::exists(xml)) {
HXLINE( 385)			xmlExists = true;
            		}
HXLINE( 387)		 ::Dynamic _hx_tmp;
HXDLIN( 387)		if (xmlExists) {
HXLINE( 387)			_hx_tmp = ::sys::io::File_obj::getContent(xml);
            		}
            		else {
HXLINE( 387)			_hx_tmp = ::backend::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e)),null(),library,null());
            		}
HXDLIN( 387)		return ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded,_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Paths_obj,getSparrowAtlas,return )

 ::flixel::graphics::frames::FlxAtlasFrames Paths_obj::getPackerAtlas(::String key,::String library, ::Dynamic __o_allowGPU){
            		 ::Dynamic allowGPU = __o_allowGPU;
            		if (::hx::IsNull(__o_allowGPU)) allowGPU = true;
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_394_getPackerAtlas)
HXLINE( 395)		 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(key,library,allowGPU);
HXLINE( 397)		bool txtExists = false;
HXLINE( 399)		::String txt = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".txt",02,3f,c0,1e)));
HXLINE( 400)		if (::sys::FileSystem_obj::exists(txt)) {
HXLINE( 400)			txtExists = true;
            		}
HXLINE( 402)		::String _hx_tmp;
HXDLIN( 402)		if (txtExists) {
HXLINE( 402)			_hx_tmp = ::sys::io::File_obj::getContent(txt);
            		}
            		else {
HXLINE( 402)			_hx_tmp = ::backend::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".txt",02,3f,c0,1e)),null(),library,null());
            		}
HXDLIN( 402)		return ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSpriteSheetPacker(imageLoaded,_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Paths_obj,getPackerAtlas,return )

 ::flixel::graphics::frames::FlxAtlasFrames Paths_obj::getAsepriteAtlas(::String key,::String library, ::Dynamic __o_allowGPU){
            		 ::Dynamic allowGPU = __o_allowGPU;
            		if (::hx::IsNull(__o_allowGPU)) allowGPU = true;
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_409_getAsepriteAtlas)
HXLINE( 410)		 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(key,library,allowGPU);
HXLINE( 412)		bool jsonExists = false;
HXLINE( 414)		::String json = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".json",56,f1,d6,c2)));
HXLINE( 415)		if (::sys::FileSystem_obj::exists(json)) {
HXLINE( 415)			jsonExists = true;
            		}
HXLINE( 417)		 ::Dynamic _hx_tmp;
HXDLIN( 417)		if (jsonExists) {
HXLINE( 417)			_hx_tmp = ::sys::io::File_obj::getContent(json);
            		}
            		else {
HXLINE( 417)			_hx_tmp = ::backend::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".json",56,f1,d6,c2)),null(),library,null());
            		}
HXDLIN( 417)		return ::flixel::graphics::frames::FlxAtlasFrames_obj::fromTexturePackerJson(imageLoaded,_hx_tmp,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Paths_obj,getAsepriteAtlas,return )

::String Paths_obj::formatToSongPath(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_359943aa63fd1400_423_formatToSongPath)
HXLINE( 424)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXLINE( 425)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXLINE( 427)		::String path1 = invalidChars->split(::StringTools_obj::replace(path,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXLINE( 428)		return hideChars->split(path1)->join(HX_("",00,00,00,00)).toLowerCase();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,formatToSongPath,return )

 ::haxe::ds::StringMap Paths_obj::currentTrackedSounds;

 ::openfl::media::Sound Paths_obj::returnSound(::String path,::String key,::String library){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_432_returnSound)
HXLINE( 434)		::String modLibPath = HX_("",00,00,00,00);
HXLINE( 435)		if (::hx::IsNotNull( library )) {
HXLINE( 435)			modLibPath = ((HX_("",00,00,00,00) + library) + HX_("/",2f,00,00,00));
            		}
HXLINE( 436)		if (::hx::IsNotNull( path )) {
HXLINE( 436)			modLibPath = (modLibPath + (HX_("",00,00,00,00) + path));
            		}
HXLINE( 438)		::String file = ::backend::Paths_obj::modFolders(((((modLibPath + HX_("/",2f,00,00,00)) + key) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)));
HXLINE( 439)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 440)			if (!(::backend::Paths_obj::currentTrackedSounds->exists(file))) {
HXLINE( 442)				::Dynamic this1 = ::backend::Paths_obj::currentTrackedSounds;
HXDLIN( 442)				( ( ::haxe::ds::StringMap)(this1) )->set(file,::openfl::media::Sound_obj::fromFile(file));
            			}
HXLINE( 445)			::backend::Paths_obj::localTrackedAssets->push(file);
HXLINE( 446)			return ( ( ::openfl::media::Sound)(::backend::Paths_obj::currentTrackedSounds->get(file)) );
            		}
HXLINE( 451)		::String gottenPath = (((HX_("",00,00,00,00) + key) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00));
HXLINE( 452)		if (::hx::IsNotNull( path )) {
HXLINE( 452)			gottenPath = (((HX_("",00,00,00,00) + path) + HX_("/",2f,00,00,00)) + gottenPath);
            		}
HXLINE( 453)		gottenPath = ::backend::Paths_obj::getPath(gottenPath,HX_("SOUND",af,c4,ba,fe),library,null());
HXLINE( 454)		int gottenPath1 = (gottenPath.indexOf(HX_(":",3a,00,00,00),null()) + 1);
HXDLIN( 454)		gottenPath = gottenPath.substring(gottenPath1,gottenPath.length);
HXLINE( 456)		if (!(::backend::Paths_obj::currentTrackedSounds->exists(gottenPath))) {
HXLINE( 458)			::String retKey;
HXDLIN( 458)			if (::hx::IsNotNull( path )) {
HXLINE( 458)				retKey = (((HX_("",00,00,00,00) + path) + HX_("/",2f,00,00,00)) + key);
            			}
            			else {
HXLINE( 458)				retKey = key;
            			}
HXLINE( 459)			::String retKey1;
HXDLIN( 459)			if ((path == HX_("songs",fe,36,c7,80))) {
HXLINE( 459)				retKey1 = HX_("songs:",7c,e7,88,2d);
            			}
            			else {
HXLINE( 459)				retKey1 = HX_("",00,00,00,00);
            			}
HXDLIN( 459)			retKey = (retKey1 + ::backend::Paths_obj::getPath((((HX_("",00,00,00,00) + retKey) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("SOUND",af,c4,ba,fe),library,null()));
HXLINE( 460)			if (::openfl::utils::Assets_obj::exists(retKey,HX_("SOUND",af,c4,ba,fe))) {
HXLINE( 462)				::Dynamic this2 = ::backend::Paths_obj::currentTrackedSounds;
HXDLIN( 462)				( ( ::haxe::ds::StringMap)(this2) )->set(gottenPath,::openfl::utils::Assets_obj::getSound(retKey,null()));
            			}
            		}
HXLINE( 466)		::backend::Paths_obj::localTrackedAssets->push(gottenPath);
HXLINE( 467)		return ( ( ::openfl::media::Sound)(::backend::Paths_obj::currentTrackedSounds->get(gottenPath)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Paths_obj,returnSound,return )

::String Paths_obj::mods(::String __o_key){
            		::String key = __o_key;
            		if (::hx::IsNull(__o_key)) key = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_472_mods)
HXDLIN( 472)		return (HX_("mods/",9e,2f,58,0c) + key);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,mods,return )

::String Paths_obj::modsFont(::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_476_modsFont)
HXDLIN( 476)		return ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + key));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,modsFont,return )

::String Paths_obj::modsJson(::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_480_modsJson)
HXDLIN( 480)		return ::backend::Paths_obj::modFolders(((HX_("data/",c5,0e,88,d4) + key) + HX_(".json",56,f1,d6,c2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,modsJson,return )

::String Paths_obj::modsVideo(::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_484_modsVideo)
HXDLIN( 484)		return ::backend::Paths_obj::modFolders((((HX_("videos/",97,cd,86,fd) + key) + HX_(".",2e,00,00,00)) + HX_("mp4",71,17,53,00)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,modsVideo,return )

::String Paths_obj::modsSounds(::String path,::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_488_modsSounds)
HXDLIN( 488)		return ::backend::Paths_obj::modFolders(((((path + HX_("/",2f,00,00,00)) + key) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,modsSounds,return )

::String Paths_obj::modsImages(::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_492_modsImages)
HXDLIN( 492)		return ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".png",3b,2d,bd,1e)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,modsImages,return )

::String Paths_obj::modsXml(::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_496_modsXml)
HXDLIN( 496)		return ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,modsXml,return )

::String Paths_obj::modsTxt(::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_500_modsTxt)
HXDLIN( 500)		return ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".txt",02,3f,c0,1e)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,modsTxt,return )

::String Paths_obj::modsImagesJson(::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_504_modsImagesJson)
HXDLIN( 504)		return ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".json",56,f1,d6,c2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,modsImagesJson,return )

::String Paths_obj::modFolders(::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_521_modFolders)
HXLINE( 522)		bool _hx_tmp;
HXDLIN( 522)		if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE( 522)			_hx_tmp = (::backend::Mods_obj::currentModDirectory.length > 0);
            		}
            		else {
HXLINE( 522)			_hx_tmp = false;
            		}
HXDLIN( 522)		if (_hx_tmp) {
HXLINE( 523)			::String key1 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + key);
HXDLIN( 523)			if (::hx::IsNull( key1 )) {
HXLINE( 523)				key1 = HX_("",00,00,00,00);
            			}
HXDLIN( 523)			::String fileToCheck = (HX_("mods/",9e,2f,58,0c) + key1);
HXLINE( 524)			if (::sys::FileSystem_obj::exists(fileToCheck)) {
HXLINE( 525)				return fileToCheck;
            			}
            		}
HXLINE( 529)		{
HXLINE( 529)			int _g = 0;
HXDLIN( 529)			::Array< ::String > _g1 = ::backend::Mods_obj::globalMods;
HXDLIN( 529)			while((_g < _g1->length)){
HXLINE( 529)				::String mod = _g1->__get(_g);
HXDLIN( 529)				_g = (_g + 1);
HXLINE( 530)				::String key2 = ((mod + HX_("/",2f,00,00,00)) + key);
HXDLIN( 530)				if (::hx::IsNull( key2 )) {
HXLINE( 530)					key2 = HX_("",00,00,00,00);
            				}
HXDLIN( 530)				::String fileToCheck1 = (HX_("mods/",9e,2f,58,0c) + key2);
HXLINE( 531)				if (::sys::FileSystem_obj::exists(fileToCheck1)) {
HXLINE( 532)					return fileToCheck1;
            				}
            			}
            		}
HXLINE( 534)		return (HX_("mods/",9e,2f,58,0c) + key);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,modFolders,return )

void Paths_obj::loadAnimateAtlas( ::flxanimate::FlxAnimate spr, ::Dynamic folderOrImg, ::Dynamic spriteJson, ::Dynamic animationJson){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_540_loadAnimateAtlas)
HXLINE( 541)		bool changedAnimJson = false;
HXLINE( 542)		bool changedAtlasJson = false;
HXLINE( 543)		bool changedImage = false;
HXLINE( 545)		if (::hx::IsNotNull( spriteJson )) {
HXLINE( 547)			changedAtlasJson = true;
HXLINE( 548)			spriteJson = ::sys::io::File_obj::getContent(( (::String)(spriteJson) ));
            		}
HXLINE( 551)		if (::hx::IsNotNull( animationJson )) {
HXLINE( 553)			changedAnimJson = true;
HXLINE( 554)			animationJson = ::sys::io::File_obj::getContent(( (::String)(animationJson) ));
            		}
HXLINE( 558)		if (::Std_obj::isOfType(folderOrImg,::hx::ClassOf< ::String >())) {
HXLINE( 560)			::String originalPath = ( (::String)(folderOrImg) );
HXLINE( 561)			{
HXLINE( 561)				int _g = 0;
HXDLIN( 561)				while((_g < 10)){
HXLINE( 561)					_g = (_g + 1);
HXDLIN( 561)					int i = (_g - 1);
HXLINE( 563)					::String st = (HX_("",00,00,00,00) + i);
HXLINE( 564)					if ((i == 0)) {
HXLINE( 564)						st = HX_("",00,00,00,00);
            					}
HXLINE( 566)					if (!(changedAtlasJson)) {
HXLINE( 568)						spriteJson = ::backend::Paths_obj::getTextFromFile(((((HX_("images/",77,50,74,c1) + originalPath) + HX_("/spritemap",a8,c1,c8,a3)) + st) + HX_(".json",56,f1,d6,c2)),null());
HXLINE( 569)						if (::hx::IsNotNull( spriteJson )) {
HXLINE( 572)							changedImage = true;
HXLINE( 573)							changedAtlasJson = true;
HXLINE( 574)							folderOrImg = ::backend::Paths_obj::image((((HX_("",00,00,00,00) + originalPath) + HX_("/spritemap",a8,c1,c8,a3)) + st),null(),null());
HXLINE( 575)							goto _hx_goto_46;
            						}
            					}
            					else {
HXLINE( 578)						if (::backend::Paths_obj::fileExists(((((HX_("images/",77,50,74,c1) + originalPath) + HX_("/spritemap",a8,c1,c8,a3)) + st) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),null(),null())) {
HXLINE( 581)							changedImage = true;
HXLINE( 582)							folderOrImg = ::backend::Paths_obj::image((((HX_("",00,00,00,00) + originalPath) + HX_("/spritemap",a8,c1,c8,a3)) + st),null(),null());
HXLINE( 583)							goto _hx_goto_46;
            						}
            					}
            				}
            				_hx_goto_46:;
            			}
HXLINE( 587)			if (!(changedImage)) {
HXLINE( 590)				changedImage = true;
HXLINE( 591)				folderOrImg = ::backend::Paths_obj::image(originalPath,null(),null());
            			}
HXLINE( 594)			if (!(changedAnimJson)) {
HXLINE( 597)				changedAnimJson = true;
HXLINE( 598)				animationJson = ::backend::Paths_obj::getTextFromFile(((HX_("images/",77,50,74,c1) + originalPath) + HX_("/Animation.json",61,fc,54,44)),null());
            			}
            		}
HXLINE( 605)		spr->loadAtlasEx(folderOrImg,( (::String)(spriteJson) ),animationJson);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Paths_obj,loadAnimateAtlas,(void))


Paths_obj::Paths_obj()
{
}

bool Paths_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"txt") ) { outValue = txt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"xml") ) { outValue = xml_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lua") ) { outValue = lua_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"json") ) { outValue = json_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"inst") ) { outValue = inst_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"font") ) { outValue = font_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mods") ) { outValue = mods_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"video") ) { outValue = video_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sound") ) { outValue = sound_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"music") ) { outValue = music_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"image") ) { outValue = image_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"voices") ) { outValue = voices_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getPath") ) { outValue = getPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modsXml") ) { outValue = modsXml_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modsTxt") ) { outValue = modsTxt_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getAtlas") ) { outValue = getAtlas_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modsFont") ) { outValue = modsFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modsJson") ) { outValue = modsJson_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"modsVideo") ) { outValue = modsVideo_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fileExists") ) { outValue = fileExists_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modsSounds") ) { outValue = modsSounds_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modsImages") ) { outValue = modsImages_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modFolders") ) { outValue = modFolders_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"soundRandom") ) { outValue = soundRandom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cacheBitmap") ) { outValue = cacheBitmap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"returnSound") ) { outValue = returnSound_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"excludeAsset") ) { outValue = excludeAsset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"currentLevel") ) { outValue = ( currentLevel ); return true; }
		if (HX_FIELD_EQ(inName,"shaderVertex") ) { outValue = shaderVertex_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getSharedPath") ) { outValue = getSharedPath_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dumpExclusions") ) { outValue = ( dumpExclusions ); return true; }
		if (HX_FIELD_EQ(inName,"getLibraryPath") ) { outValue = getLibraryPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"shaderFragment") ) { outValue = shaderFragment_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPackerAtlas") ) { outValue = getPackerAtlas_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modsImagesJson") ) { outValue = modsImagesJson_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setCurrentLevel") ) { outValue = setCurrentLevel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getTextFromFile") ) { outValue = getTextFromFile_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSparrowAtlas") ) { outValue = getSparrowAtlas_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getAsepriteAtlas") ) { outValue = getAsepriteAtlas_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"formatToSongPath") ) { outValue = formatToSongPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadAnimateAtlas") ) { outValue = loadAnimateAtlas_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"clearUnusedMemory") ) { outValue = clearUnusedMemory_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clearStoredMemory") ) { outValue = clearStoredMemory_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"localTrackedAssets") ) { outValue = ( localTrackedAssets ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getLibraryPathForce") ) { outValue = getLibraryPathForce_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"currentTrackedAssets") ) { outValue = ( currentTrackedAssets ); return true; }
		if (HX_FIELD_EQ(inName,"currentTrackedSounds") ) { outValue = ( currentTrackedSounds ); return true; }
	}
	return false;
}

bool Paths_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"currentLevel") ) { currentLevel=ioValue.Cast< ::String >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dumpExclusions") ) { dumpExclusions=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"localTrackedAssets") ) { localTrackedAssets=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"currentTrackedAssets") ) { currentTrackedAssets=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"currentTrackedSounds") ) { currentTrackedSounds=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Paths_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Paths_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &Paths_obj::SOUND_EXT,HX_("SOUND_EXT",b1,35,8c,6f)},
	{::hx::fsString,(void *) &Paths_obj::VIDEO_EXT,HX_("VIDEO_EXT",5d,03,77,8a)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &Paths_obj::dumpExclusions,HX_("dumpExclusions",39,38,dc,ef)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &Paths_obj::localTrackedAssets,HX_("localTrackedAssets",62,77,3a,fc)},
	{::hx::fsString,(void *) &Paths_obj::currentLevel,HX_("currentLevel",8b,fa,6e,b9)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Paths_obj::currentTrackedAssets,HX_("currentTrackedAssets",d4,7b,e5,0f)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Paths_obj::currentTrackedSounds,HX_("currentTrackedSounds",15,dc,10,f6)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Paths_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Paths_obj::SOUND_EXT,"SOUND_EXT");
	HX_MARK_MEMBER_NAME(Paths_obj::VIDEO_EXT,"VIDEO_EXT");
	HX_MARK_MEMBER_NAME(Paths_obj::dumpExclusions,"dumpExclusions");
	HX_MARK_MEMBER_NAME(Paths_obj::localTrackedAssets,"localTrackedAssets");
	HX_MARK_MEMBER_NAME(Paths_obj::currentLevel,"currentLevel");
	HX_MARK_MEMBER_NAME(Paths_obj::currentTrackedAssets,"currentTrackedAssets");
	HX_MARK_MEMBER_NAME(Paths_obj::currentTrackedSounds,"currentTrackedSounds");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Paths_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Paths_obj::SOUND_EXT,"SOUND_EXT");
	HX_VISIT_MEMBER_NAME(Paths_obj::VIDEO_EXT,"VIDEO_EXT");
	HX_VISIT_MEMBER_NAME(Paths_obj::dumpExclusions,"dumpExclusions");
	HX_VISIT_MEMBER_NAME(Paths_obj::localTrackedAssets,"localTrackedAssets");
	HX_VISIT_MEMBER_NAME(Paths_obj::currentLevel,"currentLevel");
	HX_VISIT_MEMBER_NAME(Paths_obj::currentTrackedAssets,"currentTrackedAssets");
	HX_VISIT_MEMBER_NAME(Paths_obj::currentTrackedSounds,"currentTrackedSounds");
};

#endif

::hx::Class Paths_obj::__mClass;

static ::String Paths_obj_sStaticFields[] = {
	HX_("SOUND_EXT",b1,35,8c,6f),
	HX_("VIDEO_EXT",5d,03,77,8a),
	HX_("excludeAsset",b6,04,50,31),
	HX_("dumpExclusions",39,38,dc,ef),
	HX_("clearUnusedMemory",e4,29,80,28),
	HX_("localTrackedAssets",62,77,3a,fc),
	HX_("clearStoredMemory",f1,99,87,55),
	HX_("currentLevel",8b,fa,6e,b9),
	HX_("setCurrentLevel",4d,cd,24,d8),
	HX_("getPath",5b,95,d4,1c),
	HX_("getLibraryPath",4a,25,d8,33),
	HX_("getLibraryPathForce",41,90,ac,3f),
	HX_("getSharedPath",20,83,ed,cb),
	HX_("txt",70,6e,58,00),
	HX_("xml",d7,6d,5b,00),
	HX_("json",28,42,68,46),
	HX_("shaderFragment",15,08,f3,5e),
	HX_("shaderVertex",69,78,30,11),
	HX_("lua",b8,59,52,00),
	HX_("video",7b,14,fc,36),
	HX_("sound",cf,8c,cc,80),
	HX_("soundRandom",32,28,bc,6a),
	HX_("music",a5,d0,5a,10),
	HX_("voices",81,d6,49,5d),
	HX_("inst",c6,43,bb,45),
	HX_("currentTrackedAssets",d4,7b,e5,0f),
	HX_("image",5b,1f,69,bd),
	HX_("cacheBitmap",d1,3b,ad,0f),
	HX_("getTextFromFile",89,70,ed,f8),
	HX_("font",cf,5d,c0,43),
	HX_("fileExists",78,65,64,a0),
	HX_("getAtlas",d5,5c,b4,86),
	HX_("getSparrowAtlas",55,ab,b7,a7),
	HX_("getPackerAtlas",ef,b2,47,f7),
	HX_("getAsepriteAtlas",50,c7,64,b2),
	HX_("formatToSongPath",cc,36,b8,49),
	HX_("currentTrackedSounds",15,dc,10,f6),
	HX_("returnSound",ff,59,a9,8d),
	HX_("mods",71,d3,60,48),
	HX_("modsFont",e0,69,a7,c3),
	HX_("modsJson",39,4e,4f,c6),
	HX_("modsVideo",4a,97,3f,a1),
	HX_("modsSounds",15,9b,fd,c2),
	HX_("modsImages",09,43,61,8f),
	HX_("modsXml",e6,4e,99,f6),
	HX_("modsTxt",7f,4f,96,f6),
	HX_("modsImagesJson",d1,69,9b,8c),
	HX_("modFolders",63,af,3e,e0),
	HX_("loadAnimateAtlas",30,42,b8,04),
	::String(null())
};

void Paths_obj::__register()
{
	Paths_obj _hx_dummy;
	Paths_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.Paths",34,17,99,92);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Paths_obj::__GetStatic;
	__mClass->mSetStaticField = &Paths_obj::__SetStatic;
	__mClass->mMarkFunc = Paths_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Paths_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Paths_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Paths_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Paths_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Paths_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Paths_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_27_boot)
HXDLIN(  27)		SOUND_EXT = HX_("ogg",4f,94,54,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_28_boot)
HXDLIN(  28)		VIDEO_EXT = HX_("mp4",71,17,53,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_35_boot)
HXDLIN(  35)		dumpExclusions = ::Array_obj< ::String >::__new(1)->init(0,(HX_("assets/shared/music/freakyMenu.",f1,72,16,d3) + HX_("ogg",4f,94,54,00)));
            	}
{
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_63_boot)
HXDLIN(  63)		localTrackedAssets = ::Array_obj< ::String >::__new(0);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_359943aa63fd1400_217_boot)
HXDLIN( 217)		currentTrackedAssets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_359943aa63fd1400_431_boot)
HXDLIN( 431)		currentTrackedSounds =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace backend
