// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_Achievements
#include <backend/Achievements.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_llua_Lua_helper
#include <llua/Lua_helper.h>
#endif
#ifndef INCLUDED_objects_AchievementPopup
#include <objects/AchievementPopup.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_psychlua_FunkinLua
#include <psychlua/FunkinLua.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_tjson_TJSON
#include <tjson/TJSON.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_27_init,"backend.Achievements","init",0x4a76a3a0,"backend.Achievements.init","backend/Achievements.hx",27,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_55_get,"backend.Achievements","get",0x06115a06,"backend.Achievements.get","backend/Achievements.hx",55,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_57_exists,"backend.Achievements","exists",0xf8b2ca6c,"backend.Achievements.exists","backend/Achievements.hx",57,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_60_load,"backend.Achievements","load",0x4c7302b6,"backend.Achievements.load","backend/Achievements.hx",60,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_82_save,"backend.Achievements","save",0x5108f3cd,"backend.Achievements.save","backend/Achievements.hx",82,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_88_getScore,"backend.Achievements","getScore",0xecf3736c,"backend.Achievements.getScore","backend/Achievements.hx",88,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_91_setScore,"backend.Achievements","setScore",0x9b50cce0,"backend.Achievements.setScore","backend/Achievements.hx",91,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_94_addScore,"backend.Achievements","addScore",0x06798a01,"backend.Achievements.addScore","backend/Achievements.hx",94,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_98__scoreFunc,"backend.Achievements","_scoreFunc",0x0e774c07,"backend.Achievements._scoreFunc","backend/Achievements.hx",98,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_131_unlock,"backend.Achievements","unlock",0x9e5f4f54,"backend.Achievements.unlock","backend/Achievements.hx",131,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_160_isUnlocked,"backend.Achievements","isUnlocked",0xb6097abd,"backend.Achievements.isUnlocked","backend/Achievements.hx",160,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_167_get_showingPopups,"backend.Achievements","get_showingPopups",0xa6b9df73,"backend.Achievements.get_showingPopups","backend/Achievements.hx",167,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_169_startPopup,"backend.Achievements","startPopup",0xc1f816fa,"backend.Achievements.startPopup","backend/Achievements.hx",169,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_185_createAchievement,"backend.Achievements","createAchievement",0xff201843,"backend.Achievements.createAchievement","backend/Achievements.hx",185,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_194_reloadList,"backend.Achievements","reloadList",0x7206f0e7,"backend.Achievements.reloadList","backend/Achievements.hx",194,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_215_loadAchievementJson,"backend.Achievements","loadAchievementJson",0x80e11421,"backend.Achievements.loadAchievementJson","backend/Achievements.hx",215,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_270_addLuaCallbacks,"backend.Achievements","addLuaCallbacks",0x9cde2f67,"backend.Achievements.addLuaCallbacks","backend/Achievements.hx",270,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_272_addLuaCallbacks,"backend.Achievements","addLuaCallbacks",0x9cde2f67,"backend.Achievements.addLuaCallbacks","backend/Achievements.hx",272,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_281_addLuaCallbacks,"backend.Achievements","addLuaCallbacks",0x9cde2f67,"backend.Achievements.addLuaCallbacks","backend/Achievements.hx",281,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_290_addLuaCallbacks,"backend.Achievements","addLuaCallbacks",0x9cde2f67,"backend.Achievements.addLuaCallbacks","backend/Achievements.hx",290,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_299_addLuaCallbacks,"backend.Achievements","addLuaCallbacks",0x9cde2f67,"backend.Achievements.addLuaCallbacks","backend/Achievements.hx",299,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_308_addLuaCallbacks,"backend.Achievements","addLuaCallbacks",0x9cde2f67,"backend.Achievements.addLuaCallbacks","backend/Achievements.hx",308,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_316_addLuaCallbacks,"backend.Achievements","addLuaCallbacks",0x9cde2f67,"backend.Achievements.addLuaCallbacks","backend/Achievements.hx",316,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_49_boot,"backend.Achievements","boot",0x45d6ecc2,"backend.Achievements.boot","backend/Achievements.hx",49,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_50_boot,"backend.Achievements","boot",0x45d6ecc2,"backend.Achievements.boot","backend/Achievements.hx",50,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_51_boot,"backend.Achievements","boot",0x45d6ecc2,"backend.Achievements.boot","backend/Achievements.hx",51,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_52_boot,"backend.Achievements","boot",0x45d6ecc2,"backend.Achievements.boot","backend/Achievements.hx",52,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_130_boot,"backend.Achievements","boot",0x45d6ecc2,"backend.Achievements.boot","backend/Achievements.hx",130,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_163_boot,"backend.Achievements","boot",0x45d6ecc2,"backend.Achievements.boot","backend/Achievements.hx",163,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_182_boot,"backend.Achievements","boot",0x45d6ecc2,"backend.Achievements.boot","backend/Achievements.hx",182,0x86eda8bf)
HX_LOCAL_STACK_FRAME(_hx_pos_0df3ce31f36d3c87_183_boot,"backend.Achievements","boot",0x45d6ecc2,"backend.Achievements.boot","backend/Achievements.hx",183,0x86eda8bf)
namespace backend{

void Achievements_obj::__construct() { }

Dynamic Achievements_obj::__CreateEmpty() { return new Achievements_obj; }

void *Achievements_obj::_hx_vtable = 0;

Dynamic Achievements_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Achievements_obj > _hx_result = new Achievements_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Achievements_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x32ede490;
}

void Achievements_obj::init(){
            	HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_27_init)
HXLINE(  28)		::backend::Achievements_obj::createAchievement(HX_("friday_night_play",9b,1f,4e,c7), ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Freaky on a Friday Night",ad,12,d0,d9))
            			->setFixed(1,HX_("hidden",6a,ff,95,4c),true)
            			->setFixed(2,HX_("description",fc,08,1d,5f),HX_("Play on a Friday... Night.",1b,3d,4b,6e))),null());
HXLINE(  29)		::backend::Achievements_obj::createAchievement(HX_("week1_nomiss",3f,c5,3b,fe), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("She Calls Me Daddy Too",43,38,20,2e))
            			->setFixed(1,HX_("description",fc,08,1d,5f),HX_("Beat Week 1 on Hard with no Misses.",3a,80,c0,14))),null());
HXLINE(  30)		::backend::Achievements_obj::createAchievement(HX_("week2_nomiss",5e,37,6e,37), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("No More Tricks",6c,b7,d5,1c))
            			->setFixed(1,HX_("description",fc,08,1d,5f),HX_("Beat Week 2 on Hard with no Misses.",3b,bb,c7,1d))),null());
HXLINE(  31)		::backend::Achievements_obj::createAchievement(HX_("week3_nomiss",7d,a9,a0,70), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Call Me The Hitman",fc,32,c3,c7))
            			->setFixed(1,HX_("description",fc,08,1d,5f),HX_("Beat Week 3 on Hard with no Misses.",3c,f6,ce,26))),null());
HXLINE(  32)		::backend::Achievements_obj::createAchievement(HX_("week4_nomiss",9c,1b,d3,a9), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Lady Killer",a1,5f,9f,79))
            			->setFixed(1,HX_("description",fc,08,1d,5f),HX_("Beat Week 4 on Hard with no Misses.",3d,31,d6,2f))),null());
HXLINE(  33)		::backend::Achievements_obj::createAchievement(HX_("week5_nomiss",bb,8d,05,e3), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Missless Christmas",f7,6d,cc,37))
            			->setFixed(1,HX_("description",fc,08,1d,5f),HX_("Beat Week 5 on Hard with no Misses.",3e,6c,dd,38))),null());
HXLINE(  34)		::backend::Achievements_obj::createAchievement(HX_("week6_nomiss",da,ff,37,1c), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Highscore!!",70,79,53,b1))
            			->setFixed(1,HX_("description",fc,08,1d,5f),HX_("Beat Week 6 on Hard with no Misses.",3f,a7,e4,41))),null());
HXLINE(  35)		::backend::Achievements_obj::createAchievement(HX_("week7_nomiss",f9,71,6a,55), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("God Effing Damn It!",13,1d,66,f7))
            			->setFixed(1,HX_("description",fc,08,1d,5f),HX_("Beat Week 7 on Hard with no Misses.",40,e2,eb,4a))),null());
HXLINE(  36)		::backend::Achievements_obj::createAchievement(HX_("ur_bad",a3,4f,85,aa), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("What a Funkin' Disaster!",9b,9a,f3,3d))
            			->setFixed(1,HX_("description",fc,08,1d,5f),HX_("Complete a Song with a rating lower than 20%.",b8,88,a7,a1))),null());
HXLINE(  37)		::backend::Achievements_obj::createAchievement(HX_("ur_good",9f,19,79,8d), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Perfectionist",2f,2d,d8,1a))
            			->setFixed(1,HX_("description",fc,08,1d,5f),HX_("Complete a Song with a rating of 100%.",60,20,3e,99))),null());
HXLINE(  38)		::backend::Achievements_obj::createAchievement(HX_("roadkill_enthusiast",15,e2,55,56), ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("maxDecimals",86,55,30,88),0)
            			->setFixed(1,HX_("maxScore",0e,c6,f6,22),50)
            			->setFixed(2,HX_("name",4b,72,ff,48),HX_("Roadkill Enthusiast",16,f9,a7,f4))
            			->setFixed(3,HX_("description",fc,08,1d,5f),HX_("Watch the Henchmen die 50 times.",2d,d8,50,53))),null());
HXLINE(  39)		::backend::Achievements_obj::createAchievement(HX_("oversinging",1f,13,8f,78), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Oversinging Much...?",7f,24,1b,aa))
            			->setFixed(1,HX_("description",fc,08,1d,5f),HX_("Sing for 10 seconds without going back to Idle.",d6,a9,80,f8))),null());
HXLINE(  40)		::backend::Achievements_obj::createAchievement(HX_("hype",46,63,1a,45), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Hyperactive",12,ed,1a,97))
            			->setFixed(1,HX_("description",fc,08,1d,5f),HX_("Finish a Song without going back to Idle.",f1,51,1a,b6))),null());
HXLINE(  41)		::backend::Achievements_obj::createAchievement(HX_("two_keys",c7,f4,0a,9b), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Just the Two of Us",f0,46,92,7c))
            			->setFixed(1,HX_("description",fc,08,1d,5f),HX_("Finish a Song pressing only two keys.",34,0f,a6,8a))),null());
HXLINE(  42)		::backend::Achievements_obj::createAchievement(HX_("toastie",43,0c,91,5f), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Toaster Gamer",b4,2b,0d,33))
            			->setFixed(1,HX_("description",fc,08,1d,5f),HX_("Have you tried to run the game on a toaster?",97,b9,bf,ff))),null());
HXLINE(  43)		::backend::Achievements_obj::createAchievement(HX_("debugger",21,24,eb,90), ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Debugger",41,e0,9c,6a))
            			->setFixed(1,HX_("hidden",6a,ff,95,4c),true)
            			->setFixed(2,HX_("description",fc,08,1d,5f),HX_("Beat the \"Test\" Stage from the Chart Editor.",15,c5,9f,4a))),null());
HXLINE(  46)		::backend::Achievements_obj::_originalLength = (::backend::Achievements_obj::_sortID + 1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Achievements_obj,init,(void))

 ::haxe::ds::StringMap Achievements_obj::achievements;

 ::haxe::ds::StringMap Achievements_obj::variables;

::Array< ::String > Achievements_obj::achievementsUnlocked;

bool Achievements_obj::_firstLoad;

 ::Dynamic Achievements_obj::get(::String name){
            	HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_55_get)
HXDLIN(  55)		return ::backend::Achievements_obj::achievements->get(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Achievements_obj,get,return )

bool Achievements_obj::exists(::String name){
            	HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_57_exists)
HXDLIN(  57)		return ::backend::Achievements_obj::achievements->exists(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Achievements_obj,exists,return )

void Achievements_obj::load(){
            	HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_60_load)
HXLINE(  61)		if (!(::backend::Achievements_obj::_firstLoad)) {
HXLINE(  61)			return;
            		}
HXLINE(  63)		if ((::backend::Achievements_obj::_originalLength < 0)) {
HXLINE(  63)			::backend::Achievements_obj::init();
            		}
HXLINE(  65)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data )) {
HXLINE(  66)			if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("achievementsUnlocked",67,55,27,1c),::hx::paccDynamic) )) {
HXLINE(  67)				::backend::Achievements_obj::achievementsUnlocked = ( (::Array< ::String >)(::flixel::FlxG_obj::save->data->__Field(HX_("achievementsUnlocked",67,55,27,1c),::hx::paccDynamic)) );
            			}
HXLINE(  69)			 ::haxe::ds::StringMap savedMap = ( ( ::haxe::ds::StringMap)(::flixel::FlxG_obj::save->data->__Field(HX_("achievementsVariables",f3,dc,46,d8),::hx::paccDynamic)) );
HXLINE(  70)			if (::hx::IsNotNull( savedMap )) {
HXLINE(  72)				::Dynamic map = savedMap;
HXDLIN(  72)				::Dynamic _g_map = map;
HXDLIN(  72)				 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN(  72)				while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  72)					::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  72)					Float _g_value = ( (Float)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN(  72)					::String _g_key = key;
HXDLIN(  72)					::String key1 = _g_key;
HXDLIN(  72)					Float value = _g_value;
HXLINE(  74)					::backend::Achievements_obj::variables->set(key1,value);
            				}
            			}
HXLINE(  77)			::backend::Achievements_obj::_firstLoad = false;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Achievements_obj,load,(void))

void Achievements_obj::save(){
            	HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_82_save)
HXLINE(  83)		::flixel::FlxG_obj::save->data->__SetField(HX_("achievementsUnlocked",67,55,27,1c),::backend::Achievements_obj::achievementsUnlocked,::hx::paccDynamic);
HXLINE(  84)		::flixel::FlxG_obj::save->data->__SetField(HX_("achievementsVariables",f3,dc,46,d8),::backend::Achievements_obj::variables,::hx::paccDynamic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Achievements_obj,save,(void))

Float Achievements_obj::getScore(::String name){
            	HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_88_getScore)
HXDLIN(  88)		return ::backend::Achievements_obj::_scoreFunc(name,0,null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Achievements_obj,getScore,return )

Float Achievements_obj::setScore(::String name,Float value,::hx::Null< bool >  __o_saveIfNotUnlocked){
            		bool saveIfNotUnlocked = __o_saveIfNotUnlocked.Default(true);
            	HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_91_setScore)
HXDLIN(  91)		return ::backend::Achievements_obj::_scoreFunc(name,1,value,saveIfNotUnlocked);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Achievements_obj,setScore,return )

Float Achievements_obj::addScore(::String name,::hx::Null< Float >  __o_value,::hx::Null< bool >  __o_saveIfNotUnlocked){
            		Float value = __o_value.Default(1);
            		bool saveIfNotUnlocked = __o_saveIfNotUnlocked.Default(true);
            	HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_94_addScore)
HXDLIN(  94)		return ::backend::Achievements_obj::_scoreFunc(name,2,value,saveIfNotUnlocked);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Achievements_obj,addScore,return )

Float Achievements_obj::_scoreFunc(::String name,::hx::Null< int >  __o_mode,::hx::Null< Float >  __o_addOrSet,::hx::Null< bool >  __o_saveIfNotUnlocked){
            		int mode = __o_mode.Default(0);
            		Float addOrSet = __o_addOrSet.Default(1);
            		bool saveIfNotUnlocked = __o_saveIfNotUnlocked.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_98__scoreFunc)
HXLINE(  99)		if (!(::backend::Achievements_obj::variables->exists(name))) {
HXLINE( 100)			::backend::Achievements_obj::variables->set(name,( (Float)(0) ));
            		}
HXLINE( 102)		if (::backend::Achievements_obj::achievements->exists(name)) {
HXLINE( 104)			 ::Dynamic achievement = ::backend::Achievements_obj::achievements->get(name);
HXLINE( 105)			if (::hx::IsLess( achievement->__Field(HX_("maxScore",0e,c6,f6,22),::hx::paccDynamic),1 )) {
HXLINE( 105)				HX_STACK_DO_THROW( ::haxe::Exception_obj::__alloc( HX_CTX ,(HX_("Achievement has score disabled or is incorrectly configured: ",4a,88,a9,9b) + name),null(),null()));
            			}
HXLINE( 107)			if (::backend::Achievements_obj::achievementsUnlocked->contains(name)) {
HXLINE( 107)				return ( (Float)(achievement->__Field(HX_("maxScore",0e,c6,f6,22),::hx::paccDynamic)) );
            			}
HXLINE( 109)			Float val = addOrSet;
HXLINE( 110)			switch((int)(mode)){
            				case (int)0: {
HXLINE( 112)					return ::backend::Achievements_obj::variables->get_float(name);
            				}
            				break;
            				case (int)2: {
HXLINE( 113)					val = (val + ::backend::Achievements_obj::variables->get(name));
            				}
            				break;
            			}
HXLINE( 116)			if (::hx::IsGreaterEq( val,achievement->__Field(HX_("maxScore",0e,c6,f6,22),::hx::paccDynamic) )) {
HXLINE( 118)				::backend::Achievements_obj::unlock(name,null());
HXLINE( 119)				val = ( (Float)(achievement->__Field(HX_("maxScore",0e,c6,f6,22),::hx::paccDynamic)) );
            			}
HXLINE( 121)			::backend::Achievements_obj::variables->set(name,val);
HXLINE( 123)			::backend::Achievements_obj::save();
HXLINE( 124)			bool _hx_tmp;
HXDLIN( 124)			if (!(saveIfNotUnlocked)) {
HXLINE( 124)				_hx_tmp = ::hx::IsGreaterEq( val,achievement->__Field(HX_("maxScore",0e,c6,f6,22),::hx::paccDynamic) );
            			}
            			else {
HXLINE( 124)				_hx_tmp = true;
            			}
HXDLIN( 124)			if (_hx_tmp) {
HXLINE( 124)				::flixel::FlxG_obj::save->flush(null());
            			}
HXLINE( 125)			return val;
            		}
HXLINE( 127)		return ( (Float)(-1) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Achievements_obj,_scoreFunc,return )

int Achievements_obj::_lastUnlock;

::String Achievements_obj::unlock(::String name,::hx::Null< bool >  __o_autoStartPopup){
            		bool autoStartPopup = __o_autoStartPopup.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_131_unlock)
HXLINE( 132)		if (!(::backend::Achievements_obj::achievements->exists(name))) {
HXLINE( 134)			::flixel::FlxG_obj::log->advanced(((HX_("Achievement \"",11,66,b1,5f) + name) + HX_("\" does not exists!",8f,32,3a,33)),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
HXLINE( 135)			HX_STACK_DO_THROW( ::haxe::Exception_obj::__alloc( HX_CTX ,((HX_("Achievement \"",11,66,b1,5f) + name) + HX_("\" does not exists!",8f,32,3a,33)),null(),null()));
            		}
HXLINE( 139)		if (::backend::Achievements_obj::achievementsUnlocked->contains(name)) {
HXLINE( 139)			return null();
            		}
HXLINE( 141)		::haxe::Log_obj::trace(((HX_("Completed achievement \"",bc,88,62,0c) + name) + HX_("\"",22,00,00,00)),::hx::SourceInfo(HX_("source/backend/Achievements.hx",4b,f8,0b,55),141,HX_("backend.Achievements",de,c1,f1,71),HX_("unlock",c4,a2,8c,65)));
HXLINE( 142)		::backend::Achievements_obj::achievementsUnlocked->push(name);
HXLINE( 145)		int time = ::openfl::Lib_obj::getTimer();
HXLINE( 146)		if ((::Math_obj::abs(( (Float)((time - ::backend::Achievements_obj::_lastUnlock)) )) >= 100)) {
HXLINE( 148)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 148)			_hx_tmp->play(::backend::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),((Float)0.5),null(),null(),null(),null());
HXLINE( 149)			::backend::Achievements_obj::_lastUnlock = time;
            		}
HXLINE( 152)		::backend::Achievements_obj::save();
HXLINE( 153)		::flixel::FlxG_obj::save->flush(null());
HXLINE( 155)		if (autoStartPopup) {
HXLINE( 155)			::backend::Achievements_obj::startPopup(name,null());
            		}
HXLINE( 156)		return name;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Achievements_obj,unlock,return )

bool Achievements_obj::isUnlocked(::String name){
            	HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_160_isUnlocked)
HXDLIN( 160)		return ::backend::Achievements_obj::achievementsUnlocked->contains(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Achievements_obj,isUnlocked,return )

::Array< ::Dynamic> Achievements_obj::_popups;

bool Achievements_obj::get_showingPopups(){
            	HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_167_get_showingPopups)
HXDLIN( 167)		return (::backend::Achievements_obj::_popups->length > 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Achievements_obj,get_showingPopups,return )

void Achievements_obj::startPopup(::String achieve, ::Dynamic endFunc){
            	HX_GC_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_169_startPopup)
HXLINE( 170)		{
HXLINE( 170)			int _g = 0;
HXDLIN( 170)			::Array< ::Dynamic> _g1 = ::backend::Achievements_obj::_popups;
HXDLIN( 170)			while((_g < _g1->length)){
HXLINE( 170)				 ::objects::AchievementPopup popup = _g1->__get(_g).StaticCast<  ::objects::AchievementPopup >();
HXDLIN( 170)				_g = (_g + 1);
HXLINE( 172)				if (::hx::IsNull( popup )) {
HXLINE( 172)					continue;
            				}
HXLINE( 173)				 ::objects::AchievementPopup popup1 = popup;
HXDLIN( 173)				popup1->intendedY = (popup1->intendedY + 150);
            			}
            		}
HXLINE( 176)		 ::objects::AchievementPopup newPop =  ::objects::AchievementPopup_obj::__alloc( HX_CTX ,achieve,endFunc);
HXLINE( 177)		::backend::Achievements_obj::_popups->push(newPop);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Achievements_obj,startPopup,(void))

int Achievements_obj::_sortID;

int Achievements_obj::_originalLength;

void Achievements_obj::createAchievement(::String name, ::Dynamic data,::String mod){
            	HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_185_createAchievement)
HXLINE( 186)		data->__SetField(HX_("ID",db,3f,00,00),::backend::Achievements_obj::_sortID,::hx::paccDynamic);
HXLINE( 187)		data->__SetField(HX_("mod",c2,16,53,00),mod,::hx::paccDynamic);
HXLINE( 188)		::backend::Achievements_obj::achievements->set(name,data);
HXLINE( 189)		::backend::Achievements_obj::_sortID++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Achievements_obj,createAchievement,(void))

void Achievements_obj::reloadList(){
            	HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_194_reloadList)
HXLINE( 196)		if (((::backend::Achievements_obj::_sortID + 1) > ::backend::Achievements_obj::_originalLength)) {
HXLINE( 197)			::Dynamic map = ::backend::Achievements_obj::achievements;
HXDLIN( 197)			::Dynamic _g_map = map;
HXDLIN( 197)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 197)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 197)				::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 197)				 ::Dynamic _g_value = ::haxe::IMap_obj::get(_g_map,key);
HXDLIN( 197)				::String _g_key = key;
HXDLIN( 197)				::String key1 = _g_key;
HXDLIN( 197)				 ::Dynamic value = _g_value;
HXLINE( 198)				if (::hx::IsNotNull( value->__Field(HX_("mod",c2,16,53,00),::hx::paccDynamic) )) {
HXLINE( 199)					::backend::Achievements_obj::achievements->remove(key1);
            				}
            			}
            		}
HXLINE( 201)		::backend::Achievements_obj::_sortID = (::backend::Achievements_obj::_originalLength - 1);
HXLINE( 203)		::String modLoaded = ::backend::Mods_obj::currentModDirectory;
HXLINE( 204)		::backend::Mods_obj::currentModDirectory = null();
HXLINE( 205)		{
HXLINE( 205)			::String key2 = HX_("data/achievements.json",4d,b1,eb,22);
HXDLIN( 205)			if (::hx::IsNull( key2 )) {
HXLINE( 205)				key2 = HX_("",00,00,00,00);
            			}
HXDLIN( 205)			::String path = (HX_("mods/",9e,2f,58,0c) + key2);
HXDLIN( 205)			bool addMods = true;
HXDLIN( 205)			::cpp::VirtualArray retVal = null();
HXDLIN( 205)			if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 205)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 205)					::String rawJson = ::StringTools_obj::trim(::sys::io::File_obj::getContent(path));
HXDLIN( 205)					bool _hx_tmp;
HXDLIN( 205)					if (::hx::IsNotNull( rawJson )) {
HXLINE( 205)						_hx_tmp = (rawJson.length > 0);
            					}
            					else {
HXLINE( 205)						_hx_tmp = false;
            					}
HXDLIN( 205)					if (_hx_tmp) {
HXLINE( 220)						retVal = ( (::cpp::VirtualArray)(::tjson::TJSON_obj::parse(rawJson,null(),null())) );
            					}
HXLINE( 205)					bool _hx_tmp1;
HXDLIN( 205)					if (addMods) {
HXLINE( 205)						_hx_tmp1 = ::hx::IsNotNull( retVal );
            					}
            					else {
HXLINE( 205)						_hx_tmp1 = false;
            					}
HXDLIN( 205)					if (_hx_tmp1) {
HXLINE( 205)						int _g = 0;
HXDLIN( 205)						int _g1 = retVal->get_length();
HXDLIN( 205)						while((_g < _g1)){
HXLINE( 205)							_g = (_g + 1);
HXDLIN( 205)							int i = (_g - 1);
HXDLIN( 205)							 ::Dynamic achieve = retVal->__get(i);
HXDLIN( 205)							if (::hx::IsNull( achieve )) {
HXLINE( 205)								::String errorTitle;
HXDLIN( 205)								if (::hx::IsNotNull( (HX_("Mod name: ",6f,0f,ef,f4) + ::backend::Mods_obj::currentModDirectory) )) {
HXLINE( 205)									errorTitle = ::backend::Mods_obj::currentModDirectory;
            								}
            								else {
HXLINE( 205)									errorTitle = HX_("None",d8,3e,e3,33);
            								}
HXDLIN( 205)								::String errorMsg = ((HX_("Achievement #",12,66,b1,5f) + (i + 1)) + HX_(" is invalid.",2d,68,60,76));
HXDLIN( 205)								::lime::app::Application_obj::current->_hx___window->alert(errorMsg,errorTitle);
HXDLIN( 205)								::haxe::Log_obj::trace((((HX_("",00,00,00,00) + errorTitle) + HX_(" - ",73,6f,18,00)) + errorMsg),::hx::SourceInfo(HX_("source/backend/Achievements.hx",4b,f8,0b,55),234,HX_("backend.Achievements",de,c1,f1,71),HX_("loadAchievementJson",b1,5a,70,5f)));
HXDLIN( 205)								continue;
            							}
HXDLIN( 205)							::String key3 = ( (::String)(achieve->__Field(HX_("save",3d,8b,4d,4c),::hx::paccDynamic)) );
HXDLIN( 205)							bool _hx_tmp2;
HXDLIN( 205)							if (::hx::IsNotNull( key3 )) {
HXLINE( 205)								_hx_tmp2 = (::StringTools_obj::trim(key3).length < 1);
            							}
            							else {
HXLINE( 205)								_hx_tmp2 = true;
            							}
HXDLIN( 205)							if (_hx_tmp2) {
HXLINE( 205)								::String errorTitle1;
HXDLIN( 205)								if (::hx::IsNotNull( achieve->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic) )) {
HXLINE( 205)									errorTitle1 = ( (::String)(achieve->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
            								}
            								else {
HXLINE( 205)									errorTitle1 = ( (::String)(achieve->__Field(HX_("save",3d,8b,4d,4c),::hx::paccDynamic)) );
            								}
HXDLIN( 205)								::String errorTitle2 = (HX_("Error on Achievement: ",6c,c9,41,f7) + errorTitle1);
HXDLIN( 205)								::String errorMsg1 = HX_("Missing valid \"save\" value.",3c,63,3d,b1);
HXDLIN( 205)								::lime::app::Application_obj::current->_hx___window->alert(errorMsg1,errorTitle2);
HXDLIN( 205)								::haxe::Log_obj::trace((((HX_("",00,00,00,00) + errorTitle2) + HX_(" - ",73,6f,18,00)) + errorMsg1),::hx::SourceInfo(HX_("source/backend/Achievements.hx",4b,f8,0b,55),246,HX_("backend.Achievements",de,c1,f1,71),HX_("loadAchievementJson",b1,5a,70,5f)));
HXDLIN( 205)								continue;
            							}
HXLINE( 249)							key3 = ::StringTools_obj::trim(key3);
HXLINE( 205)							if (::backend::Achievements_obj::achievements->exists(key3)) {
HXLINE( 205)								continue;
            							}
HXDLIN( 205)							::backend::Achievements_obj::createAchievement(key3,achieve,::backend::Mods_obj::currentModDirectory);
            						}
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g2 = _hx_e;
HXLINE( 255)						{
HXLINE( 255)							null();
            						}
HXDLIN( 255)						 ::Dynamic e = _g2;
HXLINE( 205)						{
HXLINE( 205)							::String errorTitle3;
HXDLIN( 205)							if (::hx::IsNotNull( (HX_("Mod name: ",6f,0f,ef,f4) + ::backend::Mods_obj::currentModDirectory) )) {
HXLINE( 205)								errorTitle3 = ::backend::Mods_obj::currentModDirectory;
            							}
            							else {
HXLINE( 205)								errorTitle3 = HX_("None",d8,3e,e3,33);
            							}
HXDLIN( 205)							::String errorMsg2 = (HX_("Error loading achievements.json: ",bc,94,62,2a) + ::Std_obj::string(e));
HXDLIN( 205)							::lime::app::Application_obj::current->_hx___window->alert(errorMsg2,errorTitle3);
HXDLIN( 205)							::haxe::Log_obj::trace((((HX_("",00,00,00,00) + errorTitle3) + HX_(" - ",73,6f,18,00)) + errorMsg2),::hx::SourceInfo(HX_("source/backend/Achievements.hx",4b,f8,0b,55),261,HX_("backend.Achievements",de,c1,f1,71),HX_("loadAchievementJson",b1,5a,70,5f)));
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXLINE( 206)		{
HXLINE( 206)			if (!(::backend::Mods_obj::updatedOnState)) {
HXLINE( 206)				::backend::Mods_obj::updateModList();
            			}
HXDLIN( 206)			::Array< ::String > list_enabled = ::Array_obj< ::String >::__new(0);
HXDLIN( 206)			::Array< ::String > list_disabled = ::Array_obj< ::String >::__new(0);
HXDLIN( 206)			::Array< ::String > list_all = ::Array_obj< ::String >::__new(0);
HXDLIN( 206)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 206)				int _g3 = 0;
HXDLIN( 206)				::String path1 = HX_("modsList.txt",f1,ca,08,ac);
HXDLIN( 206)				::String daList = null();
HXDLIN( 206)				::Array< ::String > formatted = path1.split(HX_(":",3a,00,00,00));
HXLINE(  23)				path1 = formatted->__get((formatted->length - 1));
HXLINE( 206)				if (::sys::FileSystem_obj::exists(path1)) {
HXLINE(  24)					daList = ::sys::io::File_obj::getContent(path1);
            				}
HXLINE( 206)				::Array< ::String > _g4;
HXDLIN( 206)				if (::hx::IsNotNull( daList )) {
HXLINE( 206)					::Array< ::String > daList1 = ::Array_obj< ::String >::__new(0);
HXLINE(  45)					daList1 = ::StringTools_obj::trim(daList).split(HX_("\n",0a,00,00,00));
HXLINE( 206)					{
HXLINE( 206)						int _g5 = 0;
HXDLIN( 206)						int _g6 = daList1->length;
HXDLIN( 206)						while((_g5 < _g6)){
HXLINE( 206)							_g5 = (_g5 + 1);
HXDLIN( 206)							int i1 = (_g5 - 1);
HXDLIN( 206)							daList1[i1] = ::StringTools_obj::trim(daList1->__get(i1));
            						}
            					}
HXDLIN( 206)					_g4 = daList1;
            				}
            				else {
HXLINE( 206)					_g4 = ::Array_obj< ::String >::__new(0);
            				}
HXDLIN( 206)				while((_g3 < _g4->length)){
HXLINE( 206)					::String mod = _g4->__get(_g3);
HXDLIN( 206)					_g3 = (_g3 + 1);
HXDLIN( 206)					if ((::StringTools_obj::trim(mod).length < 1)) {
HXLINE( 206)						continue;
            					}
HXDLIN( 206)					::Array< ::String > dat = mod.split(HX_("|",7c,00,00,00));
HXDLIN( 206)					list_all->push(dat->__get(0));
HXDLIN( 206)					if ((dat->__get(1) == HX_("1",31,00,00,00))) {
HXLINE( 206)						list_enabled->push(dat->__get(0));
            					}
            					else {
HXLINE( 206)						list_disabled->push(dat->__get(0));
            					}
            				}
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g7 = _hx_e;
HXLINE( 166)					 ::haxe::Exception e1 = ::haxe::Exception_obj::caught(_g7);
HXLINE( 206)					::haxe::Log_obj::trace(e1,::hx::SourceInfo(HX_("source/backend/Mods.hx",1e,5b,8b,ff),167,HX_("backend.Mods",2b,aa,ba,a1),HX_("parseList",31,6e,59,cf)));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXDLIN( 206)			int _g_current = 0;
HXDLIN( 206)			::Array< ::String > _g_array = list_enabled;
HXDLIN( 206)			while((_g_current < _g_array->length)){
HXLINE( 206)				::String _g_value1 = _g_array->__get(_g_current);
HXDLIN( 206)				_g_current = (_g_current + 1);
HXDLIN( 206)				int _g_key1 = (_g_current - 1);
HXDLIN( 206)				int i2 = _g_key1;
HXDLIN( 206)				::String mod1 = _g_value1;
HXLINE( 207)				{
HXLINE( 208)					::backend::Mods_obj::currentModDirectory = mod1;
HXLINE( 209)					{
HXLINE( 209)						::String key4 = ((HX_("",00,00,00,00) + mod1) + HX_("/data/achievements.json",bc,8c,3e,ac));
HXDLIN( 209)						if (::hx::IsNull( key4 )) {
HXLINE( 209)							key4 = HX_("",00,00,00,00);
            						}
HXDLIN( 209)						::String path2 = (HX_("mods/",9e,2f,58,0c) + key4);
HXDLIN( 209)						bool addMods1 = true;
HXDLIN( 209)						::cpp::VirtualArray retVal1 = null();
HXDLIN( 209)						if (::sys::FileSystem_obj::exists(path2)) {
HXLINE( 209)							try {
            								HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 209)								::String rawJson1 = ::StringTools_obj::trim(::sys::io::File_obj::getContent(path2));
HXDLIN( 209)								bool _hx_tmp3;
HXDLIN( 209)								if (::hx::IsNotNull( rawJson1 )) {
HXLINE( 209)									_hx_tmp3 = (rawJson1.length > 0);
            								}
            								else {
HXLINE( 209)									_hx_tmp3 = false;
            								}
HXDLIN( 209)								if (_hx_tmp3) {
HXLINE( 220)									retVal1 = ( (::cpp::VirtualArray)(::tjson::TJSON_obj::parse(rawJson1,null(),null())) );
            								}
HXLINE( 209)								bool _hx_tmp4;
HXDLIN( 209)								if (addMods1) {
HXLINE( 209)									_hx_tmp4 = ::hx::IsNotNull( retVal1 );
            								}
            								else {
HXLINE( 209)									_hx_tmp4 = false;
            								}
HXDLIN( 209)								if (_hx_tmp4) {
HXLINE( 209)									int _g8 = 0;
HXDLIN( 209)									int _g9 = retVal1->get_length();
HXDLIN( 209)									while((_g8 < _g9)){
HXLINE( 209)										_g8 = (_g8 + 1);
HXDLIN( 209)										int i3 = (_g8 - 1);
HXDLIN( 209)										 ::Dynamic achieve1 = retVal1->__get(i3);
HXDLIN( 209)										if (::hx::IsNull( achieve1 )) {
HXLINE( 209)											::String errorTitle4;
HXDLIN( 209)											if (::hx::IsNotNull( (HX_("Mod name: ",6f,0f,ef,f4) + ::backend::Mods_obj::currentModDirectory) )) {
HXLINE( 209)												errorTitle4 = ::backend::Mods_obj::currentModDirectory;
            											}
            											else {
HXLINE( 209)												errorTitle4 = HX_("None",d8,3e,e3,33);
            											}
HXDLIN( 209)											::String errorMsg3 = ((HX_("Achievement #",12,66,b1,5f) + (i3 + 1)) + HX_(" is invalid.",2d,68,60,76));
HXDLIN( 209)											::lime::app::Application_obj::current->_hx___window->alert(errorMsg3,errorTitle4);
HXDLIN( 209)											::haxe::Log_obj::trace((((HX_("",00,00,00,00) + errorTitle4) + HX_(" - ",73,6f,18,00)) + errorMsg3),::hx::SourceInfo(HX_("source/backend/Achievements.hx",4b,f8,0b,55),234,HX_("backend.Achievements",de,c1,f1,71),HX_("loadAchievementJson",b1,5a,70,5f)));
HXDLIN( 209)											continue;
            										}
HXDLIN( 209)										::String key5 = ( (::String)(achieve1->__Field(HX_("save",3d,8b,4d,4c),::hx::paccDynamic)) );
HXDLIN( 209)										bool _hx_tmp5;
HXDLIN( 209)										if (::hx::IsNotNull( key5 )) {
HXLINE( 209)											_hx_tmp5 = (::StringTools_obj::trim(key5).length < 1);
            										}
            										else {
HXLINE( 209)											_hx_tmp5 = true;
            										}
HXDLIN( 209)										if (_hx_tmp5) {
HXLINE( 209)											::String errorTitle5;
HXDLIN( 209)											if (::hx::IsNotNull( achieve1->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic) )) {
HXLINE( 209)												errorTitle5 = ( (::String)(achieve1->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
            											}
            											else {
HXLINE( 209)												errorTitle5 = ( (::String)(achieve1->__Field(HX_("save",3d,8b,4d,4c),::hx::paccDynamic)) );
            											}
HXDLIN( 209)											::String errorTitle6 = (HX_("Error on Achievement: ",6c,c9,41,f7) + errorTitle5);
HXDLIN( 209)											::String errorMsg4 = HX_("Missing valid \"save\" value.",3c,63,3d,b1);
HXDLIN( 209)											::lime::app::Application_obj::current->_hx___window->alert(errorMsg4,errorTitle6);
HXDLIN( 209)											::haxe::Log_obj::trace((((HX_("",00,00,00,00) + errorTitle6) + HX_(" - ",73,6f,18,00)) + errorMsg4),::hx::SourceInfo(HX_("source/backend/Achievements.hx",4b,f8,0b,55),246,HX_("backend.Achievements",de,c1,f1,71),HX_("loadAchievementJson",b1,5a,70,5f)));
HXDLIN( 209)											continue;
            										}
HXLINE( 249)										key5 = ::StringTools_obj::trim(key5);
HXLINE( 209)										if (::backend::Achievements_obj::achievements->exists(key5)) {
HXLINE( 209)											continue;
            										}
HXDLIN( 209)										::backend::Achievements_obj::createAchievement(key5,achieve1,::backend::Mods_obj::currentModDirectory);
            									}
            								}
            							} catch( ::Dynamic _hx_e) {
            								if (_hx_e.IsClass<  ::Dynamic >() ){
            									HX_STACK_BEGIN_CATCH
            									 ::Dynamic _g10 = _hx_e;
HXLINE( 255)									{
HXLINE( 255)										null();
            									}
HXDLIN( 255)									 ::Dynamic e2 = _g10;
HXLINE( 209)									{
HXLINE( 209)										::String errorTitle7;
HXDLIN( 209)										if (::hx::IsNotNull( (HX_("Mod name: ",6f,0f,ef,f4) + ::backend::Mods_obj::currentModDirectory) )) {
HXLINE( 209)											errorTitle7 = ::backend::Mods_obj::currentModDirectory;
            										}
            										else {
HXLINE( 209)											errorTitle7 = HX_("None",d8,3e,e3,33);
            										}
HXDLIN( 209)										::String errorMsg5 = (HX_("Error loading achievements.json: ",bc,94,62,2a) + ::Std_obj::string(e2));
HXDLIN( 209)										::lime::app::Application_obj::current->_hx___window->alert(errorMsg5,errorTitle7);
HXDLIN( 209)										::haxe::Log_obj::trace((((HX_("",00,00,00,00) + errorTitle7) + HX_(" - ",73,6f,18,00)) + errorMsg5),::hx::SourceInfo(HX_("source/backend/Achievements.hx",4b,f8,0b,55),261,HX_("backend.Achievements",de,c1,f1,71),HX_("loadAchievementJson",b1,5a,70,5f)));
            									}
            								}
            								else {
            									HX_STACK_DO_THROW(_hx_e);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 211)		::backend::Mods_obj::currentModDirectory = modLoaded;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Achievements_obj,reloadList,(void))

::cpp::VirtualArray Achievements_obj::loadAchievementJson(::String path,::hx::Null< bool >  __o_addMods){
            		bool addMods = __o_addMods.Default(true);
            	HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_215_loadAchievementJson)
HXLINE( 216)		::cpp::VirtualArray retVal = null();
HXLINE( 217)		if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 218)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 219)				::String rawJson = ::StringTools_obj::trim(::sys::io::File_obj::getContent(path));
HXLINE( 220)				bool _hx_tmp;
HXDLIN( 220)				if (::hx::IsNotNull( rawJson )) {
HXLINE( 220)					_hx_tmp = (rawJson.length > 0);
            				}
            				else {
HXLINE( 220)					_hx_tmp = false;
            				}
HXDLIN( 220)				if (_hx_tmp) {
HXLINE( 220)					retVal = ( (::cpp::VirtualArray)(::tjson::TJSON_obj::parse(rawJson,null(),null())) );
            				}
HXLINE( 222)				bool _hx_tmp1;
HXDLIN( 222)				if (addMods) {
HXLINE( 222)					_hx_tmp1 = ::hx::IsNotNull( retVal );
            				}
            				else {
HXLINE( 222)					_hx_tmp1 = false;
            				}
HXDLIN( 222)				if (_hx_tmp1) {
HXLINE( 224)					int _g = 0;
HXDLIN( 224)					int _g1 = retVal->get_length();
HXDLIN( 224)					while((_g < _g1)){
HXLINE( 224)						_g = (_g + 1);
HXDLIN( 224)						int i = (_g - 1);
HXLINE( 226)						 ::Dynamic achieve = retVal->__get(i);
HXLINE( 227)						if (::hx::IsNull( achieve )) {
HXLINE( 229)							::String errorTitle;
HXDLIN( 229)							if (::hx::IsNotNull( (HX_("Mod name: ",6f,0f,ef,f4) + ::backend::Mods_obj::currentModDirectory) )) {
HXLINE( 229)								errorTitle = ::backend::Mods_obj::currentModDirectory;
            							}
            							else {
HXLINE( 229)								errorTitle = HX_("None",d8,3e,e3,33);
            							}
HXLINE( 230)							::String errorMsg = ((HX_("Achievement #",12,66,b1,5f) + (i + 1)) + HX_(" is invalid.",2d,68,60,76));
HXLINE( 232)							::lime::app::Application_obj::current->_hx___window->alert(errorMsg,errorTitle);
HXLINE( 234)							::haxe::Log_obj::trace((((HX_("",00,00,00,00) + errorTitle) + HX_(" - ",73,6f,18,00)) + errorMsg),::hx::SourceInfo(HX_("source/backend/Achievements.hx",4b,f8,0b,55),234,HX_("backend.Achievements",de,c1,f1,71),HX_("loadAchievementJson",b1,5a,70,5f)));
HXLINE( 235)							continue;
            						}
HXLINE( 238)						::String key = ( (::String)(achieve->__Field(HX_("save",3d,8b,4d,4c),::hx::paccDynamic)) );
HXLINE( 239)						bool _hx_tmp2;
HXDLIN( 239)						if (::hx::IsNotNull( key )) {
HXLINE( 239)							_hx_tmp2 = (::StringTools_obj::trim(key).length < 1);
            						}
            						else {
HXLINE( 239)							_hx_tmp2 = true;
            						}
HXDLIN( 239)						if (_hx_tmp2) {
HXLINE( 241)							::String errorTitle1;
HXDLIN( 241)							if (::hx::IsNotNull( achieve->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic) )) {
HXLINE( 241)								errorTitle1 = ( (::String)(achieve->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
            							}
            							else {
HXLINE( 241)								errorTitle1 = ( (::String)(achieve->__Field(HX_("save",3d,8b,4d,4c),::hx::paccDynamic)) );
            							}
HXDLIN( 241)							::String errorTitle2 = (HX_("Error on Achievement: ",6c,c9,41,f7) + errorTitle1);
HXLINE( 242)							::String errorMsg1 = HX_("Missing valid \"save\" value.",3c,63,3d,b1);
HXLINE( 244)							::lime::app::Application_obj::current->_hx___window->alert(errorMsg1,errorTitle2);
HXLINE( 246)							::haxe::Log_obj::trace((((HX_("",00,00,00,00) + errorTitle2) + HX_(" - ",73,6f,18,00)) + errorMsg1),::hx::SourceInfo(HX_("source/backend/Achievements.hx",4b,f8,0b,55),246,HX_("backend.Achievements",de,c1,f1,71),HX_("loadAchievementJson",b1,5a,70,5f)));
HXLINE( 247)							continue;
            						}
HXLINE( 249)						key = ::StringTools_obj::trim(key);
HXLINE( 250)						if (::backend::Achievements_obj::achievements->exists(key)) {
HXLINE( 250)							continue;
            						}
HXLINE( 252)						::backend::Achievements_obj::createAchievement(key,achieve,::backend::Mods_obj::currentModDirectory);
            					}
            				}
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g2 = _hx_e;
HXLINE( 255)					{
HXLINE( 255)						null();
            					}
HXDLIN( 255)					 ::Dynamic e = _g2;
HXDLIN( 255)					{
HXLINE( 256)						::String errorTitle3;
HXDLIN( 256)						if (::hx::IsNotNull( (HX_("Mod name: ",6f,0f,ef,f4) + ::backend::Mods_obj::currentModDirectory) )) {
HXLINE( 256)							errorTitle3 = ::backend::Mods_obj::currentModDirectory;
            						}
            						else {
HXLINE( 256)							errorTitle3 = HX_("None",d8,3e,e3,33);
            						}
HXLINE( 257)						::String errorMsg2 = (HX_("Error loading achievements.json: ",bc,94,62,2a) + ::Std_obj::string(e));
HXLINE( 259)						::lime::app::Application_obj::current->_hx___window->alert(errorMsg2,errorTitle3);
HXLINE( 261)						::haxe::Log_obj::trace((((HX_("",00,00,00,00) + errorTitle3) + HX_(" - ",73,6f,18,00)) + errorMsg2),::hx::SourceInfo(HX_("source/backend/Achievements.hx",4b,f8,0b,55),261,HX_("backend.Achievements",de,c1,f1,71),HX_("loadAchievementJson",b1,5a,70,5f)));
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE( 264)		return retVal;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Achievements_obj,loadAchievementJson,return )

void Achievements_obj::addLuaCallbacks( cpp::Reference<lua_State> lua){
            	HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_270_addLuaCallbacks)
HXLINE( 271)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			Float _hx_run(::String name){
            				HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_272_addLuaCallbacks)
HXLINE( 273)				if (!(::backend::Achievements_obj::achievements->exists(name))) {
HXLINE( 275)					::psychlua::FunkinLua_obj::luaTrace((HX_("getAchievementScore: Couldnt find achievement: ",86,d8,fb,e2) + name),false,false,-65536);
HXLINE( 276)					return ( (Float)(-1) );
            				}
HXLINE( 278)				return ::backend::Achievements_obj::getScore(name);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 271)			::llua::Lua_helper_obj::callbacks->set(HX_("getAchievementScore",19,99,d5,64), ::Dynamic(new _hx_Closure_0()));
HXDLIN( 271)			linc::callbacks::add_callback_function(lua,HX_("getAchievementScore",19,99,d5,64));
            		}
HXLINE( 280)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(3)
            			Float _hx_run(::String name, ::Dynamic __o_value, ::Dynamic __o_saveIfNotUnlocked){
            		 ::Dynamic value = __o_value;
            		if (::hx::IsNull(__o_value)) value = 1;
            		 ::Dynamic saveIfNotUnlocked = __o_saveIfNotUnlocked;
            		if (::hx::IsNull(__o_saveIfNotUnlocked)) saveIfNotUnlocked = true;
            				HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_281_addLuaCallbacks)
HXLINE( 282)				if (!(::backend::Achievements_obj::achievements->exists(name))) {
HXLINE( 284)					::psychlua::FunkinLua_obj::luaTrace((HX_("setAchievementScore: Couldnt find achievement: ",92,05,e7,a3) + name),false,false,-65536);
HXLINE( 285)					return ( (Float)(-1) );
            				}
HXLINE( 287)				return ::backend::Achievements_obj::setScore(name,( (Float)(value) ),saveIfNotUnlocked);
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE( 280)			::llua::Lua_helper_obj::callbacks->set(HX_("setAchievementScore",25,8c,72,a1), ::Dynamic(new _hx_Closure_1()));
HXDLIN( 280)			linc::callbacks::add_callback_function(lua,HX_("setAchievementScore",25,8c,72,a1));
            		}
HXLINE( 289)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(3)
            			Float _hx_run(::String name, ::Dynamic __o_value, ::Dynamic __o_saveIfNotUnlocked){
            		 ::Dynamic value = __o_value;
            		if (::hx::IsNull(__o_value)) value = 1;
            		 ::Dynamic saveIfNotUnlocked = __o_saveIfNotUnlocked;
            		if (::hx::IsNull(__o_saveIfNotUnlocked)) saveIfNotUnlocked = true;
            				HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_290_addLuaCallbacks)
HXLINE( 291)				if (!(::backend::Achievements_obj::achievements->exists(name))) {
HXLINE( 293)					::psychlua::FunkinLua_obj::luaTrace((HX_("addAchievementScore: Couldnt find achievement: ",91,fa,58,c6) + name),false,false,-65536);
HXLINE( 294)					return ( (Float)(-1) );
            				}
HXLINE( 296)				return ::backend::Achievements_obj::addScore(name,value,saveIfNotUnlocked);
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE( 289)			::llua::Lua_helper_obj::callbacks->set(HX_("addAchievementScore",a4,10,e6,04), ::Dynamic(new _hx_Closure_2()));
HXDLIN( 289)			linc::callbacks::add_callback_function(lua,HX_("addAchievementScore",a4,10,e6,04));
            		}
HXLINE( 298)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(1)
            			 ::Dynamic _hx_run(::String name){
            				HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_299_addLuaCallbacks)
HXLINE( 300)				if (!(::backend::Achievements_obj::achievements->exists(name))) {
HXLINE( 302)					::psychlua::FunkinLua_obj::luaTrace((HX_("unlockAchievement: Couldnt find achievement: ",78,4a,1c,cd) + name),false,false,-65536);
HXLINE( 303)					return null();
            				}
HXLINE( 305)				return ::backend::Achievements_obj::unlock(name,null());
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 298)			::llua::Lua_helper_obj::callbacks->set(HX_("unlockAchievement",0b,e4,d1,6a), ::Dynamic(new _hx_Closure_3()));
HXDLIN( 298)			linc::callbacks::add_callback_function(lua,HX_("unlockAchievement",0b,e4,d1,6a));
            		}
HXLINE( 307)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(1)
            			 ::Dynamic _hx_run(::String name){
            				HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_308_addLuaCallbacks)
HXLINE( 309)				if (!(::backend::Achievements_obj::achievements->exists(name))) {
HXLINE( 311)					::psychlua::FunkinLua_obj::luaTrace((HX_("isAchievementUnlocked: Couldnt find achievement: ",d5,35,ef,18) + name),false,false,-65536);
HXLINE( 312)					return null();
            				}
HXLINE( 314)				return ::backend::Achievements_obj::achievementsUnlocked->contains(name);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 307)			::llua::Lua_helper_obj::callbacks->set(HX_("isAchievementUnlocked",e8,ad,c9,f2), ::Dynamic(new _hx_Closure_4()));
HXDLIN( 307)			linc::callbacks::add_callback_function(lua,HX_("isAchievementUnlocked",e8,ad,c9,f2));
            		}
HXLINE( 316)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_5) HXARGC(1)
            			bool _hx_run(::String name){
            				HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_316_addLuaCallbacks)
HXLINE( 316)				return ::backend::Achievements_obj::achievements->exists(name);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 316)			::llua::Lua_helper_obj::callbacks->set(HX_("achievementExists",ab,cf,0f,29), ::Dynamic(new _hx_Closure_5()));
HXDLIN( 316)			linc::callbacks::add_callback_function(lua,HX_("achievementExists",ab,cf,0f,29));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Achievements_obj,addLuaCallbacks,(void))


Achievements_obj::Achievements_obj()
{
}

bool Achievements_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"load") ) { outValue = load_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"save") ) { outValue = save_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unlock") ) { outValue = unlock_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_popups") ) { outValue = ( _popups ); return true; }
		if (HX_FIELD_EQ(inName,"_sortID") ) { outValue = ( _sortID ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getScore") ) { outValue = getScore_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setScore") ) { outValue = setScore_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addScore") ) { outValue = addScore_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"variables") ) { outValue = ( variables ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_firstLoad") ) { outValue = ( _firstLoad ); return true; }
		if (HX_FIELD_EQ(inName,"_scoreFunc") ) { outValue = _scoreFunc_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isUnlocked") ) { outValue = isUnlocked_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"startPopup") ) { outValue = startPopup_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"reloadList") ) { outValue = reloadList_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_lastUnlock") ) { outValue = ( _lastUnlock ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"achievements") ) { outValue = ( achievements ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"showingPopups") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_showingPopups() ); return true; } }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_originalLength") ) { outValue = ( _originalLength ); return true; }
		if (HX_FIELD_EQ(inName,"addLuaCallbacks") ) { outValue = addLuaCallbacks_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_showingPopups") ) { outValue = get_showingPopups_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createAchievement") ) { outValue = createAchievement_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"loadAchievementJson") ) { outValue = loadAchievementJson_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"achievementsUnlocked") ) { outValue = ( achievementsUnlocked ); return true; }
	}
	return false;
}

bool Achievements_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"_popups") ) { _popups=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"_sortID") ) { _sortID=ioValue.Cast< int >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"variables") ) { variables=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_firstLoad") ) { _firstLoad=ioValue.Cast< bool >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_lastUnlock") ) { _lastUnlock=ioValue.Cast< int >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"achievements") ) { achievements=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_originalLength") ) { _originalLength=ioValue.Cast< int >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"achievementsUnlocked") ) { achievementsUnlocked=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Achievements_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Achievements_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Achievements_obj::achievements,HX_("achievements",24,a1,6b,86)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Achievements_obj::variables,HX_("variables",b7,e2,62,82)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &Achievements_obj::achievementsUnlocked,HX_("achievementsUnlocked",67,55,27,1c)},
	{::hx::fsBool,(void *) &Achievements_obj::_firstLoad,HX_("_firstLoad",37,92,28,5a)},
	{::hx::fsInt,(void *) &Achievements_obj::_lastUnlock,HX_("_lastUnlock",d9,52,f1,02)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &Achievements_obj::_popups,HX_("_popups",66,ee,4a,6a)},
	{::hx::fsInt,(void *) &Achievements_obj::_sortID,HX_("_sortID",58,8c,ae,9e)},
	{::hx::fsInt,(void *) &Achievements_obj::_originalLength,HX_("_originalLength",b6,18,4e,20)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Achievements_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Achievements_obj::achievements,"achievements");
	HX_MARK_MEMBER_NAME(Achievements_obj::variables,"variables");
	HX_MARK_MEMBER_NAME(Achievements_obj::achievementsUnlocked,"achievementsUnlocked");
	HX_MARK_MEMBER_NAME(Achievements_obj::_firstLoad,"_firstLoad");
	HX_MARK_MEMBER_NAME(Achievements_obj::_lastUnlock,"_lastUnlock");
	HX_MARK_MEMBER_NAME(Achievements_obj::_popups,"_popups");
	HX_MARK_MEMBER_NAME(Achievements_obj::_sortID,"_sortID");
	HX_MARK_MEMBER_NAME(Achievements_obj::_originalLength,"_originalLength");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Achievements_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Achievements_obj::achievements,"achievements");
	HX_VISIT_MEMBER_NAME(Achievements_obj::variables,"variables");
	HX_VISIT_MEMBER_NAME(Achievements_obj::achievementsUnlocked,"achievementsUnlocked");
	HX_VISIT_MEMBER_NAME(Achievements_obj::_firstLoad,"_firstLoad");
	HX_VISIT_MEMBER_NAME(Achievements_obj::_lastUnlock,"_lastUnlock");
	HX_VISIT_MEMBER_NAME(Achievements_obj::_popups,"_popups");
	HX_VISIT_MEMBER_NAME(Achievements_obj::_sortID,"_sortID");
	HX_VISIT_MEMBER_NAME(Achievements_obj::_originalLength,"_originalLength");
};

#endif

::hx::Class Achievements_obj::__mClass;

static ::String Achievements_obj_sStaticFields[] = {
	HX_("init",10,3b,bb,45),
	HX_("achievements",24,a1,6b,86),
	HX_("variables",b7,e2,62,82),
	HX_("achievementsUnlocked",67,55,27,1c),
	HX_("_firstLoad",37,92,28,5a),
	HX_("get",96,80,4e,00),
	HX_("exists",dc,1d,e0,bf),
	HX_("load",26,9a,b7,47),
	HX_("save",3d,8b,4d,4c),
	HX_("getScore",dc,82,b0,d8),
	HX_("setScore",50,dc,0d,87),
	HX_("addScore",71,99,36,f2),
	HX_("_scoreFunc",77,17,2b,2f),
	HX_("_lastUnlock",d9,52,f1,02),
	HX_("unlock",c4,a2,8c,65),
	HX_("isUnlocked",2d,46,bd,d6),
	HX_("_popups",66,ee,4a,6a),
	HX_("get_showingPopups",03,62,f7,58),
	HX_("startPopup",6a,e2,ab,e2),
	HX_("_sortID",58,8c,ae,9e),
	HX_("_originalLength",b6,18,4e,20),
	HX_("createAchievement",d3,9a,5d,b1),
	HX_("reloadList",57,bc,ba,92),
	HX_("loadAchievementJson",b1,5a,70,5f),
	HX_("addLuaCallbacks",f7,ed,82,4d),
	::String(null())
};

void Achievements_obj::__register()
{
	Achievements_obj _hx_dummy;
	Achievements_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.Achievements",de,c1,f1,71);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Achievements_obj::__GetStatic;
	__mClass->mSetStaticField = &Achievements_obj::__SetStatic;
	__mClass->mMarkFunc = Achievements_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Achievements_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Achievements_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Achievements_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Achievements_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Achievements_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Achievements_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_49_boot)
HXDLIN(  49)		achievements =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_50_boot)
HXDLIN(  50)		variables =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_51_boot)
HXDLIN(  51)		achievementsUnlocked = ::Array_obj< ::String >::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_52_boot)
HXDLIN(  52)		_firstLoad = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_130_boot)
HXDLIN( 130)		_lastUnlock = -999;
            	}
{
            	HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_163_boot)
HXDLIN( 163)		_popups = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_182_boot)
HXDLIN( 182)		_sortID = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_0df3ce31f36d3c87_183_boot)
HXDLIN( 183)		_originalLength = -1;
            	}
}

} // end namespace backend
