// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_List
#include <haxe/ds/List.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hscriptBase_CType
#include <hscriptBase/CType.h>
#endif
#ifndef INCLUDED_hscriptBase_Const
#include <hscriptBase/Const.h>
#endif
#ifndef INCLUDED_hscriptBase_Error
#include <hscriptBase/Error.h>
#endif
#ifndef INCLUDED_hscriptBase_ErrorDef
#include <hscriptBase/ErrorDef.h>
#endif
#ifndef INCLUDED_hscriptBase_ExprDef
#include <hscriptBase/ExprDef.h>
#endif
#ifndef INCLUDED_hscriptBase_Parser
#include <hscriptBase/Parser.h>
#endif
#ifndef INCLUDED_hscriptBase_Token
#include <hscriptBase/Token.h>
#endif
#ifndef INCLUDED_hscriptBase_Tools
#include <hscriptBase/Tools.h>
#endif
#ifndef INCLUDED_tea_SScript
#include <tea/SScript.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_948055e9f9c336b1_54_new,"hscriptBase.Parser","new",0xea57b77b,"hscriptBase.Parser.new","hscriptBase/Parser.hx",54,0x85a58834)
static const ::String _hx_array_data_d7b9de09_4[] = {
	HX_("is",ea,5b,00,00),
};
static const ::String _hx_array_data_d7b9de09_5[] = {
	HX_("%",25,00,00,00),
};
static const ::String _hx_array_data_d7b9de09_6[] = {
	HX_("*",2a,00,00,00),HX_("/",2f,00,00,00),
};
static const ::String _hx_array_data_d7b9de09_7[] = {
	HX_("+",2b,00,00,00),HX_("-",2d,00,00,00),
};
static const ::String _hx_array_data_d7b9de09_8[] = {
	HX_("<<",80,34,00,00),HX_(">>",40,36,00,00),HX_(">>>",fe,41,2f,00),
};
static const ::String _hx_array_data_d7b9de09_9[] = {
	HX_("|",7c,00,00,00),HX_("&",26,00,00,00),HX_("^",5e,00,00,00),
};
static const ::String _hx_array_data_d7b9de09_10[] = {
	HX_("==",60,35,00,00),HX_("!=",fc,1c,00,00),HX_(">",3e,00,00,00),HX_("<",3c,00,00,00),HX_(">=",3f,36,00,00),HX_("<=",81,34,00,00),
};
static const ::String _hx_array_data_d7b9de09_11[] = {
	HX_("...",ee,0f,23,00),
};
static const ::String _hx_array_data_d7b9de09_12[] = {
	HX_("&&",40,21,00,00),
};
static const ::String _hx_array_data_d7b9de09_13[] = {
	HX_("||",80,6c,00,00),
};
static const ::String _hx_array_data_d7b9de09_14[] = {
	HX_("=",3d,00,00,00),HX_("+=",b2,25,00,00),HX_("-=",70,27,00,00),HX_("*=",d3,24,00,00),HX_("/=",2e,29,00,00),HX_("%=",78,20,00,00),HX_("<<=",bd,bb,2d,00),HX_(">>=",fd,41,2f,00),HX_(">>>=",7f,7c,2a,29),HX_("|=",41,6c,00,00),HX_("&=",57,21,00,00),HX_("^=",1f,52,00,00),HX_("=>",61,35,00,00),
};
static const ::String _hx_array_data_d7b9de09_15[] = {
	HX_("->",71,27,00,00),
};
static const ::String _hx_array_data_d7b9de09_16[] = {
	HX_("!",21,00,00,00),HX_("++",a0,25,00,00),HX_("--",60,27,00,00),HX_("~",7e,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_143_error,"hscriptBase.Parser","error",0xd349efa3,"hscriptBase.Parser.error","hscriptBase/Parser.hx",143,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_150_invalidChar,"hscriptBase.Parser","invalidChar",0xe407a788,"hscriptBase.Parser.invalidChar","hscriptBase/Parser.hx",150,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_153_initParser,"hscriptBase.Parser","initParser",0x2b76fa54,"hscriptBase.Parser.initParser","hscriptBase/Parser.hx",153,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_170_parseString,"hscriptBase.Parser","parseString",0xc6a5cf7f,"hscriptBase.Parser.parseString","hscriptBase/Parser.hx",170,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_184_unexpected,"hscriptBase.Parser","unexpected",0xff9d1816,"hscriptBase.Parser.unexpected","hscriptBase/Parser.hx",184,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_189_push,"hscriptBase.Parser","push",0x23c7625f,"hscriptBase.Parser.push","hscriptBase/Parser.hx",189,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_195_ensure,"hscriptBase.Parser","ensure",0xc07b3183,"hscriptBase.Parser.ensure","hscriptBase/Parser.hx",195,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_200_ensureToken,"hscriptBase.Parser","ensureToken",0x266c6676,"hscriptBase.Parser.ensureToken","hscriptBase/Parser.hx",200,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_205_maybe,"hscriptBase.Parser","maybe",0x63473783,"hscriptBase.Parser.maybe","hscriptBase/Parser.hx",205,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_213_getIdent,"hscriptBase.Parser","getIdent",0x3e69c97f,"hscriptBase.Parser.getIdent","hscriptBase/Parser.hx",213,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_225_expr,"hscriptBase.Parser","expr",0x1c844dba,"hscriptBase.Parser.expr","hscriptBase/Parser.hx",225,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_229_pmin,"hscriptBase.Parser","pmin",0x23c147a7,"hscriptBase.Parser.pmin","hscriptBase/Parser.hx",229,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_233_pmax,"hscriptBase.Parser","pmax",0x23c140b9,"hscriptBase.Parser.pmax","hscriptBase/Parser.hx",233,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_236_mk,"hscriptBase.Parser","mk",0xc55b14a3,"hscriptBase.Parser.mk","hscriptBase/Parser.hx",236,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_243_isBlock,"hscriptBase.Parser","isBlock",0x14d7299e,"hscriptBase.Parser.isBlock","hscriptBase/Parser.hx",243,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_262_parseFullExpr,"hscriptBase.Parser","parseFullExpr",0x9260b492,"hscriptBase.Parser.parseFullExpr","hscriptBase/Parser.hx",262,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_288_parseObject,"hscriptBase.Parser","parseObject",0xcab5256d,"hscriptBase.Parser.parseObject","hscriptBase/Parser.hx",288,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_323_parseExpr,"hscriptBase.Parser","parseExpr",0xd9f2fc63,"hscriptBase.Parser.parseExpr","hscriptBase/Parser.hx",323,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_463_parseLambda,"hscriptBase.Parser","parseLambda",0x0635d9b5,"hscriptBase.Parser.parseLambda","hscriptBase/Parser.hx",463,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_483_parseMetaArgs,"hscriptBase.Parser","parseMetaArgs",0x643378f0,"hscriptBase.Parser.parseMetaArgs","hscriptBase/Parser.hx",483,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_507_mapCompr,"hscriptBase.Parser","mapCompr",0xe8b91b4c,"hscriptBase.Parser.mapCompr","hscriptBase/Parser.hx",507,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_528_makeUnop,"hscriptBase.Parser","makeUnop",0x6b613bcd,"hscriptBase.Parser.makeUnop","hscriptBase/Parser.hx",528,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_538_makeBinop,"hscriptBase.Parser","makeBinop",0x95c73e35,"hscriptBase.Parser.makeBinop","hscriptBase/Parser.hx",538,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_557_parseStructure,"hscriptBase.Parser","parseStructure",0xd5688e45,"hscriptBase.Parser.parseStructure","hscriptBase/Parser.hx",557,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_1031_parseExprNext,"hscriptBase.Parser","parseExprNext",0xe9a81af6,"hscriptBase.Parser.parseExprNext","hscriptBase/Parser.hx",1031,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_1095_parseFunctionArgs,"hscriptBase.Parser","parseFunctionArgs",0x113cadc3,"hscriptBase.Parser.parseFunctionArgs","hscriptBase/Parser.hx",1095,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_1137_parseFunctionDecl,"hscriptBase.Parser","parseFunctionDecl",0x132e70d0,"hscriptBase.Parser.parseFunctionDecl","hscriptBase/Parser.hx",1137,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_1151_parsePath,"hscriptBase.Parser","parsePath",0xe126e4d3,"hscriptBase.Parser.parsePath","hscriptBase/Parser.hx",1151,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_1164_parseType,"hscriptBase.Parser","parseType",0xe3ddf1e8,"hscriptBase.Parser.parseType","hscriptBase/Parser.hx",1164,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_1207_parseType,"hscriptBase.Parser","parseType",0xe3ddf1e8,"hscriptBase.Parser.parseType","hscriptBase/Parser.hx",1207,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_1284_parseTypeNext,"hscriptBase.Parser","parseTypeNext",0xf0fcb6fb,"hscriptBase.Parser.parseTypeNext","hscriptBase/Parser.hx",1284,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_1306_parseExprList,"hscriptBase.Parser","parseExprList",0xe858b261,"hscriptBase.Parser.parseExprList","hscriptBase/Parser.hx",1306,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_1329_readChar,"hscriptBase.Parser","readChar",0x90d0b051,"hscriptBase.Parser.readChar","hscriptBase/Parser.hx",1329,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_1332_readString,"hscriptBase.Parser","readString",0x44550f0c,"hscriptBase.Parser.readString","hscriptBase/Parser.hx",1332,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_1390_token,"hscriptBase.Parser","token",0x744ba6d4,"hscriptBase.Parser.token","hscriptBase/Parser.hx",1390,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_1410__token,"hscriptBase.Parser","_token",0xcc1205ff,"hscriptBase.Parser._token","hscriptBase/Parser.hx",1410,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_1647_parsePreproCond,"hscriptBase.Parser","parsePreproCond",0x4521309a,"hscriptBase.Parser.parsePreproCond","hscriptBase/Parser.hx",1647,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_1664_evalPreproCond,"hscriptBase.Parser","evalPreproCond",0xfa4a2e6d,"hscriptBase.Parser.evalPreproCond","hscriptBase/Parser.hx",1664,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_1662_evalPreproCond,"hscriptBase.Parser","evalPreproCond",0xfa4a2e6d,"hscriptBase.Parser.evalPreproCond","hscriptBase/Parser.hx",1662,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_1805_preprocess,"hscriptBase.Parser","preprocess",0xcbefdef1,"hscriptBase.Parser.preprocess","hscriptBase/Parser.hx",1805,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_1803_preprocess,"hscriptBase.Parser","preprocess",0xcbefdef1,"hscriptBase.Parser.preprocess","hscriptBase/Parser.hx",1803,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_1855_skipTokens,"hscriptBase.Parser","skipTokens",0x33940d7e,"hscriptBase.Parser.skipTokens","hscriptBase/Parser.hx",1855,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_1870_tokenComment,"hscriptBase.Parser","tokenComment",0xdd9d3deb,"hscriptBase.Parser.tokenComment","hscriptBase/Parser.hx",1870,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_1913_constString,"hscriptBase.Parser","constString",0xe3693caf,"hscriptBase.Parser.constString","hscriptBase/Parser.hx",1913,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_1924_tokenString,"hscriptBase.Parser","tokenString",0xdf171ac5,"hscriptBase.Parser.tokenString","hscriptBase/Parser.hx",1924,0x85a58834)
HX_LOCAL_STACK_FRAME(_hx_pos_948055e9f9c336b1_101_boot,"hscriptBase.Parser","boot",0x1a81d4b7,"hscriptBase.Parser.boot","hscriptBase/Parser.hx",101,0x85a58834)
namespace hscriptBase{

void Parser_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_948055e9f9c336b1_54_new)
HXLINE(1802)		this->poppedStack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  92)		this->uid = 0;
HXLINE(  83)		this->resumeErrors = false;
HXLINE(  78)		this->allowTypes = true;
HXLINE(  73)		this->allowJSON = false;
HXLINE(  68)		this->packaged = false;
HXLINE(  57)		this->line = 0;
HXLINE( 110)		this->line = 1;
HXLINE( 111)		this->opChars = HX_("+*/-=!><&|^%~",e2,ec,c4,dc);
HXLINE( 112)		this->identChars = HX_("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_",e0,b5,3b,15);
HXLINE( 113)		::Array< ::Dynamic> priorities = ::Array_obj< ::Dynamic>::__new(12)->init(0,::Array_obj< ::String >::fromData( _hx_array_data_d7b9de09_4,1))->init(1,::Array_obj< ::String >::fromData( _hx_array_data_d7b9de09_5,1))->init(2,::Array_obj< ::String >::fromData( _hx_array_data_d7b9de09_6,2))->init(3,::Array_obj< ::String >::fromData( _hx_array_data_d7b9de09_7,2))->init(4,::Array_obj< ::String >::fromData( _hx_array_data_d7b9de09_8,3))->init(5,::Array_obj< ::String >::fromData( _hx_array_data_d7b9de09_9,3))->init(6,::Array_obj< ::String >::fromData( _hx_array_data_d7b9de09_10,6))->init(7,::Array_obj< ::String >::fromData( _hx_array_data_d7b9de09_11,1))->init(8,::Array_obj< ::String >::fromData( _hx_array_data_d7b9de09_12,1))->init(9,::Array_obj< ::String >::fromData( _hx_array_data_d7b9de09_13,1))->init(10,::Array_obj< ::String >::fromData( _hx_array_data_d7b9de09_14,13))->init(11,::Array_obj< ::String >::fromData( _hx_array_data_d7b9de09_15,1));
HXLINE( 128)		this->opPriority =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 129)		this->opRightAssoc =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 134)		{
HXLINE( 134)			int _g = 0;
HXDLIN( 134)			int _g1 = priorities->length;
HXDLIN( 134)			while((_g < _g1)){
HXLINE( 134)				_g = (_g + 1);
HXDLIN( 134)				int i = (_g - 1);
HXLINE( 135)				{
HXLINE( 135)					int _g2 = 0;
HXDLIN( 135)					::Array< ::String > _g3 = priorities->__get(i).StaticCast< ::Array< ::String > >();
HXDLIN( 135)					while((_g2 < _g3->length)){
HXLINE( 135)						::String x = _g3->__get(_g2);
HXDLIN( 135)						_g2 = (_g2 + 1);
HXLINE( 136)						this->opPriority->set(x,i);
HXLINE( 137)						if ((i == 10)) {
HXLINE( 137)							this->opRightAssoc->set(x,true);
            						}
            					}
            				}
            			}
            		}
HXLINE( 139)		{
HXLINE( 139)			int _g4 = 0;
HXDLIN( 139)			::Array< ::String > _g5 = ::Array_obj< ::String >::fromData( _hx_array_data_d7b9de09_16,4);
HXDLIN( 139)			while((_g4 < _g5->length)){
HXLINE( 139)				::String x1 = _g5->__get(_g4);
HXDLIN( 139)				_g4 = (_g4 + 1);
HXLINE( 140)				{
HXLINE( 140)					int _hx_tmp;
HXDLIN( 140)					bool _hx_tmp1;
HXDLIN( 140)					if ((x1 != HX_("++",a0,25,00,00))) {
HXLINE( 140)						_hx_tmp1 = (x1 == HX_("--",60,27,00,00));
            					}
            					else {
HXLINE( 140)						_hx_tmp1 = true;
            					}
HXDLIN( 140)					if (_hx_tmp1) {
HXLINE( 140)						_hx_tmp = -1;
            					}
            					else {
HXLINE( 140)						_hx_tmp = -2;
            					}
HXDLIN( 140)					this->opPriority->set(x1,_hx_tmp);
            				}
            			}
            		}
            	}

Dynamic Parser_obj::__CreateEmpty() { return new Parser_obj; }

void *Parser_obj::_hx_vtable = 0;

Dynamic Parser_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Parser_obj > _hx_result = new Parser_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Parser_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x40ba8d5b;
}

void Parser_obj::error( ::hscriptBase::ErrorDef err, ::Dynamic pmin, ::Dynamic pmax){
            	HX_GC_STACKFRAME(&_hx_pos_948055e9f9c336b1_143_error)
HXLINE( 144)		 ::hscriptBase::Error e =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err,( (int)(pmin) ),( (int)(pmax) ),this->origin,this->line);
HXLINE( 145)		if (!(this->resumeErrors)) {
HXLINE( 146)			HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err,( (int)(pmin) ),( (int)(pmax) ),this->origin,this->line));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Parser_obj,error,(void))

void Parser_obj::invalidChar(int c){
            	HX_GC_STACKFRAME(&_hx_pos_948055e9f9c336b1_150_invalidChar)
HXDLIN( 150)		 ::hscriptBase::ErrorDef err = ::hscriptBase::ErrorDef_obj::EInvalidChar(c);
HXDLIN( 150)		 ::Dynamic pmin = (this->readPos - 1);
HXDLIN( 150)		 ::Dynamic pmax = (this->readPos - 1);
HXDLIN( 150)		 ::hscriptBase::Error e =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err,( (int)(pmin) ),( (int)(pmax) ),this->origin,this->line);
HXDLIN( 150)		if (!(this->resumeErrors)) {
HXDLIN( 150)			HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err,( (int)(pmin) ),( (int)(pmax) ),this->origin,this->line));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,invalidChar,(void))

void Parser_obj::initParser(::String origin){
            	HX_GC_STACKFRAME(&_hx_pos_948055e9f9c336b1_153_initParser)
HXLINE( 154)		this->preprocStack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 155)		this->origin = origin;
HXLINE( 156)		this->readPos = 0;
HXLINE( 157)		this->tokenMin = (this->oldTokenMin = 0);
HXLINE( 158)		this->tokenMax = (this->oldTokenMax = 0);
HXLINE( 159)		this->tokens =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE( 160)		this->_hx_char = -1;
HXLINE( 161)		this->ops = ::Array_obj< bool >::__new();
HXLINE( 162)		this->idents = ::Array_obj< bool >::__new();
HXLINE( 163)		this->uid = 0;
HXLINE( 164)		{
HXLINE( 164)			int _g = 0;
HXDLIN( 164)			int _g1 = this->opChars.length;
HXDLIN( 164)			while((_g < _g1)){
HXLINE( 164)				_g = (_g + 1);
HXDLIN( 164)				int i = (_g - 1);
HXLINE( 165)				this->ops[( (int)(this->opChars.charCodeAt(i)) )] = true;
            			}
            		}
HXLINE( 166)		{
HXLINE( 166)			int _g2 = 0;
HXDLIN( 166)			int _g3 = this->identChars.length;
HXDLIN( 166)			while((_g2 < _g3)){
HXLINE( 166)				_g2 = (_g2 + 1);
HXDLIN( 166)				int i1 = (_g2 - 1);
HXLINE( 167)				this->idents[( (int)(this->identChars.charCodeAt(i1)) )] = true;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,initParser,(void))

 ::Dynamic Parser_obj::parseString(::String s,::String __o_origin){
            		::String origin = __o_origin;
            		if (::hx::IsNull(__o_origin)) origin = HX_("SScript",be,42,6a,f7);
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_170_parseString)
HXLINE( 171)		this->initParser(origin);
HXLINE( 172)		this->input = s;
HXLINE( 173)		this->readPos = 0;
HXLINE( 174)		::Array< ::Dynamic> a = ::Array_obj< ::Dynamic>::__new();
HXLINE( 175)		while(true){
HXLINE( 176)			 ::hscriptBase::Token tk = this->token();
HXLINE( 177)			if (::hx::IsPointerEq( tk,::hscriptBase::Token_obj::TEof_dyn() )) {
HXLINE( 177)				goto _hx_goto_22;
            			}
HXLINE( 178)			{
HXLINE( 178)				this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("t",74,00,00,00),tk)
            					->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            					->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 178)				this->tokenMin = this->oldTokenMin;
HXDLIN( 178)				this->tokenMax = this->oldTokenMax;
            			}
HXLINE( 179)			this->parseFullExpr(a);
            		}
            		_hx_goto_22:;
HXLINE( 181)		if ((a->length == 1)) {
HXLINE( 181)			return a->__get(0);
            		}
            		else {
HXLINE( 181)			 ::hscriptBase::ExprDef e = ::hscriptBase::ExprDef_obj::EBlock(a);
HXDLIN( 181)			 ::Dynamic pmin = 0;
HXDLIN( 181)			 ::Dynamic pmax = null();
HXDLIN( 181)			if (::hx::IsNull( e )) {
HXLINE( 181)				return null();
            			}
            			else {
HXLINE( 181)				if (::hx::IsNull( pmin )) {
HXLINE( 181)					pmin = this->tokenMin;
            				}
HXDLIN( 181)				if (::hx::IsNull( pmax )) {
HXLINE( 181)					pmax = this->tokenMax;
            				}
HXDLIN( 181)				return  ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("e",65,00,00,00),e)
            					->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            					->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax)
            					->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin)
            					->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            			}
            		}
HXDLIN( 181)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,parseString,return )

 ::Dynamic Parser_obj::unexpected( ::hscriptBase::Token tk){
            	HX_GC_STACKFRAME(&_hx_pos_948055e9f9c336b1_184_unexpected)
HXLINE( 185)		{
HXLINE( 185)			 ::hscriptBase::ErrorDef err = ::hscriptBase::ErrorDef_obj::EUnexpected(::hscriptBase::Parser_obj::tokenString(tk));
HXDLIN( 185)			 ::Dynamic pmin = this->tokenMin;
HXDLIN( 185)			 ::Dynamic pmax = this->tokenMax;
HXDLIN( 185)			 ::hscriptBase::Error e =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err,( (int)(pmin) ),( (int)(pmax) ),this->origin,this->line);
HXDLIN( 185)			if (!(this->resumeErrors)) {
HXLINE( 185)				HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err,( (int)(pmin) ),( (int)(pmax) ),this->origin,this->line));
            			}
            		}
HXLINE( 186)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,unexpected,return )

void Parser_obj::push( ::hscriptBase::Token tk){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_189_push)
HXLINE( 190)		this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("t",74,00,00,00),tk)
            			->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            			->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXLINE( 191)		this->tokenMin = this->oldTokenMin;
HXLINE( 192)		this->tokenMax = this->oldTokenMax;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,push,(void))

void Parser_obj::ensure( ::hscriptBase::Token tk){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_195_ensure)
HXLINE( 196)		 ::hscriptBase::Token t = this->token();
HXLINE( 197)		if (::hx::IsPointerNotEq( t,tk )) {
HXLINE( 197)			this->unexpected(t);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,ensure,(void))

void Parser_obj::ensureToken( ::hscriptBase::Token tk){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_200_ensureToken)
HXLINE( 201)		 ::hscriptBase::Token t = this->token();
HXLINE( 202)		if (!(__hxcpp_enum_eq(t,tk))) {
HXLINE( 202)			this->unexpected(t);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,ensureToken,(void))

bool Parser_obj::maybe( ::hscriptBase::Token tk){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_205_maybe)
HXLINE( 206)		 ::hscriptBase::Token t = this->token();
HXLINE( 207)		if (__hxcpp_enum_eq(t,tk)) {
HXLINE( 208)			return true;
            		}
HXLINE( 209)		{
HXLINE( 209)			this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("t",74,00,00,00),t)
            				->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            				->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 209)			this->tokenMin = this->oldTokenMin;
HXDLIN( 209)			this->tokenMax = this->oldTokenMax;
            		}
HXLINE( 210)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,maybe,return )

::String Parser_obj::getIdent( ::Dynamic __o_thr){
            		 ::Dynamic thr = __o_thr;
            		if (::hx::IsNull(__o_thr)) thr = true;
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_213_getIdent)
HXLINE( 214)		 ::hscriptBase::Token tk = this->token();
HXLINE( 215)		if ((tk->_hx_getIndex() == 2)) {
HXLINE( 216)			::String id = tk->_hx_getString(0);
HXDLIN( 216)			return id;
            		}
            		else {
HXLINE( 218)			if (( (bool)(thr) )) {
HXLINE( 219)				this->unexpected(tk);
            			}
HXLINE( 220)			return null();
            		}
HXLINE( 215)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,getIdent,return )

 ::hscriptBase::ExprDef Parser_obj::expr( ::Dynamic e){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_225_expr)
HXDLIN( 225)		return e->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,expr,return )

int Parser_obj::pmin( ::Dynamic e){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_229_pmin)
HXDLIN( 229)		if (::hx::IsNull( e )) {
HXDLIN( 229)			return 0;
            		}
            		else {
HXDLIN( 229)			return ( (int)(e->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) );
            		}
HXDLIN( 229)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,pmin,return )

int Parser_obj::pmax( ::Dynamic e){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_233_pmax)
HXDLIN( 233)		if (::hx::IsNull( e )) {
HXDLIN( 233)			return 0;
            		}
            		else {
HXDLIN( 233)			return ( (int)(e->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) );
            		}
HXDLIN( 233)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,pmax,return )

 ::Dynamic Parser_obj::mk( ::hscriptBase::ExprDef e, ::Dynamic pmin, ::Dynamic pmax){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_236_mk)
HXLINE( 237)		if (::hx::IsNull( e )) {
HXLINE( 237)			return null();
            		}
HXLINE( 238)		if (::hx::IsNull( pmin )) {
HXLINE( 238)			pmin = this->tokenMin;
            		}
HXLINE( 239)		if (::hx::IsNull( pmax )) {
HXLINE( 239)			pmax = this->tokenMax;
            		}
HXLINE( 240)		return  ::Dynamic(::hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("e",65,00,00,00),e)
            			->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            			->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax)
            			->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin)
            			->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Parser_obj,mk,return )

bool Parser_obj::isBlock( ::Dynamic e){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_243_isBlock)
HXLINE( 244)		if (::hx::IsNull( e )) {
HXLINE( 244)			return false;
            		}
HXLINE( 245)		 ::hscriptBase::ExprDef _g = e->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
HXDLIN( 245)		switch((int)(_g->_hx_getIndex())){
            			case (int)2: {
HXLINE( 248)				::String _g1 = _g->_hx_getString(0);
HXDLIN( 248)				::Array< ::String > _g2 = _g->_hx_getObject(3).StaticCast< ::Array< ::String > >();
HXDLIN( 248)				 ::hscriptBase::CType t = _g->_hx_getObject(1).StaticCast<  ::hscriptBase::CType >();
HXDLIN( 248)				 ::Dynamic e1 = _g->_hx_getObject(2);
HXDLIN( 248)				if (::hx::IsNotNull( e1 )) {
HXLINE( 248)					return this->isBlock(e1);
            				}
            				else {
HXLINE( 248)					if (::hx::IsNotNull( t )) {
HXLINE( 248)						if (::hx::IsNull( t )) {
HXLINE( 248)							return false;
            						}
            						else {
HXLINE( 248)							if ((t->_hx_getIndex() == 2)) {
HXLINE( 248)								::Array< ::Dynamic> _g3 = t->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 248)								return true;
            							}
            							else {
HXLINE( 248)								return false;
            							}
            						}
            					}
            					else {
HXLINE( 248)						return false;
            					}
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 246)				::Array< ::Dynamic> _g4 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 246)				return true;
            			}
            			break;
            			case (int)7: {
HXLINE( 250)				::String _g5 = _g->_hx_getString(0);
HXDLIN( 250)				 ::Dynamic _g6 = _g->_hx_getObject(1);
HXDLIN( 250)				 ::Dynamic e2 = _g->_hx_getObject(2);
HXDLIN( 250)				return this->isBlock(e2);
            			}
            			break;
            			case (int)9: {
HXLINE( 251)				::String _g7 = _g->_hx_getString(0);
HXDLIN( 251)				bool prefix = _g->_hx_getBool(1);
HXDLIN( 251)				 ::Dynamic e3 = _g->_hx_getObject(2);
HXDLIN( 251)				if (!(prefix)) {
HXLINE( 251)					return this->isBlock(e3);
            				}
            				else {
HXLINE( 251)					return false;
            				}
            			}
            			break;
            			case (int)11: {
HXLINE( 249)				 ::Dynamic _g8 = _g->_hx_getObject(0);
HXDLIN( 249)				 ::Dynamic e11 = _g->_hx_getObject(1);
HXDLIN( 249)				 ::Dynamic e21 = _g->_hx_getObject(2);
HXDLIN( 249)				if (::hx::IsNotNull( e21 )) {
HXLINE( 249)					return this->isBlock(e21);
            				}
            				else {
HXLINE( 249)					return this->isBlock(e11);
            				}
            			}
            			break;
            			case (int)12: {
HXLINE( 252)				 ::Dynamic _g9 = _g->_hx_getObject(0);
HXDLIN( 252)				 ::Dynamic e4 = _g->_hx_getObject(1);
HXDLIN( 252)				return this->isBlock(e4);
            			}
            			break;
            			case (int)13: {
HXLINE( 254)				::String _g10 = _g->_hx_getString(0);
HXDLIN( 254)				 ::Dynamic _g11 = _g->_hx_getObject(1);
HXDLIN( 254)				 ::Dynamic e5 = _g->_hx_getObject(2);
HXDLIN( 254)				return this->isBlock(e5);
            			}
            			break;
            			case (int)18: {
HXLINE( 247)				::Array< ::Dynamic> _g12 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 247)				::String _g13 = _g->_hx_getString(2);
HXDLIN( 247)				 ::hscriptBase::CType _g14 = _g->_hx_getObject(3).StaticCast<  ::hscriptBase::CType >();
HXDLIN( 247)				 ::Dynamic _g15 = _g->_hx_getObject(4);
HXDLIN( 247)				 ::Dynamic e6 = _g->_hx_getObject(1);
HXDLIN( 247)				return this->isBlock(e6);
            			}
            			break;
            			case (int)19: {
HXLINE( 255)				 ::Dynamic e7 = _g->_hx_getObject(0);
HXDLIN( 255)				if (::hx::IsNotNull( e7 )) {
HXLINE( 255)					return this->isBlock(e7);
            				}
            				else {
HXLINE( 255)					return false;
            				}
            			}
            			break;
            			case (int)24: {
HXLINE( 256)				 ::Dynamic _g16 = _g->_hx_getObject(0);
HXDLIN( 256)				::String _g17 = _g->_hx_getString(1);
HXDLIN( 256)				 ::hscriptBase::CType _g18 = _g->_hx_getObject(2).StaticCast<  ::hscriptBase::CType >();
HXDLIN( 256)				 ::Dynamic e8 = _g->_hx_getObject(3);
HXDLIN( 256)				return this->isBlock(e8);
            			}
            			break;
            			case (int)25: {
HXLINE( 246)				::Array< ::Dynamic> _g19 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 246)				return true;
            			}
            			break;
            			case (int)27: {
HXLINE( 246)				 ::Dynamic _g20 = _g->_hx_getObject(0);
HXDLIN( 246)				::Array< ::Dynamic> _g21 = _g->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 246)				 ::Dynamic _g22 = _g->_hx_getObject(2);
HXDLIN( 246)				return true;
            			}
            			break;
            			case (int)28: {
HXLINE( 253)				 ::Dynamic _g23 = _g->_hx_getObject(0);
HXDLIN( 253)				 ::Dynamic e9 = _g->_hx_getObject(1);
HXDLIN( 253)				return this->isBlock(e9);
            			}
            			break;
            			case (int)33: {
HXLINE( 257)				::String _g24 = _g->_hx_getString(0);
HXDLIN( 257)				::Array< ::Dynamic> _g25 = _g->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 257)				 ::Dynamic e10 = _g->_hx_getObject(2);
HXDLIN( 257)				return this->isBlock(e10);
            			}
            			break;
            			default:{
HXLINE( 258)				return false;
            			}
            		}
HXLINE( 245)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,isBlock,return )

void Parser_obj::parseFullExpr(::Array< ::Dynamic> exprs){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_262_parseFullExpr)
HXLINE( 263)		 ::Dynamic e = this->parseExpr();
HXLINE( 264)		exprs->push(e);
HXLINE( 266)		 ::hscriptBase::Token tk = this->token();
HXLINE( 268)		while(true){
HXLINE( 268)			bool _hx_tmp;
HXDLIN( 268)			bool _hx_tmp1;
HXDLIN( 268)			if (::hx::IsPointerEq( tk,::hscriptBase::Token_obj::TComma_dyn() )) {
HXLINE( 268)				_hx_tmp1 = ::hx::IsNotNull( e );
            			}
            			else {
HXLINE( 268)				_hx_tmp1 = false;
            			}
HXDLIN( 268)			if (_hx_tmp1) {
HXLINE( 268)				 ::hscriptBase::ExprDef _g = e->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
HXDLIN( 268)				if ((_g->_hx_getIndex() == 2)) {
HXLINE( 268)					::String _g1 = _g->_hx_getString(0);
HXDLIN( 268)					 ::hscriptBase::CType _g2 = _g->_hx_getObject(1).StaticCast<  ::hscriptBase::CType >();
HXDLIN( 268)					 ::Dynamic _g3 = _g->_hx_getObject(2);
HXDLIN( 268)					::Array< ::String > _g4 = _g->_hx_getObject(3).StaticCast< ::Array< ::String > >();
HXDLIN( 268)					_hx_tmp = true;
            				}
            				else {
HXLINE( 268)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 268)				_hx_tmp = false;
            			}
HXDLIN( 268)			if (!(_hx_tmp)) {
HXLINE( 268)				goto _hx_goto_35;
            			}
HXLINE( 269)			e = this->parseStructure(HX_("var",e7,de,59,00),null());
HXLINE( 270)			exprs->push(e);
HXLINE( 271)			tk = this->token();
            		}
            		_hx_goto_35:;
HXLINE( 274)		while(true){
HXLINE( 274)			bool _hx_tmp2;
HXDLIN( 274)			bool _hx_tmp3;
HXDLIN( 274)			if (::hx::IsPointerEq( tk,::hscriptBase::Token_obj::TComma_dyn() )) {
HXLINE( 274)				_hx_tmp3 = ::hx::IsNotNull( e );
            			}
            			else {
HXLINE( 274)				_hx_tmp3 = false;
            			}
HXDLIN( 274)			if (_hx_tmp3) {
HXLINE( 274)				 ::hscriptBase::ExprDef _g5 = e->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
HXDLIN( 274)				if ((_g5->_hx_getIndex() == 3)) {
HXLINE( 274)					::String _g6 = _g5->_hx_getString(0);
HXDLIN( 274)					 ::hscriptBase::CType _g7 = _g5->_hx_getObject(1).StaticCast<  ::hscriptBase::CType >();
HXDLIN( 274)					 ::Dynamic _g8 = _g5->_hx_getObject(2);
HXDLIN( 274)					_hx_tmp2 = true;
            				}
            				else {
HXLINE( 274)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE( 274)				_hx_tmp2 = false;
            			}
HXDLIN( 274)			if (!(_hx_tmp2)) {
HXLINE( 274)				goto _hx_goto_36;
            			}
HXLINE( 275)			e = this->parseStructure(HX_("final",76,5f,9a,00),null());
HXLINE( 276)			exprs->push(e);
HXLINE( 277)			tk = this->token();
            		}
            		_hx_goto_36:;
HXLINE( 280)		bool _hx_tmp4;
HXDLIN( 280)		if (::hx::IsPointerNotEq( tk,::hscriptBase::Token_obj::TStatement_dyn() )) {
HXLINE( 280)			_hx_tmp4 = ::hx::IsPointerNotEq( tk,::hscriptBase::Token_obj::TEof_dyn() );
            		}
            		else {
HXLINE( 280)			_hx_tmp4 = false;
            		}
HXDLIN( 280)		if (_hx_tmp4) {
HXLINE( 281)			if (this->isBlock(e)) {
HXLINE( 282)				this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("t",74,00,00,00),tk)
            					->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            					->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 282)				this->tokenMin = this->oldTokenMin;
HXDLIN( 282)				this->tokenMax = this->oldTokenMax;
            			}
            			else {
HXLINE( 284)				this->unexpected(tk);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseFullExpr,(void))

 ::Dynamic Parser_obj::parseObject( ::Dynamic p1){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_288_parseObject)
HXLINE( 290)		::Array< ::Dynamic> fl = ::Array_obj< ::Dynamic>::__new();
HXLINE( 291)		while(true){
HXLINE( 292)			 ::hscriptBase::Token tk = this->token();
HXLINE( 293)			::String id = null();
HXLINE( 294)			switch((int)(tk->_hx_getIndex())){
            				case (int)1: {
HXLINE( 296)					 ::hscriptBase::Const c = tk->_hx_getObject(0).StaticCast<  ::hscriptBase::Const >();
HXDLIN( 296)					{
HXLINE( 297)						if (!(this->allowJSON)) {
HXLINE( 298)							this->unexpected(tk);
            						}
HXLINE( 299)						if ((c->_hx_getIndex() == 2)) {
HXLINE( 300)							 ::Dynamic _g = c->_hx_getObject(1);
HXDLIN( 300)							{
HXLINE( 300)								::String s = c->_hx_getString(0);
HXDLIN( 300)								id = s;
            							}
            						}
            						else {
HXLINE( 301)							this->unexpected(tk);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 295)					::String i = tk->_hx_getString(0);
HXDLIN( 295)					id = i;
            				}
            				break;
            				case (int)7: {
HXLINE( 304)					goto _hx_goto_38;
            				}
            				break;
            				default:{
HXLINE( 306)					this->unexpected(tk);
HXLINE( 307)					goto _hx_goto_38;
            				}
            			}
HXLINE( 309)			{
HXLINE( 309)				 ::hscriptBase::Token t = this->token();
HXDLIN( 309)				if (::hx::IsPointerNotEq( t,::hscriptBase::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 309)					this->unexpected(t);
            				}
            			}
HXLINE( 310)			fl->push( ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("e",65,00,00,00),this->parseExpr())
            				->setFixed(1,HX_("name",4b,72,ff,48),id)));
HXLINE( 311)			tk = this->token();
HXLINE( 312)			switch((int)(tk->_hx_getIndex())){
            				case (int)7: {
HXLINE( 314)					goto _hx_goto_38;
            				}
            				break;
            				case (int)9: {
            				}
            				break;
            				default:{
HXLINE( 317)					this->unexpected(tk);
            				}
            			}
            		}
            		_hx_goto_38:;
HXLINE( 320)		 ::hscriptBase::ExprDef e = ::hscriptBase::ExprDef_obj::EObject(fl);
HXDLIN( 320)		 ::Dynamic pmin = p1;
HXDLIN( 320)		 ::Dynamic pmax = null();
HXDLIN( 320)		 ::Dynamic _hx_tmp;
HXDLIN( 320)		if (::hx::IsNull( e )) {
HXLINE( 320)			_hx_tmp = null();
            		}
            		else {
HXLINE( 320)			if (::hx::IsNull( pmin )) {
HXLINE( 320)				pmin = this->tokenMin;
            			}
HXDLIN( 320)			if (::hx::IsNull( pmax )) {
HXLINE( 320)				pmax = this->tokenMax;
            			}
HXDLIN( 320)			_hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("e",65,00,00,00),e)
            				->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            				->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax)
            				->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin)
            				->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            		}
HXDLIN( 320)		return this->parseExprNext(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseObject,return )

 ::Dynamic Parser_obj::parseExpr(){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_323_parseExpr)
HXLINE( 324)		int oldPos = this->readPos;
HXLINE( 325)		 ::hscriptBase::Token tk = this->token();
HXLINE( 326)		int p1 = this->tokenMin;
HXLINE( 327)		switch((int)(tk->_hx_getIndex())){
            			case (int)1: {
HXLINE( 337)				 ::hscriptBase::Const c = tk->_hx_getObject(0).StaticCast<  ::hscriptBase::Const >();
HXLINE( 338)				 ::hscriptBase::ExprDef e = ::hscriptBase::ExprDef_obj::EConst(c);
HXDLIN( 338)				 ::Dynamic pmin = null();
HXDLIN( 338)				 ::Dynamic pmax = null();
HXDLIN( 338)				 ::Dynamic _hx_tmp;
HXDLIN( 338)				if (::hx::IsNull( e )) {
HXLINE( 338)					_hx_tmp = null();
            				}
            				else {
HXLINE( 338)					if (::hx::IsNull( pmin )) {
HXLINE( 338)						pmin = this->tokenMin;
            					}
HXDLIN( 338)					if (::hx::IsNull( pmax )) {
HXLINE( 338)						pmax = this->tokenMax;
            					}
HXDLIN( 338)					_hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(5)
            						->setFixed(0,HX_("e",65,00,00,00),e)
            						->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            						->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax)
            						->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin)
            						->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            				}
HXDLIN( 338)				return this->parseExprNext(_hx_tmp);
            			}
            			break;
            			case (int)2: {
HXLINE( 331)				::String id = tk->_hx_getString(0);
HXLINE( 332)				 ::Dynamic e1 = this->parseStructure(id,null());
HXLINE( 333)				if (::hx::IsNull( e1 )) {
HXLINE( 334)					 ::hscriptBase::ExprDef e2 = ::hscriptBase::ExprDef_obj::EIdent(id,(id == HX_("final",76,5f,9a,00)));
HXDLIN( 334)					 ::Dynamic pmin1 = null();
HXDLIN( 334)					 ::Dynamic pmax1 = null();
HXDLIN( 334)					if (::hx::IsNull( e2 )) {
HXLINE( 334)						e1 = null();
            					}
            					else {
HXLINE( 334)						if (::hx::IsNull( pmin1 )) {
HXLINE( 334)							pmin1 = this->tokenMin;
            						}
HXDLIN( 334)						if (::hx::IsNull( pmax1 )) {
HXLINE( 334)							pmax1 = this->tokenMax;
            						}
HXDLIN( 334)						e1 =  ::Dynamic(::hx::Anon_obj::Create(5)
            							->setFixed(0,HX_("e",65,00,00,00),e2)
            							->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            							->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax1)
            							->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin1)
            							->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            					}
            				}
HXLINE( 336)				return this->parseExprNext(e1);
            			}
            			break;
            			case (int)3: {
HXLINE( 417)				::String op = tk->_hx_getString(0);
HXLINE( 418)				if ((op == HX_("-",2d,00,00,00))) {
HXLINE( 419)					int start = this->tokenMin;
HXLINE( 420)					 ::Dynamic e3 = this->parseExpr();
HXLINE( 421)					if (::hx::IsNull( e3 )) {
HXLINE( 422)						return this->makeUnop(op,e3);
            					}
HXLINE( 423)					 ::hscriptBase::ExprDef _g = e3->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
HXDLIN( 423)					if ((_g->_hx_getIndex() == 0)) {
HXLINE( 426)						 ::hscriptBase::Const _g1 = _g->_hx_getObject(0).StaticCast<  ::hscriptBase::Const >();
HXDLIN( 426)						switch((int)(_g1->_hx_getIndex())){
            							case (int)0: {
HXLINE( 424)								int i = _g1->_hx_getInt(0);
HXLINE( 425)								 ::hscriptBase::ExprDef e4 = ::hscriptBase::ExprDef_obj::EConst(::hscriptBase::Const_obj::CInt(-(i)));
HXDLIN( 425)								 ::Dynamic pmin2 = start;
HXDLIN( 425)								 ::Dynamic pmax2;
HXDLIN( 425)								if (::hx::IsNull( e3 )) {
HXLINE( 425)									pmax2 = 0;
            								}
            								else {
HXLINE( 425)									pmax2 = e3->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            								}
HXDLIN( 425)								if (::hx::IsNull( e4 )) {
HXLINE( 425)									return null();
            								}
            								else {
HXLINE( 425)									if (::hx::IsNull( pmin2 )) {
HXLINE( 425)										pmin2 = this->tokenMin;
            									}
HXDLIN( 425)									if (::hx::IsNull( pmax2 )) {
HXLINE( 425)										pmax2 = this->tokenMax;
            									}
HXDLIN( 425)									return  ::Dynamic(::hx::Anon_obj::Create(5)
            										->setFixed(0,HX_("e",65,00,00,00),e4)
            										->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            										->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax2)
            										->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin2)
            										->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 426)								Float f = _g1->_hx_getFloat(0);
HXLINE( 427)								 ::hscriptBase::ExprDef e5 = ::hscriptBase::ExprDef_obj::EConst(::hscriptBase::Const_obj::CFloat(-(f)));
HXDLIN( 427)								 ::Dynamic pmin3 = start;
HXDLIN( 427)								 ::Dynamic pmax3;
HXDLIN( 427)								if (::hx::IsNull( e3 )) {
HXLINE( 427)									pmax3 = 0;
            								}
            								else {
HXLINE( 427)									pmax3 = e3->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            								}
HXDLIN( 427)								if (::hx::IsNull( e5 )) {
HXLINE( 427)									return null();
            								}
            								else {
HXLINE( 427)									if (::hx::IsNull( pmin3 )) {
HXLINE( 427)										pmin3 = this->tokenMin;
            									}
HXDLIN( 427)									if (::hx::IsNull( pmax3 )) {
HXLINE( 427)										pmax3 = this->tokenMax;
            									}
HXDLIN( 427)									return  ::Dynamic(::hx::Anon_obj::Create(5)
            										->setFixed(0,HX_("e",65,00,00,00),e5)
            										->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            										->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax3)
            										->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin3)
            										->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            								}
            							}
            							break;
            							default:{
HXLINE( 429)								return this->makeUnop(op,e3);
            							}
            						}
            					}
            					else {
HXLINE( 429)						return this->makeUnop(op,e3);
            					}
            				}
HXLINE( 432)				if (::hx::IsLess( this->opPriority->get(op),0 )) {
HXLINE( 433)					return this->makeUnop(op,this->parseExpr());
            				}
HXLINE( 434)				return this->unexpected(tk);
            			}
            			break;
            			case (int)4: {
HXLINE( 340)				tk = this->token();
HXLINE( 341)				if (::hx::IsPointerEq( tk,::hscriptBase::Token_obj::TPClose_dyn() )) {
HXLINE( 342)					{
HXLINE( 342)						 ::hscriptBase::Token t = this->token();
HXDLIN( 342)						if (!(__hxcpp_enum_eq(t,::hscriptBase::Token_obj::TOp(HX_("->",71,27,00,00))))) {
HXLINE( 342)							this->unexpected(t);
            						}
            					}
HXLINE( 343)					 ::Dynamic eret = this->parseExpr();
HXLINE( 344)					 ::hscriptBase::ExprDef e6 = ::hscriptBase::ExprDef_obj::EReturn(eret);
HXDLIN( 344)					 ::Dynamic pmin4 = p1;
HXDLIN( 344)					 ::Dynamic pmax4 = null();
HXDLIN( 344)					 ::Dynamic e7;
HXDLIN( 344)					if (::hx::IsNull( e6 )) {
HXLINE( 344)						e7 = null();
            					}
            					else {
HXLINE( 344)						if (::hx::IsNull( pmin4 )) {
HXLINE( 344)							pmin4 = this->tokenMin;
            						}
HXDLIN( 344)						if (::hx::IsNull( pmax4 )) {
HXLINE( 344)							pmax4 = this->tokenMax;
            						}
HXDLIN( 344)						e7 =  ::Dynamic(::hx::Anon_obj::Create(5)
            							->setFixed(0,HX_("e",65,00,00,00),e6)
            							->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            							->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax4)
            							->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin4)
            							->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            					}
HXDLIN( 344)					 ::hscriptBase::ExprDef e8 = ::hscriptBase::ExprDef_obj::EFunction(::Array_obj< ::Dynamic>::__new(0),e7,null(),null(),null());
HXDLIN( 344)					 ::Dynamic pmin5 = p1;
HXDLIN( 344)					 ::Dynamic pmax5 = null();
HXDLIN( 344)					if (::hx::IsNull( e8 )) {
HXLINE( 344)						return null();
            					}
            					else {
HXLINE( 344)						if (::hx::IsNull( pmin5 )) {
HXLINE( 344)							pmin5 = this->tokenMin;
            						}
HXDLIN( 344)						if (::hx::IsNull( pmax5 )) {
HXLINE( 344)							pmax5 = this->tokenMax;
            						}
HXDLIN( 344)						return  ::Dynamic(::hx::Anon_obj::Create(5)
            							->setFixed(0,HX_("e",65,00,00,00),e8)
            							->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            							->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax5)
            							->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin5)
            							->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            					}
            				}
HXLINE( 346)				{
HXLINE( 346)					this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("t",74,00,00,00),tk)
            						->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            						->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 346)					this->tokenMin = this->oldTokenMin;
HXDLIN( 346)					this->tokenMax = this->oldTokenMax;
            				}
HXLINE( 347)				 ::Dynamic e9 = this->parseExpr();
HXLINE( 348)				tk = this->token();
HXLINE( 349)				switch((int)(tk->_hx_getIndex())){
            					case (int)5: {
HXLINE( 351)						 ::hscriptBase::ExprDef e10 = ::hscriptBase::ExprDef_obj::EParent(e9);
HXDLIN( 351)						 ::Dynamic pmin6 = p1;
HXDLIN( 351)						 ::Dynamic pmax6 = this->tokenMax;
HXDLIN( 351)						 ::Dynamic _hx_tmp1;
HXDLIN( 351)						if (::hx::IsNull( e10 )) {
HXLINE( 351)							_hx_tmp1 = null();
            						}
            						else {
HXLINE( 351)							if (::hx::IsNull( pmin6 )) {
HXLINE( 351)								pmin6 = this->tokenMin;
            							}
HXDLIN( 351)							if (::hx::IsNull( pmax6 )) {
HXLINE( 351)								pmax6 = this->tokenMax;
            							}
HXDLIN( 351)							_hx_tmp1 =  ::Dynamic(::hx::Anon_obj::Create(5)
            								->setFixed(0,HX_("e",65,00,00,00),e10)
            								->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            								->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax6)
            								->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin6)
            								->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            						}
HXDLIN( 351)						return this->parseExprNext(_hx_tmp1);
            					}
            					break;
            					case (int)9: {
HXLINE( 366)						 ::hscriptBase::ExprDef _g2 = e9->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
HXDLIN( 366)						if ((_g2->_hx_getIndex() == 1)) {
HXLINE( 367)							 ::Dynamic _g3 = _g2->_hx_getObject(1);
HXDLIN( 367)							::String v = _g2->_hx_getString(0);
HXDLIN( 367)							int _hx_tmp2;
HXDLIN( 367)							if (::hx::IsNull( e9 )) {
HXLINE( 367)								_hx_tmp2 = 0;
            							}
            							else {
HXLINE( 367)								_hx_tmp2 = ( (int)(e9->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) );
            							}
HXDLIN( 367)							return this->parseLambda(::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("name",4b,72,ff,48),v))),_hx_tmp2);
            						}
            					}
            					break;
            					case (int)18: {
HXLINE( 353)						 ::hscriptBase::CType t1 = this->parseType();
HXLINE( 354)						tk = this->token();
HXLINE( 355)						switch((int)(tk->_hx_getIndex())){
            							case (int)5: {
HXLINE( 357)								 ::hscriptBase::ExprDef e11 = ::hscriptBase::ExprDef_obj::ECheckType(e9,t1);
HXDLIN( 357)								 ::Dynamic pmin7 = p1;
HXDLIN( 357)								 ::Dynamic pmax7 = this->tokenMax;
HXDLIN( 357)								 ::Dynamic _hx_tmp3;
HXDLIN( 357)								if (::hx::IsNull( e11 )) {
HXLINE( 357)									_hx_tmp3 = null();
            								}
            								else {
HXLINE( 357)									if (::hx::IsNull( pmin7 )) {
HXLINE( 357)										pmin7 = this->tokenMin;
            									}
HXDLIN( 357)									if (::hx::IsNull( pmax7 )) {
HXLINE( 357)										pmax7 = this->tokenMax;
            									}
HXDLIN( 357)									_hx_tmp3 =  ::Dynamic(::hx::Anon_obj::Create(5)
            										->setFixed(0,HX_("e",65,00,00,00),e11)
            										->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            										->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax7)
            										->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin7)
            										->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            								}
HXDLIN( 357)								return this->parseExprNext(_hx_tmp3);
            							}
            							break;
            							case (int)9: {
HXLINE( 359)								 ::hscriptBase::ExprDef _g4 = e9->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
HXDLIN( 359)								if ((_g4->_hx_getIndex() == 1)) {
HXLINE( 360)									 ::Dynamic _g5 = _g4->_hx_getObject(1);
HXDLIN( 360)									::String v1 = _g4->_hx_getString(0);
HXDLIN( 360)									int _hx_tmp4;
HXDLIN( 360)									if (::hx::IsNull( e9 )) {
HXLINE( 360)										_hx_tmp4 = 0;
            									}
            									else {
HXLINE( 360)										_hx_tmp4 = ( (int)(e9->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) );
            									}
HXDLIN( 360)									return this->parseLambda(::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            										->setFixed(0,HX_("t",74,00,00,00),t1)
            										->setFixed(1,HX_("name",4b,72,ff,48),v1))),_hx_tmp4);
            								}
            							}
            							break;
            							default:{
            							}
            						}
            					}
            					break;
            					default:{
            					}
            				}
HXLINE( 373)				return this->unexpected(tk);
            			}
            			break;
            			case (int)6: {
HXLINE( 375)				tk = this->token();
HXLINE( 376)				switch((int)(tk->_hx_getIndex())){
            					case (int)1: {
HXLINE( 388)						 ::hscriptBase::Const c1 = tk->_hx_getObject(0).StaticCast<  ::hscriptBase::Const >();
HXLINE( 389)						if (this->allowJSON) {
HXLINE( 390)							if ((c1->_hx_getIndex() == 2)) {
HXLINE( 391)								::String _g6 = c1->_hx_getString(0);
HXDLIN( 391)								 ::Dynamic _g7 = c1->_hx_getObject(1);
HXDLIN( 391)								{
HXLINE( 392)									 ::hscriptBase::Token tk2 = this->token();
HXLINE( 393)									{
HXLINE( 393)										this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            											->setFixed(0,HX_("t",74,00,00,00),tk2)
            											->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            											->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 393)										this->tokenMin = this->oldTokenMin;
HXDLIN( 393)										this->tokenMax = this->oldTokenMax;
            									}
HXLINE( 394)									{
HXLINE( 394)										this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            											->setFixed(0,HX_("t",74,00,00,00),tk)
            											->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            											->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 394)										this->tokenMin = this->oldTokenMin;
HXDLIN( 394)										this->tokenMax = this->oldTokenMax;
            									}
HXLINE( 395)									if ((tk2->_hx_getIndex() == 18)) {
HXLINE( 397)										return this->parseExprNext(this->parseObject(p1));
            									}
            								}
            							}
            							else {
HXLINE( 401)								this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            									->setFixed(0,HX_("t",74,00,00,00),tk)
            									->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            									->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 401)								this->tokenMin = this->oldTokenMin;
HXDLIN( 401)								this->tokenMax = this->oldTokenMax;
            							}
            						}
            						else {
HXLINE( 404)							this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            								->setFixed(0,HX_("t",74,00,00,00),tk)
            								->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            								->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 404)							this->tokenMin = this->oldTokenMin;
HXDLIN( 404)							this->tokenMax = this->oldTokenMax;
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 379)						::String _g8 = tk->_hx_getString(0);
HXDLIN( 379)						{
HXLINE( 380)							 ::hscriptBase::Token tk21 = this->token();
HXLINE( 381)							{
HXLINE( 381)								this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            									->setFixed(0,HX_("t",74,00,00,00),tk21)
            									->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            									->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 381)								this->tokenMin = this->oldTokenMin;
HXDLIN( 381)								this->tokenMax = this->oldTokenMax;
            							}
HXLINE( 382)							{
HXLINE( 382)								this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            									->setFixed(0,HX_("t",74,00,00,00),tk)
            									->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            									->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 382)								this->tokenMin = this->oldTokenMin;
HXDLIN( 382)								this->tokenMax = this->oldTokenMax;
            							}
HXLINE( 383)							if ((tk21->_hx_getIndex() == 18)) {
HXLINE( 385)								return this->parseExprNext(this->parseObject(p1));
            							}
            						}
            					}
            					break;
            					case (int)7: {
HXLINE( 378)						 ::hscriptBase::ExprDef e12 = ::hscriptBase::ExprDef_obj::EObject(::Array_obj< ::Dynamic>::__new(0));
HXDLIN( 378)						 ::Dynamic pmin8 = p1;
HXDLIN( 378)						 ::Dynamic pmax8 = null();
HXDLIN( 378)						 ::Dynamic _hx_tmp5;
HXDLIN( 378)						if (::hx::IsNull( e12 )) {
HXLINE( 378)							_hx_tmp5 = null();
            						}
            						else {
HXLINE( 378)							if (::hx::IsNull( pmin8 )) {
HXLINE( 378)								pmin8 = this->tokenMin;
            							}
HXDLIN( 378)							if (::hx::IsNull( pmax8 )) {
HXLINE( 378)								pmax8 = this->tokenMax;
            							}
HXDLIN( 378)							_hx_tmp5 =  ::Dynamic(::hx::Anon_obj::Create(5)
            								->setFixed(0,HX_("e",65,00,00,00),e12)
            								->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            								->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax8)
            								->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin8)
            								->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            						}
HXDLIN( 378)						return this->parseExprNext(_hx_tmp5);
            					}
            					break;
            					default:{
HXLINE( 406)						this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            							->setFixed(0,HX_("t",74,00,00,00),tk)
            							->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            							->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 406)						this->tokenMin = this->oldTokenMin;
HXDLIN( 406)						this->tokenMax = this->oldTokenMax;
            					}
            				}
HXLINE( 408)				::Array< ::Dynamic> a = ::Array_obj< ::Dynamic>::__new();
HXLINE( 409)				while(true){
HXLINE( 410)					this->parseFullExpr(a);
HXLINE( 411)					tk = this->token();
HXLINE( 412)					bool _hx_tmp6;
HXDLIN( 412)					if (::hx::IsPointerNotEq( tk,::hscriptBase::Token_obj::TBrClose_dyn() )) {
HXLINE( 412)						if (this->resumeErrors) {
HXLINE( 412)							_hx_tmp6 = ::hx::IsPointerEq( tk,::hscriptBase::Token_obj::TEof_dyn() );
            						}
            						else {
HXLINE( 412)							_hx_tmp6 = false;
            						}
            					}
            					else {
HXLINE( 412)						_hx_tmp6 = true;
            					}
HXDLIN( 412)					if (_hx_tmp6) {
HXLINE( 413)						goto _hx_goto_40;
            					}
HXLINE( 414)					{
HXLINE( 414)						this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            							->setFixed(0,HX_("t",74,00,00,00),tk)
            							->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            							->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 414)						this->tokenMin = this->oldTokenMin;
HXDLIN( 414)						this->tokenMax = this->oldTokenMax;
            					}
            				}
            				_hx_goto_40:;
HXLINE( 416)				 ::hscriptBase::ExprDef e13 = ::hscriptBase::ExprDef_obj::EBlock(a);
HXDLIN( 416)				 ::Dynamic pmin9 = p1;
HXDLIN( 416)				 ::Dynamic pmax9 = null();
HXDLIN( 416)				if (::hx::IsNull( e13 )) {
HXLINE( 416)					return null();
            				}
            				else {
HXLINE( 416)					if (::hx::IsNull( pmin9 )) {
HXLINE( 416)						pmin9 = this->tokenMin;
            					}
HXDLIN( 416)					if (::hx::IsNull( pmax9 )) {
HXLINE( 416)						pmax9 = this->tokenMax;
            					}
HXDLIN( 416)					return  ::Dynamic(::hx::Anon_obj::Create(5)
            						->setFixed(0,HX_("e",65,00,00,00),e13)
            						->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            						->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax9)
            						->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin9)
            						->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            				}
            			}
            			break;
            			case (int)12: {
HXLINE( 436)				::Array< ::Dynamic> a1 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 437)				tk = this->token();
HXLINE( 438)				while(true){
HXLINE( 438)					bool _hx_tmp7;
HXDLIN( 438)					if (::hx::IsPointerNotEq( tk,::hscriptBase::Token_obj::TBkClose_dyn() )) {
HXLINE( 438)						if (this->resumeErrors) {
HXLINE( 438)							_hx_tmp7 = ::hx::IsPointerNotEq( tk,::hscriptBase::Token_obj::TEof_dyn() );
            						}
            						else {
HXLINE( 438)							_hx_tmp7 = true;
            						}
            					}
            					else {
HXLINE( 438)						_hx_tmp7 = false;
            					}
HXDLIN( 438)					if (!(_hx_tmp7)) {
HXLINE( 438)						goto _hx_goto_41;
            					}
HXLINE( 439)					{
HXLINE( 439)						this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            							->setFixed(0,HX_("t",74,00,00,00),tk)
            							->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            							->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 439)						this->tokenMin = this->oldTokenMin;
HXDLIN( 439)						this->tokenMax = this->oldTokenMax;
            					}
HXLINE( 440)					a1->push(this->parseExpr());
HXLINE( 441)					tk = this->token();
HXLINE( 442)					if (::hx::IsPointerEq( tk,::hscriptBase::Token_obj::TComma_dyn() )) {
HXLINE( 443)						tk = this->token();
            					}
            				}
            				_hx_goto_41:;
HXLINE( 445)				bool _hx_tmp8;
HXDLIN( 445)				if ((a1->length == 1)) {
HXLINE( 445)					_hx_tmp8 = ::hx::IsNotNull( a1->__get(0) );
            				}
            				else {
HXLINE( 445)					_hx_tmp8 = false;
            				}
HXDLIN( 445)				if (_hx_tmp8) {
HXLINE( 446)					 ::hscriptBase::ExprDef _g9 = a1->__get(0)->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
HXDLIN( 446)					switch((int)(_g9->_hx_getIndex())){
            						case (int)12: {
HXLINE( 447)							 ::Dynamic _g10 = _g9->_hx_getObject(0);
HXDLIN( 447)							 ::Dynamic _g11 = _g9->_hx_getObject(1);
HXLINE( 448)							::String tmp = (HX_("__a_",fe,af,13,3f) + this->uid++);
HXLINE( 450)							 ::hscriptBase::ExprDef e14 = ::hscriptBase::ExprDef_obj::EArrayDecl(::Array_obj< ::Dynamic>::__new(0));
HXDLIN( 450)							 ::Dynamic pmin10 = p1;
HXDLIN( 450)							 ::Dynamic pmax10 = null();
HXDLIN( 450)							 ::Dynamic e15;
HXDLIN( 450)							if (::hx::IsNull( e14 )) {
HXLINE( 450)								e15 = null();
            							}
            							else {
HXLINE( 450)								if (::hx::IsNull( pmin10 )) {
HXLINE( 450)									pmin10 = this->tokenMin;
            								}
HXDLIN( 450)								if (::hx::IsNull( pmax10 )) {
HXLINE( 450)									pmax10 = this->tokenMax;
            								}
HXDLIN( 450)								e15 =  ::Dynamic(::hx::Anon_obj::Create(5)
            									->setFixed(0,HX_("e",65,00,00,00),e14)
            									->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            									->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax10)
            									->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin10)
            									->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            							}
HXDLIN( 450)							 ::hscriptBase::ExprDef e16 = ::hscriptBase::ExprDef_obj::EVar(tmp,null(),e15,null());
HXDLIN( 450)							 ::Dynamic pmin11 = p1;
HXDLIN( 450)							 ::Dynamic pmax11 = null();
HXDLIN( 450)							 ::Dynamic e17;
HXDLIN( 450)							if (::hx::IsNull( e16 )) {
HXLINE( 450)								e17 = null();
            							}
            							else {
HXLINE( 450)								if (::hx::IsNull( pmin11 )) {
HXLINE( 450)									pmin11 = this->tokenMin;
            								}
HXDLIN( 450)								if (::hx::IsNull( pmax11 )) {
HXLINE( 450)									pmax11 = this->tokenMax;
            								}
HXDLIN( 450)								e17 =  ::Dynamic(::hx::Anon_obj::Create(5)
            									->setFixed(0,HX_("e",65,00,00,00),e16)
            									->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            									->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax11)
            									->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin11)
            									->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            							}
HXLINE( 451)							 ::Dynamic e18 = this->mapCompr(tmp,a1->__get(0));
HXLINE( 452)							 ::hscriptBase::ExprDef e19 = ::hscriptBase::ExprDef_obj::EIdent(tmp,null());
HXDLIN( 452)							 ::Dynamic pmin12 = p1;
HXDLIN( 452)							 ::Dynamic pmax12 = null();
HXDLIN( 452)							 ::Dynamic e20;
HXDLIN( 452)							if (::hx::IsNull( e19 )) {
HXLINE( 452)								e20 = null();
            							}
            							else {
HXLINE( 452)								if (::hx::IsNull( pmin12 )) {
HXLINE( 452)									pmin12 = this->tokenMin;
            								}
HXDLIN( 452)								if (::hx::IsNull( pmax12 )) {
HXLINE( 452)									pmax12 = this->tokenMax;
            								}
HXDLIN( 452)								e20 =  ::Dynamic(::hx::Anon_obj::Create(5)
            									->setFixed(0,HX_("e",65,00,00,00),e19)
            									->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            									->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax12)
            									->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin12)
            									->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            							}
HXLINE( 449)							 ::hscriptBase::ExprDef e21 = ::hscriptBase::ExprDef_obj::EBlock(::Array_obj< ::Dynamic>::__new(3)->init(0,e17)->init(1,e18)->init(2,e20));
HXDLIN( 449)							 ::Dynamic pmin13 = p1;
HXDLIN( 449)							 ::Dynamic pmax13 = null();
HXDLIN( 449)							 ::Dynamic e22;
HXDLIN( 449)							if (::hx::IsNull( e21 )) {
HXLINE( 449)								e22 = null();
            							}
            							else {
HXLINE( 449)								if (::hx::IsNull( pmin13 )) {
HXLINE( 449)									pmin13 = this->tokenMin;
            								}
HXDLIN( 449)								if (::hx::IsNull( pmax13 )) {
HXLINE( 449)									pmax13 = this->tokenMax;
            								}
HXDLIN( 449)								e22 =  ::Dynamic(::hx::Anon_obj::Create(5)
            									->setFixed(0,HX_("e",65,00,00,00),e21)
            									->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            									->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax13)
            									->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin13)
            									->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            							}
HXLINE( 454)							return this->parseExprNext(e22);
            						}
            						break;
            						case (int)13: {
HXLINE( 447)							::String _g12 = _g9->_hx_getString(0);
HXDLIN( 447)							 ::Dynamic _g13 = _g9->_hx_getObject(1);
HXDLIN( 447)							 ::Dynamic _g14 = _g9->_hx_getObject(2);
HXLINE( 448)							::String tmp1 = (HX_("__a_",fe,af,13,3f) + this->uid++);
HXLINE( 450)							 ::hscriptBase::ExprDef e23 = ::hscriptBase::ExprDef_obj::EArrayDecl(::Array_obj< ::Dynamic>::__new(0));
HXDLIN( 450)							 ::Dynamic pmin14 = p1;
HXDLIN( 450)							 ::Dynamic pmax14 = null();
HXDLIN( 450)							 ::Dynamic e24;
HXDLIN( 450)							if (::hx::IsNull( e23 )) {
HXLINE( 450)								e24 = null();
            							}
            							else {
HXLINE( 450)								if (::hx::IsNull( pmin14 )) {
HXLINE( 450)									pmin14 = this->tokenMin;
            								}
HXDLIN( 450)								if (::hx::IsNull( pmax14 )) {
HXLINE( 450)									pmax14 = this->tokenMax;
            								}
HXDLIN( 450)								e24 =  ::Dynamic(::hx::Anon_obj::Create(5)
            									->setFixed(0,HX_("e",65,00,00,00),e23)
            									->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            									->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax14)
            									->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin14)
            									->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            							}
HXDLIN( 450)							 ::hscriptBase::ExprDef e25 = ::hscriptBase::ExprDef_obj::EVar(tmp1,null(),e24,null());
HXDLIN( 450)							 ::Dynamic pmin15 = p1;
HXDLIN( 450)							 ::Dynamic pmax15 = null();
HXDLIN( 450)							 ::Dynamic e26;
HXDLIN( 450)							if (::hx::IsNull( e25 )) {
HXLINE( 450)								e26 = null();
            							}
            							else {
HXLINE( 450)								if (::hx::IsNull( pmin15 )) {
HXLINE( 450)									pmin15 = this->tokenMin;
            								}
HXDLIN( 450)								if (::hx::IsNull( pmax15 )) {
HXLINE( 450)									pmax15 = this->tokenMax;
            								}
HXDLIN( 450)								e26 =  ::Dynamic(::hx::Anon_obj::Create(5)
            									->setFixed(0,HX_("e",65,00,00,00),e25)
            									->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            									->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax15)
            									->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin15)
            									->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            							}
HXLINE( 451)							 ::Dynamic e27 = this->mapCompr(tmp1,a1->__get(0));
HXLINE( 452)							 ::hscriptBase::ExprDef e28 = ::hscriptBase::ExprDef_obj::EIdent(tmp1,null());
HXDLIN( 452)							 ::Dynamic pmin16 = p1;
HXDLIN( 452)							 ::Dynamic pmax16 = null();
HXDLIN( 452)							 ::Dynamic e29;
HXDLIN( 452)							if (::hx::IsNull( e28 )) {
HXLINE( 452)								e29 = null();
            							}
            							else {
HXLINE( 452)								if (::hx::IsNull( pmin16 )) {
HXLINE( 452)									pmin16 = this->tokenMin;
            								}
HXDLIN( 452)								if (::hx::IsNull( pmax16 )) {
HXLINE( 452)									pmax16 = this->tokenMax;
            								}
HXDLIN( 452)								e29 =  ::Dynamic(::hx::Anon_obj::Create(5)
            									->setFixed(0,HX_("e",65,00,00,00),e28)
            									->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            									->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax16)
            									->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin16)
            									->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            							}
HXLINE( 449)							 ::hscriptBase::ExprDef e30 = ::hscriptBase::ExprDef_obj::EBlock(::Array_obj< ::Dynamic>::__new(3)->init(0,e26)->init(1,e27)->init(2,e29));
HXDLIN( 449)							 ::Dynamic pmin17 = p1;
HXDLIN( 449)							 ::Dynamic pmax17 = null();
HXDLIN( 449)							 ::Dynamic e31;
HXDLIN( 449)							if (::hx::IsNull( e30 )) {
HXLINE( 449)								e31 = null();
            							}
            							else {
HXLINE( 449)								if (::hx::IsNull( pmin17 )) {
HXLINE( 449)									pmin17 = this->tokenMin;
            								}
HXDLIN( 449)								if (::hx::IsNull( pmax17 )) {
HXLINE( 449)									pmax17 = this->tokenMax;
            								}
HXDLIN( 449)								e31 =  ::Dynamic(::hx::Anon_obj::Create(5)
            									->setFixed(0,HX_("e",65,00,00,00),e30)
            									->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            									->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax17)
            									->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin17)
            									->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            							}
HXLINE( 454)							return this->parseExprNext(e31);
            						}
            						break;
            						case (int)28: {
HXLINE( 447)							 ::Dynamic _g15 = _g9->_hx_getObject(0);
HXDLIN( 447)							 ::Dynamic _g16 = _g9->_hx_getObject(1);
HXLINE( 448)							::String tmp2 = (HX_("__a_",fe,af,13,3f) + this->uid++);
HXLINE( 450)							 ::hscriptBase::ExprDef e32 = ::hscriptBase::ExprDef_obj::EArrayDecl(::Array_obj< ::Dynamic>::__new(0));
HXDLIN( 450)							 ::Dynamic pmin18 = p1;
HXDLIN( 450)							 ::Dynamic pmax18 = null();
HXDLIN( 450)							 ::Dynamic e33;
HXDLIN( 450)							if (::hx::IsNull( e32 )) {
HXLINE( 450)								e33 = null();
            							}
            							else {
HXLINE( 450)								if (::hx::IsNull( pmin18 )) {
HXLINE( 450)									pmin18 = this->tokenMin;
            								}
HXDLIN( 450)								if (::hx::IsNull( pmax18 )) {
HXLINE( 450)									pmax18 = this->tokenMax;
            								}
HXDLIN( 450)								e33 =  ::Dynamic(::hx::Anon_obj::Create(5)
            									->setFixed(0,HX_("e",65,00,00,00),e32)
            									->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            									->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax18)
            									->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin18)
            									->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            							}
HXDLIN( 450)							 ::hscriptBase::ExprDef e34 = ::hscriptBase::ExprDef_obj::EVar(tmp2,null(),e33,null());
HXDLIN( 450)							 ::Dynamic pmin19 = p1;
HXDLIN( 450)							 ::Dynamic pmax19 = null();
HXDLIN( 450)							 ::Dynamic e35;
HXDLIN( 450)							if (::hx::IsNull( e34 )) {
HXLINE( 450)								e35 = null();
            							}
            							else {
HXLINE( 450)								if (::hx::IsNull( pmin19 )) {
HXLINE( 450)									pmin19 = this->tokenMin;
            								}
HXDLIN( 450)								if (::hx::IsNull( pmax19 )) {
HXLINE( 450)									pmax19 = this->tokenMax;
            								}
HXDLIN( 450)								e35 =  ::Dynamic(::hx::Anon_obj::Create(5)
            									->setFixed(0,HX_("e",65,00,00,00),e34)
            									->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            									->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax19)
            									->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin19)
            									->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            							}
HXLINE( 451)							 ::Dynamic e36 = this->mapCompr(tmp2,a1->__get(0));
HXLINE( 452)							 ::hscriptBase::ExprDef e37 = ::hscriptBase::ExprDef_obj::EIdent(tmp2,null());
HXDLIN( 452)							 ::Dynamic pmin20 = p1;
HXDLIN( 452)							 ::Dynamic pmax20 = null();
HXDLIN( 452)							 ::Dynamic e38;
HXDLIN( 452)							if (::hx::IsNull( e37 )) {
HXLINE( 452)								e38 = null();
            							}
            							else {
HXLINE( 452)								if (::hx::IsNull( pmin20 )) {
HXLINE( 452)									pmin20 = this->tokenMin;
            								}
HXDLIN( 452)								if (::hx::IsNull( pmax20 )) {
HXLINE( 452)									pmax20 = this->tokenMax;
            								}
HXDLIN( 452)								e38 =  ::Dynamic(::hx::Anon_obj::Create(5)
            									->setFixed(0,HX_("e",65,00,00,00),e37)
            									->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            									->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax20)
            									->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin20)
            									->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            							}
HXLINE( 449)							 ::hscriptBase::ExprDef e39 = ::hscriptBase::ExprDef_obj::EBlock(::Array_obj< ::Dynamic>::__new(3)->init(0,e35)->init(1,e36)->init(2,e38));
HXDLIN( 449)							 ::Dynamic pmin21 = p1;
HXDLIN( 449)							 ::Dynamic pmax21 = null();
HXDLIN( 449)							 ::Dynamic e40;
HXDLIN( 449)							if (::hx::IsNull( e39 )) {
HXLINE( 449)								e40 = null();
            							}
            							else {
HXLINE( 449)								if (::hx::IsNull( pmin21 )) {
HXLINE( 449)									pmin21 = this->tokenMin;
            								}
HXDLIN( 449)								if (::hx::IsNull( pmax21 )) {
HXLINE( 449)									pmax21 = this->tokenMax;
            								}
HXDLIN( 449)								e40 =  ::Dynamic(::hx::Anon_obj::Create(5)
            									->setFixed(0,HX_("e",65,00,00,00),e39)
            									->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            									->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax21)
            									->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin21)
            									->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            							}
HXLINE( 454)							return this->parseExprNext(e40);
            						}
            						break;
            						default:{
            						}
            					}
            				}
HXLINE( 457)				 ::hscriptBase::ExprDef e41 = ::hscriptBase::ExprDef_obj::EArrayDecl(a1);
HXDLIN( 457)				 ::Dynamic pmin22 = p1;
HXDLIN( 457)				 ::Dynamic pmax22 = null();
HXDLIN( 457)				 ::Dynamic _hx_tmp9;
HXDLIN( 457)				if (::hx::IsNull( e41 )) {
HXLINE( 457)					_hx_tmp9 = null();
            				}
            				else {
HXLINE( 457)					if (::hx::IsNull( pmin22 )) {
HXLINE( 457)						pmin22 = this->tokenMin;
            					}
HXDLIN( 457)					if (::hx::IsNull( pmax22 )) {
HXLINE( 457)						pmax22 = this->tokenMax;
            					}
HXDLIN( 457)					_hx_tmp9 =  ::Dynamic(::hx::Anon_obj::Create(5)
            						->setFixed(0,HX_("e",65,00,00,00),e41)
            						->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            						->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax22)
            						->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin22)
            						->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            				}
HXDLIN( 457)				return this->parseExprNext(_hx_tmp9);
            			}
            			break;
            			case (int)20: {
HXLINE( 328)				if ((tk->_hx_getString(0) == HX_("end",db,03,4d,00))) {
HXLINE( 329)					{
HXLINE( 329)						 ::hscriptBase::Token tk1 = ::hscriptBase::Token_obj::TConst(::hscriptBase::Const_obj::CInt(::Std_obj::_hx_int(::Math_obj::NaN)));
HXDLIN( 329)						this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            							->setFixed(0,HX_("t",74,00,00,00),tk1)
            							->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            							->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 329)						this->tokenMin = this->oldTokenMin;
HXDLIN( 329)						this->tokenMax = this->oldTokenMax;
            					}
HXLINE( 330)					return this->parseExpr();
            				}
            				else {
HXLINE( 459)					return this->unexpected(tk);
            				}
            			}
            			break;
            			default:{
HXLINE( 459)				return this->unexpected(tk);
            			}
            		}
HXLINE( 327)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseExpr,return )

 ::Dynamic Parser_obj::parseLambda(::Array< ::Dynamic> args, ::Dynamic pmin){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_463_parseLambda)
HXLINE( 464)		while(true){
HXLINE( 465)			::String id = this->getIdent(null());
HXLINE( 466)			 ::hscriptBase::CType t;
HXDLIN( 466)			if (this->maybe(::hscriptBase::Token_obj::TDoubleDot_dyn())) {
HXLINE( 466)				t = this->parseType();
            			}
            			else {
HXLINE( 466)				t = null();
            			}
HXLINE( 467)			args->push( ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("t",74,00,00,00),t)
            				->setFixed(1,HX_("name",4b,72,ff,48),id)));
HXLINE( 468)			 ::hscriptBase::Token tk = this->token();
HXLINE( 469)			switch((int)(tk->_hx_getIndex())){
            				case (int)5: {
HXLINE( 472)					goto _hx_goto_43;
            				}
            				break;
            				case (int)9: {
            				}
            				break;
            				default:{
HXLINE( 474)					this->unexpected(tk);
HXLINE( 475)					goto _hx_goto_43;
            				}
            			}
            		}
            		_hx_goto_43:;
HXLINE( 478)		{
HXLINE( 478)			 ::hscriptBase::Token t1 = this->token();
HXDLIN( 478)			if (!(__hxcpp_enum_eq(t1,::hscriptBase::Token_obj::TOp(HX_("->",71,27,00,00))))) {
HXLINE( 478)				this->unexpected(t1);
            			}
            		}
HXLINE( 479)		 ::Dynamic eret = this->parseExpr();
HXLINE( 480)		 ::hscriptBase::ExprDef e = ::hscriptBase::ExprDef_obj::EReturn(eret);
HXDLIN( 480)		 ::Dynamic pmin1 = pmin;
HXDLIN( 480)		 ::Dynamic pmax = null();
HXDLIN( 480)		 ::Dynamic e1;
HXDLIN( 480)		if (::hx::IsNull( e )) {
HXLINE( 480)			e1 = null();
            		}
            		else {
HXLINE( 480)			if (::hx::IsNull( pmin1 )) {
HXLINE( 480)				pmin1 = this->tokenMin;
            			}
HXDLIN( 480)			if (::hx::IsNull( pmax )) {
HXLINE( 480)				pmax = this->tokenMax;
            			}
HXDLIN( 480)			e1 =  ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("e",65,00,00,00),e)
            				->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            				->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax)
            				->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin1)
            				->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            		}
HXDLIN( 480)		 ::hscriptBase::ExprDef e2 = ::hscriptBase::ExprDef_obj::EFunction(args,e1,null(),null(),null());
HXDLIN( 480)		 ::Dynamic pmin2 = pmin;
HXDLIN( 480)		 ::Dynamic pmax1 = null();
HXDLIN( 480)		if (::hx::IsNull( e2 )) {
HXLINE( 480)			return null();
            		}
            		else {
HXLINE( 480)			if (::hx::IsNull( pmin2 )) {
HXLINE( 480)				pmin2 = this->tokenMin;
            			}
HXDLIN( 480)			if (::hx::IsNull( pmax1 )) {
HXLINE( 480)				pmax1 = this->tokenMax;
            			}
HXDLIN( 480)			return  ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("e",65,00,00,00),e2)
            				->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            				->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax1)
            				->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin2)
            				->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            		}
HXDLIN( 480)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,parseLambda,return )

::Array< ::Dynamic> Parser_obj::parseMetaArgs(){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_483_parseMetaArgs)
HXLINE( 484)		 ::hscriptBase::Token tk = this->token();
HXLINE( 485)		if (::hx::IsPointerNotEq( tk,::hscriptBase::Token_obj::TPOpen_dyn() )) {
HXLINE( 486)			{
HXLINE( 486)				this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("t",74,00,00,00),tk)
            					->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            					->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 486)				this->tokenMin = this->oldTokenMin;
HXDLIN( 486)				this->tokenMax = this->oldTokenMax;
            			}
HXLINE( 487)			return null();
            		}
HXLINE( 489)		::Array< ::Dynamic> args = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 490)		tk = this->token();
HXLINE( 491)		if (::hx::IsPointerNotEq( tk,::hscriptBase::Token_obj::TPClose_dyn() )) {
HXLINE( 492)			{
HXLINE( 492)				this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("t",74,00,00,00),tk)
            					->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            					->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 492)				this->tokenMin = this->oldTokenMin;
HXDLIN( 492)				this->tokenMax = this->oldTokenMax;
            			}
HXLINE( 493)			while(true){
HXLINE( 494)				args->push(this->parseExpr());
HXLINE( 495)				{
HXLINE( 495)					 ::hscriptBase::Token _g = this->token();
HXDLIN( 495)					switch((int)(_g->_hx_getIndex())){
            						case (int)5: {
HXLINE( 498)							goto _hx_goto_45;
            						}
            						break;
            						case (int)9: {
            						}
            						break;
            						default:{
HXLINE( 499)							 ::hscriptBase::Token tk1 = _g;
HXLINE( 500)							this->unexpected(tk1);
            						}
            					}
            				}
            			}
            			_hx_goto_45:;
            		}
HXLINE( 504)		return args;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseMetaArgs,return )

 ::Dynamic Parser_obj::mapCompr(::String tmp, ::Dynamic e){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_507_mapCompr)
HXLINE( 508)		if (::hx::IsNull( e )) {
HXLINE( 508)			return null();
            		}
HXLINE( 509)		 ::hscriptBase::ExprDef edef;
HXDLIN( 509)		 ::hscriptBase::ExprDef _g = e->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
HXDLIN( 509)		switch((int)(_g->_hx_getIndex())){
            			case (int)4: {
HXLINE( 520)				 ::Dynamic e2 = _g->_hx_getObject(0);
HXLINE( 509)				edef = ::hscriptBase::ExprDef_obj::EParent(this->mapCompr(tmp,e2));
            			}
            			break;
            			case (int)5: {
HXLINE( 518)				::Array< ::Dynamic> _g1 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 518)				if ((_g1->length == 1)) {
HXLINE( 518)					 ::Dynamic e1 = _g1->__get(0);
HXLINE( 509)					edef = ::hscriptBase::ExprDef_obj::EBlock(::Array_obj< ::Dynamic>::__new(1)->init(0,this->mapCompr(tmp,e1)));
            				}
            				else {
HXLINE( 523)					 ::hscriptBase::ExprDef e3 = ::hscriptBase::ExprDef_obj::EIdent(tmp,null());
HXDLIN( 523)					 ::Dynamic pmin;
HXDLIN( 523)					if (::hx::IsNull( e )) {
HXLINE( 523)						pmin = 0;
            					}
            					else {
HXLINE( 523)						pmin = e->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            					}
HXDLIN( 523)					 ::Dynamic pmax;
HXDLIN( 523)					if (::hx::IsNull( e )) {
HXLINE( 523)						pmax = 0;
            					}
            					else {
HXLINE( 523)						pmax = e->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            					}
HXDLIN( 523)					 ::Dynamic e4;
HXDLIN( 523)					if (::hx::IsNull( e3 )) {
HXLINE( 523)						e4 = null();
            					}
            					else {
HXLINE( 523)						if (::hx::IsNull( pmin )) {
HXLINE( 523)							pmin = this->tokenMin;
            						}
HXDLIN( 523)						if (::hx::IsNull( pmax )) {
HXLINE( 523)							pmax = this->tokenMax;
            						}
HXDLIN( 523)						e4 =  ::Dynamic(::hx::Anon_obj::Create(5)
            							->setFixed(0,HX_("e",65,00,00,00),e3)
            							->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            							->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax)
            							->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin)
            							->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            					}
HXDLIN( 523)					 ::hscriptBase::ExprDef e5 = ::hscriptBase::ExprDef_obj::EField(e4,HX_("push",da,11,61,4a));
HXDLIN( 523)					 ::Dynamic pmin1;
HXDLIN( 523)					if (::hx::IsNull( e )) {
HXLINE( 523)						pmin1 = 0;
            					}
            					else {
HXLINE( 523)						pmin1 = e->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            					}
HXDLIN( 523)					 ::Dynamic pmax1;
HXDLIN( 523)					if (::hx::IsNull( e )) {
HXLINE( 523)						pmax1 = 0;
            					}
            					else {
HXLINE( 523)						pmax1 = e->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            					}
HXDLIN( 523)					 ::Dynamic edef1;
HXDLIN( 523)					if (::hx::IsNull( e5 )) {
HXLINE( 523)						edef1 = null();
            					}
            					else {
HXLINE( 523)						if (::hx::IsNull( pmin1 )) {
HXLINE( 523)							pmin1 = this->tokenMin;
            						}
HXDLIN( 523)						if (::hx::IsNull( pmax1 )) {
HXLINE( 523)							pmax1 = this->tokenMax;
            						}
HXDLIN( 523)						edef1 =  ::Dynamic(::hx::Anon_obj::Create(5)
            							->setFixed(0,HX_("e",65,00,00,00),e5)
            							->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            							->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax1)
            							->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin1)
            							->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            					}
HXLINE( 509)					edef = ::hscriptBase::ExprDef_obj::ECall(edef1,::Array_obj< ::Dynamic>::__new(1)->init(0,e));
            				}
            			}
            			break;
            			case (int)11: {
HXLINE( 516)				 ::Dynamic cond = _g->_hx_getObject(0);
HXDLIN( 516)				 ::Dynamic e11 = _g->_hx_getObject(1);
HXDLIN( 516)				 ::Dynamic e21 = _g->_hx_getObject(2);
HXDLIN( 516)				if (::hx::IsNull( e21 )) {
HXLINE( 509)					edef = ::hscriptBase::ExprDef_obj::EIf(cond,this->mapCompr(tmp,e11),null());
            				}
            				else {
HXLINE( 523)					 ::hscriptBase::ExprDef e6 = ::hscriptBase::ExprDef_obj::EIdent(tmp,null());
HXDLIN( 523)					 ::Dynamic pmin2;
HXDLIN( 523)					if (::hx::IsNull( e )) {
HXLINE( 523)						pmin2 = 0;
            					}
            					else {
HXLINE( 523)						pmin2 = e->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            					}
HXDLIN( 523)					 ::Dynamic pmax2;
HXDLIN( 523)					if (::hx::IsNull( e )) {
HXLINE( 523)						pmax2 = 0;
            					}
            					else {
HXLINE( 523)						pmax2 = e->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            					}
HXDLIN( 523)					 ::Dynamic e7;
HXDLIN( 523)					if (::hx::IsNull( e6 )) {
HXLINE( 523)						e7 = null();
            					}
            					else {
HXLINE( 523)						if (::hx::IsNull( pmin2 )) {
HXLINE( 523)							pmin2 = this->tokenMin;
            						}
HXDLIN( 523)						if (::hx::IsNull( pmax2 )) {
HXLINE( 523)							pmax2 = this->tokenMax;
            						}
HXDLIN( 523)						e7 =  ::Dynamic(::hx::Anon_obj::Create(5)
            							->setFixed(0,HX_("e",65,00,00,00),e6)
            							->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            							->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax2)
            							->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin2)
            							->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            					}
HXDLIN( 523)					 ::hscriptBase::ExprDef e8 = ::hscriptBase::ExprDef_obj::EField(e7,HX_("push",da,11,61,4a));
HXDLIN( 523)					 ::Dynamic pmin3;
HXDLIN( 523)					if (::hx::IsNull( e )) {
HXLINE( 523)						pmin3 = 0;
            					}
            					else {
HXLINE( 523)						pmin3 = e->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            					}
HXDLIN( 523)					 ::Dynamic pmax3;
HXDLIN( 523)					if (::hx::IsNull( e )) {
HXLINE( 523)						pmax3 = 0;
            					}
            					else {
HXLINE( 523)						pmax3 = e->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            					}
HXDLIN( 523)					 ::Dynamic edef2;
HXDLIN( 523)					if (::hx::IsNull( e8 )) {
HXLINE( 523)						edef2 = null();
            					}
            					else {
HXLINE( 523)						if (::hx::IsNull( pmin3 )) {
HXLINE( 523)							pmin3 = this->tokenMin;
            						}
HXDLIN( 523)						if (::hx::IsNull( pmax3 )) {
HXLINE( 523)							pmax3 = this->tokenMax;
            						}
HXDLIN( 523)						edef2 =  ::Dynamic(::hx::Anon_obj::Create(5)
            							->setFixed(0,HX_("e",65,00,00,00),e8)
            							->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            							->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax3)
            							->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin3)
            							->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            					}
HXLINE( 509)					edef = ::hscriptBase::ExprDef_obj::ECall(edef2,::Array_obj< ::Dynamic>::__new(1)->init(0,e));
            				}
            			}
            			break;
            			case (int)12: {
HXLINE( 512)				 ::Dynamic cond1 = _g->_hx_getObject(0);
HXDLIN( 512)				 ::Dynamic e22 = _g->_hx_getObject(1);
HXLINE( 509)				edef = ::hscriptBase::ExprDef_obj::EWhile(cond1,this->mapCompr(tmp,e22));
            			}
            			break;
            			case (int)13: {
HXLINE( 510)				::String v = _g->_hx_getString(0);
HXDLIN( 510)				 ::Dynamic it = _g->_hx_getObject(1);
HXDLIN( 510)				 ::Dynamic e23 = _g->_hx_getObject(2);
HXLINE( 509)				edef = ::hscriptBase::ExprDef_obj::EFor(v,it,this->mapCompr(tmp,e23));
            			}
            			break;
            			case (int)28: {
HXLINE( 514)				 ::Dynamic cond2 = _g->_hx_getObject(0);
HXDLIN( 514)				 ::Dynamic e24 = _g->_hx_getObject(1);
HXLINE( 509)				edef = ::hscriptBase::ExprDef_obj::EDoWhile(cond2,this->mapCompr(tmp,e24));
            			}
            			break;
            			default:{
HXLINE( 523)				 ::hscriptBase::ExprDef e9 = ::hscriptBase::ExprDef_obj::EIdent(tmp,null());
HXDLIN( 523)				 ::Dynamic pmin4;
HXDLIN( 523)				if (::hx::IsNull( e )) {
HXLINE( 523)					pmin4 = 0;
            				}
            				else {
HXLINE( 523)					pmin4 = e->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            				}
HXDLIN( 523)				 ::Dynamic pmax4;
HXDLIN( 523)				if (::hx::IsNull( e )) {
HXLINE( 523)					pmax4 = 0;
            				}
            				else {
HXLINE( 523)					pmax4 = e->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            				}
HXDLIN( 523)				 ::Dynamic e10;
HXDLIN( 523)				if (::hx::IsNull( e9 )) {
HXLINE( 523)					e10 = null();
            				}
            				else {
HXLINE( 523)					if (::hx::IsNull( pmin4 )) {
HXLINE( 523)						pmin4 = this->tokenMin;
            					}
HXDLIN( 523)					if (::hx::IsNull( pmax4 )) {
HXLINE( 523)						pmax4 = this->tokenMax;
            					}
HXDLIN( 523)					e10 =  ::Dynamic(::hx::Anon_obj::Create(5)
            						->setFixed(0,HX_("e",65,00,00,00),e9)
            						->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            						->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax4)
            						->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin4)
            						->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            				}
HXDLIN( 523)				 ::hscriptBase::ExprDef e12 = ::hscriptBase::ExprDef_obj::EField(e10,HX_("push",da,11,61,4a));
HXDLIN( 523)				 ::Dynamic pmin5;
HXDLIN( 523)				if (::hx::IsNull( e )) {
HXLINE( 523)					pmin5 = 0;
            				}
            				else {
HXLINE( 523)					pmin5 = e->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            				}
HXDLIN( 523)				 ::Dynamic pmax5;
HXDLIN( 523)				if (::hx::IsNull( e )) {
HXLINE( 523)					pmax5 = 0;
            				}
            				else {
HXLINE( 523)					pmax5 = e->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            				}
HXDLIN( 523)				 ::Dynamic edef3;
HXDLIN( 523)				if (::hx::IsNull( e12 )) {
HXLINE( 523)					edef3 = null();
            				}
            				else {
HXLINE( 523)					if (::hx::IsNull( pmin5 )) {
HXLINE( 523)						pmin5 = this->tokenMin;
            					}
HXDLIN( 523)					if (::hx::IsNull( pmax5 )) {
HXLINE( 523)						pmax5 = this->tokenMax;
            					}
HXDLIN( 523)					edef3 =  ::Dynamic(::hx::Anon_obj::Create(5)
            						->setFixed(0,HX_("e",65,00,00,00),e12)
            						->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            						->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax5)
            						->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin5)
            						->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            				}
HXLINE( 509)				edef = ::hscriptBase::ExprDef_obj::ECall(edef3,::Array_obj< ::Dynamic>::__new(1)->init(0,e));
            			}
            		}
HXLINE( 525)		 ::Dynamic pmin6;
HXDLIN( 525)		if (::hx::IsNull( e )) {
HXLINE( 525)			pmin6 = 0;
            		}
            		else {
HXLINE( 525)			pmin6 = e->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            		}
HXDLIN( 525)		 ::Dynamic pmax6;
HXDLIN( 525)		if (::hx::IsNull( e )) {
HXLINE( 525)			pmax6 = 0;
            		}
            		else {
HXLINE( 525)			pmax6 = e->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            		}
HXDLIN( 525)		if (::hx::IsNull( edef )) {
HXLINE( 525)			return null();
            		}
            		else {
HXLINE( 525)			if (::hx::IsNull( pmin6 )) {
HXLINE( 525)				pmin6 = this->tokenMin;
            			}
HXDLIN( 525)			if (::hx::IsNull( pmax6 )) {
HXLINE( 525)				pmax6 = this->tokenMax;
            			}
HXDLIN( 525)			return  ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("e",65,00,00,00),edef)
            				->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            				->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax6)
            				->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin6)
            				->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            		}
HXDLIN( 525)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,mapCompr,return )

 ::Dynamic Parser_obj::makeUnop(::String op, ::Dynamic e){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_528_makeUnop)
HXLINE( 529)		bool _hx_tmp;
HXDLIN( 529)		if (::hx::IsNull( e )) {
HXLINE( 529)			_hx_tmp = this->resumeErrors;
            		}
            		else {
HXLINE( 529)			_hx_tmp = false;
            		}
HXDLIN( 529)		if (_hx_tmp) {
HXLINE( 530)			return null();
            		}
HXLINE( 531)		 ::hscriptBase::ExprDef _g = e->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
HXDLIN( 531)		switch((int)(_g->_hx_getIndex())){
            			case (int)7: {
HXLINE( 532)				::String bop = _g->_hx_getString(0);
HXDLIN( 532)				 ::Dynamic e1 = _g->_hx_getObject(1);
HXDLIN( 532)				 ::Dynamic e2 = _g->_hx_getObject(2);
HXDLIN( 532)				 ::hscriptBase::ExprDef e3 = ::hscriptBase::ExprDef_obj::EBinop(bop,this->makeUnop(op,e1),e2);
HXDLIN( 532)				 ::Dynamic pmin;
HXDLIN( 532)				if (::hx::IsNull( e1 )) {
HXLINE( 532)					pmin = 0;
            				}
            				else {
HXLINE( 532)					pmin = e1->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            				}
HXDLIN( 532)				 ::Dynamic pmax;
HXDLIN( 532)				if (::hx::IsNull( e2 )) {
HXLINE( 532)					pmax = 0;
            				}
            				else {
HXLINE( 532)					pmax = e2->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            				}
HXDLIN( 532)				if (::hx::IsNull( e3 )) {
HXLINE( 532)					return null();
            				}
            				else {
HXLINE( 532)					if (::hx::IsNull( pmin )) {
HXLINE( 532)						pmin = this->tokenMin;
            					}
HXDLIN( 532)					if (::hx::IsNull( pmax )) {
HXLINE( 532)						pmax = this->tokenMax;
            					}
HXDLIN( 532)					return  ::Dynamic(::hx::Anon_obj::Create(5)
            						->setFixed(0,HX_("e",65,00,00,00),e3)
            						->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            						->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax)
            						->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin)
            						->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            				}
            			}
            			break;
            			case (int)26: {
HXLINE( 533)				 ::Dynamic e11 = _g->_hx_getObject(0);
HXDLIN( 533)				 ::Dynamic e21 = _g->_hx_getObject(1);
HXDLIN( 533)				 ::Dynamic e31 = _g->_hx_getObject(2);
HXDLIN( 533)				 ::hscriptBase::ExprDef e4 = ::hscriptBase::ExprDef_obj::ETernary(this->makeUnop(op,e11),e21,e31);
HXDLIN( 533)				 ::Dynamic pmin1;
HXDLIN( 533)				if (::hx::IsNull( e11 )) {
HXLINE( 533)					pmin1 = 0;
            				}
            				else {
HXLINE( 533)					pmin1 = e11->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            				}
HXDLIN( 533)				 ::Dynamic pmax1;
HXDLIN( 533)				if (::hx::IsNull( e31 )) {
HXLINE( 533)					pmax1 = 0;
            				}
            				else {
HXLINE( 533)					pmax1 = e31->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            				}
HXDLIN( 533)				if (::hx::IsNull( e4 )) {
HXLINE( 533)					return null();
            				}
            				else {
HXLINE( 533)					if (::hx::IsNull( pmin1 )) {
HXLINE( 533)						pmin1 = this->tokenMin;
            					}
HXDLIN( 533)					if (::hx::IsNull( pmax1 )) {
HXLINE( 533)						pmax1 = this->tokenMax;
            					}
HXDLIN( 533)					return  ::Dynamic(::hx::Anon_obj::Create(5)
            						->setFixed(0,HX_("e",65,00,00,00),e4)
            						->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            						->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax1)
            						->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin1)
            						->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            				}
            			}
            			break;
            			default:{
HXLINE( 534)				 ::hscriptBase::ExprDef e5 = ::hscriptBase::ExprDef_obj::EUnop(op,true,e);
HXDLIN( 534)				 ::Dynamic pmin2;
HXDLIN( 534)				if (::hx::IsNull( e )) {
HXLINE( 534)					pmin2 = 0;
            				}
            				else {
HXLINE( 534)					pmin2 = e->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            				}
HXDLIN( 534)				 ::Dynamic pmax2;
HXDLIN( 534)				if (::hx::IsNull( e )) {
HXLINE( 534)					pmax2 = 0;
            				}
            				else {
HXLINE( 534)					pmax2 = e->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            				}
HXDLIN( 534)				if (::hx::IsNull( e5 )) {
HXLINE( 534)					return null();
            				}
            				else {
HXLINE( 534)					if (::hx::IsNull( pmin2 )) {
HXLINE( 534)						pmin2 = this->tokenMin;
            					}
HXDLIN( 534)					if (::hx::IsNull( pmax2 )) {
HXLINE( 534)						pmax2 = this->tokenMax;
            					}
HXDLIN( 534)					return  ::Dynamic(::hx::Anon_obj::Create(5)
            						->setFixed(0,HX_("e",65,00,00,00),e5)
            						->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            						->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax2)
            						->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin2)
            						->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            				}
            			}
            		}
HXLINE( 531)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,makeUnop,return )

 ::Dynamic Parser_obj::makeBinop(::String op, ::Dynamic e1, ::Dynamic e){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_538_makeBinop)
HXLINE( 539)		bool _hx_tmp;
HXDLIN( 539)		if (::hx::IsNull( e )) {
HXLINE( 539)			_hx_tmp = this->resumeErrors;
            		}
            		else {
HXLINE( 539)			_hx_tmp = false;
            		}
HXDLIN( 539)		if (_hx_tmp) {
HXLINE( 540)			 ::hscriptBase::ExprDef e2 = ::hscriptBase::ExprDef_obj::EBinop(op,e1,e);
HXDLIN( 540)			 ::Dynamic pmin;
HXDLIN( 540)			if (::hx::IsNull( e1 )) {
HXLINE( 540)				pmin = 0;
            			}
            			else {
HXLINE( 540)				pmin = e1->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            			}
HXDLIN( 540)			 ::Dynamic pmax;
HXDLIN( 540)			if (::hx::IsNull( e1 )) {
HXLINE( 540)				pmax = 0;
            			}
            			else {
HXLINE( 540)				pmax = e1->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            			}
HXDLIN( 540)			if (::hx::IsNull( e2 )) {
HXLINE( 540)				return null();
            			}
            			else {
HXLINE( 540)				if (::hx::IsNull( pmin )) {
HXLINE( 540)					pmin = this->tokenMin;
            				}
HXDLIN( 540)				if (::hx::IsNull( pmax )) {
HXLINE( 540)					pmax = this->tokenMax;
            				}
HXDLIN( 540)				return  ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("e",65,00,00,00),e2)
            					->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            					->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax)
            					->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin)
            					->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            			}
            		}
HXLINE( 541)		 ::hscriptBase::ExprDef _g = e->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
HXDLIN( 541)		switch((int)(_g->_hx_getIndex())){
            			case (int)7: {
HXLINE( 542)				::String op2 = _g->_hx_getString(0);
HXDLIN( 542)				 ::Dynamic e21 = _g->_hx_getObject(1);
HXDLIN( 542)				 ::Dynamic e3 = _g->_hx_getObject(2);
HXLINE( 543)				bool _hx_tmp1;
HXDLIN( 543)				 ::Dynamic _hx_tmp2 = this->opPriority->get(op);
HXDLIN( 543)				if (::hx::IsLessEq( _hx_tmp2,this->opPriority->get(op2) )) {
HXLINE( 543)					_hx_tmp1 = !(this->opRightAssoc->exists(op));
            				}
            				else {
HXLINE( 543)					_hx_tmp1 = false;
            				}
HXDLIN( 543)				if (_hx_tmp1) {
HXLINE( 544)					 ::hscriptBase::ExprDef e4 = ::hscriptBase::ExprDef_obj::EBinop(op2,this->makeBinop(op,e1,e21),e3);
HXDLIN( 544)					 ::Dynamic pmin1;
HXDLIN( 544)					if (::hx::IsNull( e1 )) {
HXLINE( 544)						pmin1 = 0;
            					}
            					else {
HXLINE( 544)						pmin1 = e1->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            					}
HXDLIN( 544)					 ::Dynamic pmax1;
HXDLIN( 544)					if (::hx::IsNull( e3 )) {
HXLINE( 544)						pmax1 = 0;
            					}
            					else {
HXLINE( 544)						pmax1 = e3->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            					}
HXDLIN( 544)					if (::hx::IsNull( e4 )) {
HXLINE( 544)						return null();
            					}
            					else {
HXLINE( 544)						if (::hx::IsNull( pmin1 )) {
HXLINE( 544)							pmin1 = this->tokenMin;
            						}
HXDLIN( 544)						if (::hx::IsNull( pmax1 )) {
HXLINE( 544)							pmax1 = this->tokenMax;
            						}
HXDLIN( 544)						return  ::Dynamic(::hx::Anon_obj::Create(5)
            							->setFixed(0,HX_("e",65,00,00,00),e4)
            							->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            							->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax1)
            							->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin1)
            							->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            					}
            				}
            				else {
HXLINE( 546)					 ::hscriptBase::ExprDef e5 = ::hscriptBase::ExprDef_obj::EBinop(op,e1,e);
HXDLIN( 546)					 ::Dynamic pmin2;
HXDLIN( 546)					if (::hx::IsNull( e1 )) {
HXLINE( 546)						pmin2 = 0;
            					}
            					else {
HXLINE( 546)						pmin2 = e1->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            					}
HXDLIN( 546)					 ::Dynamic pmax2;
HXDLIN( 546)					if (::hx::IsNull( e )) {
HXLINE( 546)						pmax2 = 0;
            					}
            					else {
HXLINE( 546)						pmax2 = e->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            					}
HXDLIN( 546)					if (::hx::IsNull( e5 )) {
HXLINE( 546)						return null();
            					}
            					else {
HXLINE( 546)						if (::hx::IsNull( pmin2 )) {
HXLINE( 546)							pmin2 = this->tokenMin;
            						}
HXDLIN( 546)						if (::hx::IsNull( pmax2 )) {
HXLINE( 546)							pmax2 = this->tokenMax;
            						}
HXDLIN( 546)						return  ::Dynamic(::hx::Anon_obj::Create(5)
            							->setFixed(0,HX_("e",65,00,00,00),e5)
            							->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            							->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax2)
            							->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin2)
            							->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            					}
            				}
            			}
            			break;
            			case (int)26: {
HXLINE( 547)				 ::Dynamic e22 = _g->_hx_getObject(0);
HXDLIN( 547)				 ::Dynamic e31 = _g->_hx_getObject(1);
HXDLIN( 547)				 ::Dynamic e41 = _g->_hx_getObject(2);
HXLINE( 548)				if (this->opRightAssoc->exists(op)) {
HXLINE( 549)					 ::hscriptBase::ExprDef e6 = ::hscriptBase::ExprDef_obj::EBinop(op,e1,e);
HXDLIN( 549)					 ::Dynamic pmin3;
HXDLIN( 549)					if (::hx::IsNull( e1 )) {
HXLINE( 549)						pmin3 = 0;
            					}
            					else {
HXLINE( 549)						pmin3 = e1->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            					}
HXDLIN( 549)					 ::Dynamic pmax3;
HXDLIN( 549)					if (::hx::IsNull( e )) {
HXLINE( 549)						pmax3 = 0;
            					}
            					else {
HXLINE( 549)						pmax3 = e->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            					}
HXDLIN( 549)					if (::hx::IsNull( e6 )) {
HXLINE( 549)						return null();
            					}
            					else {
HXLINE( 549)						if (::hx::IsNull( pmin3 )) {
HXLINE( 549)							pmin3 = this->tokenMin;
            						}
HXDLIN( 549)						if (::hx::IsNull( pmax3 )) {
HXLINE( 549)							pmax3 = this->tokenMax;
            						}
HXDLIN( 549)						return  ::Dynamic(::hx::Anon_obj::Create(5)
            							->setFixed(0,HX_("e",65,00,00,00),e6)
            							->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            							->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax3)
            							->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin3)
            							->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            					}
            				}
            				else {
HXLINE( 551)					 ::hscriptBase::ExprDef e7 = ::hscriptBase::ExprDef_obj::ETernary(this->makeBinop(op,e1,e22),e31,e41);
HXDLIN( 551)					 ::Dynamic pmin4;
HXDLIN( 551)					if (::hx::IsNull( e1 )) {
HXLINE( 551)						pmin4 = 0;
            					}
            					else {
HXLINE( 551)						pmin4 = e1->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            					}
HXDLIN( 551)					 ::Dynamic pmax4;
HXDLIN( 551)					if (::hx::IsNull( e )) {
HXLINE( 551)						pmax4 = 0;
            					}
            					else {
HXLINE( 551)						pmax4 = e->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            					}
HXDLIN( 551)					if (::hx::IsNull( e7 )) {
HXLINE( 551)						return null();
            					}
            					else {
HXLINE( 551)						if (::hx::IsNull( pmin4 )) {
HXLINE( 551)							pmin4 = this->tokenMin;
            						}
HXDLIN( 551)						if (::hx::IsNull( pmax4 )) {
HXLINE( 551)							pmax4 = this->tokenMax;
            						}
HXDLIN( 551)						return  ::Dynamic(::hx::Anon_obj::Create(5)
            							->setFixed(0,HX_("e",65,00,00,00),e7)
            							->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            							->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax4)
            							->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin4)
            							->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            					}
            				}
            			}
            			break;
            			default:{
HXLINE( 553)				 ::hscriptBase::ExprDef e8 = ::hscriptBase::ExprDef_obj::EBinop(op,e1,e);
HXDLIN( 553)				 ::Dynamic pmin5;
HXDLIN( 553)				if (::hx::IsNull( e1 )) {
HXLINE( 553)					pmin5 = 0;
            				}
            				else {
HXLINE( 553)					pmin5 = e1->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            				}
HXDLIN( 553)				 ::Dynamic pmax5;
HXDLIN( 553)				if (::hx::IsNull( e )) {
HXLINE( 553)					pmax5 = 0;
            				}
            				else {
HXLINE( 553)					pmax5 = e->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            				}
HXDLIN( 553)				if (::hx::IsNull( e8 )) {
HXLINE( 553)					return null();
            				}
            				else {
HXLINE( 553)					if (::hx::IsNull( pmin5 )) {
HXLINE( 553)						pmin5 = this->tokenMin;
            					}
HXDLIN( 553)					if (::hx::IsNull( pmax5 )) {
HXLINE( 553)						pmax5 = this->tokenMax;
            					}
HXDLIN( 553)					return  ::Dynamic(::hx::Anon_obj::Create(5)
            						->setFixed(0,HX_("e",65,00,00,00),e8)
            						->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            						->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax5)
            						->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin5)
            						->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            				}
            			}
            		}
HXLINE( 541)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Parser_obj,makeBinop,return )

 ::Dynamic Parser_obj::parseStructure(::String id, ::Dynamic d){
            	HX_GC_STACKFRAME(&_hx_pos_948055e9f9c336b1_557_parseStructure)
HXLINE( 558)		int p1 = this->tokenMin;
HXLINE( 559)		::String _hx_switch_0 = id;
            		if (  (_hx_switch_0==HX_("break",bf,24,ec,b8)) ){
HXLINE( 699)			 ::hscriptBase::ExprDef e = ::hscriptBase::ExprDef_obj::EBreak_dyn();
HXDLIN( 699)			 ::Dynamic pmin = null();
HXDLIN( 699)			 ::Dynamic pmax = null();
HXDLIN( 699)			if (::hx::IsNull( e )) {
HXLINE( 699)				return null();
            			}
            			else {
HXLINE( 699)				if (::hx::IsNull( pmin )) {
HXLINE( 699)					pmin = this->tokenMin;
            				}
HXDLIN( 699)				if (::hx::IsNull( pmax )) {
HXLINE( 699)					pmax = this->tokenMax;
            				}
HXDLIN( 699)				return  ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("e",65,00,00,00),e)
            					->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            					->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax)
            					->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin)
            					->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            			}
HXDLIN( 699)			goto _hx_goto_50;
            		}
            		if (  (_hx_switch_0==HX_("continue",67,e0,c8,31)) ){
HXLINE( 700)			 ::hscriptBase::ExprDef e1 = ::hscriptBase::ExprDef_obj::EContinue_dyn();
HXDLIN( 700)			 ::Dynamic pmin1 = null();
HXDLIN( 700)			 ::Dynamic pmax1 = null();
HXDLIN( 700)			if (::hx::IsNull( e1 )) {
HXLINE( 700)				return null();
            			}
            			else {
HXLINE( 700)				if (::hx::IsNull( pmin1 )) {
HXLINE( 700)					pmin1 = this->tokenMin;
            				}
HXDLIN( 700)				if (::hx::IsNull( pmax1 )) {
HXLINE( 700)					pmax1 = this->tokenMax;
            				}
HXDLIN( 700)				return  ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("e",65,00,00,00),e1)
            					->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            					->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax1)
            					->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin1)
            					->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            			}
HXDLIN( 700)			goto _hx_goto_50;
            		}
            		if (  (_hx_switch_0==HX_("do",8b,57,00,00)) ){
HXLINE( 682)			 ::Dynamic e2 = this->parseExpr();
HXLINE( 683)			 ::hscriptBase::Token tk = this->token();
HXLINE( 684)			if ((tk->_hx_getIndex() == 2)) {
HXLINE( 686)				if ((tk->_hx_getString(0) != HX_("while",b1,43,bd,c9))) {
HXLINE( 687)					this->unexpected(tk);
            				}
            			}
            			else {
HXLINE( 687)				this->unexpected(tk);
            			}
HXLINE( 689)			 ::Dynamic econd = this->parseExpr();
HXLINE( 690)			 ::hscriptBase::ExprDef e3 = ::hscriptBase::ExprDef_obj::EDoWhile(econd,e2);
HXDLIN( 690)			 ::Dynamic pmin2 = p1;
HXDLIN( 690)			 ::Dynamic pmax2;
HXDLIN( 690)			if (::hx::IsNull( econd )) {
HXLINE( 690)				pmax2 = 0;
            			}
            			else {
HXLINE( 690)				pmax2 = econd->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            			}
HXDLIN( 690)			if (::hx::IsNull( e3 )) {
HXLINE( 690)				return null();
            			}
            			else {
HXLINE( 690)				if (::hx::IsNull( pmin2 )) {
HXLINE( 690)					pmin2 = this->tokenMin;
            				}
HXDLIN( 690)				if (::hx::IsNull( pmax2 )) {
HXLINE( 690)					pmax2 = this->tokenMax;
            				}
HXDLIN( 690)				return  ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("e",65,00,00,00),e3)
            					->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            					->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax2)
            					->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin2)
            					->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            			}
HXLINE( 681)			goto _hx_goto_50;
            		}
            		if (  (_hx_switch_0==HX_("dynamic",7f,9f,15,36)) ){
HXLINE( 703)			 ::hscriptBase::Token tk1 = this->token();
HXLINE( 704)			if (!(__hxcpp_enum_eq(tk1,::hscriptBase::Token_obj::TId(HX_("function",18,ab,52,14))))) {
HXLINE( 704)				this->unexpected(tk1);
            			}
HXLINE( 705)			return this->parseStructure(HX_("function",18,ab,52,14), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("v",76,00,00,00),true)));
HXLINE( 702)			goto _hx_goto_50;
            		}
            		if (  (_hx_switch_0==HX_("else",b9,e4,14,43)) ){
HXLINE( 701)			return this->unexpected(::hscriptBase::Token_obj::TId(id));
HXDLIN( 701)			goto _hx_goto_50;
            		}
            		if (  (_hx_switch_0==HX_("final",76,5f,9a,00)) ){
HXLINE( 629)			 ::hscriptBase::Token tk2 = this->token();
HXLINE( 630)			::String ident;
HXDLIN( 630)			switch((int)(tk2->_hx_getIndex())){
            				case (int)1: {
HXLINE( 638)					 ::hscriptBase::Const c = tk2->_hx_getObject(0).StaticCast<  ::hscriptBase::Const >();
HXLINE( 639)					switch((int)(c->_hx_getIndex())){
            						case (int)0: {
HXLINE( 640)							int _g = c->_hx_getInt(0);
HXLINE( 641)							{
HXLINE( 641)								 ::hscriptBase::ErrorDef err = ::hscriptBase::ErrorDef_obj::ECustom(HX_("Missing variable identifier",f3,11,e6,e4));
HXDLIN( 641)								 ::Dynamic pmin3 = this->tokenMin;
HXDLIN( 641)								 ::Dynamic pmax3 = this->tokenMax;
HXDLIN( 641)								 ::hscriptBase::Error e4 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err,( (int)(pmin3) ),( (int)(pmax3) ),this->origin,this->line);
HXDLIN( 641)								if (!(this->resumeErrors)) {
HXLINE( 641)									HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err,( (int)(pmin3) ),( (int)(pmax3) ),this->origin,this->line));
            								}
            							}
HXLINE( 630)							ident = null();
            						}
            						break;
            						case (int)1: {
HXLINE( 640)							Float _g1 = c->_hx_getFloat(0);
HXLINE( 641)							{
HXLINE( 641)								 ::hscriptBase::ErrorDef err1 = ::hscriptBase::ErrorDef_obj::ECustom(HX_("Missing variable identifier",f3,11,e6,e4));
HXDLIN( 641)								 ::Dynamic pmin4 = this->tokenMin;
HXDLIN( 641)								 ::Dynamic pmax4 = this->tokenMax;
HXDLIN( 641)								 ::hscriptBase::Error e5 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err1,( (int)(pmin4) ),( (int)(pmax4) ),this->origin,this->line);
HXDLIN( 641)								if (!(this->resumeErrors)) {
HXLINE( 641)									HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err1,( (int)(pmin4) ),( (int)(pmax4) ),this->origin,this->line));
            								}
            							}
HXLINE( 630)							ident = null();
            						}
            						break;
            						default:{
HXLINE( 630)							ident = null();
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 631)					::String s = tk2->_hx_getString(0);
HXLINE( 632)					if (::hscriptBase::Parser_obj::notAllowedFieldNames->contains(s)) {
HXLINE( 634)						{
HXLINE( 634)							 ::hscriptBase::ErrorDef err2 = ::hscriptBase::ErrorDef_obj::ECustom(((HX_("Keyword ",37,81,52,59) + s) + HX_(" cannot be used as variable name",c4,06,6c,2e)));
HXDLIN( 634)							 ::Dynamic pmin5 = this->tokenMin;
HXDLIN( 634)							 ::Dynamic pmax5 = this->tokenMax;
HXDLIN( 634)							 ::hscriptBase::Error e6 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err2,( (int)(pmin5) ),( (int)(pmax5) ),this->origin,this->line);
HXDLIN( 634)							if (!(this->resumeErrors)) {
HXLINE( 634)								HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err2,( (int)(pmin5) ),( (int)(pmax5) ),this->origin,this->line));
            							}
            						}
HXLINE( 630)						ident = null();
            					}
            					else {
HXLINE( 630)						ident = s;
            					}
            				}
            				break;
            				default:{
HXLINE( 646)					this->unexpected(tk2);
HXLINE( 630)					ident = null();
            				}
            			}
HXLINE( 649)			 ::hscriptBase::Token tk3 = this->token();
HXLINE( 650)			 ::hscriptBase::CType tp = null();
HXLINE( 651)			bool _hx_tmp;
HXDLIN( 651)			if (::hx::IsPointerEq( tk3,::hscriptBase::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 651)				_hx_tmp = this->allowTypes;
            			}
            			else {
HXLINE( 651)				_hx_tmp = false;
            			}
HXDLIN( 651)			if (_hx_tmp) {
HXLINE( 652)				tp = this->parseType();
HXLINE( 653)				tk3 = this->token();
            			}
HXLINE( 655)			 ::Dynamic e7 = null();
HXLINE( 656)			switch((int)(tk3->_hx_getIndex())){
            				case (int)3: {
HXLINE( 658)					if ((tk3->_hx_getString(0) == HX_("=",3d,00,00,00))) {
HXLINE( 658)						e7 = this->parseExpr();
            					}
            					else {
HXLINE( 674)						this->unexpected(tk3);
            					}
            				}
            				break;
            				case (int)9: case (int)10: {
HXLINE( 659)					{
HXLINE( 659)						this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            							->setFixed(0,HX_("t",74,00,00,00),tk3)
            							->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            							->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 659)						this->tokenMin = this->oldTokenMin;
HXDLIN( 659)						this->tokenMax = this->oldTokenMax;
            					}
HXLINE( 661)					if (::hx::IsNotNull( tp )) {
HXLINE( 661)						if (::hx::IsNotNull( tp )) {
HXLINE( 661)							if ((tp->_hx_getIndex() == 0)) {
HXLINE( 662)								::Array< ::String > p = tp->_hx_getObject(0).StaticCast< ::Array< ::String > >();
HXDLIN( 662)								::Array< ::Dynamic> pr = tp->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 663)								::String _hx_switch_1 = p->__get(0);
            								if (  (_hx_switch_1==HX_("Bool",4a,b0,f4,2b)) ){
HXLINE( 667)									 ::hscriptBase::ExprDef e8 = ::hscriptBase::ExprDef_obj::EIdent(HX_("false",a3,35,4f,fb),true);
HXDLIN( 667)									 ::Dynamic pmin6 = null();
HXDLIN( 667)									 ::Dynamic pmax6 = null();
HXDLIN( 667)									if (::hx::IsNull( e8 )) {
HXLINE( 667)										e7 = null();
            									}
            									else {
HXLINE( 667)										if (::hx::IsNull( pmin6 )) {
HXLINE( 667)											pmin6 = this->tokenMin;
            										}
HXDLIN( 667)										if (::hx::IsNull( pmax6 )) {
HXLINE( 667)											pmax6 = this->tokenMax;
            										}
HXDLIN( 667)										e7 =  ::Dynamic(::hx::Anon_obj::Create(5)
            											->setFixed(0,HX_("e",65,00,00,00),e8)
            											->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            											->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax6)
            											->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin6)
            											->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            									}
HXDLIN( 667)									goto _hx_goto_51;
            								}
            								if (  (_hx_switch_1==HX_("Float",7c,35,c4,95)) ){
HXLINE( 669)									 ::hscriptBase::ExprDef e9 = ::hscriptBase::ExprDef_obj::EConst(::hscriptBase::Const_obj::CFloat(((Float)0.0)));
HXDLIN( 669)									 ::Dynamic pmin7 = null();
HXDLIN( 669)									 ::Dynamic pmax7 = null();
HXDLIN( 669)									if (::hx::IsNull( e9 )) {
HXLINE( 669)										e7 = null();
            									}
            									else {
HXLINE( 669)										if (::hx::IsNull( pmin7 )) {
HXLINE( 669)											pmin7 = this->tokenMin;
            										}
HXDLIN( 669)										if (::hx::IsNull( pmax7 )) {
HXLINE( 669)											pmax7 = this->tokenMax;
            										}
HXDLIN( 669)										e7 =  ::Dynamic(::hx::Anon_obj::Create(5)
            											->setFixed(0,HX_("e",65,00,00,00),e9)
            											->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            											->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax7)
            											->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin7)
            											->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            									}
HXDLIN( 669)									goto _hx_goto_51;
            								}
            								if (  (_hx_switch_1==HX_("Int",cf,c4,37,00)) ){
HXLINE( 665)									 ::hscriptBase::ExprDef e10 = ::hscriptBase::ExprDef_obj::EConst(::hscriptBase::Const_obj::CInt(0));
HXDLIN( 665)									 ::Dynamic pmin8 = null();
HXDLIN( 665)									 ::Dynamic pmax8 = null();
HXDLIN( 665)									if (::hx::IsNull( e10 )) {
HXLINE( 665)										e7 = null();
            									}
            									else {
HXLINE( 665)										if (::hx::IsNull( pmin8 )) {
HXLINE( 665)											pmin8 = this->tokenMin;
            										}
HXDLIN( 665)										if (::hx::IsNull( pmax8 )) {
HXLINE( 665)											pmax8 = this->tokenMax;
            										}
HXDLIN( 665)										e7 =  ::Dynamic(::hx::Anon_obj::Create(5)
            											->setFixed(0,HX_("e",65,00,00,00),e10)
            											->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            											->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax8)
            											->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin8)
            											->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            									}
HXDLIN( 665)									goto _hx_goto_51;
            								}
            								_hx_goto_51:;
            							}
            						}
            					}
            				}
            				break;
            				default:{
HXLINE( 674)					this->unexpected(tk3);
            				}
            			}
HXLINE( 676)			 ::hscriptBase::ExprDef e11 = ::hscriptBase::ExprDef_obj::EFinal(ident,tp,e7);
HXDLIN( 676)			 ::Dynamic pmin9 = p1;
HXDLIN( 676)			 ::Dynamic pmax9;
HXDLIN( 676)			if (::hx::IsNull( e7 )) {
HXLINE( 676)				pmax9 = this->tokenMax;
            			}
            			else {
HXLINE( 676)				if (::hx::IsNull( e7 )) {
HXLINE( 676)					pmax9 = 0;
            				}
            				else {
HXLINE( 676)					pmax9 = e7->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            				}
            			}
HXDLIN( 676)			if (::hx::IsNull( e11 )) {
HXLINE( 676)				return null();
            			}
            			else {
HXLINE( 676)				if (::hx::IsNull( pmin9 )) {
HXLINE( 676)					pmin9 = this->tokenMin;
            				}
HXDLIN( 676)				if (::hx::IsNull( pmax9 )) {
HXLINE( 676)					pmax9 = this->tokenMax;
            				}
HXDLIN( 676)				return  ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("e",65,00,00,00),e11)
            					->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            					->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax9)
            					->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin9)
            					->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            			}
HXLINE( 628)			goto _hx_goto_50;
            		}
            		if (  (_hx_switch_0==HX_("for",09,c7,4d,00)) ){
HXLINE( 692)			{
HXLINE( 692)				 ::hscriptBase::Token t = this->token();
HXDLIN( 692)				if (::hx::IsPointerNotEq( t,::hscriptBase::Token_obj::TPOpen_dyn() )) {
HXLINE( 692)					this->unexpected(t);
            				}
            			}
HXLINE( 693)			::String vname = this->getIdent(null());
HXLINE( 694)			{
HXLINE( 694)				 ::hscriptBase::Token t1 = this->token();
HXDLIN( 694)				if (!(__hxcpp_enum_eq(t1,::hscriptBase::Token_obj::TId(HX_("in",e5,5b,00,00))))) {
HXLINE( 694)					this->unexpected(t1);
            				}
            			}
HXLINE( 695)			 ::Dynamic eiter = this->parseExpr();
HXLINE( 696)			{
HXLINE( 696)				 ::hscriptBase::Token t2 = this->token();
HXDLIN( 696)				if (::hx::IsPointerNotEq( t2,::hscriptBase::Token_obj::TPClose_dyn() )) {
HXLINE( 696)					this->unexpected(t2);
            				}
            			}
HXLINE( 697)			 ::Dynamic e12 = this->parseExpr();
HXLINE( 698)			 ::hscriptBase::ExprDef e13 = ::hscriptBase::ExprDef_obj::EFor(vname,eiter,e12);
HXDLIN( 698)			 ::Dynamic pmin10 = p1;
HXDLIN( 698)			 ::Dynamic pmax10;
HXDLIN( 698)			if (::hx::IsNull( e12 )) {
HXLINE( 698)				pmax10 = 0;
            			}
            			else {
HXLINE( 698)				pmax10 = e12->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            			}
HXDLIN( 698)			if (::hx::IsNull( e13 )) {
HXLINE( 698)				return null();
            			}
            			else {
HXLINE( 698)				if (::hx::IsNull( pmin10 )) {
HXLINE( 698)					pmin10 = this->tokenMin;
            				}
HXDLIN( 698)				if (::hx::IsNull( pmax10 )) {
HXLINE( 698)					pmax10 = this->tokenMax;
            				}
HXDLIN( 698)				return  ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("e",65,00,00,00),e13)
            					->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            					->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax10)
            					->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin10)
            					->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            			}
HXLINE( 691)			goto _hx_goto_50;
            		}
            		if (  (_hx_switch_0==HX_("function",18,ab,52,14)) ){
HXLINE( 707)			 ::hscriptBase::Token tk4 = this->token();
HXLINE( 708)			::String name = null();
HXLINE( 709)			if ((tk4->_hx_getIndex() == 2)) {
HXLINE( 710)				::String id1 = tk4->_hx_getString(0);
HXDLIN( 710)				name = id1;
            			}
            			else {
HXLINE( 711)				this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("t",74,00,00,00),tk4)
            					->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            					->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 711)				this->tokenMin = this->oldTokenMin;
HXDLIN( 711)				this->tokenMax = this->oldTokenMax;
            			}
HXLINE( 713)			 ::Dynamic inf = this->parseFunctionDecl();
HXLINE( 714)			 ::hscriptBase::ExprDef e14 = ::hscriptBase::ExprDef_obj::EFunction( ::Dynamic(inf->__Field(HX_("args",5d,8d,74,40),::hx::paccDynamic)), ::Dynamic(inf->__Field(HX_("body",a2,7a,1b,41),::hx::paccDynamic)),name, ::Dynamic(inf->__Field(HX_("ret",61,d9,56,00),::hx::paccDynamic)),d);
HXDLIN( 714)			 ::Dynamic pmin11 = p1;
HXDLIN( 714)			 ::Dynamic e15 = inf->__Field(HX_("body",a2,7a,1b,41),::hx::paccDynamic);
HXDLIN( 714)			 ::Dynamic pmax11;
HXDLIN( 714)			if (::hx::IsNull( e15 )) {
HXLINE( 714)				pmax11 = 0;
            			}
            			else {
HXLINE( 714)				pmax11 = e15->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            			}
HXDLIN( 714)			if (::hx::IsNull( e14 )) {
HXLINE( 714)				return null();
            			}
            			else {
HXLINE( 714)				if (::hx::IsNull( pmin11 )) {
HXLINE( 714)					pmin11 = this->tokenMin;
            				}
HXDLIN( 714)				if (::hx::IsNull( pmax11 )) {
HXLINE( 714)					pmax11 = this->tokenMax;
            				}
HXDLIN( 714)				return  ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("e",65,00,00,00),e14)
            					->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            					->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax11)
            					->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin11)
            					->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            			}
HXLINE( 706)			goto _hx_goto_50;
            		}
            		if (  (_hx_switch_0==HX_("if",dd,5b,00,00)) ){
HXLINE( 561)			{
HXLINE( 561)				 ::hscriptBase::Token t3 = this->token();
HXDLIN( 561)				if (::hx::IsPointerNotEq( t3,::hscriptBase::Token_obj::TPOpen_dyn() )) {
HXLINE( 561)					this->unexpected(t3);
            				}
            			}
HXLINE( 562)			 ::Dynamic cond = this->parseExpr();
HXLINE( 563)			{
HXLINE( 563)				 ::hscriptBase::Token t4 = this->token();
HXDLIN( 563)				if (::hx::IsPointerNotEq( t4,::hscriptBase::Token_obj::TPClose_dyn() )) {
HXLINE( 563)					this->unexpected(t4);
            				}
            			}
HXLINE( 564)			 ::Dynamic e16 = this->parseExpr();
HXLINE( 565)			 ::Dynamic e21 = null();
HXLINE( 566)			bool semic = false;
HXLINE( 567)			 ::hscriptBase::Token tk5 = this->token();
HXLINE( 568)			if (::hx::IsPointerEq( tk5,::hscriptBase::Token_obj::TStatement_dyn() )) {
HXLINE( 569)				semic = true;
HXLINE( 570)				tk5 = this->token();
            			}
HXLINE( 572)			if (__hxcpp_enum_eq(tk5,::hscriptBase::Token_obj::TId(HX_("else",b9,e4,14,43)))) {
HXLINE( 573)				e21 = this->parseExpr();
            			}
            			else {
HXLINE( 575)				{
HXLINE( 575)					this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("t",74,00,00,00),tk5)
            						->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            						->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 575)					this->tokenMin = this->oldTokenMin;
HXDLIN( 575)					this->tokenMax = this->oldTokenMax;
            				}
HXLINE( 576)				if (semic) {
HXLINE( 576)					this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("t",74,00,00,00),::hscriptBase::Token_obj::TStatement_dyn())
            						->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            						->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 576)					this->tokenMin = this->oldTokenMin;
HXDLIN( 576)					this->tokenMax = this->oldTokenMax;
            				}
            			}
HXLINE( 578)			 ::hscriptBase::ExprDef e17 = ::hscriptBase::ExprDef_obj::EIf(cond,e16,e21);
HXDLIN( 578)			 ::Dynamic pmin12 = p1;
HXDLIN( 578)			 ::Dynamic pmax12;
HXDLIN( 578)			if (::hx::IsNull( e21 )) {
HXLINE( 578)				pmax12 = this->tokenMax;
            			}
            			else {
HXLINE( 578)				if (::hx::IsNull( e21 )) {
HXLINE( 578)					pmax12 = 0;
            				}
            				else {
HXLINE( 578)					pmax12 = e21->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            				}
            			}
HXDLIN( 578)			if (::hx::IsNull( e17 )) {
HXLINE( 578)				return null();
            			}
            			else {
HXLINE( 578)				if (::hx::IsNull( pmin12 )) {
HXLINE( 578)					pmin12 = this->tokenMin;
            				}
HXDLIN( 578)				if (::hx::IsNull( pmax12 )) {
HXLINE( 578)					pmax12 = this->tokenMax;
            				}
HXDLIN( 578)				return  ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("e",65,00,00,00),e17)
            					->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            					->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax12)
            					->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin12)
            					->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            			}
HXLINE( 560)			goto _hx_goto_50;
            		}
            		if (  (_hx_switch_0==HX_("import",65,a1,82,08)) ){
HXLINE( 884)			::Array< ::String > path = ::Array_obj< ::String >::__new(1)->init(0,this->getIdent(null()));
HXLINE( 885)			bool isStar = false;
HXLINE( 887)			while(true){
HXLINE( 888)				 ::hscriptBase::Token t5 = this->token();
HXLINE( 889)				if (::hx::IsPointerNotEq( t5,::hscriptBase::Token_obj::TDot_dyn() )) {
HXLINE( 890)					{
HXLINE( 890)						this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            							->setFixed(0,HX_("t",74,00,00,00),t5)
            							->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            							->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 890)						this->tokenMin = this->oldTokenMin;
HXDLIN( 890)						this->tokenMax = this->oldTokenMax;
            					}
HXLINE( 891)					goto _hx_goto_52;
            				}
HXLINE( 893)				t5 = this->token();
HXLINE( 894)				switch((int)(t5->_hx_getIndex())){
            					case (int)2: {
HXLINE( 895)						::String id2 = t5->_hx_getString(0);
HXLINE( 896)						path->push(id2);
            					}
            					break;
            					case (int)3: {
HXLINE( 897)						if ((t5->_hx_getString(0) == HX_("*",2a,00,00,00))) {
HXLINE( 898)							isStar = true;
HXLINE( 899)							goto _hx_goto_52;
            						}
            						else {
HXLINE( 901)							this->unexpected(t5);
            						}
            					}
            					break;
            					default:{
HXLINE( 901)						this->unexpected(t5);
            					}
            				}
            			}
            			_hx_goto_52:;
HXLINE( 905)			if (isStar) {
HXLINE( 907)				 ::hscriptBase::ExprDef e18 = ::hscriptBase::ExprDef_obj::EImportStar(path->join(HX_(".",2e,00,00,00)));
HXDLIN( 907)				 ::Dynamic pmin13 = null();
HXDLIN( 907)				 ::Dynamic pmax13 = null();
HXDLIN( 907)				if (::hx::IsNull( e18 )) {
HXLINE( 907)					return null();
            				}
            				else {
HXLINE( 907)					if (::hx::IsNull( pmin13 )) {
HXLINE( 907)						pmin13 = this->tokenMin;
            					}
HXDLIN( 907)					if (::hx::IsNull( pmax13 )) {
HXLINE( 907)						pmax13 = this->tokenMax;
            					}
HXDLIN( 907)					return  ::Dynamic(::hx::Anon_obj::Create(5)
            						->setFixed(0,HX_("e",65,00,00,00),e18)
            						->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            						->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax13)
            						->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin13)
            						->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            				}
            			}
HXLINE( 910)			::Array< ::String > anPath = ::Array_obj< ::String >::__new(0);
HXLINE( 911)			int _hx_int = 0;
HXLINE( 912)			{
HXLINE( 912)				int _g2 = 0;
HXDLIN( 912)				while((_g2 < path->length)){
HXLINE( 912)					::String i = path->__get(_g2);
HXDLIN( 912)					_g2 = (_g2 + 1);
HXLINE( 914)					bool _hx_tmp1;
HXDLIN( 914)					if ((i == i.toLowerCase())) {
HXLINE( 914)						_hx_tmp1 = (path->indexOf(i,null()) == 0);
            					}
            					else {
HXLINE( 914)						_hx_tmp1 = false;
            					}
HXDLIN( 914)					if (_hx_tmp1) {
HXLINE( 916)						anPath->insert(0,((HX_("",00,00,00,00) + i) + HX_(".",2e,00,00,00)));
HXLINE( 918)						_hx_int = (_hx_int + 1);
            					}
            					else {
HXLINE( 920)						bool _hx_tmp2;
HXDLIN( 920)						if ((i == i.toLowerCase())) {
HXLINE( 920)							_hx_tmp2 = (path->indexOf(i,null()) == _hx_int);
            						}
            						else {
HXLINE( 920)							_hx_tmp2 = false;
            						}
HXDLIN( 920)						if (_hx_tmp2) {
HXLINE( 922)							::Array< ::String > anPath1 = anPath;
HXDLIN( 922)							int _hx_tmp3 = 0;
HXDLIN( 922)							anPath1[_hx_tmp3] = (anPath1->__get(_hx_tmp3) + ((HX_("",00,00,00,00) + i) + HX_(".",2e,00,00,00)));
HXLINE( 924)							_hx_int = (_hx_int + 1);
            						}
            						else {
HXLINE( 926)							bool _hx_tmp4;
HXDLIN( 926)							if ((path->indexOf(i,null()) == _hx_int)) {
HXLINE( 926)								_hx_tmp4 = (path->indexOf(i,null()) != 0);
            							}
            							else {
HXLINE( 926)								_hx_tmp4 = false;
            							}
HXDLIN( 926)							if (_hx_tmp4) {
HXLINE( 928)								::Array< ::String > anPath2 = anPath;
HXDLIN( 928)								int _hx_tmp5 = 0;
HXDLIN( 928)								anPath2[_hx_tmp5] = (anPath2->__get(_hx_tmp5) + i);
            							}
            							else {
HXLINE( 931)								bool _hx_tmp6;
HXDLIN( 931)								if ((path->indexOf(i,null()) == _hx_int)) {
HXLINE( 931)									_hx_tmp6 = (_hx_int == 0);
            								}
            								else {
HXLINE( 931)									_hx_tmp6 = false;
            								}
HXDLIN( 931)								if (_hx_tmp6) {
HXLINE( 933)									anPath[0] = HX_("",00,00,00,00);
HXLINE( 934)									::Array< ::String > anPath3 = anPath;
HXDLIN( 934)									int _hx_tmp7 = 0;
HXDLIN( 934)									anPath3[_hx_tmp7] = (anPath3->__get(_hx_tmp7) + i);
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 938)			::Array< ::String > nulls = anPath->__get(0).split(HX_(".",2e,00,00,00));
HXLINE( 940)			{
HXLINE( 940)				int _g3 = 0;
HXDLIN( 940)				while((_g3 < nulls->length)){
HXLINE( 940)					::String i1 = nulls->__get(_g3);
HXDLIN( 940)					_g3 = (_g3 + 1);
HXLINE( 941)					if (path->contains(i1)) {
HXLINE( 942)						path->remove(i1);
            					}
            				}
            			}
HXLINE( 944)			bool maybe = this->maybe(::hscriptBase::Token_obj::TId(HX_("as",f2,54,00,00)));
HXLINE( 945)			::String asIdent = null();
HXLINE( 947)			if (maybe) {
HXLINE( 947)				asIdent = this->getIdent(null());
            			}
HXLINE( 949)			bool _hx_tmp8;
HXDLIN( 949)			if (maybe) {
HXLINE( 949)				if (::hx::IsNotNull( asIdent )) {
HXLINE( 949)					_hx_tmp8 = (asIdent == HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 949)					_hx_tmp8 = true;
            				}
            			}
            			else {
HXLINE( 949)				_hx_tmp8 = false;
            			}
HXDLIN( 949)			if (_hx_tmp8) {
HXLINE( 950)				this->unexpected(::hscriptBase::Token_obj::TId(HX_("as",f2,54,00,00)));
            			}
HXLINE( 952)			bool usedAs;
HXDLIN( 952)			if (maybe) {
HXLINE( 952)				usedAs = ((HX_("",00,00,00,00) + asIdent) != HX_("null",87,9e,0e,49));
            			}
            			else {
HXLINE( 952)				usedAs = false;
            			}
HXLINE( 954)			::String cl = null();
HXLINE( 955)			 ::Dynamic eclass = null();
HXLINE( 956)			::String og = null();
HXLINE( 957)			if ((path->length > 1)) {
HXLINE( 959)				::String og1 = null();
HXLINE( 960)				::hx::Class c1 = ::Type_obj::resolveClass(anPath->__get(0));
HXLINE( 961)				 ::Dynamic property = ::Reflect_obj::getProperty(c1,path->__get(0));
HXLINE( 963)				{
HXLINE( 963)					int _g4 = 1;
HXDLIN( 963)					int _g5 = (path->length - 1);
HXDLIN( 963)					while((_g4 < _g5)){
HXLINE( 963)						_g4 = (_g4 + 1);
HXDLIN( 963)						int i2 = (_g4 - 1);
HXLINE( 965)						property = ::Reflect_obj::getProperty(property,path->__get(i2));
            					}
            				}
HXLINE( 968)				cl = path->__get((path->length - 1));
HXLINE( 969)				og1 = cl;
HXLINE( 970)				property = ::Reflect_obj::getProperty(property,cl);
HXLINE( 971)				if (usedAs) {
HXLINE( 972)					cl = asIdent;
            				}
HXLINE( 973)				::String _hx_tmp9;
HXDLIN( 973)				if (usedAs) {
HXLINE( 973)					_hx_tmp9 = asIdent;
            				}
            				else {
HXLINE( 973)					_hx_tmp9 = null();
            				}
            			}
            			else {
HXLINE( 977)				if ((path->length == 0)) {
HXLINE( 979)					eclass = ::Type_obj::resolveClass(anPath->__get(0));
HXLINE( 980)					if (::hx::IsNull( eclass )) {
HXLINE( 980)						eclass = ::Type_obj::resolveEnum(anPath->__get(0));
            					}
HXLINE( 981)					cl = nulls->__get((nulls->length - 1));
HXLINE( 982)					og = cl;
HXLINE( 983)					if (usedAs) {
HXLINE( 984)						cl = asIdent;
            					}
            				}
            				else {
HXLINE( 988)					eclass = ::Type_obj::resolveClass(anPath->__get(0));
HXLINE( 989)					if (::hx::IsNull( eclass )) {
HXLINE( 989)						eclass = ::Type_obj::resolveEnum(anPath->__get(0));
            					}
HXLINE( 990)					 ::Dynamic prop = ::Reflect_obj::getProperty(eclass,path->__get(0));
HXLINE( 991)					eclass = prop;
HXLINE( 992)					cl = path->__get(0);
HXLINE( 993)					og = cl;
HXLINE( 994)					if (usedAs) {
HXLINE( 995)						cl = asIdent;
            					}
            				}
            			}
HXLINE( 998)			::String e19;
HXDLIN( 998)			if (usedAs) {
HXLINE( 998)				e19 = asIdent;
            			}
            			else {
HXLINE( 998)				e19 = null();
            			}
HXDLIN( 998)			 ::hscriptBase::ExprDef e20 = ::hscriptBase::ExprDef_obj::EImport(eclass,cl,e19);
HXDLIN( 998)			 ::Dynamic pmin14 = null();
HXDLIN( 998)			 ::Dynamic pmax14 = null();
HXDLIN( 998)			if (::hx::IsNull( e20 )) {
HXLINE( 998)				return null();
            			}
            			else {
HXLINE( 998)				if (::hx::IsNull( pmin14 )) {
HXLINE( 998)					pmin14 = this->tokenMin;
            				}
HXDLIN( 998)				if (::hx::IsNull( pmax14 )) {
HXLINE( 998)					pmax14 = this->tokenMax;
            				}
HXDLIN( 998)				return  ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("e",65,00,00,00),e20)
            					->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            					->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax14)
            					->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin14)
            					->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            			}
HXLINE( 883)			goto _hx_goto_50;
            		}
            		if (  (_hx_switch_0==HX_("new",60,d0,53,00)) ){
HXLINE( 721)			::Array< ::String > a = ::Array_obj< ::String >::__new();
HXLINE( 722)			::Array< ::String > subIds = ::Array_obj< ::String >::__new();
HXLINE( 724)			a->push(this->getIdent(null()));
HXLINE( 725)			while(true){
HXLINE( 726)				 ::hscriptBase::Token tk6 = this->token();
HXLINE( 727)				switch((int)(tk6->_hx_getIndex())){
            					case (int)3: {
HXLINE( 732)						if ((tk6->_hx_getString(0) == HX_("<",3c,00,00,00))) {
HXLINE( 733)							while(true){
HXLINE( 734)								 ::hscriptBase::Token t6 = this->token();
HXLINE( 735)								switch((int)(t6->_hx_getIndex())){
            									case (int)2: {
HXLINE( 736)										::String s1 = t6->_hx_getString(0);
HXDLIN( 736)										subIds->push(s1);
            									}
            									break;
            									case (int)3: {
HXLINE( 743)										if ((t6->_hx_getString(0) == HX_(">",3e,00,00,00))) {
HXLINE( 743)											goto _hx_goto_57;
            										}
            										else {
HXLINE( 744)											this->unexpected(t6);
            										}
            									}
            									break;
            									case (int)9: {
HXLINE( 737)										t6 = this->token();
HXLINE( 738)										switch((int)(t6->_hx_getIndex())){
            											case (int)2: {
HXLINE( 739)												::String s2 = t6->_hx_getString(0);
HXDLIN( 739)												subIds->push(s2);
            											}
            											break;
            											case (int)3: {
HXLINE( 740)												if ((t6->_hx_getString(0) == HX_(">",3e,00,00,00))) {
HXLINE( 740)													goto _hx_goto_57;
            												}
            												else {
HXLINE( 741)													this->unexpected(t6);
            												}
            											}
            											break;
            											default:{
HXLINE( 741)												this->unexpected(t6);
            											}
            										}
            									}
            									break;
            									default:{
HXLINE( 744)										this->unexpected(t6);
            									}
            								}
            							}
            							_hx_goto_57:;
            						}
            						else {
HXLINE( 748)							this->unexpected(tk6);
HXLINE( 749)							goto _hx_goto_56;
            						}
            					}
            					break;
            					case (int)4: {
HXLINE( 731)						goto _hx_goto_56;
            					}
            					break;
            					case (int)8: {
HXLINE( 729)						a->push(this->getIdent(null()));
            					}
            					break;
            					default:{
HXLINE( 748)						this->unexpected(tk6);
HXLINE( 749)						goto _hx_goto_56;
            					}
            				}
            			}
            			_hx_goto_56:;
HXLINE( 752)			::Array< ::Dynamic> args = this->parseExprList(::hscriptBase::Token_obj::TPClose_dyn());
HXLINE( 753)			 ::hscriptBase::ExprDef e22 = ::hscriptBase::ExprDef_obj::ENew(a->join(HX_(".",2e,00,00,00)),args,subIds);
HXDLIN( 753)			 ::Dynamic pmin15 = p1;
HXDLIN( 753)			 ::Dynamic pmax15 = null();
HXDLIN( 753)			if (::hx::IsNull( e22 )) {
HXLINE( 753)				return null();
            			}
            			else {
HXLINE( 753)				if (::hx::IsNull( pmin15 )) {
HXLINE( 753)					pmin15 = this->tokenMin;
            				}
HXDLIN( 753)				if (::hx::IsNull( pmax15 )) {
HXLINE( 753)					pmax15 = this->tokenMax;
            				}
HXDLIN( 753)				return  ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("e",65,00,00,00),e22)
            					->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            					->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax15)
            					->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin15)
            					->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            			}
HXLINE( 720)			goto _hx_goto_50;
            		}
            		if (  (_hx_switch_0==HX_("package",86,2b,b1,41)) ){
HXLINE(1000)			::Array< ::String > path1 = ::Array_obj< ::String >::__new(1)->init(0,this->getIdent(false));
HXLINE(1001)			if (!(path1->contains(null()))) {
HXLINE(1002)				while(true){
HXLINE(1003)					 ::hscriptBase::Token t7 = this->token();
HXLINE(1004)					if (::hx::IsPointerNotEq( t7,::hscriptBase::Token_obj::TDot_dyn() )) {
HXLINE(1005)						{
HXLINE(1005)							this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            								->setFixed(0,HX_("t",74,00,00,00),t7)
            								->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            								->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN(1005)							this->tokenMin = this->oldTokenMin;
HXDLIN(1005)							this->tokenMax = this->oldTokenMax;
            						}
HXLINE(1006)						goto _hx_goto_58;
            					}
HXLINE(1008)					t7 = this->token();
HXLINE(1009)					if ((t7->_hx_getIndex() == 2)) {
HXLINE(1010)						::String id3 = t7->_hx_getString(0);
HXLINE(1011)						path1->push(id3);
            					}
            					else {
HXLINE(1013)						this->unexpected(t7);
            					}
            				}
            				_hx_goto_58:;
            			}
            			else {
HXLINE(1016)				this->readPos--;
            			}
HXLINE(1018)			::String ppath = HX_("",00,00,00,00);
HXLINE(1019)			if ((path1->length > 1)) {
HXLINE(1019)				int _g6 = 0;
HXDLIN(1019)				while((_g6 < path1->length)){
HXLINE(1019)					::String i3 = path1->__get(_g6);
HXDLIN(1019)					_g6 = (_g6 + 1);
HXLINE(1021)					ppath = (ppath + (i3 + HX_(".",2e,00,00,00)));
            				}
            			}
            			else {
HXLINE(1022)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1022)					ppath = path1->__get(0);
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g7 = _hx_e;
HXLINE(1022)						ppath = HX_("",00,00,00,00);
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
HXLINE(1023)			::Array< ::String > spath = ppath.split(HX_("",00,00,00,00));
HXLINE(1024)			spath[(spath->length - 1)] = ::StringTools_obj::replace(spath->__get((spath->length - 1)),HX_(".",2e,00,00,00),HX_("",00,00,00,00));
HXLINE(1025)			 ::hscriptBase::ExprDef e23 = ::hscriptBase::ExprDef_obj::EPackage(spath->join(HX_("",00,00,00,00)));
HXDLIN(1025)			 ::Dynamic pmin16 = null();
HXDLIN(1025)			 ::Dynamic pmax16 = null();
HXDLIN(1025)			if (::hx::IsNull( e23 )) {
HXLINE(1025)				return null();
            			}
            			else {
HXLINE(1025)				if (::hx::IsNull( pmin16 )) {
HXLINE(1025)					pmin16 = this->tokenMin;
            				}
HXDLIN(1025)				if (::hx::IsNull( pmax16 )) {
HXLINE(1025)					pmax16 = this->tokenMax;
            				}
HXDLIN(1025)				return  ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("e",65,00,00,00),e23)
            					->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            					->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax16)
            					->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin16)
            					->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            			}
HXLINE( 999)			goto _hx_goto_50;
            		}
            		if (  (_hx_switch_0==HX_("return",b0,a4,2d,09)) ){
HXLINE( 716)			 ::hscriptBase::Token tk7 = this->token();
HXLINE( 717)			{
HXLINE( 717)				this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("t",74,00,00,00),tk7)
            					->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            					->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 717)				this->tokenMin = this->oldTokenMin;
HXDLIN( 717)				this->tokenMax = this->oldTokenMax;
            			}
HXLINE( 718)			 ::Dynamic e24;
HXDLIN( 718)			if (::hx::IsPointerEq( tk7,::hscriptBase::Token_obj::TStatement_dyn() )) {
HXLINE( 718)				e24 = null();
            			}
            			else {
HXLINE( 718)				e24 = this->parseExpr();
            			}
HXLINE( 719)			 ::hscriptBase::ExprDef e25 = ::hscriptBase::ExprDef_obj::EReturn(e24);
HXDLIN( 719)			 ::Dynamic pmin17 = p1;
HXDLIN( 719)			 ::Dynamic pmax17;
HXDLIN( 719)			if (::hx::IsNull( e24 )) {
HXLINE( 719)				pmax17 = this->tokenMax;
            			}
            			else {
HXLINE( 719)				if (::hx::IsNull( e24 )) {
HXLINE( 719)					pmax17 = 0;
            				}
            				else {
HXLINE( 719)					pmax17 = e24->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            				}
            			}
HXDLIN( 719)			if (::hx::IsNull( e25 )) {
HXLINE( 719)				return null();
            			}
            			else {
HXLINE( 719)				if (::hx::IsNull( pmin17 )) {
HXLINE( 719)					pmin17 = this->tokenMin;
            				}
HXDLIN( 719)				if (::hx::IsNull( pmax17 )) {
HXLINE( 719)					pmax17 = this->tokenMax;
            				}
HXDLIN( 719)				return  ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("e",65,00,00,00),e25)
            					->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            					->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax17)
            					->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin17)
            					->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            			}
HXLINE( 715)			goto _hx_goto_50;
            		}
            		if (  (_hx_switch_0==HX_("switch",f4,49,79,c5)) ){
HXLINE( 776)			 ::Dynamic parentExpr = this->parseExpr();
HXLINE( 777)			 ::Dynamic def = null();
HXDLIN( 777)			::Array< ::Dynamic> cases = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 778)			{
HXLINE( 778)				 ::hscriptBase::Token t8 = this->token();
HXDLIN( 778)				if (::hx::IsPointerNotEq( t8,::hscriptBase::Token_obj::TBrOpen_dyn() )) {
HXLINE( 778)					this->unexpected(t8);
            				}
            			}
HXLINE( 779)			while(true){
HXLINE( 780)				 ::hscriptBase::Token tk8 = this->token();
HXLINE( 781)				switch((int)(tk8->_hx_getIndex())){
            					case (int)2: {
HXLINE( 842)						::String _hx_switch_2 = tk8->_hx_getString(0);
            						if (  (_hx_switch_2==HX_("case",b0,1e,ba,41)) ){
HXLINE( 783)							 ::Dynamic c2 =  ::Dynamic(::hx::Anon_obj::Create(3)
            								->setFixed(0,HX_("ifExpr",b2,37,4f,e4),null())
            								->setFixed(1,HX_("expr",35,fd,1d,43),null())
            								->setFixed(2,HX_("values",e2,03,b7,4f),::Array_obj< ::Dynamic>::__new(0)));
HXLINE( 784)							cases->push(c2);
HXLINE( 785)							while(true){
HXLINE( 786)								 ::Dynamic e26 = this->parseExpr();
HXLINE( 787)								{
HXLINE( 787)									 ::hscriptBase::ExprDef _g8;
HXDLIN( 787)									if (::hx::IsNull( e26 )) {
HXLINE( 787)										_g8 = null();
            									}
            									else {
HXLINE( 787)										_g8 = e26->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
            									}
HXDLIN( 787)									if ((_g8->_hx_getIndex() == 7)) {
HXLINE( 788)										if ((_g8->_hx_getString(0) == HX_("|",7c,00,00,00))) {
HXLINE( 788)											 ::Dynamic e110 = _g8->_hx_getObject(1);
HXDLIN( 788)											 ::Dynamic e27 = _g8->_hx_getObject(2);
HXLINE( 789)											 ::hscriptBase::ExprDef e28 = ::hscriptBase::ExprDef_obj::ESwitchBinop(parentExpr,e110,e27);
HXDLIN( 789)											 ::Dynamic pmin18 = null();
HXDLIN( 789)											 ::Dynamic pmax18 = null();
HXDLIN( 789)											if (::hx::IsNull( e28 )) {
HXLINE( 789)												e26 = null();
            											}
            											else {
HXLINE( 789)												if (::hx::IsNull( pmin18 )) {
HXLINE( 789)													pmin18 = this->tokenMin;
            												}
HXDLIN( 789)												if (::hx::IsNull( pmax18 )) {
HXLINE( 789)													pmax18 = this->tokenMax;
            												}
HXDLIN( 789)												e26 =  ::Dynamic(::hx::Anon_obj::Create(5)
            													->setFixed(0,HX_("e",65,00,00,00),e28)
            													->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            													->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax18)
            													->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin18)
            													->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            											}
            										}
            									}
            								}
HXLINE( 792)								( (::Array< ::Dynamic>)(c2->__Field(HX_("values",e2,03,b7,4f),::hx::paccDynamic)) )->push(e26);
HXLINE( 793)								tk8 = this->token();
HXLINE( 794)								switch((int)(tk8->_hx_getIndex())){
            									case (int)2: {
HXLINE( 799)										if ((tk8->_hx_getString(0) == HX_("if",dd,5b,00,00))) {
HXLINE( 800)											 ::Dynamic e29 = this->parseExpr();
HXLINE( 801)											c2->__SetField(HX_("ifExpr",b2,37,4f,e4),e29,::hx::paccDynamic);
HXLINE( 802)											{
HXLINE( 802)												tk8 = this->token();
HXDLIN( 802)												switch((int)(tk8->_hx_getIndex())){
            													case (int)9: {
            													}
            													break;
            													case (int)18: {
HXLINE( 804)														goto _hx_goto_62;
            													}
            													break;
            													default:{
HXLINE( 806)														this->unexpected(tk8);
HXLINE( 807)														goto _hx_goto_62;
            													}
            												}
            											}
            										}
            										else {
HXLINE( 810)											this->unexpected(tk8);
HXLINE( 811)											goto _hx_goto_62;
            										}
            									}
            									break;
            									case (int)9: {
            									}
            									break;
            									case (int)18: {
HXLINE( 798)										goto _hx_goto_62;
            									}
            									break;
            									default:{
HXLINE( 810)										this->unexpected(tk8);
HXLINE( 811)										goto _hx_goto_62;
            									}
            								}
            							}
            							_hx_goto_62:;
HXLINE( 814)							::Array< ::Dynamic> exprs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 815)							while(true){
HXLINE( 816)								tk8 = this->token();
HXLINE( 817)								{
HXLINE( 817)									this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            										->setFixed(0,HX_("t",74,00,00,00),tk8)
            										->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            										->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 817)									this->tokenMin = this->oldTokenMin;
HXDLIN( 817)									this->tokenMax = this->oldTokenMax;
            								}
HXLINE( 818)								switch((int)(tk8->_hx_getIndex())){
            									case (int)0: {
HXLINE( 821)										if (this->resumeErrors) {
HXLINE( 822)											goto _hx_goto_63;
            										}
            										else {
HXLINE( 824)											this->parseFullExpr(exprs);
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 819)										::String _hx_switch_3 = tk8->_hx_getString(0);
            										if (  (_hx_switch_3==HX_("case",b0,1e,ba,41)) ||  (_hx_switch_3==HX_("default",c1,d8,c3,9b)) ){
HXLINE( 820)											goto _hx_goto_63;
HXDLIN( 820)											goto _hx_goto_64;
            										}
            										/* default */{
HXLINE( 824)											this->parseFullExpr(exprs);
            										}
            										_hx_goto_64:;
            									}
            									break;
            									case (int)7: {
HXLINE( 820)										goto _hx_goto_63;
            									}
            									break;
            									default:{
HXLINE( 824)										this->parseFullExpr(exprs);
            									}
            								}
            							}
            							_hx_goto_63:;
HXLINE( 827)							 ::Dynamic _hx_tmp10;
HXDLIN( 827)							if ((exprs->length == 1)) {
HXLINE( 827)								_hx_tmp10 = exprs->__get(0);
            							}
            							else {
HXLINE( 829)								if ((exprs->length == 0)) {
HXLINE( 830)									 ::hscriptBase::ExprDef e30 = ::hscriptBase::ExprDef_obj::EBlock(::Array_obj< ::Dynamic>::__new(0));
HXDLIN( 830)									 ::Dynamic pmin19 = this->tokenMin;
HXDLIN( 830)									 ::Dynamic pmax19 = this->tokenMin;
HXDLIN( 830)									if (::hx::IsNull( e30 )) {
HXLINE( 827)										_hx_tmp10 = null();
            									}
            									else {
HXLINE( 830)										if (::hx::IsNull( pmin19 )) {
HXLINE( 830)											pmin19 = this->tokenMin;
            										}
HXDLIN( 830)										if (::hx::IsNull( pmax19 )) {
HXLINE( 830)											pmax19 = this->tokenMax;
            										}
HXLINE( 827)										_hx_tmp10 =  ::Dynamic(::hx::Anon_obj::Create(5)
            											->setFixed(0,HX_("e",65,00,00,00),e30)
            											->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            											->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax19)
            											->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin19)
            											->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            									}
            								}
            								else {
HXLINE( 832)									 ::hscriptBase::ExprDef e31 = ::hscriptBase::ExprDef_obj::EBlock(exprs);
HXDLIN( 832)									 ::Dynamic e32 = exprs->__get(0);
HXDLIN( 832)									 ::Dynamic pmin20;
HXDLIN( 832)									if (::hx::IsNull( e32 )) {
HXLINE( 832)										pmin20 = 0;
            									}
            									else {
HXLINE( 832)										pmin20 = e32->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            									}
HXDLIN( 832)									 ::Dynamic e33 = exprs->__get((exprs->length - 1));
HXDLIN( 832)									 ::Dynamic pmax20;
HXDLIN( 832)									if (::hx::IsNull( e33 )) {
HXLINE( 832)										pmax20 = 0;
            									}
            									else {
HXLINE( 832)										pmax20 = e33->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            									}
HXDLIN( 832)									if (::hx::IsNull( e31 )) {
HXLINE( 827)										_hx_tmp10 = null();
            									}
            									else {
HXLINE( 832)										if (::hx::IsNull( pmin20 )) {
HXLINE( 832)											pmin20 = this->tokenMin;
            										}
HXDLIN( 832)										if (::hx::IsNull( pmax20 )) {
HXLINE( 832)											pmax20 = this->tokenMax;
            										}
HXLINE( 827)										_hx_tmp10 =  ::Dynamic(::hx::Anon_obj::Create(5)
            											->setFixed(0,HX_("e",65,00,00,00),e31)
            											->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            											->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax20)
            											->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin20)
            											->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            									}
            								}
            							}
HXDLIN( 827)							c2->__SetField(HX_("expr",35,fd,1d,43),_hx_tmp10,::hx::paccDynamic);
HXLINE( 834)							{
HXLINE( 834)								int _g9 = 0;
HXDLIN( 834)								::Array< ::Dynamic> _g10 = ( (::Array< ::Dynamic>)(c2->__Field(HX_("values",e2,03,b7,4f),::hx::paccDynamic)) );
HXDLIN( 834)								while((_g9 < _g10->length)){
HXLINE( 834)									 ::Dynamic i4 = _g10->__get(_g9);
HXDLIN( 834)									_g9 = (_g9 + 1);
HXLINE( 836)									{
HXLINE( 836)										 ::hscriptBase::ExprDef _g11;
HXDLIN( 836)										if (::hx::IsNull( i4 )) {
HXLINE( 836)											_g11 = null();
            										}
            										else {
HXLINE( 836)											_g11 = i4->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
            										}
HXDLIN( 836)										if ((_g11->_hx_getIndex() == 1)) {
HXLINE( 837)											 ::Dynamic _g12 = _g11->_hx_getObject(1);
HXDLIN( 837)											if ((_g11->_hx_getString(0) == HX_("_",5f,00,00,00))) {
HXLINE( 838)												def = c2->__Field(HX_("expr",35,fd,1d,43),::hx::paccDynamic);
            											}
            										}
            									}
            								}
            							}
HXLINE( 782)							goto _hx_goto_61;
            						}
            						if (  (_hx_switch_2==HX_("default",c1,d8,c3,9b)) ){
HXLINE( 843)							if (::hx::IsNotNull( def )) {
HXLINE( 843)								this->unexpected(tk8);
            							}
HXLINE( 844)							{
HXLINE( 844)								 ::hscriptBase::Token t9 = this->token();
HXDLIN( 844)								if (::hx::IsPointerNotEq( t9,::hscriptBase::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 844)									this->unexpected(t9);
            								}
            							}
HXLINE( 845)							::Array< ::Dynamic> exprs1 = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 846)							while(true){
HXLINE( 847)								tk8 = this->token();
HXLINE( 848)								{
HXLINE( 848)									this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            										->setFixed(0,HX_("t",74,00,00,00),tk8)
            										->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            										->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 848)									this->tokenMin = this->oldTokenMin;
HXDLIN( 848)									this->tokenMax = this->oldTokenMax;
            								}
HXLINE( 849)								switch((int)(tk8->_hx_getIndex())){
            									case (int)0: {
HXLINE( 852)										if (this->resumeErrors) {
HXLINE( 853)											goto _hx_goto_66;
            										}
            										else {
HXLINE( 855)											this->parseFullExpr(exprs1);
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 850)										::String _hx_switch_4 = tk8->_hx_getString(0);
            										if (  (_hx_switch_4==HX_("case",b0,1e,ba,41)) ||  (_hx_switch_4==HX_("default",c1,d8,c3,9b)) ){
HXLINE( 851)											goto _hx_goto_66;
HXDLIN( 851)											goto _hx_goto_67;
            										}
            										/* default */{
HXLINE( 855)											this->parseFullExpr(exprs1);
            										}
            										_hx_goto_67:;
            									}
            									break;
            									case (int)7: {
HXLINE( 851)										goto _hx_goto_66;
            									}
            									break;
            									default:{
HXLINE( 855)										this->parseFullExpr(exprs1);
            									}
            								}
            							}
            							_hx_goto_66:;
HXLINE( 858)							if ((exprs1->length == 1)) {
HXLINE( 859)								def = exprs1->__get(0);
            							}
            							else {
HXLINE( 860)								if ((exprs1->length == 0)) {
HXLINE( 861)									 ::hscriptBase::ExprDef e34 = ::hscriptBase::ExprDef_obj::EBlock(::Array_obj< ::Dynamic>::__new(0));
HXDLIN( 861)									 ::Dynamic pmin21 = this->tokenMin;
HXDLIN( 861)									 ::Dynamic pmax21 = this->tokenMin;
HXDLIN( 861)									if (::hx::IsNull( e34 )) {
HXLINE( 861)										def = null();
            									}
            									else {
HXLINE( 861)										if (::hx::IsNull( pmin21 )) {
HXLINE( 861)											pmin21 = this->tokenMin;
            										}
HXDLIN( 861)										if (::hx::IsNull( pmax21 )) {
HXLINE( 861)											pmax21 = this->tokenMax;
            										}
HXDLIN( 861)										def =  ::Dynamic(::hx::Anon_obj::Create(5)
            											->setFixed(0,HX_("e",65,00,00,00),e34)
            											->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            											->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax21)
            											->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin21)
            											->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            									}
            								}
            								else {
HXLINE( 863)									 ::hscriptBase::ExprDef e35 = ::hscriptBase::ExprDef_obj::EBlock(exprs1);
HXDLIN( 863)									 ::Dynamic e36 = exprs1->__get(0);
HXDLIN( 863)									 ::Dynamic pmin22;
HXDLIN( 863)									if (::hx::IsNull( e36 )) {
HXLINE( 863)										pmin22 = 0;
            									}
            									else {
HXLINE( 863)										pmin22 = e36->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            									}
HXDLIN( 863)									 ::Dynamic e37 = exprs1->__get((exprs1->length - 1));
HXDLIN( 863)									 ::Dynamic pmax22;
HXDLIN( 863)									if (::hx::IsNull( e37 )) {
HXLINE( 863)										pmax22 = 0;
            									}
            									else {
HXLINE( 863)										pmax22 = e37->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            									}
HXDLIN( 863)									if (::hx::IsNull( e35 )) {
HXLINE( 863)										def = null();
            									}
            									else {
HXLINE( 863)										if (::hx::IsNull( pmin22 )) {
HXLINE( 863)											pmin22 = this->tokenMin;
            										}
HXDLIN( 863)										if (::hx::IsNull( pmax22 )) {
HXLINE( 863)											pmax22 = this->tokenMax;
            										}
HXDLIN( 863)										def =  ::Dynamic(::hx::Anon_obj::Create(5)
            											->setFixed(0,HX_("e",65,00,00,00),e35)
            											->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            											->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax22)
            											->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin22)
            											->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            									}
            								}
            							}
HXLINE( 842)							goto _hx_goto_61;
            						}
            						/* default */{
HXLINE( 867)							this->unexpected(tk8);
HXLINE( 868)							goto _hx_goto_60;
            						}
            						_hx_goto_61:;
            					}
            					break;
            					case (int)7: {
HXLINE( 865)						goto _hx_goto_60;
            					}
            					break;
            					default:{
HXLINE( 867)						this->unexpected(tk8);
HXLINE( 868)						goto _hx_goto_60;
            					}
            				}
            			}
            			_hx_goto_60:;
HXLINE( 871)			 ::hscriptBase::ExprDef e38 = ::hscriptBase::ExprDef_obj::ESwitch(parentExpr,cases,def);
HXDLIN( 871)			 ::Dynamic pmin23 = p1;
HXDLIN( 871)			 ::Dynamic pmax23 = this->tokenMax;
HXDLIN( 871)			if (::hx::IsNull( e38 )) {
HXLINE( 871)				return null();
            			}
            			else {
HXLINE( 871)				if (::hx::IsNull( pmin23 )) {
HXLINE( 871)					pmin23 = this->tokenMin;
            				}
HXDLIN( 871)				if (::hx::IsNull( pmax23 )) {
HXLINE( 871)					pmax23 = this->tokenMax;
            				}
HXDLIN( 871)				return  ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("e",65,00,00,00),e38)
            					->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            					->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax23)
            					->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin23)
            					->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            			}
HXLINE( 775)			goto _hx_goto_50;
            		}
            		if (  (_hx_switch_0==HX_("throw",26,5d,90,0f)) ){
HXLINE( 755)			 ::Dynamic e39 = this->parseExpr();
HXLINE( 756)			 ::hscriptBase::ExprDef e40 = ::hscriptBase::ExprDef_obj::EThrow(e39);
HXDLIN( 756)			 ::Dynamic pmin24 = p1;
HXDLIN( 756)			 ::Dynamic pmax24;
HXDLIN( 756)			if (::hx::IsNull( e39 )) {
HXLINE( 756)				pmax24 = 0;
            			}
            			else {
HXLINE( 756)				pmax24 = e39->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            			}
HXDLIN( 756)			if (::hx::IsNull( e40 )) {
HXLINE( 756)				return null();
            			}
            			else {
HXLINE( 756)				if (::hx::IsNull( pmin24 )) {
HXLINE( 756)					pmin24 = this->tokenMin;
            				}
HXDLIN( 756)				if (::hx::IsNull( pmax24 )) {
HXLINE( 756)					pmax24 = this->tokenMax;
            				}
HXDLIN( 756)				return  ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("e",65,00,00,00),e40)
            					->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            					->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax24)
            					->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin24)
            					->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            			}
HXLINE( 754)			goto _hx_goto_50;
            		}
            		if (  (_hx_switch_0==HX_("try",3b,69,58,00)) ){
HXLINE( 758)			 ::Dynamic e41 = this->parseExpr();
HXLINE( 759)			{
HXLINE( 759)				 ::hscriptBase::Token t10 = this->token();
HXDLIN( 759)				if (!(__hxcpp_enum_eq(t10,::hscriptBase::Token_obj::TId(HX_("catch",3b,7c,21,41))))) {
HXLINE( 759)					this->unexpected(t10);
            				}
            			}
HXLINE( 760)			{
HXLINE( 760)				 ::hscriptBase::Token t11 = this->token();
HXDLIN( 760)				if (::hx::IsPointerNotEq( t11,::hscriptBase::Token_obj::TPOpen_dyn() )) {
HXLINE( 760)					this->unexpected(t11);
            				}
            			}
HXLINE( 761)			::String cname = this->getIdent(null());
HXLINE( 762)			 ::hscriptBase::CType t12 = null();
HXLINE( 763)			bool canensure = true;
HXLINE( 764)			 ::hscriptBase::Token tk9 = this->token();
HXLINE( 765)			bool _hx_tmp11;
HXDLIN( 765)			if (::hx::IsPointerEq( tk9,::hscriptBase::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 765)				_hx_tmp11 = this->allowTypes;
            			}
            			else {
HXLINE( 765)				_hx_tmp11 = false;
            			}
HXDLIN( 765)			if (_hx_tmp11) {
HXLINE( 767)				t12 = this->parseType();
            			}
            			else {
HXLINE( 770)				canensure = false;
            			}
HXLINE( 772)			if (canensure) {
HXLINE( 772)				 ::hscriptBase::Token t13 = this->token();
HXDLIN( 772)				if (::hx::IsPointerNotEq( t13,::hscriptBase::Token_obj::TPClose_dyn() )) {
HXLINE( 772)					this->unexpected(t13);
            				}
            			}
HXLINE( 773)			 ::Dynamic ce = this->parseExpr();
HXLINE( 774)			 ::hscriptBase::ExprDef e42 = ::hscriptBase::ExprDef_obj::ETry(e41,cname,t12,ce);
HXDLIN( 774)			 ::Dynamic pmin25 = p1;
HXDLIN( 774)			 ::Dynamic pmax25;
HXDLIN( 774)			if (::hx::IsNull( ce )) {
HXLINE( 774)				pmax25 = 0;
            			}
            			else {
HXLINE( 774)				pmax25 = ce->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            			}
HXDLIN( 774)			if (::hx::IsNull( e42 )) {
HXLINE( 774)				return null();
            			}
            			else {
HXLINE( 774)				if (::hx::IsNull( pmin25 )) {
HXLINE( 774)					pmin25 = this->tokenMin;
            				}
HXDLIN( 774)				if (::hx::IsNull( pmax25 )) {
HXLINE( 774)					pmax25 = this->tokenMax;
            				}
HXDLIN( 774)				return  ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("e",65,00,00,00),e42)
            					->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            					->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax25)
            					->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin25)
            					->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            			}
HXLINE( 757)			goto _hx_goto_50;
            		}
            		if (  (_hx_switch_0==HX_("using",44,75,35,aa)) ){
HXLINE( 874)			::String path2 = this->getIdent(null());
HXLINE( 875)			bool _hx_tmp12;
HXDLIN( 875)			if (::hx::IsNotNull( path2 )) {
HXLINE( 875)				_hx_tmp12 = (path2.length < 1);
            			}
            			else {
HXLINE( 875)				_hx_tmp12 = true;
            			}
HXDLIN( 875)			if (_hx_tmp12) {
HXLINE( 876)				 ::hscriptBase::ErrorDef err3 = ::hscriptBase::ErrorDef_obj::EInvalidAccess(path2);
HXDLIN( 876)				 ::Dynamic pmin26 = null();
HXDLIN( 876)				 ::Dynamic pmax26 = null();
HXDLIN( 876)				 ::hscriptBase::Error e43 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err3,( (int)(pmin26) ),( (int)(pmax26) ),this->origin,this->line);
HXDLIN( 876)				if (!(this->resumeErrors)) {
HXLINE( 876)					HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err3,( (int)(pmin26) ),( (int)(pmax26) ),this->origin,this->line));
            				}
            			}
HXLINE( 878)			::hx::Class c3 = ::Type_obj::resolveClass(path2);
HXLINE( 879)			if (::hx::IsNull( c3 )) {
HXLINE( 880)				 ::hscriptBase::ErrorDef err4 = ::hscriptBase::ErrorDef_obj::ECustom((HX_("Invalid class ",11,a7,88,d2) + path2));
HXDLIN( 880)				 ::Dynamic pmin27 = null();
HXDLIN( 880)				 ::Dynamic pmax27 = null();
HXDLIN( 880)				 ::hscriptBase::Error e44 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err4,( (int)(pmin27) ),( (int)(pmax27) ),this->origin,this->line);
HXDLIN( 880)				if (!(this->resumeErrors)) {
HXLINE( 880)					HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err4,( (int)(pmin27) ),( (int)(pmax27) ),this->origin,this->line));
            				}
            			}
HXLINE( 882)			 ::hscriptBase::ExprDef e45 = ::hscriptBase::ExprDef_obj::EUsing(c3,path2);
HXDLIN( 882)			 ::Dynamic pmin28 = null();
HXDLIN( 882)			 ::Dynamic pmax28 = null();
HXDLIN( 882)			if (::hx::IsNull( e45 )) {
HXLINE( 882)				return null();
            			}
            			else {
HXLINE( 882)				if (::hx::IsNull( pmin28 )) {
HXLINE( 882)					pmin28 = this->tokenMin;
            				}
HXDLIN( 882)				if (::hx::IsNull( pmax28 )) {
HXLINE( 882)					pmax28 = this->tokenMax;
            				}
HXDLIN( 882)				return  ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("e",65,00,00,00),e45)
            					->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            					->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax28)
            					->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin28)
            					->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            			}
HXLINE( 873)			goto _hx_goto_50;
            		}
            		if (  (_hx_switch_0==HX_("var",e7,de,59,00)) ){
HXLINE( 580)			 ::hscriptBase::Token tk10 = this->token();
HXLINE( 581)			::String ident1;
HXDLIN( 581)			switch((int)(tk10->_hx_getIndex())){
            				case (int)1: {
HXLINE( 589)					 ::hscriptBase::Const c4 = tk10->_hx_getObject(0).StaticCast<  ::hscriptBase::Const >();
HXLINE( 590)					switch((int)(c4->_hx_getIndex())){
            						case (int)0: {
HXLINE( 591)							int _g13 = c4->_hx_getInt(0);
HXLINE( 592)							{
HXLINE( 592)								 ::hscriptBase::ErrorDef err5 = ::hscriptBase::ErrorDef_obj::ECustom(HX_("Missing variable identifier",f3,11,e6,e4));
HXDLIN( 592)								 ::Dynamic pmin29 = this->tokenMin;
HXDLIN( 592)								 ::Dynamic pmax29 = this->tokenMax;
HXDLIN( 592)								 ::hscriptBase::Error e46 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err5,( (int)(pmin29) ),( (int)(pmax29) ),this->origin,this->line);
HXDLIN( 592)								if (!(this->resumeErrors)) {
HXLINE( 592)									HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err5,( (int)(pmin29) ),( (int)(pmax29) ),this->origin,this->line));
            								}
            							}
HXLINE( 581)							ident1 = null();
            						}
            						break;
            						case (int)1: {
HXLINE( 591)							Float _g14 = c4->_hx_getFloat(0);
HXLINE( 592)							{
HXLINE( 592)								 ::hscriptBase::ErrorDef err6 = ::hscriptBase::ErrorDef_obj::ECustom(HX_("Missing variable identifier",f3,11,e6,e4));
HXDLIN( 592)								 ::Dynamic pmin30 = this->tokenMin;
HXDLIN( 592)								 ::Dynamic pmax30 = this->tokenMax;
HXDLIN( 592)								 ::hscriptBase::Error e47 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err6,( (int)(pmin30) ),( (int)(pmax30) ),this->origin,this->line);
HXDLIN( 592)								if (!(this->resumeErrors)) {
HXLINE( 592)									HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err6,( (int)(pmin30) ),( (int)(pmax30) ),this->origin,this->line));
            								}
            							}
HXLINE( 581)							ident1 = null();
            						}
            						break;
            						default:{
HXLINE( 581)							ident1 = null();
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 582)					::String s3 = tk10->_hx_getString(0);
HXLINE( 583)					if (::hscriptBase::Parser_obj::notAllowedFieldNames->contains(s3)) {
HXLINE( 585)						{
HXLINE( 585)							 ::hscriptBase::ErrorDef err7 = ::hscriptBase::ErrorDef_obj::ECustom(((HX_("Keyword ",37,81,52,59) + s3) + HX_(" cannot be used as variable name",c4,06,6c,2e)));
HXDLIN( 585)							 ::Dynamic pmin31 = this->tokenMin;
HXDLIN( 585)							 ::Dynamic pmax31 = this->tokenMax;
HXDLIN( 585)							 ::hscriptBase::Error e48 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err7,( (int)(pmin31) ),( (int)(pmax31) ),this->origin,this->line);
HXDLIN( 585)							if (!(this->resumeErrors)) {
HXLINE( 585)								HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err7,( (int)(pmin31) ),( (int)(pmax31) ),this->origin,this->line));
            							}
            						}
HXLINE( 581)						ident1 = null();
            					}
            					else {
HXLINE( 581)						ident1 = s3;
            					}
            				}
            				break;
            				default:{
HXLINE( 597)					this->unexpected(tk10);
HXLINE( 581)					ident1 = null();
            				}
            			}
HXLINE( 600)			 ::hscriptBase::Token tk11 = this->token();
HXLINE( 601)			 ::hscriptBase::CType tp1 = null();
HXLINE( 602)			bool _hx_tmp13;
HXDLIN( 602)			if (::hx::IsPointerEq( tk11,::hscriptBase::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 602)				_hx_tmp13 = this->allowTypes;
            			}
            			else {
HXLINE( 602)				_hx_tmp13 = false;
            			}
HXDLIN( 602)			if (_hx_tmp13) {
HXLINE( 603)				tp1 = this->parseType();
HXLINE( 604)				tk11 = this->token();
            			}
HXLINE( 606)			 ::Dynamic e49 = null();
HXLINE( 607)			switch((int)(tk11->_hx_getIndex())){
            				case (int)3: {
HXLINE( 609)					if ((tk11->_hx_getString(0) == HX_("=",3d,00,00,00))) {
HXLINE( 609)						e49 = this->parseExpr();
            					}
            					else {
HXLINE( 625)						this->unexpected(tk11);
            					}
            				}
            				break;
            				case (int)9: case (int)10: {
HXLINE( 610)					{
HXLINE( 610)						this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            							->setFixed(0,HX_("t",74,00,00,00),tk11)
            							->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            							->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN( 610)						this->tokenMin = this->oldTokenMin;
HXDLIN( 610)						this->tokenMax = this->oldTokenMax;
            					}
HXLINE( 612)					if (::hx::IsNotNull( tp1 )) {
HXLINE( 612)						if (::hx::IsNotNull( tp1 )) {
HXLINE( 612)							if ((tp1->_hx_getIndex() == 0)) {
HXLINE( 613)								::Array< ::String > p2 = tp1->_hx_getObject(0).StaticCast< ::Array< ::String > >();
HXDLIN( 613)								::Array< ::Dynamic> pr1 = tp1->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 614)								::String _hx_switch_5 = p2->__get(0);
            								if (  (_hx_switch_5==HX_("Bool",4a,b0,f4,2b)) ){
HXLINE( 618)									 ::hscriptBase::ExprDef e50 = ::hscriptBase::ExprDef_obj::EIdent(HX_("false",a3,35,4f,fb),false);
HXDLIN( 618)									 ::Dynamic pmin32 = null();
HXDLIN( 618)									 ::Dynamic pmax32 = null();
HXDLIN( 618)									if (::hx::IsNull( e50 )) {
HXLINE( 618)										e49 = null();
            									}
            									else {
HXLINE( 618)										if (::hx::IsNull( pmin32 )) {
HXLINE( 618)											pmin32 = this->tokenMin;
            										}
HXDLIN( 618)										if (::hx::IsNull( pmax32 )) {
HXLINE( 618)											pmax32 = this->tokenMax;
            										}
HXDLIN( 618)										e49 =  ::Dynamic(::hx::Anon_obj::Create(5)
            											->setFixed(0,HX_("e",65,00,00,00),e50)
            											->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            											->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax32)
            											->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin32)
            											->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            									}
HXDLIN( 618)									goto _hx_goto_68;
            								}
            								if (  (_hx_switch_5==HX_("Float",7c,35,c4,95)) ){
HXLINE( 620)									 ::hscriptBase::ExprDef e51 = ::hscriptBase::ExprDef_obj::EConst(::hscriptBase::Const_obj::CFloat(((Float)0.0)));
HXDLIN( 620)									 ::Dynamic pmin33 = null();
HXDLIN( 620)									 ::Dynamic pmax33 = null();
HXDLIN( 620)									if (::hx::IsNull( e51 )) {
HXLINE( 620)										e49 = null();
            									}
            									else {
HXLINE( 620)										if (::hx::IsNull( pmin33 )) {
HXLINE( 620)											pmin33 = this->tokenMin;
            										}
HXDLIN( 620)										if (::hx::IsNull( pmax33 )) {
HXLINE( 620)											pmax33 = this->tokenMax;
            										}
HXDLIN( 620)										e49 =  ::Dynamic(::hx::Anon_obj::Create(5)
            											->setFixed(0,HX_("e",65,00,00,00),e51)
            											->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            											->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax33)
            											->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin33)
            											->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            									}
HXDLIN( 620)									goto _hx_goto_68;
            								}
            								if (  (_hx_switch_5==HX_("Int",cf,c4,37,00)) ){
HXLINE( 616)									 ::hscriptBase::ExprDef e52 = ::hscriptBase::ExprDef_obj::EConst(::hscriptBase::Const_obj::CInt(0));
HXDLIN( 616)									 ::Dynamic pmin34 = null();
HXDLIN( 616)									 ::Dynamic pmax34 = null();
HXDLIN( 616)									if (::hx::IsNull( e52 )) {
HXLINE( 616)										e49 = null();
            									}
            									else {
HXLINE( 616)										if (::hx::IsNull( pmin34 )) {
HXLINE( 616)											pmin34 = this->tokenMin;
            										}
HXDLIN( 616)										if (::hx::IsNull( pmax34 )) {
HXLINE( 616)											pmax34 = this->tokenMax;
            										}
HXDLIN( 616)										e49 =  ::Dynamic(::hx::Anon_obj::Create(5)
            											->setFixed(0,HX_("e",65,00,00,00),e52)
            											->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            											->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax34)
            											->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin34)
            											->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            									}
HXDLIN( 616)									goto _hx_goto_68;
            								}
            								_hx_goto_68:;
            							}
            						}
            					}
            				}
            				break;
            				default:{
HXLINE( 625)					this->unexpected(tk11);
            				}
            			}
HXLINE( 627)			 ::hscriptBase::ExprDef e53 = ::hscriptBase::ExprDef_obj::EVar(ident1,tp1,e49,null());
HXDLIN( 627)			 ::Dynamic pmin35 = p1;
HXDLIN( 627)			 ::Dynamic pmax35;
HXDLIN( 627)			if (::hx::IsNull( e49 )) {
HXLINE( 627)				pmax35 = this->tokenMax;
            			}
            			else {
HXLINE( 627)				if (::hx::IsNull( e49 )) {
HXLINE( 627)					pmax35 = 0;
            				}
            				else {
HXLINE( 627)					pmax35 = e49->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            				}
            			}
HXDLIN( 627)			if (::hx::IsNull( e53 )) {
HXLINE( 627)				return null();
            			}
            			else {
HXLINE( 627)				if (::hx::IsNull( pmin35 )) {
HXLINE( 627)					pmin35 = this->tokenMin;
            				}
HXDLIN( 627)				if (::hx::IsNull( pmax35 )) {
HXLINE( 627)					pmax35 = this->tokenMax;
            				}
HXDLIN( 627)				return  ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("e",65,00,00,00),e53)
            					->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            					->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax35)
            					->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin35)
            					->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            			}
HXLINE( 579)			goto _hx_goto_50;
            		}
            		if (  (_hx_switch_0==HX_("while",b1,43,bd,c9)) ){
HXLINE( 678)			 ::Dynamic econd1 = this->parseExpr();
HXLINE( 679)			 ::Dynamic e54 = this->parseExpr();
HXLINE( 680)			 ::hscriptBase::ExprDef e55 = ::hscriptBase::ExprDef_obj::EWhile(econd1,e54);
HXDLIN( 680)			 ::Dynamic pmin36 = p1;
HXDLIN( 680)			 ::Dynamic pmax36;
HXDLIN( 680)			if (::hx::IsNull( e54 )) {
HXLINE( 680)				pmax36 = 0;
            			}
            			else {
HXLINE( 680)				pmax36 = e54->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            			}
HXDLIN( 680)			if (::hx::IsNull( e55 )) {
HXLINE( 680)				return null();
            			}
            			else {
HXLINE( 680)				if (::hx::IsNull( pmin36 )) {
HXLINE( 680)					pmin36 = this->tokenMin;
            				}
HXDLIN( 680)				if (::hx::IsNull( pmax36 )) {
HXLINE( 680)					pmax36 = this->tokenMax;
            				}
HXDLIN( 680)				return  ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("e",65,00,00,00),e55)
            					->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            					->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax36)
            					->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin36)
            					->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            			}
HXLINE( 677)			goto _hx_goto_50;
            		}
            		/* default */{
HXLINE(1027)			return null();
            		}
            		_hx_goto_50:;
HXLINE( 559)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,parseStructure,return )

 ::Dynamic Parser_obj::parseExprNext( ::Dynamic e1){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_1031_parseExprNext)
HXLINE(1032)		 ::hscriptBase::Token tk = this->token();
HXLINE(1033)		switch((int)(tk->_hx_getIndex())){
            			case (int)3: {
HXLINE(1034)				::String op = tk->_hx_getString(0);
HXLINE(1035)				if ((op == HX_("->",71,27,00,00))) {
HXLINE(1037)					{
HXLINE(1037)						 ::hscriptBase::ExprDef _g = e1->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
HXDLIN(1037)						switch((int)(_g->_hx_getIndex())){
            							case (int)1: {
HXLINE(1038)								 ::Dynamic _g1 = _g->_hx_getObject(1);
HXDLIN(1038)								::String i = _g->_hx_getString(0);
HXLINE(1039)								 ::Dynamic eret = this->parseExpr();
HXLINE(1040)								 ::hscriptBase::ExprDef e = ::hscriptBase::ExprDef_obj::EReturn(eret);
HXDLIN(1040)								 ::Dynamic pmin;
HXDLIN(1040)								if (::hx::IsNull( eret )) {
HXLINE(1040)									pmin = 0;
            								}
            								else {
HXLINE(1040)									pmin = eret->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            								}
HXDLIN(1040)								 ::Dynamic pmax = null();
HXDLIN(1040)								 ::Dynamic e2;
HXDLIN(1040)								if (::hx::IsNull( e )) {
HXLINE(1040)									e2 = null();
            								}
            								else {
HXLINE(1040)									if (::hx::IsNull( pmin )) {
HXLINE(1040)										pmin = this->tokenMin;
            									}
HXDLIN(1040)									if (::hx::IsNull( pmax )) {
HXLINE(1040)										pmax = this->tokenMax;
            									}
HXDLIN(1040)									e2 =  ::Dynamic(::hx::Anon_obj::Create(5)
            										->setFixed(0,HX_("e",65,00,00,00),e)
            										->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            										->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax)
            										->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin)
            										->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            								}
HXDLIN(1040)								 ::hscriptBase::ExprDef e3 = ::hscriptBase::ExprDef_obj::EFunction(::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(1)
            									->setFixed(0,HX_("name",4b,72,ff,48),i))),e2,null(),null(),null());
HXDLIN(1040)								 ::Dynamic pmin1;
HXDLIN(1040)								if (::hx::IsNull( e1 )) {
HXLINE(1040)									pmin1 = 0;
            								}
            								else {
HXLINE(1040)									pmin1 = e1->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            								}
HXDLIN(1040)								 ::Dynamic pmax1 = null();
HXDLIN(1040)								if (::hx::IsNull( e3 )) {
HXLINE(1040)									return null();
            								}
            								else {
HXLINE(1040)									if (::hx::IsNull( pmin1 )) {
HXLINE(1040)										pmin1 = this->tokenMin;
            									}
HXDLIN(1040)									if (::hx::IsNull( pmax1 )) {
HXLINE(1040)										pmax1 = this->tokenMax;
            									}
HXDLIN(1040)									return  ::Dynamic(::hx::Anon_obj::Create(5)
            										->setFixed(0,HX_("e",65,00,00,00),e3)
            										->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            										->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax1)
            										->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin1)
            										->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1038)								 ::hscriptBase::ExprDef _hx_tmp = _g->_hx_getObject(0)->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
HXDLIN(1038)								if ((_hx_tmp->_hx_getIndex() == 1)) {
HXLINE(1038)									 ::Dynamic _g2 = _hx_tmp->_hx_getObject(1);
HXDLIN(1038)									::String i1 = _hx_tmp->_hx_getString(0);
HXLINE(1039)									 ::Dynamic eret1 = this->parseExpr();
HXLINE(1040)									 ::hscriptBase::ExprDef e4 = ::hscriptBase::ExprDef_obj::EReturn(eret1);
HXDLIN(1040)									 ::Dynamic pmin2;
HXDLIN(1040)									if (::hx::IsNull( eret1 )) {
HXLINE(1040)										pmin2 = 0;
            									}
            									else {
HXLINE(1040)										pmin2 = eret1->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            									}
HXDLIN(1040)									 ::Dynamic pmax2 = null();
HXDLIN(1040)									 ::Dynamic e5;
HXDLIN(1040)									if (::hx::IsNull( e4 )) {
HXLINE(1040)										e5 = null();
            									}
            									else {
HXLINE(1040)										if (::hx::IsNull( pmin2 )) {
HXLINE(1040)											pmin2 = this->tokenMin;
            										}
HXDLIN(1040)										if (::hx::IsNull( pmax2 )) {
HXLINE(1040)											pmax2 = this->tokenMax;
            										}
HXDLIN(1040)										e5 =  ::Dynamic(::hx::Anon_obj::Create(5)
            											->setFixed(0,HX_("e",65,00,00,00),e4)
            											->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            											->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax2)
            											->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin2)
            											->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            									}
HXDLIN(1040)									 ::hscriptBase::ExprDef e6 = ::hscriptBase::ExprDef_obj::EFunction(::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(1)
            										->setFixed(0,HX_("name",4b,72,ff,48),i1))),e5,null(),null(),null());
HXDLIN(1040)									 ::Dynamic pmin3;
HXDLIN(1040)									if (::hx::IsNull( e1 )) {
HXLINE(1040)										pmin3 = 0;
            									}
            									else {
HXLINE(1040)										pmin3 = e1->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            									}
HXDLIN(1040)									 ::Dynamic pmax3 = null();
HXDLIN(1040)									if (::hx::IsNull( e6 )) {
HXLINE(1040)										return null();
            									}
            									else {
HXLINE(1040)										if (::hx::IsNull( pmin3 )) {
HXLINE(1040)											pmin3 = this->tokenMin;
            										}
HXDLIN(1040)										if (::hx::IsNull( pmax3 )) {
HXLINE(1040)											pmax3 = this->tokenMax;
            										}
HXDLIN(1040)										return  ::Dynamic(::hx::Anon_obj::Create(5)
            											->setFixed(0,HX_("e",65,00,00,00),e6)
            											->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            											->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax3)
            											->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin3)
            											->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            									}
            								}
            							}
            							break;
            							case (int)34: {
HXLINE(1041)								 ::hscriptBase::ExprDef _hx_tmp1 = _g->_hx_getObject(0)->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
HXDLIN(1041)								if ((_hx_tmp1->_hx_getIndex() == 1)) {
HXLINE(1041)									 ::Dynamic _g3 = _hx_tmp1->_hx_getObject(1);
HXDLIN(1041)									::String i2 = _hx_tmp1->_hx_getString(0);
HXDLIN(1041)									 ::hscriptBase::CType t = _g->_hx_getObject(1).StaticCast<  ::hscriptBase::CType >();
HXLINE(1042)									 ::Dynamic eret2 = this->parseExpr();
HXLINE(1043)									 ::hscriptBase::ExprDef e7 = ::hscriptBase::ExprDef_obj::EReturn(eret2);
HXDLIN(1043)									 ::Dynamic pmin4;
HXDLIN(1043)									if (::hx::IsNull( eret2 )) {
HXLINE(1043)										pmin4 = 0;
            									}
            									else {
HXLINE(1043)										pmin4 = eret2->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            									}
HXDLIN(1043)									 ::Dynamic pmax4 = null();
HXDLIN(1043)									 ::Dynamic e8;
HXDLIN(1043)									if (::hx::IsNull( e7 )) {
HXLINE(1043)										e8 = null();
            									}
            									else {
HXLINE(1043)										if (::hx::IsNull( pmin4 )) {
HXLINE(1043)											pmin4 = this->tokenMin;
            										}
HXDLIN(1043)										if (::hx::IsNull( pmax4 )) {
HXLINE(1043)											pmax4 = this->tokenMax;
            										}
HXDLIN(1043)										e8 =  ::Dynamic(::hx::Anon_obj::Create(5)
            											->setFixed(0,HX_("e",65,00,00,00),e7)
            											->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            											->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax4)
            											->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin4)
            											->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            									}
HXDLIN(1043)									 ::hscriptBase::ExprDef e9 = ::hscriptBase::ExprDef_obj::EFunction(::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            										->setFixed(0,HX_("t",74,00,00,00),t)
            										->setFixed(1,HX_("name",4b,72,ff,48),i2))),e8,null(),null(),null());
HXDLIN(1043)									 ::Dynamic pmin5;
HXDLIN(1043)									if (::hx::IsNull( e1 )) {
HXLINE(1043)										pmin5 = 0;
            									}
            									else {
HXLINE(1043)										pmin5 = e1->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            									}
HXDLIN(1043)									 ::Dynamic pmax5 = null();
HXDLIN(1043)									if (::hx::IsNull( e9 )) {
HXLINE(1043)										return null();
            									}
            									else {
HXLINE(1043)										if (::hx::IsNull( pmin5 )) {
HXLINE(1043)											pmin5 = this->tokenMin;
            										}
HXDLIN(1043)										if (::hx::IsNull( pmax5 )) {
HXLINE(1043)											pmax5 = this->tokenMax;
            										}
HXDLIN(1043)										return  ::Dynamic(::hx::Anon_obj::Create(5)
            											->setFixed(0,HX_("e",65,00,00,00),e9)
            											->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            											->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax5)
            											->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin5)
            											->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            									}
            								}
            							}
            							break;
            							default:{
            							}
            						}
            					}
HXLINE(1046)					this->unexpected(tk);
            				}
HXLINE(1049)				if (::hx::IsEq( this->opPriority->get(op),-1 )) {
HXLINE(1050)					bool _hx_tmp2;
HXDLIN(1050)					if (!(this->isBlock(e1))) {
HXLINE(1050)						 ::hscriptBase::ExprDef _g4 = e1->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
HXDLIN(1050)						if ((_g4->_hx_getIndex() == 4)) {
HXLINE(1050)							 ::Dynamic _g5 = _g4->_hx_getObject(0);
HXDLIN(1050)							_hx_tmp2 = true;
            						}
            						else {
HXLINE(1050)							_hx_tmp2 = false;
            						}
            					}
            					else {
HXLINE(1050)						_hx_tmp2 = true;
            					}
HXDLIN(1050)					if (_hx_tmp2) {
HXLINE(1051)						{
HXLINE(1051)							this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            								->setFixed(0,HX_("t",74,00,00,00),tk)
            								->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            								->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN(1051)							this->tokenMin = this->oldTokenMin;
HXDLIN(1051)							this->tokenMax = this->oldTokenMax;
            						}
HXLINE(1052)						return e1;
            					}
HXLINE(1054)					 ::hscriptBase::ExprDef e10 = ::hscriptBase::ExprDef_obj::EUnop(op,false,e1);
HXDLIN(1054)					 ::Dynamic pmin6;
HXDLIN(1054)					if (::hx::IsNull( e1 )) {
HXLINE(1054)						pmin6 = 0;
            					}
            					else {
HXLINE(1054)						pmin6 = e1->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            					}
HXDLIN(1054)					 ::Dynamic pmax6 = null();
HXDLIN(1054)					 ::Dynamic _hx_tmp3;
HXDLIN(1054)					if (::hx::IsNull( e10 )) {
HXLINE(1054)						_hx_tmp3 = null();
            					}
            					else {
HXLINE(1054)						if (::hx::IsNull( pmin6 )) {
HXLINE(1054)							pmin6 = this->tokenMin;
            						}
HXDLIN(1054)						if (::hx::IsNull( pmax6 )) {
HXLINE(1054)							pmax6 = this->tokenMax;
            						}
HXDLIN(1054)						_hx_tmp3 =  ::Dynamic(::hx::Anon_obj::Create(5)
            							->setFixed(0,HX_("e",65,00,00,00),e10)
            							->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            							->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax6)
            							->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin6)
            							->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            					}
HXDLIN(1054)					return this->parseExprNext(_hx_tmp3);
            				}
HXLINE(1056)				return this->makeBinop(op,e1,this->parseExpr());
            			}
            			break;
            			case (int)4: {
HXLINE(1061)				 ::hscriptBase::ExprDef e11 = ::hscriptBase::ExprDef_obj::ECall(e1,this->parseExprList(::hscriptBase::Token_obj::TPClose_dyn()));
HXDLIN(1061)				 ::Dynamic pmin7;
HXDLIN(1061)				if (::hx::IsNull( e1 )) {
HXLINE(1061)					pmin7 = 0;
            				}
            				else {
HXLINE(1061)					pmin7 = e1->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            				}
HXDLIN(1061)				 ::Dynamic pmax7 = null();
HXDLIN(1061)				 ::Dynamic _hx_tmp4;
HXDLIN(1061)				if (::hx::IsNull( e11 )) {
HXLINE(1061)					_hx_tmp4 = null();
            				}
            				else {
HXLINE(1061)					if (::hx::IsNull( pmin7 )) {
HXLINE(1061)						pmin7 = this->tokenMin;
            					}
HXDLIN(1061)					if (::hx::IsNull( pmax7 )) {
HXLINE(1061)						pmax7 = this->tokenMax;
            					}
HXDLIN(1061)					_hx_tmp4 =  ::Dynamic(::hx::Anon_obj::Create(5)
            						->setFixed(0,HX_("e",65,00,00,00),e11)
            						->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            						->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax7)
            						->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin7)
            						->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            				}
HXDLIN(1061)				return this->parseExprNext(_hx_tmp4);
            			}
            			break;
            			case (int)8: {
HXLINE(1058)				::String field = this->getIdent(null());
HXLINE(1059)				 ::hscriptBase::ExprDef e12 = ::hscriptBase::ExprDef_obj::EField(e1,field);
HXDLIN(1059)				 ::Dynamic pmin8;
HXDLIN(1059)				if (::hx::IsNull( e1 )) {
HXLINE(1059)					pmin8 = 0;
            				}
            				else {
HXLINE(1059)					pmin8 = e1->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            				}
HXDLIN(1059)				 ::Dynamic pmax8 = null();
HXDLIN(1059)				 ::Dynamic _hx_tmp5;
HXDLIN(1059)				if (::hx::IsNull( e12 )) {
HXLINE(1059)					_hx_tmp5 = null();
            				}
            				else {
HXLINE(1059)					if (::hx::IsNull( pmin8 )) {
HXLINE(1059)						pmin8 = this->tokenMin;
            					}
HXDLIN(1059)					if (::hx::IsNull( pmax8 )) {
HXLINE(1059)						pmax8 = this->tokenMax;
            					}
HXDLIN(1059)					_hx_tmp5 =  ::Dynamic(::hx::Anon_obj::Create(5)
            						->setFixed(0,HX_("e",65,00,00,00),e12)
            						->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            						->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax8)
            						->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin8)
            						->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            				}
HXDLIN(1059)				return this->parseExprNext(_hx_tmp5);
            			}
            			break;
            			case (int)12: {
HXLINE(1063)				 ::Dynamic e21 = this->parseExpr();
HXLINE(1064)				{
HXLINE(1064)					 ::hscriptBase::Token t1 = this->token();
HXDLIN(1064)					if (::hx::IsPointerNotEq( t1,::hscriptBase::Token_obj::TBkClose_dyn() )) {
HXLINE(1064)						this->unexpected(t1);
            					}
            				}
HXLINE(1065)				 ::hscriptBase::ExprDef e13 = ::hscriptBase::ExprDef_obj::EArray(e1,e21);
HXDLIN(1065)				 ::Dynamic pmin9;
HXDLIN(1065)				if (::hx::IsNull( e1 )) {
HXLINE(1065)					pmin9 = 0;
            				}
            				else {
HXLINE(1065)					pmin9 = e1->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            				}
HXDLIN(1065)				 ::Dynamic pmax9 = null();
HXDLIN(1065)				 ::Dynamic _hx_tmp6;
HXDLIN(1065)				if (::hx::IsNull( e13 )) {
HXLINE(1065)					_hx_tmp6 = null();
            				}
            				else {
HXLINE(1065)					if (::hx::IsNull( pmin9 )) {
HXLINE(1065)						pmin9 = this->tokenMin;
            					}
HXDLIN(1065)					if (::hx::IsNull( pmax9 )) {
HXLINE(1065)						pmax9 = this->tokenMax;
            					}
HXDLIN(1065)					_hx_tmp6 =  ::Dynamic(::hx::Anon_obj::Create(5)
            						->setFixed(0,HX_("e",65,00,00,00),e13)
            						->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            						->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax9)
            						->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin9)
            						->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            				}
HXDLIN(1065)				return this->parseExprNext(_hx_tmp6);
            			}
            			break;
            			case (int)14: {
HXLINE(1078)				int oldPos_ = this->readPos;
HXLINE(1079)				 ::hscriptBase::Token tk1 = this->token();
HXLINE(1080)				if ((tk1->_hx_getIndex() == 2)) {
HXLINE(1081)					::String s = tk1->_hx_getString(0);
HXLINE(1083)					 ::hscriptBase::ExprDef e14 = ::hscriptBase::ExprDef_obj::ESafeNavigator(e1,s);
HXDLIN(1083)					 ::Dynamic pmin10;
HXDLIN(1083)					if (::hx::IsNull( e1 )) {
HXLINE(1083)						pmin10 = 0;
            					}
            					else {
HXLINE(1083)						pmin10 = e1->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            					}
HXDLIN(1083)					 ::Dynamic pmax10 = null();
HXDLIN(1083)					if (::hx::IsNull( e14 )) {
HXLINE(1083)						return null();
            					}
            					else {
HXLINE(1083)						if (::hx::IsNull( pmin10 )) {
HXLINE(1083)							pmin10 = this->tokenMin;
            						}
HXDLIN(1083)						if (::hx::IsNull( pmax10 )) {
HXLINE(1083)							pmax10 = this->tokenMax;
            						}
HXDLIN(1083)						return  ::Dynamic(::hx::Anon_obj::Create(5)
            							->setFixed(0,HX_("e",65,00,00,00),e14)
            							->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            							->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax10)
            							->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin10)
            							->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            					}
            				}
HXLINE(1087)				this->unexpected(tk1);
HXLINE(1088)				return null();
            			}
            			break;
            			case (int)15: {
HXLINE(1072)				 ::Dynamic e22 = this->parseExpr();
HXLINE(1073)				 ::hscriptBase::ExprDef e15 = ::hscriptBase::ExprDef_obj::ECoalesce(e1,e22,false);
HXDLIN(1073)				 ::Dynamic pmin11;
HXDLIN(1073)				if (::hx::IsNull( e1 )) {
HXLINE(1073)					pmin11 = 0;
            				}
            				else {
HXLINE(1073)					pmin11 = e1->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            				}
HXDLIN(1073)				 ::Dynamic pmax11 = null();
HXDLIN(1073)				if (::hx::IsNull( e15 )) {
HXLINE(1073)					return null();
            				}
            				else {
HXLINE(1073)					if (::hx::IsNull( pmin11 )) {
HXLINE(1073)						pmin11 = this->tokenMin;
            					}
HXDLIN(1073)					if (::hx::IsNull( pmax11 )) {
HXLINE(1073)						pmax11 = this->tokenMax;
            					}
HXDLIN(1073)					return  ::Dynamic(::hx::Anon_obj::Create(5)
            						->setFixed(0,HX_("e",65,00,00,00),e15)
            						->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            						->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax11)
            						->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin11)
            						->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            				}
            			}
            			break;
            			case (int)16: {
HXLINE(1075)				 ::Dynamic e23 = this->parseExpr();
HXLINE(1076)				 ::hscriptBase::ExprDef e16 = ::hscriptBase::ExprDef_obj::ECoalesce(e1,e23,true);
HXDLIN(1076)				 ::Dynamic pmin12;
HXDLIN(1076)				if (::hx::IsNull( e1 )) {
HXLINE(1076)					pmin12 = 0;
            				}
            				else {
HXLINE(1076)					pmin12 = e1->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            				}
HXDLIN(1076)				 ::Dynamic pmax12 = null();
HXDLIN(1076)				if (::hx::IsNull( e16 )) {
HXLINE(1076)					return null();
            				}
            				else {
HXLINE(1076)					if (::hx::IsNull( pmin12 )) {
HXLINE(1076)						pmin12 = this->tokenMin;
            					}
HXDLIN(1076)					if (::hx::IsNull( pmax12 )) {
HXLINE(1076)						pmax12 = this->tokenMax;
            					}
HXDLIN(1076)					return  ::Dynamic(::hx::Anon_obj::Create(5)
            						->setFixed(0,HX_("e",65,00,00,00),e16)
            						->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            						->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax12)
            						->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin12)
            						->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            				}
            			}
            			break;
            			case (int)17: {
HXLINE(1067)				 ::Dynamic e24 = this->parseExpr();
HXLINE(1068)				{
HXLINE(1068)					 ::hscriptBase::Token t2 = this->token();
HXDLIN(1068)					if (::hx::IsPointerNotEq( t2,::hscriptBase::Token_obj::TDoubleDot_dyn() )) {
HXLINE(1068)						this->unexpected(t2);
            					}
            				}
HXLINE(1069)				 ::Dynamic e31 = this->parseExpr();
HXLINE(1070)				 ::hscriptBase::ExprDef e17 = ::hscriptBase::ExprDef_obj::ETernary(e1,e24,e31);
HXDLIN(1070)				 ::Dynamic pmin13;
HXDLIN(1070)				if (::hx::IsNull( e1 )) {
HXLINE(1070)					pmin13 = 0;
            				}
            				else {
HXLINE(1070)					pmin13 = e1->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
            				}
HXDLIN(1070)				 ::Dynamic pmax13;
HXDLIN(1070)				if (::hx::IsNull( e31 )) {
HXLINE(1070)					pmax13 = 0;
            				}
            				else {
HXLINE(1070)					pmax13 = e31->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
            				}
HXDLIN(1070)				if (::hx::IsNull( e17 )) {
HXLINE(1070)					return null();
            				}
            				else {
HXLINE(1070)					if (::hx::IsNull( pmin13 )) {
HXLINE(1070)						pmin13 = this->tokenMin;
            					}
HXDLIN(1070)					if (::hx::IsNull( pmax13 )) {
HXLINE(1070)						pmax13 = this->tokenMax;
            					}
HXDLIN(1070)					return  ::Dynamic(::hx::Anon_obj::Create(5)
            						->setFixed(0,HX_("e",65,00,00,00),e17)
            						->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            						->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax13)
            						->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin13)
            						->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            				}
            			}
            			break;
            			default:{
HXLINE(1090)				{
HXLINE(1090)					this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("t",74,00,00,00),tk)
            						->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            						->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN(1090)					this->tokenMin = this->oldTokenMin;
HXDLIN(1090)					this->tokenMax = this->oldTokenMax;
            				}
HXLINE(1091)				return e1;
            			}
            		}
HXLINE(1033)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseExprNext,return )

::Array< ::Dynamic> Parser_obj::parseFunctionArgs(){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_1095_parseFunctionArgs)
HXLINE(1096)		::Array< ::Dynamic> args = ::Array_obj< ::Dynamic>::__new();
HXLINE(1097)		 ::hscriptBase::Token tk = this->token();
HXLINE(1098)		if (::hx::IsPointerNotEq( tk,::hscriptBase::Token_obj::TPClose_dyn() )) {
HXLINE(1099)			bool done = false;
HXLINE(1100)			while(!(done)){
HXLINE(1101)				::String name = null();
HXDLIN(1101)				bool opt = false;
HXLINE(1102)				if ((tk->_hx_getIndex() == 17)) {
HXLINE(1104)					opt = true;
HXLINE(1105)					tk = this->token();
            				}
HXLINE(1108)				if ((tk->_hx_getIndex() == 2)) {
HXLINE(1109)					::String id = tk->_hx_getString(0);
HXDLIN(1109)					name = id;
            				}
            				else {
HXLINE(1111)					this->unexpected(tk);
HXLINE(1112)					goto _hx_goto_71;
            				}
HXLINE(1114)				 ::Dynamic arg =  ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("name",4b,72,ff,48),name));
HXLINE(1115)				args->push(arg);
HXLINE(1116)				if (opt) {
HXLINE(1116)					arg->__SetField(HX_("opt",33,9c,54,00),true,::hx::paccDynamic);
            				}
HXLINE(1117)				if (this->allowTypes) {
HXLINE(1118)					if (this->maybe(::hscriptBase::Token_obj::TDoubleDot_dyn())) {
HXLINE(1119)						arg->__SetField(HX_("t",74,00,00,00),this->parseType(),::hx::paccDynamic);
            					}
HXLINE(1120)					if (this->maybe(::hscriptBase::Token_obj::TOp(HX_("=",3d,00,00,00)))) {
HXLINE(1121)						arg->__SetField(HX_("value",71,7f,b8,31),this->parseExpr(),::hx::paccDynamic);
            					}
            				}
HXLINE(1123)				tk = this->token();
HXLINE(1124)				switch((int)(tk->_hx_getIndex())){
            					case (int)5: {
HXLINE(1128)						done = true;
            					}
            					break;
            					case (int)9: {
HXLINE(1126)						tk = this->token();
            					}
            					break;
            					default:{
HXLINE(1130)						this->unexpected(tk);
            					}
            				}
            			}
            			_hx_goto_71:;
            		}
HXLINE(1134)		return args;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseFunctionArgs,return )

 ::Dynamic Parser_obj::parseFunctionDecl(){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_1137_parseFunctionDecl)
HXLINE(1138)		{
HXLINE(1138)			 ::hscriptBase::Token t = this->token();
HXDLIN(1138)			if (::hx::IsPointerNotEq( t,::hscriptBase::Token_obj::TPOpen_dyn() )) {
HXLINE(1138)				this->unexpected(t);
            			}
            		}
HXLINE(1139)		::Array< ::Dynamic> args = this->parseFunctionArgs();
HXLINE(1140)		 ::hscriptBase::CType ret = null();
HXLINE(1141)		if (this->allowTypes) {
HXLINE(1142)			 ::hscriptBase::Token tk = this->token();
HXLINE(1143)			if (::hx::IsPointerNotEq( tk,::hscriptBase::Token_obj::TDoubleDot_dyn() )) {
HXLINE(1144)				this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("t",74,00,00,00),tk)
            					->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            					->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN(1144)				this->tokenMin = this->oldTokenMin;
HXDLIN(1144)				this->tokenMax = this->oldTokenMax;
            			}
            			else {
HXLINE(1146)				ret = this->parseType();
            			}
            		}
HXLINE(1148)		return  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("ret",61,d9,56,00),ret)
            			->setFixed(1,HX_("args",5d,8d,74,40),args)
            			->setFixed(2,HX_("body",a2,7a,1b,41),this->parseExpr()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseFunctionDecl,return )

::Array< ::String > Parser_obj::parsePath(){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_1151_parsePath)
HXLINE(1152)		::Array< ::String > path = ::Array_obj< ::String >::__new(1)->init(0,this->getIdent(null()));
HXLINE(1153)		while(true){
HXLINE(1154)			 ::hscriptBase::Token t = this->token();
HXLINE(1155)			if (::hx::IsPointerNotEq( t,::hscriptBase::Token_obj::TDot_dyn() )) {
HXLINE(1156)				{
HXLINE(1156)					this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("t",74,00,00,00),t)
            						->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            						->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN(1156)					this->tokenMin = this->oldTokenMin;
HXDLIN(1156)					this->tokenMax = this->oldTokenMax;
            				}
HXLINE(1157)				goto _hx_goto_74;
            			}
HXLINE(1159)			path->push(this->getIdent(null()));
            		}
            		_hx_goto_74:;
HXLINE(1161)		return path;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parsePath,return )

 ::hscriptBase::CType Parser_obj::parseType(){
            	HX_GC_STACKFRAME(&_hx_pos_948055e9f9c336b1_1164_parseType)
HXDLIN(1164)		 ::hscriptBase::Parser _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1165)		 ::hscriptBase::Token t = this->token();
HXLINE(1166)		switch((int)(t->_hx_getIndex())){
            			case (int)2: {
HXLINE(1167)				::String v = t->_hx_getString(0);
HXLINE(1168)				{
HXLINE(1168)					this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("t",74,00,00,00),t)
            						->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            						->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN(1168)					this->tokenMin = this->oldTokenMin;
HXDLIN(1168)					this->tokenMax = this->oldTokenMax;
            				}
HXLINE(1169)				::Array< ::String > path = this->parsePath();
HXLINE(1170)				::Array< ::Dynamic> params = null();
HXLINE(1171)				t = this->token();
HXLINE(1172)				if ((t->_hx_getIndex() == 3)) {
HXLINE(1173)					::String op = t->_hx_getString(0);
HXLINE(1174)					if ((op == HX_("<",3c,00,00,00))) {
HXLINE(1175)						params = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1176)						while(true){
HXLINE(1177)							params->push(this->parseType());
HXLINE(1178)							t = this->token();
HXLINE(1179)							switch((int)(t->_hx_getIndex())){
            								case (int)3: {
HXLINE(1181)									::String op1 = t->_hx_getString(0);
HXDLIN(1181)									{
HXLINE(1182)										if ((op1 == HX_(">",3e,00,00,00))) {
HXLINE(1182)											goto _hx_goto_76;
            										}
HXLINE(1183)										if (::hx::IsEq( op1.charCodeAt(0),62 )) {
HXLINE(1184)											 ::haxe::ds::List _hx_tmp = this->tokens;
HXDLIN(1184)											 ::hscriptBase::Token _hx_tmp1 = ::hscriptBase::Token_obj::TOp(op1.substr(1,null()));
HXDLIN(1184)											_hx_tmp->add( ::Dynamic(::hx::Anon_obj::Create(3)
            												->setFixed(0,HX_("t",74,00,00,00),_hx_tmp1)
            												->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            												->setFixed(2,HX_("min",92,11,53,00),((this->tokenMax - op1.length) - 1))));
HXLINE(1185)											goto _hx_goto_76;
            										}
            									}
            								}
            								break;
            								case (int)9: {
HXLINE(1180)									continue;
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1189)							this->unexpected(t);
HXLINE(1190)							goto _hx_goto_76;
            						}
            						_hx_goto_76:;
            					}
            					else {
HXLINE(1194)						this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            							->setFixed(0,HX_("t",74,00,00,00),t)
            							->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            							->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN(1194)						this->tokenMin = this->oldTokenMin;
HXDLIN(1194)						this->tokenMax = this->oldTokenMax;
            					}
            				}
            				else {
HXLINE(1197)					this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("t",74,00,00,00),t)
            						->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            						->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN(1197)					this->tokenMin = this->oldTokenMin;
HXDLIN(1197)					this->tokenMax = this->oldTokenMax;
            				}
HXLINE(1199)				return this->parseTypeNext(::hscriptBase::CType_obj::CTPath(path,params));
            			}
            			break;
            			case (int)4: {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hscriptBase::Parser,_gthis) HXARGC(1)
            				 ::hscriptBase::CType _hx_run(::Array< ::Dynamic> args){
            					HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_1207_parseType)
HXLINE(1208)					{
HXLINE(1208)						 ::hscriptBase::Token _g = _gthis->token();
HXDLIN(1208)						if ((_g->_hx_getIndex() == 3)) {
HXLINE(1209)							if ((_g->_hx_getString(0) != HX_("->",71,27,00,00))) {
HXLINE(1210)								 ::hscriptBase::Token t = _g;
HXDLIN(1210)								_gthis->unexpected(t);
            							}
            						}
            						else {
HXLINE(1210)							 ::hscriptBase::Token t1 = _g;
HXDLIN(1210)							_gthis->unexpected(t1);
            						}
            					}
HXLINE(1213)					return ::hscriptBase::CType_obj::CTFun(args,_gthis->parseType());
            				}
            				HX_END_LOCAL_FUNC1(return)

HXLINE(1201)				 ::hscriptBase::Token a = this->token();
HXDLIN(1201)				 ::hscriptBase::Token b = this->token();
HXLINE(1204)				{
HXLINE(1204)					this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("t",74,00,00,00),b)
            						->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            						->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN(1204)					this->tokenMin = this->oldTokenMin;
HXDLIN(1204)					this->tokenMax = this->oldTokenMax;
            				}
HXLINE(1205)				{
HXLINE(1205)					this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("t",74,00,00,00),a)
            						->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            						->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN(1205)					this->tokenMin = this->oldTokenMin;
HXDLIN(1205)					this->tokenMax = this->oldTokenMax;
            				}
HXLINE(1207)				 ::Dynamic withReturn =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE(1216)				switch((int)(a->_hx_getIndex())){
            					case (int)2: {
HXLINE(1217)						::String _g = a->_hx_getString(0);
HXLINE(1216)						if ((b->_hx_getIndex() == 18)) {
HXLINE(1219)							::Array< ::Dynamic> _g1 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1219)							{
HXLINE(1219)								int _g2 = 0;
HXDLIN(1219)								::Array< ::Dynamic> _g3 = this->parseFunctionArgs();
HXDLIN(1219)								while((_g2 < _g3->length)){
HXLINE(1219)									 ::Dynamic arg = _g3->__get(_g2);
HXDLIN(1219)									_g2 = (_g2 + 1);
HXLINE(1220)									{
HXLINE(1220)										 ::Dynamic _g4 = arg->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic);
HXLINE(1221)										if (::hx::IsNotNull( _g4 )) {
HXLINE(1222)											 ::Dynamic v1 = _g4;
HXLINE(1223)											{
HXLINE(1223)												 ::hscriptBase::ErrorDef err = ::hscriptBase::ErrorDef_obj::ECustom(HX_("Default values not allowed in function types",28,46,7a,e6));
HXDLIN(1223)												 ::Dynamic pmin = v1->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
HXDLIN(1223)												 ::Dynamic pmax = v1->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
HXDLIN(1223)												 ::hscriptBase::Error e =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err,( (int)(pmin) ),( (int)(pmax) ),this->origin,this->line);
HXDLIN(1223)												if (!(this->resumeErrors)) {
HXLINE(1223)													HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err,( (int)(pmin) ),( (int)(pmax) ),this->origin,this->line));
            												}
            											}
            										}
            									}
HXLINE(1226)									 ::hscriptBase::CType _hx_tmp2;
HXDLIN(1226)									if (( (bool)(arg->__Field(HX_("opt",33,9c,54,00),::hx::paccDynamic)) )) {
HXLINE(1226)										_hx_tmp2 = ::hscriptBase::CType_obj::CTOpt( ::Dynamic(arg->__Field(HX_("t",74,00,00,00),::hx::paccDynamic)));
            									}
            									else {
HXLINE(1226)										_hx_tmp2 = arg->__Field(HX_("t",74,00,00,00),::hx::paccDynamic);
            									}
HXDLIN(1226)									_g1->push(::hscriptBase::CType_obj::CTNamed( ::Dynamic(arg->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)),_hx_tmp2));
            								}
            							}
HXLINE(1219)							::Array< ::Dynamic> args = _g1;
HXLINE(1229)							return withReturn(args);
            						}
            						else {
HXLINE(1232)							 ::hscriptBase::CType t1 = this->parseType();
HXLINE(1233)							 ::hscriptBase::Token _g5 = this->token();
HXDLIN(1233)							switch((int)(_g5->_hx_getIndex())){
            								case (int)5: {
HXLINE(1244)									return this->parseTypeNext(::hscriptBase::CType_obj::CTParent(t1));
            								}
            								break;
            								case (int)9: {
HXLINE(1235)									::Array< ::Dynamic> args1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,t1);
HXLINE(1237)									do {
HXLINE(1238)										args1->push(this->parseType());
            									} while(this->maybe(::hscriptBase::Token_obj::TComma_dyn()));
;
HXLINE(1241)									{
HXLINE(1241)										 ::hscriptBase::Token t2 = this->token();
HXDLIN(1241)										if (::hx::IsPointerNotEq( t2,::hscriptBase::Token_obj::TPClose_dyn() )) {
HXLINE(1241)											this->unexpected(t2);
            										}
            									}
HXLINE(1242)									return withReturn(args1);
            								}
            								break;
            								default:{
HXLINE(1245)									 ::hscriptBase::Token t3 = _g5;
HXDLIN(1245)									return this->unexpected(t3);
            								}
            							}
            						}
            					}
            					break;
            					case (int)5: {
HXLINE(1219)						::Array< ::Dynamic> _g6 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1219)						{
HXLINE(1219)							int _g7 = 0;
HXDLIN(1219)							::Array< ::Dynamic> _g8 = this->parseFunctionArgs();
HXDLIN(1219)							while((_g7 < _g8->length)){
HXLINE(1219)								 ::Dynamic arg1 = _g8->__get(_g7);
HXDLIN(1219)								_g7 = (_g7 + 1);
HXLINE(1220)								{
HXLINE(1220)									 ::Dynamic _g9 = arg1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic);
HXLINE(1221)									if (::hx::IsNotNull( _g9 )) {
HXLINE(1222)										 ::Dynamic v2 = _g9;
HXLINE(1223)										{
HXLINE(1223)											 ::hscriptBase::ErrorDef err1 = ::hscriptBase::ErrorDef_obj::ECustom(HX_("Default values not allowed in function types",28,46,7a,e6));
HXDLIN(1223)											 ::Dynamic pmin1 = v2->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic);
HXDLIN(1223)											 ::Dynamic pmax1 = v2->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic);
HXDLIN(1223)											 ::hscriptBase::Error e1 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err1,( (int)(pmin1) ),( (int)(pmax1) ),this->origin,this->line);
HXDLIN(1223)											if (!(this->resumeErrors)) {
HXLINE(1223)												HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err1,( (int)(pmin1) ),( (int)(pmax1) ),this->origin,this->line));
            											}
            										}
            									}
            								}
HXLINE(1226)								 ::hscriptBase::CType _hx_tmp3;
HXDLIN(1226)								if (( (bool)(arg1->__Field(HX_("opt",33,9c,54,00),::hx::paccDynamic)) )) {
HXLINE(1226)									_hx_tmp3 = ::hscriptBase::CType_obj::CTOpt( ::Dynamic(arg1->__Field(HX_("t",74,00,00,00),::hx::paccDynamic)));
            								}
            								else {
HXLINE(1226)									_hx_tmp3 = arg1->__Field(HX_("t",74,00,00,00),::hx::paccDynamic);
            								}
HXDLIN(1226)								_g6->push(::hscriptBase::CType_obj::CTNamed( ::Dynamic(arg1->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)),_hx_tmp3));
            							}
            						}
HXLINE(1219)						::Array< ::Dynamic> args2 = _g6;
HXLINE(1229)						return withReturn(args2);
            					}
            					break;
            					default:{
HXLINE(1232)						 ::hscriptBase::CType t4 = this->parseType();
HXLINE(1233)						 ::hscriptBase::Token _g10 = this->token();
HXDLIN(1233)						switch((int)(_g10->_hx_getIndex())){
            							case (int)5: {
HXLINE(1244)								return this->parseTypeNext(::hscriptBase::CType_obj::CTParent(t4));
            							}
            							break;
            							case (int)9: {
HXLINE(1235)								::Array< ::Dynamic> args3 = ::Array_obj< ::Dynamic>::__new(1)->init(0,t4);
HXLINE(1237)								do {
HXLINE(1238)									args3->push(this->parseType());
            								} while(this->maybe(::hscriptBase::Token_obj::TComma_dyn()));
;
HXLINE(1241)								{
HXLINE(1241)									 ::hscriptBase::Token t5 = this->token();
HXDLIN(1241)									if (::hx::IsPointerNotEq( t5,::hscriptBase::Token_obj::TPClose_dyn() )) {
HXLINE(1241)										this->unexpected(t5);
            									}
            								}
HXLINE(1242)								return withReturn(args3);
            							}
            							break;
            							default:{
HXLINE(1245)								 ::hscriptBase::Token t6 = _g10;
HXDLIN(1245)								return this->unexpected(t6);
            							}
            						}
            					}
            				}
            			}
            			break;
            			case (int)6: {
HXLINE(1249)				::Array< ::Dynamic> fields = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1250)				::Array< ::Dynamic> meta = null();
HXLINE(1251)				while(true){
HXLINE(1252)					t = this->token();
HXLINE(1253)					switch((int)(t->_hx_getIndex())){
            						case (int)2: {
HXLINE(1261)							::String _g11 = t->_hx_getString(0);
HXDLIN(1261)							if ((_g11 == HX_("var",e7,de,59,00))) {
HXLINE(1256)								::String name = this->getIdent(null());
HXLINE(1257)								{
HXLINE(1257)									 ::hscriptBase::Token t7 = this->token();
HXDLIN(1257)									if (::hx::IsPointerNotEq( t7,::hscriptBase::Token_obj::TDoubleDot_dyn() )) {
HXLINE(1257)										this->unexpected(t7);
            									}
            								}
HXLINE(1258)								fields->push( ::Dynamic(::hx::Anon_obj::Create(3)
            									->setFixed(0,HX_("t",74,00,00,00),this->parseType())
            									->setFixed(1,HX_("meta",c5,4a,59,48),meta)
            									->setFixed(2,HX_("name",4b,72,ff,48),name)));
HXLINE(1259)								meta = null();
HXLINE(1260)								{
HXLINE(1260)									 ::hscriptBase::Token t8 = this->token();
HXDLIN(1260)									if (::hx::IsPointerNotEq( t8,::hscriptBase::Token_obj::TStatement_dyn() )) {
HXLINE(1260)										this->unexpected(t8);
            									}
            								}
            							}
            							else {
HXLINE(1261)								::String name1 = _g11;
HXDLIN(1261)								{
HXLINE(1262)									{
HXLINE(1262)										 ::hscriptBase::Token t9 = this->token();
HXDLIN(1262)										if (::hx::IsPointerNotEq( t9,::hscriptBase::Token_obj::TDoubleDot_dyn() )) {
HXLINE(1262)											this->unexpected(t9);
            										}
            									}
HXLINE(1263)									fields->push( ::Dynamic(::hx::Anon_obj::Create(3)
            										->setFixed(0,HX_("t",74,00,00,00),this->parseType())
            										->setFixed(1,HX_("meta",c5,4a,59,48),meta)
            										->setFixed(2,HX_("name",4b,72,ff,48),name1)));
HXLINE(1264)									t = this->token();
HXLINE(1265)									switch((int)(t->_hx_getIndex())){
            										case (int)7: {
HXLINE(1267)											goto _hx_goto_81;
            										}
            										break;
            										case (int)9: {
            										}
            										break;
            										default:{
HXLINE(1268)											this->unexpected(t);
            										}
            									}
            								}
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1254)							goto _hx_goto_81;
            						}
            						break;
            						case (int)19: {
HXLINE(1270)							::String name2 = t->_hx_getString(0);
HXDLIN(1270)							{
HXLINE(1271)								if (::hx::IsNull( meta )) {
HXLINE(1271)									meta = ::Array_obj< ::Dynamic>::__new(0);
            								}
HXLINE(1272)								meta->push( ::Dynamic(::hx::Anon_obj::Create(2)
            									->setFixed(0,HX_("params",46,fb,7a,ed),this->parseMetaArgs())
            									->setFixed(1,HX_("name",4b,72,ff,48),name2)));
            							}
            						}
            						break;
            						default:{
HXLINE(1274)							this->unexpected(t);
HXLINE(1275)							goto _hx_goto_81;
            						}
            					}
            				}
            				_hx_goto_81:;
HXLINE(1278)				return this->parseTypeNext(::hscriptBase::CType_obj::CTAnon(fields));
            			}
            			break;
            			default:{
HXLINE(1280)				return this->unexpected(t);
            			}
            		}
HXLINE(1166)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseType,return )

 ::hscriptBase::CType Parser_obj::parseTypeNext( ::hscriptBase::CType t){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_1284_parseTypeNext)
HXLINE(1285)		 ::hscriptBase::Token tk = this->token();
HXLINE(1286)		if ((tk->_hx_getIndex() == 3)) {
HXLINE(1287)			::String op = tk->_hx_getString(0);
HXLINE(1288)			if ((op != HX_("->",71,27,00,00))) {
HXLINE(1289)				{
HXLINE(1289)					this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("t",74,00,00,00),tk)
            						->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            						->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN(1289)					this->tokenMin = this->oldTokenMin;
HXDLIN(1289)					this->tokenMax = this->oldTokenMax;
            				}
HXLINE(1290)				return t;
            			}
            		}
            		else {
HXLINE(1293)			{
HXLINE(1293)				this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("t",74,00,00,00),tk)
            					->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            					->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN(1293)				this->tokenMin = this->oldTokenMin;
HXDLIN(1293)				this->tokenMax = this->oldTokenMax;
            			}
HXLINE(1294)			return t;
            		}
HXLINE(1296)		 ::hscriptBase::CType t2 = this->parseType();
HXLINE(1297)		if ((t2->_hx_getIndex() == 1)) {
HXLINE(1298)			 ::hscriptBase::CType _g = t2->_hx_getObject(1).StaticCast<  ::hscriptBase::CType >();
HXDLIN(1298)			::Array< ::Dynamic> args = t2->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE(1299)			args->unshift(t);
HXLINE(1300)			return t2;
            		}
            		else {
HXLINE(1302)			return ::hscriptBase::CType_obj::CTFun(::Array_obj< ::Dynamic>::__new(1)->init(0,t),t2);
            		}
HXLINE(1297)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseTypeNext,return )

::Array< ::Dynamic> Parser_obj::parseExprList( ::hscriptBase::Token etk){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_1306_parseExprList)
HXLINE(1307)		::Array< ::Dynamic> args = ::Array_obj< ::Dynamic>::__new();
HXLINE(1308)		 ::hscriptBase::Token tk = this->token();
HXLINE(1309)		if (::hx::IsPointerEq( tk,etk )) {
HXLINE(1310)			return args;
            		}
HXLINE(1311)		{
HXLINE(1311)			this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("t",74,00,00,00),tk)
            				->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            				->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN(1311)			this->tokenMin = this->oldTokenMin;
HXDLIN(1311)			this->tokenMax = this->oldTokenMax;
            		}
HXLINE(1312)		while(true){
HXLINE(1313)			args->push(this->parseExpr());
HXLINE(1314)			tk = this->token();
HXLINE(1315)			if ((tk->_hx_getIndex() != 9)) {
HXLINE(1318)				if (::hx::IsPointerEq( tk,etk )) {
HXLINE(1318)					goto _hx_goto_85;
            				}
HXLINE(1319)				this->unexpected(tk);
HXLINE(1320)				goto _hx_goto_85;
            			}
            		}
            		_hx_goto_85:;
HXLINE(1323)		return args;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseExprList,return )

int Parser_obj::readChar(){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_1329_readChar)
HXDLIN(1329)		return this->input.cca(this->readPos++);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,readChar,return )

::String Parser_obj::readString(int until){
            	HX_GC_STACKFRAME(&_hx_pos_948055e9f9c336b1_1332_readString)
HXLINE(1333)		int c = 0;
HXLINE(1334)		 ::StringBuf b =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE(1335)		bool esc = false;
HXLINE(1336)		int old = this->line;
HXLINE(1337)		::String s = this->input;
HXLINE(1338)		int p1 = (this->readPos - 1);
HXLINE(1339)		while(true){
HXLINE(1340)			int c1 = this->input.cca(this->readPos++);
HXLINE(1341)			if ((c1 == 0)) {
HXLINE(1342)				this->line = old;
HXLINE(1343)				{
HXLINE(1343)					 ::hscriptBase::ErrorDef err = ::hscriptBase::ErrorDef_obj::EUnterminatedString_dyn();
HXDLIN(1343)					 ::hscriptBase::Error e =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err,p1,p1,this->origin,this->line);
HXDLIN(1343)					if (!(this->resumeErrors)) {
HXLINE(1343)						HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err,p1,p1,this->origin,this->line));
            					}
            				}
HXLINE(1344)				goto _hx_goto_88;
            			}
HXLINE(1346)			if (esc) {
HXLINE(1347)				esc = false;
HXLINE(1348)				switch((int)(c1)){
            					case (int)47: {
HXLINE(1353)						if (this->allowJSON) {
HXLINE(1353)							if ((c1 >= 127)) {
HXLINE(1353)								::String x = ::String::fromCharCode(c1);
HXDLIN(1353)								if (::hx::IsNotNull( b->charBuf )) {
HXLINE(1353)									b->flush();
            								}
HXDLIN(1353)								if (::hx::IsNull( b->b )) {
HXLINE(1353)									b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            								}
            								else {
HXLINE(1353)									::Array< ::String > b1 = b->b;
HXDLIN(1353)									b1->push(::Std_obj::string(x));
            								}
            							}
            							else {
HXLINE(1353)								if (::hx::IsNull( b->charBuf )) {
HXLINE(1353)									b->charBuf = ::Array_obj< char >::__new();
            								}
HXDLIN(1353)								b->charBuf->push(c1);
            							}
            						}
            						else {
HXLINE(1353)							this->invalidChar(c1);
            						}
            					}
            					break;
            					case (int)34: case (int)39: case (int)92: {
HXLINE(1352)						if ((c1 >= 127)) {
HXLINE(1352)							::String x1 = ::String::fromCharCode(c1);
HXDLIN(1352)							if (::hx::IsNotNull( b->charBuf )) {
HXLINE(1352)								b->flush();
            							}
HXDLIN(1352)							if (::hx::IsNull( b->b )) {
HXLINE(1352)								b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            							}
            							else {
HXLINE(1352)								::Array< ::String > b2 = b->b;
HXDLIN(1352)								b2->push(::Std_obj::string(x1));
            							}
            						}
            						else {
HXLINE(1352)							if (::hx::IsNull( b->charBuf )) {
HXLINE(1352)								b->charBuf = ::Array_obj< char >::__new();
            							}
HXDLIN(1352)							b->charBuf->push(c1);
            						}
            					}
            					break;
            					case (int)110: {
HXLINE(1349)						if (::hx::IsNull( b->charBuf )) {
HXLINE(1349)							b->charBuf = ::Array_obj< char >::__new();
            						}
HXDLIN(1349)						b->charBuf->push(10);
            					}
            					break;
            					case (int)114: {
HXLINE(1350)						if (::hx::IsNull( b->charBuf )) {
HXLINE(1350)							b->charBuf = ::Array_obj< char >::__new();
            						}
HXDLIN(1350)						b->charBuf->push(13);
            					}
            					break;
            					case (int)116: {
HXLINE(1351)						if (::hx::IsNull( b->charBuf )) {
HXLINE(1351)							b->charBuf = ::Array_obj< char >::__new();
            						}
HXDLIN(1351)						b->charBuf->push(9);
            					}
            					break;
            					case (int)117: {
HXLINE(1355)						if (!(this->allowJSON)) {
HXLINE(1355)							this->invalidChar(c1);
            						}
HXLINE(1356)						int k = 0;
HXLINE(1357)						{
HXLINE(1357)							int _g = 0;
HXDLIN(1357)							while((_g < 4)){
HXLINE(1357)								_g = (_g + 1);
HXDLIN(1357)								int i = (_g - 1);
HXLINE(1358)								k = (k << 4);
HXLINE(1359)								int _hx_char = this->input.cca(this->readPos++);
HXLINE(1360)								switch((int)(_hx_char)){
            									case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1362)										k = (k + (_hx_char - 48));
            									}
            									break;
            									case (int)65: case (int)66: case (int)67: case (int)68: case (int)69: case (int)70: {
HXLINE(1364)										k = (k + (_hx_char - 55));
            									}
            									break;
            									case (int)97: case (int)98: case (int)99: case (int)100: case (int)101: case (int)102: {
HXLINE(1366)										k = (k + (_hx_char - 87));
            									}
            									break;
            									default:{
HXLINE(1368)										if ((_hx_char == 0)) {
HXLINE(1369)											this->line = old;
HXLINE(1370)											{
HXLINE(1370)												 ::hscriptBase::ErrorDef err1 = ::hscriptBase::ErrorDef_obj::EUnterminatedString_dyn();
HXDLIN(1370)												 ::hscriptBase::Error e1 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err1,p1,p1,this->origin,this->line);
HXDLIN(1370)												if (!(this->resumeErrors)) {
HXLINE(1370)													HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err1,p1,p1,this->origin,this->line));
            												}
            											}
            										}
HXLINE(1372)										this->invalidChar(_hx_char);
            									}
            								}
            							}
            						}
HXLINE(1375)						if ((k >= 127)) {
HXLINE(1375)							::String x2 = ::String::fromCharCode(k);
HXDLIN(1375)							if (::hx::IsNotNull( b->charBuf )) {
HXLINE(1375)								b->flush();
            							}
HXDLIN(1375)							if (::hx::IsNull( b->b )) {
HXLINE(1375)								b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x2));
            							}
            							else {
HXLINE(1375)								::Array< ::String > b3 = b->b;
HXDLIN(1375)								b3->push(::Std_obj::string(x2));
            							}
            						}
            						else {
HXLINE(1375)							if (::hx::IsNull( b->charBuf )) {
HXLINE(1375)								b->charBuf = ::Array_obj< char >::__new();
            							}
HXDLIN(1375)							b->charBuf->push(k);
            						}
            					}
            					break;
            					default:{
HXLINE(1376)						this->invalidChar(c1);
            					}
            				}
            			}
            			else {
HXLINE(1378)				if ((c1 == 92)) {
HXLINE(1379)					esc = true;
            				}
            				else {
HXLINE(1380)					if ((c1 == until)) {
HXLINE(1381)						goto _hx_goto_88;
            					}
            					else {
HXLINE(1383)						if ((c1 == 10)) {
HXLINE(1383)							this->line++;
            						}
HXLINE(1384)						if ((c1 >= 127)) {
HXLINE(1384)							::String x3 = ::String::fromCharCode(c1);
HXDLIN(1384)							if (::hx::IsNotNull( b->charBuf )) {
HXLINE(1384)								b->flush();
            							}
HXDLIN(1384)							if (::hx::IsNull( b->b )) {
HXLINE(1384)								b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x3));
            							}
            							else {
HXLINE(1384)								::Array< ::String > b4 = b->b;
HXDLIN(1384)								b4->push(::Std_obj::string(x3));
            							}
            						}
            						else {
HXLINE(1384)							if (::hx::IsNull( b->charBuf )) {
HXLINE(1384)								b->charBuf = ::Array_obj< char >::__new();
            							}
HXDLIN(1384)							b->charBuf->push(c1);
            						}
            					}
            				}
            			}
            		}
            		_hx_goto_88:;
HXLINE(1387)		return b->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,readString,return )

 ::hscriptBase::Token Parser_obj::token(){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_1390_token)
HXLINE(1391)		 ::Dynamic t = this->tokens->pop();
HXLINE(1392)		if (::hx::IsNotNull( t )) {
HXLINE(1393)			this->tokenMin = ( (int)(t->__Field(HX_("min",92,11,53,00),::hx::paccDynamic)) );
HXLINE(1394)			this->tokenMax = ( (int)(t->__Field(HX_("max",a4,0a,53,00),::hx::paccDynamic)) );
HXLINE(1395)			return t->__Field(HX_("t",74,00,00,00),::hx::paccDynamic);
            		}
HXLINE(1397)		this->oldTokenMin = this->tokenMin;
HXLINE(1398)		this->oldTokenMax = this->tokenMax;
HXLINE(1399)		int _hx_tmp;
HXDLIN(1399)		if ((this->_hx_char < 0)) {
HXLINE(1399)			_hx_tmp = this->readPos;
            		}
            		else {
HXLINE(1399)			_hx_tmp = (this->readPos - 1);
            		}
HXDLIN(1399)		this->tokenMin = _hx_tmp;
HXLINE(1400)		 ::hscriptBase::Token t1 = this->_token();
HXLINE(1401)		if ((t1->_hx_getIndex() == 2)) {
HXLINE(1402)			if ((t1->_hx_getString(0) == HX_("is",ea,5b,00,00))) {
HXLINE(1403)				t1 = ::hscriptBase::Token_obj::TOp(HX_("is",ea,5b,00,00));
            			}
            		}
HXLINE(1406)		int _hx_tmp1;
HXDLIN(1406)		if ((this->_hx_char < 0)) {
HXLINE(1406)			_hx_tmp1 = (this->readPos - 1);
            		}
            		else {
HXLINE(1406)			_hx_tmp1 = (this->readPos - 2);
            		}
HXDLIN(1406)		this->tokenMax = _hx_tmp1;
HXLINE(1407)		return t1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,token,return )

 ::hscriptBase::Token Parser_obj::_token(){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_1410__token)
HXLINE(1411)		int _hx_char;
HXLINE(1412)		if ((this->_hx_char < 0)) {
HXLINE(1413)			_hx_char = this->input.cca(this->readPos++);
            		}
            		else {
HXLINE(1415)			_hx_char = this->_hx_char;
HXLINE(1416)			this->_hx_char = -1;
            		}
HXLINE(1418)		while(true){
HXLINE(1419)			if ((_hx_char == 0)) {
HXLINE(1420)				this->_hx_char = _hx_char;
HXLINE(1421)				return ::hscriptBase::Token_obj::TEof_dyn();
            			}
HXLINE(1423)			switch((int)(_hx_char)){
            				case (int)0: {
HXLINE(1425)					return ::hscriptBase::Token_obj::TEof_dyn();
            				}
            				break;
            				case (int)10: {
HXLINE(1428)					this->line++;
HXLINE(1429)					this->tokenMin++;
            				}
            				break;
            				case (int)9: case (int)13: case (int)32: {
HXLINE(1427)					this->tokenMin++;
            				}
            				break;
            				case (int)34: case (int)39: {
HXLINE(1549)					return ::hscriptBase::Token_obj::TConst(::hscriptBase::Const_obj::CString(this->readString(_hx_char),null()));
            				}
            				break;
            				case (int)35: {
HXLINE(1593)					_hx_char = this->input.cca(this->readPos++);
HXLINE(1594)					if (this->idents->__get(_hx_char)) {
HXLINE(1595)						::String id = ::String::fromCharCode(_hx_char);
HXLINE(1596)						while(true){
HXLINE(1597)							_hx_char = this->input.cca(this->readPos++);
HXLINE(1598)							if (!(this->idents->__get(_hx_char))) {
HXLINE(1599)								this->_hx_char = _hx_char;
HXLINE(1600)								return this->preprocess(id);
            							}
HXLINE(1602)							id = (id + ::String::fromCharCode(_hx_char));
            						}
            					}
HXLINE(1605)					this->invalidChar(_hx_char);
            				}
            				break;
            				case (int)40: {
HXLINE(1516)					return ::hscriptBase::Token_obj::TPOpen_dyn();
            				}
            				break;
            				case (int)41: {
HXLINE(1517)					return ::hscriptBase::Token_obj::TPClose_dyn();
            				}
            				break;
            				case (int)44: {
HXLINE(1518)					return ::hscriptBase::Token_obj::TComma_dyn();
            				}
            				break;
            				case (int)46: {
HXLINE(1520)					_hx_char = this->input.cca(this->readPos++);
HXLINE(1521)					switch((int)(_hx_char)){
            						case (int)46: {
HXLINE(1537)							_hx_char = this->input.cca(this->readPos++);
HXLINE(1538)							if ((_hx_char != 46)) {
HXLINE(1539)								this->invalidChar(_hx_char);
            							}
HXLINE(1540)							return ::hscriptBase::Token_obj::TOp(HX_("...",ee,0f,23,00));
            						}
            						break;
            						case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1523)							int n = (_hx_char - 48);
HXLINE(1524)							int exp = 1;
HXLINE(1525)							while(true){
HXLINE(1526)								_hx_char = this->input.cca(this->readPos++);
HXLINE(1527)								exp = (exp * 10);
HXLINE(1528)								switch((int)(_hx_char)){
            									case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1530)										n = ((n * 10) + (_hx_char - 48));
            									}
            									break;
            									default:{
HXLINE(1532)										this->_hx_char = _hx_char;
HXLINE(1533)										return ::hscriptBase::Token_obj::TConst(::hscriptBase::Const_obj::CFloat((( (Float)(n) ) / ( (Float)(exp) ))));
            									}
            								}
            							}
            						}
            						break;
            						default:{
HXLINE(1542)							this->_hx_char = _hx_char;
HXLINE(1543)							return ::hscriptBase::Token_obj::TDot_dyn();
            						}
            					}
            				}
            				break;
            				case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1431)					Float n1 = (( (Float)((_hx_char - 48)) ) * ((Float)1.0));
HXLINE(1432)					Float exp1 = ((Float)0.);
HXLINE(1433)					while(true){
HXLINE(1434)						_hx_char = this->input.cca(this->readPos++);
HXLINE(1435)						exp1 = (exp1 * ( (Float)(10) ));
HXLINE(1436)						switch((int)(_hx_char)){
            							case (int)46: {
HXLINE(1457)								if ((exp1 > 0)) {
HXLINE(1459)									bool _hx_tmp;
HXDLIN(1459)									if ((exp1 == 10)) {
HXLINE(1459)										_hx_tmp = (this->input.cca(this->readPos++) == 46);
            									}
            									else {
HXLINE(1459)										_hx_tmp = false;
            									}
HXDLIN(1459)									if (_hx_tmp) {
HXLINE(1460)										{
HXLINE(1460)											this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            												->setFixed(0,HX_("t",74,00,00,00),::hscriptBase::Token_obj::TOp(HX_("...",ee,0f,23,00)))
            												->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            												->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN(1460)											this->tokenMin = this->oldTokenMin;
HXDLIN(1460)											this->tokenMax = this->oldTokenMax;
            										}
HXLINE(1461)										int i = (::Std_obj::_hx_int(n1) & -1);
HXLINE(1462)										 ::hscriptBase::Const _hx_tmp1;
HXDLIN(1462)										if ((i == n1)) {
HXLINE(1462)											_hx_tmp1 = ::hscriptBase::Const_obj::CInt(i);
            										}
            										else {
HXLINE(1462)											_hx_tmp1 = ::hscriptBase::Const_obj::CFloat(n1);
            										}
HXDLIN(1462)										return ::hscriptBase::Token_obj::TConst(_hx_tmp1);
            									}
HXLINE(1464)									this->invalidChar(_hx_char);
            								}
HXLINE(1466)								exp1 = ((Float)1.);
            							}
            							break;
            							case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1438)								n1 = ((n1 * ( (Float)(10) )) + (_hx_char - 48));
            							}
            							break;
            							case (int)69: case (int)101: {
HXLINE(1440)								 ::hscriptBase::Token tk = this->token();
HXLINE(1441)								 ::Dynamic pow = null();
HXLINE(1442)								switch((int)(tk->_hx_getIndex())){
            									case (int)1: {
HXLINE(1443)										 ::hscriptBase::Const _g = tk->_hx_getObject(0).StaticCast<  ::hscriptBase::Const >();
HXDLIN(1443)										if ((_g->_hx_getIndex() == 0)) {
HXLINE(1443)											int e = _g->_hx_getInt(0);
HXDLIN(1443)											pow = e;
            										}
            										else {
HXLINE(1451)											this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            												->setFixed(0,HX_("t",74,00,00,00),tk)
            												->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            												->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN(1451)											this->tokenMin = this->oldTokenMin;
HXDLIN(1451)											this->tokenMax = this->oldTokenMax;
            										}
            									}
            									break;
            									case (int)3: {
HXLINE(1444)										if ((tk->_hx_getString(0) == HX_("-",2d,00,00,00))) {
HXLINE(1445)											tk = this->token();
HXLINE(1446)											if ((tk->_hx_getIndex() == 1)) {
HXLINE(1447)												 ::hscriptBase::Const _g1 = tk->_hx_getObject(0).StaticCast<  ::hscriptBase::Const >();
HXDLIN(1447)												if ((_g1->_hx_getIndex() == 0)) {
HXLINE(1447)													int e1 = _g1->_hx_getInt(0);
HXDLIN(1447)													pow = -(e1);
            												}
            												else {
HXLINE(1448)													this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            														->setFixed(0,HX_("t",74,00,00,00),tk)
            														->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            														->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN(1448)													this->tokenMin = this->oldTokenMin;
HXDLIN(1448)													this->tokenMax = this->oldTokenMax;
            												}
            											}
            											else {
HXLINE(1448)												this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            													->setFixed(0,HX_("t",74,00,00,00),tk)
            													->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            													->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN(1448)												this->tokenMin = this->oldTokenMin;
HXDLIN(1448)												this->tokenMax = this->oldTokenMax;
            											}
            										}
            										else {
HXLINE(1451)											this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            												->setFixed(0,HX_("t",74,00,00,00),tk)
            												->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            												->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN(1451)											this->tokenMin = this->oldTokenMin;
HXDLIN(1451)											this->tokenMax = this->oldTokenMax;
            										}
            									}
            									break;
            									default:{
HXLINE(1451)										this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            											->setFixed(0,HX_("t",74,00,00,00),tk)
            											->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            											->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN(1451)										this->tokenMin = this->oldTokenMin;
HXDLIN(1451)										this->tokenMax = this->oldTokenMax;
            									}
            								}
HXLINE(1453)								if (::hx::IsNull( pow )) {
HXLINE(1454)									this->invalidChar(_hx_char);
            								}
HXLINE(1455)								return ::hscriptBase::Token_obj::TConst(::hscriptBase::Const_obj::CFloat((((::Math_obj::pow(( (Float)(10) ),( (Float)(pow) )) / exp1) * n1) * ( (Float)(10) ))));
            							}
            							break;
            							case (int)120: {
HXLINE(1468)								bool _hx_tmp2;
HXDLIN(1468)								if (!((n1 > 0))) {
HXLINE(1468)									_hx_tmp2 = (exp1 > 0);
            								}
            								else {
HXLINE(1468)									_hx_tmp2 = true;
            								}
HXDLIN(1468)								if (_hx_tmp2) {
HXLINE(1469)									this->invalidChar(_hx_char);
            								}
HXLINE(1472)								int n2 = 0;
HXLINE(1473)								while(true){
HXLINE(1474)									_hx_char = this->input.cca(this->readPos++);
HXLINE(1475)									switch((int)(_hx_char)){
            										case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1477)											n2 = (((n2 << 4) + _hx_char) - 48);
            										}
            										break;
            										case (int)65: case (int)66: case (int)67: case (int)68: case (int)69: case (int)70: {
HXLINE(1479)											n2 = ((n2 << 4) + (_hx_char - 55));
            										}
            										break;
            										case (int)97: case (int)98: case (int)99: case (int)100: case (int)101: case (int)102: {
HXLINE(1481)											n2 = ((n2 << 4) + (_hx_char - 87));
            										}
            										break;
            										default:{
HXLINE(1483)											this->_hx_char = _hx_char;
HXLINE(1484)											return ::hscriptBase::Token_obj::TConst(::hscriptBase::Const_obj::CInt((n2 & -1)));
            										}
            									}
            								}
            							}
            							break;
            							default:{
HXLINE(1509)								this->_hx_char = _hx_char;
HXLINE(1510)								int i1 = ::Std_obj::_hx_int(n1);
HXLINE(1511)								 ::hscriptBase::Const _hx_tmp3;
HXDLIN(1511)								if ((exp1 > 0)) {
HXLINE(1511)									_hx_tmp3 = ::hscriptBase::Const_obj::CFloat(((n1 * ( (Float)(10) )) / exp1));
            								}
            								else {
HXLINE(1511)									if ((i1 == n1)) {
HXLINE(1511)										_hx_tmp3 = ::hscriptBase::Const_obj::CInt(i1);
            									}
            									else {
HXLINE(1511)										_hx_tmp3 = ::hscriptBase::Const_obj::CFloat(n1);
            									}
            								}
HXDLIN(1511)								return ::hscriptBase::Token_obj::TConst(_hx_tmp3);
            							}
            						}
            					}
            				}
            				break;
            				case (int)58: {
HXLINE(1568)					return ::hscriptBase::Token_obj::TDoubleDot_dyn();
            				}
            				break;
            				case (int)59: {
HXLINE(1515)					return ::hscriptBase::Token_obj::TStatement_dyn();
            				}
            				break;
            				case (int)61: {
HXLINE(1570)					_hx_char = this->input.cca(this->readPos++);
HXLINE(1571)					if ((_hx_char == 61)) {
HXLINE(1572)						return ::hscriptBase::Token_obj::TOp(HX_("==",60,35,00,00));
            					}
            					else {
HXLINE(1573)						if ((_hx_char == 62)) {
HXLINE(1574)							return ::hscriptBase::Token_obj::TOp(HX_("=>",61,35,00,00));
            						}
            					}
HXLINE(1576)					this->_hx_char = _hx_char;
HXLINE(1577)					return ::hscriptBase::Token_obj::TOp(HX_("=",3d,00,00,00));
            				}
            				break;
            				case (int)63: {
HXLINE(1551)					_hx_char = this->input.cca(this->readPos++);
HXLINE(1552)					if ((_hx_char == 46)) {
HXLINE(1553)						return ::hscriptBase::Token_obj::TQDot_dyn();
            					}
            					else {
HXLINE(1554)						if ((_hx_char == 63)) {
HXLINE(1556)							_hx_char = this->input.cca(this->readPos++);
HXLINE(1558)							if ((_hx_char == 61)) {
HXLINE(1559)								return ::hscriptBase::Token_obj::TQDoubleAssign_dyn();
            							}
            							else {
HXLINE(1561)								this->readPos--;
            							}
HXLINE(1563)							return ::hscriptBase::Token_obj::TQDouble_dyn();
            						}
            					}
HXLINE(1566)					this->_hx_char = _hx_char;
HXLINE(1567)					return ::hscriptBase::Token_obj::TQuestion_dyn();
            				}
            				break;
            				case (int)64: {
HXLINE(1579)					_hx_char = this->input.cca(this->readPos++);
HXLINE(1580)					bool _hx_tmp4;
HXDLIN(1580)					if (!(this->idents->__get(_hx_char))) {
HXLINE(1580)						_hx_tmp4 = (_hx_char == 58);
            					}
            					else {
HXLINE(1580)						_hx_tmp4 = true;
            					}
HXDLIN(1580)					if (_hx_tmp4) {
HXLINE(1581)						::String id1;
HXDLIN(1581)						if ((_hx_char == 58)) {
HXLINE(1581)							id1 = HX_("",00,00,00,00);
            						}
            						else {
HXLINE(1581)							id1 = ::String::fromCharCode(_hx_char);
            						}
HXLINE(1582)						while(true){
HXLINE(1583)							_hx_char = this->input.cca(this->readPos++);
HXLINE(1584)							if (!(this->idents->__get(_hx_char))) {
HXLINE(1585)								this->_hx_char = _hx_char;
HXLINE(1586)								return ::hscriptBase::Token_obj::TMeta(id1);
            							}
HXLINE(1588)							id1 = (id1 + ::String::fromCharCode(_hx_char));
            						}
            					}
HXLINE(1591)					this->invalidChar(_hx_char);
            				}
            				break;
            				case (int)91: {
HXLINE(1547)					return ::hscriptBase::Token_obj::TBkOpen_dyn();
            				}
            				break;
            				case (int)93: {
HXLINE(1548)					return ::hscriptBase::Token_obj::TBkClose_dyn();
            				}
            				break;
            				case (int)123: {
HXLINE(1545)					return ::hscriptBase::Token_obj::TBrOpen_dyn();
            				}
            				break;
            				case (int)125: {
HXLINE(1546)					return ::hscriptBase::Token_obj::TBrClose_dyn();
            				}
            				break;
            				default:{
HXLINE(1607)					if (this->ops->__get(_hx_char)) {
HXLINE(1608)						::String op = ::String::fromCharCode(_hx_char);
HXLINE(1609)						while(true){
HXLINE(1610)							_hx_char = this->input.cca(this->readPos++);
HXLINE(1611)							if ((_hx_char == 0)) {
HXLINE(1611)								_hx_char = 0;
            							}
HXLINE(1612)							if (!(this->ops->__get(_hx_char))) {
HXLINE(1613)								this->_hx_char = _hx_char;
HXLINE(1614)								return ::hscriptBase::Token_obj::TOp(op);
            							}
HXLINE(1616)							::String pop = op;
HXLINE(1617)							op = (op + ::String::fromCharCode(_hx_char));
HXLINE(1618)							bool _hx_tmp5;
HXDLIN(1618)							if (!(this->opPriority->exists(op))) {
HXLINE(1618)								_hx_tmp5 = this->opPriority->exists(pop);
            							}
            							else {
HXLINE(1618)								_hx_tmp5 = false;
            							}
HXDLIN(1618)							if (_hx_tmp5) {
HXLINE(1619)								bool _hx_tmp6;
HXDLIN(1619)								if ((op != HX_("//",20,29,00,00))) {
HXLINE(1619)									_hx_tmp6 = (op == HX_("/*",1b,29,00,00));
            								}
            								else {
HXLINE(1619)									_hx_tmp6 = true;
            								}
HXDLIN(1619)								if (_hx_tmp6) {
HXLINE(1620)									return this->tokenComment(op,_hx_char);
            								}
HXLINE(1621)								this->_hx_char = _hx_char;
HXLINE(1622)								return ::hscriptBase::Token_obj::TOp(pop);
            							}
            						}
            					}
HXLINE(1626)					if (this->idents->__get(_hx_char)) {
HXLINE(1627)						::String id2 = ::String::fromCharCode(_hx_char);
HXLINE(1628)						while(true){
HXLINE(1629)							_hx_char = this->input.cca(this->readPos++);
HXLINE(1630)							if ((_hx_char == 0)) {
HXLINE(1630)								_hx_char = 0;
            							}
HXLINE(1631)							if (!(this->idents->__get(_hx_char))) {
HXLINE(1632)								this->_hx_char = _hx_char;
HXLINE(1633)								return ::hscriptBase::Token_obj::TId(id2);
            							}
HXLINE(1635)							id2 = (id2 + ::String::fromCharCode(_hx_char));
            						}
            					}
HXLINE(1638)					this->invalidChar(_hx_char);
            				}
            			}
HXLINE(1640)			_hx_char = this->input.cca(this->readPos++);
            		}
HXLINE(1418)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,_token,return )

 ::Dynamic Parser_obj::parsePreproCond(){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_1647_parsePreproCond)
HXLINE(1648)		 ::hscriptBase::Token tk = this->token();
HXLINE(1649)		switch((int)(tk->_hx_getIndex())){
            			case (int)2: {
HXLINE(1653)				::String id = tk->_hx_getString(0);
HXLINE(1654)				 ::hscriptBase::ExprDef e = ::hscriptBase::ExprDef_obj::EIdent(id,null());
HXDLIN(1654)				 ::Dynamic pmin = this->tokenMin;
HXDLIN(1654)				 ::Dynamic pmax = this->tokenMax;
HXDLIN(1654)				if (::hx::IsNull( e )) {
HXLINE(1654)					return null();
            				}
            				else {
HXLINE(1654)					if (::hx::IsNull( pmin )) {
HXLINE(1654)						pmin = this->tokenMin;
            					}
HXDLIN(1654)					if (::hx::IsNull( pmax )) {
HXLINE(1654)						pmax = this->tokenMax;
            					}
HXDLIN(1654)					return  ::Dynamic(::hx::Anon_obj::Create(5)
            						->setFixed(0,HX_("e",65,00,00,00),e)
            						->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            						->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax)
            						->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin)
            						->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            				}
            			}
            			break;
            			case (int)3: {
HXLINE(1655)				if ((tk->_hx_getString(0) == HX_("!",21,00,00,00))) {
HXLINE(1656)					 ::hscriptBase::ExprDef e1 = ::hscriptBase::ExprDef_obj::EUnop(HX_("!",21,00,00,00),true,this->parsePreproCond());
HXDLIN(1656)					 ::Dynamic pmin1 = this->tokenMin;
HXDLIN(1656)					 ::Dynamic pmax1 = this->tokenMax;
HXDLIN(1656)					if (::hx::IsNull( e1 )) {
HXLINE(1656)						return null();
            					}
            					else {
HXLINE(1656)						if (::hx::IsNull( pmin1 )) {
HXLINE(1656)							pmin1 = this->tokenMin;
            						}
HXDLIN(1656)						if (::hx::IsNull( pmax1 )) {
HXLINE(1656)							pmax1 = this->tokenMax;
            						}
HXDLIN(1656)						return  ::Dynamic(::hx::Anon_obj::Create(5)
            							->setFixed(0,HX_("e",65,00,00,00),e1)
            							->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            							->setFixed(2,HX_("pmax",34,f0,5a,4a),pmax1)
            							->setFixed(3,HX_("pmin",22,f7,5a,4a),pmin1)
            							->setFixed(4,HX_("origin",e6,19,01,4b),this->origin));
            					}
            				}
            				else {
HXLINE(1658)					return this->unexpected(tk);
            				}
            			}
            			break;
            			case (int)4: {
HXLINE(1651)				{
HXLINE(1651)					this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("t",74,00,00,00),tk)
            						->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            						->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN(1651)					this->tokenMin = this->oldTokenMin;
HXDLIN(1651)					this->tokenMax = this->oldTokenMax;
            				}
HXLINE(1652)				return this->parseExpr();
            			}
            			break;
            			default:{
HXLINE(1658)				return this->unexpected(tk);
            			}
            		}
HXLINE(1649)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parsePreproCond,return )

bool Parser_obj::evalPreproCond( ::Dynamic e){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		bool _hx_run( ::hscriptBase::ExprDef eexpr){
            			HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_1664_evalPreproCond)
HXLINE(1665)			if ((eexpr->_hx_getIndex() == 7)) {
HXLINE(1666)				::String v = eexpr->_hx_getString(0);
HXDLIN(1666)				 ::Dynamic e1 = eexpr->_hx_getObject(1);
HXDLIN(1666)				 ::Dynamic e2 = eexpr->_hx_getObject(2);
HXDLIN(1666)				{
HXLINE(1667)					::String id1 = null();
HXDLIN(1667)					::String id2 = null();
HXLINE(1668)					{
HXLINE(1668)						 ::hscriptBase::ExprDef _g;
HXDLIN(1668)						if (::hx::IsNull( e1 )) {
HXLINE(1668)							_g = null();
            						}
            						else {
HXLINE(1668)							_g = e1->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
            						}
HXDLIN(1668)						switch((int)(_g->_hx_getIndex())){
            							case (int)0: {
HXLINE(1671)								 ::hscriptBase::Const c = _g->_hx_getObject(0).StaticCast<  ::hscriptBase::Const >();
HXLINE(1672)								switch((int)(c->_hx_getIndex())){
            									case (int)0: {
HXLINE(1675)										int v1 = c->_hx_getInt(0);
HXLINE(1676)										id1 = ::Std_obj::string(v1);
            									}
            									break;
            									case (int)1: {
HXLINE(1677)										Float f = c->_hx_getFloat(0);
HXLINE(1678)										id1 = ::Std_obj::string(f);
            									}
            									break;
            									case (int)2: {
HXLINE(1673)										 ::Dynamic _g1 = c->_hx_getObject(1);
HXDLIN(1673)										{
HXLINE(1673)											::String s = c->_hx_getString(0);
HXLINE(1674)											id1 = s;
            										}
            									}
            									break;
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1669)								 ::Dynamic _g2 = _g->_hx_getObject(1);
HXDLIN(1669)								{
HXLINE(1669)									::String e = _g->_hx_getString(0);
HXLINE(1670)									id1 = e;
            								}
            							}
            							break;
            							default:{
            							}
            						}
            					}
HXLINE(1683)					{
HXLINE(1683)						 ::hscriptBase::ExprDef _g3;
HXDLIN(1683)						if (::hx::IsNull( e2 )) {
HXLINE(1683)							_g3 = null();
            						}
            						else {
HXLINE(1683)							_g3 = e2->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
            						}
HXDLIN(1683)						switch((int)(_g3->_hx_getIndex())){
            							case (int)0: {
HXLINE(1686)								 ::hscriptBase::Const c1 = _g3->_hx_getObject(0).StaticCast<  ::hscriptBase::Const >();
HXLINE(1687)								switch((int)(c1->_hx_getIndex())){
            									case (int)0: {
HXLINE(1690)										int v2 = c1->_hx_getInt(0);
HXLINE(1691)										id2 = ::Std_obj::string(v2);
            									}
            									break;
            									case (int)1: {
HXLINE(1692)										Float f1 = c1->_hx_getFloat(0);
HXLINE(1693)										id2 = ::Std_obj::string(f1);
            									}
            									break;
            									case (int)2: {
HXLINE(1688)										 ::Dynamic _g4 = c1->_hx_getObject(1);
HXDLIN(1688)										{
HXLINE(1688)											::String s1 = c1->_hx_getString(0);
HXLINE(1689)											id2 = s1;
            										}
            									}
            									break;
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1684)								 ::Dynamic _g5 = _g3->_hx_getObject(1);
HXDLIN(1684)								{
HXLINE(1684)									::String e3 = _g3->_hx_getString(0);
HXLINE(1685)									id2 = e3;
            								}
            							}
            							break;
            							default:{
            							}
            						}
            					}
HXLINE(1698)					if (::hx::IsNotNull( id1 )) {
HXLINE(1700)						::String definedValue = ::tea::SScript_obj::defines->get_string(id1);
HXLINE(1701)						if (::hx::IsNull( definedValue )) {
HXLINE(1702)							definedValue = id1;
            						}
HXLINE(1703)						bool evalBinop;
HXDLIN(1703)						bool evalBinop1;
HXDLIN(1703)						bool evalBinop2;
HXDLIN(1703)						if (::hx::IsNotNull( definedValue )) {
HXLINE(1703)							evalBinop2 = ::hx::IsNotNull( id2 );
            						}
            						else {
HXLINE(1703)							evalBinop2 = false;
            						}
HXDLIN(1703)						if (evalBinop2) {
HXLINE(1705)							if ((definedValue.indexOf(HX_(".",2e,00,00,00),null()) == -1)) {
HXLINE(1703)								evalBinop1 = (definedValue.indexOf(HX_("-",2d,00,00,00),null()) != -1);
            							}
            							else {
HXLINE(1703)								evalBinop1 = true;
            							}
            						}
            						else {
HXLINE(1703)							evalBinop1 = false;
            						}
HXDLIN(1703)						if (evalBinop1) {
HXLINE(1706)							if ((id2.indexOf(HX_(".",2e,00,00,00),null()) == -1)) {
HXLINE(1703)								evalBinop = (id2.indexOf(HX_("-",2d,00,00,00),null()) != -1);
            							}
            							else {
HXLINE(1703)								evalBinop = true;
            							}
            						}
            						else {
HXLINE(1703)							evalBinop = false;
            						}
HXDLIN(1703)						if (evalBinop) {
HXLINE(1708)							definedValue = definedValue.split(HX_(".",2e,00,00,00))->join(HX_("",00,00,00,00));
HXLINE(1709)							definedValue = definedValue.split(HX_("-",2d,00,00,00))->join(HX_("",00,00,00,00));
HXLINE(1710)							id2 = id2.split(HX_(".",2e,00,00,00))->join(HX_("",00,00,00,00));
HXLINE(1711)							id2 = id2.split(HX_("-",2d,00,00,00))->join(HX_("",00,00,00,00));
HXLINE(1713)							if ((definedValue.length != id2.length)) {
HXLINE(1715)								if ((id2.length < definedValue.length)) {
HXLINE(1716)									while((id2.length < definedValue.length)){
HXLINE(1717)										id2 = (id2 + HX_("0",30,00,00,00));
            									}
            								}
            								else {
HXLINE(1719)									while((definedValue.length < id2.length)){
HXLINE(1720)										id2 = (id2 + HX_("0",30,00,00,00));
            									}
            								}
            							}
            						}
HXLINE(1723)						if (::hx::IsNotNull( definedValue )) {
HXLINE(1725)							 ::Dynamic float2 = ::Std_obj::parseFloat(definedValue);
HXDLIN(1725)							 ::Dynamic float3 = ::Std_obj::parseFloat(id2);
HXLINE(1726)							 ::Dynamic int2 = ::Std_obj::parseInt(definedValue);
HXDLIN(1726)							 ::Dynamic int3 = ::Std_obj::parseInt(id2);
HXLINE(1727)							::String _hx_switch_0 = v;
            							if (  (_hx_switch_0==HX_("!=",fc,1c,00,00)) ){
HXLINE(1736)								if ((id2 != definedValue)) {
HXLINE(1737)									return true;
            								}
            								else {
HXLINE(1738)									bool evalBinop3;
HXDLIN(1738)									bool evalBinop4;
HXDLIN(1738)									if (::hx::IsNotNull( float2 )) {
HXLINE(1738)										evalBinop4 = ::hx::IsNotNull( float3 );
            									}
            									else {
HXLINE(1738)										evalBinop4 = false;
            									}
HXDLIN(1738)									if (evalBinop4) {
HXLINE(1738)										evalBinop3 = ::hx::IsNotEq( float2,float3 );
            									}
            									else {
HXLINE(1738)										evalBinop3 = false;
            									}
HXDLIN(1738)									if (evalBinop3) {
HXLINE(1739)										return true;
            									}
            									else {
HXLINE(1740)										bool evalBinop5;
HXDLIN(1740)										bool evalBinop6;
HXDLIN(1740)										if (::hx::IsNotNull( int2 )) {
HXLINE(1740)											evalBinop6 = ::hx::IsNotNull( int3 );
            										}
            										else {
HXLINE(1740)											evalBinop6 = false;
            										}
HXDLIN(1740)										if (evalBinop6) {
HXLINE(1740)											evalBinop5 = ::hx::IsNotEq( int2,int3 );
            										}
            										else {
HXLINE(1740)											evalBinop5 = false;
            										}
HXDLIN(1740)										if (evalBinop5) {
HXLINE(1741)											return true;
            										}
            									}
            								}
HXLINE(1736)								goto _hx_goto_104;
            							}
            							if (  (_hx_switch_0==HX_("<",3c,00,00,00)) ){
HXLINE(1753)								bool evalBinop7;
HXDLIN(1753)								bool evalBinop8;
HXDLIN(1753)								if (::hx::IsNotNull( float2 )) {
HXLINE(1753)									evalBinop8 = ::hx::IsNotNull( float3 );
            								}
            								else {
HXLINE(1753)									evalBinop8 = false;
            								}
HXDLIN(1753)								if (evalBinop8) {
HXLINE(1753)									evalBinop7 = ::hx::IsLess( float2,float3 );
            								}
            								else {
HXLINE(1753)									evalBinop7 = false;
            								}
HXDLIN(1753)								if (evalBinop7) {
HXLINE(1754)									return true;
            								}
            								else {
HXLINE(1755)									bool evalBinop9;
HXDLIN(1755)									bool evalBinop10;
HXDLIN(1755)									if (::hx::IsNotNull( int2 )) {
HXLINE(1755)										evalBinop10 = ::hx::IsNotNull( int3 );
            									}
            									else {
HXLINE(1755)										evalBinop10 = false;
            									}
HXDLIN(1755)									if (evalBinop10) {
HXLINE(1755)										evalBinop9 = ::hx::IsLess( int2,int3 );
            									}
            									else {
HXLINE(1755)										evalBinop9 = false;
            									}
HXDLIN(1755)									if (evalBinop9) {
HXLINE(1756)										return true;
            									}
            								}
HXLINE(1753)								goto _hx_goto_104;
            							}
            							if (  (_hx_switch_0==HX_("<=",81,34,00,00)) ){
HXLINE(1748)								bool evalBinop11;
HXDLIN(1748)								bool evalBinop12;
HXDLIN(1748)								if (::hx::IsNotNull( float2 )) {
HXLINE(1748)									evalBinop12 = ::hx::IsNotNull( float3 );
            								}
            								else {
HXLINE(1748)									evalBinop12 = false;
            								}
HXDLIN(1748)								if (evalBinop12) {
HXLINE(1748)									evalBinop11 = ::hx::IsLessEq( float2,float3 );
            								}
            								else {
HXLINE(1748)									evalBinop11 = false;
            								}
HXDLIN(1748)								if (evalBinop11) {
HXLINE(1749)									return true;
            								}
            								else {
HXLINE(1750)									bool evalBinop13;
HXDLIN(1750)									bool evalBinop14;
HXDLIN(1750)									if (::hx::IsNotNull( int2 )) {
HXLINE(1750)										evalBinop14 = ::hx::IsNotNull( int3 );
            									}
            									else {
HXLINE(1750)										evalBinop14 = false;
            									}
HXDLIN(1750)									if (evalBinop14) {
HXLINE(1750)										evalBinop13 = ::hx::IsLessEq( int2,int3 );
            									}
            									else {
HXLINE(1750)										evalBinop13 = false;
            									}
HXDLIN(1750)									if (evalBinop13) {
HXLINE(1751)										return true;
            									}
            								}
HXLINE(1748)								goto _hx_goto_104;
            							}
            							if (  (_hx_switch_0==HX_("==",60,35,00,00)) ){
HXLINE(1729)								if ((id2 == definedValue)) {
HXLINE(1730)									return true;
            								}
            								else {
HXLINE(1731)									bool evalBinop15;
HXDLIN(1731)									bool evalBinop16;
HXDLIN(1731)									if (::hx::IsNotNull( float2 )) {
HXLINE(1731)										evalBinop16 = ::hx::IsNotNull( float3 );
            									}
            									else {
HXLINE(1731)										evalBinop16 = false;
            									}
HXDLIN(1731)									if (evalBinop16) {
HXLINE(1731)										evalBinop15 = ::hx::IsEq( float2,float3 );
            									}
            									else {
HXLINE(1731)										evalBinop15 = false;
            									}
HXDLIN(1731)									if (evalBinop15) {
HXLINE(1732)										return true;
            									}
            									else {
HXLINE(1733)										bool evalBinop17;
HXDLIN(1733)										bool evalBinop18;
HXDLIN(1733)										if (::hx::IsNotNull( int2 )) {
HXLINE(1733)											evalBinop18 = ::hx::IsNotNull( int3 );
            										}
            										else {
HXLINE(1733)											evalBinop18 = false;
            										}
HXDLIN(1733)										if (evalBinop18) {
HXLINE(1733)											evalBinop17 = ::hx::IsEq( int2,int3 );
            										}
            										else {
HXLINE(1733)											evalBinop17 = false;
            										}
HXDLIN(1733)										if (evalBinop17) {
HXLINE(1734)											return true;
            										}
            									}
            								}
HXLINE(1729)								goto _hx_goto_104;
            							}
            							if (  (_hx_switch_0==HX_(">",3e,00,00,00)) ){
HXLINE(1758)								bool evalBinop19;
HXDLIN(1758)								bool evalBinop20;
HXDLIN(1758)								if (::hx::IsNotNull( float2 )) {
HXLINE(1758)									evalBinop20 = ::hx::IsNotNull( float3 );
            								}
            								else {
HXLINE(1758)									evalBinop20 = false;
            								}
HXDLIN(1758)								if (evalBinop20) {
HXLINE(1758)									evalBinop19 = ::hx::IsGreater( float2,float3 );
            								}
            								else {
HXLINE(1758)									evalBinop19 = false;
            								}
HXDLIN(1758)								if (evalBinop19) {
HXLINE(1759)									return true;
            								}
            								else {
HXLINE(1760)									bool evalBinop21;
HXDLIN(1760)									bool evalBinop22;
HXDLIN(1760)									if (::hx::IsNotNull( int2 )) {
HXLINE(1760)										evalBinop22 = ::hx::IsNotNull( int3 );
            									}
            									else {
HXLINE(1760)										evalBinop22 = false;
            									}
HXDLIN(1760)									if (evalBinop22) {
HXLINE(1760)										evalBinop21 = ::hx::IsGreater( int2,int3 );
            									}
            									else {
HXLINE(1760)										evalBinop21 = false;
            									}
HXDLIN(1760)									if (evalBinop21) {
HXLINE(1761)										return true;
            									}
            								}
HXLINE(1758)								goto _hx_goto_104;
            							}
            							if (  (_hx_switch_0==HX_(">=",3f,36,00,00)) ){
HXLINE(1743)								bool evalBinop23;
HXDLIN(1743)								bool evalBinop24;
HXDLIN(1743)								if (::hx::IsNotNull( float2 )) {
HXLINE(1743)									evalBinop24 = ::hx::IsNotNull( float3 );
            								}
            								else {
HXLINE(1743)									evalBinop24 = false;
            								}
HXDLIN(1743)								if (evalBinop24) {
HXLINE(1743)									evalBinop23 = ::hx::IsGreaterEq( float2,float3 );
            								}
            								else {
HXLINE(1743)									evalBinop23 = false;
            								}
HXDLIN(1743)								if (evalBinop23) {
HXLINE(1744)									return true;
            								}
            								else {
HXLINE(1745)									bool evalBinop25;
HXDLIN(1745)									bool evalBinop26;
HXDLIN(1745)									if (::hx::IsNotNull( int2 )) {
HXLINE(1745)										evalBinop26 = ::hx::IsNotNull( int3 );
            									}
            									else {
HXLINE(1745)										evalBinop26 = false;
            									}
HXDLIN(1745)									if (evalBinop26) {
HXLINE(1745)										evalBinop25 = ::hx::IsGreaterEq( int2,int3 );
            									}
            									else {
HXLINE(1745)										evalBinop25 = false;
            									}
HXDLIN(1745)									if (evalBinop25) {
HXLINE(1746)										return true;
            									}
            								}
HXLINE(1743)								goto _hx_goto_104;
            							}
            							_hx_goto_104:;
            						}
            					}
            				}
            			}
HXLINE(1769)			return false;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_948055e9f9c336b1_1662_evalPreproCond)
HXLINE(1663)		 ::Dynamic evalBinop =  ::Dynamic(new _hx_Closure_0());
HXLINE(1772)		 ::hscriptBase::ExprDef expr1 = e->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
HXLINE(1773)		switch((int)(expr1->_hx_getIndex())){
            			case (int)1: {
HXLINE(1774)				 ::Dynamic _g = expr1->_hx_getObject(1);
HXDLIN(1774)				::String id = expr1->_hx_getString(0);
HXLINE(1775)				return ::tea::SScript_obj::defines->exists(id);
            			}
            			break;
            			case (int)4: {
HXLINE(1778)				 ::Dynamic e1 = expr1->_hx_getObject(0);
HXLINE(1779)				return this->evalPreproCond(e1);
            			}
            			break;
            			case (int)7: {
HXLINE(1794)				 ::Dynamic _g1 = expr1->_hx_getObject(1);
HXDLIN(1794)				 ::Dynamic _g2 = expr1->_hx_getObject(2);
HXDLIN(1794)				::String _hx_switch_1 = expr1->_hx_getString(0);
            				if (  (_hx_switch_1==HX_("!=",fc,1c,00,00)) ){
HXLINE(1790)					 ::Dynamic e11 = _g1;
HXDLIN(1790)					 ::Dynamic e2 = _g2;
HXLINE(1791)					return ( (bool)(evalBinop(expr1)) );
HXLINE(1790)					goto _hx_goto_105;
            				}
            				if (  (_hx_switch_1==HX_("&&",40,21,00,00)) ){
HXLINE(1792)					 ::Dynamic e12 = _g1;
HXDLIN(1792)					 ::Dynamic e21 = _g2;
HXLINE(1793)					if (this->evalPreproCond(e12)) {
HXLINE(1793)						return this->evalPreproCond(e21);
            					}
            					else {
HXLINE(1793)						return false;
            					}
HXLINE(1792)					goto _hx_goto_105;
            				}
            				if (  (_hx_switch_1==HX_("<",3c,00,00,00)) ){
HXLINE(1786)					 ::Dynamic e13 = _g1;
HXDLIN(1786)					 ::Dynamic e22 = _g2;
HXLINE(1787)					return ( (bool)(evalBinop(expr1)) );
HXLINE(1786)					goto _hx_goto_105;
            				}
            				if (  (_hx_switch_1==HX_("<=",81,34,00,00)) ){
HXLINE(1784)					 ::Dynamic e14 = _g1;
HXDLIN(1784)					 ::Dynamic e23 = _g2;
HXLINE(1785)					return ( (bool)(evalBinop(expr1)) );
HXLINE(1784)					goto _hx_goto_105;
            				}
            				if (  (_hx_switch_1==HX_("==",60,35,00,00)) ){
HXLINE(1780)					 ::Dynamic e15 = _g1;
HXDLIN(1780)					 ::Dynamic e24 = _g2;
HXLINE(1781)					return ( (bool)(evalBinop(expr1)) );
HXLINE(1780)					goto _hx_goto_105;
            				}
            				if (  (_hx_switch_1==HX_(">",3e,00,00,00)) ){
HXLINE(1788)					 ::Dynamic e16 = _g1;
HXDLIN(1788)					 ::Dynamic e25 = _g2;
HXLINE(1789)					return ( (bool)(evalBinop(expr1)) );
HXLINE(1788)					goto _hx_goto_105;
            				}
            				if (  (_hx_switch_1==HX_(">=",3f,36,00,00)) ){
HXLINE(1782)					 ::Dynamic e17 = _g1;
HXDLIN(1782)					 ::Dynamic e26 = _g2;
HXLINE(1783)					return ( (bool)(evalBinop(expr1)) );
HXLINE(1782)					goto _hx_goto_105;
            				}
            				if (  (_hx_switch_1==HX_("||",80,6c,00,00)) ){
HXLINE(1794)					 ::Dynamic e18 = _g1;
HXDLIN(1794)					 ::Dynamic e27 = _g2;
HXLINE(1795)					if (!(this->evalPreproCond(e18))) {
HXLINE(1795)						return this->evalPreproCond(e27);
            					}
            					else {
HXLINE(1795)						return true;
            					}
HXLINE(1794)					goto _hx_goto_105;
            				}
            				/* default */{
HXLINE(1797)					{
HXLINE(1797)						 ::hscriptBase::ErrorDef err = ::hscriptBase::ErrorDef_obj::EInvalidPreprocessor((HX_("Can't eval ",01,17,bf,09) + ::Type_obj::enumConstructor(e->__Field(HX_("e",65,00,00,00),::hx::paccDynamic))));
HXDLIN(1797)						 ::Dynamic pmin = this->readPos;
HXDLIN(1797)						 ::Dynamic pmax = this->readPos;
HXDLIN(1797)						 ::hscriptBase::Error e3 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err,( (int)(pmin) ),( (int)(pmax) ),this->origin,this->line);
HXDLIN(1797)						if (!(this->resumeErrors)) {
HXLINE(1797)							HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err,( (int)(pmin) ),( (int)(pmax) ),this->origin,this->line));
            						}
            					}
HXLINE(1798)					return false;
            				}
            				_hx_goto_105:;
            			}
            			break;
            			case (int)9: {
HXLINE(1776)				bool _g3 = expr1->_hx_getBool(1);
HXDLIN(1776)				if ((expr1->_hx_getString(0) == HX_("!",21,00,00,00))) {
HXLINE(1776)					 ::Dynamic e4 = expr1->_hx_getObject(2);
HXLINE(1777)					return !(this->evalPreproCond(e4));
            				}
            				else {
HXLINE(1797)					{
HXLINE(1797)						 ::hscriptBase::ErrorDef err1 = ::hscriptBase::ErrorDef_obj::EInvalidPreprocessor((HX_("Can't eval ",01,17,bf,09) + ::Type_obj::enumConstructor(e->__Field(HX_("e",65,00,00,00),::hx::paccDynamic))));
HXDLIN(1797)						 ::Dynamic pmin1 = this->readPos;
HXDLIN(1797)						 ::Dynamic pmax1 = this->readPos;
HXDLIN(1797)						 ::hscriptBase::Error e5 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err1,( (int)(pmin1) ),( (int)(pmax1) ),this->origin,this->line);
HXDLIN(1797)						if (!(this->resumeErrors)) {
HXLINE(1797)							HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err1,( (int)(pmin1) ),( (int)(pmax1) ),this->origin,this->line));
            						}
            					}
HXLINE(1798)					return false;
            				}
            			}
            			break;
            			default:{
HXLINE(1797)				{
HXLINE(1797)					 ::hscriptBase::ErrorDef err2 = ::hscriptBase::ErrorDef_obj::EInvalidPreprocessor((HX_("Can't eval ",01,17,bf,09) + ::Type_obj::enumConstructor(e->__Field(HX_("e",65,00,00,00),::hx::paccDynamic))));
HXDLIN(1797)					 ::Dynamic pmin2 = this->readPos;
HXDLIN(1797)					 ::Dynamic pmax2 = this->readPos;
HXDLIN(1797)					 ::hscriptBase::Error e6 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err2,( (int)(pmin2) ),( (int)(pmax2) ),this->origin,this->line);
HXDLIN(1797)					if (!(this->resumeErrors)) {
HXLINE(1797)						HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err2,( (int)(pmin2) ),( (int)(pmax2) ),this->origin,this->line));
            					}
            				}
HXLINE(1798)				return false;
            			}
            		}
HXLINE(1773)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,evalPreproCond,return )

 ::hscriptBase::Token Parser_obj::preprocess(::String id){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hscriptBase::Parser,_gthis) HXARGC(0)
            		bool _hx_run(){
            			HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_1805_preprocess)
HXLINE(1806)			{
HXLINE(1806)				int _g = 0;
HXDLIN(1806)				::Array< ::Dynamic> _g1 = _gthis->poppedStack;
HXDLIN(1806)				while((_g < _g1->length)){
HXLINE(1806)					 ::Dynamic i = _g1->__get(_g);
HXDLIN(1806)					_g = (_g + 1);
HXLINE(1807)					if (( (bool)(i->__Field(HX_("r",72,00,00,00),::hx::paccDynamic)) )) {
HXLINE(1807)						return true;
            					}
            				}
            			}
HXLINE(1809)			return false;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_GC_STACKFRAME(&_hx_pos_948055e9f9c336b1_1803_preprocess)
HXDLIN(1803)		 ::hscriptBase::Parser _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1804)		 ::Dynamic containsTrue =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE(1811)		::String _hx_switch_0 = id;
            		if (  (_hx_switch_0==HX_("else",b9,e4,14,43)) ||  (_hx_switch_0==HX_("elseif",d6,a0,a2,dd)) ){
HXLINE(1824)			if ((this->preprocStack->length > 0)) {
HXLINE(1825)				if (( (bool)(this->preprocStack->__get((this->preprocStack->length - 1))->__Field(HX_("r",72,00,00,00),::hx::paccDynamic)) )) {
HXLINE(1826)					this->preprocStack->__get((this->preprocStack->length - 1))->__SetField(HX_("r",72,00,00,00),false,::hx::paccDynamic);
HXLINE(1827)					this->skipTokens();
HXLINE(1828)					return this->token();
            				}
            				else {
HXLINE(1829)					if ((id == HX_("else",b9,e4,14,43))) {
HXLINE(1830)						if (!(( (bool)(containsTrue()) ))) {
HXLINE(1832)							::Array< ::Dynamic> _hx_tmp = this->poppedStack;
HXDLIN(1832)							_hx_tmp->push(this->preprocStack->pop());
HXLINE(1833)							this->preprocStack->push( ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("r",72,00,00,00),true)));
            						}
HXLINE(1835)						return this->token();
            					}
            					else {
HXLINE(1838)						this->preprocStack->pop();
HXLINE(1839)						 ::hscriptBase::Token t = this->preprocess(HX_("if",dd,5b,00,00));
HXLINE(1840)						return t;
            					}
            				}
            			}
            			else {
HXLINE(1850)				{
HXLINE(1850)					 ::hscriptBase::ErrorDef err = ::hscriptBase::ErrorDef_obj::ECustom((HX_("Unexpected ",0f,99,d1,53) + id));
HXDLIN(1850)					 ::Dynamic pmin = null();
HXDLIN(1850)					 ::Dynamic pmax = null();
HXDLIN(1850)					 ::hscriptBase::Error e =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err,( (int)(pmin) ),( (int)(pmax) ),this->origin,this->line);
HXDLIN(1850)					if (!(this->resumeErrors)) {
HXLINE(1850)						HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err,( (int)(pmin) ),( (int)(pmax) ),this->origin,this->line));
            					}
            				}
HXLINE(1851)				return null();
            			}
HXLINE(1824)			goto _hx_goto_109;
            		}
            		if (  (_hx_switch_0==HX_("end",db,03,4d,00)) ){
HXLINE(1842)			if ((this->preprocStack->length > 0)) {
HXLINE(1843)				while((this->poppedStack->length > 0)){
HXLINE(1844)					this->poppedStack->pop();
            				}
HXLINE(1846)				this->preprocStack->pop();
HXLINE(1847)				 ::hscriptBase::Token t1 = this->token();
HXLINE(1848)				return t1;
            			}
            			else {
HXLINE(1850)				{
HXLINE(1850)					 ::hscriptBase::ErrorDef err1 = ::hscriptBase::ErrorDef_obj::ECustom((HX_("Unexpected ",0f,99,d1,53) + id));
HXDLIN(1850)					 ::Dynamic pmin1 = null();
HXDLIN(1850)					 ::Dynamic pmax1 = null();
HXDLIN(1850)					 ::hscriptBase::Error e1 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err1,( (int)(pmin1) ),( (int)(pmax1) ),this->origin,this->line);
HXDLIN(1850)					if (!(this->resumeErrors)) {
HXLINE(1850)						HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err1,( (int)(pmin1) ),( (int)(pmax1) ),this->origin,this->line));
            					}
            				}
HXLINE(1851)				return null();
            			}
HXLINE(1842)			goto _hx_goto_109;
            		}
            		if (  (_hx_switch_0==HX_("if",dd,5b,00,00)) ){
HXLINE(1813)			 ::Dynamic e2 = this->parsePreproCond();
HXLINE(1814)			if (this->evalPreproCond(e2)) {
HXLINE(1815)				this->preprocStack->push( ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("r",72,00,00,00),true)));
HXLINE(1816)				this->poppedStack->push( ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("r",72,00,00,00),true)));
HXLINE(1817)				 ::hscriptBase::Token t2 = this->token();
HXLINE(1818)				return t2;
            			}
HXLINE(1820)			this->preprocStack->push( ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("r",72,00,00,00),false)));
HXLINE(1821)			this->poppedStack->push( ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("r",72,00,00,00),false)));
HXLINE(1822)			this->skipTokens();
HXLINE(1823)			return this->token();
HXLINE(1812)			goto _hx_goto_109;
            		}
            		/* default */{
HXLINE(1850)			{
HXLINE(1850)				 ::hscriptBase::ErrorDef err2 = ::hscriptBase::ErrorDef_obj::ECustom((HX_("Unexpected ",0f,99,d1,53) + id));
HXDLIN(1850)				 ::Dynamic pmin2 = null();
HXDLIN(1850)				 ::Dynamic pmax2 = null();
HXDLIN(1850)				 ::hscriptBase::Error e3 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err2,( (int)(pmin2) ),( (int)(pmax2) ),this->origin,this->line);
HXDLIN(1850)				if (!(this->resumeErrors)) {
HXLINE(1850)					HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err2,( (int)(pmin2) ),( (int)(pmax2) ),this->origin,this->line));
            				}
            			}
HXLINE(1851)			return null();
            		}
            		_hx_goto_109:;
HXLINE(1811)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,preprocess,return )

void Parser_obj::skipTokens(){
            	HX_GC_STACKFRAME(&_hx_pos_948055e9f9c336b1_1855_skipTokens)
HXLINE(1856)		int spos = (this->preprocStack->length - 1);
HXLINE(1857)		 ::Dynamic obj = this->preprocStack->__get(spos);
HXLINE(1858)		int pos = this->readPos;
HXLINE(1859)		while(true){
HXLINE(1860)			 ::hscriptBase::Token tk = this->token();
HXLINE(1861)			bool _hx_tmp;
HXDLIN(1861)			if (::hx::IsPointerEq( tk,::hscriptBase::Token_obj::TEof_dyn() )) {
HXLINE(1861)				_hx_tmp = (this->preprocStack->length >= 1);
            			}
            			else {
HXLINE(1861)				_hx_tmp = false;
            			}
HXDLIN(1861)			if (_hx_tmp) {
HXLINE(1862)				 ::hscriptBase::ErrorDef err = ::hscriptBase::ErrorDef_obj::EInvalidPreprocessor(HX_("Unclosed",e5,94,4a,ea));
HXDLIN(1862)				 ::hscriptBase::Error e =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err,pos,pos,this->origin,this->line);
HXDLIN(1862)				if (!(this->resumeErrors)) {
HXLINE(1862)					HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err,pos,pos,this->origin,this->line));
            				}
            			}
HXLINE(1863)			if (::hx::IsNotEq( this->preprocStack->__get(spos),obj )) {
HXLINE(1864)				{
HXLINE(1864)					this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("t",74,00,00,00),tk)
            						->setFixed(1,HX_("max",a4,0a,53,00),this->tokenMax)
            						->setFixed(2,HX_("min",92,11,53,00),this->tokenMin)));
HXDLIN(1864)					this->tokenMin = this->oldTokenMin;
HXDLIN(1864)					this->tokenMax = this->oldTokenMax;
            				}
HXLINE(1865)				goto _hx_goto_113;
            			}
            		}
            		_hx_goto_113:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,skipTokens,(void))

 ::hscriptBase::Token Parser_obj::tokenComment(::String op,int _hx_char){
            	HX_GC_STACKFRAME(&_hx_pos_948055e9f9c336b1_1870_tokenComment)
HXLINE(1871)		 ::Dynamic c = op.charCodeAt(1);
HXLINE(1872)		::String s = this->input;
HXLINE(1873)		if (::hx::IsEq( c,47 )) {
HXLINE(1874)			do {
HXLINE(1874)				bool _hx_tmp;
HXDLIN(1874)				if ((_hx_char != 13)) {
HXLINE(1874)					_hx_tmp = (_hx_char != 10);
            				}
            				else {
HXLINE(1874)					_hx_tmp = false;
            				}
HXDLIN(1874)				if (!(_hx_tmp)) {
HXLINE(1874)					goto _hx_goto_115;
            				}
HXLINE(1875)				_hx_char = this->input.cca(this->readPos++);
            			} while((_hx_char != 0));
            			_hx_goto_115:;
HXLINE(1878)			this->_hx_char = _hx_char;
HXLINE(1879)			return this->token();
            		}
HXLINE(1881)		if (::hx::IsEq( c,42 )) {
HXLINE(1882)			int old = this->line;
HXLINE(1883)			if ((op == HX_("/**/",a0,0a,31,1f))) {
HXLINE(1884)				this->_hx_char = _hx_char;
HXLINE(1885)				return this->token();
            			}
HXLINE(1887)			do {
HXLINE(1888)				while((_hx_char != 42)){
HXLINE(1889)					if ((_hx_char == 10)) {
HXLINE(1889)						this->line++;
            					}
HXLINE(1890)					_hx_char = this->input.cca(this->readPos++);
HXLINE(1891)					if ((_hx_char == 0)) {
HXLINE(1892)						this->line = old;
HXLINE(1893)						{
HXLINE(1893)							 ::hscriptBase::ErrorDef err = ::hscriptBase::ErrorDef_obj::EUnterminatedComment_dyn();
HXDLIN(1893)							 ::Dynamic pmin = this->tokenMin;
HXDLIN(1893)							 ::Dynamic pmax = this->tokenMin;
HXDLIN(1893)							 ::hscriptBase::Error e =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err,( (int)(pmin) ),( (int)(pmax) ),this->origin,this->line);
HXDLIN(1893)							if (!(this->resumeErrors)) {
HXLINE(1893)								HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err,( (int)(pmin) ),( (int)(pmax) ),this->origin,this->line));
            							}
            						}
HXLINE(1894)						goto _hx_goto_117;
            					}
            				}
            				_hx_goto_117:;
HXLINE(1897)				_hx_char = this->input.cca(this->readPos++);
HXLINE(1898)				if ((_hx_char == 0)) {
HXLINE(1899)					this->line = old;
HXLINE(1900)					{
HXLINE(1900)						 ::hscriptBase::ErrorDef err1 = ::hscriptBase::ErrorDef_obj::EUnterminatedComment_dyn();
HXDLIN(1900)						 ::Dynamic pmin1 = this->tokenMin;
HXDLIN(1900)						 ::Dynamic pmax1 = this->tokenMin;
HXDLIN(1900)						 ::hscriptBase::Error e1 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,err1,( (int)(pmin1) ),( (int)(pmax1) ),this->origin,this->line);
HXDLIN(1900)						if (!(this->resumeErrors)) {
HXLINE(1900)							HX_STACK_DO_THROW( ::hscriptBase::Error_obj::__alloc( HX_CTX ,err1,( (int)(pmin1) ),( (int)(pmax1) ),this->origin,this->line));
            						}
            					}
HXLINE(1901)					goto _hx_goto_116;
            				}
            			} while((_hx_char != 47));
            			_hx_goto_116:;
HXLINE(1906)			return this->token();
            		}
HXLINE(1908)		this->_hx_char = _hx_char;
HXLINE(1909)		return ::hscriptBase::Token_obj::TOp(op);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,tokenComment,return )

::Array< ::String > Parser_obj::notAllowedFieldNames;

::String Parser_obj::constString( ::hscriptBase::Const c){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_1913_constString)
HXDLIN(1913)		switch((int)(c->_hx_getIndex())){
            			case (int)0: {
HXLINE(1914)				int v = c->_hx_getInt(0);
HXDLIN(1914)				return ::Std_obj::string(v);
            			}
            			break;
            			case (int)1: {
HXLINE(1915)				Float f = c->_hx_getFloat(0);
HXDLIN(1915)				return ::Std_obj::string(f);
            			}
            			break;
            			case (int)2: {
HXLINE(1916)				 ::Dynamic _g = c->_hx_getObject(1);
HXDLIN(1916)				::String s = c->_hx_getString(0);
HXDLIN(1916)				return s;
            			}
            			break;
            		}
HXLINE(1913)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,constString,return )

::String Parser_obj::tokenString( ::hscriptBase::Token t){
            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_1924_tokenString)
HXDLIN(1924)		switch((int)(t->_hx_getIndex())){
            			case (int)0: {
HXLINE(1925)				return HX_("<eof>",3e,ee,21,cf);
            			}
            			break;
            			case (int)1: {
HXLINE(1926)				 ::hscriptBase::Const c = t->_hx_getObject(0).StaticCast<  ::hscriptBase::Const >();
HXDLIN(1926)				return ::hscriptBase::Parser_obj::constString(c);
            			}
            			break;
            			case (int)2: {
HXLINE(1927)				::String s = t->_hx_getString(0);
HXDLIN(1927)				return s;
            			}
            			break;
            			case (int)3: {
HXLINE(1928)				::String s1 = t->_hx_getString(0);
HXDLIN(1928)				return s1;
            			}
            			break;
            			case (int)4: {
HXLINE(1929)				return HX_("(",28,00,00,00);
            			}
            			break;
            			case (int)5: {
HXLINE(1930)				return HX_(")",29,00,00,00);
            			}
            			break;
            			case (int)6: {
HXLINE(1931)				return HX_("{",7b,00,00,00);
            			}
            			break;
            			case (int)7: {
HXLINE(1932)				return HX_("}",7d,00,00,00);
            			}
            			break;
            			case (int)8: {
HXLINE(1933)				return HX_(".",2e,00,00,00);
            			}
            			break;
            			case (int)9: {
HXLINE(1934)				return HX_(",",2c,00,00,00);
            			}
            			break;
            			case (int)10: {
HXLINE(1935)				return HX_(";",3b,00,00,00);
            			}
            			break;
            			case (int)11: {
HXLINE(1945)				return null();
            			}
            			break;
            			case (int)12: {
HXLINE(1936)				return HX_("[",5b,00,00,00);
            			}
            			break;
            			case (int)13: {
HXLINE(1937)				return HX_("]",5d,00,00,00);
            			}
            			break;
            			case (int)14: {
HXLINE(1938)				return HX_("?.",0f,37,00,00);
            			}
            			break;
            			case (int)15: {
HXLINE(1939)				return HX_("??",20,37,00,00);
            			}
            			break;
            			case (int)16: {
HXLINE(1940)				return HX_("??=",1d,05,30,00);
            			}
            			break;
            			case (int)17: {
HXLINE(1941)				return HX_("?",3f,00,00,00);
            			}
            			break;
            			case (int)18: {
HXLINE(1942)				return HX_(":",3a,00,00,00);
            			}
            			break;
            			case (int)19: {
HXLINE(1943)				::String id = t->_hx_getString(0);
HXDLIN(1943)				return (HX_("@",40,00,00,00) + id);
            			}
            			break;
            			case (int)20: {
HXLINE(1944)				::String id1 = t->_hx_getString(0);
HXDLIN(1944)				return (HX_("#",23,00,00,00) + id1);
            			}
            			break;
            		}
HXLINE(1924)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,tokenString,return )


::hx::ObjectPtr< Parser_obj > Parser_obj::__new() {
	::hx::ObjectPtr< Parser_obj > __this = new Parser_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Parser_obj > Parser_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Parser_obj *__this = (Parser_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Parser_obj), true, "hscriptBase.Parser"));
	*(void **)__this = Parser_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Parser_obj::Parser_obj()
{
}

void Parser_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Parser);
	HX_MARK_MEMBER_NAME(line,"line");
	HX_MARK_MEMBER_NAME(opChars,"opChars");
	HX_MARK_MEMBER_NAME(identChars,"identChars");
	HX_MARK_MEMBER_NAME(opPriority,"opPriority");
	HX_MARK_MEMBER_NAME(opRightAssoc,"opRightAssoc");
	HX_MARK_MEMBER_NAME(packaged,"packaged");
	HX_MARK_MEMBER_NAME(allowJSON,"allowJSON");
	HX_MARK_MEMBER_NAME(allowTypes,"allowTypes");
	HX_MARK_MEMBER_NAME(resumeErrors,"resumeErrors");
	HX_MARK_MEMBER_NAME(input,"input");
	HX_MARK_MEMBER_NAME(readPos,"readPos");
	HX_MARK_MEMBER_NAME(_hx_char,"char");
	HX_MARK_MEMBER_NAME(ops,"ops");
	HX_MARK_MEMBER_NAME(idents,"idents");
	HX_MARK_MEMBER_NAME(uid,"uid");
	HX_MARK_MEMBER_NAME(origin,"origin");
	HX_MARK_MEMBER_NAME(tokenMin,"tokenMin");
	HX_MARK_MEMBER_NAME(tokenMax,"tokenMax");
	HX_MARK_MEMBER_NAME(oldTokenMin,"oldTokenMin");
	HX_MARK_MEMBER_NAME(oldTokenMax,"oldTokenMax");
	HX_MARK_MEMBER_NAME(tokens,"tokens");
	HX_MARK_MEMBER_NAME(preprocStack,"preprocStack");
	HX_MARK_MEMBER_NAME(poppedStack,"poppedStack");
	HX_MARK_END_CLASS();
}

void Parser_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(line,"line");
	HX_VISIT_MEMBER_NAME(opChars,"opChars");
	HX_VISIT_MEMBER_NAME(identChars,"identChars");
	HX_VISIT_MEMBER_NAME(opPriority,"opPriority");
	HX_VISIT_MEMBER_NAME(opRightAssoc,"opRightAssoc");
	HX_VISIT_MEMBER_NAME(packaged,"packaged");
	HX_VISIT_MEMBER_NAME(allowJSON,"allowJSON");
	HX_VISIT_MEMBER_NAME(allowTypes,"allowTypes");
	HX_VISIT_MEMBER_NAME(resumeErrors,"resumeErrors");
	HX_VISIT_MEMBER_NAME(input,"input");
	HX_VISIT_MEMBER_NAME(readPos,"readPos");
	HX_VISIT_MEMBER_NAME(_hx_char,"char");
	HX_VISIT_MEMBER_NAME(ops,"ops");
	HX_VISIT_MEMBER_NAME(idents,"idents");
	HX_VISIT_MEMBER_NAME(uid,"uid");
	HX_VISIT_MEMBER_NAME(origin,"origin");
	HX_VISIT_MEMBER_NAME(tokenMin,"tokenMin");
	HX_VISIT_MEMBER_NAME(tokenMax,"tokenMax");
	HX_VISIT_MEMBER_NAME(oldTokenMin,"oldTokenMin");
	HX_VISIT_MEMBER_NAME(oldTokenMax,"oldTokenMax");
	HX_VISIT_MEMBER_NAME(tokens,"tokens");
	HX_VISIT_MEMBER_NAME(preprocStack,"preprocStack");
	HX_VISIT_MEMBER_NAME(poppedStack,"poppedStack");
}

::hx::Val Parser_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"mk") ) { return ::hx::Val( mk_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"ops") ) { return ::hx::Val( ops ); }
		if (HX_FIELD_EQ(inName,"uid") ) { return ::hx::Val( uid ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { return ::hx::Val( line ); }
		if (HX_FIELD_EQ(inName,"char") ) { return ::hx::Val( _hx_char ); }
		if (HX_FIELD_EQ(inName,"push") ) { return ::hx::Val( push_dyn() ); }
		if (HX_FIELD_EQ(inName,"expr") ) { return ::hx::Val( expr_dyn() ); }
		if (HX_FIELD_EQ(inName,"pmin") ) { return ::hx::Val( pmin_dyn() ); }
		if (HX_FIELD_EQ(inName,"pmax") ) { return ::hx::Val( pmax_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"input") ) { return ::hx::Val( input ); }
		if (HX_FIELD_EQ(inName,"error") ) { return ::hx::Val( error_dyn() ); }
		if (HX_FIELD_EQ(inName,"maybe") ) { return ::hx::Val( maybe_dyn() ); }
		if (HX_FIELD_EQ(inName,"token") ) { return ::hx::Val( token_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"idents") ) { return ::hx::Val( idents ); }
		if (HX_FIELD_EQ(inName,"origin") ) { return ::hx::Val( origin ); }
		if (HX_FIELD_EQ(inName,"tokens") ) { return ::hx::Val( tokens ); }
		if (HX_FIELD_EQ(inName,"ensure") ) { return ::hx::Val( ensure_dyn() ); }
		if (HX_FIELD_EQ(inName,"_token") ) { return ::hx::Val( _token_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"opChars") ) { return ::hx::Val( opChars ); }
		if (HX_FIELD_EQ(inName,"readPos") ) { return ::hx::Val( readPos ); }
		if (HX_FIELD_EQ(inName,"isBlock") ) { return ::hx::Val( isBlock_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"packaged") ) { return ::hx::Val( packaged ); }
		if (HX_FIELD_EQ(inName,"tokenMin") ) { return ::hx::Val( tokenMin ); }
		if (HX_FIELD_EQ(inName,"tokenMax") ) { return ::hx::Val( tokenMax ); }
		if (HX_FIELD_EQ(inName,"getIdent") ) { return ::hx::Val( getIdent_dyn() ); }
		if (HX_FIELD_EQ(inName,"mapCompr") ) { return ::hx::Val( mapCompr_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeUnop") ) { return ::hx::Val( makeUnop_dyn() ); }
		if (HX_FIELD_EQ(inName,"readChar") ) { return ::hx::Val( readChar_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"allowJSON") ) { return ::hx::Val( allowJSON ); }
		if (HX_FIELD_EQ(inName,"parseExpr") ) { return ::hx::Val( parseExpr_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeBinop") ) { return ::hx::Val( makeBinop_dyn() ); }
		if (HX_FIELD_EQ(inName,"parsePath") ) { return ::hx::Val( parsePath_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseType") ) { return ::hx::Val( parseType_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"identChars") ) { return ::hx::Val( identChars ); }
		if (HX_FIELD_EQ(inName,"opPriority") ) { return ::hx::Val( opPriority ); }
		if (HX_FIELD_EQ(inName,"allowTypes") ) { return ::hx::Val( allowTypes ); }
		if (HX_FIELD_EQ(inName,"initParser") ) { return ::hx::Val( initParser_dyn() ); }
		if (HX_FIELD_EQ(inName,"unexpected") ) { return ::hx::Val( unexpected_dyn() ); }
		if (HX_FIELD_EQ(inName,"readString") ) { return ::hx::Val( readString_dyn() ); }
		if (HX_FIELD_EQ(inName,"preprocess") ) { return ::hx::Val( preprocess_dyn() ); }
		if (HX_FIELD_EQ(inName,"skipTokens") ) { return ::hx::Val( skipTokens_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"oldTokenMin") ) { return ::hx::Val( oldTokenMin ); }
		if (HX_FIELD_EQ(inName,"oldTokenMax") ) { return ::hx::Val( oldTokenMax ); }
		if (HX_FIELD_EQ(inName,"invalidChar") ) { return ::hx::Val( invalidChar_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseString") ) { return ::hx::Val( parseString_dyn() ); }
		if (HX_FIELD_EQ(inName,"ensureToken") ) { return ::hx::Val( ensureToken_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseObject") ) { return ::hx::Val( parseObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseLambda") ) { return ::hx::Val( parseLambda_dyn() ); }
		if (HX_FIELD_EQ(inName,"poppedStack") ) { return ::hx::Val( poppedStack ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"opRightAssoc") ) { return ::hx::Val( opRightAssoc ); }
		if (HX_FIELD_EQ(inName,"resumeErrors") ) { return ::hx::Val( resumeErrors ); }
		if (HX_FIELD_EQ(inName,"preprocStack") ) { return ::hx::Val( preprocStack ); }
		if (HX_FIELD_EQ(inName,"tokenComment") ) { return ::hx::Val( tokenComment_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"parseFullExpr") ) { return ::hx::Val( parseFullExpr_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseMetaArgs") ) { return ::hx::Val( parseMetaArgs_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseExprNext") ) { return ::hx::Val( parseExprNext_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseTypeNext") ) { return ::hx::Val( parseTypeNext_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseExprList") ) { return ::hx::Val( parseExprList_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"parseStructure") ) { return ::hx::Val( parseStructure_dyn() ); }
		if (HX_FIELD_EQ(inName,"evalPreproCond") ) { return ::hx::Val( evalPreproCond_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"parsePreproCond") ) { return ::hx::Val( parsePreproCond_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"parseFunctionArgs") ) { return ::hx::Val( parseFunctionArgs_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseFunctionDecl") ) { return ::hx::Val( parseFunctionDecl_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Parser_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"constString") ) { outValue = constString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tokenString") ) { outValue = tokenString_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"notAllowedFieldNames") ) { outValue = ( notAllowedFieldNames ); return true; }
	}
	return false;
}

::hx::Val Parser_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ops") ) { ops=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uid") ) { uid=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { line=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"char") ) { _hx_char=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"input") ) { input=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"idents") ) { idents=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"origin") ) { origin=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tokens") ) { tokens=inValue.Cast<  ::haxe::ds::List >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"opChars") ) { opChars=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"readPos") ) { readPos=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"packaged") ) { packaged=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tokenMin") ) { tokenMin=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tokenMax") ) { tokenMax=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"allowJSON") ) { allowJSON=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"identChars") ) { identChars=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opPriority") ) { opPriority=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowTypes") ) { allowTypes=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"oldTokenMin") ) { oldTokenMin=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"oldTokenMax") ) { oldTokenMax=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"poppedStack") ) { poppedStack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"opRightAssoc") ) { opRightAssoc=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"resumeErrors") ) { resumeErrors=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"preprocStack") ) { preprocStack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Parser_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 20:
		if (HX_FIELD_EQ(inName,"notAllowedFieldNames") ) { notAllowedFieldNames=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

void Parser_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("line",f4,17,b3,47));
	outFields->push(HX_("opChars",fc,f3,a7,a8));
	outFields->push(HX_("identChars",cd,23,3f,ee));
	outFields->push(HX_("opPriority",a5,21,d8,3e));
	outFields->push(HX_("opRightAssoc",9a,d1,fe,02));
	outFields->push(HX_("packaged",1e,ea,54,39));
	outFields->push(HX_("allowJSON",31,27,44,b1));
	outFields->push(HX_("allowTypes",30,2b,97,45));
	outFields->push(HX_("resumeErrors",38,61,37,31));
	outFields->push(HX_("input",0a,c4,1d,be));
	outFields->push(HX_("readPos",de,03,cf,02));
	outFields->push(HX_("char",d6,5e,bf,41));
	outFields->push(HX_("ops",32,9c,54,00));
	outFields->push(HX_("idents",83,4f,a1,d2));
	outFields->push(HX_("uid",90,23,59,00));
	outFields->push(HX_("origin",e6,19,01,4b));
	outFields->push(HX_("tokenMin",19,a8,42,2b));
	outFields->push(HX_("tokenMax",2b,a1,42,2b));
	outFields->push(HX_("oldTokenMin",e0,7b,1c,6b));
	outFields->push(HX_("oldTokenMax",f2,74,1c,6b));
	outFields->push(HX_("tokens",5a,17,e7,91));
	outFields->push(HX_("preprocStack",4f,d3,9d,7a));
	outFields->push(HX_("poppedStack",8a,8a,29,8c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Parser_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Parser_obj,line),HX_("line",f4,17,b3,47)},
	{::hx::fsString,(int)offsetof(Parser_obj,opChars),HX_("opChars",fc,f3,a7,a8)},
	{::hx::fsString,(int)offsetof(Parser_obj,identChars),HX_("identChars",cd,23,3f,ee)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Parser_obj,opPriority),HX_("opPriority",a5,21,d8,3e)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Parser_obj,opRightAssoc),HX_("opRightAssoc",9a,d1,fe,02)},
	{::hx::fsBool,(int)offsetof(Parser_obj,packaged),HX_("packaged",1e,ea,54,39)},
	{::hx::fsBool,(int)offsetof(Parser_obj,allowJSON),HX_("allowJSON",31,27,44,b1)},
	{::hx::fsBool,(int)offsetof(Parser_obj,allowTypes),HX_("allowTypes",30,2b,97,45)},
	{::hx::fsBool,(int)offsetof(Parser_obj,resumeErrors),HX_("resumeErrors",38,61,37,31)},
	{::hx::fsString,(int)offsetof(Parser_obj,input),HX_("input",0a,c4,1d,be)},
	{::hx::fsInt,(int)offsetof(Parser_obj,readPos),HX_("readPos",de,03,cf,02)},
	{::hx::fsInt,(int)offsetof(Parser_obj,_hx_char),HX_("char",d6,5e,bf,41)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(Parser_obj,ops),HX_("ops",32,9c,54,00)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(Parser_obj,idents),HX_("idents",83,4f,a1,d2)},
	{::hx::fsInt,(int)offsetof(Parser_obj,uid),HX_("uid",90,23,59,00)},
	{::hx::fsString,(int)offsetof(Parser_obj,origin),HX_("origin",e6,19,01,4b)},
	{::hx::fsInt,(int)offsetof(Parser_obj,tokenMin),HX_("tokenMin",19,a8,42,2b)},
	{::hx::fsInt,(int)offsetof(Parser_obj,tokenMax),HX_("tokenMax",2b,a1,42,2b)},
	{::hx::fsInt,(int)offsetof(Parser_obj,oldTokenMin),HX_("oldTokenMin",e0,7b,1c,6b)},
	{::hx::fsInt,(int)offsetof(Parser_obj,oldTokenMax),HX_("oldTokenMax",f2,74,1c,6b)},
	{::hx::fsObject /*  ::haxe::ds::List */ ,(int)offsetof(Parser_obj,tokens),HX_("tokens",5a,17,e7,91)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Parser_obj,preprocStack),HX_("preprocStack",4f,d3,9d,7a)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Parser_obj,poppedStack),HX_("poppedStack",8a,8a,29,8c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Parser_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &Parser_obj::notAllowedFieldNames,HX_("notAllowedFieldNames",63,81,55,1f)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Parser_obj_sMemberFields[] = {
	HX_("line",f4,17,b3,47),
	HX_("opChars",fc,f3,a7,a8),
	HX_("identChars",cd,23,3f,ee),
	HX_("opPriority",a5,21,d8,3e),
	HX_("opRightAssoc",9a,d1,fe,02),
	HX_("packaged",1e,ea,54,39),
	HX_("allowJSON",31,27,44,b1),
	HX_("allowTypes",30,2b,97,45),
	HX_("resumeErrors",38,61,37,31),
	HX_("input",0a,c4,1d,be),
	HX_("readPos",de,03,cf,02),
	HX_("char",d6,5e,bf,41),
	HX_("ops",32,9c,54,00),
	HX_("idents",83,4f,a1,d2),
	HX_("uid",90,23,59,00),
	HX_("origin",e6,19,01,4b),
	HX_("tokenMin",19,a8,42,2b),
	HX_("tokenMax",2b,a1,42,2b),
	HX_("oldTokenMin",e0,7b,1c,6b),
	HX_("oldTokenMax",f2,74,1c,6b),
	HX_("tokens",5a,17,e7,91),
	HX_("error",c8,cb,29,73),
	HX_("invalidChar",6d,ad,ce,a9),
	HX_("initParser",0f,f8,cd,f1),
	HX_("parseString",64,d5,6c,8c),
	HX_("unexpected",d1,15,f4,c5),
	HX_("push",da,11,61,4a),
	HX_("ensure",be,f5,7b,04),
	HX_("ensureToken",5b,6c,33,ec),
	HX_("maybe",a8,13,27,03),
	HX_("getIdent",7a,52,50,17),
	HX_("expr",35,fd,1d,43),
	HX_("pmin",22,f7,5a,4a),
	HX_("pmax",34,f0,5a,4a),
	HX_("mk",5e,5f,00,00),
	HX_("isBlock",03,19,82,51),
	HX_("parseFullExpr",b7,bd,60,9c),
	HX_("parseObject",52,2b,7c,90),
	HX_("parseExpr",08,4f,c4,ca),
	HX_("parseLambda",9a,df,fc,cb),
	HX_("parseMetaArgs",15,82,33,6e),
	HX_("mapCompr",47,a4,9f,c1),
	HX_("makeUnop",c8,c4,47,44),
	HX_("makeBinop",da,90,98,86),
	HX_("parseStructure",80,85,70,8b),
	HX_("parseExprNext",1b,24,a8,f3),
	HX_("parseFunctionArgs",68,ad,48,04),
	HX_("parseFunctionDecl",75,70,3a,06),
	HX_("parsePath",78,37,f8,d1),
	HX_("parseType",8d,44,af,d4),
	HX_("parseTypeNext",20,c0,fc,fa),
	HX_("parseExprList",86,bb,58,f2),
	HX_("readChar",4c,39,b7,69),
	HX_("readString",c7,0c,ac,0a),
	HX_("token",f9,82,2b,14),
	HX_("_token",3a,ca,12,10),
	HX_("preprocStack",4f,d3,9d,7a),
	HX_("parsePreproCond",ff,8c,11,d6),
	HX_("evalPreproCond",a8,25,52,b0),
	HX_("poppedStack",8a,8a,29,8c),
	HX_("preprocess",ac,dc,46,92),
	HX_("skipTokens",39,0b,eb,f9),
	HX_("tokenComment",66,60,fb,25),
	::String(null()) };

static void Parser_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Parser_obj::notAllowedFieldNames,"notAllowedFieldNames");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Parser_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Parser_obj::notAllowedFieldNames,"notAllowedFieldNames");
};

#endif

::hx::Class Parser_obj::__mClass;

static ::String Parser_obj_sStaticFields[] = {
	HX_("notAllowedFieldNames",63,81,55,1f),
	HX_("constString",94,42,30,a9),
	HX_("tokenString",aa,20,de,a4),
	::String(null())
};

void Parser_obj::__register()
{
	Parser_obj _hx_dummy;
	Parser_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hscriptBase.Parser",09,de,b9,d7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Parser_obj::__GetStatic;
	__mClass->mSetStaticField = &Parser_obj::__SetStatic;
	__mClass->mMarkFunc = Parser_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Parser_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Parser_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Parser_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Parser_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Parser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Parser_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Parser_obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		::Array< ::String > _hx_run(){
            			HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_101_boot)
HXLINE( 102)			::Array< ::String > keys = ::hscriptBase::Tools_obj::keys->copy();
HXLINE( 103)			{
HXLINE( 103)				{
HXLINE( 103)					::String i = HX_("this",5e,06,fc,4c);
HXLINE( 104)					keys->push(i);
            				}
HXLINE( 103)				{
HXLINE( 103)					::String i1 = HX_("null",87,9e,0e,49);
HXLINE( 104)					keys->push(i1);
            				}
HXLINE( 103)				{
HXLINE( 103)					::String i2 = HX_("true",4e,a7,03,4d);
HXLINE( 104)					keys->push(i2);
            				}
HXLINE( 103)				{
HXLINE( 103)					::String i3 = HX_("false",a3,35,4f,fb);
HXLINE( 104)					keys->push(i3);
            				}
            			}
HXLINE( 106)			return keys;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_948055e9f9c336b1_101_boot)
HXDLIN( 101)		notAllowedFieldNames = ( (::Array< ::String >)( ::Dynamic(new _hx_Closure_0())()) );
            	}
}

} // end namespace hscriptBase
