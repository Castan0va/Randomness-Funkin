// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ValueException
#include <haxe/ValueException.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hscriptBase_CType
#include <hscriptBase/CType.h>
#endif
#ifndef INCLUDED_hscriptBase_Const
#include <hscriptBase/Const.h>
#endif
#ifndef INCLUDED_hscriptBase_Error
#include <hscriptBase/Error.h>
#endif
#ifndef INCLUDED_hscriptBase_ErrorDef
#include <hscriptBase/ErrorDef.h>
#endif
#ifndef INCLUDED_hscriptBase_ExprDef
#include <hscriptBase/ExprDef.h>
#endif
#ifndef INCLUDED_hscriptBase_Interp
#include <hscriptBase/Interp.h>
#endif
#ifndef INCLUDED_hscriptBase_InterpIterator
#include <hscriptBase/InterpIterator.h>
#endif
#ifndef INCLUDED_hscriptBase_StringFunctionTools
#include <hscriptBase/StringFunctionTools.h>
#endif
#ifndef INCLUDED_hscriptBase_Tools
#include <hscriptBase/Tools.h>
#endif
#ifndef INCLUDED_hscriptBase__Interp_Stop
#include <hscriptBase/_Interp/Stop.h>
#endif
#ifndef INCLUDED_macro_Macro
#include <macro/Macro.h>
#endif
#ifndef INCLUDED_tea_SScript
#include <tea/SScript.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_23fee00e02910bec_40_new,"hscriptBase.Interp","new",0x969fb2f0,"hscriptBase.Interp.new","hscriptBase/Interp.hx",40,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_70_setScr,"hscriptBase.Interp","setScr",0x5b6b3ed0,"hscriptBase.Interp.setScr","hscriptBase/Interp.hx",70,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_86_resetVariables,"hscriptBase.Interp","resetVariables",0x1edc4e58,"hscriptBase.Interp.resetVariables","hscriptBase/Interp.hx",86,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_96_resetVariables,"hscriptBase.Interp","resetVariables",0x1edc4e58,"hscriptBase.Interp.resetVariables","hscriptBase/Interp.hx",96,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_110_posInfos,"hscriptBase.Interp","posInfos",0x4ef35581,"hscriptBase.Interp.posInfos","hscriptBase/Interp.hx",110,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_125_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",125,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_126_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",126,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_127_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",127,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_128_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",128,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_129_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",129,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_130_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",130,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_131_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",131,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_132_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",132,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_133_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",133,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_134_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",134,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_135_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",135,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_136_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",136,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_137_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",137,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_138_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",138,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_139_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",139,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_140_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",140,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_141_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",141,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_142_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",142,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_143_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",143,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_146_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",146,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_147_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",147,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_148_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",148,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_149_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",149,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_150_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",150,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_151_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",151,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_152_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",152,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_153_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",153,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_154_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",154,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_155_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",155,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_156_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",156,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_157_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",157,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_118_initOps,"hscriptBase.Interp","initOps",0x5c23cd92,"hscriptBase.Interp.initOps","hscriptBase/Interp.hx",118,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_161_checkIs,"hscriptBase.Interp","checkIs",0xa3bd0562,"hscriptBase.Interp.checkIs","hscriptBase/Interp.hx",161,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_188_coalesce,"hscriptBase.Interp","coalesce",0x56144017,"hscriptBase.Interp.coalesce","hscriptBase/Interp.hx",188,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_195_coalesce2,"hscriptBase.Interp","coalesce2",0xfba3d43b,"hscriptBase.Interp.coalesce2","hscriptBase/Interp.hx",195,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_203_setVar,"hscriptBase.Interp","setVar",0x5b6d83d5,"hscriptBase.Interp.setVar","hscriptBase/Interp.hx",203,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_214_assign,"hscriptBase.Interp","assign",0x38025d9f,"hscriptBase.Interp.assign","hscriptBase/Interp.hx",214,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_265_assignOp,"hscriptBase.Interp","assignOp",0x038c88a0,"hscriptBase.Interp.assignOp","hscriptBase/Interp.hx",265,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_263_assignOp,"hscriptBase.Interp","assignOp",0x038c88a0,"hscriptBase.Interp.assignOp","hscriptBase/Interp.hx",263,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_268_evalAssignOp,"hscriptBase.Interp","evalAssignOp",0xc9a0245c,"hscriptBase.Interp.evalAssignOp","hscriptBase/Interp.hx",268,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_299_increment,"hscriptBase.Interp","increment",0x697334bf,"hscriptBase.Interp.increment","hscriptBase/Interp.hx",299,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_349_execute,"hscriptBase.Interp","execute",0x5ca574c5,"hscriptBase.Interp.execute","hscriptBase/Interp.hx",349,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_386_exprReturn,"hscriptBase.Interp","exprReturn",0xd521fb35,"hscriptBase.Interp.exprReturn","hscriptBase/Interp.hx",386,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_401_duplicate,"hscriptBase.Interp","duplicate",0xd88b501b,"hscriptBase.Interp.duplicate","hscriptBase/Interp.hx",401,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_413_restore,"hscriptBase.Interp","restore",0xfb48d1de,"hscriptBase.Interp.restore","hscriptBase/Interp.hx",413,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_419_error,"hscriptBase.Interp","error",0x1e1f7258,"hscriptBase.Interp.error","hscriptBase/Interp.hx",419,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_430_rethrow,"hscriptBase.Interp","rethrow",0x86c31b23,"hscriptBase.Interp.rethrow","hscriptBase/Interp.hx",430,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_434_resolve,"hscriptBase.Interp","resolve",0xf7f87d7c,"hscriptBase.Interp.resolve","hscriptBase/Interp.hx",434,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_450_expr,"hscriptBase.Interp","expr",0x2f3858a5,"hscriptBase.Interp.expr","hscriptBase/Interp.hx",450,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_682_expr,"hscriptBase.Interp","expr",0x2f3858a5,"hscriptBase.Interp.expr","hscriptBase/Interp.hx",682,0xddaa725f)
static const int _hx_array_data_88b7bafe_77[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_875_doWhileLoop,"hscriptBase.Interp","doWhileLoop",0x5a5ff43a,"hscriptBase.Interp.doWhileLoop","hscriptBase/Interp.hx",875,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_892_whileLoop,"hscriptBase.Interp","whileLoop",0x190c7145,"hscriptBase.Interp.whileLoop","hscriptBase/Interp.hx",892,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_908_makeIterator,"hscriptBase.Interp","makeIterator",0x887e296c,"hscriptBase.Interp.makeIterator","hscriptBase/Interp.hx",908,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_918_forLoop,"hscriptBase.Interp","forLoop",0x5a01bc9d,"hscriptBase.Interp.forLoop","hscriptBase/Interp.hx",918,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_946_getMapValue,"hscriptBase.Interp","getMapValue",0xeeb7a47b,"hscriptBase.Interp.getMapValue","hscriptBase/Interp.hx",946,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_950_setMapValue,"hscriptBase.Interp","setMapValue",0xf924ab87,"hscriptBase.Interp.setMapValue","hscriptBase/Interp.hx",950,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_953_get,"hscriptBase.Interp","get",0x969a6326,"hscriptBase.Interp.get","hscriptBase/Interp.hx",953,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_972_set,"hscriptBase.Interp","set",0x96a37e32,"hscriptBase.Interp.set","hscriptBase/Interp.hx",972,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_979_fcall,"hscriptBase.Interp","fcall",0xa78eea94,"hscriptBase.Interp.fcall","hscriptBase/Interp.hx",979,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_988_call,"hscriptBase.Interp","call",0x2dd4740e,"hscriptBase.Interp.call","hscriptBase/Interp.hx",988,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_991_cnew,"hscriptBase.Interp","cnew",0x2dde4b4d,"hscriptBase.Interp.cnew","hscriptBase/Interp.hx",991,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_999_stringToolsFunction,"hscriptBase.Interp","stringToolsFunction",0x0fa94752,"hscriptBase.Interp.stringToolsFunction","hscriptBase/Interp.hx",999,0xddaa725f)
HX_LOCAL_STACK_FRAME(_hx_pos_23fee00e02910bec_937_isMap,"hscriptBase.Interp","isMap",0x6c46db62,"hscriptBase.Interp.isMap","hscriptBase/Interp.hx",937,0xddaa725f)
namespace hscriptBase{

void Interp_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_40_new)
HXLINE( 116)		this->inFunc = false;
HXLINE(  66)		this->specialObject =  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("exclusions",e5,ad,ac,ac),null())
            			->setFixed(1,HX_("obj",f7,8f,54,00),null())
            			->setFixed(2,HX_("includeFunctions",13,e7,b1,03),null()));
HXLINE(  60)		this->usingStringTools = false;
HXLINE(  58)		this->typecheck = true;
HXLINE(  44)		this->dynamicFuncs =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  77)		this->locals =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  81)		this->declared = ::Array_obj< ::Dynamic>::__new();
HXLINE(  82)		this->resetVariables();
HXLINE(  83)		this->initOps();
            	}

Dynamic Interp_obj::__CreateEmpty() { return new Interp_obj; }

void *Interp_obj::_hx_vtable = 0;

Dynamic Interp_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Interp_obj > _hx_result = new Interp_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Interp_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x43235d34;
}

 ::tea::SScript Interp_obj::setScr( ::tea::SScript s){
            	HX_STACKFRAME(&_hx_pos_23fee00e02910bec_70_setScr)
HXDLIN(  70)		return (this->script = s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,setScr,return )

void Interp_obj::resetVariables(){
            	HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_86_resetVariables)
HXDLIN(  86)		 ::hscriptBase::Interp _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  88)		this->variables =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  93)		this->variables->set(HX_("null",87,9e,0e,49),null());
HXLINE(  94)		this->variables->set(HX_("true",4e,a7,03,4d),true);
HXLINE(  95)		this->variables->set(HX_("false",a3,35,4f,fb),false);
HXLINE(  96)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hscriptBase::Interp,_gthis) HXARGC(1)
            			void _hx_run(::cpp::VirtualArray el){
            				HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_96_resetVariables)
HXLINE(  97)				 ::Dynamic inf = _gthis->posInfos();
HXLINE(  98)				 ::Dynamic v = el->shift();
HXLINE(  99)				if ((el->get_length() > 0)) {
HXLINE(  99)					inf->__SetField(HX_("customParams",d7,51,18,ed),el,::hx::paccDynamic);
            				}
HXLINE( 100)				 ::Dynamic value = ::haxe::Log_obj::trace;
HXDLIN( 100)				value(::Std_obj::string(v),inf);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  96)			::Dynamic this1 = this->variables;
HXDLIN(  96)			( ( ::haxe::ds::StringMap)(this1) )->set(HX_("trace",85,8e,1f,16),::Reflect_obj::makeVarArgs( ::Dynamic(new _hx_Closure_0(_gthis))));
            		}
HXLINE( 102)		this->variables->set(HX_("Bool",4a,b0,f4,2b),( ( ::Dynamic)(::hx::ClassOf< bool >()) ));
HXLINE( 103)		this->variables->set(HX_("Int",cf,c4,37,00),( ( ::Dynamic)(::hx::ClassOf< int >()) ));
HXLINE( 104)		this->variables->set(HX_("Float",7c,35,c4,95),( ( ::Dynamic)(::hx::ClassOf< ::Float >()) ));
HXLINE( 105)		this->variables->set(HX_("String",f1,9c,c4,45),( ( ::Dynamic)(::hx::ClassOf< ::String >()) ));
HXLINE( 106)		this->variables->set(HX_("Dynamic",5f,c7,66,03),( ( ::Dynamic)(::hx::ClassOf< ::Dynamic >()) ));
HXLINE( 107)		this->variables->set(HX_("Array",79,dd,bc,b8),( ( ::Dynamic)(::hx::ArrayBase::__mClass) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interp_obj,resetVariables,(void))

 ::Dynamic Interp_obj::posInfos(){
            	HX_STACKFRAME(&_hx_pos_23fee00e02910bec_110_posInfos)
HXLINE( 111)		if (::hx::IsNotNull( this->curExpr )) {
HXLINE( 112)			return  ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("fileName",e7,5a,43,62), ::Dynamic(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)))
            				->setFixed(1,HX_("lineNumber",dd,81,22,76), ::Dynamic(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic))));
            		}
HXLINE( 113)		return  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("fileName",e7,5a,43,62),HX_("SScript",be,42,6a,f7))
            			->setFixed(1,HX_("lineNumber",dd,81,22,76),0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interp_obj,posInfos,return )

void Interp_obj::initOps(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hscriptBase::Interp,me) HXARGC(2)
            		 ::Dynamic _hx_run( ::Dynamic e1, ::Dynamic e2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_125_initOps)
HXLINE( 125)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN( 125)			return (_hx_tmp + me->expr(e2));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::hscriptBase::Interp,me) HXARGC(2)
            		Float _hx_run( ::Dynamic e1, ::Dynamic e2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_126_initOps)
HXLINE( 126)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN( 126)			return (( (Float)(_hx_tmp) ) - ( (Float)(me->expr(e2)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::hscriptBase::Interp,me) HXARGC(2)
            		Float _hx_run( ::Dynamic e1, ::Dynamic e2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_127_initOps)
HXLINE( 127)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN( 127)			return (( (Float)(_hx_tmp) ) * ( (Float)(me->expr(e2)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::hscriptBase::Interp,me) HXARGC(2)
            		Float _hx_run( ::Dynamic e1, ::Dynamic e2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_128_initOps)
HXLINE( 128)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN( 128)			return (( (Float)(_hx_tmp) ) / ( (Float)(me->expr(e2)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::hscriptBase::Interp,me) HXARGC(2)
            		Float _hx_run( ::Dynamic e1, ::Dynamic e2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_129_initOps)
HXLINE( 129)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN( 129)			return ::hx::Mod(_hx_tmp,me->expr(e2));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::hscriptBase::Interp,me) HXARGC(2)
            		int _hx_run( ::Dynamic e1, ::Dynamic e2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_130_initOps)
HXLINE( 130)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN( 130)			return (( (int)(_hx_tmp) ) & ( (int)(me->expr(e2)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::hscriptBase::Interp,me) HXARGC(2)
            		int _hx_run( ::Dynamic e1, ::Dynamic e2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_131_initOps)
HXLINE( 131)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN( 131)			return (( (int)(_hx_tmp) ) | ( (int)(me->expr(e2)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::hscriptBase::Interp,me) HXARGC(2)
            		int _hx_run( ::Dynamic e1, ::Dynamic e2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_132_initOps)
HXLINE( 132)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN( 132)			return (( (int)(_hx_tmp) ) ^ ( (int)(me->expr(e2)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8, ::hscriptBase::Interp,me) HXARGC(2)
            		int _hx_run( ::Dynamic e1, ::Dynamic e2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_133_initOps)
HXLINE( 133)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN( 133)			return (( (int)(_hx_tmp) ) << ( (int)(me->expr(e2)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_9, ::hscriptBase::Interp,me) HXARGC(2)
            		int _hx_run( ::Dynamic e1, ::Dynamic e2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_134_initOps)
HXLINE( 134)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN( 134)			return (( (int)(_hx_tmp) ) >> ( (int)(me->expr(e2)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_10, ::hscriptBase::Interp,me) HXARGC(2)
            		int _hx_run( ::Dynamic e1, ::Dynamic e2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_135_initOps)
HXLINE( 135)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN( 135)			return ::hx::UShr(( (int)(_hx_tmp) ),( (int)(me->expr(e2)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_11, ::hscriptBase::Interp,me) HXARGC(2)
            		bool _hx_run( ::Dynamic e1, ::Dynamic e2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_136_initOps)
HXLINE( 136)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN( 136)			return ::hx::IsEq( _hx_tmp,me->expr(e2) );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_12, ::hscriptBase::Interp,me) HXARGC(2)
            		bool _hx_run( ::Dynamic e1, ::Dynamic e2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_137_initOps)
HXLINE( 137)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN( 137)			return ::hx::IsNotEq( _hx_tmp,me->expr(e2) );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_13, ::hscriptBase::Interp,me) HXARGC(2)
            		bool _hx_run( ::Dynamic e1, ::Dynamic e2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_138_initOps)
HXLINE( 138)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN( 138)			return ::hx::IsGreaterEq( _hx_tmp,me->expr(e2) );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_14, ::hscriptBase::Interp,me) HXARGC(2)
            		bool _hx_run( ::Dynamic e1, ::Dynamic e2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_139_initOps)
HXLINE( 139)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN( 139)			return ::hx::IsLessEq( _hx_tmp,me->expr(e2) );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_15, ::hscriptBase::Interp,me) HXARGC(2)
            		bool _hx_run( ::Dynamic e1, ::Dynamic e2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_140_initOps)
HXLINE( 140)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN( 140)			return ::hx::IsGreater( _hx_tmp,me->expr(e2) );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_16, ::hscriptBase::Interp,me) HXARGC(2)
            		bool _hx_run( ::Dynamic e1, ::Dynamic e2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_141_initOps)
HXLINE( 141)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN( 141)			return ::hx::IsLess( _hx_tmp,me->expr(e2) );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_17, ::hscriptBase::Interp,me) HXARGC(2)
            		bool _hx_run( ::Dynamic e1, ::Dynamic e2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_142_initOps)
HXLINE( 142)			if (::hx::IsNotEq( me->expr(e1),true )) {
HXLINE( 142)				return ::hx::IsEq( me->expr(e2),true );
            			}
            			else {
HXLINE( 142)				return true;
            			}
HXDLIN( 142)			return false;
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_18, ::hscriptBase::Interp,me) HXARGC(2)
            		bool _hx_run( ::Dynamic e1, ::Dynamic e2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_143_initOps)
HXLINE( 143)			if (::hx::IsEq( me->expr(e1),true )) {
HXLINE( 143)				return ::hx::IsEq( me->expr(e2),true );
            			}
            			else {
HXLINE( 143)				return false;
            			}
HXDLIN( 143)			return false;
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_19, ::hscriptBase::Interp,me) HXARGC(2)
            		 ::hscriptBase::InterpIterator _hx_run( ::Dynamic e1, ::Dynamic e2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_146_initOps)
HXLINE( 146)			return  ::hscriptBase::InterpIterator_obj::__alloc( HX_CTX ,me,e1,e2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_20) HXARGC(2)
            		 ::Dynamic _hx_run( ::Dynamic v1, ::Dynamic v2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_147_initOps)
HXLINE( 147)			return (v1 + v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_21) HXARGC(2)
            		Float _hx_run(Float v1,Float v2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_148_initOps)
HXLINE( 148)			return (v1 - v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_22) HXARGC(2)
            		Float _hx_run(Float v1,Float v2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_149_initOps)
HXLINE( 149)			return (v1 * v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_23) HXARGC(2)
            		Float _hx_run(Float v1,Float v2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_150_initOps)
HXLINE( 150)			return (v1 / v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_24) HXARGC(2)
            		Float _hx_run(Float v1,Float v2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_151_initOps)
HXLINE( 151)			return ::hx::Mod(v1,v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_25) HXARGC(2)
            		int _hx_run(int v1,int v2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_152_initOps)
HXLINE( 152)			return (v1 & v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_26) HXARGC(2)
            		int _hx_run(int v1,int v2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_153_initOps)
HXLINE( 153)			return (v1 | v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_27) HXARGC(2)
            		int _hx_run(int v1,int v2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_154_initOps)
HXLINE( 154)			return (v1 ^ v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_28) HXARGC(2)
            		int _hx_run(int v1,int v2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_155_initOps)
HXLINE( 155)			return (v1 << v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_29) HXARGC(2)
            		int _hx_run(int v1,int v2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_156_initOps)
HXLINE( 156)			return (v1 >> v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_30) HXARGC(2)
            		int _hx_run(int v1,int v2){
            			HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_157_initOps)
HXLINE( 157)			return ::hx::UShr(v1,v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_118_initOps)
HXLINE( 119)		 ::hscriptBase::Interp me = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 121)		this->binops =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 125)		this->binops->set(HX_("+",2b,00,00,00), ::Dynamic(new _hx_Closure_0(me)));
HXLINE( 126)		this->binops->set(HX_("-",2d,00,00,00), ::Dynamic(new _hx_Closure_1(me)));
HXLINE( 127)		this->binops->set(HX_("*",2a,00,00,00), ::Dynamic(new _hx_Closure_2(me)));
HXLINE( 128)		this->binops->set(HX_("/",2f,00,00,00), ::Dynamic(new _hx_Closure_3(me)));
HXLINE( 129)		this->binops->set(HX_("%",25,00,00,00), ::Dynamic(new _hx_Closure_4(me)));
HXLINE( 130)		this->binops->set(HX_("&",26,00,00,00), ::Dynamic(new _hx_Closure_5(me)));
HXLINE( 131)		this->binops->set(HX_("|",7c,00,00,00), ::Dynamic(new _hx_Closure_6(me)));
HXLINE( 132)		this->binops->set(HX_("^",5e,00,00,00), ::Dynamic(new _hx_Closure_7(me)));
HXLINE( 133)		this->binops->set(HX_("<<",80,34,00,00), ::Dynamic(new _hx_Closure_8(me)));
HXLINE( 134)		this->binops->set(HX_(">>",40,36,00,00), ::Dynamic(new _hx_Closure_9(me)));
HXLINE( 135)		this->binops->set(HX_(">>>",fe,41,2f,00), ::Dynamic(new _hx_Closure_10(me)));
HXLINE( 136)		this->binops->set(HX_("==",60,35,00,00), ::Dynamic(new _hx_Closure_11(me)));
HXLINE( 137)		this->binops->set(HX_("!=",fc,1c,00,00), ::Dynamic(new _hx_Closure_12(me)));
HXLINE( 138)		this->binops->set(HX_(">=",3f,36,00,00), ::Dynamic(new _hx_Closure_13(me)));
HXLINE( 139)		this->binops->set(HX_("<=",81,34,00,00), ::Dynamic(new _hx_Closure_14(me)));
HXLINE( 140)		this->binops->set(HX_(">",3e,00,00,00), ::Dynamic(new _hx_Closure_15(me)));
HXLINE( 141)		this->binops->set(HX_("<",3c,00,00,00), ::Dynamic(new _hx_Closure_16(me)));
HXLINE( 142)		this->binops->set(HX_("||",80,6c,00,00), ::Dynamic(new _hx_Closure_17(me)));
HXLINE( 143)		this->binops->set(HX_("&&",40,21,00,00), ::Dynamic(new _hx_Closure_18(me)));
HXLINE( 144)		this->binops->set(HX_("=",3d,00,00,00),this->assign_dyn());
HXLINE( 145)		this->binops->set(HX_("is",ea,5b,00,00),this->checkIs_dyn());
HXLINE( 146)		this->binops->set(HX_("...",ee,0f,23,00), ::Dynamic(new _hx_Closure_19(me)));
HXLINE( 147)		this->assignOp(HX_("+=",b2,25,00,00), ::Dynamic(new _hx_Closure_20()));
HXLINE( 148)		this->assignOp(HX_("-=",70,27,00,00), ::Dynamic(new _hx_Closure_21()));
HXLINE( 149)		this->assignOp(HX_("*=",d3,24,00,00), ::Dynamic(new _hx_Closure_22()));
HXLINE( 150)		this->assignOp(HX_("/=",2e,29,00,00), ::Dynamic(new _hx_Closure_23()));
HXLINE( 151)		this->assignOp(HX_("%=",78,20,00,00), ::Dynamic(new _hx_Closure_24()));
HXLINE( 152)		this->assignOp(HX_("&=",57,21,00,00), ::Dynamic(new _hx_Closure_25()));
HXLINE( 153)		this->assignOp(HX_("|=",41,6c,00,00), ::Dynamic(new _hx_Closure_26()));
HXLINE( 154)		this->assignOp(HX_("^=",1f,52,00,00), ::Dynamic(new _hx_Closure_27()));
HXLINE( 155)		this->assignOp(HX_("<<=",bd,bb,2d,00), ::Dynamic(new _hx_Closure_28()));
HXLINE( 156)		this->assignOp(HX_(">>=",fd,41,2f,00), ::Dynamic(new _hx_Closure_29()));
HXLINE( 157)		this->assignOp(HX_(">>>=",7f,7c,2a,29), ::Dynamic(new _hx_Closure_30()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interp_obj,initOps,(void))

bool Interp_obj::checkIs( ::Dynamic e1, ::Dynamic e2){
            	HX_STACKFRAME(&_hx_pos_23fee00e02910bec_161_checkIs)
HXLINE( 162)		 ::hscriptBase::Interp me = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 164)		if (::hx::IsNull( e1 )) {
HXLINE( 165)			return false;
            		}
HXLINE( 166)		if (::hx::IsNull( e2 )) {
HXLINE( 167)			return false;
            		}
HXLINE( 168)		 ::Dynamic expr1 = me->expr(e1);
HXLINE( 169)		 ::Dynamic expr2 = me->expr(e2);
HXLINE( 170)		if (::hx::IsNull( expr1 )) {
HXLINE( 171)			return false;
            		}
HXLINE( 172)		if (::hx::IsNull( expr2 )) {
HXLINE( 173)			return false;
            		}
HXLINE( 175)		{
HXLINE( 175)			 ::hscriptBase::ExprDef _g;
HXDLIN( 175)			if (::hx::IsNull( e2 )) {
HXLINE( 175)				_g = null();
            			}
            			else {
HXLINE( 175)				_g = e2->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
            			}
HXDLIN( 175)			if ((_g->_hx_getIndex() == 1)) {
HXLINE( 179)				 ::Dynamic _g1 = _g->_hx_getObject(1);
HXDLIN( 179)				::String _hx_switch_0 = _g->_hx_getString(0);
            				if (  (_hx_switch_0==HX_("Class",18,e8,85,db)) ){
HXLINE( 178)					return ::Std_obj::isOfType(expr1,::hx::ClassOf< ::hx::Class >());
HXDLIN( 178)					goto _hx_goto_37;
            				}
            				if (  (_hx_switch_0==HX_("Map",7c,c2,3a,00)) ){
HXLINE( 180)					return ::Std_obj::isOfType(expr1,::hx::ClassOf< ::haxe::IMap >());
HXDLIN( 180)					goto _hx_goto_37;
            				}
            				/* default */{
            				}
            				_hx_goto_37:;
            			}
            		}
HXLINE( 184)		return ::Std_obj::isOfType(expr1,expr2);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,checkIs,return )

 ::Dynamic Interp_obj::coalesce( ::Dynamic e1, ::Dynamic e2){
            	HX_STACKFRAME(&_hx_pos_23fee00e02910bec_188_coalesce)
HXLINE( 189)		 ::hscriptBase::Interp me = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 190)		 ::Dynamic e11 = me->expr(e1);
HXLINE( 191)		 ::Dynamic e21 = me->expr(e2);
HXLINE( 192)		if (::hx::IsNull( e11 )) {
HXLINE( 192)			return e21;
            		}
            		else {
HXLINE( 192)			return e11;
            		}
HXDLIN( 192)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,coalesce,return )

 ::Dynamic Interp_obj::coalesce2( ::Dynamic e1, ::Dynamic e2){
            	HX_STACKFRAME(&_hx_pos_23fee00e02910bec_195_coalesce2)
HXLINE( 196)		 ::hscriptBase::Interp me = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 197)		 ::Dynamic expr1 = e1;
HXLINE( 198)		 ::Dynamic expr2 = e2;
HXLINE( 199)		 ::Dynamic e11 = me->expr(e1);
HXLINE( 200)		if (::hx::IsNull( e11 )) {
HXLINE( 200)			return this->assign(expr1,expr2);
            		}
            		else {
HXLINE( 200)			return e11;
            		}
HXDLIN( 200)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,coalesce2,return )

void Interp_obj::setVar(::String name, ::Dynamic v){
            	HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_203_setVar)
HXLINE( 204)		::String ftype = ::hscriptBase::Tools_obj::getType(this->variables->get(name),null());
HXLINE( 205)		::String stype = ::hscriptBase::Tools_obj::getType(v,null());
HXLINE( 206)		 ::Dynamic cl = this->variables->get(ftype);
HXLINE( 207)		::String clN = ::hscriptBase::Tools_obj::getType(v,true);
HXLINE( 209)		if (this->typecheck) {
HXLINE( 210)			bool _hx_tmp;
HXDLIN( 210)			bool _hx_tmp1;
HXDLIN( 210)			bool _hx_tmp2;
HXDLIN( 210)			if (!(::hscriptBase::Tools_obj::compatibleWithEachOther(ftype,stype))) {
HXLINE( 210)				_hx_tmp2 = (ftype != stype);
            			}
            			else {
HXLINE( 210)				_hx_tmp2 = false;
            			}
HXDLIN( 210)			if (_hx_tmp2) {
HXLINE( 210)				_hx_tmp1 = (ftype != HX_("Anon",6c,b7,4a,2b));
            			}
            			else {
HXLINE( 210)				_hx_tmp1 = false;
            			}
HXDLIN( 210)			if (_hx_tmp1) {
HXLINE( 210)				_hx_tmp = !(::hscriptBase::Tools_obj::compatibleWithEachOtherObjects(cl,clN));
            			}
            			else {
HXLINE( 210)				_hx_tmp = false;
            			}
HXDLIN( 210)			if (_hx_tmp) {
HXLINE( 210)				if (!(this->resumeError)) {
HXLINE( 210)					 ::hscriptBase::Error e =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::EUnmatchingType(ftype,stype,name),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 210)					HX_STACK_DO_THROW(e);
            				}
            			}
            		}
HXLINE( 211)		this->variables->set(name,v);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,setVar,(void))

 ::Dynamic Interp_obj::assign( ::Dynamic e1, ::Dynamic e2){
            	HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_214_assign)
HXLINE( 215)		 ::Dynamic v = this->expr(e2);
HXLINE( 216)		{
HXLINE( 216)			 ::hscriptBase::ExprDef _g;
HXDLIN( 216)			if (::hx::IsNull( e1 )) {
HXLINE( 216)				_g = null();
            			}
            			else {
HXLINE( 216)				_g = e1->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
            			}
HXDLIN( 216)			switch((int)(_g->_hx_getIndex())){
            				case (int)1: {
HXLINE( 217)					::String id = _g->_hx_getString(0);
HXDLIN( 217)					 ::Dynamic f = _g->_hx_getObject(1);
HXDLIN( 217)					{
HXLINE( 218)						bool _hx_tmp;
HXDLIN( 218)						if (::hx::IsNotNull( this->locals->get(id) )) {
HXLINE( 218)							_hx_tmp = ( (bool)(this->locals->get(id)->__Field(HX_("isFinal",2c,03,20,9d),::hx::paccDynamic)) );
            						}
            						else {
HXLINE( 218)							_hx_tmp = false;
            						}
HXDLIN( 218)						if (_hx_tmp) {
HXLINE( 219)							if (this->resumeError) {
HXLINE( 219)								return null();
            							}
            							else {
HXLINE( 219)								 ::hscriptBase::Error e =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::EInvalidFinal(id),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 219)								HX_STACK_DO_THROW(e);
            							}
            						}
HXLINE( 220)						 ::Dynamic l = this->locals->get(id);
HXLINE( 221)						if (::hx::IsNull( l )) {
HXLINE( 223)							if (!(this->variables->exists(id))) {
HXLINE( 224)								if (!(this->resumeError)) {
HXLINE( 224)									 ::hscriptBase::Error e3 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::EUnknownVariable(id),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 224)									HX_STACK_DO_THROW(e3);
            								}
            							}
HXLINE( 225)							bool _hx_tmp1;
HXDLIN( 225)							if (::hx::IsPointerEq( ::Type_obj::_hx_typeof(this->variables->get(id)),::ValueType_obj::TFunction_dyn() )) {
HXLINE( 225)								_hx_tmp1 = !(this->dynamicFuncs->exists(id));
            							}
            							else {
HXLINE( 225)								_hx_tmp1 = false;
            							}
HXDLIN( 225)							if (_hx_tmp1) {
HXLINE( 226)								if (!(this->resumeError)) {
HXLINE( 226)									 ::hscriptBase::Error e4 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::EFunctionAssign(id),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 226)									HX_STACK_DO_THROW(e4);
            								}
            							}
HXLINE( 227)							this->setVar(id,v);
            						}
            						else {
HXLINE( 230)							 ::hscriptBase::CType t = l->__Field(HX_("t",74,00,00,00),::hx::paccDynamic);
HXLINE( 231)							if (::hx::IsNotNull( t )) {
HXLINE( 233)								::String ftype = ::hscriptBase::Tools_obj::ctToType(l->__Field(HX_("t",74,00,00,00),::hx::paccDynamic));
HXLINE( 234)								::String stype = ::hscriptBase::Tools_obj::getType(v,null());
HXLINE( 235)								 ::Dynamic cl = this->variables->get(ftype);
HXLINE( 237)								::String clN = ::hscriptBase::Tools_obj::getType(v,true);
HXLINE( 238)								if (this->typecheck) {
HXLINE( 239)									bool _hx_tmp2;
HXDLIN( 239)									bool _hx_tmp3;
HXDLIN( 239)									bool _hx_tmp4;
HXDLIN( 239)									if (!(::hscriptBase::Tools_obj::compatibleWithEachOther(ftype,stype))) {
HXLINE( 239)										_hx_tmp4 = (ftype != stype);
            									}
            									else {
HXLINE( 239)										_hx_tmp4 = false;
            									}
HXDLIN( 239)									if (_hx_tmp4) {
HXLINE( 239)										_hx_tmp3 = (ftype != HX_("Anon",6c,b7,4a,2b));
            									}
            									else {
HXLINE( 239)										_hx_tmp3 = false;
            									}
HXDLIN( 239)									if (_hx_tmp3) {
HXLINE( 239)										_hx_tmp2 = !(::hscriptBase::Tools_obj::compatibleWithEachOtherObjects(cl,clN));
            									}
            									else {
HXLINE( 239)										_hx_tmp2 = false;
            									}
HXDLIN( 239)									if (_hx_tmp2) {
HXLINE( 239)										if (!(this->resumeError)) {
HXLINE( 239)											 ::hscriptBase::Error e5 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::EUnmatchingType(ftype,stype,id),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 239)											HX_STACK_DO_THROW(e5);
            										}
            									}
            								}
            							}
HXLINE( 241)							bool _hx_tmp5;
HXDLIN( 241)							bool _hx_tmp6;
HXDLIN( 241)							if (::hx::IsPointerEq( ::Type_obj::_hx_typeof( ::Dynamic(l->__Field(HX_("r",72,00,00,00),::hx::paccDynamic))),::ValueType_obj::TFunction_dyn() )) {
HXLINE( 241)								_hx_tmp6 = ::hx::IsNotNull( l->__Field(HX_("dynamicFunc",63,e2,52,69),::hx::paccDynamic) );
            							}
            							else {
HXLINE( 241)								_hx_tmp6 = false;
            							}
HXDLIN( 241)							if (_hx_tmp6) {
HXLINE( 241)								_hx_tmp5 = !(( (bool)(l->__Field(HX_("dynamicFunc",63,e2,52,69),::hx::paccDynamic)) ));
            							}
            							else {
HXLINE( 241)								_hx_tmp5 = false;
            							}
HXDLIN( 241)							if (_hx_tmp5) {
HXLINE( 242)								if (!(this->resumeError)) {
HXLINE( 242)									 ::hscriptBase::Error e6 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::EFunctionAssign(id),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 242)									HX_STACK_DO_THROW(e6);
            								}
            							}
HXLINE( 243)							l->__SetField(HX_("r",72,00,00,00),v,::hx::paccDynamic);
            						}
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 245)					 ::Dynamic e7 = _g->_hx_getObject(0);
HXDLIN( 245)					::String f1 = _g->_hx_getString(1);
HXLINE( 246)					v = this->set(this->expr(e7),f1,v);
            				}
            				break;
            				case (int)20: {
HXLINE( 247)					 ::Dynamic e8 = _g->_hx_getObject(0);
HXDLIN( 247)					 ::Dynamic index = _g->_hx_getObject(1);
HXDLIN( 247)					{
HXLINE( 248)						 ::Dynamic arr = this->expr(e8);
HXLINE( 249)						 ::Dynamic index1 = this->expr(index);
HXLINE( 250)						::cpp::VirtualArray classes = ::cpp::VirtualArray_obj::__new(7)->init(0,HX_("Map",7c,c2,3a,00))->init(1,HX_("StringMap",2b,12,8c,69))->init(2,HX_("IntMap",0d,a9,08,d3))->init(3,HX_("ObjectMap",fd,a4,50,e5))->init(4,HX_("HashMap",4e,0f,b5,f6))->init(5,HX_("EnumValueMap",ec,9b,fb,92))->init(6,HX_("WeakMap",e4,a8,a9,a4));
HXDLIN( 250)						bool _hx_tmp7;
HXDLIN( 250)						if (classes->contains(arr)) {
HXLINE( 250)							_hx_tmp7 = true;
            						}
            						else {
HXLINE( 250)							_hx_tmp7 = ::Std_obj::isOfType(arr,::hx::ClassOf< ::haxe::IMap >());
            						}
HXDLIN( 250)						if (_hx_tmp7) {
HXLINE( 251)							::haxe::IMap_obj::set( ::hx::interface_check(arr,0x09c2bd39),index1,v);
            						}
            						else {
HXLINE( 254)							arr->__SetItem(( (int)(index1) ),v);
            						}
            					}
            				}
            				break;
            				default:{
HXLINE( 258)					if (!(this->resumeError)) {
HXLINE( 258)						 ::hscriptBase::Error e9 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::EInvalidOp(HX_("=",3d,00,00,00)),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 258)						HX_STACK_DO_THROW(e9);
            					}
            				}
            			}
            		}
HXLINE( 260)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,assign,return )

void Interp_obj::assignOp(::String op, ::Dynamic fop){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0,::String,op, ::hscriptBase::Interp,me, ::Dynamic,fop) HXARGC(2)
            		 ::Dynamic _hx_run( ::Dynamic e1, ::Dynamic e2){
            			HX_STACKFRAME(&_hx_pos_23fee00e02910bec_265_assignOp)
HXLINE( 265)			return me->evalAssignOp(op,fop,e1,e2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_23fee00e02910bec_263_assignOp)
HXLINE( 264)		 ::hscriptBase::Interp me = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 265)		this->binops->set(op, ::Dynamic(new _hx_Closure_0(op,me,fop)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,assignOp,(void))

 ::Dynamic Interp_obj::evalAssignOp(::String op, ::Dynamic fop, ::Dynamic e1, ::Dynamic e2){
            	HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_268_evalAssignOp)
HXLINE( 269)		 ::Dynamic v;
HXLINE( 270)		{
HXLINE( 270)			 ::hscriptBase::ExprDef _g;
HXDLIN( 270)			if (::hx::IsNull( e1 )) {
HXLINE( 270)				_g = null();
            			}
            			else {
HXLINE( 270)				_g = e1->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
            			}
HXDLIN( 270)			switch((int)(_g->_hx_getIndex())){
            				case (int)1: {
HXLINE( 271)					 ::Dynamic _g1 = _g->_hx_getObject(1);
HXDLIN( 271)					{
HXLINE( 271)						::String id = _g->_hx_getString(0);
HXDLIN( 271)						{
HXLINE( 272)							 ::Dynamic l = this->locals->get(id);
HXLINE( 273)							 ::Dynamic v1 = this->expr(e1);
HXDLIN( 273)							v = fop(v1,this->expr(e2));
HXLINE( 274)							if (::hx::IsNull( l )) {
HXLINE( 275)								this->setVar(id,v);
            							}
            							else {
HXLINE( 277)								l->__SetField(HX_("r",72,00,00,00),v,::hx::paccDynamic);
            							}
            						}
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 278)					 ::Dynamic e = _g->_hx_getObject(0);
HXDLIN( 278)					::String f = _g->_hx_getString(1);
HXDLIN( 278)					{
HXLINE( 279)						 ::Dynamic obj = this->expr(e);
HXLINE( 280)						 ::Dynamic v2 = this->get(obj,f);
HXDLIN( 280)						v = fop(v2,this->expr(e2));
HXLINE( 281)						v = this->set(obj,f,v);
            					}
            				}
            				break;
            				case (int)20: {
HXLINE( 282)					 ::Dynamic e3 = _g->_hx_getObject(0);
HXDLIN( 282)					 ::Dynamic index = _g->_hx_getObject(1);
HXDLIN( 282)					{
HXLINE( 283)						 ::Dynamic arr = this->expr(e3);
HXLINE( 284)						 ::Dynamic index1 = this->expr(index);
HXLINE( 285)						::cpp::VirtualArray classes = ::cpp::VirtualArray_obj::__new(7)->init(0,HX_("Map",7c,c2,3a,00))->init(1,HX_("StringMap",2b,12,8c,69))->init(2,HX_("IntMap",0d,a9,08,d3))->init(3,HX_("ObjectMap",fd,a4,50,e5))->init(4,HX_("HashMap",4e,0f,b5,f6))->init(5,HX_("EnumValueMap",ec,9b,fb,92))->init(6,HX_("WeakMap",e4,a8,a9,a4));
HXDLIN( 285)						bool _hx_tmp;
HXDLIN( 285)						if (classes->contains(arr)) {
HXLINE( 285)							_hx_tmp = true;
            						}
            						else {
HXLINE( 285)							_hx_tmp = ::Std_obj::isOfType(arr,::hx::ClassOf< ::haxe::IMap >());
            						}
HXDLIN( 285)						if (_hx_tmp) {
HXLINE( 286)							 ::Dynamic v3 = ::haxe::IMap_obj::get( ::hx::interface_check(arr,0x09c2bd39),index1);
HXDLIN( 286)							v = fop(v3,this->expr(e2));
HXLINE( 287)							::haxe::IMap_obj::set( ::hx::interface_check(arr,0x09c2bd39),index1,v);
            						}
            						else {
HXLINE( 290)							 ::Dynamic arr1 = arr->__GetItem(( (int)(index1) ));
HXDLIN( 290)							v = fop(arr1,this->expr(e2));
HXLINE( 291)							arr->__SetItem(( (int)(index1) ),v);
            						}
            					}
            				}
            				break;
            				default:{
HXLINE( 294)					if (this->resumeError) {
HXLINE( 294)						return null();
            					}
            					else {
HXLINE( 294)						 ::hscriptBase::Error e4 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::EInvalidOp(op),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 294)						HX_STACK_DO_THROW(e4);
            					}
            				}
            			}
            		}
HXLINE( 296)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Interp_obj,evalAssignOp,return )

 ::Dynamic Interp_obj::increment( ::Dynamic e,bool prefix,int delta){
            	HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_299_increment)
HXLINE( 300)		this->curExpr = e;
HXLINE( 301)		 ::hscriptBase::ExprDef e1 = e->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
HXLINE( 302)		switch((int)(e1->_hx_getIndex())){
            			case (int)1: {
HXLINE( 303)				 ::Dynamic _g = e1->_hx_getObject(1);
HXDLIN( 303)				::String id = e1->_hx_getString(0);
HXLINE( 304)				 ::Dynamic l = this->locals->get(id);
HXLINE( 305)				 ::Dynamic v;
HXDLIN( 305)				if (::hx::IsNull( l )) {
HXLINE( 305)					v = this->resolve(id);
            				}
            				else {
HXLINE( 305)					v =  ::Dynamic(l->__Field(HX_("r",72,00,00,00),::hx::paccDynamic));
            				}
HXLINE( 306)				if (prefix) {
HXLINE( 307)					v = (v + delta);
HXLINE( 308)					if (::hx::IsNull( l )) {
HXLINE( 308)						this->setVar(id,v);
            					}
            					else {
HXLINE( 308)						l->__SetField(HX_("r",72,00,00,00),v,::hx::paccDynamic);
            					}
            				}
            				else {
HXLINE( 310)					if (::hx::IsNull( l )) {
HXLINE( 310)						this->setVar(id,(v + delta));
            					}
            					else {
HXLINE( 310)						l->__SetField(HX_("r",72,00,00,00),(v + delta),::hx::paccDynamic);
            					}
            				}
HXLINE( 311)				return v;
            			}
            			break;
            			case (int)6: {
HXLINE( 312)				 ::Dynamic e2 = e1->_hx_getObject(0);
HXDLIN( 312)				::String f = e1->_hx_getString(1);
HXLINE( 313)				 ::Dynamic obj = this->expr(e2);
HXLINE( 314)				 ::Dynamic v1 = this->get(obj,f);
HXLINE( 315)				if (prefix) {
HXLINE( 316)					v1 = (v1 + delta);
HXLINE( 317)					this->set(obj,f,v1);
            				}
            				else {
HXLINE( 319)					this->set(obj,f,(v1 + delta));
            				}
HXLINE( 320)				return v1;
            			}
            			break;
            			case (int)20: {
HXLINE( 321)				 ::Dynamic e3 = e1->_hx_getObject(0);
HXDLIN( 321)				 ::Dynamic index = e1->_hx_getObject(1);
HXLINE( 322)				 ::Dynamic arr = this->expr(e3);
HXLINE( 323)				 ::Dynamic index1 = this->expr(index);
HXLINE( 324)				::cpp::VirtualArray classes = ::cpp::VirtualArray_obj::__new(7)->init(0,HX_("Map",7c,c2,3a,00))->init(1,HX_("StringMap",2b,12,8c,69))->init(2,HX_("IntMap",0d,a9,08,d3))->init(3,HX_("ObjectMap",fd,a4,50,e5))->init(4,HX_("HashMap",4e,0f,b5,f6))->init(5,HX_("EnumValueMap",ec,9b,fb,92))->init(6,HX_("WeakMap",e4,a8,a9,a4));
HXDLIN( 324)				bool _hx_tmp;
HXDLIN( 324)				if (classes->contains(arr)) {
HXLINE( 324)					_hx_tmp = true;
            				}
            				else {
HXLINE( 324)					_hx_tmp = ::Std_obj::isOfType(arr,::hx::ClassOf< ::haxe::IMap >());
            				}
HXDLIN( 324)				if (_hx_tmp) {
HXLINE( 325)					int v2 = ( (int)(::haxe::IMap_obj::get( ::hx::interface_check(arr,0x09c2bd39),index1)) );
HXLINE( 326)					if (prefix) {
HXLINE( 327)						v2 = (v2 + delta);
HXLINE( 328)						::haxe::IMap_obj::set( ::hx::interface_check(arr,0x09c2bd39),index1,v2);
            					}
            					else {
HXLINE( 331)						::haxe::IMap_obj::set( ::hx::interface_check(arr,0x09c2bd39),index1,(v2 + delta));
            					}
HXLINE( 333)					return v2;
            				}
            				else {
HXLINE( 336)					int v3 = ( (int)(arr->__GetItem(( (int)(index1) ))) );
HXLINE( 337)					if (prefix) {
HXLINE( 338)						v3 = (v3 + delta);
HXLINE( 339)						arr->__SetItem(( (int)(index1) ),v3);
            					}
            					else {
HXLINE( 341)						arr->__SetItem(( (int)(index1) ),(v3 + delta));
            					}
HXLINE( 342)					return v3;
            				}
            			}
            			break;
            			default:{
HXLINE( 345)				::String e4;
HXDLIN( 345)				if ((delta > 0)) {
HXLINE( 345)					e4 = HX_("++",a0,25,00,00);
            				}
            				else {
HXLINE( 345)					e4 = HX_("--",60,27,00,00);
            				}
HXDLIN( 345)				if (this->resumeError) {
HXLINE( 345)					return null();
            				}
            				else {
HXLINE( 345)					 ::hscriptBase::Error e5 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::EInvalidOp(e4),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 345)					HX_STACK_DO_THROW(e5);
            				}
            			}
            		}
HXLINE( 302)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,increment,return )

 ::Dynamic Interp_obj::execute( ::Dynamic expr){
            	HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_349_execute)
HXLINE( 350)		this->depth = 0;
HXLINE( 352)		this->locals =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 356)		this->declared = ::Array_obj< ::Dynamic>::__new();
HXLINE( 357)		 ::Dynamic r = this->exprReturn(expr);
HXLINE( 358)		{
HXLINE( 358)			 ::hscriptBase::ExprDef _g;
HXDLIN( 358)			if (::hx::IsNull( expr )) {
HXLINE( 358)				_g = null();
            			}
            			else {
HXLINE( 358)				_g = expr->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
            			}
HXDLIN( 358)			if ((_g->_hx_getIndex() == 5)) {
HXLINE( 359)				::Array< ::Dynamic> e = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 359)				{
HXLINE( 360)					int imports = 0;
HXLINE( 361)					int pack = 0;
HXLINE( 362)					{
HXLINE( 362)						int _g1 = 0;
HXDLIN( 362)						while((_g1 < e->length)){
HXLINE( 362)							 ::Dynamic i = e->__get(_g1);
HXDLIN( 362)							_g1 = (_g1 + 1);
HXLINE( 363)							{
HXLINE( 363)								 ::hscriptBase::ExprDef _g2;
HXDLIN( 363)								if (::hx::IsNull( i )) {
HXLINE( 363)									_g2 = null();
            								}
            								else {
HXLINE( 363)									_g2 = i->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
            								}
HXDLIN( 363)								switch((int)(_g2->_hx_getIndex())){
            									case (int)30: {
HXLINE( 371)										 ::Dynamic _g3 = _g2->_hx_getObject(0);
HXDLIN( 371)										::String _g4 = _g2->_hx_getString(1);
HXDLIN( 371)										::String _g5 = _g2->_hx_getString(2);
HXDLIN( 371)										{
HXLINE( 372)											if ((e->indexOf(i,null()) > (imports + pack))) {
HXLINE( 373)												if (!(this->resumeError)) {
HXLINE( 373)													 ::hscriptBase::Error e1 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::ECustom(HX_("Unexpected import",b4,ef,ce,52)),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 373)													HX_STACK_DO_THROW(e1);
            												}
            											}
HXLINE( 374)											imports = (imports + 1);
            										}
            									}
            									break;
            									case (int)32: {
HXLINE( 365)										::String _g6 = _g2->_hx_getString(0);
HXDLIN( 365)										{
HXLINE( 366)											if ((e->indexOf(i,null()) > 0)) {
HXLINE( 367)												if (!(this->resumeError)) {
HXLINE( 367)													 ::hscriptBase::Error e2 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::ECustom(HX_("Unexpected package",57,62,29,fa)),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 367)													HX_STACK_DO_THROW(e2);
            												}
            											}
            											else {
HXLINE( 368)												if ((pack > 1)) {
HXLINE( 369)													if (!(this->resumeError)) {
HXLINE( 369)														 ::hscriptBase::Error e3 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::ECustom(HX_("Multiple packages has been declared",a5,78,d0,c2)),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 369)														HX_STACK_DO_THROW(e3);
            													}
            												}
            											}
HXLINE( 370)											pack = (pack + 1);
            										}
            									}
            									break;
            									default:{
            									}
            								}
            							}
            						}
            					}
HXLINE( 378)					if ((pack > 1)) {
HXLINE( 379)						if (!(this->resumeError)) {
HXLINE( 379)							 ::hscriptBase::Error e4 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::ECustom(HX_("Multiple packages has been declared",a5,78,d0,c2)),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 379)							HX_STACK_DO_THROW(e4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 382)		return r;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,execute,return )

 ::Dynamic Interp_obj::exprReturn( ::Dynamic e){
            	HX_STACKFRAME(&_hx_pos_23fee00e02910bec_386_exprReturn)
HXDLIN( 386)		try {
            			HX_STACK_CATCHABLE( ::hscriptBase::_Interp::Stop, 0);
            			HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE( 387)			return this->expr(e);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::hscriptBase::_Interp::Stop >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::hscriptBase::_Interp::Stop e11 = _hx_e;
HXLINE( 389)				switch((int)(e11->_hx_getIndex())){
            					case (int)0: {
HXLINE( 390)						HX_STACK_DO_THROW(HX_("Invalid break",b6,ee,24,9d));
            					}
            					break;
            					case (int)1: {
HXLINE( 391)						HX_STACK_DO_THROW(HX_("Invalid continue",d0,6a,b7,3f));
            					}
            					break;
            					case (int)2: {
HXLINE( 393)						 ::Dynamic v1 = this->returnValue;
HXLINE( 394)						this->returnValue = null();
HXLINE( 395)						return v1;
            					}
            					break;
            				}
            			}
            			else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::haxe::ValueException _g = _hx_e;
HXLINE( 388)				{
HXLINE( 388)					null();
            				}
HXLINE( 386)				if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::hscriptBase::_Interp::Stop >())) {
HXLINE( 388)					 ::hscriptBase::_Interp::Stop e11 = _g->value;
HXLINE( 389)					switch((int)(e11->_hx_getIndex())){
            						case (int)0: {
HXLINE( 390)							HX_STACK_DO_THROW(HX_("Invalid break",b6,ee,24,9d));
            						}
            						break;
            						case (int)1: {
HXLINE( 391)							HX_STACK_DO_THROW(HX_("Invalid continue",d0,6a,b7,3f));
            						}
            						break;
            						case (int)2: {
HXLINE( 393)							 ::Dynamic v1 = this->returnValue;
HXLINE( 394)							this->returnValue = null();
HXLINE( 395)							return v1;
            						}
            						break;
            					}
            				}
            				else {
HXDLIN( 386)					HX_STACK_DO_THROW(_g);
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN( 386)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,exprReturn,return )

 ::haxe::ds::StringMap Interp_obj::duplicate( ::haxe::ds::StringMap h){
            	HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_401_duplicate)
HXLINE( 403)		 ::haxe::ds::StringMap h2 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 407)		{
HXLINE( 407)			 ::Dynamic k = h->keys();
HXDLIN( 407)			while(( (bool)(k->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 407)				::String k1 = ( (::String)(k->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 408)				h2->set(k1,h->get(k1));
            			}
            		}
HXLINE( 409)		return h2;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,duplicate,return )

void Interp_obj::restore(int old){
            	HX_STACKFRAME(&_hx_pos_23fee00e02910bec_413_restore)
HXDLIN( 413)		while((this->declared->length > old)){
HXLINE( 414)			 ::Dynamic d = this->declared->pop();
HXLINE( 415)			this->locals->set(( (::String)(d->__Field(HX_("n",6e,00,00,00),::hx::paccDynamic)) ), ::Dynamic(d->__Field(HX_("old",a7,98,54,00),::hx::paccDynamic)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,restore,(void))

 ::Dynamic Interp_obj::error( ::hscriptBase::ErrorDef e,::hx::Null< bool >  __o_rethrow){
            		bool rethrow = __o_rethrow.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_419_error)
HXLINE( 420)		if (this->resumeError) {
HXLINE( 420)			return null();
            		}
HXLINE( 421)		 ::hscriptBase::Error e1 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,e,( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXLINE( 422)		if (rethrow) {
HXLINE( 422)			HX_STACK_DO_THROW(e1);
            		}
            		else {
HXLINE( 422)			HX_STACK_DO_THROW(e1);
            		}
HXDLIN( 422)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,error,return )

void Interp_obj::rethrow( ::Dynamic e){
            	HX_STACKFRAME(&_hx_pos_23fee00e02910bec_430_rethrow)
HXDLIN( 430)		HX_STACK_DO_THROW(e);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,rethrow,(void))

 ::Dynamic Interp_obj::resolve(::String id){
            	HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_434_resolve)
HXLINE( 435)		 ::Dynamic l = this->locals->get(id);
HXLINE( 436)		if (::hx::IsNotNull( l )) {
HXLINE( 437)			return  ::Dynamic(l->__Field(HX_("r",72,00,00,00),::hx::paccDynamic));
            		}
HXLINE( 438)		 ::Dynamic v = this->variables->get(id);
HXLINE( 439)		bool _hx_tmp;
HXDLIN( 439)		if (::hx::IsNotNull( this->specialObject )) {
HXLINE( 439)			_hx_tmp = ::hx::IsNotNull( this->specialObject->__Field(HX_("obj",f7,8f,54,00),::hx::paccDynamic) );
            		}
            		else {
HXLINE( 439)			_hx_tmp = false;
            		}
HXDLIN( 439)		if (_hx_tmp) {
HXLINE( 441)			 ::Dynamic field = ::Reflect_obj::getProperty( ::Dynamic(this->specialObject->__Field(HX_("obj",f7,8f,54,00),::hx::paccDynamic)),id);
HXLINE( 442)			bool _hx_tmp1;
HXDLIN( 442)			bool _hx_tmp2;
HXDLIN( 442)			if (::hx::IsNotNull( field )) {
HXLINE( 442)				if (!(( (bool)(this->specialObject->__Field(HX_("includeFunctions",13,e7,b1,03),::hx::paccDynamic)) ))) {
HXLINE( 442)					_hx_tmp2 = ::hx::IsPointerNotEq( ::Type_obj::_hx_typeof(field),::ValueType_obj::TFunction_dyn() );
            				}
            				else {
HXLINE( 442)					_hx_tmp2 = true;
            				}
            			}
            			else {
HXLINE( 442)				_hx_tmp2 = false;
            			}
HXDLIN( 442)			if (_hx_tmp2) {
HXLINE( 442)				if (::hx::IsNotNull( this->specialObject->__Field(HX_("exclusions",e5,ad,ac,ac),::hx::paccDynamic) )) {
HXLINE( 442)					_hx_tmp1 = !(( (::Array< ::String >)(this->specialObject->__Field(HX_("exclusions",e5,ad,ac,ac),::hx::paccDynamic)) )->contains(id));
            				}
            				else {
HXLINE( 442)					_hx_tmp1 = true;
            				}
            			}
            			else {
HXLINE( 442)				_hx_tmp1 = false;
            			}
HXDLIN( 442)			if (_hx_tmp1) {
HXLINE( 443)				return field;
            			}
            		}
HXLINE( 445)		bool _hx_tmp3;
HXDLIN( 445)		if (::hx::IsNull( v )) {
HXLINE( 445)			_hx_tmp3 = !(this->variables->exists(id));
            		}
            		else {
HXLINE( 445)			_hx_tmp3 = false;
            		}
HXDLIN( 445)		if (_hx_tmp3) {
HXLINE( 446)			if (!(this->resumeError)) {
HXLINE( 446)				 ::hscriptBase::Error e =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::EUnknownVariable(id),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 446)				HX_STACK_DO_THROW(e);
            			}
            		}
HXLINE( 447)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,resolve,return )

 ::Dynamic Interp_obj::expr( ::Dynamic e){
            	HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_450_expr)
HXDLIN( 450)		 ::hscriptBase::Interp _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 451)		this->curExpr = e;
HXLINE( 452)		 ::hscriptBase::ExprDef e1 = e->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
HXLINE( 453)		switch((int)(e1->_hx_getIndex())){
            			case (int)0: {
HXLINE( 454)				 ::hscriptBase::Const c = e1->_hx_getObject(0).StaticCast<  ::hscriptBase::Const >();
HXLINE( 455)				switch((int)(c->_hx_getIndex())){
            					case (int)0: {
HXLINE( 456)						int v = c->_hx_getInt(0);
HXDLIN( 456)						return v;
            					}
            					break;
            					case (int)1: {
HXLINE( 457)						Float f = c->_hx_getFloat(0);
HXDLIN( 457)						return f;
            					}
            					break;
            					case (int)2: {
HXLINE( 458)						 ::Dynamic _g = c->_hx_getObject(1);
HXDLIN( 458)						::String s = c->_hx_getString(0);
HXDLIN( 458)						return s;
            					}
            					break;
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 463)				 ::Dynamic _g1 = e1->_hx_getObject(1);
HXDLIN( 463)				::String id = e1->_hx_getString(0);
HXLINE( 464)				return this->resolve(id);
            			}
            			break;
            			case (int)2: {
HXLINE( 465)				::String n = e1->_hx_getString(0);
HXDLIN( 465)				 ::hscriptBase::CType t = e1->_hx_getObject(1).StaticCast<  ::hscriptBase::CType >();
HXDLIN( 465)				 ::Dynamic e2 = e1->_hx_getObject(2);
HXDLIN( 465)				::Array< ::String > g = e1->_hx_getObject(3).StaticCast< ::Array< ::String > >();
HXLINE( 466)				bool _hx_tmp;
HXDLIN( 466)				if (::hx::IsNotNull( t )) {
HXLINE( 466)					_hx_tmp = ::hx::IsNotNull( e2 );
            				}
            				else {
HXLINE( 466)					_hx_tmp = false;
            				}
HXDLIN( 466)				if (_hx_tmp) {
HXLINE( 468)					 ::Dynamic e3 = this->expr(e2);
HXLINE( 469)					::String ftype = ::hscriptBase::Tools_obj::ctToType(t);
HXLINE( 470)					::String stype = ::hscriptBase::Tools_obj::getType(e3,null());
HXLINE( 471)					 ::Dynamic cl = this->variables->get(ftype);
HXLINE( 472)					::String clN = ::hscriptBase::Tools_obj::getType(e3,true);
HXLINE( 474)					if (this->typecheck) {
HXLINE( 475)						bool _hx_tmp1;
HXDLIN( 475)						bool _hx_tmp2;
HXDLIN( 475)						bool _hx_tmp3;
HXDLIN( 475)						if (!(::hscriptBase::Tools_obj::compatibleWithEachOther(ftype,stype))) {
HXLINE( 475)							_hx_tmp3 = (ftype != stype);
            						}
            						else {
HXLINE( 475)							_hx_tmp3 = false;
            						}
HXDLIN( 475)						if (_hx_tmp3) {
HXLINE( 475)							_hx_tmp2 = (ftype != HX_("Anon",6c,b7,4a,2b));
            						}
            						else {
HXLINE( 475)							_hx_tmp2 = false;
            						}
HXDLIN( 475)						if (_hx_tmp2) {
HXLINE( 475)							_hx_tmp1 = !(::hscriptBase::Tools_obj::compatibleWithEachOtherObjects(cl,clN));
            						}
            						else {
HXLINE( 475)							_hx_tmp1 = false;
            						}
HXDLIN( 475)						if (_hx_tmp1) {
HXLINE( 475)							if (!(this->resumeError)) {
HXLINE( 475)								 ::hscriptBase::Error e4 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::EUnmatchingType(ftype,stype,n),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 475)								HX_STACK_DO_THROW(e4);
            							}
            						}
            					}
            				}
HXLINE( 478)				 ::Dynamic expr1;
HXDLIN( 478)				if (::hx::IsNull( e2 )) {
HXLINE( 478)					expr1 = null();
            				}
            				else {
HXLINE( 478)					expr1 = this->expr(e2);
            				}
HXLINE( 479)				::String name = null();
HXLINE( 480)				bool isMap;
HXDLIN( 480)				bool isMap1;
HXDLIN( 480)				bool isMap2;
HXDLIN( 480)				if (::hx::IsNotNull( t )) {
HXLINE( 480)					isMap2 = ::hx::IsNotNull( e2 );
            				}
            				else {
HXLINE( 480)					isMap2 = false;
            				}
HXDLIN( 480)				if (isMap2) {
HXLINE( 480)					if (::hx::IsNull( t )) {
HXLINE( 480)						isMap1 = false;
            					}
            					else {
HXLINE( 480)						if ((t->_hx_getIndex() == 0)) {
HXLINE( 481)							::Array< ::Dynamic> _g2 = t->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 481)							::Array< ::String > path = t->_hx_getObject(0).StaticCast< ::Array< ::String > >();
HXLINE( 482)							bool isMap3;
HXDLIN( 482)							if ((path->length == 1)) {
HXLINE( 482)								 ::Dynamic o = path->__get(0);
HXDLIN( 482)								::cpp::VirtualArray classes = ::cpp::VirtualArray_obj::__new(7)->init(0,HX_("Map",7c,c2,3a,00))->init(1,HX_("StringMap",2b,12,8c,69))->init(2,HX_("IntMap",0d,a9,08,d3))->init(3,HX_("ObjectMap",fd,a4,50,e5))->init(4,HX_("HashMap",4e,0f,b5,f6))->init(5,HX_("EnumValueMap",ec,9b,fb,92))->init(6,HX_("WeakMap",e4,a8,a9,a4));
HXDLIN( 482)								if (classes->contains(o)) {
HXLINE( 482)									isMap3 = true;
            								}
            								else {
HXLINE( 482)									isMap3 = ::Std_obj::isOfType(o,::hx::ClassOf< ::haxe::IMap >());
            								}
            							}
            							else {
HXLINE( 482)								isMap3 = false;
            							}
HXDLIN( 482)							if (isMap3) {
HXLINE( 484)								name = path->__get(0);
HXLINE( 480)								isMap1 = true;
            							}
            							else {
HXLINE( 480)								isMap1 = false;
            							}
            						}
            						else {
HXLINE( 480)							isMap1 = false;
            						}
            					}
            				}
            				else {
HXLINE( 480)					isMap1 = false;
            				}
HXDLIN( 480)				if (isMap1) {
HXLINE( 489)					 ::hscriptBase::ExprDef _g3;
HXDLIN( 489)					if (::hx::IsNull( e2 )) {
HXLINE( 489)						_g3 = null();
            					}
            					else {
HXLINE( 489)						_g3 = e2->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
            					}
HXDLIN( 489)					if ((_g3->_hx_getIndex() == 21)) {
HXLINE( 490)						::Array< ::Dynamic> e5 = _g3->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 491)						if ((e5->length < 1)) {
HXLINE( 480)							isMap = true;
            						}
            						else {
HXLINE( 480)							isMap = false;
            						}
            					}
            					else {
HXLINE( 480)						isMap = false;
            					}
            				}
            				else {
HXLINE( 480)					isMap = false;
            				}
HXLINE( 496)				if (isMap) {
HXLINE( 497)					if (::hx::IsNotNull( name )) {
HXLINE( 497)						::String _hx_switch_0 = name;
            						if (  (_hx_switch_0==HX_("IntMap",0d,a9,08,d3)) ){
HXLINE( 498)							expr1 =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXDLIN( 498)							goto _hx_goto_57;
            						}
            						if (  (_hx_switch_0==HX_("Map",7c,c2,3a,00)) ||  (_hx_switch_0==HX_("ObjectMap",fd,a4,50,e5)) ){
HXLINE( 500)							expr1 =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXDLIN( 500)							goto _hx_goto_57;
            						}
            						if (  (_hx_switch_0==HX_("StringMap",2b,12,8c,69)) ){
HXLINE( 499)							expr1 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 499)							goto _hx_goto_57;
            						}
            						/* default */{
            						}
            						_hx_goto_57:;
            					}
            				}
HXLINE( 504)				::Array< ::Dynamic> _hx_tmp4 = this->declared;
HXDLIN( 504)				_hx_tmp4->push( ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("n",6e,00,00,00),n)
            					->setFixed(1,HX_("old",a7,98,54,00),this->locals->get(n))));
HXLINE( 505)				this->locals->set(n, ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("isFinal",2c,03,20,9d),false)
            					->setFixed(1,HX_("r",72,00,00,00),expr1)
            					->setFixed(2,HX_("t",74,00,00,00),t)));
HXLINE( 506)				return null();
            			}
            			break;
            			case (int)3: {
HXLINE( 507)				::String n1 = e1->_hx_getString(0);
HXDLIN( 507)				 ::hscriptBase::CType t1 = e1->_hx_getObject(1).StaticCast<  ::hscriptBase::CType >();
HXDLIN( 507)				 ::Dynamic e6 = e1->_hx_getObject(2);
HXLINE( 508)				bool _hx_tmp5;
HXDLIN( 508)				if (::hx::IsNotNull( t1 )) {
HXLINE( 508)					_hx_tmp5 = ::hx::IsNotNull( e6 );
            				}
            				else {
HXLINE( 508)					_hx_tmp5 = false;
            				}
HXDLIN( 508)				if (_hx_tmp5) {
HXLINE( 510)					 ::Dynamic e7 = this->expr(e6);
HXLINE( 511)					::String ftype1 = ::hscriptBase::Tools_obj::ctToType(t1);
HXLINE( 512)					::String stype1 = ::hscriptBase::Tools_obj::getType(e7,null());
HXLINE( 513)					 ::Dynamic cl1 = this->variables->get(ftype1);
HXLINE( 514)					::String clN1 = ::hscriptBase::Tools_obj::getType(e7,true);
HXLINE( 516)					if (this->typecheck) {
HXLINE( 517)						bool _hx_tmp6;
HXDLIN( 517)						bool _hx_tmp7;
HXDLIN( 517)						bool _hx_tmp8;
HXDLIN( 517)						if (!(::hscriptBase::Tools_obj::compatibleWithEachOther(ftype1,stype1))) {
HXLINE( 517)							_hx_tmp8 = (ftype1 != stype1);
            						}
            						else {
HXLINE( 517)							_hx_tmp8 = false;
            						}
HXDLIN( 517)						if (_hx_tmp8) {
HXLINE( 517)							_hx_tmp7 = (ftype1 != HX_("Anon",6c,b7,4a,2b));
            						}
            						else {
HXLINE( 517)							_hx_tmp7 = false;
            						}
HXDLIN( 517)						if (_hx_tmp7) {
HXLINE( 517)							_hx_tmp6 = !(::hscriptBase::Tools_obj::compatibleWithEachOtherObjects(cl1,clN1));
            						}
            						else {
HXLINE( 517)							_hx_tmp6 = false;
            						}
HXDLIN( 517)						if (_hx_tmp6) {
HXLINE( 517)							if (!(this->resumeError)) {
HXLINE( 517)								 ::hscriptBase::Error e8 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::EUnmatchingType(ftype1,stype1,n1),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 517)								HX_STACK_DO_THROW(e8);
            							}
            						}
            					}
            				}
HXLINE( 520)				::Array< ::Dynamic> _hx_tmp9 = this->declared;
HXDLIN( 520)				_hx_tmp9->push( ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("n",6e,00,00,00),n1)
            					->setFixed(1,HX_("old",a7,98,54,00),this->locals->get(n1))));
HXLINE( 521)				{
HXLINE( 521)					::Dynamic this1 = this->locals;
HXDLIN( 521)					 ::Dynamic value;
HXDLIN( 521)					if (::hx::IsNull( e6 )) {
HXLINE( 521)						value = null();
            					}
            					else {
HXLINE( 521)						value = this->expr(e6);
            					}
HXDLIN( 521)					( ( ::haxe::ds::StringMap)(this1) )->set(n1, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("isFinal",2c,03,20,9d),true)
            						->setFixed(1,HX_("r",72,00,00,00),value)));
            				}
HXLINE( 522)				return null();
            			}
            			break;
            			case (int)4: {
HXLINE( 523)				 ::Dynamic e9 = e1->_hx_getObject(0);
HXLINE( 524)				return this->expr(e9);
            			}
            			break;
            			case (int)5: {
HXLINE( 525)				::Array< ::Dynamic> exprs = e1->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 526)				int old = this->declared->length;
HXLINE( 527)				 ::Dynamic v1 = null();
HXLINE( 528)				{
HXLINE( 528)					int _g4 = 0;
HXDLIN( 528)					while((_g4 < exprs->length)){
HXLINE( 528)						 ::Dynamic e10 = exprs->__get(_g4);
HXDLIN( 528)						_g4 = (_g4 + 1);
HXLINE( 529)						v1 = this->expr(e10);
            					}
            				}
HXLINE( 531)				this->restore(old);
HXLINE( 532)				return v1;
            			}
            			break;
            			case (int)6: {
HXLINE( 533)				 ::Dynamic e11 = e1->_hx_getObject(0);
HXDLIN( 533)				::String f1 = e1->_hx_getString(1);
HXLINE( 534)				return this->get(this->expr(e11),f1);
            			}
            			break;
            			case (int)7: {
HXLINE( 543)				::String op = e1->_hx_getString(0);
HXDLIN( 543)				 ::Dynamic e12 = e1->_hx_getObject(1);
HXDLIN( 543)				 ::Dynamic e21 = e1->_hx_getObject(2);
HXLINE( 544)				 ::Dynamic fop = this->binops->get(op);
HXLINE( 545)				if (::hx::IsNull( fop )) {
HXLINE( 545)					if (!(this->resumeError)) {
HXLINE( 545)						 ::hscriptBase::Error e13 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::EInvalidOp(op),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 545)						HX_STACK_DO_THROW(e13);
            					}
            				}
HXLINE( 546)				return fop(e12,e21);
            			}
            			break;
            			case (int)8: {
HXLINE( 535)				 ::Dynamic p = e1->_hx_getObject(0);
HXDLIN( 535)				 ::Dynamic e14 = e1->_hx_getObject(1);
HXDLIN( 535)				 ::Dynamic e22 = e1->_hx_getObject(2);
HXLINE( 536)				 ::Dynamic parent = this->expr(p);
HXLINE( 537)				 ::Dynamic e15 = this->expr(e14);
HXDLIN( 537)				 ::Dynamic e23 = this->expr(e22);
HXLINE( 538)				if (::hx::IsEq( parent,e15 )) {
HXLINE( 539)					return e15;
            				}
            				else {
HXLINE( 540)					if (::hx::IsEq( parent,e23 )) {
HXLINE( 541)						return e23;
            					}
            				}
HXLINE( 542)				return null();
            			}
            			break;
            			case (int)9: {
HXLINE( 547)				::String op1 = e1->_hx_getString(0);
HXDLIN( 547)				bool prefix = e1->_hx_getBool(1);
HXDLIN( 547)				 ::Dynamic e16 = e1->_hx_getObject(2);
HXLINE( 548)				::String _hx_switch_1 = op1;
            				if (  (_hx_switch_1==HX_("!",21,00,00,00)) ){
HXLINE( 550)					return ::hx::IsNotEq( this->expr(e16),true );
HXDLIN( 550)					goto _hx_goto_59;
            				}
            				if (  (_hx_switch_1==HX_("++",a0,25,00,00)) ){
HXLINE( 554)					return this->increment(e16,prefix,1);
HXDLIN( 554)					goto _hx_goto_59;
            				}
            				if (  (_hx_switch_1==HX_("-",2d,00,00,00)) ){
HXLINE( 552)					return -(this->expr(e16));
HXDLIN( 552)					goto _hx_goto_59;
            				}
            				if (  (_hx_switch_1==HX_("--",60,27,00,00)) ){
HXLINE( 556)					return this->increment(e16,prefix,-1);
HXDLIN( 556)					goto _hx_goto_59;
            				}
            				if (  (_hx_switch_1==HX_("~",7e,00,00,00)) ){
HXLINE( 561)					return ~(( (int)(this->expr(e16)) ));
HXDLIN( 561)					goto _hx_goto_59;
            				}
            				/* default */{
HXLINE( 564)					if (!(this->resumeError)) {
HXLINE( 564)						 ::hscriptBase::Error e17 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::EInvalidOp(op1),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 564)						HX_STACK_DO_THROW(e17);
            					}
            				}
            				_hx_goto_59:;
            			}
            			break;
            			case (int)10: {
HXLINE( 566)				 ::Dynamic e18 = e1->_hx_getObject(0);
HXDLIN( 566)				::Array< ::Dynamic> params = e1->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 567)				::String id1;
HXDLIN( 567)				 ::hscriptBase::ExprDef _g5 = e18->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
HXDLIN( 567)				if ((_g5->_hx_getIndex() == 1)) {
HXLINE( 568)					::String v2 = _g5->_hx_getString(0);
HXDLIN( 568)					 ::Dynamic i = _g5->_hx_getObject(1);
HXLINE( 567)					id1 = v2;
            				}
            				else {
HXLINE( 567)					id1 = null();
            				}
HXLINE( 573)				::cpp::VirtualArray args = ::cpp::VirtualArray_obj::__new();
HXLINE( 574)				{
HXLINE( 574)					int _g6 = 0;
HXDLIN( 574)					while((_g6 < params->length)){
HXLINE( 574)						 ::Dynamic p1 = params->__get(_g6);
HXDLIN( 574)						_g6 = (_g6 + 1);
HXLINE( 575)						args->push(this->expr(p1));
            					}
            				}
HXLINE( 577)				 ::hscriptBase::ExprDef _g7;
HXDLIN( 577)				if (::hx::IsNull( e18 )) {
HXLINE( 577)					_g7 = null();
            				}
            				else {
HXLINE( 577)					_g7 = e18->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
            				}
HXDLIN( 577)				if ((_g7->_hx_getIndex() == 6)) {
HXLINE( 578)					 ::Dynamic e19 = _g7->_hx_getObject(0);
HXDLIN( 578)					::String f2 = _g7->_hx_getString(1);
HXLINE( 579)					 ::Dynamic obj = this->expr(e19);
HXLINE( 580)					if (::hx::IsNull( obj )) {
HXLINE( 580)						if (!(this->resumeError)) {
HXLINE( 580)							 ::hscriptBase::Error e20 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::EInvalidAccess(f2),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 580)							HX_STACK_DO_THROW(e20);
            						}
            					}
HXLINE( 581)					return this->fcall(obj,f2,args);
            				}
            				else {
HXLINE( 583)					return this->call(null(),this->expr(e18),args);
            				}
            			}
            			break;
            			case (int)11: {
HXLINE( 585)				 ::Dynamic econd = e1->_hx_getObject(0);
HXDLIN( 585)				 ::Dynamic e110 = e1->_hx_getObject(1);
HXDLIN( 585)				 ::Dynamic e24 = e1->_hx_getObject(2);
HXLINE( 586)				if (::hx::IsEq( this->expr(econd),true )) {
HXLINE( 586)					return this->expr(e110);
            				}
            				else {
HXLINE( 586)					if (::hx::IsNull( e24 )) {
HXLINE( 586)						return null();
            					}
            					else {
HXLINE( 586)						return this->expr(e24);
            					}
            				}
            			}
            			break;
            			case (int)12: {
HXLINE( 587)				 ::Dynamic econd1 = e1->_hx_getObject(0);
HXDLIN( 587)				 ::Dynamic e25 = e1->_hx_getObject(1);
HXLINE( 588)				this->whileLoop(econd1,e25);
HXLINE( 589)				return null();
            			}
            			break;
            			case (int)13: {
HXLINE( 593)				::String v3 = e1->_hx_getString(0);
HXDLIN( 593)				 ::Dynamic it = e1->_hx_getObject(1);
HXDLIN( 593)				 ::Dynamic e26 = e1->_hx_getObject(2);
HXLINE( 594)				this->forLoop(v3,it,e26);
HXLINE( 595)				return null();
            			}
            			break;
            			case (int)14: {
HXLINE( 837)				 ::Dynamic e111 = e1->_hx_getObject(0);
HXDLIN( 837)				 ::Dynamic e27 = e1->_hx_getObject(1);
HXDLIN( 837)				bool assign = e1->_hx_getBool(2);
HXLINE( 838)				if (assign) {
HXLINE( 838)					return this->coalesce2(e111,e27);
            				}
            				else {
HXLINE( 838)					return this->coalesce(e111,e27);
            				}
            			}
            			break;
            			case (int)15: {
HXLINE( 839)				 ::Dynamic e112 = e1->_hx_getObject(0);
HXDLIN( 839)				::String f3 = e1->_hx_getString(1);
HXLINE( 840)				 ::Dynamic e28 = this->expr(e112);
HXLINE( 841)				if (::hx::IsNull( e28 )) {
HXLINE( 842)					return null();
            				}
HXLINE( 844)				return this->get(e28,f3);
            			}
            			break;
            			case (int)16: {
HXLINE( 597)				HX_STACK_DO_THROW(::hscriptBase::_Interp::Stop_obj::SBreak_dyn());
            			}
            			break;
            			case (int)17: {
HXLINE( 599)				HX_STACK_DO_THROW(::hscriptBase::_Interp::Stop_obj::SContinue_dyn());
            			}
            			break;
            			case (int)18: {
            				HX_BEGIN_LOCAL_FUNC_S7(::hx::LocalFunc,_hx_Closure_0,::String,name1, ::Dynamic,fexpr, ::hscriptBase::Interp,_gthis,::Array< int >,minParams, ::hscriptBase::Interp,me, ::haxe::ds::StringMap,capturedLocals,::Array< ::Dynamic>,params1) HXARGC(1)
            				 ::Dynamic _hx_run(::cpp::VirtualArray args){
            					HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_682_expr)
HXLINE( 683)					int f;
HXDLIN( 683)					if (::hx::IsNull( args )) {
HXLINE( 683)						f = 0;
            					}
            					else {
HXLINE( 683)						f = args->get_length();
            					}
HXDLIN( 683)					if ((f != params1->length)) {
HXLINE( 684)						if ((args->get_length() < minParams->__get(0))) {
HXLINE( 685)							::String str = (((HX_("Invalid number of parameters. Got ",cb,2b,d9,b1) + args->get_length()) + HX_(", required ",ed,0c,66,93)) + minParams->__get(0));
HXLINE( 686)							if (::hx::IsNotNull( name1 )) {
HXLINE( 686)								str = (str + ((HX_(" for function '",f6,90,ab,a0) + name1) + HX_("'",27,00,00,00)));
            							}
HXLINE( 687)							if (!(_gthis->resumeError)) {
HXLINE( 687)								 ::hscriptBase::Error e =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::ECustom(str),( (int)(_gthis->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(_gthis->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(_gthis->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(_gthis->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 687)								HX_STACK_DO_THROW(e);
            							}
            						}
HXLINE( 690)						::cpp::VirtualArray args2 = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 691)						int extraParams = (args->get_length() - minParams->__get(0));
HXLINE( 692)						int pos = 0;
HXLINE( 693)						{
HXLINE( 693)							int _g = 0;
HXDLIN( 693)							while((_g < params1->length)){
HXLINE( 693)								 ::Dynamic p = params1->__get(_g);
HXDLIN( 693)								_g = (_g + 1);
HXLINE( 694)								if (( (bool)(p->__Field(HX_("opt",33,9c,54,00),::hx::paccDynamic)) )) {
HXLINE( 695)									if ((extraParams > 0)) {
HXLINE( 696)										pos = (pos + 1);
HXDLIN( 696)										args2->push(args->__get((pos - 1)));
HXLINE( 697)										extraParams = (extraParams - 1);
            									}
            									else {
HXLINE( 699)										args2->push(null());
            									}
            								}
            								else {
HXLINE( 701)									pos = (pos + 1);
HXDLIN( 701)									args2->push(args->__get((pos - 1)));
            								}
            							}
            						}
HXLINE( 702)						args = args2;
            					}
HXLINE( 704)					 ::haxe::ds::StringMap old = me->locals;
HXDLIN( 704)					int depth = me->depth;
HXLINE( 705)					me->depth++;
HXLINE( 706)					me->locals = me->duplicate(capturedLocals);
HXLINE( 707)					{
HXLINE( 707)						int _g1 = 0;
HXDLIN( 707)						int _g2 = params1->length;
HXDLIN( 707)						while((_g1 < _g2)){
HXLINE( 707)							_g1 = (_g1 + 1);
HXDLIN( 707)							int i = (_g1 - 1);
HXLINE( 708)							me->locals->set(( (::String)(params1->__get(i)->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ), ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("r",72,00,00,00),args->__get(i))));
            						}
            					}
HXLINE( 709)					 ::Dynamic r = null();
HXLINE( 710)					int oldDecl = _gthis->declared->length;
HXLINE( 711)					if (_gthis->inTry) {
HXLINE( 712)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 713)							r = me->exprReturn(fexpr);
            						} catch( ::Dynamic _hx_e) {
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic _g3 = _hx_e;
HXLINE( 714)								{
HXLINE( 714)									null();
            								}
HXDLIN( 714)								 ::Dynamic e1 = _g3;
HXLINE( 715)								me->locals = old;
HXLINE( 716)								me->depth = depth;
HXLINE( 720)								HX_STACK_DO_THROW(e1);
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
            					}
            					else {
HXLINE( 724)						r = me->exprReturn(fexpr);
            					}
HXLINE( 726)					_gthis->restore(oldDecl);
HXLINE( 727)					me->locals = old;
HXLINE( 728)					me->depth = depth;
HXLINE( 729)					return r;
            				}
            				HX_END_LOCAL_FUNC1(return)

HXLINE( 672)				 ::hscriptBase::CType _g8 = e1->_hx_getObject(3).StaticCast<  ::hscriptBase::CType >();
HXDLIN( 672)				::Array< ::Dynamic> params1 = e1->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 672)				 ::Dynamic fexpr = e1->_hx_getObject(1);
HXDLIN( 672)				::String name1 = e1->_hx_getString(2);
HXDLIN( 672)				 ::Dynamic d = e1->_hx_getObject(4);
HXLINE( 673)				 ::haxe::ds::StringMap capturedLocals = this->duplicate(this->locals);
HXLINE( 674)				 ::hscriptBase::Interp me = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 675)				bool hasOpt = false;
HXDLIN( 675)				::Array< int > minParams = ::Array_obj< int >::fromData( _hx_array_data_88b7bafe_77,1);
HXLINE( 676)				{
HXLINE( 676)					int _g9 = 0;
HXDLIN( 676)					while((_g9 < params1->length)){
HXLINE( 676)						 ::Dynamic p2 = params1->__get(_g9);
HXDLIN( 676)						_g9 = (_g9 + 1);
HXLINE( 677)						if (( (bool)(p2->__Field(HX_("opt",33,9c,54,00),::hx::paccDynamic)) )) {
HXLINE( 678)							hasOpt = true;
            						}
            						else {
HXLINE( 680)							minParams[0]++;
            						}
            					}
            				}
HXLINE( 681)				 ::Dynamic f4 =  ::Dynamic(new _hx_Closure_0(name1,fexpr,_gthis,minParams,me,capturedLocals,params1));
HXLINE( 731)				 ::Dynamic f5 = ::Reflect_obj::makeVarArgs(f4);
HXLINE( 732)				if (::hx::IsNotNull( name1 )) {
HXLINE( 733)					if ((this->depth == 0)) {
HXLINE( 735)						this->variables->set(name1,f5);
            					}
            					else {
HXLINE( 738)						::Array< ::Dynamic> _hx_tmp10 = this->declared;
HXDLIN( 738)						::String name2 = name1;
HXDLIN( 738)						_hx_tmp10->push( ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("n",6e,00,00,00),name2)
            							->setFixed(1,HX_("old",a7,98,54,00),this->locals->get(name1))));
HXLINE( 739)						 ::Dynamic ref =  ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("r",72,00,00,00),f5));
HXLINE( 740)						this->locals->set(name1,ref);
HXLINE( 741)						capturedLocals->set(name1,ref);
            					}
            				}
HXLINE( 744)				bool _hx_tmp11;
HXDLIN( 744)				if (::hx::IsNotNull( d )) {
HXLINE( 744)					_hx_tmp11 = ( (bool)(d->__Field(HX_("v",76,00,00,00),::hx::paccDynamic)) );
            				}
            				else {
HXLINE( 744)					_hx_tmp11 = false;
            				}
HXDLIN( 744)				if (_hx_tmp11) {
HXLINE( 746)					this->dynamicFuncs->set(name1,true);
HXLINE( 747)					if (this->locals->exists(name1)) {
HXLINE( 748)						this->locals->get(name1)->__SetField(HX_("dynamicFunc",63,e2,52,69),true,::hx::paccDynamic);
            					}
            				}
HXLINE( 750)				return f5;
            			}
            			break;
            			case (int)19: {
HXLINE( 600)				 ::Dynamic e29 = e1->_hx_getObject(0);
HXLINE( 601)				 ::Dynamic _hx_tmp12;
HXDLIN( 601)				if (::hx::IsNull( e29 )) {
HXLINE( 601)					_hx_tmp12 = null();
            				}
            				else {
HXLINE( 601)					_hx_tmp12 = this->expr(e29);
            				}
HXDLIN( 601)				this->returnValue = _hx_tmp12;
HXLINE( 602)				HX_STACK_DO_THROW(::hscriptBase::_Interp::Stop_obj::SReturn_dyn());
            			}
            			break;
            			case (int)20: {
HXLINE( 793)				 ::Dynamic e30 = e1->_hx_getObject(0);
HXDLIN( 793)				 ::Dynamic index = e1->_hx_getObject(1);
HXLINE( 794)				 ::Dynamic arr = this->expr(e30);
HXLINE( 795)				 ::Dynamic index1 = this->expr(index);
HXLINE( 796)				::cpp::VirtualArray classes1 = ::cpp::VirtualArray_obj::__new(7)->init(0,HX_("Map",7c,c2,3a,00))->init(1,HX_("StringMap",2b,12,8c,69))->init(2,HX_("IntMap",0d,a9,08,d3))->init(3,HX_("ObjectMap",fd,a4,50,e5))->init(4,HX_("HashMap",4e,0f,b5,f6))->init(5,HX_("EnumValueMap",ec,9b,fb,92))->init(6,HX_("WeakMap",e4,a8,a9,a4));
HXDLIN( 796)				bool _hx_tmp13;
HXDLIN( 796)				if (classes1->contains(arr)) {
HXLINE( 796)					_hx_tmp13 = true;
            				}
            				else {
HXLINE( 796)					_hx_tmp13 = ::Std_obj::isOfType(arr,::hx::ClassOf< ::haxe::IMap >());
            				}
HXDLIN( 796)				if (_hx_tmp13) {
HXLINE( 797)					return ::haxe::IMap_obj::get( ::hx::interface_check(arr,0x09c2bd39),index1);
            				}
            				else {
HXLINE( 800)					return arr->__GetItem(( (int)(index1) ));
            				}
            			}
            			break;
            			case (int)21: {
HXLINE( 751)				::Array< ::Dynamic> arr1 = e1->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 752)				bool _hx_tmp14;
HXDLIN( 752)				if ((arr1->length > 0)) {
HXLINE( 752)					 ::Dynamic e31 = arr1->__get(0);
HXDLIN( 752)					 ::hscriptBase::ExprDef _g10;
HXDLIN( 752)					if (::hx::IsNull( e31 )) {
HXLINE( 752)						_g10 = null();
            					}
            					else {
HXLINE( 752)						_g10 = e31->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
            					}
HXDLIN( 752)					if ((_g10->_hx_getIndex() == 7)) {
HXLINE( 752)						 ::Dynamic _g11 = _g10->_hx_getObject(1);
HXDLIN( 752)						 ::Dynamic _g12 = _g10->_hx_getObject(2);
HXDLIN( 752)						if ((_g10->_hx_getString(0) == HX_("=>",61,35,00,00))) {
HXLINE( 752)							_hx_tmp14 = true;
            						}
            						else {
HXLINE( 752)							_hx_tmp14 = false;
            						}
            					}
            					else {
HXLINE( 752)						_hx_tmp14 = false;
            					}
            				}
            				else {
HXLINE( 752)					_hx_tmp14 = false;
            				}
HXDLIN( 752)				if (_hx_tmp14) {
HXLINE( 753)					bool isAllString = true;
HXLINE( 754)					bool isAllInt = true;
HXLINE( 755)					bool isAllObject = true;
HXLINE( 756)					bool isAllEnum = true;
HXLINE( 757)					::cpp::VirtualArray keys = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 758)					::cpp::VirtualArray values = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 759)					{
HXLINE( 759)						int _g13 = 0;
HXDLIN( 759)						while((_g13 < arr1->length)){
HXLINE( 759)							 ::Dynamic e32 = arr1->__get(_g13);
HXDLIN( 759)							_g13 = (_g13 + 1);
HXLINE( 760)							{
HXLINE( 760)								 ::hscriptBase::ExprDef _g14;
HXDLIN( 760)								if (::hx::IsNull( e32 )) {
HXLINE( 760)									_g14 = null();
            								}
            								else {
HXLINE( 760)									_g14 = e32->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
            								}
HXDLIN( 760)								if ((_g14->_hx_getIndex() == 7)) {
HXLINE( 761)									if ((_g14->_hx_getString(0) == HX_("=>",61,35,00,00))) {
HXLINE( 761)										 ::Dynamic eKey = _g14->_hx_getObject(1);
HXDLIN( 761)										 ::Dynamic eValue = _g14->_hx_getObject(2);
HXDLIN( 761)										{
HXLINE( 762)											 ::Dynamic key = this->expr(eKey);
HXLINE( 763)											 ::Dynamic value1 = this->expr(eValue);
HXLINE( 764)											if (isAllString) {
HXLINE( 764)												isAllString = ::Std_obj::isOfType(key,::hx::ClassOf< ::String >());
            											}
            											else {
HXLINE( 764)												isAllString = false;
            											}
HXLINE( 765)											if (isAllInt) {
HXLINE( 765)												isAllInt = ::Std_obj::isOfType(key,::hx::ClassOf< int >());
            											}
            											else {
HXLINE( 765)												isAllInt = false;
            											}
HXLINE( 766)											if (isAllObject) {
HXLINE( 766)												isAllObject = ::Reflect_obj::isObject(key);
            											}
            											else {
HXLINE( 766)												isAllObject = false;
            											}
HXLINE( 767)											if (isAllEnum) {
HXLINE( 767)												isAllEnum = ::Reflect_obj::isEnumValue(key);
            											}
            											else {
HXLINE( 767)												isAllEnum = false;
            											}
HXLINE( 768)											keys->push(key);
HXLINE( 769)											values->push(value1);
            										}
            									}
            									else {
HXLINE( 771)										HX_STACK_DO_THROW(HX_("=> expected",17,e5,65,e5));
            									}
            								}
            								else {
HXLINE( 771)									HX_STACK_DO_THROW(HX_("=> expected",17,e5,65,e5));
            								}
            							}
            						}
            					}
HXLINE( 774)					 ::Dynamic map;
HXLINE( 775)					if (isAllInt) {
HXLINE( 774)						map =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 776)						if (isAllString) {
HXLINE( 774)							map =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 777)							if (isAllEnum) {
HXLINE( 774)								map =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE( 778)								if (isAllObject) {
HXLINE( 774)									map =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE( 774)									map =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            								}
            							}
            						}
            					}
HXLINE( 781)					{
HXLINE( 781)						int _g15 = 0;
HXDLIN( 781)						int _g16 = keys->get_length();
HXDLIN( 781)						while((_g15 < _g16)){
HXLINE( 781)							_g15 = (_g15 + 1);
HXDLIN( 781)							int n2 = (_g15 - 1);
HXLINE( 782)							::haxe::IMap_obj::set( ::hx::interface_check(map,0x09c2bd39),keys->__get(n2),values->__get(n2));
            						}
            					}
HXLINE( 784)					return map;
            				}
            				else {
HXLINE( 787)					::cpp::VirtualArray a = ::cpp::VirtualArray_obj::__new();
HXLINE( 788)					{
HXLINE( 788)						int _g17 = 0;
HXDLIN( 788)						while((_g17 < arr1->length)){
HXLINE( 788)							 ::Dynamic e33 = arr1->__get(_g17);
HXDLIN( 788)							_g17 = (_g17 + 1);
HXLINE( 789)							a->push(this->expr(e33));
            						}
            					}
HXLINE( 791)					return a;
            				}
            			}
            			break;
            			case (int)22: {
HXLINE( 802)				::Array< ::String > _g18 = e1->_hx_getObject(2).StaticCast< ::Array< ::String > >();
HXDLIN( 802)				::String cl2 = e1->_hx_getString(0);
HXDLIN( 802)				::Array< ::Dynamic> params2 = e1->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 803)				::cpp::VirtualArray a1 = ::cpp::VirtualArray_obj::__new();
HXLINE( 804)				{
HXLINE( 804)					int _g19 = 0;
HXDLIN( 804)					while((_g19 < params2->length)){
HXLINE( 804)						 ::Dynamic e34 = params2->__get(_g19);
HXDLIN( 804)						_g19 = (_g19 + 1);
HXLINE( 805)						a1->push(this->expr(e34));
            					}
            				}
HXLINE( 806)				return this->cnew(cl2,a1);
            			}
            			break;
            			case (int)23: {
HXLINE( 807)				 ::Dynamic e35 = e1->_hx_getObject(0);
HXLINE( 808)				HX_STACK_DO_THROW(this->expr(e35));
            			}
            			break;
            			case (int)24: {
HXLINE( 809)				 ::hscriptBase::CType _g20 = e1->_hx_getObject(2).StaticCast<  ::hscriptBase::CType >();
HXDLIN( 809)				 ::Dynamic e36 = e1->_hx_getObject(0);
HXDLIN( 809)				::String n3 = e1->_hx_getString(1);
HXDLIN( 809)				 ::Dynamic ecatch = e1->_hx_getObject(3);
HXLINE( 810)				int old1 = this->declared->length;
HXLINE( 811)				bool oldTry = this->inTry;
HXLINE( 812)				try {
            					HX_STACK_CATCHABLE( ::hscriptBase::_Interp::Stop, 0);
            					HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
            					HX_STACK_CATCHABLE( ::Dynamic, 2);
HXLINE( 813)					this->inTry = true;
HXLINE( 814)					 ::Dynamic v4 = this->expr(e36);
HXLINE( 815)					this->restore(old1);
HXLINE( 816)					this->inTry = oldTry;
HXLINE( 817)					return v4;
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::hscriptBase::_Interp::Stop >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::hscriptBase::_Interp::Stop err1 = _hx_e;
HXLINE( 819)						this->inTry = oldTry;
HXLINE( 820)						HX_STACK_DO_THROW(err1);
            					}
            					else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::haxe::ValueException _g21 = _hx_e;
HXLINE( 818)						{
HXLINE( 818)							null();
            						}
HXLINE( 812)						if (::Std_obj::isOfType(_g21->value,::hx::ClassOf< ::hscriptBase::_Interp::Stop >())) {
HXLINE( 818)							 ::hscriptBase::_Interp::Stop err1 = _g21->value;
HXLINE( 819)							this->inTry = oldTry;
HXLINE( 820)							HX_STACK_DO_THROW(err1);
            						}
            						else {
HXLINE( 812)							HX_STACK_DO_THROW(_g21);
            						}
            					}
            					else if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g22 = _hx_e;
HXLINE( 821)						{
HXLINE( 821)							null();
            						}
HXDLIN( 821)						 ::Dynamic err2 = _g22;
HXLINE( 823)						this->restore(old1);
HXLINE( 824)						this->inTry = oldTry;
HXLINE( 826)						::Array< ::Dynamic> _hx_tmp15 = this->declared;
HXDLIN( 826)						_hx_tmp15->push( ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("n",6e,00,00,00),n3)
            							->setFixed(1,HX_("old",a7,98,54,00),this->locals->get(n3))));
HXLINE( 827)						this->locals->set(n3, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("r",72,00,00,00),err2)));
HXLINE( 828)						 ::Dynamic v5 = this->expr(ecatch);
HXLINE( 829)						this->restore(old1);
HXLINE( 830)						return v5;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            			break;
            			case (int)25: {
HXLINE( 832)				::Array< ::Dynamic> fl = e1->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 833)				 ::Dynamic o1 =  ::Dynamic(::hx::Anon_obj::Create(0));
HXLINE( 834)				{
HXLINE( 834)					int _g23 = 0;
HXDLIN( 834)					while((_g23 < fl->length)){
HXLINE( 834)						 ::Dynamic f6 = fl->__get(_g23);
HXDLIN( 834)						_g23 = (_g23 + 1);
HXLINE( 835)						::String f7 = ( (::String)(f6->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
HXDLIN( 835)						this->set(o1,f7,this->expr(f6->__Field(HX_("e",65,00,00,00),::hx::paccDynamic)));
            					}
            				}
HXLINE( 836)				return o1;
            			}
            			break;
            			case (int)26: {
HXLINE( 845)				 ::Dynamic econd2 = e1->_hx_getObject(0);
HXDLIN( 845)				 ::Dynamic e113 = e1->_hx_getObject(1);
HXDLIN( 845)				 ::Dynamic e210 = e1->_hx_getObject(2);
HXLINE( 846)				if (::hx::IsEq( this->expr(econd2),true )) {
HXLINE( 846)					return this->expr(e113);
            				}
            				else {
HXLINE( 846)					return this->expr(e210);
            				}
            			}
            			break;
            			case (int)27: {
HXLINE( 847)				 ::Dynamic e37 = e1->_hx_getObject(0);
HXDLIN( 847)				::Array< ::Dynamic> cases = e1->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 847)				 ::Dynamic def = e1->_hx_getObject(2);
HXLINE( 848)				 ::Dynamic val = this->expr(e37);
HXLINE( 849)				bool match = false;
HXLINE( 850)				{
HXLINE( 850)					int _g24 = 0;
HXDLIN( 850)					while((_g24 < cases->length)){
HXLINE( 850)						 ::Dynamic c1 = cases->__get(_g24);
HXDLIN( 850)						_g24 = (_g24 + 1);
HXLINE( 851)						{
HXLINE( 851)							int _g25 = 0;
HXDLIN( 851)							::Array< ::Dynamic> _g26 = ( (::Array< ::Dynamic>)(c1->__Field(HX_("values",e2,03,b7,4f),::hx::paccDynamic)) );
HXDLIN( 851)							while((_g25 < _g26->length)){
HXLINE( 851)								 ::Dynamic v6 = _g26->__get(_g25);
HXDLIN( 851)								_g25 = (_g25 + 1);
HXLINE( 853)								bool _hx_tmp16;
HXDLIN( 853)								bool _hx_tmp17;
HXDLIN( 853)								 ::hscriptBase::ExprDef a2;
HXDLIN( 853)								if (::hx::IsNull( v6 )) {
HXLINE( 853)									a2 = null();
            								}
            								else {
HXLINE( 853)									a2 = v6->__Field(HX_("e",65,00,00,00),::hx::paccDynamic);
            								}
HXDLIN( 853)								if (!(__hxcpp_enum_eq(a2,::hscriptBase::ExprDef_obj::EIdent(HX_("_",5f,00,00,00),false)))) {
HXLINE( 853)									_hx_tmp17 = ::hx::IsEq( this->expr(v6),val );
            								}
            								else {
HXLINE( 853)									_hx_tmp17 = false;
            								}
HXDLIN( 853)								if (_hx_tmp17) {
HXLINE( 853)									if (::hx::IsNotNull( c1->__Field(HX_("ifExpr",b2,37,4f,e4),::hx::paccDynamic) )) {
HXLINE( 853)										_hx_tmp16 = ::hx::IsEq( this->expr(c1->__Field(HX_("ifExpr",b2,37,4f,e4),::hx::paccDynamic)),true );
            									}
            									else {
HXLINE( 853)										_hx_tmp16 = true;
            									}
            								}
            								else {
HXLINE( 853)									_hx_tmp16 = false;
            								}
HXDLIN( 853)								if (_hx_tmp16) {
HXLINE( 854)									match = true;
HXLINE( 855)									goto _hx_goto_70;
            								}
            							}
            							_hx_goto_70:;
            						}
HXLINE( 858)						if (match) {
HXLINE( 859)							val = this->expr(c1->__Field(HX_("expr",35,fd,1d,43),::hx::paccDynamic));
HXLINE( 860)							goto _hx_goto_69;
            						}
            					}
            					_hx_goto_69:;
            				}
HXLINE( 863)				if (!(match)) {
HXLINE( 864)					if (::hx::IsNull( def )) {
HXLINE( 864)						val = null();
            					}
            					else {
HXLINE( 864)						val = this->expr(def);
            					}
            				}
HXLINE( 865)				return val;
            			}
            			break;
            			case (int)28: {
HXLINE( 590)				 ::Dynamic econd3 = e1->_hx_getObject(0);
HXDLIN( 590)				 ::Dynamic e38 = e1->_hx_getObject(1);
HXLINE( 591)				this->doWhileLoop(econd3,e38);
HXLINE( 592)				return null();
            			}
            			break;
            			case (int)29: {
HXLINE( 655)				 ::Dynamic e39 = e1->_hx_getObject(0);
HXDLIN( 655)				::String c2 = e1->_hx_getString(1);
HXLINE( 656)				bool stringTools;
HXDLIN( 656)				if ((c2 == HX_("StringTools",6a,db,63,03))) {
HXLINE( 656)					stringTools = ::hx::IsPointerEq( e39,::hx::ClassOf< ::StringTools >() );
            				}
            				else {
HXLINE( 656)					stringTools = false;
            				}
HXLINE( 658)				bool _hx_tmp18;
HXDLIN( 658)				bool _hx_tmp19;
HXDLIN( 658)				if (::hx::IsNotNull( c2 )) {
HXLINE( 658)					_hx_tmp19 = ::hx::IsNotNull( e39 );
            				}
            				else {
HXLINE( 658)					_hx_tmp19 = false;
            				}
HXDLIN( 658)				if (_hx_tmp19) {
HXLINE( 658)					_hx_tmp18 = !(stringTools);
            				}
            				else {
HXLINE( 658)					_hx_tmp18 = false;
            				}
HXDLIN( 658)				if (_hx_tmp18) {
HXLINE( 659)					this->variables->set(c2,e39);
            				}
HXLINE( 660)				if (stringTools) {
HXLINE( 661)					this->usingStringTools = true;
            				}
HXLINE( 663)				return null();
            			}
            			break;
            			case (int)30: {
HXLINE( 650)				::String _g27 = e1->_hx_getString(2);
HXDLIN( 650)				 ::Dynamic e40 = e1->_hx_getObject(0);
HXDLIN( 650)				::String c3 = e1->_hx_getString(1);
HXLINE( 651)				bool _hx_tmp20;
HXDLIN( 651)				if (::hx::IsNotNull( c3 )) {
HXLINE( 651)					_hx_tmp20 = ::hx::IsNotNull( e40 );
            				}
            				else {
HXLINE( 651)					_hx_tmp20 = false;
            				}
HXDLIN( 651)				if (_hx_tmp20) {
HXLINE( 652)					this->variables->set(c3,e40);
            				}
HXLINE( 654)				return null();
            			}
            			break;
            			case (int)31: {
HXLINE( 603)				::String pkg = e1->_hx_getString(0);
HXLINE( 604)				pkg = ::StringTools_obj::trim(pkg);
HXLINE( 605)				::hx::Class c4 = ::Type_obj::resolveClass(pkg);
HXLINE( 606)				if (::hx::IsNotNull( c4 )) {
HXLINE( 608)					::Array< ::String > fields = ::Reflect_obj::fields(c4);
HXLINE( 609)					{
HXLINE( 609)						int _g28 = 0;
HXDLIN( 609)						while((_g28 < fields->length)){
HXLINE( 609)							::String field = fields->__get(_g28);
HXDLIN( 609)							_g28 = (_g28 + 1);
HXLINE( 611)							 ::Dynamic f8 = ::Reflect_obj::getProperty(c4,field);
HXLINE( 612)							if (::hx::IsNotNull( f8 )) {
HXLINE( 613)								this->variables->set(field,f8);
            							}
            						}
            					}
            				}
            				else {
HXLINE( 619)					 ::haxe::ds::StringMap map1 = ::macro::Macro_obj::allClassesAvailable;
HXLINE( 620)					 ::haxe::ds::StringMap cl3 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 621)					{
HXLINE( 621)						::Dynamic map2 = map1;
HXDLIN( 621)						::Dynamic _g_map = map2;
HXDLIN( 621)						 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map2);
HXDLIN( 621)						while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 621)							::String key1 = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 621)							::hx::Class _g_value = ::haxe::IMap_obj::get(_g_map,key1);
HXDLIN( 621)							::String _g_key = key1;
HXDLIN( 621)							::String i1 = _g_key;
HXDLIN( 621)							::hx::Class k = _g_value;
HXLINE( 622)							{
HXLINE( 623)								::Array< ::String > length = pkg.split(HX_(".",2e,00,00,00));
HXLINE( 624)								::Array< ::String > length2 = i1.split(HX_(".",2e,00,00,00));
HXLINE( 626)								if ((length->length == length2->length)) {
HXLINE( 627)									continue;
            								}
HXLINE( 628)								if (((length->length + 1) != length2->length)) {
HXLINE( 629)									continue;
            								}
HXLINE( 631)								bool hasSamePkg = true;
HXLINE( 632)								{
HXLINE( 632)									int _g29 = 0;
HXDLIN( 632)									int _g30 = length->length;
HXDLIN( 632)									while((_g29 < _g30)){
HXLINE( 632)										_g29 = (_g29 + 1);
HXDLIN( 632)										int i2 = (_g29 - 1);
HXLINE( 634)										if ((length->__get(i2) != length2->__get(i2))) {
HXLINE( 636)											hasSamePkg = false;
HXLINE( 637)											goto _hx_goto_73;
            										}
            									}
            									_hx_goto_73:;
            								}
HXLINE( 640)								if (hasSamePkg) {
HXLINE( 641)									cl3->set(length2->__get((length2->length - 1)),k);
            								}
            							}
            						}
            					}
HXLINE( 644)					{
HXLINE( 644)						::Dynamic map3 = cl3;
HXDLIN( 644)						::Dynamic _g_map1 = map3;
HXDLIN( 644)						 ::Dynamic _g_keys1 = ::haxe::IMap_obj::keys(map3);
HXDLIN( 644)						while(( (bool)(_g_keys1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 644)							::String key2 = ( (::String)(_g_keys1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 644)							::hx::Class _g_value1 = ::haxe::IMap_obj::get(_g_map1,key2);
HXDLIN( 644)							::String _g_key1 = key2;
HXDLIN( 644)							::String i3 = _g_key1;
HXDLIN( 644)							::hx::Class k1 = _g_value1;
HXLINE( 645)							this->variables->set(i3,( ( ::Dynamic)(k1) ));
            						}
            					}
            				}
HXLINE( 649)				return null();
            			}
            			break;
            			case (int)32: {
HXLINE( 664)				::String p3 = e1->_hx_getString(0);
HXLINE( 665)				if (::hx::IsNull( p3 )) {
HXLINE( 666)					if (!(this->resumeError)) {
HXLINE( 666)						 ::hscriptBase::Error e41 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::EUnexpected(p3),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 666)						HX_STACK_DO_THROW(e41);
            					}
            				}
HXLINE( 668)				if ((p3 != p3.toLowerCase())) {
HXLINE( 669)					if (!(this->resumeError)) {
HXLINE( 669)						 ::hscriptBase::Error e42 =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::ECustom(HX_("Package path cannot have capital letters",d9,fa,d2,2f)),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 669)						HX_STACK_DO_THROW(e42);
            					}
            				}
HXLINE( 670)				this->script->setPackagePath(p3);
HXLINE( 671)				return null();
            			}
            			break;
            			case (int)33: {
HXLINE( 866)				::Array< ::Dynamic> _g31 = e1->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 866)				::String n4 = e1->_hx_getString(0);
HXDLIN( 866)				 ::Dynamic e43 = e1->_hx_getObject(2);
HXLINE( 867)				 ::Dynamic e44 = this->expr(e43);
HXLINE( 868)				return e44;
            			}
            			break;
            			case (int)34: {
HXLINE( 869)				 ::hscriptBase::CType _g32 = e1->_hx_getObject(1).StaticCast<  ::hscriptBase::CType >();
HXDLIN( 869)				 ::Dynamic e45 = e1->_hx_getObject(0);
HXLINE( 870)				return this->expr(e45);
            			}
            			break;
            		}
HXLINE( 872)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,expr,return )

void Interp_obj::doWhileLoop( ::Dynamic econd, ::Dynamic e){
            	HX_STACKFRAME(&_hx_pos_23fee00e02910bec_875_doWhileLoop)
HXLINE( 876)		int old = this->declared->length;
HXLINE( 877)		do {
HXLINE( 878)			try {
            				HX_STACK_CATCHABLE( ::hscriptBase::_Interp::Stop, 0);
            				HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE( 879)				this->expr(e);
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::hscriptBase::_Interp::Stop >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::hscriptBase::_Interp::Stop err1 = _hx_e;
HXLINE( 881)					switch((int)(err1->_hx_getIndex())){
            						case (int)0: {
HXLINE( 883)							goto _hx_goto_78;
            						}
            						break;
            						case (int)1: {
            						}
            						break;
            						case (int)2: {
HXLINE( 884)							HX_STACK_DO_THROW(err1);
            						}
            						break;
            					}
            				}
            				else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::ValueException _g = _hx_e;
HXLINE( 880)					{
HXLINE( 880)						null();
            					}
HXLINE( 878)					if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::hscriptBase::_Interp::Stop >())) {
HXLINE( 880)						 ::hscriptBase::_Interp::Stop err1 = _g->value;
HXLINE( 881)						switch((int)(err1->_hx_getIndex())){
            							case (int)0: {
HXLINE( 883)								goto _hx_goto_78;
            							}
            							break;
            							case (int)1: {
            							}
            							break;
            							case (int)2: {
HXLINE( 884)								HX_STACK_DO_THROW(err1);
            							}
            							break;
            						}
            					}
            					else {
HXLINE( 878)						HX_STACK_DO_THROW(_g);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		} while(::hx::IsEq( this->expr(econd),true ));
            		_hx_goto_78:;
HXLINE( 889)		this->restore(old);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,doWhileLoop,(void))

void Interp_obj::whileLoop( ::Dynamic econd, ::Dynamic e){
            	HX_STACKFRAME(&_hx_pos_23fee00e02910bec_892_whileLoop)
HXLINE( 893)		int old = this->declared->length;
HXLINE( 894)		while(::hx::IsEq( this->expr(econd),true )){
HXLINE( 895)			try {
            				HX_STACK_CATCHABLE( ::hscriptBase::_Interp::Stop, 0);
            				HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE( 896)				this->expr(e);
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::hscriptBase::_Interp::Stop >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::hscriptBase::_Interp::Stop err1 = _hx_e;
HXLINE( 898)					switch((int)(err1->_hx_getIndex())){
            						case (int)0: {
HXLINE( 900)							goto _hx_goto_80;
            						}
            						break;
            						case (int)1: {
            						}
            						break;
            						case (int)2: {
HXLINE( 901)							HX_STACK_DO_THROW(err1);
            						}
            						break;
            					}
            				}
            				else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::ValueException _g = _hx_e;
HXLINE( 897)					{
HXLINE( 897)						null();
            					}
HXLINE( 895)					if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::hscriptBase::_Interp::Stop >())) {
HXLINE( 897)						 ::hscriptBase::_Interp::Stop err1 = _g->value;
HXLINE( 898)						switch((int)(err1->_hx_getIndex())){
            							case (int)0: {
HXLINE( 900)								goto _hx_goto_80;
            							}
            							break;
            							case (int)1: {
            							}
            							break;
            							case (int)2: {
HXLINE( 901)								HX_STACK_DO_THROW(err1);
            							}
            							break;
            						}
            					}
            					else {
HXLINE( 895)						HX_STACK_DO_THROW(_g);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		_hx_goto_80:;
HXLINE( 905)		this->restore(old);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,whileLoop,(void))

 ::Dynamic Interp_obj::makeIterator( ::Dynamic v){
            	HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_908_makeIterator)
HXLINE( 912)		if (::hx::IsNotNull( v->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic) )) {
HXLINE( 912)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 912)				v = v->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE( 912)					{
HXLINE( 912)						null();
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE( 914)		bool _hx_tmp;
HXDLIN( 914)		if (::hx::IsNotNull( v->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic) )) {
HXLINE( 914)			_hx_tmp = ::hx::IsNull( v->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic) );
            		}
            		else {
HXLINE( 914)			_hx_tmp = true;
            		}
HXDLIN( 914)		if (_hx_tmp) {
HXLINE( 914)			if (!(this->resumeError)) {
HXLINE( 914)				 ::hscriptBase::Error e =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::EInvalidIterator(v),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 914)				HX_STACK_DO_THROW(e);
            			}
            		}
HXLINE( 915)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,makeIterator,return )

void Interp_obj::forLoop(::String n, ::Dynamic it, ::Dynamic e){
            	HX_STACKFRAME(&_hx_pos_23fee00e02910bec_918_forLoop)
HXLINE( 919)		int old = this->declared->length;
HXLINE( 920)		::Array< ::Dynamic> _hx_tmp = this->declared;
HXDLIN( 920)		_hx_tmp->push( ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("n",6e,00,00,00),n)
            			->setFixed(1,HX_("old",a7,98,54,00),this->locals->get(n))));
HXLINE( 921)		 ::Dynamic it1 = this->makeIterator(this->expr(it));
HXLINE( 922)		while(( (bool)(it1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 923)			{
HXLINE( 923)				::Dynamic this1 = this->locals;
HXDLIN( 923)				( ( ::haxe::ds::StringMap)(this1) )->set(n, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("r",72,00,00,00),it1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)())));
            			}
HXLINE( 924)			try {
            				HX_STACK_CATCHABLE( ::hscriptBase::_Interp::Stop, 0);
            				HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE( 925)				this->expr(e);
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::hscriptBase::_Interp::Stop >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::hscriptBase::_Interp::Stop err1 = _hx_e;
HXLINE( 927)					switch((int)(err1->_hx_getIndex())){
            						case (int)0: {
HXLINE( 929)							goto _hx_goto_83;
            						}
            						break;
            						case (int)1: {
            						}
            						break;
            						case (int)2: {
HXLINE( 930)							HX_STACK_DO_THROW(err1);
            						}
            						break;
            					}
            				}
            				else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::ValueException _g = _hx_e;
HXLINE( 926)					{
HXLINE( 926)						null();
            					}
HXLINE( 924)					if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::hscriptBase::_Interp::Stop >())) {
HXLINE( 926)						 ::hscriptBase::_Interp::Stop err1 = _g->value;
HXLINE( 927)						switch((int)(err1->_hx_getIndex())){
            							case (int)0: {
HXLINE( 929)								goto _hx_goto_83;
            							}
            							break;
            							case (int)1: {
            							}
            							break;
            							case (int)2: {
HXLINE( 930)								HX_STACK_DO_THROW(err1);
            							}
            							break;
            						}
            					}
            					else {
HXLINE( 924)						HX_STACK_DO_THROW(_g);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		_hx_goto_83:;
HXLINE( 934)		this->restore(old);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,forLoop,(void))

 ::Dynamic Interp_obj::getMapValue( ::Dynamic map, ::Dynamic key){
            	HX_STACKFRAME(&_hx_pos_23fee00e02910bec_946_getMapValue)
HXDLIN( 946)		return ::haxe::IMap_obj::get( ::hx::interface_check(map,0x09c2bd39),key);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,getMapValue,return )

void Interp_obj::setMapValue( ::Dynamic map, ::Dynamic key, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_23fee00e02910bec_950_setMapValue)
HXDLIN( 950)		::haxe::IMap_obj::set( ::hx::interface_check(map,0x09c2bd39),key,value);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,setMapValue,(void))

 ::Dynamic Interp_obj::get( ::Dynamic o,::String f){
            	HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_953_get)
HXLINE( 954)		if (::hx::IsNull( o )) {
HXLINE( 954)			if (!(this->resumeError)) {
HXLINE( 954)				 ::hscriptBase::Error e =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::EInvalidAccess(f),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 954)				HX_STACK_DO_THROW(e);
            			}
            		}
HXLINE( 956)		 ::Dynamic func = ::hscriptBase::StringFunctionTools_obj::getStringToolsFunction(f);
HXLINE( 957)		bool _hx_tmp;
HXDLIN( 957)		bool _hx_tmp1;
HXDLIN( 957)		if (::Std_obj::isOfType(o,::hx::ClassOf< ::String >())) {
HXLINE( 957)			_hx_tmp1 = this->usingStringTools;
            		}
            		else {
HXLINE( 957)			_hx_tmp1 = false;
            		}
HXDLIN( 957)		if (_hx_tmp1) {
HXLINE( 957)			_hx_tmp = ::hx::IsNotNull( func );
            		}
            		else {
HXLINE( 957)			_hx_tmp = false;
            		}
HXDLIN( 957)		if (_hx_tmp) {
HXLINE( 958)			return func;
            		}
HXLINE( 967)		return ::Reflect_obj::getProperty(o,f);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,get,return )

 ::Dynamic Interp_obj::set( ::Dynamic o,::String f, ::Dynamic v){
            	HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_972_set)
HXLINE( 973)		if (::hx::IsNull( o )) {
HXLINE( 973)			if (!(this->resumeError)) {
HXLINE( 973)				 ::hscriptBase::Error e =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::EInvalidAccess(f),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 973)				HX_STACK_DO_THROW(e);
            			}
            		}
HXLINE( 975)		::Reflect_obj::setProperty(o,f,v);
HXLINE( 976)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,set,return )

 ::Dynamic Interp_obj::fcall( ::Dynamic o,::String f,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_23fee00e02910bec_979_fcall)
HXLINE( 980)		 ::Dynamic func = this->stringToolsFunction(o,f,args);
HXLINE( 981)		if (::hx::IsNotNull( func )) {
HXLINE( 982)			return func;
            		}
HXLINE( 984)		return this->call(o,this->get(o,f),args);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,fcall,return )

 ::Dynamic Interp_obj::call( ::Dynamic o, ::Dynamic f,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_23fee00e02910bec_988_call)
HXDLIN( 988)		return ::Reflect_obj::callMethod(o,f,args);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,call,return )

 ::Dynamic Interp_obj::cnew(::String cl,::cpp::VirtualArray args){
            	HX_GC_STACKFRAME(&_hx_pos_23fee00e02910bec_991_cnew)
HXLINE( 992)		 ::Dynamic c;
HXDLIN( 992)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 992)			c = this->resolve(cl);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 992)				c = null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 993)		if (::hx::IsNull( c )) {
HXLINE( 993)			c = ::Type_obj::resolveClass(cl);
            		}
HXLINE( 994)		if (::hx::IsNull( c )) {
HXLINE( 994)			if (!(this->resumeError)) {
HXLINE( 994)				 ::hscriptBase::Error e =  ::hscriptBase::Error_obj::__alloc( HX_CTX ,::hscriptBase::ErrorDef_obj::EInvalidAccess(cl),( (int)(this->curExpr->__Field(HX_("pmin",22,f7,5a,4a),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("pmax",34,f0,5a,4a),::hx::paccDynamic)) ),( (::String)(this->curExpr->__Field(HX_("origin",e6,19,01,4b),::hx::paccDynamic)) ),( (int)(this->curExpr->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) ));
HXDLIN( 994)				HX_STACK_DO_THROW(e);
            			}
            		}
HXLINE( 996)		return ::Type_obj::createInstance(c,args);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,cnew,return )

 ::Dynamic Interp_obj::stringToolsFunction( ::Dynamic o,::String f,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_23fee00e02910bec_999_stringToolsFunction)
HXLINE(1000)		 ::Dynamic func = ::hscriptBase::StringFunctionTools_obj::getStringToolsFunction(f);
HXLINE(1001)		bool _hx_tmp;
HXDLIN(1001)		bool _hx_tmp1;
HXDLIN(1001)		if (::Std_obj::isOfType(o,::hx::ClassOf< ::String >())) {
HXLINE(1001)			_hx_tmp1 = this->usingStringTools;
            		}
            		else {
HXLINE(1001)			_hx_tmp1 = false;
            		}
HXDLIN(1001)		if (_hx_tmp1) {
HXLINE(1001)			_hx_tmp = ::hx::IsNotNull( func );
            		}
            		else {
HXLINE(1001)			_hx_tmp = false;
            		}
HXDLIN(1001)		if (_hx_tmp) {
HXLINE(1003)			bool _hx_tmp2;
HXDLIN(1003)			if (::hx::IsNotNull( args )) {
HXLINE(1003)				_hx_tmp2 = (args->get_length() == 0);
            			}
            			else {
HXLINE(1003)				_hx_tmp2 = true;
            			}
HXDLIN(1003)			if (_hx_tmp2) {
HXLINE(1004)				return ::Reflect_obj::callMethod(::hx::ClassOf< ::StringTools >(),func,::cpp::VirtualArray_obj::__new(1)->init(0,o));
            			}
            			else {
HXLINE(1005)				if ((args->get_length() == 1)) {
HXLINE(1006)					return ::Reflect_obj::callMethod(::hx::ClassOf< ::StringTools >(),func,::cpp::VirtualArray_obj::__new(2)->init(0,o)->init(1,args->__get(0)));
            				}
            				else {
HXLINE(1009)					::cpp::VirtualArray array = ::cpp::VirtualArray_obj::__new(1)->init(0,o);
HXLINE(1010)					{
HXLINE(1010)						int _g = 0;
HXDLIN(1010)						int _g1 = args->get_length();
HXDLIN(1010)						while((_g < _g1)){
HXLINE(1010)							_g = (_g + 1);
HXDLIN(1010)							int i = (_g - 1);
HXLINE(1011)							array->push(::Std_obj::string(args->__get(i)));
            						}
            					}
HXLINE(1013)					return ::Reflect_obj::callMethod(::hx::ClassOf< ::StringTools >(),func,array);
            				}
            			}
            		}
HXLINE(1017)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,stringToolsFunction,return )

bool Interp_obj::isMap( ::Dynamic o){
            	HX_STACKFRAME(&_hx_pos_23fee00e02910bec_937_isMap)
HXLINE( 938)		::cpp::VirtualArray classes = ::cpp::VirtualArray_obj::__new(7)->init(0,HX_("Map",7c,c2,3a,00))->init(1,HX_("StringMap",2b,12,8c,69))->init(2,HX_("IntMap",0d,a9,08,d3))->init(3,HX_("ObjectMap",fd,a4,50,e5))->init(4,HX_("HashMap",4e,0f,b5,f6))->init(5,HX_("EnumValueMap",ec,9b,fb,92))->init(6,HX_("WeakMap",e4,a8,a9,a4));
HXLINE( 939)		if (classes->contains(o)) {
HXLINE( 940)			return true;
            		}
HXLINE( 942)		return ::Std_obj::isOfType(o,::hx::ClassOf< ::haxe::IMap >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,isMap,return )


::hx::ObjectPtr< Interp_obj > Interp_obj::__new() {
	::hx::ObjectPtr< Interp_obj > __this = new Interp_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Interp_obj > Interp_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Interp_obj *__this = (Interp_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Interp_obj), true, "hscriptBase.Interp"));
	*(void **)__this = Interp_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Interp_obj::Interp_obj()
{
}

void Interp_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Interp);
	HX_MARK_MEMBER_NAME(variables,"variables");
	HX_MARK_MEMBER_NAME(dynamicFuncs,"dynamicFuncs");
	HX_MARK_MEMBER_NAME(locals,"locals");
	HX_MARK_MEMBER_NAME(binops,"binops");
	HX_MARK_MEMBER_NAME(depth,"depth");
	HX_MARK_MEMBER_NAME(inTry,"inTry");
	HX_MARK_MEMBER_NAME(declared,"declared");
	HX_MARK_MEMBER_NAME(returnValue,"returnValue");
	HX_MARK_MEMBER_NAME(typecheck,"typecheck");
	HX_MARK_MEMBER_NAME(usingStringTools,"usingStringTools");
	HX_MARK_MEMBER_NAME(script,"script");
	HX_MARK_MEMBER_NAME(curExpr,"curExpr");
	HX_MARK_MEMBER_NAME(specialObject,"specialObject");
	HX_MARK_MEMBER_NAME(resumeError,"resumeError");
	HX_MARK_MEMBER_NAME(inFunc,"inFunc");
	HX_MARK_END_CLASS();
}

void Interp_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(variables,"variables");
	HX_VISIT_MEMBER_NAME(dynamicFuncs,"dynamicFuncs");
	HX_VISIT_MEMBER_NAME(locals,"locals");
	HX_VISIT_MEMBER_NAME(binops,"binops");
	HX_VISIT_MEMBER_NAME(depth,"depth");
	HX_VISIT_MEMBER_NAME(inTry,"inTry");
	HX_VISIT_MEMBER_NAME(declared,"declared");
	HX_VISIT_MEMBER_NAME(returnValue,"returnValue");
	HX_VISIT_MEMBER_NAME(typecheck,"typecheck");
	HX_VISIT_MEMBER_NAME(usingStringTools,"usingStringTools");
	HX_VISIT_MEMBER_NAME(script,"script");
	HX_VISIT_MEMBER_NAME(curExpr,"curExpr");
	HX_VISIT_MEMBER_NAME(specialObject,"specialObject");
	HX_VISIT_MEMBER_NAME(resumeError,"resumeError");
	HX_VISIT_MEMBER_NAME(inFunc,"inFunc");
}

::hx::Val Interp_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"expr") ) { return ::hx::Val( expr_dyn() ); }
		if (HX_FIELD_EQ(inName,"call") ) { return ::hx::Val( call_dyn() ); }
		if (HX_FIELD_EQ(inName,"cnew") ) { return ::hx::Val( cnew_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"depth") ) { return ::hx::Val( depth ); }
		if (HX_FIELD_EQ(inName,"inTry") ) { return ::hx::Val( inTry ); }
		if (HX_FIELD_EQ(inName,"error") ) { return ::hx::Val( error_dyn() ); }
		if (HX_FIELD_EQ(inName,"fcall") ) { return ::hx::Val( fcall_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"locals") ) { return ::hx::Val( locals ); }
		if (HX_FIELD_EQ(inName,"binops") ) { return ::hx::Val( binops ); }
		if (HX_FIELD_EQ(inName,"script") ) { return ::hx::Val( script ); }
		if (HX_FIELD_EQ(inName,"setScr") ) { return ::hx::Val( setScr_dyn() ); }
		if (HX_FIELD_EQ(inName,"inFunc") ) { return ::hx::Val( inFunc ); }
		if (HX_FIELD_EQ(inName,"setVar") ) { return ::hx::Val( setVar_dyn() ); }
		if (HX_FIELD_EQ(inName,"assign") ) { return ::hx::Val( assign_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curExpr") ) { return ::hx::Val( curExpr ); }
		if (HX_FIELD_EQ(inName,"initOps") ) { return ::hx::Val( initOps_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkIs") ) { return ::hx::Val( checkIs_dyn() ); }
		if (HX_FIELD_EQ(inName,"execute") ) { return ::hx::Val( execute_dyn() ); }
		if (HX_FIELD_EQ(inName,"restore") ) { return ::hx::Val( restore_dyn() ); }
		if (HX_FIELD_EQ(inName,"rethrow") ) { return ::hx::Val( rethrow_dyn() ); }
		if (HX_FIELD_EQ(inName,"resolve") ) { return ::hx::Val( resolve_dyn() ); }
		if (HX_FIELD_EQ(inName,"forLoop") ) { return ::hx::Val( forLoop_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"declared") ) { return ::hx::Val( declared ); }
		if (HX_FIELD_EQ(inName,"posInfos") ) { return ::hx::Val( posInfos_dyn() ); }
		if (HX_FIELD_EQ(inName,"coalesce") ) { return ::hx::Val( coalesce_dyn() ); }
		if (HX_FIELD_EQ(inName,"assignOp") ) { return ::hx::Val( assignOp_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"variables") ) { return ::hx::Val( variables ); }
		if (HX_FIELD_EQ(inName,"typecheck") ) { return ::hx::Val( typecheck ); }
		if (HX_FIELD_EQ(inName,"coalesce2") ) { return ::hx::Val( coalesce2_dyn() ); }
		if (HX_FIELD_EQ(inName,"increment") ) { return ::hx::Val( increment_dyn() ); }
		if (HX_FIELD_EQ(inName,"duplicate") ) { return ::hx::Val( duplicate_dyn() ); }
		if (HX_FIELD_EQ(inName,"whileLoop") ) { return ::hx::Val( whileLoop_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"exprReturn") ) { return ::hx::Val( exprReturn_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"returnValue") ) { return ::hx::Val( returnValue ); }
		if (HX_FIELD_EQ(inName,"resumeError") ) { return ::hx::Val( resumeError ); }
		if (HX_FIELD_EQ(inName,"doWhileLoop") ) { return ::hx::Val( doWhileLoop_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMapValue") ) { return ::hx::Val( getMapValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMapValue") ) { return ::hx::Val( setMapValue_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"dynamicFuncs") ) { return ::hx::Val( dynamicFuncs ); }
		if (HX_FIELD_EQ(inName,"evalAssignOp") ) { return ::hx::Val( evalAssignOp_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeIterator") ) { return ::hx::Val( makeIterator_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"specialObject") ) { return ::hx::Val( specialObject ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"resetVariables") ) { return ::hx::Val( resetVariables_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"usingStringTools") ) { return ::hx::Val( usingStringTools ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"stringToolsFunction") ) { return ::hx::Val( stringToolsFunction_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Interp_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"isMap") ) { outValue = isMap_dyn(); return true; }
	}
	return false;
}

::hx::Val Interp_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"depth") ) { depth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inTry") ) { inTry=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"locals") ) { locals=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"binops") ) { binops=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"script") ) { script=inValue.Cast<  ::tea::SScript >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inFunc") ) { inFunc=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curExpr") ) { curExpr=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"declared") ) { declared=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"variables") ) { variables=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"typecheck") ) { typecheck=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"returnValue") ) { returnValue=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"resumeError") ) { resumeError=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"dynamicFuncs") ) { dynamicFuncs=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"specialObject") ) { specialObject=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"usingStringTools") ) { usingStringTools=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Interp_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("variables",b7,e2,62,82));
	outFields->push(HX_("dynamicFuncs",b0,34,33,bf));
	outFields->push(HX_("locals",a8,74,bf,59));
	outFields->push(HX_("binops",cb,59,16,ed));
	outFields->push(HX_("depth",03,f1,29,d7));
	outFields->push(HX_("inTry",56,82,08,be));
	outFields->push(HX_("declared",fa,58,bc,c4));
	outFields->push(HX_("returnValue",a1,4c,95,3e));
	outFields->push(HX_("typecheck",ce,83,61,77));
	outFields->push(HX_("usingStringTools",a6,a4,41,3f));
	outFields->push(HX_("script",0b,4e,60,47));
	outFields->push(HX_("curExpr",d5,6e,33,ae));
	outFields->push(HX_("specialObject",d8,5d,c8,53));
	outFields->push(HX_("resumeError",db,9e,f3,43));
	outFields->push(HX_("inFunc",c9,c9,2a,80));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Interp_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Interp_obj,variables),HX_("variables",b7,e2,62,82)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Interp_obj,dynamicFuncs),HX_("dynamicFuncs",b0,34,33,bf)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Interp_obj,locals),HX_("locals",a8,74,bf,59)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Interp_obj,binops),HX_("binops",cb,59,16,ed)},
	{::hx::fsInt,(int)offsetof(Interp_obj,depth),HX_("depth",03,f1,29,d7)},
	{::hx::fsBool,(int)offsetof(Interp_obj,inTry),HX_("inTry",56,82,08,be)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Interp_obj,declared),HX_("declared",fa,58,bc,c4)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Interp_obj,returnValue),HX_("returnValue",a1,4c,95,3e)},
	{::hx::fsBool,(int)offsetof(Interp_obj,typecheck),HX_("typecheck",ce,83,61,77)},
	{::hx::fsBool,(int)offsetof(Interp_obj,usingStringTools),HX_("usingStringTools",a6,a4,41,3f)},
	{::hx::fsObject /*  ::tea::SScript */ ,(int)offsetof(Interp_obj,script),HX_("script",0b,4e,60,47)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Interp_obj,curExpr),HX_("curExpr",d5,6e,33,ae)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Interp_obj,specialObject),HX_("specialObject",d8,5d,c8,53)},
	{::hx::fsBool,(int)offsetof(Interp_obj,resumeError),HX_("resumeError",db,9e,f3,43)},
	{::hx::fsBool,(int)offsetof(Interp_obj,inFunc),HX_("inFunc",c9,c9,2a,80)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Interp_obj_sStaticStorageInfo = 0;
#endif

static ::String Interp_obj_sMemberFields[] = {
	HX_("variables",b7,e2,62,82),
	HX_("dynamicFuncs",b0,34,33,bf),
	HX_("locals",a8,74,bf,59),
	HX_("binops",cb,59,16,ed),
	HX_("depth",03,f1,29,d7),
	HX_("inTry",56,82,08,be),
	HX_("declared",fa,58,bc,c4),
	HX_("returnValue",a1,4c,95,3e),
	HX_("typecheck",ce,83,61,77),
	HX_("usingStringTools",a6,a4,41,3f),
	HX_("script",0b,4e,60,47),
	HX_("curExpr",d5,6e,33,ae),
	HX_("specialObject",d8,5d,c8,53),
	HX_("setScr",60,27,6f,6f),
	HX_("resumeError",db,9e,f3,43),
	HX_("resetVariables",e8,46,d3,dc),
	HX_("posInfos",11,82,2e,5a),
	HX_("inFunc",c9,c9,2a,80),
	HX_("initOps",02,63,8b,cb),
	HX_("checkIs",d2,9a,24,13),
	HX_("coalesce",a7,6c,4f,61),
	HX_("coalesce2",ab,a5,2f,c4),
	HX_("setVar",65,6c,71,6f),
	HX_("assign",2f,46,06,4c),
	HX_("assignOp",30,b5,c7,0e),
	HX_("evalAssignOp",ec,d8,94,19),
	HX_("increment",2f,06,ff,31),
	HX_("execute",35,0a,0d,cc),
	HX_("exprReturn",c5,6b,ed,86),
	HX_("duplicate",8b,21,17,a1),
	HX_("restore",4e,67,b0,6a),
	HX_("error",c8,cb,29,73),
	HX_("rethrow",93,b0,2a,f6),
	HX_("resolve",ec,12,60,67),
	HX_("expr",35,fd,1d,43),
	HX_("doWhileLoop",aa,01,97,3a),
	HX_("whileLoop",b5,42,98,e1),
	HX_("makeIterator",fc,dd,72,d8),
	HX_("forLoop",0d,52,69,c9),
	HX_("getMapValue",eb,b1,ee,ce),
	HX_("setMapValue",f7,b8,5b,d9),
	HX_("get",96,80,4e,00),
	HX_("set",a2,9b,57,00),
	HX_("fcall",04,44,99,fc),
	HX_("call",9e,18,ba,41),
	HX_("cnew",dd,ef,c3,41),
	HX_("stringToolsFunction",c2,44,d3,0a),
	::String(null()) };

::hx::Class Interp_obj::__mClass;

static ::String Interp_obj_sStaticFields[] = {
	HX_("isMap",d2,34,51,c1),
	::String(null())
};

void Interp_obj::__register()
{
	Interp_obj _hx_dummy;
	Interp_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hscriptBase.Interp",fe,ba,b7,88);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Interp_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Interp_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Interp_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Interp_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Interp_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Interp_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hscriptBase
