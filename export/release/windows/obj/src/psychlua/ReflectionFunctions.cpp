// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_llua_Lua_helper
#include <llua/Lua_helper.h>
#endif
#ifndef INCLUDED_objects_Character
#include <objects/Character.h>
#endif
#ifndef INCLUDED_psychlua_FunkinLua
#include <psychlua/FunkinLua.h>
#endif
#ifndef INCLUDED_psychlua_LuaUtils
#include <psychlua/LuaUtils.h>
#endif
#ifndef INCLUDED_psychlua_ReflectionFunctions
#include <psychlua/ReflectionFunctions.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_substates_GameOverSubstate
#include <substates/GameOverSubstate.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_17_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",17,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_19_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",19,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_25_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",25,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_34_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",34,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_52_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",52,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_72_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",72,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_98_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",98,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_121_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",121,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_136_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",136,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_140_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",140,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_143_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",143,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_168_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",168,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_183_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",183,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_191_parseInstances,"psychlua.ReflectionFunctions","parseInstances",0x1170b09a,"psychlua.ReflectionFunctions.parseInstances","psychlua/ReflectionFunctions.hx",191,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_219_callMethodFromObject,"psychlua.ReflectionFunctions","callMethodFromObject",0x9b57c417,"psychlua.ReflectionFunctions.callMethodFromObject","psychlua/ReflectionFunctions.hx",219,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_15_boot,"psychlua.ReflectionFunctions","boot",0xe403a781,"psychlua.ReflectionFunctions.boot","psychlua/ReflectionFunctions.hx",15,0x2ed48560)
namespace psychlua{

void ReflectionFunctions_obj::__construct() { }

Dynamic ReflectionFunctions_obj::__CreateEmpty() { return new ReflectionFunctions_obj; }

void *ReflectionFunctions_obj::_hx_vtable = 0;

Dynamic ReflectionFunctions_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ReflectionFunctions_obj > _hx_result = new ReflectionFunctions_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ReflectionFunctions_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5fe99f13;
}

 ::Dynamic ReflectionFunctions_obj::instanceStr;

void ReflectionFunctions_obj::implement( ::psychlua::FunkinLua funk){
            	HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_17_implement)
HXLINE(  18)		 cpp::Reference<lua_State> lua = funk->lua;
HXLINE(  19)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			 ::Dynamic _hx_run(::String variable, ::Dynamic __o_allowMaps){
            		 ::Dynamic allowMaps = __o_allowMaps;
            		if (::hx::IsNull(__o_allowMaps)) allowMaps = false;
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_19_implement)
HXLINE(  20)				::Array< ::String > split = variable.split(HX_(".",2e,00,00,00));
HXLINE(  21)				if ((split->length > 1)) {
HXLINE(  22)					 ::Dynamic _hx_tmp = ::psychlua::LuaUtils_obj::getPropertyLoop(split,true,true,allowMaps);
HXDLIN(  22)					return ::psychlua::LuaUtils_obj::getVarInArray(_hx_tmp,split->__get((split->length - 1)),allowMaps);
            				}
HXLINE(  23)				 ::flixel::FlxState _hx_tmp1;
HXDLIN(  23)				if (::states::PlayState_obj::instance->isDead) {
HXLINE(  23)					_hx_tmp1 = ::substates::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(  23)					_hx_tmp1 = ::states::PlayState_obj::instance;
            				}
HXDLIN(  23)				return ::psychlua::LuaUtils_obj::getVarInArray(_hx_tmp1,variable,allowMaps);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(  19)			::llua::Lua_helper_obj::callbacks->set(HX_("getProperty",0b,0b,2c,d2), ::Dynamic(new _hx_Closure_0()));
HXDLIN(  19)			linc::callbacks::add_callback_function(lua,HX_("getProperty",0b,0b,2c,d2));
            		}
HXLINE(  25)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(3)
            			bool _hx_run(::String variable, ::Dynamic value, ::Dynamic __o_allowMaps){
            		bool allowMaps = __o_allowMaps.Default(false);
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_25_implement)
HXLINE(  26)				::Array< ::String > split = variable.split(HX_(".",2e,00,00,00));
HXLINE(  27)				if ((split->length > 1)) {
HXLINE(  28)					 ::Dynamic _hx_tmp = ::psychlua::LuaUtils_obj::getPropertyLoop(split,true,true,allowMaps);
HXDLIN(  28)					::psychlua::LuaUtils_obj::setVarInArray(_hx_tmp,split->__get((split->length - 1)),value,allowMaps);
HXLINE(  29)					return true;
            				}
HXLINE(  31)				 ::flixel::FlxState _hx_tmp1;
HXDLIN(  31)				if (::states::PlayState_obj::instance->isDead) {
HXLINE(  31)					_hx_tmp1 = ::substates::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(  31)					_hx_tmp1 = ::states::PlayState_obj::instance;
            				}
HXDLIN(  31)				::psychlua::LuaUtils_obj::setVarInArray(_hx_tmp1,variable,value,allowMaps);
HXLINE(  32)				return true;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(  25)			::llua::Lua_helper_obj::callbacks->set(HX_("setProperty",17,12,99,dc), ::Dynamic(new _hx_Closure_1()));
HXDLIN(  25)			linc::callbacks::add_callback_function(lua,HX_("setProperty",17,12,99,dc));
            		}
HXLINE(  34)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(3)
            			 ::Dynamic _hx_run(::String classVar,::String variable, ::Dynamic __o_allowMaps){
            		 ::Dynamic allowMaps = __o_allowMaps;
            		if (::hx::IsNull(__o_allowMaps)) allowMaps = false;
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_34_implement)
HXLINE(  35)				 ::Dynamic myClass = ::Type_obj::resolveClass(classVar);
HXLINE(  36)				if (::hx::IsNull( myClass )) {
HXLINE(  38)					::psychlua::FunkinLua_obj::luaTrace(((HX_("getPropertyFromClass: Class ",11,f9,f8,68) + classVar) + HX_(" not found",55,f3,a5,21)),false,false,-65536);
HXLINE(  39)					return null();
            				}
HXLINE(  42)				::Array< ::String > split = variable.split(HX_(".",2e,00,00,00));
HXLINE(  43)				if ((split->length > 1)) {
HXLINE(  44)					 ::Dynamic obj = ::psychlua::LuaUtils_obj::getVarInArray(myClass,split->__get(0),allowMaps);
HXLINE(  45)					{
HXLINE(  45)						int _g = 1;
HXDLIN(  45)						int _g1 = (split->length - 1);
HXDLIN(  45)						while((_g < _g1)){
HXLINE(  45)							_g = (_g + 1);
HXDLIN(  45)							int i = (_g - 1);
HXLINE(  46)							obj = ::psychlua::LuaUtils_obj::getVarInArray(obj,split->__get(i),allowMaps);
            						}
            					}
HXLINE(  48)					return ::psychlua::LuaUtils_obj::getVarInArray(obj,split->__get((split->length - 1)),allowMaps);
            				}
HXLINE(  50)				return ::psychlua::LuaUtils_obj::getVarInArray(myClass,variable,allowMaps);
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(  34)			::llua::Lua_helper_obj::callbacks->set(HX_("getPropertyFromClass",e3,fd,61,9d), ::Dynamic(new _hx_Closure_2()));
HXDLIN(  34)			linc::callbacks::add_callback_function(lua,HX_("getPropertyFromClass",e3,fd,61,9d));
            		}
HXLINE(  52)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(4)
            			 ::Dynamic _hx_run(::String classVar,::String variable, ::Dynamic value, ::Dynamic __o_allowMaps){
            		 ::Dynamic allowMaps = __o_allowMaps;
            		if (::hx::IsNull(__o_allowMaps)) allowMaps = false;
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_52_implement)
HXLINE(  53)				 ::Dynamic myClass = ::Type_obj::resolveClass(classVar);
HXLINE(  54)				if (::hx::IsNull( myClass )) {
HXLINE(  56)					::psychlua::FunkinLua_obj::luaTrace(((HX_("getPropertyFromClass: Class ",11,f9,f8,68) + classVar) + HX_(" not found",55,f3,a5,21)),false,false,-65536);
HXLINE(  57)					return null();
            				}
HXLINE(  60)				::Array< ::String > split = variable.split(HX_(".",2e,00,00,00));
HXLINE(  61)				if ((split->length > 1)) {
HXLINE(  62)					 ::Dynamic obj = ::psychlua::LuaUtils_obj::getVarInArray(myClass,split->__get(0),allowMaps);
HXLINE(  63)					{
HXLINE(  63)						int _g = 1;
HXDLIN(  63)						int _g1 = (split->length - 1);
HXDLIN(  63)						while((_g < _g1)){
HXLINE(  63)							_g = (_g + 1);
HXDLIN(  63)							int i = (_g - 1);
HXLINE(  64)							obj = ::psychlua::LuaUtils_obj::getVarInArray(obj,split->__get(i),allowMaps);
            						}
            					}
HXLINE(  66)					::psychlua::LuaUtils_obj::setVarInArray(obj,split->__get((split->length - 1)),value,allowMaps);
HXLINE(  67)					return value;
            				}
HXLINE(  69)				::psychlua::LuaUtils_obj::setVarInArray(myClass,variable,value,allowMaps);
HXLINE(  70)				return value;
            			}
            			HX_END_LOCAL_FUNC4(return)

HXLINE(  52)			::llua::Lua_helper_obj::callbacks->set(HX_("setPropertyFromClass",57,b5,19,6a), ::Dynamic(new _hx_Closure_3()));
HXDLIN(  52)			linc::callbacks::add_callback_function(lua,HX_("setPropertyFromClass",57,b5,19,6a));
            		}
HXLINE(  72)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(4)
            			 ::Dynamic _hx_run(::String obj,int index, ::Dynamic variable, ::Dynamic __o_allowMaps){
            		 ::Dynamic allowMaps = __o_allowMaps;
            		if (::hx::IsNull(__o_allowMaps)) allowMaps = false;
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_72_implement)
HXLINE(  73)				::Array< ::String > split = obj.split(HX_(".",2e,00,00,00));
HXLINE(  74)				 ::Dynamic realObject = null();
HXLINE(  75)				if ((split->length > 1)) {
HXLINE(  76)					realObject = ::psychlua::LuaUtils_obj::getPropertyLoop(split,true,false,allowMaps);
            				}
            				else {
HXLINE(  78)					 ::flixel::FlxState realObject1;
HXDLIN(  78)					if (::states::PlayState_obj::instance->isDead) {
HXLINE(  78)						realObject1 = ::substates::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE(  78)						realObject1 = ::states::PlayState_obj::instance;
            					}
HXDLIN(  78)					realObject = ::Reflect_obj::getProperty(realObject1,obj);
            				}
HXLINE(  80)				if (::Std_obj::isOfType(realObject,::hx::ClassOf< ::flixel::group::FlxTypedGroup >())) {
HXLINE(  82)					 ::Dynamic result = ::psychlua::LuaUtils_obj::getGroupStuff( ::Dynamic(realObject->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(index),( (::String)(variable) ),allowMaps);
HXLINE(  83)					return result;
            				}
HXLINE(  86)				 ::Dynamic leArray = realObject->__GetItem(index);
HXLINE(  87)				if (::hx::IsNotNull( leArray )) {
HXLINE(  88)					 ::Dynamic result1 = null();
HXLINE(  89)					if (::hx::IsPointerEq( ::Type_obj::_hx_typeof(variable),::ValueType_obj::TInt_dyn() )) {
HXLINE(  90)						result1 = leArray->__GetItem(( (int)(variable) ));
            					}
            					else {
HXLINE(  92)						result1 = ::psychlua::LuaUtils_obj::getGroupStuff(leArray,( (::String)(variable) ),allowMaps);
            					}
HXLINE(  93)					return result1;
            				}
HXLINE(  95)				::psychlua::FunkinLua_obj::luaTrace(((((HX_("getPropertyFromGroup: Object #",b2,4e,2c,97) + index) + HX_(" from group: ",0f,87,ba,2b)) + obj) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
HXLINE(  96)				return null();
            			}
            			HX_END_LOCAL_FUNC4(return)

HXLINE(  72)			::llua::Lua_helper_obj::callbacks->set(HX_("getPropertyFromGroup",ea,38,fe,ee), ::Dynamic(new _hx_Closure_4()));
HXDLIN(  72)			linc::callbacks::add_callback_function(lua,HX_("getPropertyFromGroup",ea,38,fe,ee));
            		}
HXLINE(  98)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_5) HXARGC(5)
            			 ::Dynamic _hx_run(::String obj,int index, ::Dynamic variable, ::Dynamic value, ::Dynamic __o_allowMaps){
            		 ::Dynamic allowMaps = __o_allowMaps;
            		if (::hx::IsNull(__o_allowMaps)) allowMaps = false;
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_98_implement)
HXLINE(  99)				::Array< ::String > split = obj.split(HX_(".",2e,00,00,00));
HXLINE( 100)				 ::Dynamic realObject = null();
HXLINE( 101)				if ((split->length > 1)) {
HXLINE( 102)					realObject = ::psychlua::LuaUtils_obj::getPropertyLoop(split,true,false,allowMaps);
            				}
            				else {
HXLINE( 104)					 ::flixel::FlxState realObject1;
HXDLIN( 104)					if (::states::PlayState_obj::instance->isDead) {
HXLINE( 104)						realObject1 = ::substates::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE( 104)						realObject1 = ::states::PlayState_obj::instance;
            					}
HXDLIN( 104)					realObject = ::Reflect_obj::getProperty(realObject1,obj);
            				}
HXLINE( 106)				if (::Std_obj::isOfType(realObject,::hx::ClassOf< ::flixel::group::FlxTypedGroup >())) {
HXLINE( 107)					::psychlua::LuaUtils_obj::setGroupStuff( ::Dynamic(realObject->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(index),( (::String)(variable) ),value,allowMaps);
HXLINE( 108)					return value;
            				}
HXLINE( 111)				 ::Dynamic leArray = realObject->__GetItem(index);
HXLINE( 112)				if (::hx::IsNotNull( leArray )) {
HXLINE( 113)					if (::hx::IsPointerEq( ::Type_obj::_hx_typeof(variable),::ValueType_obj::TInt_dyn() )) {
HXLINE( 114)						leArray->__SetItem(( (int)(variable) ),value);
HXLINE( 115)						return value;
            					}
HXLINE( 117)					::psychlua::LuaUtils_obj::setGroupStuff(leArray,( (::String)(variable) ),value,allowMaps);
            				}
HXLINE( 119)				return value;
            			}
            			HX_END_LOCAL_FUNC5(return)

HXLINE(  98)			::llua::Lua_helper_obj::callbacks->set(HX_("setPropertyFromGroup",5e,f0,b5,bb), ::Dynamic(new _hx_Closure_5()));
HXDLIN(  98)			linc::callbacks::add_callback_function(lua,HX_("setPropertyFromGroup",5e,f0,b5,bb));
            		}
HXLINE( 121)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_6) HXARGC(3)
            			void _hx_run(::String obj,int index, ::Dynamic __o_dontDestroy){
            		bool dontDestroy = __o_dontDestroy.Default(false);
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_121_implement)
HXLINE( 122)				 ::flixel::FlxState groupOrArray;
HXDLIN( 122)				if (::states::PlayState_obj::instance->isDead) {
HXLINE( 122)					groupOrArray = ::substates::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE( 122)					groupOrArray = ::states::PlayState_obj::instance;
            				}
HXDLIN( 122)				 ::Dynamic groupOrArray1 = ::Reflect_obj::getProperty(groupOrArray,obj);
HXLINE( 123)				if (::Std_obj::isOfType(groupOrArray1,::hx::ClassOf< ::flixel::group::FlxTypedGroup >())) {
HXLINE( 124)					 ::Dynamic sex =  ::Dynamic(groupOrArray1->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(index);
HXLINE( 125)					if (!(dontDestroy)) {
HXLINE( 126)						sex->__Field(HX_("kill",9e,df,09,47),::hx::paccDynamic)();
            					}
HXLINE( 127)					groupOrArray1->__Field(HX_("remove",44,9c,88,04),::hx::paccDynamic)(sex,true);
HXLINE( 128)					if (!(dontDestroy)) {
HXLINE( 129)						sex->__Field(HX_("destroy",fa,2c,86,24),::hx::paccDynamic)();
            					}
HXLINE( 130)					return;
            				}
HXLINE( 132)				groupOrArray1->__Field(HX_("remove",44,9c,88,04),::hx::paccDynamic)(groupOrArray1->__GetItem(index));
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 121)			::llua::Lua_helper_obj::callbacks->set(HX_("removeFromGroup",91,38,9c,8f), ::Dynamic(new _hx_Closure_6()));
HXDLIN( 121)			linc::callbacks::add_callback_function(lua,HX_("removeFromGroup",91,38,9c,8f));
            		}
HXLINE( 135)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_7) HXARGC(2)
            			 ::Dynamic _hx_run(::String funcToRun,::cpp::VirtualArray args){
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_136_implement)
HXLINE( 136)				 ::states::PlayState _hx_tmp = ::states::PlayState_obj::instance;
HXDLIN( 136)				return ::psychlua::ReflectionFunctions_obj::callMethodFromObject(_hx_tmp,funcToRun,::psychlua::ReflectionFunctions_obj::parseInstances(args));
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 135)			::llua::Lua_helper_obj::callbacks->set(HX_("callMethod",1f,ce,8a,34), ::Dynamic(new _hx_Closure_7()));
HXDLIN( 135)			linc::callbacks::add_callback_function(lua,HX_("callMethod",1f,ce,8a,34));
            		}
HXLINE( 139)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_8) HXARGC(3)
            			 ::Dynamic _hx_run(::String className,::String funcToRun,::cpp::VirtualArray args){
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_140_implement)
HXLINE( 140)				::hx::Class _hx_tmp = ::Type_obj::resolveClass(className);
HXDLIN( 140)				return ::psychlua::ReflectionFunctions_obj::callMethodFromObject(_hx_tmp,funcToRun,::psychlua::ReflectionFunctions_obj::parseInstances(args));
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE( 139)			::llua::Lua_helper_obj::callbacks->set(HX_("callMethodFromClass",4f,38,64,be), ::Dynamic(new _hx_Closure_8()));
HXDLIN( 139)			linc::callbacks::add_callback_function(lua,HX_("callMethodFromClass",4f,38,64,be));
            		}
HXLINE( 143)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_9) HXARGC(3)
            			bool _hx_run(::String variableToSave,::String className,::cpp::VirtualArray args){
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_143_implement)
HXLINE( 144)				variableToSave = ::StringTools_obj::replace(::StringTools_obj::trim(variableToSave),HX_(".",2e,00,00,00),HX_("",00,00,00,00));
HXLINE( 145)				if (!(::states::PlayState_obj::instance->variables->exists(variableToSave))) {
HXLINE( 147)					if (::hx::IsNull( args )) {
HXLINE( 147)						args = ::cpp::VirtualArray_obj::__new(0);
            					}
HXLINE( 148)					 ::Dynamic myType = ::Type_obj::resolveClass(className);
HXLINE( 150)					if (::hx::IsNull( myType )) {
HXLINE( 152)						::psychlua::FunkinLua_obj::luaTrace(((HX_("createInstance: Variable ",cd,f7,b0,5e) + variableToSave) + HX_(" is already being used and cannot be replaced!",04,3c,54,b7)),false,false,-65536);
HXLINE( 153)						return false;
            					}
HXLINE( 156)					 ::Dynamic obj = ::Type_obj::createInstance(myType,args);
HXLINE( 157)					if (::hx::IsNotNull( obj )) {
HXLINE( 158)						::states::PlayState_obj::instance->variables->set(variableToSave,obj);
            					}
            					else {
HXLINE( 160)						::psychlua::FunkinLua_obj::luaTrace(((HX_("createInstance: Failed to create ",eb,a9,51,2f) + variableToSave) + HX_(", arguments are possibly wrong.",12,b8,b6,e3)),false,false,-65536);
            					}
HXLINE( 162)					return ::hx::IsNotNull( obj );
            				}
            				else {
HXLINE( 164)					::psychlua::FunkinLua_obj::luaTrace(((HX_("createInstance: Variable ",cd,f7,b0,5e) + variableToSave) + HX_(" is already being used and cannot be replaced!",04,3c,54,b7)),false,false,-65536);
            				}
HXLINE( 165)				return false;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE( 143)			::llua::Lua_helper_obj::callbacks->set(HX_("createInstance",b1,9e,1b,ac), ::Dynamic(new _hx_Closure_9()));
HXDLIN( 143)			linc::callbacks::add_callback_function(lua,HX_("createInstance",b1,9e,1b,ac));
            		}
HXLINE( 167)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_10) HXARGC(2)
            			void _hx_run(::String objectName, ::Dynamic __o_inFront){
            		 ::Dynamic inFront = __o_inFront;
            		if (::hx::IsNull(__o_inFront)) inFront = false;
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_168_implement)
HXLINE( 168)				if (::states::PlayState_obj::instance->variables->exists(objectName)) {
HXLINE( 170)					 ::Dynamic obj = ::states::PlayState_obj::instance->variables->get(objectName);
HXLINE( 171)					if (( (bool)(inFront) )) {
HXLINE( 172)						 ::flixel::FlxState _hx_tmp;
HXDLIN( 172)						if (::states::PlayState_obj::instance->isDead) {
HXLINE( 172)							_hx_tmp = ::substates::GameOverSubstate_obj::instance;
            						}
            						else {
HXLINE( 172)							_hx_tmp = ::states::PlayState_obj::instance;
            						}
HXDLIN( 172)						_hx_tmp->add(obj).StaticCast<  ::flixel::FlxBasic >();
            					}
            					else {
HXLINE( 175)						if (!(::states::PlayState_obj::instance->isDead)) {
HXLINE( 176)							 ::states::PlayState _hx_tmp1 = ::states::PlayState_obj::instance;
HXDLIN( 176)							::Array< ::Dynamic> _hx_tmp2 = ::states::PlayState_obj::instance->members;
HXDLIN( 176)							 ::flixel::group::FlxTypedSpriteGroup group = ::states::PlayState_obj::instance->gfGroup;
HXDLIN( 176)							int pos = ::states::PlayState_obj::instance->members->indexOf(group,null());
HXDLIN( 176)							int newPos = ::states::PlayState_obj::instance->members->indexOf(::states::PlayState_obj::instance->boyfriendGroup,null());
HXDLIN( 176)							if ((newPos < pos)) {
HXLINE( 176)								group = ::states::PlayState_obj::instance->boyfriendGroup;
HXDLIN( 176)								pos = newPos;
            							}
HXDLIN( 176)							newPos = ::states::PlayState_obj::instance->members->indexOf(::states::PlayState_obj::instance->dadGroup,null());
HXDLIN( 176)							if ((newPos < pos)) {
HXLINE( 176)								group = ::states::PlayState_obj::instance->dadGroup;
HXDLIN( 176)								pos = newPos;
            							}
HXDLIN( 176)							_hx_tmp1->insert(_hx_tmp2->indexOf(group,null()),obj).StaticCast<  ::flixel::FlxBasic >();
            						}
            						else {
HXLINE( 178)							 ::substates::GameOverSubstate _hx_tmp3 = ::substates::GameOverSubstate_obj::instance;
HXDLIN( 178)							_hx_tmp3->insert(::substates::GameOverSubstate_obj::instance->members->indexOf(::substates::GameOverSubstate_obj::instance->boyfriend,null()),obj).StaticCast<  ::flixel::FlxBasic >();
            						}
            					}
            				}
            				else {
HXLINE( 181)					::psychlua::FunkinLua_obj::luaTrace(((HX_("addInstance: Can't add what doesn't exist~ (",6b,4c,da,1e) + objectName) + HX_(")",29,00,00,00)),false,false,-65536);
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 167)			::llua::Lua_helper_obj::callbacks->set(HX_("addInstance",d6,56,3d,8b), ::Dynamic(new _hx_Closure_10()));
HXDLIN( 167)			linc::callbacks::add_callback_function(lua,HX_("addInstance",d6,56,3d,8b));
            		}
HXLINE( 183)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_11) HXARGC(2)
            			::String _hx_run(::String instanceName,::String className){
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_183_implement)
HXLINE( 184)				::String retStr = (((HX_("",00,00,00,00) + ::Std_obj::string(::psychlua::ReflectionFunctions_obj::instanceStr)) + HX_("::",c0,32,00,00)) + instanceName);
HXLINE( 185)				if (::hx::IsNotNull( className )) {
HXLINE( 185)					retStr = (retStr + (HX_("::",c0,32,00,00) + className));
            				}
HXLINE( 186)				return retStr;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 183)			::llua::Lua_helper_obj::callbacks->set(HX_("instanceArg",c1,c1,0a,29), ::Dynamic(new _hx_Closure_11()));
HXDLIN( 183)			linc::callbacks::add_callback_function(lua,HX_("instanceArg",c1,c1,0a,29));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ReflectionFunctions_obj,implement,(void))

::cpp::VirtualArray ReflectionFunctions_obj::parseInstances(::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_191_parseInstances)
HXLINE( 192)		{
HXLINE( 192)			int _g = 0;
HXDLIN( 192)			int _g1 = args->get_length();
HXDLIN( 192)			while((_g < _g1)){
HXLINE( 192)				_g = (_g + 1);
HXDLIN( 192)				int i = (_g - 1);
HXLINE( 194)				::String myArg = ( (::String)(args->__get(i)) );
HXLINE( 195)				bool _hx_tmp;
HXDLIN( 195)				if (::hx::IsNotNull( myArg )) {
HXLINE( 195)					_hx_tmp = ::hx::IsGreater( myArg.length,::psychlua::ReflectionFunctions_obj::instanceStr->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic) );
            				}
            				else {
HXLINE( 195)					_hx_tmp = false;
            				}
HXDLIN( 195)				if (_hx_tmp) {
HXLINE( 197)					int index = myArg.indexOf(HX_("::",c0,32,00,00),null());
HXLINE( 198)					if ((index > -1)) {
HXLINE( 200)						myArg = myArg.substring((index + 2),null());
HXLINE( 202)						int lastIndex = myArg.lastIndexOf(HX_("::",c0,32,00,00),null());
HXLINE( 204)						::Array< ::String > split = myArg.split(HX_(".",2e,00,00,00));
HXLINE( 205)						 ::Dynamic _hx_tmp1;
HXDLIN( 205)						if ((lastIndex > -1)) {
HXLINE( 205)							_hx_tmp1 = ::Type_obj::resolveClass(myArg.substring(0,lastIndex));
            						}
            						else {
HXLINE( 205)							_hx_tmp1 = ::states::PlayState_obj::instance;
            						}
HXDLIN( 205)						args->set(i,_hx_tmp1);
HXLINE( 206)						{
HXLINE( 206)							int _g2 = 0;
HXDLIN( 206)							int _g3 = split->length;
HXDLIN( 206)							while((_g2 < _g3)){
HXLINE( 206)								_g2 = (_g2 + 1);
HXDLIN( 206)								int j = (_g2 - 1);
HXLINE( 209)								 ::Dynamic args1 = args->__get(i);
HXDLIN( 209)								args->set(i,::psychlua::LuaUtils_obj::getVarInArray(args1,::StringTools_obj::trim(split->__get(j)),null()));
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 215)		return args;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ReflectionFunctions_obj,parseInstances,return )

 ::Dynamic ReflectionFunctions_obj::callMethodFromObject( ::Dynamic classObj,::String funcStr,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_219_callMethodFromObject)
HXLINE( 220)		if (::hx::IsNull( args )) {
HXLINE( 220)			args = ::cpp::VirtualArray_obj::__new(0);
            		}
HXLINE( 222)		::Array< ::String > split = funcStr.split(HX_(".",2e,00,00,00));
HXLINE( 223)		 ::Dynamic funcToRun = null();
HXLINE( 224)		 ::Dynamic obj = classObj;
HXLINE( 226)		if (::hx::IsNull( obj )) {
HXLINE( 228)			return null();
            		}
HXLINE( 231)		{
HXLINE( 231)			int _g = 0;
HXDLIN( 231)			int _g1 = split->length;
HXDLIN( 231)			while((_g < _g1)){
HXLINE( 231)				_g = (_g + 1);
HXDLIN( 231)				int i = (_g - 1);
HXLINE( 233)				obj = ::psychlua::LuaUtils_obj::getVarInArray(obj,::StringTools_obj::trim(split->__get(i)),null());
            			}
            		}
HXLINE( 237)		funcToRun = obj;
HXLINE( 239)		if (::hx::IsNotNull( funcToRun )) {
HXLINE( 239)			return ::Reflect_obj::callMethod(obj,funcToRun,args);
            		}
            		else {
HXLINE( 239)			return null();
            		}
HXDLIN( 239)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ReflectionFunctions_obj,callMethodFromObject,return )


ReflectionFunctions_obj::ReflectionFunctions_obj()
{
}

bool ReflectionFunctions_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"implement") ) { outValue = implement_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"instanceStr") ) { outValue = ( instanceStr ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"parseInstances") ) { outValue = parseInstances_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"callMethodFromObject") ) { outValue = callMethodFromObject_dyn(); return true; }
	}
	return false;
}

bool ReflectionFunctions_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"instanceStr") ) { instanceStr=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ReflectionFunctions_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo ReflectionFunctions_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &ReflectionFunctions_obj::instanceStr,HX_("instanceStr",1c,6c,18,29)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void ReflectionFunctions_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ReflectionFunctions_obj::instanceStr,"instanceStr");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ReflectionFunctions_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ReflectionFunctions_obj::instanceStr,"instanceStr");
};

#endif

::hx::Class ReflectionFunctions_obj::__mClass;

static ::String ReflectionFunctions_obj_sStaticFields[] = {
	HX_("instanceStr",1c,6c,18,29),
	HX_("implement",a3,71,3f,af),
	HX_("parseInstances",8b,b4,3b,8f),
	HX_("callMethodFromObject",c8,d2,7b,e9),
	::String(null())
};

void ReflectionFunctions_obj::__register()
{
	ReflectionFunctions_obj _hx_dummy;
	ReflectionFunctions_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("psychlua.ReflectionFunctions",7f,ff,5c,54);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ReflectionFunctions_obj::__GetStatic;
	__mClass->mSetStaticField = &ReflectionFunctions_obj::__SetStatic;
	__mClass->mMarkFunc = ReflectionFunctions_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ReflectionFunctions_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ReflectionFunctions_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ReflectionFunctions_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ReflectionFunctions_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ReflectionFunctions_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ReflectionFunctions_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_15_boot)
HXDLIN(  15)		instanceStr = HX_("##PSYCHLUA_STRINGTOOBJ",49,42,57,d0);
            	}
}

} // end namespace psychlua
