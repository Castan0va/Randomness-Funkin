// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Conductor
#include <backend/Conductor.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_Countdown
#include <backend/Countdown.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_PsychCamera
#include <backend/PsychCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxRuntimeShader
#include <flixel/addons/display/FlxRuntimeShader.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadAnalogStick
#include <flixel/input/gamepad/FlxGamepadAnalogStick.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad__FlxGamepadInputID_FlxGamepadInputID_Impl_
#include <flixel/input/gamepad/_FlxGamepadInputID/FlxGamepadInputID_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxBaseGamepadList
#include <flixel/input/gamepad/lists/FlxBaseGamepadList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadButtonList
#include <flixel/input/gamepad/lists/FlxGamepadButtonList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flxanimate_FlxAnimate
#include <flxanimate/FlxAnimate.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_llua_Lua_helper
#include <llua/Lua_helper.h>
#endif
#ifndef INCLUDED_objects_Alphabet
#include <objects/Alphabet.h>
#endif
#ifndef INCLUDED_objects_Character
#include <objects/Character.h>
#endif
#ifndef INCLUDED_objects_Note
#include <objects/Note.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ShaderFilter
#include <openfl/filters/ShaderFilter.h>
#endif
#ifndef INCLUDED_psychlua_CustomFlxColor
#include <psychlua/CustomFlxColor.h>
#endif
#ifndef INCLUDED_psychlua_CustomSubstate
#include <psychlua/CustomSubstate.h>
#endif
#ifndef INCLUDED_psychlua_FunkinLua
#include <psychlua/FunkinLua.h>
#endif
#ifndef INCLUDED_psychlua_HScript
#include <psychlua/HScript.h>
#endif
#ifndef INCLUDED_psychlua_LuaUtils
#include <psychlua/LuaUtils.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_tea_SScript
#include <tea/SScript.h>
#endif
#ifndef INCLUDED_tea_backend__SScriptException_SScriptException_Impl_
#include <tea/backend/_SScriptException/SScriptException_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_22ae5a7ed167d885_14_new,"psychlua.HScript","new",0xc5b53054,"psychlua.HScript.new","psychlua/HScript.hx",14,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_118_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",118,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_122_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",122,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_128_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",128,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_136_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",136,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_140_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",140,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_154_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",154,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_155_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",155,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_156_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",156,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_158_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",158,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_159_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",159,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_160_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",160,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_163_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",163,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_170_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",170,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_177_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",177,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_184_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",184,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_191_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",191,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_198_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",198,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_209_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",209,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_220_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",220,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_236_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",236,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_246_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",246,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_255_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",255,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_83_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",83,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_317_executeCode,"psychlua.HScript","executeCode",0x3ba519f6,"psychlua.HScript.executeCode","psychlua/HScript.hx",317,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_349_executeFunction,"psychlua.HScript","executeFunction",0xe611ac61,"psychlua.HScript.executeFunction","psychlua/HScript.hx",349,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_432_destroy,"psychlua.HScript","destroy",0x3d4896ee,"psychlua.HScript.destroy","psychlua/HScript.hx",432,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_22_initHaxeModule,"psychlua.HScript","initHaxeModule",0xf5eaad2e,"psychlua.HScript.initHaxeModule","psychlua/HScript.hx",22,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_30_initHaxeModuleCode,"psychlua.HScript","initHaxeModuleCode",0x2e51b97b,"psychlua.HScript.initHaxeModuleCode","psychlua/HScript.hx",30,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_356_implement,"psychlua.HScript","implement",0x4ce74097,"psychlua.HScript.implement","psychlua/HScript.hx",356,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_380_implement,"psychlua.HScript","implement",0x4ce74097,"psychlua.HScript.implement","psychlua/HScript.hx",380,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_397_implement,"psychlua.HScript","implement",0x4ce74097,"psychlua.HScript.implement","psychlua/HScript.hx",397,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_355_implement,"psychlua.HScript","implement",0x4ce74097,"psychlua.HScript.implement","psychlua/HScript.hx",355,0x619ca0dd)
namespace psychlua{

void HScript_obj::__construct( ::Dynamic parent,::String file, ::Dynamic varsToBring){
            	HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_14_new)
HXLINE(  82)		this->varsToBring = null();
HXLINE(  52)		if (::hx::IsNull( file )) {
HXLINE(  53)			file = HX_("",00,00,00,00);
            		}
HXLINE(  55)		this->varsToBring = varsToBring;
HXLINE(  57)		super::__construct(file,false,false);
HXLINE(  60)		this->parentLua = ( ( ::psychlua::FunkinLua)(parent) );
HXLINE(  61)		if (::hx::IsNotNull( parent )) {
HXLINE(  63)			this->origin = ( (::String)(parent->__Field(HX_("scriptName",f6,4d,e0,41),::hx::paccDynamic)) );
HXLINE(  64)			this->modFolder = ( (::String)(parent->__Field(HX_("modFolder",10,7f,30,0a),::hx::paccDynamic)) );
            		}
HXLINE(  68)		bool _hx_tmp;
HXDLIN(  68)		if (::hx::IsNotNull( this->scriptFile )) {
HXLINE(  68)			_hx_tmp = (this->scriptFile.length > 0);
            		}
            		else {
HXLINE(  68)			_hx_tmp = false;
            		}
HXDLIN(  68)		if (_hx_tmp) {
HXLINE(  70)			this->origin = this->scriptFile;
HXLINE(  72)			::Array< ::String > myFolder = this->scriptFile.split(HX_("/",2f,00,00,00));
HXLINE(  73)			bool _hx_tmp1;
HXDLIN(  73)			if (((myFolder->__get(0) + HX_("/",2f,00,00,00)) == HX_("mods/",9e,2f,58,0c))) {
HXLINE(  73)				if ((::backend::Mods_obj::currentModDirectory != myFolder->__get(1))) {
HXLINE(  73)					_hx_tmp1 = ::backend::Mods_obj::globalMods->contains(myFolder->__get(1));
            				}
            				else {
HXLINE(  73)					_hx_tmp1 = true;
            				}
            			}
            			else {
HXLINE(  73)				_hx_tmp1 = false;
            			}
HXDLIN(  73)			if (_hx_tmp1) {
HXLINE(  74)				this->modFolder = myFolder->__get(1);
            			}
            		}
HXLINE(  78)		this->preset();
HXLINE(  79)		this->execute();
            	}

Dynamic HScript_obj::__CreateEmpty() { return new HScript_obj; }

void *HScript_obj::_hx_vtable = 0;

Dynamic HScript_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< HScript_obj > _hx_result = new HScript_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool HScript_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f20a2ee) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1f20a2ee;
	} else {
		return inClassId==(int)0x7f75c5ee;
	}
}

void HScript_obj::preset(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		 ::Dynamic _hx_run(::String name, ::Dynamic value){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_118_preset)
HXLINE( 119)			::states::PlayState_obj::instance->variables->set(name,value);
HXLINE( 120)			return value;
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		 ::Dynamic _hx_run(::String name){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_122_preset)
HXLINE( 123)			 ::Dynamic result = null();
HXLINE( 124)			if (::states::PlayState_obj::instance->variables->exists(name)) {
HXLINE( 124)				result = ::states::PlayState_obj::instance->variables->get(name);
            			}
HXLINE( 125)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            		bool _hx_run(::String name){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_128_preset)
HXLINE( 129)			if (::states::PlayState_obj::instance->variables->exists(name)) {
HXLINE( 131)				::states::PlayState_obj::instance->variables->remove(name);
HXLINE( 132)				return true;
            			}
HXLINE( 134)			return false;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(2)
            		void _hx_run(::String text, ::Dynamic color){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_136_preset)
HXLINE( 137)			if (::hx::IsNull( color )) {
HXLINE( 137)				color = -1;
            			}
HXLINE( 138)			::states::PlayState_obj::instance->addTextToDebug(text,( (int)(color) ));
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::psychlua::HScript,_gthis) HXARGC(2)
            		 ::Dynamic _hx_run(::String saveTag,::String modName){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_140_preset)
HXLINE( 141)			if (::hx::IsNull( modName )) {
HXLINE( 143)				if (::hx::IsNull( _gthis->modFolder )) {
HXLINE( 145)					::states::PlayState_obj::instance->addTextToDebug(HX_("getModSetting: Argument #2 is null and script is not inside a packed Mod folder!",fe,0e,a5,12),-65536);
HXLINE( 146)					return null();
            				}
HXLINE( 148)				modName = _gthis->modFolder;
            			}
HXLINE( 150)			return ::psychlua::LuaUtils_obj::getModSetting(saveTag,modName);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_5) HXARGC(1)
            		 ::Dynamic _hx_run(::String name){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_154_preset)
HXLINE( 154)			return ::Reflect_obj::getProperty(::flixel::FlxG_obj::keys->justPressed,name);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_6) HXARGC(1)
            		 ::Dynamic _hx_run(::String name){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_155_preset)
HXLINE( 155)			return ::Reflect_obj::getProperty(::flixel::FlxG_obj::keys->pressed,name);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_7) HXARGC(1)
            		 ::Dynamic _hx_run(::String name){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_156_preset)
HXLINE( 156)			return ::Reflect_obj::getProperty(::flixel::FlxG_obj::keys->justReleased,name);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_8) HXARGC(1)
            		bool _hx_run(::String name){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_158_preset)
HXLINE( 158)			 ::flixel::input::gamepad::FlxGamepadManager _this = ::flixel::FlxG_obj::gamepads;
HXDLIN( 158)			int buttonID;
HXDLIN( 158)			::String s = name;
HXDLIN( 158)			s = s.toUpperCase();
HXDLIN( 158)			if (::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->exists(s)) {
HXLINE( 158)				buttonID = ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->get_int(s);
            			}
            			else {
HXLINE( 158)				buttonID = -1;
            			}
HXDLIN( 158)			return _this->anyHasState(buttonID,2);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_9) HXARGC(1)
            		void _hx_run(::String name){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_159_preset)
HXLINE( 159)			 ::flixel::input::gamepad::FlxGamepadManager _this = ::flixel::FlxG_obj::gamepads;
HXDLIN( 159)			int buttonID;
HXDLIN( 159)			::String s = name;
HXDLIN( 159)			s = s.toUpperCase();
HXDLIN( 159)			if (::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->exists(s)) {
HXLINE( 159)				buttonID = ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->get_int(s);
            			}
            			else {
HXLINE( 159)				buttonID = -1;
            			}
HXDLIN( 159)			_this->anyHasState(buttonID,1);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_10) HXARGC(1)
            		bool _hx_run(::String name){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_160_preset)
HXLINE( 160)			 ::flixel::input::gamepad::FlxGamepadManager _this = ::flixel::FlxG_obj::gamepads;
HXDLIN( 160)			int buttonID;
HXDLIN( 160)			::String s = name;
HXDLIN( 160)			s = s.toUpperCase();
HXDLIN( 160)			if (::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->exists(s)) {
HXLINE( 160)				buttonID = ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->get_int(s);
            			}
            			else {
HXLINE( 160)				buttonID = -1;
            			}
HXDLIN( 160)			return _this->anyHasState(buttonID,-1);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_11) HXARGC(2)
            		Float _hx_run(int id, ::Dynamic __o_leftStick){
            		 ::Dynamic leftStick = __o_leftStick;
            		if (::hx::IsNull(__o_leftStick)) leftStick = true;
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_163_preset)
HXLINE( 164)			 ::flixel::input::gamepad::FlxGamepad controller = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(id).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE( 165)			if (::hx::IsNull( controller )) {
HXLINE( 165)				return ((Float)0.0);
            			}
HXLINE( 167)			int _hx_tmp;
HXDLIN( 167)			if (( (bool)(leftStick) )) {
HXLINE( 167)				_hx_tmp = 19;
            			}
            			else {
HXLINE( 167)				_hx_tmp = 20;
            			}
HXDLIN( 167)			return controller->getAnalogXAxisValue(controller->mapping->getAnalogStick(_hx_tmp));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_12) HXARGC(2)
            		Float _hx_run(int id, ::Dynamic __o_leftStick){
            		 ::Dynamic leftStick = __o_leftStick;
            		if (::hx::IsNull(__o_leftStick)) leftStick = true;
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_170_preset)
HXLINE( 171)			 ::flixel::input::gamepad::FlxGamepad controller = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(id).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE( 172)			if (::hx::IsNull( controller )) {
HXLINE( 172)				return ((Float)0.0);
            			}
HXLINE( 174)			int _hx_tmp;
HXDLIN( 174)			if (( (bool)(leftStick) )) {
HXLINE( 174)				_hx_tmp = 19;
            			}
            			else {
HXLINE( 174)				_hx_tmp = 20;
            			}
HXDLIN( 174)			return controller->getYAxisRaw(controller->mapping->getAnalogStick(_hx_tmp));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_13) HXARGC(2)
            		bool _hx_run(int id,::String name){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_177_preset)
HXLINE( 178)			 ::flixel::input::gamepad::FlxGamepad controller = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(id).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE( 179)			if (::hx::IsNull( controller )) {
HXLINE( 179)				return false;
            			}
HXLINE( 181)			return ::hx::IsEq( ::Reflect_obj::getProperty(controller->justPressed,name),true );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_14) HXARGC(2)
            		bool _hx_run(int id,::String name){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_184_preset)
HXLINE( 185)			 ::flixel::input::gamepad::FlxGamepad controller = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(id).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE( 186)			if (::hx::IsNull( controller )) {
HXLINE( 186)				return false;
            			}
HXLINE( 188)			return ::hx::IsEq( ::Reflect_obj::getProperty(controller->pressed,name),true );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_15) HXARGC(2)
            		bool _hx_run(int id,::String name){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_191_preset)
HXLINE( 192)			 ::flixel::input::gamepad::FlxGamepad controller = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(id).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE( 193)			if (::hx::IsNull( controller )) {
HXLINE( 193)				return false;
            			}
HXLINE( 195)			return ::hx::IsEq( ::Reflect_obj::getProperty(controller->justReleased,name),true );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_16) HXARGC(1)
            		bool _hx_run(::String __o_name){
            		::String name = __o_name;
            		if (::hx::IsNull(__o_name)) name = HX_("",00,00,00,00);
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_198_preset)
HXLINE( 199)			name = name.toLowerCase();
HXLINE( 200)			::String _hx_switch_0 = name;
            			if (  (_hx_switch_0==HX_("down",62,f8,6d,42)) ){
HXLINE( 202)				return ::backend::Controls_obj::instance->get_NOTE_DOWN_P();
HXDLIN( 202)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE( 201)				return ::backend::Controls_obj::instance->get_NOTE_LEFT_P();
HXDLIN( 201)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE( 204)				return ::backend::Controls_obj::instance->get_NOTE_RIGHT_P();
HXDLIN( 204)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE( 203)				return ::backend::Controls_obj::instance->get_NOTE_UP_P();
HXDLIN( 203)				goto _hx_goto_1;
            			}
            			/* default */{
HXLINE( 205)				return ::backend::Controls_obj::instance->justPressed(name);
            			}
            			_hx_goto_1:;
HXLINE( 200)			return false;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_17) HXARGC(1)
            		bool _hx_run(::String __o_name){
            		::String name = __o_name;
            		if (::hx::IsNull(__o_name)) name = HX_("",00,00,00,00);
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_209_preset)
HXLINE( 210)			name = name.toLowerCase();
HXLINE( 211)			::String _hx_switch_1 = name;
            			if (  (_hx_switch_1==HX_("down",62,f8,6d,42)) ){
HXLINE( 213)				return ::backend::Controls_obj::instance->get_NOTE_DOWN();
HXDLIN( 213)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_1==HX_("left",07,08,b0,47)) ){
HXLINE( 212)				return ::backend::Controls_obj::instance->get_NOTE_LEFT();
HXDLIN( 212)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_1==HX_("right",dc,0b,64,e9)) ){
HXLINE( 215)				return ::backend::Controls_obj::instance->get_NOTE_RIGHT();
HXDLIN( 215)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_1==HX_("up",5b,66,00,00)) ){
HXLINE( 214)				return ::backend::Controls_obj::instance->get_NOTE_UP();
HXDLIN( 214)				goto _hx_goto_2;
            			}
            			/* default */{
HXLINE( 216)				return ::backend::Controls_obj::instance->pressed(name);
            			}
            			_hx_goto_2:;
HXLINE( 211)			return false;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_18) HXARGC(1)
            		bool _hx_run(::String __o_name){
            		::String name = __o_name;
            		if (::hx::IsNull(__o_name)) name = HX_("",00,00,00,00);
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_220_preset)
HXLINE( 221)			name = name.toLowerCase();
HXLINE( 222)			::String _hx_switch_2 = name;
            			if (  (_hx_switch_2==HX_("down",62,f8,6d,42)) ){
HXLINE( 224)				return ::backend::Controls_obj::instance->get_NOTE_DOWN_R();
HXDLIN( 224)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_2==HX_("left",07,08,b0,47)) ){
HXLINE( 223)				return ::backend::Controls_obj::instance->get_NOTE_LEFT_R();
HXDLIN( 223)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_2==HX_("right",dc,0b,64,e9)) ){
HXLINE( 226)				return ::backend::Controls_obj::instance->get_NOTE_RIGHT_R();
HXDLIN( 226)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_2==HX_("up",5b,66,00,00)) ){
HXLINE( 225)				return ::backend::Controls_obj::instance->get_NOTE_UP_R();
HXDLIN( 225)				goto _hx_goto_3;
            			}
            			/* default */{
HXLINE( 227)				return ::backend::Controls_obj::instance->justReleased(name);
            			}
            			_hx_goto_3:;
HXLINE( 222)			return false;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_19) HXARGC(2)
            		void _hx_run(::String name, ::Dynamic func){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_236_preset)
HXLINE( 237)			{
HXLINE( 237)				int _g = 0;
HXDLIN( 237)				::Array< ::Dynamic> _g1 = ::states::PlayState_obj::instance->luaArray;
HXDLIN( 237)				while((_g < _g1->length)){
HXLINE( 237)					 ::psychlua::FunkinLua script = _g1->__get(_g).StaticCast<  ::psychlua::FunkinLua >();
HXDLIN( 237)					_g = (_g + 1);
HXLINE( 238)					bool _hx_tmp;
HXDLIN( 238)					bool _hx_tmp1;
HXDLIN( 238)					if (::hx::IsNotNull( script )) {
HXLINE( 238)						_hx_tmp1 = ::hx::IsNotNull( script->lua );
            					}
            					else {
HXLINE( 238)						_hx_tmp1 = false;
            					}
HXDLIN( 238)					if (_hx_tmp1) {
HXLINE( 238)						_hx_tmp = !(script->closed);
            					}
            					else {
HXLINE( 238)						_hx_tmp = false;
            					}
HXDLIN( 238)					if (_hx_tmp) {
HXLINE( 239)						 cpp::Reference<lua_State> l = script->lua;
HXDLIN( 239)						::llua::Lua_helper_obj::callbacks->set(name,func);
HXDLIN( 239)						linc::callbacks::add_callback_function(l,name);
            					}
            				}
            			}
HXLINE( 241)			::psychlua::FunkinLua_obj::customFunctions->set(name,func);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_20, ::psychlua::HScript,_gthis) HXARGC(3)
            		void _hx_run(::String name, ::Dynamic func, ::psychlua::FunkinLua funk){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_246_preset)
HXLINE( 247)			if (::hx::IsNull( funk )) {
HXLINE( 247)				funk = _gthis->parentLua;
            			}
HXLINE( 249)			if (::hx::IsNotNull( _gthis->parentLua )) {
HXLINE( 249)				funk->addLocalCallback(name,func);
            			}
            			else {
HXLINE( 250)				::psychlua::FunkinLua_obj::luaTrace(((HX_("createCallback (",29,ef,61,76) + name) + HX_("): 3rd argument is null",44,8a,de,61)),false,false,-65536);
            			}
            		}
            		HX_END_LOCAL_FUNC3((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_21, ::psychlua::HScript,_gthis) HXARGC(2)
            		void _hx_run(::String libName,::String __o_libPackage){
            		::String libPackage = __o_libPackage;
            		if (::hx::IsNull(__o_libPackage)) libPackage = HX_("",00,00,00,00);
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_255_preset)
HXLINE( 255)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 256)				::String str = HX_("",00,00,00,00);
HXLINE( 257)				if ((libPackage.length > 0)) {
HXLINE( 258)					str = (libPackage + HX_(".",2e,00,00,00));
            				}
HXLINE( 260)				 ::psychlua::HScript _gthis1 = _gthis;
HXDLIN( 260)				_gthis1->set(libName,::Type_obj::resolveClass((str + libName)));
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE( 262)					{
HXLINE( 262)						null();
            					}
HXDLIN( 262)					 ::Dynamic e = _g;
HXDLIN( 262)					{
HXLINE( 263)						 ::Dynamic e1 =  ::Dynamic( ::Dynamic(e->__Field(HX_("message",c7,35,11,9a),::hx::paccDynamic))->__Field(HX_("substr",31,ef,0a,9a),::hx::paccDynamic));
HXDLIN( 263)						::String msg = ( (::String)(e1(0, ::Dynamic(e->__Field(HX_("message",c7,35,11,9a),::hx::paccDynamic))->__Field(HX_("indexOf",c9,48,bf,e0),::hx::paccDynamic)(HX_("\n",0a,00,00,00)))) );
HXLINE( 265)						if (::hx::IsNotNull( _gthis->parentLua )) {
HXLINE( 267)							::psychlua::FunkinLua_obj::lastCalledScript = _gthis->parentLua;
HXLINE( 268)							::psychlua::FunkinLua_obj::luaTrace((((((HX_("",00,00,00,00) + _gthis->origin) + HX_(": ",a6,32,00,00)) + _gthis->parentLua->lastCalledFunction) + HX_(" - ",73,6f,18,00)) + msg),false,false,-65536);
HXLINE( 269)							return;
            						}
HXLINE( 272)						if (::hx::IsNotNull( ::states::PlayState_obj::instance )) {
HXLINE( 272)							::states::PlayState_obj::instance->addTextToDebug((((HX_("",00,00,00,00) + _gthis->origin) + HX_(" - ",73,6f,18,00)) + msg),-65536);
            						}
            						else {
HXLINE( 273)							::haxe::Log_obj::trace((((HX_("",00,00,00,00) + _gthis->origin) + HX_(" - ",73,6f,18,00)) + msg),::hx::SourceInfo(HX_("source/psychlua/HScript.hx",69,3a,e1,52),273,HX_("psychlua.HScript",62,b6,a1,67),HX_("preset",5f,b3,c0,ae)));
            						}
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_83_preset)
HXDLIN(  83)		 ::psychlua::HScript _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  84)		this->super::preset();
HXLINE(  87)		this->set(HX_("FlxG",b5,4b,97,2e),::hx::ClassOf< ::flixel::FlxG >());
HXLINE(  88)		this->set(HX_("FlxMath",3a,7b,ae,d8),::hx::ClassOf< ::flixel::math::FlxMath >());
HXLINE(  89)		this->set(HX_("FlxSprite",f7,d5,84,45),::hx::ClassOf< ::flixel::FlxSprite >());
HXLINE(  90)		this->set(HX_("FlxCamera",97,40,7b,39),::hx::ClassOf< ::flixel::FlxCamera >());
HXLINE(  91)		this->set(HX_("PsychCamera",20,1a,6b,4a),::hx::ClassOf< ::backend::PsychCamera >());
HXLINE(  92)		this->set(HX_("FlxTimer",13,ca,0f,cd),::hx::ClassOf< ::flixel::util::FlxTimer >());
HXLINE(  93)		this->set(HX_("FlxTween",b9,b4,4a,d6),::hx::ClassOf< ::flixel::tweens::FlxTween >());
HXLINE(  94)		this->set(HX_("FlxEase",60,c5,64,d3),::hx::ClassOf< ::flixel::tweens::FlxEase >());
HXLINE(  95)		this->set(HX_("FlxColor",b1,7b,36,07),::hx::ClassOf< ::psychlua::CustomFlxColor >());
HXLINE(  96)		this->set(HX_("Countdown",91,30,88,0b),::hx::ClassOf< ::backend::Countdown >());
HXLINE(  97)		this->set(HX_("PlayState",5d,83,c2,46),::hx::ClassOf< ::states::PlayState >());
HXLINE(  98)		this->set(HX_("Paths",0e,7b,84,50),::hx::ClassOf< ::backend::Paths >());
HXLINE(  99)		this->set(HX_("Conductor",c7,77,a1,7b),::hx::ClassOf< ::backend::Conductor >());
HXLINE( 100)		this->set(HX_("ClientPrefs",c5,55,e0,8a),::hx::ClassOf< ::backend::ClientPrefs >());
HXLINE( 104)		this->set(HX_("Character",89,bb,a4,e3),::hx::ClassOf< ::objects::Character >());
HXLINE( 105)		this->set(HX_("Alphabet",d3,38,ea,fa),::hx::ClassOf< ::objects::Alphabet >());
HXLINE( 106)		this->set(HX_("Note",12,44,e3,33),::hx::ClassOf< ::objects::Note >());
HXLINE( 107)		this->set(HX_("CustomSubstate",82,cd,df,32),::hx::ClassOf< ::psychlua::CustomSubstate >());
HXLINE( 109)		this->set(HX_("FlxRuntimeShader",6b,22,33,11),::hx::ClassOf< ::flixel::addons::display::FlxRuntimeShader >());
HXLINE( 111)		this->set(HX_("ShaderFilter",dd,08,30,bd),::hx::ClassOf< ::openfl::filters::ShaderFilter >());
HXLINE( 112)		this->set(HX_("StringTools",6a,db,63,03),::hx::ClassOf< ::StringTools >());
HXLINE( 114)		this->set(HX_("FlxAnimate",6f,94,78,a9),::hx::ClassOf< ::flxanimate::FlxAnimate >());
HXLINE( 118)		this->set(HX_("setVar",65,6c,71,6f), ::Dynamic(new _hx_Closure_0()));
HXLINE( 122)		this->set(HX_("getVar",f1,17,29,a3), ::Dynamic(new _hx_Closure_1()));
HXLINE( 127)		this->set(HX_("removeVar",03,fd,f4,ca), ::Dynamic(new _hx_Closure_2()));
HXLINE( 136)		this->set(HX_("debugPrint",da,28,6f,c7), ::Dynamic(new _hx_Closure_3()));
HXLINE( 140)		this->set(HX_("getModSetting",24,8b,81,ff), ::Dynamic(new _hx_Closure_4(_gthis)));
HXLINE( 154)		this->set(HX_("keyboardJustPressed",6f,ec,b1,75), ::Dynamic(new _hx_Closure_5()));
HXLINE( 155)		this->set(HX_("keyboardPressed",bb,30,e6,41), ::Dynamic(new _hx_Closure_6()));
HXLINE( 156)		this->set(HX_("keyboardReleased",84,80,5a,6e), ::Dynamic(new _hx_Closure_7()));
HXLINE( 158)		this->set(HX_("anyGamepadJustPressed",c1,00,a5,a2), ::Dynamic(new _hx_Closure_8()));
HXLINE( 159)		this->set(HX_("anyGamepadPressed",0d,34,40,4f), ::Dynamic(new _hx_Closure_9()));
HXLINE( 160)		this->set(HX_("anyGamepadReleased",f2,64,c3,0f), ::Dynamic(new _hx_Closure_10()));
HXLINE( 162)		this->set(HX_("gamepadAnalogX",87,a1,7a,a9), ::Dynamic(new _hx_Closure_11()));
HXLINE( 169)		this->set(HX_("gamepadAnalogY",88,a1,7a,a9), ::Dynamic(new _hx_Closure_12()));
HXLINE( 176)		this->set(HX_("gamepadJustPressed",b5,b6,c3,ba), ::Dynamic(new _hx_Closure_13()));
HXLINE( 183)		this->set(HX_("gamepadPressed",01,e0,e7,04), ::Dynamic(new _hx_Closure_14()));
HXLINE( 190)		this->set(HX_("gamepadReleased",7e,2e,d2,4c), ::Dynamic(new _hx_Closure_15()));
HXLINE( 198)		this->set(HX_("keyJustPressed",77,d2,b7,cd), ::Dynamic(new _hx_Closure_16()));
HXLINE( 209)		this->set(HX_("keyPressed",c3,72,6e,a8), ::Dynamic(new _hx_Closure_17()));
HXLINE( 220)		this->set(HX_("keyReleased",7c,05,0c,bf), ::Dynamic(new _hx_Closure_18()));
HXLINE( 235)		this->set(HX_("createGlobalCallback",64,de,db,36), ::Dynamic(new _hx_Closure_19()));
HXLINE( 245)		this->set(HX_("createCallback",e1,18,41,d1), ::Dynamic(new _hx_Closure_20(_gthis)));
HXLINE( 254)		this->set(HX_("addHaxeLibrary",d4,92,3b,4b), ::Dynamic(new _hx_Closure_21(_gthis)));
HXLINE( 277)		this->set(HX_("parentLua",ae,22,50,7f),this->parentLua);
HXLINE( 281)		this->set(HX_("this",5e,06,fc,4c),::hx::ObjectPtr<OBJ_>(this));
HXLINE( 282)		this->set(HX_("game",f2,f3,5e,44),::flixel::FlxG_obj::game->_state);
HXLINE( 284)		this->set(HX_("buildTarget",1f,d9,5d,d7),::psychlua::LuaUtils_obj::getBuildTarget());
HXLINE( 285)		this->set(HX_("customSubstate",62,39,8a,88),::psychlua::CustomSubstate_obj::instance);
HXLINE( 286)		this->set(HX_("customSubstateName",cd,30,b8,0d),::psychlua::CustomSubstate_obj::name);
HXLINE( 288)		this->set(HX_("Function_Stop",c9,a5,e8,d3),::psychlua::LuaUtils_obj::Function_Stop);
HXLINE( 289)		this->set(HX_("Function_Continue",ae,85,11,8b),::psychlua::LuaUtils_obj::Function_Continue);
HXLINE( 290)		this->set(HX_("Function_StopLua",6f,6f,62,22),::psychlua::LuaUtils_obj::Function_StopLua);
HXLINE( 291)		this->set(HX_("Function_StopHScript",ca,bd,3f,93),::psychlua::LuaUtils_obj::Function_StopHScript);
HXLINE( 292)		this->set(HX_("Function_StopAll",d8,0e,5a,22),::psychlua::LuaUtils_obj::Function_StopAll);
HXLINE( 294)		this->set(HX_("add",21,f2,49,00),::flixel::FlxG_obj::game->_state->add_dyn());
HXLINE( 295)		this->set(HX_("insert",39,43,dd,9d),::flixel::FlxG_obj::game->_state->insert_dyn());
HXLINE( 296)		this->set(HX_("remove",44,9c,88,04),::flixel::FlxG_obj::game->_state->remove_dyn());
HXLINE( 298)		if (::hx::IsInstanceEq( ::states::PlayState_obj::instance,::flixel::FlxG_obj::game->_state )) {
HXLINE( 300)			this->set(HX_("addBehindGF",9a,c8,d5,d1),::states::PlayState_obj::instance->addBehindGF_dyn());
HXLINE( 301)			this->set(HX_("addBehindDad",4c,8f,37,c9),::states::PlayState_obj::instance->addBehindDad_dyn());
HXLINE( 302)			this->set(HX_("addBehindBF",3f,c4,d5,d1),::states::PlayState_obj::instance->addBehindBF_dyn());
HXLINE( 303)			this->setSpecialObject(::states::PlayState_obj::instance,false,::states::PlayState_obj::instance->instancesExclude);
            		}
HXLINE( 306)		if (::hx::IsNotNull( this->varsToBring )) {
HXLINE( 307)			{
HXLINE( 307)				int _g = 0;
HXDLIN( 307)				::Array< ::String > _g1 = ::Reflect_obj::fields(this->varsToBring);
HXDLIN( 307)				while((_g < _g1->length)){
HXLINE( 307)					::String key = _g1->__get(_g);
HXDLIN( 307)					_g = (_g + 1);
HXLINE( 308)					key = ::StringTools_obj::trim(key);
HXLINE( 309)					 ::Dynamic value = ::Reflect_obj::field(this->varsToBring,key);
HXLINE( 311)					this->set(key,::Reflect_obj::field(this->varsToBring,key));
            				}
            			}
HXLINE( 313)			this->varsToBring = null();
            		}
            	}


 ::Dynamic HScript_obj::executeCode(::String funcToRun,::cpp::VirtualArray funcArgs){
            	HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_317_executeCode)
HXLINE( 318)		if (::hx::IsNull( funcToRun )) {
HXLINE( 318)			return null();
            		}
HXLINE( 320)		if (!(this->exists(funcToRun))) {
HXLINE( 322)			::psychlua::FunkinLua_obj::luaTrace((this->origin + (HX_(" - No HScript function named: ",f0,de,a1,db) + funcToRun)),false,false,-65536);
HXLINE( 326)			return null();
            		}
HXLINE( 329)		 ::Dynamic callValue = this->call(funcToRun,funcArgs);
HXLINE( 330)		if (!(( (bool)(callValue->__Field(HX_("succeeded",61,56,29,fb),::hx::paccDynamic)) ))) {
HXLINE( 332)			 ::haxe::Exception e = Dynamic(  ::Dynamic(callValue->__Field(HX_("exceptions",44,35,34,1d),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::haxe::Exception >();
HXLINE( 333)			if (::hx::IsNotNull( e )) {
HXLINE( 334)				::String msg = ::tea::backend::_SScriptException::SScriptException_Impl__obj::toString(e);
HXLINE( 336)				if (::hx::IsNotNull( this->parentLua )) {
HXLINE( 338)					::psychlua::FunkinLua_obj::luaTrace((((((HX_("",00,00,00,00) + this->origin) + HX_(": ",a6,32,00,00)) + this->parentLua->lastCalledFunction) + HX_(" - ",73,6f,18,00)) + msg),false,false,-65536);
HXLINE( 339)					return null();
            				}
HXLINE( 342)				::states::PlayState_obj::instance->addTextToDebug((((HX_("",00,00,00,00) + this->origin) + HX_(" - ",73,6f,18,00)) + msg),-65536);
            			}
HXLINE( 344)			return null();
            		}
HXLINE( 346)		return callValue;
            	}


HX_DEFINE_DYNAMIC_FUNC2(HScript_obj,executeCode,return )

 ::Dynamic HScript_obj::executeFunction(::String funcToRun,::cpp::VirtualArray funcArgs){
            	HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_349_executeFunction)
HXLINE( 350)		if (::hx::IsNull( funcToRun )) {
HXLINE( 350)			return null();
            		}
HXLINE( 351)		return this->call(funcToRun,funcArgs);
            	}


HX_DEFINE_DYNAMIC_FUNC2(HScript_obj,executeFunction,return )

void HScript_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_432_destroy)
HXLINE( 433)		this->origin = null();
HXLINE( 434)		this->parentLua = null();
HXLINE( 436)		this->super::destroy();
            	}


void HScript_obj::initHaxeModule( ::psychlua::FunkinLua parent){
            	HX_GC_STACKFRAME(&_hx_pos_22ae5a7ed167d885_22_initHaxeModule)
HXDLIN(  22)		if (::hx::IsNull( parent->hscript )) {
HXLINE(  24)			::haxe::Log_obj::trace((HX_("initializing haxe interp for: ",8a,18,b6,6f) + parent->scriptName),::hx::SourceInfo(HX_("source/psychlua/HScript.hx",69,3a,e1,52),24,HX_("psychlua.HScript",62,b6,a1,67),HX_("initHaxeModule",a2,30,89,5d)));
HXLINE(  25)			parent->hscript =  ::psychlua::HScript_obj::__alloc( HX_CTX ,parent,null(),null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HScript_obj,initHaxeModule,(void))

void HScript_obj::initHaxeModuleCode( ::psychlua::FunkinLua parent,::String code, ::Dynamic varsToBring){
            	HX_GC_STACKFRAME(&_hx_pos_22ae5a7ed167d885_30_initHaxeModuleCode)
HXLINE(  31)		 ::psychlua::HScript hs;
HXDLIN(  31)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  31)			hs = parent->hscript;
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(  31)				hs = null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  32)		if (::hx::IsNull( hs )) {
HXLINE(  34)			::haxe::Log_obj::trace((HX_("initializing haxe interp for: ",8a,18,b6,6f) + parent->scriptName),::hx::SourceInfo(HX_("source/psychlua/HScript.hx",69,3a,e1,52),34,HX_("psychlua.HScript",62,b6,a1,67),HX_("initHaxeModuleCode",ef,06,69,05)));
HXLINE(  35)			parent->hscript =  ::psychlua::HScript_obj::__alloc( HX_CTX ,parent,code,varsToBring);
            		}
            		else {
HXLINE(  39)			hs->doString(code,null());
HXLINE(  41)			if (::hx::IsNotNull( hs->parsingException )) {
HXLINE(  43)				 ::states::PlayState _hx_tmp = ::states::PlayState_obj::instance;
HXDLIN(  43)				::String _hx_tmp1 = ((HX_("ERROR ON LOADING (",9b,0e,50,9a) + hs->origin) + HX_("): ",0f,4f,1f,00));
HXDLIN(  43)				_hx_tmp->addTextToDebug((_hx_tmp1 + ::tea::backend::_SScriptException::SScriptException_Impl__obj::get_message(hs->parsingException)),-65536);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(HScript_obj,initHaxeModuleCode,(void))

void HScript_obj::implement( ::psychlua::FunkinLua funk){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::psychlua::FunkinLua,funk) HXARGC(4)
            		 ::Dynamic _hx_run(::String codeToRun, ::Dynamic varsToBring,::String funcToRun,::cpp::VirtualArray funcArgs){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_356_implement)
HXLINE( 358)			::psychlua::HScript_obj::initHaxeModuleCode(funk,codeToRun,varsToBring);
HXLINE( 359)			 ::Dynamic retVal = funk->hscript->executeCode(funcToRun,funcArgs);
HXLINE( 360)			if (::hx::IsNotNull( retVal )) {
HXLINE( 361)				if (( (bool)(retVal->__Field(HX_("succeeded",61,56,29,fb),::hx::paccDynamic)) )) {
HXLINE( 362)					bool _hx_tmp;
HXDLIN( 362)					if (::hx::IsNotNull( retVal->__Field(HX_("returnValue",a1,4c,95,3e),::hx::paccDynamic) )) {
HXLINE( 362)						_hx_tmp = ::psychlua::LuaUtils_obj::isOfTypes( ::Dynamic(retVal->__Field(HX_("returnValue",a1,4c,95,3e),::hx::paccDynamic)),::cpp::VirtualArray_obj::__new(5)->init(0,::hx::ClassOf< bool >())->init(1,::hx::ClassOf< int >())->init(2,::hx::ClassOf< ::Float >())->init(3,::hx::ClassOf< ::String >())->init(4,::hx::ArrayBase::__mClass));
            					}
            					else {
HXLINE( 362)						_hx_tmp = true;
            					}
HXDLIN( 362)					if (_hx_tmp) {
HXLINE( 362)						return  ::Dynamic(retVal->__Field(HX_("returnValue",a1,4c,95,3e),::hx::paccDynamic));
            					}
            					else {
HXLINE( 362)						return null();
            					}
            				}
HXLINE( 364)				 ::haxe::Exception e = Dynamic(  ::Dynamic(retVal->__Field(HX_("exceptions",44,35,34,1d),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::haxe::Exception >();
HXLINE( 365)				::String calledFunc;
HXDLIN( 365)				if ((funk->hscript->origin == funk->lastCalledFunction)) {
HXLINE( 365)					calledFunc = funcToRun;
            				}
            				else {
HXLINE( 365)					calledFunc = funk->lastCalledFunction;
            				}
HXLINE( 366)				if (::hx::IsNotNull( e )) {
HXLINE( 367)					::String _hx_tmp1 = (((funk->hscript->origin + HX_(":",3a,00,00,00)) + calledFunc) + HX_(" - ",73,6f,18,00));
HXDLIN( 367)					::String _hx_tmp2;
HXDLIN( 367)					if (::hx::IsNull( e )) {
HXLINE( 367)						_hx_tmp2 = HX_("null",87,9e,0e,49);
            					}
            					else {
HXLINE( 367)						_hx_tmp2 = ::tea::backend::_SScriptException::SScriptException_Impl__obj::toString(e);
            					}
HXDLIN( 367)					::psychlua::FunkinLua_obj::luaTrace((_hx_tmp1 + _hx_tmp2),false,false,-65536);
            				}
HXLINE( 368)				return null();
            			}
            			else {
HXLINE( 370)				if (::hx::IsNotNull( funk->hscript->returnValue )) {
HXLINE( 372)					return funk->hscript->returnValue;
            				}
            			}
HXLINE( 377)			return null();
            		}
            		HX_END_LOCAL_FUNC4(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::psychlua::FunkinLua,funk) HXARGC(2)
            		 ::Dynamic _hx_run(::String funcToRun,::cpp::VirtualArray funcArgs){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_380_implement)
HXLINE( 382)			 ::Dynamic callValue = funk->hscript->executeFunction(funcToRun,funcArgs);
HXLINE( 383)			if (!(( (bool)(callValue->__Field(HX_("succeeded",61,56,29,fb),::hx::paccDynamic)) ))) {
HXLINE( 385)				 ::haxe::Exception e = Dynamic(  ::Dynamic(callValue->__Field(HX_("exceptions",44,35,34,1d),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::haxe::Exception >();
HXLINE( 386)				if (::hx::IsNotNull( e )) {
HXLINE( 387)					::String _hx_tmp = ( (::String)(((((HX_("ERROR (",b0,59,de,69) + funk->hscript->origin) + HX_(": ",a6,32,00,00)) + callValue->__Field(HX_("calledFunction",b5,00,41,03),::hx::paccDynamic)) + HX_(") - ",ea,2e,32,1b))) );
HXDLIN( 387)					::String _hx_tmp1 = ::tea::backend::_SScriptException::SScriptException_Impl__obj::get_message(e);
HXDLIN( 387)					::psychlua::FunkinLua_obj::luaTrace((_hx_tmp + _hx_tmp1.substr(0,::tea::backend::_SScriptException::SScriptException_Impl__obj::get_message(e).indexOf(HX_("\n",0a,00,00,00),null()))),false,false,-65536);
            				}
HXLINE( 388)				return null();
            			}
            			else {
HXLINE( 391)				return  ::Dynamic(callValue->__Field(HX_("returnValue",a1,4c,95,3e),::hx::paccDynamic));
            			}
HXLINE( 383)			return null();
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::psychlua::FunkinLua,funk) HXARGC(2)
            		void _hx_run(::String libName,::String __o_libPackage){
            		::String libPackage = __o_libPackage;
            		if (::hx::IsNull(__o_libPackage)) libPackage = HX_("",00,00,00,00);
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_397_implement)
HXLINE( 398)			::String str = HX_("",00,00,00,00);
HXLINE( 399)			if ((libPackage.length > 0)) {
HXLINE( 400)				str = (libPackage + HX_(".",2e,00,00,00));
            			}
            			else {
HXLINE( 401)				if (::hx::IsNull( libName )) {
HXLINE( 402)					libName = HX_("",00,00,00,00);
            				}
            			}
HXLINE( 404)			 ::Dynamic c = ::Type_obj::resolveClass((str + libName));
HXLINE( 405)			if (::hx::IsNull( c )) {
HXLINE( 406)				c = ::Type_obj::resolveEnum((str + libName));
            			}
HXLINE( 409)			if (::hx::IsNotNull( c )) {
HXLINE( 410)				 ::Dynamic v = c;
HXDLIN( 410)				::tea::SScript_obj::globalVariables->set(libName,v);
HXDLIN( 410)				::String key = libName;
HXDLIN( 410)				 ::Dynamic value = v;
HXDLIN( 410)				{
HXLINE( 410)					 ::Dynamic i = ::tea::SScript_obj::global->iterator();
HXDLIN( 410)					while(( (bool)(i->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 410)						 ::tea::SScript i1 = ( ( ::tea::SScript)(i->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 410)						if (!(i1->_destroyed)) {
HXLINE( 410)							i1->set(key,value);
            						}
            					}
            				}
            			}
HXLINE( 414)			if (::hx::IsNotNull( funk->hscript )) {
HXLINE( 416)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 417)					if (::hx::IsNotNull( c )) {
HXLINE( 418)						funk->hscript->set(libName,c);
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
HXLINE( 420)						{
HXLINE( 420)							null();
            						}
HXDLIN( 420)						 ::Dynamic e = _g;
HXLINE( 421)						{
HXLINE( 421)							::String _hx_tmp = (((funk->hscript->origin + HX_(":",3a,00,00,00)) + funk->lastCalledFunction) + HX_(" - ",73,6f,18,00));
HXDLIN( 421)							::psychlua::FunkinLua_obj::luaTrace((_hx_tmp + ::Std_obj::string(e)),false,false,-65536);
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_355_implement)
HXLINE( 356)		funk->addLocalCallback(HX_("runHaxeCode",de,82,8b,0f), ::Dynamic(new _hx_Closure_0(funk)));
HXLINE( 380)		funk->addLocalCallback(HX_("runHaxeFunction",49,a9,42,e6), ::Dynamic(new _hx_Closure_1(funk)));
HXLINE( 397)		funk->addLocalCallback(HX_("addHaxeLibrary",d4,92,3b,4b), ::Dynamic(new _hx_Closure_2(funk)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HScript_obj,implement,(void))


::hx::ObjectPtr< HScript_obj > HScript_obj::__new( ::Dynamic parent,::String file, ::Dynamic varsToBring) {
	::hx::ObjectPtr< HScript_obj > __this = new HScript_obj();
	__this->__construct(parent,file,varsToBring);
	return __this;
}

::hx::ObjectPtr< HScript_obj > HScript_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic parent,::String file, ::Dynamic varsToBring) {
	HScript_obj *__this = (HScript_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(HScript_obj), true, "psychlua.HScript"));
	*(void **)__this = HScript_obj::_hx_vtable;
	__this->__construct(parent,file,varsToBring);
	return __this;
}

HScript_obj::HScript_obj()
{
}

void HScript_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(HScript);
	HX_MARK_MEMBER_NAME(modFolder,"modFolder");
	HX_MARK_MEMBER_NAME(parentLua,"parentLua");
	HX_MARK_MEMBER_NAME(origin,"origin");
	HX_MARK_MEMBER_NAME(varsToBring,"varsToBring");
	 ::tea::SScript_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void HScript_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(modFolder,"modFolder");
	HX_VISIT_MEMBER_NAME(parentLua,"parentLua");
	HX_VISIT_MEMBER_NAME(origin,"origin");
	HX_VISIT_MEMBER_NAME(varsToBring,"varsToBring");
	 ::tea::SScript_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val HScript_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"origin") ) { return ::hx::Val( origin ); }
		if (HX_FIELD_EQ(inName,"preset") ) { return ::hx::Val( preset_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"modFolder") ) { return ::hx::Val( modFolder ); }
		if (HX_FIELD_EQ(inName,"parentLua") ) { return ::hx::Val( parentLua ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"varsToBring") ) { return ::hx::Val( varsToBring ); }
		if (HX_FIELD_EQ(inName,"executeCode") ) { return ::hx::Val( executeCode_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"executeFunction") ) { return ::hx::Val( executeFunction_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool HScript_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"implement") ) { outValue = implement_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"initHaxeModule") ) { outValue = initHaxeModule_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"initHaxeModuleCode") ) { outValue = initHaxeModuleCode_dyn(); return true; }
	}
	return false;
}

::hx::Val HScript_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"origin") ) { origin=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"modFolder") ) { modFolder=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parentLua") ) { parentLua=inValue.Cast<  ::psychlua::FunkinLua >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"varsToBring") ) { varsToBring=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void HScript_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("modFolder",10,7f,30,0a));
	outFields->push(HX_("parentLua",ae,22,50,7f));
	outFields->push(HX_("origin",e6,19,01,4b));
	outFields->push(HX_("varsToBring",4b,8f,ab,36));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo HScript_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(HScript_obj,modFolder),HX_("modFolder",10,7f,30,0a)},
	{::hx::fsObject /*  ::psychlua::FunkinLua */ ,(int)offsetof(HScript_obj,parentLua),HX_("parentLua",ae,22,50,7f)},
	{::hx::fsString,(int)offsetof(HScript_obj,origin),HX_("origin",e6,19,01,4b)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(HScript_obj,varsToBring),HX_("varsToBring",4b,8f,ab,36)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *HScript_obj_sStaticStorageInfo = 0;
#endif

static ::String HScript_obj_sMemberFields[] = {
	HX_("modFolder",10,7f,30,0a),
	HX_("parentLua",ae,22,50,7f),
	HX_("origin",e6,19,01,4b),
	HX_("varsToBring",4b,8f,ab,36),
	HX_("preset",5f,b3,c0,ae),
	HX_("executeCode",02,a6,34,09),
	HX_("executeFunction",6d,2e,26,29),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

::hx::Class HScript_obj::__mClass;

static ::String HScript_obj_sStaticFields[] = {
	HX_("initHaxeModule",a2,30,89,5d),
	HX_("initHaxeModuleCode",ef,06,69,05),
	HX_("implement",a3,71,3f,af),
	::String(null())
};

void HScript_obj::__register()
{
	HScript_obj _hx_dummy;
	HScript_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("psychlua.HScript",62,b6,a1,67);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &HScript_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(HScript_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(HScript_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< HScript_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HScript_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HScript_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace psychlua
