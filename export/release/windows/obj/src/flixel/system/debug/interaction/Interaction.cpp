// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_debug_FlxDebugger
#include <flixel/system/debug/FlxDebugger.h>
#endif
#ifndef INCLUDED_flixel_system_debug_GraphicInteractive
#include <flixel/system/debug/GraphicInteractive.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_Interaction
#include <flixel/system/debug/interaction/Interaction.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Eraser
#include <flixel/system/debug/interaction/tools/Eraser.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Mover
#include <flixel/system/debug/interaction/tools/Mover.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Pointer
#include <flixel/system/debug/interaction/tools/Pointer.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_ToggleBounds
#include <flixel/system/debug/interaction/tools/ToggleBounds.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Tool
#include <flixel/system/debug/interaction/tools/Tool.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Transform
#include <flixel/system/debug/interaction/tools/Transform.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd
#include <flixel/system/frontEnds/DebuggerFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SignalFrontEnd
#include <flixel/system/frontEnds/SignalFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_system_ui_FlxSystemButton
#include <flixel/system/ui/FlxSystemButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal0
#include <flixel/util/_FlxSignal/FlxSignal0.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_35_new,"flixel.system.debug.interaction.Interaction","new",0xfa21d580,"flixel.system.debug.interaction.Interaction.new","flixel/system/debug/interaction/Interaction.hx",35,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_111_handleDebuggerVisibilityChanged,"flixel.system.debug.interaction.Interaction","handleDebuggerVisibilityChanged",0x3dea5c39,"flixel.system.debug.interaction.Interaction.handleDebuggerVisibilityChanged","flixel/system/debug/interaction/Interaction.hx",111,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_118_updateMouse,"flixel.system.debug.interaction.Interaction","updateMouse",0x7f05a47c,"flixel.system.debug.interaction.Interaction.updateMouse","flixel/system/debug/interaction/Interaction.hx",118,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_154_handleMouseClick,"flixel.system.debug.interaction.Interaction","handleMouseClick",0x6baf608b,"flixel.system.debug.interaction.Interaction.handleMouseClick","flixel/system/debug/interaction/Interaction.hx",154,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_170_belongsToDebugger,"flixel.system.debug.interaction.Interaction","belongsToDebugger",0x14e3d9d0,"flixel.system.debug.interaction.Interaction.belongsToDebugger","flixel/system/debug/interaction/Interaction.hx",170,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_179_handleMouseInDebugger,"flixel.system.debug.interaction.Interaction","handleMouseInDebugger",0xefc0f203,"flixel.system.debug.interaction.Interaction.handleMouseInDebugger","flixel/system/debug/interaction/Interaction.hx",179,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_195_handleKeyEvent,"flixel.system.debug.interaction.Interaction","handleKeyEvent",0xda0964a3,"flixel.system.debug.interaction.Interaction.handleKeyEvent","flixel/system/debug/interaction/Interaction.hx",195,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_205_countToolsWithUIButton,"flixel.system.debug.interaction.Interaction","countToolsWithUIButton",0x77bd6f38,"flixel.system.debug.interaction.Interaction.countToolsWithUIButton","flixel/system/debug/interaction/Interaction.hx",205,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_226_addTool,"flixel.system.debug.interaction.Interaction","addTool",0xefc5b339,"flixel.system.debug.interaction.Interaction.addTool","flixel/system/debug/interaction/Interaction.hx",226,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_254_removeTool,"flixel.system.debug.interaction.Interaction","removeTool",0xe89b749c,"flixel.system.debug.interaction.Interaction.removeTool","flixel/system/debug/interaction/Interaction.hx",254,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_296_autoResize,"flixel.system.debug.interaction.Interaction","autoResize",0x92c149a3,"flixel.system.debug.interaction.Interaction.autoResize","flixel/system/debug/interaction/Interaction.hx",296,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_300_resizeByTotal,"flixel.system.debug.interaction.Interaction","resizeByTotal",0x96f143f9,"flixel.system.debug.interaction.Interaction.resizeByTotal","flixel/system/debug/interaction/Interaction.hx",300,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_312_destroy,"flixel.system.debug.interaction.Interaction","destroy",0x8b0d421a,"flixel.system.debug.interaction.Interaction.destroy","flixel/system/debug/interaction/Interaction.hx",312,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_344_isActive,"flixel.system.debug.interaction.Interaction","isActive",0xbe5b4430,"flixel.system.debug.interaction.Interaction.isActive","flixel/system/debug/interaction/Interaction.hx",344,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_348_update,"flixel.system.debug.interaction.Interaction","update",0x852f74e9,"flixel.system.debug.interaction.Interaction.update","flixel/system/debug/interaction/Interaction.hx",348,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_366_postDraw,"flixel.system.debug.interaction.Interaction","postDraw",0x505af364,"flixel.system.debug.interaction.Interaction.postDraw","flixel/system/debug/interaction/Interaction.hx",366,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_378_getDebugGraphics,"flixel.system.debug.interaction.Interaction","getDebugGraphics",0xd1fe02a8,"flixel.system.debug.interaction.Interaction.getDebugGraphics","flixel/system/debug/interaction/Interaction.hx",378,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_393_drawItemsSelection,"flixel.system.debug.interaction.Interaction","drawItemsSelection",0xcdd9aa30,"flixel.system.debug.interaction.Interaction.drawItemsSelection","flixel/system/debug/interaction/Interaction.hx",393,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_424_getTool,"flixel.system.debug.interaction.Interaction","getTool",0x860b202e,"flixel.system.debug.interaction.Interaction.getTool","flixel/system/debug/interaction/Interaction.hx",424,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_432_toggleVisible,"flixel.system.debug.interaction.Interaction","toggleVisible",0x4f15685e,"flixel.system.debug.interaction.Interaction.toggleVisible","flixel/system/debug/interaction/Interaction.hx",432,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_444_registerCustomCursor,"flixel.system.debug.interaction.Interaction","registerCustomCursor",0xf323974a,"flixel.system.debug.interaction.Interaction.registerCustomCursor","flixel/system/debug/interaction/Interaction.hx",444,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_465_updateCustomCursors,"flixel.system.debug.interaction.Interaction","updateCustomCursors",0x218c1283,"flixel.system.debug.interaction.Interaction.updateCustomCursors","flixel/system/debug/interaction/Interaction.hx",465,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_505_saveSystemCursorInfo,"flixel.system.debug.interaction.Interaction","saveSystemCursorInfo",0x622efa70,"flixel.system.debug.interaction.Interaction.saveSystemCursorInfo","flixel/system/debug/interaction/Interaction.hx",505,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_513_restoreSystemCursor,"flixel.system.debug.interaction.Interaction","restoreSystemCursor",0x6747acb3,"flixel.system.debug.interaction.Interaction.restoreSystemCursor","flixel/system/debug/interaction/Interaction.hx",513,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_522_setActiveTool,"flixel.system.debug.interaction.Interaction","setActiveTool",0x92d80fa0,"flixel.system.debug.interaction.Interaction.setActiveTool","flixel/system/debug/interaction/Interaction.hx",522,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_560_setSystemCursorVisibility,"flixel.system.debug.interaction.Interaction","setSystemCursorVisibility",0x3bad5fb9,"flixel.system.debug.interaction.Interaction.setSystemCursorVisibility","flixel/system/debug/interaction/Interaction.hx",560,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_568_setToolsCursorVisibility,"flixel.system.debug.interaction.Interaction","setToolsCursorVisibility",0x9dd4e861,"flixel.system.debug.interaction.Interaction.setToolsCursorVisibility","flixel/system/debug/interaction/Interaction.hx",568,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_586_clearSelection,"flixel.system.debug.interaction.Interaction","clearSelection",0x1e241bdf,"flixel.system.debug.interaction.Interaction.clearSelection","flixel/system/debug/interaction/Interaction.hx",586,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_591_keyPressed,"flixel.system.debug.interaction.Interaction","keyPressed",0xc6e951a3,"flixel.system.debug.interaction.Interaction.keyPressed","flixel/system/debug/interaction/Interaction.hx",591,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_595_keyJustPressed,"flixel.system.debug.interaction.Interaction","keyJustPressed",0x9fbba157,"flixel.system.debug.interaction.Interaction.keyJustPressed","flixel/system/debug/interaction/Interaction.hx",595,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_608_isInUse,"flixel.system.debug.interaction.Interaction","isInUse",0xc115fe38,"flixel.system.debug.interaction.Interaction.isInUse","flixel/system/debug/interaction/Interaction.hx",608,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_619_getItemsWithinState,"flixel.system.debug.interaction.Interaction","getItemsWithinState",0xad6f5c5c,"flixel.system.debug.interaction.Interaction.getItemsWithinState","flixel/system/debug/interaction/Interaction.hx",619,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_632_findItemsWithinState,"flixel.system.debug.interaction.Interaction","findItemsWithinState",0x412153bf,"flixel.system.debug.interaction.Interaction.findItemsWithinState","flixel/system/debug/interaction/Interaction.hx",632,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_645_addItemsWithinState,"flixel.system.debug.interaction.Interaction","addItemsWithinState",0x4d7fd3e7,"flixel.system.debug.interaction.Interaction.addItemsWithinState","flixel/system/debug/interaction/Interaction.hx",645,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_659_getTopItemWithinState,"flixel.system.debug.interaction.Interaction","getTopItemWithinState",0xdc0bf894,"flixel.system.debug.interaction.Interaction.getTopItemWithinState","flixel/system/debug/interaction/Interaction.hx",659,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_679_findItemsWithinArea,"flixel.system.debug.interaction.Interaction","findItemsWithinArea",0xfd927d9f,"flixel.system.debug.interaction.Interaction.findItemsWithinArea","flixel/system/debug/interaction/Interaction.hx",679,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_694_addItemsWithinArea,"flixel.system.debug.interaction.Interaction","addItemsWithinArea",0x47193a77,"flixel.system.debug.interaction.Interaction.addItemsWithinArea","flixel/system/debug/interaction/Interaction.hx",694,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_726_getTopItemWithinArea,"flixel.system.debug.interaction.Interaction","getTopItemWithinArea",0x81230a6a,"flixel.system.debug.interaction.Interaction.getTopItemWithinArea","flixel/system/debug/interaction/Interaction.hx",726,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_37_boot,"flixel.system.debug.interaction.Interaction","boot",0xdb91fb12,"flixel.system.debug.interaction.Interaction.boot","flixel/system/debug/interaction/Interaction.hx",37,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_38_boot,"flixel.system.debug.interaction.Interaction","boot",0xdb91fb12,"flixel.system.debug.interaction.Interaction.boot","flixel/system/debug/interaction/Interaction.hx",38,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_39_boot,"flixel.system.debug.interaction.Interaction","boot",0xdb91fb12,"flixel.system.debug.interaction.Interaction.boot","flixel/system/debug/interaction/Interaction.hx",39,0x4548a912)
namespace flixel{
namespace _hx_system{
namespace debug{
namespace interaction{

void Interaction_obj::__construct( ::openfl::display::Sprite container){
            	HX_GC_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_35_new)
HXLINE(  77)		this->_flixelPointer =  ::flixel::input::FlxPointer_obj::__alloc( HX_CTX );
HXLINE(  76)		this->_debuggerInteraction = false;
HXLINE(  73)		this->_keysUp =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  72)		this->_keysDown =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  71)		this->_turn = 2;
HXLINE(  70)		this->_tools = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  65)		this->macKeyboard = false;
HXLINE(  54)		this->shouldDrawItemsSelection = true;
HXLINE(  47)		this->pointerPressed = false;
HXLINE(  46)		this->pointerJustReleased = false;
HXLINE(  45)		this->pointerJustPressed = false;
HXLINE(  44)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  44)		point->_inPool = false;
HXDLIN(  44)		this->flixelPointer = point;
HXLINE(  42)		this->selectedItems =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  81)		super::__construct(HX_("Tools",fb,01,5c,a7), ::flixel::_hx_system::debug::GraphicInteractive_obj::__alloc( HX_CTX ,0,0,null(),null()),40,25,false,null(),null(),null());
HXLINE(  82)		this->reposition(( (Float)(2) ),( (Float)(100) ));
HXLINE(  83)		this->_container = container;
HXLINE(  85)		this->_customCursor =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  86)		this->_customCursor->mouseEnabled = false;
HXLINE(  87)		this->_container->addChild(this->_customCursor);
HXLINE(  90)		this->addTool( ::flixel::_hx_system::debug::interaction::tools::Pointer_obj::__alloc( HX_CTX ));
HXLINE(  91)		this->addTool( ::flixel::_hx_system::debug::interaction::tools::Mover_obj::__alloc( HX_CTX ));
HXLINE(  92)		this->addTool( ::flixel::_hx_system::debug::interaction::tools::Eraser_obj::__alloc( HX_CTX ));
HXLINE(  93)		this->addTool( ::flixel::_hx_system::debug::interaction::tools::Transform_obj::__alloc( HX_CTX ));
HXLINE(  94)		this->addTool( ::flixel::_hx_system::debug::interaction::tools::ToggleBounds_obj::__alloc( HX_CTX ));
HXLINE(  96)		::flixel::FlxG_obj::signals->postDraw->add(this->postDraw_dyn());
HXLINE(  97)		::flixel::FlxG_obj::debugger->visibilityChanged->add(this->handleDebuggerVisibilityChanged_dyn());
HXLINE(  99)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->updateMouse_dyn(),null(),null(),null());
HXLINE( 100)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->handleMouseClick_dyn(),null(),null(),null());
HXLINE( 101)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->handleMouseClick_dyn(),null(),null(),null());
HXLINE( 102)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->handleKeyEvent_dyn(),null(),null(),null());
HXLINE( 103)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyUp",da,b9,fe,de),this->handleKeyEvent_dyn(),null(),null(),null());
HXLINE( 105)		this->_container->addEventListener(HX_("mouseOver",19,4a,0d,f6),this->handleMouseInDebugger_dyn(),null(),null(),null());
HXLINE( 106)		this->_container->addEventListener(HX_("mouseOut",69,e7,1d,a4),this->handleMouseInDebugger_dyn(),null(),null(),null());
            	}

Dynamic Interaction_obj::__CreateEmpty() { return new Interaction_obj; }

void *Interaction_obj::_hx_vtable = 0;

Dynamic Interaction_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Interaction_obj > _hx_result = new Interaction_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Interaction_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x39123ef8) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x39123ef8;
		}
	} else {
		if (inClassId<=(int)0x5af6f2c8) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x5af6f2c8;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void Interaction_obj::handleDebuggerVisibilityChanged(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_111_handleDebuggerVisibilityChanged)
HXDLIN( 111)		if (::flixel::FlxG_obj::debugger->visible) {
HXLINE( 112)			this->saveSystemCursorInfo();
            		}
            		else {
HXLINE( 114)			this->restoreSystemCursor();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,handleDebuggerVisibilityChanged,(void))

void Interaction_obj::updateMouse( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_118_updateMouse)
HXLINE( 124)		Float offsetX = ((Float)0.0);
HXLINE( 125)		Float offsetY = ((Float)0.0);
HXLINE( 129)		if (::hx::IsNotNull( this->activeTool )) {
HXLINE( 131)			 ::openfl::display::BitmapData cursorIcon = this->activeTool->cursor;
HXLINE( 132)			if (::hx::IsNotNull( cursorIcon )) {
HXLINE( 134)				offsetX = ((( (Float)(cursorIcon->width) ) / ::flixel::FlxG_obj::scaleMode->scale->x) / ( (Float)(2) ));
HXLINE( 135)				offsetY = ((( (Float)(cursorIcon->height) ) / ::flixel::FlxG_obj::scaleMode->scale->y) / ( (Float)(2) ));
            			}
            		}
HXLINE( 139)		this->_customCursor->set_x((event->stageX + offsetX));
HXLINE( 140)		this->_customCursor->set_y((event->stageY + offsetY));
HXLINE( 144)		{
HXLINE( 144)			 ::flixel::input::FlxPointer _this = this->_flixelPointer;
HXDLIN( 144)			Float newY = event->stageY;
HXDLIN( 144)			_this->_globalScreenX = ::Std_obj::_hx_int((event->stageX / ::flixel::FlxG_obj::scaleMode->scale->x));
HXDLIN( 144)			_this->_globalScreenY = ::Std_obj::_hx_int((newY / ::flixel::FlxG_obj::scaleMode->scale->y));
HXDLIN( 144)			_this->updatePositions();
            		}
HXLINE( 148)		this->flixelPointer->set_x((this->_flixelPointer->x + offsetX));
HXLINE( 149)		this->flixelPointer->set_y((this->_flixelPointer->y + offsetY));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,updateMouse,(void))

void Interaction_obj::handleMouseClick( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_154_handleMouseClick)
HXLINE( 157)		bool _hx_tmp;
HXDLIN( 157)		if ((event->type == HX_("mouseDown",27,b1,c2,ee))) {
HXLINE( 157)			_hx_tmp = this->belongsToDebugger(( ( ::openfl::display::DisplayObject)(event->target) ));
            		}
            		else {
HXLINE( 157)			_hx_tmp = false;
            		}
HXDLIN( 157)		if (_hx_tmp) {
HXLINE( 158)			return;
            		}
HXLINE( 160)		this->pointerJustPressed = (event->type == HX_("mouseDown",27,b1,c2,ee));
HXLINE( 161)		this->pointerJustReleased = (event->type == HX_("mouseUp",e0,f3,72,c0));
HXLINE( 163)		if (this->pointerJustPressed) {
HXLINE( 164)			this->pointerPressed = true;
            		}
            		else {
HXLINE( 165)			if (this->pointerJustReleased) {
HXLINE( 166)				this->pointerPressed = false;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,handleMouseClick,(void))

bool Interaction_obj::belongsToDebugger( ::openfl::display::DisplayObject object){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_170_belongsToDebugger)
HXLINE( 171)		if (::hx::IsNull( object )) {
HXLINE( 172)			return false;
            		}
            		else {
HXLINE( 173)			if (::Std_obj::isOfType(object,::hx::ClassOf< ::flixel::_hx_system::debug::FlxDebugger >())) {
HXLINE( 174)				return true;
            			}
            		}
HXLINE( 175)		return this->belongsToDebugger(object->parent);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,belongsToDebugger,return )

void Interaction_obj::handleMouseInDebugger( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_179_handleMouseInDebugger)
HXLINE( 182)		if (!(this->isActive())) {
HXLINE( 183)			return;
            		}
HXLINE( 185)		if ((event->type == HX_("mouseOver",19,4a,0d,f6))) {
HXLINE( 186)			this->_debuggerInteraction = true;
            		}
            		else {
HXLINE( 187)			if ((event->type == HX_("mouseOut",69,e7,1d,a4))) {
HXLINE( 188)				this->_debuggerInteraction = false;
            			}
            		}
HXLINE( 190)		event->stopPropagation();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,handleMouseInDebugger,(void))

void Interaction_obj::handleKeyEvent( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_195_handleKeyEvent)
HXDLIN( 195)		if ((event->type == HX_("keyDown",a1,69,47,9c))) {
HXLINE( 196)			this->_keysDown->set(event->keyCode,true);
            		}
            		else {
HXLINE( 197)			if ((event->type == HX_("keyUp",da,b9,fe,de))) {
HXLINE( 199)				this->_keysDown->set(event->keyCode,false);
HXLINE( 200)				this->_keysUp->set(event->keyCode,this->_turn);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,handleKeyEvent,(void))

int Interaction_obj::countToolsWithUIButton(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_205_countToolsWithUIButton)
HXLINE( 206)		int count = 0;
HXLINE( 207)		{
HXLINE( 207)			int _g = 0;
HXDLIN( 207)			::Array< ::Dynamic> _g1 = this->_tools;
HXDLIN( 207)			while((_g < _g1->length)){
HXLINE( 207)				 ::flixel::_hx_system::debug::interaction::tools::Tool tool = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::debug::interaction::tools::Tool >();
HXDLIN( 207)				_g = (_g + 1);
HXLINE( 208)				if (::hx::IsNotNull( tool->button )) {
HXLINE( 209)					count = (count + 1);
            				}
            			}
            		}
HXLINE( 210)		return count;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,countToolsWithUIButton,return )

void Interaction_obj::addTool( ::flixel::_hx_system::debug::interaction::tools::Tool tool){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_226_addTool)
HXLINE( 227)		tool->init(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 228)		this->_tools->push(tool);
HXLINE( 231)		 ::flixel::_hx_system::ui::FlxSystemButton button = tool->button;
HXLINE( 232)		if (::hx::IsNull( button )) {
HXLINE( 233)			return;
            		}
HXLINE( 235)		int buttons = this->countToolsWithUIButton();
HXLINE( 236)		int row = ::Math_obj::ceil((( (Float)(buttons) ) / ( (Float)(2) )));
HXLINE( 237)		int column = ::hx::Mod((buttons - 1),2);
HXLINE( 239)		button->set_x(( (Float)((10 + (column * 25))) ));
HXLINE( 240)		button->set_y(( (Float)((20 * row)) ));
HXLINE( 242)		this->addChild(button);
HXLINE( 243)		{
HXLINE( 243)			int spacing = 25;
HXDLIN( 243)			int padding = 10;
HXDLIN( 243)			int rows = ::Math_obj::ceil((( (Float)(buttons) ) / ( (Float)(2) )));
HXDLIN( 243)			Float columns = ::Math_obj::min(( (Float)(buttons) ),( (Float)(2) ));
HXDLIN( 243)			this->resize(((( (Float)(spacing) ) * columns) + padding),( (Float)(((spacing * rows) + padding)) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,addTool,(void))

void Interaction_obj::removeTool( ::flixel::_hx_system::debug::interaction::tools::Tool tool){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_254_removeTool)
HXLINE( 255)		if (!(this->_tools->contains(tool))) {
HXLINE( 256)			return;
            		}
HXLINE( 259)		if (::hx::IsNull( tool->button )) {
HXLINE( 261)			this->_tools->remove(tool);
HXLINE( 262)			return;
            		}
HXLINE( 266)		int index = this->_tools->indexOf(tool,null());
HXLINE( 267)		Float prevX = tool->button->get_x();
HXLINE( 268)		Float prevY = tool->button->get_y();
HXLINE( 270)		this->_tools->remove(tool);
HXLINE( 271)		this->removeChild(tool->button);
HXLINE( 273)		while((index < this->_tools->length)){
HXLINE( 275)			 ::flixel::_hx_system::debug::interaction::tools::Tool tool1 = this->_tools->__get(index).StaticCast<  ::flixel::_hx_system::debug::interaction::tools::Tool >();
HXLINE( 276)			if (::hx::IsNotNull( tool1->button )) {
HXLINE( 279)				Float tempX = tool1->button->get_x();
HXLINE( 280)				Float tempY = tool1->button->get_y();
HXLINE( 282)				tool1->button->set_x(prevX);
HXLINE( 283)				tool1->button->set_y(prevY);
HXLINE( 285)				prevX = tempX;
HXLINE( 286)				prevY = tempY;
            			}
HXLINE( 288)			index = (index + 1);
            		}
HXLINE( 291)		{
HXLINE( 291)			int total = this->countToolsWithUIButton();
HXDLIN( 291)			int spacing = 25;
HXDLIN( 291)			int padding = 10;
HXDLIN( 291)			int rows = ::Math_obj::ceil((( (Float)(total) ) / ( (Float)(2) )));
HXDLIN( 291)			Float columns = ::Math_obj::min(( (Float)(total) ),( (Float)(2) ));
HXDLIN( 291)			this->resize(((( (Float)(spacing) ) * columns) + padding),( (Float)(((spacing * rows) + padding)) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,removeTool,(void))

void Interaction_obj::autoResize(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_296_autoResize)
HXDLIN( 296)		int total = this->countToolsWithUIButton();
HXDLIN( 296)		int spacing = 25;
HXDLIN( 296)		int padding = 10;
HXDLIN( 296)		int rows = ::Math_obj::ceil((( (Float)(total) ) / ( (Float)(2) )));
HXDLIN( 296)		Float columns = ::Math_obj::min(( (Float)(total) ),( (Float)(2) ));
HXDLIN( 296)		this->resize(((( (Float)(spacing) ) * columns) + padding),( (Float)(((spacing * rows) + padding)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,autoResize,(void))

void Interaction_obj::resizeByTotal(int total){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_300_resizeByTotal)
HXLINE( 301)		int spacing = 25;
HXLINE( 302)		int padding = 10;
HXLINE( 303)		int rows = ::Math_obj::ceil((( (Float)(total) ) / ( (Float)(2) )));
HXLINE( 304)		Float columns = ::Math_obj::min(( (Float)(total) ),( (Float)(2) ));
HXLINE( 305)		this->resize(((( (Float)(spacing) ) * columns) + padding),( (Float)(((spacing * rows) + padding)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,resizeByTotal,(void))

void Interaction_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_312_destroy)
HXLINE( 313)		::flixel::FlxG_obj::signals->postDraw->remove(this->postDraw_dyn());
HXLINE( 314)		::flixel::FlxG_obj::debugger->visibilityChanged->remove(this->handleDebuggerVisibilityChanged_dyn());
HXLINE( 316)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->updateMouse_dyn(),null());
HXLINE( 317)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("mouseDown",27,b1,c2,ee),this->handleMouseClick_dyn(),null());
HXLINE( 318)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->handleMouseClick_dyn(),null());
HXLINE( 319)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->handleKeyEvent_dyn(),null());
HXLINE( 320)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->handleKeyEvent_dyn(),null());
HXLINE( 322)		if (::hx::IsNotNull( this->_container )) {
HXLINE( 324)			this->_container->removeEventListener(HX_("mouseOver",19,4a,0d,f6),this->handleMouseInDebugger_dyn(),null());
HXLINE( 325)			this->_container->removeEventListener(HX_("mouseOut",69,e7,1d,a4),this->handleMouseInDebugger_dyn(),null());
            		}
HXLINE( 328)		if (::hx::IsNotNull( this->_customCursor )) {
HXLINE( 330)			this->_customCursor->parent->removeChild(this->_customCursor);
HXLINE( 331)			this->_customCursor = null();
            		}
HXLINE( 334)		this->_tools = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->_tools);
HXLINE( 335)		this->selectedItems = ( ( ::flixel::group::FlxTypedGroup)(::flixel::util::FlxDestroyUtil_obj::destroy(this->selectedItems)) );
HXLINE( 336)		this->flixelPointer = ( ( ::flixel::math::FlxBasePoint)(::flixel::util::FlxDestroyUtil_obj::destroy(this->flixelPointer)) );
HXLINE( 338)		this->_keysDown = null();
HXLINE( 339)		this->_keysUp = null();
            	}


bool Interaction_obj::isActive(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_344_isActive)
HXDLIN( 344)		if (::flixel::FlxG_obj::debugger->visible) {
HXDLIN( 344)			return this->get_visible();
            		}
            		else {
HXDLIN( 344)			return false;
            		}
HXDLIN( 344)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,isActive,return )

void Interaction_obj::update(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_348_update)
HXLINE( 349)		if (!(this->isActive())) {
HXLINE( 350)			return;
            		}
HXLINE( 352)		this->updateCustomCursors();
HXLINE( 354)		{
HXLINE( 354)			int _g = 0;
HXDLIN( 354)			::Array< ::Dynamic> _g1 = this->_tools;
HXDLIN( 354)			while((_g < _g1->length)){
HXLINE( 354)				 ::flixel::_hx_system::debug::interaction::tools::Tool tool = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::debug::interaction::tools::Tool >();
HXDLIN( 354)				_g = (_g + 1);
HXLINE( 355)				tool->update();
            			}
            		}
HXLINE( 357)		this->pointerJustPressed = false;
HXLINE( 358)		this->pointerJustReleased = false;
HXLINE( 359)		this->_turn++;
            	}


void Interaction_obj::postDraw(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_366_postDraw)
HXLINE( 367)		if (!(this->isActive())) {
HXLINE( 368)			return;
            		}
HXLINE( 370)		{
HXLINE( 370)			int _g = 0;
HXDLIN( 370)			::Array< ::Dynamic> _g1 = this->_tools;
HXDLIN( 370)			while((_g < _g1->length)){
HXLINE( 370)				 ::flixel::_hx_system::debug::interaction::tools::Tool tool = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::debug::interaction::tools::Tool >();
HXDLIN( 370)				_g = (_g + 1);
HXLINE( 371)				tool->draw();
            			}
            		}
HXLINE( 373)		if (this->shouldDrawItemsSelection) {
HXLINE( 374)			this->drawItemsSelection();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,postDraw,(void))

 ::openfl::display::Graphics Interaction_obj::getDebugGraphics(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_378_getDebugGraphics)
HXLINE( 379)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 381)			::flixel::util::FlxSpriteUtil_obj::flashGfx->clear();
HXLINE( 382)			return ::flixel::util::FlxSpriteUtil_obj::flashGfx;
            		}
HXLINE( 389)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,getDebugGraphics,return )

void Interaction_obj::drawItemsSelection(){
            	HX_GC_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_393_drawItemsSelection)
HXLINE( 394)		 ::openfl::display::Graphics gfx = this->getDebugGraphics();
HXLINE( 395)		if (::hx::IsNull( gfx )) {
HXLINE( 396)			return;
            		}
HXLINE( 398)		{
HXLINE( 398)			 ::Dynamic filter = null();
HXDLIN( 398)			 ::flixel::group::FlxTypedGroupIterator member =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->selectedItems->members,filter);
HXDLIN( 398)			while(member->hasNext()){
HXLINE( 398)				 ::flixel::FlxObject member1 = member->next().StaticCast<  ::flixel::FlxObject >();
HXLINE( 400)				bool _hx_tmp;
HXDLIN( 400)				bool _hx_tmp1;
HXDLIN( 400)				if (::hx::IsNotNull( member1 )) {
HXLINE( 400)					_hx_tmp1 = ::hx::IsNotNull( member1->scrollFactor );
            				}
            				else {
HXLINE( 400)					_hx_tmp1 = false;
            				}
HXDLIN( 400)				if (_hx_tmp1) {
HXLINE( 400)					_hx_tmp = member1->isOnScreen(null());
            				}
            				else {
HXLINE( 400)					_hx_tmp = false;
            				}
HXDLIN( 400)				if (_hx_tmp) {
HXLINE( 402)					Float margin = ((Float)0.5);
HXLINE( 403)					 ::flixel::math::FlxBasePoint scroll = ::flixel::FlxG_obj::camera->scroll;
HXLINE( 405)					gfx->lineStyle(((Float)1.0),16777215,((Float)0.75),null(),null(),null(),null(),null());
HXLINE( 406)					Float _hx_tmp2 = ((member1->x - scroll->x) - margin);
HXDLIN( 406)					Float _hx_tmp3 = ((member1->y - scroll->y) - margin);
HXDLIN( 406)					Float _hx_tmp4 = (member1->get_width() + (margin * ( (Float)(2) )));
HXDLIN( 406)					gfx->drawRect(_hx_tmp2,_hx_tmp3,_hx_tmp4,(member1->get_height() + (margin * ( (Float)(2) ))));
            				}
            			}
            		}
HXLINE( 411)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 412)			::flixel::FlxG_obj::camera->buffer->draw(::flixel::util::FlxSpriteUtil_obj::flashGfxSprite,null(),null(),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,drawItemsSelection,(void))

 ::flixel::_hx_system::debug::interaction::tools::Tool Interaction_obj::getTool(::hx::Class className){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_424_getTool)
HXLINE( 425)		{
HXLINE( 425)			int _g = 0;
HXDLIN( 425)			::Array< ::Dynamic> _g1 = this->_tools;
HXDLIN( 425)			while((_g < _g1->length)){
HXLINE( 425)				 ::flixel::_hx_system::debug::interaction::tools::Tool tool = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::debug::interaction::tools::Tool >();
HXDLIN( 425)				_g = (_g + 1);
HXLINE( 426)				if (::Std_obj::isOfType(tool,className)) {
HXLINE( 427)					return tool;
            				}
            			}
            		}
HXLINE( 428)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,getTool,return )

void Interaction_obj::toggleVisible(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_432_toggleVisible)
HXLINE( 433)		this->super::toggleVisible();
HXLINE( 435)		if (!(this->get_visible())) {
HXLINE( 438)			this->setActiveTool(null());
HXLINE( 439)			this->restoreSystemCursor();
            		}
            	}


void Interaction_obj::registerCustomCursor(::String name, ::openfl::display::BitmapData icon){
            	HX_GC_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_444_registerCustomCursor)
HXLINE( 445)		if (::hx::IsNull( icon )) {
HXLINE( 446)			return;
            		}
HXLINE( 451)		 ::openfl::display::Sprite sprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 452)		sprite->set_visible(false);
HXLINE( 453)		sprite->set_name(name);
HXLINE( 454)		sprite->addChild( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,icon,null(),null()));
HXLINE( 455)		this->_customCursor->addChild(sprite);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interaction_obj,registerCustomCursor,(void))

void Interaction_obj::updateCustomCursors(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_465_updateCustomCursors)
HXDLIN( 465)		bool _hx_tmp;
HXDLIN( 465)		if (::hx::IsNotNull( this->activeTool )) {
HXDLIN( 465)			_hx_tmp = !(this->_debuggerInteraction);
            		}
            		else {
HXDLIN( 465)			_hx_tmp = false;
            		}
HXDLIN( 465)		if (_hx_tmp) {
HXLINE( 468)			if (::hx::IsNotNull( this->activeTool->cursor )) {
HXLINE( 471)				::String cursorInUse;
HXDLIN( 471)				if ((this->activeTool->cursorInUse == HX_("",00,00,00,00))) {
HXLINE( 471)					cursorInUse = this->activeTool->getName();
            				}
            				else {
HXLINE( 471)					cursorInUse = this->activeTool->cursorInUse;
            				}
HXLINE( 479)				{
HXLINE( 479)					int _g = 0;
HXDLIN( 479)					int _g1 = this->_customCursor->get_numChildren();
HXDLIN( 479)					while((_g < _g1)){
HXLINE( 479)						_g = (_g + 1);
HXDLIN( 479)						int i = (_g - 1);
HXLINE( 481)						 ::openfl::display::DisplayObject sprite = this->_customCursor->getChildAt(i);
HXLINE( 482)						sprite->set_visible((sprite->get_name() == cursorInUse));
            					}
            				}
HXLINE( 484)				if (::flixel::FlxG_obj::mouse->visible) {
HXLINE( 485)					::flixel::FlxG_obj::mouse->set_visible(false);
            				}
            			}
            			else {
HXLINE( 492)				::flixel::FlxG_obj::mouse->set_useSystemCursor(true);
            			}
            		}
            		else {
HXLINE( 499)			::flixel::FlxG_obj::mouse->set_useSystemCursor(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,updateCustomCursors,(void))

void Interaction_obj::saveSystemCursorInfo(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_505_saveSystemCursorInfo)
HXLINE( 507)		this->_wasMouseVisible = ::flixel::FlxG_obj::mouse->visible;
HXLINE( 508)		this->_wasUsingSystemCursor = ::flixel::FlxG_obj::mouse->useSystemCursor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,saveSystemCursorInfo,(void))

void Interaction_obj::restoreSystemCursor(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_513_restoreSystemCursor)
HXLINE( 515)		::flixel::FlxG_obj::mouse->set_useSystemCursor(this->_wasUsingSystemCursor);
HXLINE( 516)		::flixel::FlxG_obj::mouse->set_visible(this->_wasMouseVisible);
HXLINE( 517)		this->_customCursor->set_visible(false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,restoreSystemCursor,(void))

void Interaction_obj::setActiveTool( ::flixel::_hx_system::debug::interaction::tools::Tool value){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_522_setActiveTool)
HXLINE( 523)		if (::hx::IsNotNull( this->activeTool )) {
HXLINE( 525)			this->activeTool->deactivate();
HXLINE( 526)			this->activeTool->button->set_toggled(true);
            		}
HXLINE( 531)		if (::hx::IsInstanceEq( this->activeTool,value )) {
HXLINE( 532)			value = null();
            		}
HXLINE( 534)		this->activeTool = value;
HXLINE( 536)		if (::hx::IsNotNull( this->activeTool )) {
HXLINE( 539)			this->setToolsCursorVisibility(true);
HXLINE( 541)			this->activeTool->button->set_toggled(false);
HXLINE( 542)			this->activeTool->activate();
HXLINE( 543)			this->updateCustomCursors();
            		}
            		else {
HXLINE( 549)			this->setSystemCursorVisibility(true);
            		}
HXLINE( 555)		::flixel::FlxG_obj::mouse->enabled = !(this->isInUse());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,setActiveTool,(void))

void Interaction_obj::setSystemCursorVisibility(bool status){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_560_setSystemCursorVisibility)
HXLINE( 562)		::flixel::FlxG_obj::mouse->set_useSystemCursor(status);
HXLINE( 564)		this->_customCursor->set_visible(!(status));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,setSystemCursorVisibility,(void))

void Interaction_obj::setToolsCursorVisibility(bool status){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_568_setToolsCursorVisibility)
HXLINE( 570)		::flixel::FlxG_obj::mouse->set_useSystemCursor(false);
HXLINE( 572)		this->_customCursor->set_visible(status);
HXLINE( 574)		if (status) {
HXLINE( 575)			return;
            		}
HXLINE( 580)		{
HXLINE( 580)			int _g = 0;
HXDLIN( 580)			int _g1 = this->_customCursor->get_numChildren();
HXDLIN( 580)			while((_g < _g1)){
HXLINE( 580)				_g = (_g + 1);
HXDLIN( 580)				int i = (_g - 1);
HXLINE( 581)				this->_customCursor->getChildAt(i)->set_visible(false);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,setToolsCursorVisibility,(void))

void Interaction_obj::clearSelection(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_586_clearSelection)
HXDLIN( 586)		this->selectedItems->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,clearSelection,(void))

bool Interaction_obj::keyPressed(int key){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_591_keyPressed)
HXDLIN( 591)		return this->_keysDown->get_bool(key);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,keyPressed,return )

bool Interaction_obj::keyJustPressed(int key){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_595_keyJustPressed)
HXLINE( 596)		int value;
HXDLIN( 596)		if (::hx::IsNull( this->_keysUp->get(key) )) {
HXLINE( 596)			value = 0;
            		}
            		else {
HXLINE( 596)			value = this->_keysUp->get_int(key);
            		}
HXLINE( 597)		return ((this->_turn - value) == 1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,keyJustPressed,return )

bool Interaction_obj::isInUse(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_608_isInUse)
HXDLIN( 608)		bool _hx_tmp;
HXDLIN( 608)		if (::flixel::FlxG_obj::debugger->visible) {
HXDLIN( 608)			_hx_tmp = this->get_visible();
            		}
            		else {
HXDLIN( 608)			_hx_tmp = false;
            		}
HXDLIN( 608)		if (_hx_tmp) {
HXDLIN( 608)			return ::hx::IsNotNull( this->activeTool );
            		}
            		else {
HXDLIN( 608)			return false;
            		}
HXDLIN( 608)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,isInUse,return )

::Array< ::Dynamic> Interaction_obj::getItemsWithinState( ::flixel::FlxState state, ::flixel::math::FlxRect area){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_619_getItemsWithinState)
HXLINE( 620)		::Array< ::Dynamic> items = ::Array_obj< ::Dynamic>::__new();
HXLINE( 622)		this->addItemsWithinArea(items,state->members,area);
HXLINE( 623)		if (::hx::IsNotNull( state->subState )) {
HXLINE( 624)			this->addItemsWithinState(items,state->subState,area);
            		}
HXLINE( 626)		return items;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interaction_obj,getItemsWithinState,return )

void Interaction_obj::findItemsWithinState(::Array< ::Dynamic> items, ::flixel::FlxState state, ::flixel::math::FlxRect area){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_632_findItemsWithinState)
HXDLIN( 632)		this->addItemsWithinState(items,state,area);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interaction_obj,findItemsWithinState,(void))

void Interaction_obj::addItemsWithinState(::Array< ::Dynamic> items, ::flixel::FlxState state, ::flixel::math::FlxRect area){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_645_addItemsWithinState)
HXLINE( 646)		this->addItemsWithinArea(items,state->members,area);
HXLINE( 647)		if (::hx::IsNotNull( state->subState )) {
HXLINE( 648)			this->addItemsWithinState(items,state->subState,area);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interaction_obj,addItemsWithinState,(void))

 ::flixel::FlxObject Interaction_obj::getTopItemWithinState( ::flixel::FlxState state, ::flixel::math::FlxRect area){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_659_getTopItemWithinState)
HXLINE( 660)		if (::hx::IsNotNull( state->subState )) {
HXLINE( 661)			return this->getTopItemWithinState(state->subState,area);
            		}
HXLINE( 663)		return this->getTopItemWithinArea(state->members,area);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interaction_obj,getTopItemWithinState,return )

void Interaction_obj::findItemsWithinArea(::Array< ::Dynamic> items,::Array< ::Dynamic> members, ::flixel::math::FlxRect area){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_679_findItemsWithinArea)
HXDLIN( 679)		this->addItemsWithinArea(items,members,area);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interaction_obj,findItemsWithinArea,(void))

void Interaction_obj::addItemsWithinArea(::Array< ::Dynamic> items,::Array< ::Dynamic> members, ::flixel::math::FlxRect area){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_694_addItemsWithinArea)
HXLINE( 696)		int i = members->length;
HXLINE( 697)		while(true){
HXLINE( 697)			i = (i - 1);
HXDLIN( 697)			if (!(((i + 1) > 0))) {
HXLINE( 697)				goto _hx_goto_44;
            			}
HXLINE( 699)			 ::flixel::FlxBasic member = members->__get(i).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 701)			bool _hx_tmp;
HXDLIN( 701)			bool _hx_tmp1;
HXDLIN( 701)			if (::hx::IsNotNull( member )) {
HXLINE( 701)				_hx_tmp1 = !(member->visible);
            			}
            			else {
HXLINE( 701)				_hx_tmp1 = true;
            			}
HXDLIN( 701)			if (!(_hx_tmp1)) {
HXLINE( 701)				_hx_tmp = !(member->exists);
            			}
            			else {
HXLINE( 701)				_hx_tmp = true;
            			}
HXDLIN( 701)			if (_hx_tmp) {
HXLINE( 702)				continue;
            			}
HXLINE( 704)			 ::flixel::group::FlxTypedGroup group = ::flixel::group::FlxTypedGroup_obj::resolveGroup(member);
HXLINE( 705)			if (::hx::IsNotNull( group )) {
HXLINE( 706)				this->addItemsWithinArea(items,group->members,area);
            			}
            			else {
HXLINE( 707)				if (::Std_obj::isOfType(member,::hx::ClassOf< ::flixel::FlxObject >())) {
HXLINE( 709)					 ::flixel::FlxObject object = ( ( ::flixel::FlxObject)(member) );
HXLINE( 710)					 ::flixel::math::FlxRect Rect = object->getHitbox(null());
HXDLIN( 710)					bool result;
HXDLIN( 710)					bool result1;
HXDLIN( 710)					bool result2;
HXDLIN( 710)					if (((Rect->x + Rect->width) > area->x)) {
HXLINE( 710)						result2 = (Rect->x < (area->x + area->width));
            					}
            					else {
HXLINE( 710)						result2 = false;
            					}
HXDLIN( 710)					if (result2) {
HXLINE( 710)						result1 = ((Rect->y + Rect->height) > area->y);
            					}
            					else {
HXLINE( 710)						result1 = false;
            					}
HXDLIN( 710)					if (result1) {
HXLINE( 710)						result = (Rect->y < (area->y + area->height));
            					}
            					else {
HXLINE( 710)						result = false;
            					}
HXDLIN( 710)					if (Rect->_weak) {
HXLINE( 710)						if (!(Rect->_inPool)) {
HXLINE( 710)							Rect->_inPool = true;
HXDLIN( 710)							Rect->_weak = false;
HXDLIN( 710)							::flixel::math::FlxRect_obj::_pool->putUnsafe(Rect);
            						}
            					}
HXDLIN( 710)					if (result) {
HXLINE( 711)						items->push(object);
            					}
            				}
            			}
            		}
            		_hx_goto_44:;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interaction_obj,addItemsWithinArea,(void))

 ::flixel::FlxObject Interaction_obj::getTopItemWithinArea(::Array< ::Dynamic> members, ::flixel::math::FlxRect area){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_726_getTopItemWithinArea)
HXLINE( 728)		int i = members->length;
HXLINE( 729)		while(true){
HXLINE( 729)			i = (i - 1);
HXDLIN( 729)			if (!(((i + 1) > 0))) {
HXLINE( 729)				goto _hx_goto_46;
            			}
HXLINE( 731)			 ::flixel::FlxBasic member = members->__get(i).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 733)			bool _hx_tmp;
HXDLIN( 733)			bool _hx_tmp1;
HXDLIN( 733)			if (::hx::IsNotNull( member )) {
HXLINE( 733)				_hx_tmp1 = !(member->visible);
            			}
            			else {
HXLINE( 733)				_hx_tmp1 = true;
            			}
HXDLIN( 733)			if (!(_hx_tmp1)) {
HXLINE( 733)				_hx_tmp = !(member->exists);
            			}
            			else {
HXLINE( 733)				_hx_tmp = true;
            			}
HXDLIN( 733)			if (_hx_tmp) {
HXLINE( 734)				continue;
            			}
HXLINE( 736)			 ::flixel::group::FlxTypedGroup group = ::flixel::group::FlxTypedGroup_obj::resolveGroup(member);
HXLINE( 737)			if (::hx::IsNotNull( group )) {
HXLINE( 738)				return this->getTopItemWithinArea(group->members,area);
            			}
HXLINE( 740)			if (::Std_obj::isOfType(member,::hx::ClassOf< ::flixel::FlxObject >())) {
HXLINE( 742)				 ::flixel::FlxObject object = ( ( ::flixel::FlxObject)(member) );
HXLINE( 743)				 ::flixel::math::FlxRect Rect = object->getHitbox(null());
HXDLIN( 743)				bool result;
HXDLIN( 743)				bool result1;
HXDLIN( 743)				bool result2;
HXDLIN( 743)				if (((Rect->x + Rect->width) > area->x)) {
HXLINE( 743)					result2 = (Rect->x < (area->x + area->width));
            				}
            				else {
HXLINE( 743)					result2 = false;
            				}
HXDLIN( 743)				if (result2) {
HXLINE( 743)					result1 = ((Rect->y + Rect->height) > area->y);
            				}
            				else {
HXLINE( 743)					result1 = false;
            				}
HXDLIN( 743)				if (result1) {
HXLINE( 743)					result = (Rect->y < (area->y + area->height));
            				}
            				else {
HXLINE( 743)					result = false;
            				}
HXDLIN( 743)				if (Rect->_weak) {
HXLINE( 743)					if (!(Rect->_inPool)) {
HXLINE( 743)						Rect->_inPool = true;
HXDLIN( 743)						Rect->_weak = false;
HXDLIN( 743)						::flixel::math::FlxRect_obj::_pool->putUnsafe(Rect);
            					}
            				}
HXDLIN( 743)				if (result) {
HXLINE( 744)					return object;
            				}
            			}
            		}
            		_hx_goto_46:;
HXLINE( 747)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interaction_obj,getTopItemWithinArea,return )

int Interaction_obj::BUTTONS_PER_LINE;

int Interaction_obj::SPACING;

int Interaction_obj::PADDING;


::hx::ObjectPtr< Interaction_obj > Interaction_obj::__new( ::openfl::display::Sprite container) {
	::hx::ObjectPtr< Interaction_obj > __this = new Interaction_obj();
	__this->__construct(container);
	return __this;
}

::hx::ObjectPtr< Interaction_obj > Interaction_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::display::Sprite container) {
	Interaction_obj *__this = (Interaction_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Interaction_obj), true, "flixel.system.debug.interaction.Interaction"));
	*(void **)__this = Interaction_obj::_hx_vtable;
	__this->__construct(container);
	return __this;
}

Interaction_obj::Interaction_obj()
{
}

void Interaction_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Interaction);
	HX_MARK_MEMBER_NAME(activeTool,"activeTool");
	HX_MARK_MEMBER_NAME(selectedItems,"selectedItems");
	HX_MARK_MEMBER_NAME(flixelPointer,"flixelPointer");
	HX_MARK_MEMBER_NAME(pointerJustPressed,"pointerJustPressed");
	HX_MARK_MEMBER_NAME(pointerJustReleased,"pointerJustReleased");
	HX_MARK_MEMBER_NAME(pointerPressed,"pointerPressed");
	HX_MARK_MEMBER_NAME(shouldDrawItemsSelection,"shouldDrawItemsSelection");
	HX_MARK_MEMBER_NAME(macKeyboard,"macKeyboard");
	HX_MARK_MEMBER_NAME(_container,"_container");
	HX_MARK_MEMBER_NAME(_customCursor,"_customCursor");
	HX_MARK_MEMBER_NAME(_tools,"_tools");
	HX_MARK_MEMBER_NAME(_turn,"_turn");
	HX_MARK_MEMBER_NAME(_keysDown,"_keysDown");
	HX_MARK_MEMBER_NAME(_keysUp,"_keysUp");
	HX_MARK_MEMBER_NAME(_wasMouseVisible,"_wasMouseVisible");
	HX_MARK_MEMBER_NAME(_wasUsingSystemCursor,"_wasUsingSystemCursor");
	HX_MARK_MEMBER_NAME(_debuggerInteraction,"_debuggerInteraction");
	HX_MARK_MEMBER_NAME(_flixelPointer,"_flixelPointer");
	 ::flixel::_hx_system::debug::Window_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Interaction_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(activeTool,"activeTool");
	HX_VISIT_MEMBER_NAME(selectedItems,"selectedItems");
	HX_VISIT_MEMBER_NAME(flixelPointer,"flixelPointer");
	HX_VISIT_MEMBER_NAME(pointerJustPressed,"pointerJustPressed");
	HX_VISIT_MEMBER_NAME(pointerJustReleased,"pointerJustReleased");
	HX_VISIT_MEMBER_NAME(pointerPressed,"pointerPressed");
	HX_VISIT_MEMBER_NAME(shouldDrawItemsSelection,"shouldDrawItemsSelection");
	HX_VISIT_MEMBER_NAME(macKeyboard,"macKeyboard");
	HX_VISIT_MEMBER_NAME(_container,"_container");
	HX_VISIT_MEMBER_NAME(_customCursor,"_customCursor");
	HX_VISIT_MEMBER_NAME(_tools,"_tools");
	HX_VISIT_MEMBER_NAME(_turn,"_turn");
	HX_VISIT_MEMBER_NAME(_keysDown,"_keysDown");
	HX_VISIT_MEMBER_NAME(_keysUp,"_keysUp");
	HX_VISIT_MEMBER_NAME(_wasMouseVisible,"_wasMouseVisible");
	HX_VISIT_MEMBER_NAME(_wasUsingSystemCursor,"_wasUsingSystemCursor");
	HX_VISIT_MEMBER_NAME(_debuggerInteraction,"_debuggerInteraction");
	HX_VISIT_MEMBER_NAME(_flixelPointer,"_flixelPointer");
	 ::flixel::_hx_system::debug::Window_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Interaction_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_turn") ) { return ::hx::Val( _turn ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_tools") ) { return ::hx::Val( _tools ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_keysUp") ) { return ::hx::Val( _keysUp ); }
		if (HX_FIELD_EQ(inName,"addTool") ) { return ::hx::Val( addTool_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTool") ) { return ::hx::Val( getTool_dyn() ); }
		if (HX_FIELD_EQ(inName,"isInUse") ) { return ::hx::Val( isInUse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isActive") ) { return ::hx::Val( isActive_dyn() ); }
		if (HX_FIELD_EQ(inName,"postDraw") ) { return ::hx::Val( postDraw_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_keysDown") ) { return ::hx::Val( _keysDown ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"activeTool") ) { return ::hx::Val( activeTool ); }
		if (HX_FIELD_EQ(inName,"_container") ) { return ::hx::Val( _container ); }
		if (HX_FIELD_EQ(inName,"removeTool") ) { return ::hx::Val( removeTool_dyn() ); }
		if (HX_FIELD_EQ(inName,"autoResize") ) { return ::hx::Val( autoResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyPressed") ) { return ::hx::Val( keyPressed_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"macKeyboard") ) { return ::hx::Val( macKeyboard ); }
		if (HX_FIELD_EQ(inName,"updateMouse") ) { return ::hx::Val( updateMouse_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectedItems") ) { return ::hx::Val( selectedItems ); }
		if (HX_FIELD_EQ(inName,"flixelPointer") ) { return ::hx::Val( flixelPointer ); }
		if (HX_FIELD_EQ(inName,"_customCursor") ) { return ::hx::Val( _customCursor ); }
		if (HX_FIELD_EQ(inName,"resizeByTotal") ) { return ::hx::Val( resizeByTotal_dyn() ); }
		if (HX_FIELD_EQ(inName,"toggleVisible") ) { return ::hx::Val( toggleVisible_dyn() ); }
		if (HX_FIELD_EQ(inName,"setActiveTool") ) { return ::hx::Val( setActiveTool_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"pointerPressed") ) { return ::hx::Val( pointerPressed ); }
		if (HX_FIELD_EQ(inName,"_flixelPointer") ) { return ::hx::Val( _flixelPointer ); }
		if (HX_FIELD_EQ(inName,"handleKeyEvent") ) { return ::hx::Val( handleKeyEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearSelection") ) { return ::hx::Val( clearSelection_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyJustPressed") ) { return ::hx::Val( keyJustPressed_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_wasMouseVisible") ) { return ::hx::Val( _wasMouseVisible ); }
		if (HX_FIELD_EQ(inName,"handleMouseClick") ) { return ::hx::Val( handleMouseClick_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDebugGraphics") ) { return ::hx::Val( getDebugGraphics_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"belongsToDebugger") ) { return ::hx::Val( belongsToDebugger_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"pointerJustPressed") ) { return ::hx::Val( pointerJustPressed ); }
		if (HX_FIELD_EQ(inName,"drawItemsSelection") ) { return ::hx::Val( drawItemsSelection_dyn() ); }
		if (HX_FIELD_EQ(inName,"addItemsWithinArea") ) { return ::hx::Val( addItemsWithinArea_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"pointerJustReleased") ) { return ::hx::Val( pointerJustReleased ); }
		if (HX_FIELD_EQ(inName,"updateCustomCursors") ) { return ::hx::Val( updateCustomCursors_dyn() ); }
		if (HX_FIELD_EQ(inName,"restoreSystemCursor") ) { return ::hx::Val( restoreSystemCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"getItemsWithinState") ) { return ::hx::Val( getItemsWithinState_dyn() ); }
		if (HX_FIELD_EQ(inName,"addItemsWithinState") ) { return ::hx::Val( addItemsWithinState_dyn() ); }
		if (HX_FIELD_EQ(inName,"findItemsWithinArea") ) { return ::hx::Val( findItemsWithinArea_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_debuggerInteraction") ) { return ::hx::Val( _debuggerInteraction ); }
		if (HX_FIELD_EQ(inName,"registerCustomCursor") ) { return ::hx::Val( registerCustomCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"saveSystemCursorInfo") ) { return ::hx::Val( saveSystemCursorInfo_dyn() ); }
		if (HX_FIELD_EQ(inName,"findItemsWithinState") ) { return ::hx::Val( findItemsWithinState_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTopItemWithinArea") ) { return ::hx::Val( getTopItemWithinArea_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_wasUsingSystemCursor") ) { return ::hx::Val( _wasUsingSystemCursor ); }
		if (HX_FIELD_EQ(inName,"handleMouseInDebugger") ) { return ::hx::Val( handleMouseInDebugger_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTopItemWithinState") ) { return ::hx::Val( getTopItemWithinState_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"countToolsWithUIButton") ) { return ::hx::Val( countToolsWithUIButton_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"shouldDrawItemsSelection") ) { return ::hx::Val( shouldDrawItemsSelection ); }
		if (HX_FIELD_EQ(inName,"setToolsCursorVisibility") ) { return ::hx::Val( setToolsCursorVisibility_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"setSystemCursorVisibility") ) { return ::hx::Val( setSystemCursorVisibility_dyn() ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"handleDebuggerVisibilityChanged") ) { return ::hx::Val( handleDebuggerVisibilityChanged_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Interaction_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_turn") ) { _turn=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_tools") ) { _tools=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_keysUp") ) { _keysUp=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_keysDown") ) { _keysDown=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"activeTool") ) { activeTool=inValue.Cast<  ::flixel::_hx_system::debug::interaction::tools::Tool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_container") ) { _container=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"macKeyboard") ) { macKeyboard=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectedItems") ) { selectedItems=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flixelPointer") ) { flixelPointer=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_customCursor") ) { _customCursor=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"pointerPressed") ) { pointerPressed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flixelPointer") ) { _flixelPointer=inValue.Cast<  ::flixel::input::FlxPointer >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_wasMouseVisible") ) { _wasMouseVisible=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"pointerJustPressed") ) { pointerJustPressed=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"pointerJustReleased") ) { pointerJustReleased=inValue.Cast< bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_debuggerInteraction") ) { _debuggerInteraction=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_wasUsingSystemCursor") ) { _wasUsingSystemCursor=inValue.Cast< bool >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"shouldDrawItemsSelection") ) { shouldDrawItemsSelection=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Interaction_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("activeTool",3e,24,2c,f6));
	outFields->push(HX_("selectedItems",a5,87,4e,b8));
	outFields->push(HX_("flixelPointer",c1,e9,8f,fe));
	outFields->push(HX_("pointerJustPressed",19,d4,e3,63));
	outFields->push(HX_("pointerJustReleased",66,cf,4b,0a));
	outFields->push(HX_("pointerPressed",65,7b,0c,9c));
	outFields->push(HX_("shouldDrawItemsSelection",63,c0,6a,5d));
	outFields->push(HX_("macKeyboard",56,2a,22,90));
	outFields->push(HX_("_container",02,f1,15,1b));
	outFields->push(HX_("_customCursor",46,78,f4,20));
	outFields->push(HX_("_tools",5c,d9,15,10));
	outFields->push(HX_("_turn",5c,07,17,00));
	outFields->push(HX_("_keysDown",d5,07,2e,5d));
	outFields->push(HX_("_keysUp",0e,a3,71,ae));
	outFields->push(HX_("_wasMouseVisible",17,92,d7,91));
	outFields->push(HX_("_wasUsingSystemCursor",ff,d8,04,e6));
	outFields->push(HX_("_debuggerInteraction",32,64,f1,95));
	outFields->push(HX_("_flixelPointer",02,da,e1,3c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Interaction_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::_hx_system::debug::interaction::tools::Tool */ ,(int)offsetof(Interaction_obj,activeTool),HX_("activeTool",3e,24,2c,f6)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(Interaction_obj,selectedItems),HX_("selectedItems",a5,87,4e,b8)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(Interaction_obj,flixelPointer),HX_("flixelPointer",c1,e9,8f,fe)},
	{::hx::fsBool,(int)offsetof(Interaction_obj,pointerJustPressed),HX_("pointerJustPressed",19,d4,e3,63)},
	{::hx::fsBool,(int)offsetof(Interaction_obj,pointerJustReleased),HX_("pointerJustReleased",66,cf,4b,0a)},
	{::hx::fsBool,(int)offsetof(Interaction_obj,pointerPressed),HX_("pointerPressed",65,7b,0c,9c)},
	{::hx::fsBool,(int)offsetof(Interaction_obj,shouldDrawItemsSelection),HX_("shouldDrawItemsSelection",63,c0,6a,5d)},
	{::hx::fsBool,(int)offsetof(Interaction_obj,macKeyboard),HX_("macKeyboard",56,2a,22,90)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(Interaction_obj,_container),HX_("_container",02,f1,15,1b)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(Interaction_obj,_customCursor),HX_("_customCursor",46,78,f4,20)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Interaction_obj,_tools),HX_("_tools",5c,d9,15,10)},
	{::hx::fsInt,(int)offsetof(Interaction_obj,_turn),HX_("_turn",5c,07,17,00)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(Interaction_obj,_keysDown),HX_("_keysDown",d5,07,2e,5d)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(Interaction_obj,_keysUp),HX_("_keysUp",0e,a3,71,ae)},
	{::hx::fsBool,(int)offsetof(Interaction_obj,_wasMouseVisible),HX_("_wasMouseVisible",17,92,d7,91)},
	{::hx::fsBool,(int)offsetof(Interaction_obj,_wasUsingSystemCursor),HX_("_wasUsingSystemCursor",ff,d8,04,e6)},
	{::hx::fsBool,(int)offsetof(Interaction_obj,_debuggerInteraction),HX_("_debuggerInteraction",32,64,f1,95)},
	{::hx::fsObject /*  ::flixel::input::FlxPointer */ ,(int)offsetof(Interaction_obj,_flixelPointer),HX_("_flixelPointer",02,da,e1,3c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Interaction_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Interaction_obj::BUTTONS_PER_LINE,HX_("BUTTONS_PER_LINE",14,c3,66,87)},
	{::hx::fsInt,(void *) &Interaction_obj::SPACING,HX_("SPACING",63,07,8f,11)},
	{::hx::fsInt,(void *) &Interaction_obj::PADDING,HX_("PADDING",b1,2d,51,50)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Interaction_obj_sMemberFields[] = {
	HX_("activeTool",3e,24,2c,f6),
	HX_("selectedItems",a5,87,4e,b8),
	HX_("flixelPointer",c1,e9,8f,fe),
	HX_("pointerJustPressed",19,d4,e3,63),
	HX_("pointerJustReleased",66,cf,4b,0a),
	HX_("pointerPressed",65,7b,0c,9c),
	HX_("shouldDrawItemsSelection",63,c0,6a,5d),
	HX_("macKeyboard",56,2a,22,90),
	HX_("_container",02,f1,15,1b),
	HX_("_customCursor",46,78,f4,20),
	HX_("_tools",5c,d9,15,10),
	HX_("_turn",5c,07,17,00),
	HX_("_keysDown",d5,07,2e,5d),
	HX_("_keysUp",0e,a3,71,ae),
	HX_("_wasMouseVisible",17,92,d7,91),
	HX_("_wasUsingSystemCursor",ff,d8,04,e6),
	HX_("_debuggerInteraction",32,64,f1,95),
	HX_("_flixelPointer",02,da,e1,3c),
	HX_("handleDebuggerVisibilityChanged",19,e7,a4,01),
	HX_("updateMouse",5c,7f,fd,f1),
	HX_("handleMouseClick",ab,19,f2,35),
	HX_("belongsToDebugger",b0,1c,03,45),
	HX_("handleMouseInDebugger",e3,24,6b,87),
	HX_("handleKeyEvent",c3,95,05,08),
	HX_("countToolsWithUIButton",58,c0,ff,94),
	HX_("addTool",19,9e,3e,89),
	HX_("removeTool",bc,95,20,ca),
	HX_("autoResize",c3,6a,46,74),
	HX_("resizeByTotal",d9,96,bd,9b),
	HX_("destroy",fa,2c,86,24),
	HX_("isActive",50,dd,af,6e),
	HX_("update",09,86,05,87),
	HX_("postDraw",84,8c,af,00),
	HX_("getDebugGraphics",c8,bb,40,9c),
	HX_("drawItemsSelection",50,eb,14,b9),
	HX_("getTool",0e,0b,84,1f),
	HX_("toggleVisible",3e,bb,e1,53),
	HX_("registerCustomCursor",6a,60,89,94),
	HX_("updateCustomCursors",63,cd,29,0a),
	HX_("saveSystemCursorInfo",90,c3,94,03),
	HX_("restoreSystemCursor",93,67,e5,4f),
	HX_("setActiveTool",80,62,a4,97),
	HX_("setSystemCursorVisibility",99,82,1a,f3),
	HX_("setToolsCursorVisibility",81,c1,25,4d),
	HX_("clearSelection",ff,4c,20,4c),
	HX_("keyPressed",c3,72,6e,a8),
	HX_("keyJustPressed",77,d2,b7,cd),
	HX_("isInUse",18,e9,8e,5a),
	HX_("getItemsWithinState",3c,17,0d,96),
	HX_("findItemsWithinState",df,1c,87,e2),
	HX_("addItemsWithinState",c7,8e,1d,36),
	HX_("getTopItemWithinState",74,2b,b6,73),
	HX_("findItemsWithinArea",7f,38,30,e6),
	HX_("addItemsWithinArea",97,7b,54,32),
	HX_("getTopItemWithinArea",8a,d3,88,22),
	::String(null()) };

static void Interaction_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Interaction_obj::BUTTONS_PER_LINE,"BUTTONS_PER_LINE");
	HX_MARK_MEMBER_NAME(Interaction_obj::SPACING,"SPACING");
	HX_MARK_MEMBER_NAME(Interaction_obj::PADDING,"PADDING");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Interaction_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Interaction_obj::BUTTONS_PER_LINE,"BUTTONS_PER_LINE");
	HX_VISIT_MEMBER_NAME(Interaction_obj::SPACING,"SPACING");
	HX_VISIT_MEMBER_NAME(Interaction_obj::PADDING,"PADDING");
};

#endif

::hx::Class Interaction_obj::__mClass;

static ::String Interaction_obj_sStaticFields[] = {
	HX_("BUTTONS_PER_LINE",14,c3,66,87),
	HX_("SPACING",63,07,8f,11),
	HX_("PADDING",b1,2d,51,50),
	::String(null())
};

void Interaction_obj::__register()
{
	Interaction_obj _hx_dummy;
	Interaction_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.system.debug.interaction.Interaction",8e,55,b1,5c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Interaction_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Interaction_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Interaction_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Interaction_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Interaction_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Interaction_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Interaction_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Interaction_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_37_boot)
HXDLIN(  37)		BUTTONS_PER_LINE = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_38_boot)
HXDLIN(  38)		SPACING = 25;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_39_boot)
HXDLIN(  39)		PADDING = 10;
            	}
}

} // end namespace flixel
} // end namespace system
} // end namespace debug
} // end namespace interaction
