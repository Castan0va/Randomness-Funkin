// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_Anchor
#include <flixel/addons/ui/Anchor.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_BorderDef
#include <flixel/addons/ui/BorderDef.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_ButtonLabelStyle
#include <flixel/addons/ui/ButtonLabelStyle.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_CheckStyle
#include <flixel/addons/ui/CheckStyle.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxTypedUIGroup
#include <flixel/addons/ui/FlxTypedUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIBar
#include <flixel/addons/ui/FlxUIBar.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICheckBox
#include <flixel/addons/ui/FlxUICheckBox.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownHeader
#include <flixel/addons/ui/FlxUIDropDownHeader.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownMenu
#include <flixel/addons/ui/FlxUIDropDownMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUILine
#include <flixel/addons/ui/FlxUILine.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUINumericStepper
#include <flixel/addons/ui/FlxUINumericStepper.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIRadioGroup
#include <flixel/addons/ui/FlxUIRadioGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIRegion
#include <flixel/addons/ui/FlxUIRegion.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISpriteButton
#include <flixel/addons/ui/FlxUISpriteButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITileTest
#include <flixel/addons/ui/FlxUITileTest.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITooltipManager
#include <flixel/addons/ui/FlxUITooltipManager.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FontDef
#include <flixel/addons/ui/FontDef.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_LineAxis
#include <flixel/addons/ui/LineAxis.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_Rounding
#include <flixel/addons/ui/Rounding.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_StrNameLabel
#include <flixel/addons/ui/StrNameLabel.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_U
#include <flixel/addons/ui/U.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFireTongue
#include <flixel/addons/ui/interfaces/IFireTongue.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteContainer
#include <flixel/group/FlxTypedSpriteContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_text__FlxText_FlxTextAlign_Impl_
#include <flixel/text/_FlxText/FlxTextAlign_Impl_.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ValueException
#include <haxe/ValueException.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_xml_Printer
#include <haxe/xml/Printer.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_AttribAccess_Impl_
#include <haxe/xml/_Access/AttribAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_HasAttribAccess_Impl_
#include <haxe/xml/_Access/HasAttribAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_HasNodeAccess_Impl_
#include <haxe/xml/_Access/HasNodeAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_NodeAccess_Impl_
#include <haxe/xml/_Access/NodeAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_NodeListAccess_Impl_
#include <haxe/xml/_Access/NodeListAccess_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_57_new,"flixel.addons.ui.FlxUI","new",0x89fff7c7,"flixel.addons.ui.FlxUI.new","flixel/addons/ui/FlxUI.hx",57,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_73_get_isRoot,"flixel.addons.ui.FlxUI","get_isRoot",0x501fc66e,"flixel.addons.ui.FlxUI.get_isRoot","flixel/addons/ui/FlxUI.hx",73,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_87_get_tongue,"flixel.addons.ui.FlxUI","get_tongue",0x7aee5906,"flixel.addons.ui.FlxUI.get_tongue","flixel/addons/ui/FlxUI.hx",87,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_91_set_tongue,"flixel.addons.ui.FlxUI","set_tongue",0x7e6bf77a,"flixel.addons.ui.FlxUI.set_tongue","flixel/addons/ui/FlxUI.hx",91,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_100_set_focus,"flixel.addons.ui.FlxUI","set_focus",0xbe69d6e2,"flixel.addons.ui.FlxUI.set_focus","flixel/addons/ui/FlxUI.hx",100,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_133__tongueSet,"flixel.addons.ui.FlxUI","_tongueSet",0x62471f78,"flixel.addons.ui.FlxUI._tongueSet","flixel/addons/ui/FlxUI.hx",133,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_293_callEvent,"flixel.addons.ui.FlxUI","callEvent",0x94ea5143,"flixel.addons.ui.FlxUI.callEvent","flixel/addons/ui/FlxUI.hx",293,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_298_getEvent,"flixel.addons.ui.FlxUI","getEvent",0xd6447add,"flixel.addons.ui.FlxUI.getEvent","flixel/addons/ui/FlxUI.hx",298,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_318_getRequest,"flixel.addons.ui.FlxUI","getRequest",0x8a6908d2,"flixel.addons.ui.FlxUI.getRequest","flixel/addons/ui/FlxUI.hx",318,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_371_onFocus,"flixel.addons.ui.FlxUI","onFocus",0x59586520,"flixel.addons.ui.FlxUI.onFocus","flixel/addons/ui/FlxUI.hx",371,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_383_setWidgetSuppression,"flixel.addons.ui.FlxUI","setWidgetSuppression",0x343faf06,"flixel.addons.ui.FlxUI.setWidgetSuppression","flixel/addons/ui/FlxUI.hx",383,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_416_onFocusLost,"flixel.addons.ui.FlxUI","onFocusLost",0xfd524b24,"flixel.addons.ui.FlxUI.onFocusLost","flixel/addons/ui/FlxUI.hx",416,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_434_setSuperIndex,"flixel.addons.ui.FlxUI","setSuperIndex",0x53bc1800,"flixel.addons.ui.FlxUI.setSuperIndex","flixel/addons/ui/FlxUI.hx",434,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_438_update,"flixel.addons.ui.FlxUI","update",0x5c40b902,"flixel.addons.ui.FlxUI.update","flixel/addons/ui/FlxUI.hx",438,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_455_toggleShow,"flixel.addons.ui.FlxUI","toggleShow",0xda8bbe2a,"flixel.addons.ui.FlxUI.toggleShow","flixel/addons/ui/FlxUI.hx",455,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_475_showGroup,"flixel.addons.ui.FlxUI","showGroup",0x5b3f47a9,"flixel.addons.ui.FlxUI.showGroup","flixel/addons/ui/FlxUI.hx",475,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_492_showAsset,"flixel.addons.ui.FlxUI","showAsset",0xe783fe5a,"flixel.addons.ui.FlxUI.showAsset","flixel/addons/ui/FlxUI.hx",492,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_515_removeAsset,"flixel.addons.ui.FlxUI","removeAsset",0xe039ad73,"flixel.addons.ui.FlxUI.removeAsset","flixel/addons/ui/FlxUI.hx",515,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_538_addAsset,"flixel.addons.ui.FlxUI","addAsset",0xa03f3348,"flixel.addons.ui.FlxUI.addAsset","flixel/addons/ui/FlxUI.hx",538,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_575_replaceAsset,"flixel.addons.ui.FlxUI","replaceAsset",0xb0d588d5,"flixel.addons.ui.FlxUI.replaceAsset","flixel/addons/ui/FlxUI.hx",575,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_623_destroy,"flixel.addons.ui.FlxUI","destroy",0xe31793e1,"flixel.addons.ui.FlxUI.destroy","flixel/addons/ui/FlxUI.hx",623,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_701_load,"flixel.addons.ui.FlxUI","load",0x34adecdf,"flixel.addons.ui.FlxUI.load","flixel/addons/ui/FlxUI.hx",701,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_982_unparentXML,"flixel.addons.ui.FlxUI","unparentXML",0xc0cc07bb,"flixel.addons.ui.FlxUI.unparentXML","flixel/addons/ui/FlxUI.hx",982,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_986__loadPointSize,"flixel.addons.ui.FlxUI","_loadPointSize",0x3df8fe65,"flixel.addons.ui.FlxUI._loadPointSize","flixel/addons/ui/FlxUI.hx",986,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1009__loadSub,"flixel.addons.ui.FlxUI","_loadSub",0x43431fb4,"flixel.addons.ui.FlxUI._loadSub","flixel/addons/ui/FlxUI.hx",1009,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1082__addTags,"flixel.addons.ui.FlxUI","_addTags",0xc394f454,"flixel.addons.ui.FlxUI._addTags","flixel/addons/ui/FlxUI.hx",1082,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1099__loadGlobals,"flixel.addons.ui.FlxUI","_loadGlobals",0xe1eda5e4,"flixel.addons.ui.FlxUI._loadGlobals","flixel/addons/ui/FlxUI.hx",1099,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1118__postLoad,"flixel.addons.ui.FlxUI","_postLoad",0xe07320ac,"flixel.addons.ui.FlxUI._postLoad","flixel/addons/ui/FlxUI.hx",1118,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1161__sendTo,"flixel.addons.ui.FlxUI","_sendTo",0x988d3169,"flixel.addons.ui.FlxUI._sendTo","flixel/addons/ui/FlxUI.hx",1161,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1196_sendToFront,"flixel.addons.ui.FlxUI","sendToFront",0x18eb1f2d,"flixel.addons.ui.FlxUI.sendToFront","flixel/addons/ui/FlxUI.hx",1196,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1208_sendToBack,"flixel.addons.ui.FlxUI","sendToBack",0x0ea31023,"flixel.addons.ui.FlxUI.sendToBack","flixel/addons/ui/FlxUI.hx",1208,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1218_get_currMode,"flixel.addons.ui.FlxUI","get_currMode",0xd78f9337,"flixel.addons.ui.FlxUI.get_currMode","flixel/addons/ui/FlxUI.hx",1218,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1222_set_currMode,"flixel.addons.ui.FlxUI","set_currMode",0xec88b6ab,"flixel.addons.ui.FlxUI.set_currMode","flixel/addons/ui/FlxUI.hx",1222,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1233_setMode,"flixel.addons.ui.FlxUI","setMode",0xcc767b0c,"flixel.addons.ui.FlxUI.setMode","flixel/addons/ui/FlxUI.hx",1233,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1298_showThing,"flixel.addons.ui.FlxUI","showThing",0xd0d41c58,"flixel.addons.ui.FlxUI.showThing","flixel/addons/ui/FlxUI.hx",1298,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1367_getGroup,"flixel.addons.ui.FlxUI","getGroup",0xfa746602,"flixel.addons.ui.FlxUI.getGroup","flixel/addons/ui/FlxUI.hx",1367,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1377_getFlxText,"flixel.addons.ui.FlxUI","getFlxText",0x55e507c2,"flixel.addons.ui.FlxUI.getFlxText","flixel/addons/ui/FlxUI.hx",1377,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1390_getAllAssets,"flixel.addons.ui.FlxUI","getAllAssets",0xc0ca94c7,"flixel.addons.ui.FlxUI.getAllAssets","flixel/addons/ui/FlxUI.hx",1390,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1400_getAssetKeys,"flixel.addons.ui.FlxUI","getAssetKeys",0x52110047,"flixel.addons.ui.FlxUI.getAssetKeys","flixel/addons/ui/FlxUI.hx",1400,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1410_hasAsset,"flixel.addons.ui.FlxUI","hasAsset",0xb33a576f,"flixel.addons.ui.FlxUI.hasAsset","flixel/addons/ui/FlxUI.hx",1410,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1423_getAsset,"flixel.addons.ui.FlxUI","getAsset",0x86b91cb3,"flixel.addons.ui.FlxUI.getAsset","flixel/addons/ui/FlxUI.hx",1423,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1433_getAssetsWithTag,"flixel.addons.ui.FlxUI","getAssetsWithTag",0x2c689774,"flixel.addons.ui.FlxUI.getAssetsWithTag","flixel/addons/ui/FlxUI.hx",1433,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1460_getAssetGroup,"flixel.addons.ui.FlxUI","getAssetGroup",0x37c51d8c,"flixel.addons.ui.FlxUI.getAssetGroup","flixel/addons/ui/FlxUI.hx",1460,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1481_getMode,"flixel.addons.ui.FlxUI","getMode",0xd974ea00,"flixel.addons.ui.FlxUI.getMode","flixel/addons/ui/FlxUI.hx",1481,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1491_getLabelStyleFromDefinition,"flixel.addons.ui.FlxUI","getLabelStyleFromDefinition",0xade61a37,"flixel.addons.ui.FlxUI.getLabelStyleFromDefinition","flixel/addons/ui/FlxUI.hx",1491,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1509_getLabelStyleFromData,"flixel.addons.ui.FlxUI","getLabelStyleFromData",0x7750c7ce,"flixel.addons.ui.FlxUI.getLabelStyleFromData","flixel/addons/ui/FlxUI.hx",1509,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1522_checkVariable,"flixel.addons.ui.FlxUI","checkVariable",0xe5e77d4b,"flixel.addons.ui.FlxUI.checkVariable","flixel/addons/ui/FlxUI.hx",1522,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1536_setVariable,"flixel.addons.ui.FlxUI","setVariable",0x553a4265,"flixel.addons.ui.FlxUI.setVariable","flixel/addons/ui/FlxUI.hx",1536,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1540_getVariable,"flixel.addons.ui.FlxUI","getVariable",0x4acd3b59,"flixel.addons.ui.FlxUI.getVariable","flixel/addons/ui/FlxUI.hx",1540,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1550_getDefinition,"flixel.addons.ui.FlxUI","getDefinition",0xdd003ff0,"flixel.addons.ui.FlxUI.getDefinition","flixel/addons/ui/FlxUI.hx",1550,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1600_screenWidth,"flixel.addons.ui.FlxUI","screenWidth",0x3db46961,"flixel.addons.ui.FlxUI.screenWidth","flixel/addons/ui/FlxUI.hx",1600,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1609_screenHeight,"flixel.addons.ui.FlxUI","screenHeight",0x7677442c,"flixel.addons.ui.FlxUI.screenHeight","flixel/addons/ui/FlxUI.hx",1609,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1650_replaceInGroup,"flixel.addons.ui.FlxUI","replaceInGroup",0xb7beeb3f,"flixel.addons.ui.FlxUI.replaceInGroup","flixel/addons/ui/FlxUI.hx",1650,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1714_applyNodeConditionals,"flixel.addons.ui.FlxUI","applyNodeConditionals",0x57bfbe44,"flixel.addons.ui.FlxUI.applyNodeConditionals","flixel/addons/ui/FlxUI.hx",1714,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1743_applyNodeChanges,"flixel.addons.ui.FlxUI","applyNodeChanges",0x1f7e448c,"flixel.addons.ui.FlxUI.applyNodeChanges","flixel/addons/ui/FlxUI.hx",1743,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1811_loadThing,"flixel.addons.ui.FlxUI","loadThing",0xbda7028f,"flixel.addons.ui.FlxUI.loadThing","flixel/addons/ui/FlxUI.hx",1811,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1815__loadThingGetInfo,"flixel.addons.ui.FlxUI","_loadThingGetInfo",0x7a50a522,"flixel.addons.ui.FlxUI._loadThingGetInfo","flixel/addons/ui/FlxUI.hx",1815,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1853__loadTooltip,"flixel.addons.ui.FlxUI","_loadTooltip",0x38414d37,"flixel.addons.ui.FlxUI._loadTooltip","flixel/addons/ui/FlxUI.hx",1853,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1871__loadTooltipData,"flixel.addons.ui.FlxUI","_loadTooltipData",0x9fb23701,"flixel.addons.ui.FlxUI._loadTooltipData","flixel/addons/ui/FlxUI.hx",1871,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1939__loadTooltipStyle,"flixel.addons.ui.FlxUI","_loadTooltipStyle",0xcbd3807a,"flixel.addons.ui.FlxUI._loadTooltipStyle","flixel/addons/ui/FlxUI.hx",1939,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1964__loadTooltipText,"flixel.addons.ui.FlxUI","_loadTooltipText",0xaa48ad84,"flixel.addons.ui.FlxUI._loadTooltipText","flixel/addons/ui/FlxUI.hx",1964,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2013__loadAnchor,"flixel.addons.ui.FlxUI","_loadAnchor",0xa3f29cc1,"flixel.addons.ui.FlxUI._loadAnchor","flixel/addons/ui/FlxUI.hx",2013,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2028__loadThing,"flixel.addons.ui.FlxUI","_loadThing",0x7ce5f322,"flixel.addons.ui.FlxUI._loadThing","flixel/addons/ui/FlxUI.hx",2028,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2110__loadX,"flixel.addons.ui.FlxUI","_loadX",0x4a11c1ac,"flixel.addons.ui.FlxUI._loadX","flixel/addons/ui/FlxUI.hx",2110,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2115__loadY,"flixel.addons.ui.FlxUI","_loadY",0x4a11c1ad,"flixel.addons.ui.FlxUI._loadY","flixel/addons/ui/FlxUI.hx",2115,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2120__loadScale,"flixel.addons.ui.FlxUI","_loadScale",0xe62b39be,"flixel.addons.ui.FlxUI._loadScale","flixel/addons/ui/FlxUI.hx",2120,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2125__loadScaleX,"flixel.addons.ui.FlxUI","_loadScaleX",0x7fa74cda,"flixel.addons.ui.FlxUI._loadScaleX","flixel/addons/ui/FlxUI.hx",2125,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2130__loadScaleY,"flixel.addons.ui.FlxUI","_loadScaleY",0x7fa74cdb,"flixel.addons.ui.FlxUI._loadScaleY","flixel/addons/ui/FlxUI.hx",2130,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2134__loadWidth,"flixel.addons.ui.FlxUI","_loadWidth",0x37bf213a,"flixel.addons.ui.FlxUI._loadWidth","flixel/addons/ui/FlxUI.hx",2134,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2141__loadHeight,"flixel.addons.ui.FlxUI","_loadHeight",0x45cd6a33,"flixel.addons.ui.FlxUI._loadHeight","flixel/addons/ui/FlxUI.hx",2141,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2148__loadCompass,"flixel.addons.ui.FlxUI","_loadCompass",0x511db9c6,"flixel.addons.ui.FlxUI._loadCompass","flixel/addons/ui/FlxUI.hx",2148,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2185__changeParamsThing,"flixel.addons.ui.FlxUI","_changeParamsThing",0x3feee472,"flixel.addons.ui.FlxUI._changeParamsThing","flixel/addons/ui/FlxUI.hx",2185,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2203__changeThing,"flixel.addons.ui.FlxUI","_changeThing",0x32661218,"flixel.addons.ui.FlxUI._changeThing","flixel/addons/ui/FlxUI.hx",2203,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2275__alignThing,"flixel.addons.ui.FlxUI","_alignThing",0x37322a6f,"flixel.addons.ui.FlxUI._alignThing","flixel/addons/ui/FlxUI.hx",2275,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2367__doAlign,"flixel.addons.ui.FlxUI","_doAlign",0x8f1f33f4,"flixel.addons.ui.FlxUI._doAlign","flixel/addons/ui/FlxUI.hx",2367,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2490__checkFailure,"flixel.addons.ui.FlxUI","_checkFailure",0x7b6fc968,"flixel.addons.ui.FlxUI._checkFailure","flixel/addons/ui/FlxUI.hx",2490,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2584__resizeThing,"flixel.addons.ui.FlxUI","_resizeThing",0x4ba3eb14,"flixel.addons.ui.FlxUI._resizeThing","flixel/addons/ui/FlxUI.hx",2584,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2618__postLoadThing,"flixel.addons.ui.FlxUI","_postLoadThing",0x7251e7a2,"flixel.addons.ui.FlxUI._postLoadThing","flixel/addons/ui/FlxUI.hx",2618,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2757__loadTileTest,"flixel.addons.ui.FlxUI","_loadTileTest",0xb7577bec,"flixel.addons.ui.FlxUI._loadTileTest","flixel/addons/ui/FlxUI.hx",2757,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2834__loadString,"flixel.addons.ui.FlxUI","_loadString",0x54b18b1d,"flixel.addons.ui.FlxUI._loadString","flixel/addons/ui/FlxUI.hx",2834,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2843__loadText,"flixel.addons.ui.FlxUI","_loadText",0x9815c3f9,"flixel.addons.ui.FlxUI._loadText","flixel/addons/ui/FlxUI.hx",2843,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2902__loadInputText,"flixel.addons.ui.FlxUI","_loadInputText",0x30689f0b,"flixel.addons.ui.FlxUI._loadInputText","flixel/addons/ui/FlxUI.hx",2902,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3067__loadRadioGroup,"flixel.addons.ui.FlxUI","_loadRadioGroup",0x22b21c90,"flixel.addons.ui.FlxUI._loadRadioGroup","flixel/addons/ui/FlxUI.hx",3067,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3233__loadCheckBox,"flixel.addons.ui.FlxUI","_loadCheckBox",0xdd35176f,"flixel.addons.ui.FlxUI._loadCheckBox","flixel/addons/ui/FlxUI.hx",3233,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3317__loadDropDownMenu,"flixel.addons.ui.FlxUI","_loadDropDownMenu",0xfcc3a1bc,"flixel.addons.ui.FlxUI._loadDropDownMenu","flixel/addons/ui/FlxUI.hx",3317,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3453__loadTest,"flixel.addons.ui.FlxUI","_loadTest",0x9815bf9e,"flixel.addons.ui.FlxUI._loadTest","flixel/addons/ui/FlxUI.hx",3453,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3503__loadTestSub,"flixel.addons.ui.FlxUI","_loadTestSub",0x8b7ab882,"flixel.addons.ui.FlxUI._loadTestSub","flixel/addons/ui/FlxUI.hx",3503,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3604_parseVarValue,"flixel.addons.ui.FlxUI","parseVarValue",0x5226f084,"flixel.addons.ui.FlxUI.parseVarValue","flixel/addons/ui/FlxUI.hx",3604,0xf354486a)
static const ::String _hx_array_data_e9110855_177[] = {
	HX_("==",60,35,00,00),HX_("=",3d,00,00,00),HX_("!=",fc,1c,00,00),HX_("!==",c1,3f,19,00),HX_("<",3c,00,00,00),HX_(">",3e,00,00,00),HX_("<=",81,34,00,00),HX_(">=",3f,36,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3622__loadLayout,"flixel.addons.ui.FlxUI","_loadLayout",0x9c3a10f6,"flixel.addons.ui.FlxUI._loadLayout","flixel/addons/ui/FlxUI.hx",3622,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3634_addToCleanup,"flixel.addons.ui.FlxUI","addToCleanup",0x71379941,"flixel.addons.ui.FlxUI.addToCleanup","flixel/addons/ui/FlxUI.hx",3634,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3645_addToScaledAssets,"flixel.addons.ui.FlxUI","addToScaledAssets",0xf5176080,"flixel.addons.ui.FlxUI.addToScaledAssets","flixel/addons/ui/FlxUI.hx",3645,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3652_cleanup,"flixel.addons.ui.FlxUI","cleanup",0x69d3730b,"flixel.addons.ui.FlxUI.cleanup","flixel/addons/ui/FlxUI.hx",3652,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3663_createUI,"flixel.addons.ui.FlxUI","createUI",0x2c9d0b89,"flixel.addons.ui.FlxUI.createUI","flixel/addons/ui/FlxUI.hx",3663,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3667__loadTabMenu,"flixel.addons.ui.FlxUI","_loadTabMenu",0x0e83bac8,"flixel.addons.ui.FlxUI._loadTabMenu","flixel/addons/ui/FlxUI.hx",3667,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3811__loadNumericStepper,"flixel.addons.ui.FlxUI","_loadNumericStepper",0x27747c10,"flixel.addons.ui.FlxUI._loadNumericStepper","flixel/addons/ui/FlxUI.hx",3811,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3876_getResizeRatio,"flixel.addons.ui.FlxUI","getResizeRatio",0x06525d7a,"flixel.addons.ui.FlxUI.getResizeRatio","flixel/addons/ui/FlxUI.hx",3876,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3905__loadButton,"flixel.addons.ui.FlxUI","_loadButton",0x1d61c43e,"flixel.addons.ui.FlxUI._loadButton","flixel/addons/ui/FlxUI.hx",3905,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4331__loadRegion,"flixel.addons.ui.FlxUI","_loadRegion",0x440e2340,"flixel.addons.ui.FlxUI._loadRegion","flixel/addons/ui/FlxUI.hx",4331,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4351__load9SliceSprite,"flixel.addons.ui.FlxUI","_load9SliceSprite",0xb0d2f56a,"flixel.addons.ui.FlxUI._load9SliceSprite","flixel/addons/ui/FlxUI.hx",4351,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4452_load9SliceSprite_scaleSub,"flixel.addons.ui.FlxUI","load9SliceSprite_scaleSub",0x6f4e4338,"flixel.addons.ui.FlxUI.load9SliceSprite_scaleSub","flixel/addons/ui/FlxUI.hx",4452,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4492__loadTileRule,"flixel.addons.ui.FlxUI","_loadTileRule",0xb6112c96,"flixel.addons.ui.FlxUI._loadTileRule","flixel/addons/ui/FlxUI.hx",4492,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4508__loadBox,"flixel.addons.ui.FlxUI","_loadBox",0x4336343f,"flixel.addons.ui.FlxUI._loadBox","flixel/addons/ui/FlxUI.hx",4508,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4578__loadLine,"flixel.addons.ui.FlxUI","_loadLine",0x92cf0f40,"flixel.addons.ui.FlxUI._loadLine","flixel/addons/ui/FlxUI.hx",4578,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4649__loadBar,"flixel.addons.ui.FlxUI","_loadBar",0x43362807,"flixel.addons.ui.FlxUI._loadBar","flixel/addons/ui/FlxUI.hx",4649,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4760__loadSprite,"flixel.addons.ui.FlxUI","_loadSprite",0x07173e51,"flixel.addons.ui.FlxUI._loadSprite","flixel/addons/ui/FlxUI.hx",4760,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4862_loadSmooth,"flixel.addons.ui.FlxUI","loadSmooth",0xb318da6d,"flixel.addons.ui.FlxUI.loadSmooth","flixel/addons/ui/FlxUI.hx",4862,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4878_loadScaledSrc,"flixel.addons.ui.FlxUI","loadScaledSrc",0x51d86f8b,"flixel.addons.ui.FlxUI.loadScaledSrc","flixel/addons/ui/FlxUI.hx",4878,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4981_thisWidth,"flixel.addons.ui.FlxUI","thisWidth",0xcbb0796f,"flixel.addons.ui.FlxUI.thisWidth","flixel/addons/ui/FlxUI.hx",4981,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4990_thisHeight,"flixel.addons.ui.FlxUI","thisHeight",0x2509405e,"flixel.addons.ui.FlxUI.thisHeight","flixel/addons/ui/FlxUI.hx",4990,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4997__getAnchorPos,"flixel.addons.ui.FlxUI","_getAnchorPos",0xe6674faf,"flixel.addons.ui.FlxUI._getAnchorPos","flixel/addons/ui/FlxUI.hx",4997,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5056_getRound,"flixel.addons.ui.FlxUI","getRound",0x4de5ab11,"flixel.addons.ui.FlxUI.getRound","flixel/addons/ui/FlxUI.hx",5056,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5072_doRound,"flixel.addons.ui.FlxUI","doRound",0xdf243faa,"flixel.addons.ui.FlxUI.doRound","flixel/addons/ui/FlxUI.hx",5072,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5087_calcMaxMinSize,"flixel.addons.ui.FlxUI","calcMaxMinSize",0x437b661d,"flixel.addons.ui.FlxUI.calcMaxMinSize","flixel/addons/ui/FlxUI.hx",5087,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5199__getDataSize,"flixel.addons.ui.FlxUI","_getDataSize",0xaed2247b,"flixel.addons.ui.FlxUI._getDataSize","flixel/addons/ui/FlxUI.hx",5199,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5281__getOperation,"flixel.addons.ui.FlxUI","_getOperation",0x2685c1b7,"flixel.addons.ui.FlxUI._getOperation","flixel/addons/ui/FlxUI.hx",5281,0xf354486a)
static const ::String _hx_array_data_e9110855_239[] = {
	HX_("+",2b,00,00,00),HX_("-",2d,00,00,00),HX_("*",2a,00,00,00),HX_("/",2f,00,00,00),HX_("^",5e,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5348__doOperation,"flixel.addons.ui.FlxUI","_doOperation",0xf65624d6,"flixel.addons.ui.FlxUI._doOperation","flixel/addons/ui/FlxUI.hx",5348,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5366__getStretch,"flixel.addons.ui.FlxUI","_getStretch",0xd40af795,"flixel.addons.ui.FlxUI._getStretch","flixel/addons/ui/FlxUI.hx",5366,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5407_getAssetProperty,"flixel.addons.ui.FlxUI","getAssetProperty",0xd3eb8c28,"flixel.addons.ui.FlxUI.getAssetProperty","flixel/addons/ui/FlxUI.hx",5407,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5524__loadCursor,"flixel.addons.ui.FlxUI","_loadCursor",0x8269f122,"flixel.addons.ui.FlxUI._loadCursor","flixel/addons/ui/FlxUI.hx",5524,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5552__loadPosition,"flixel.addons.ui.FlxUI","_loadPosition",0xfb522df5,"flixel.addons.ui.FlxUI._loadPosition","flixel/addons/ui/FlxUI.hx",5552,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5660__loadBorder,"flixel.addons.ui.FlxUI","_loadBorder",0xa79baf38,"flixel.addons.ui.FlxUI._loadBorder","flixel/addons/ui/FlxUI.hx",5660,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5673__loadColor,"flixel.addons.ui.FlxUI","_loadColor",0xb7b8dc97,"flixel.addons.ui.FlxUI._loadColor","flixel/addons/ui/FlxUI.hx",5673,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5688__loadFontDef,"flixel.addons.ui.FlxUI","_loadFontDef",0x63d37f6a,"flixel.addons.ui.FlxUI._loadFontDef","flixel/addons/ui/FlxUI.hx",5688,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5697__loadFontFace,"flixel.addons.ui.FlxUI","_loadFontFace",0xf68b5f58,"flixel.addons.ui.FlxUI._loadFontFace","flixel/addons/ui/FlxUI.hx",5697,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5710__onFinishLoad,"flixel.addons.ui.FlxUI","_onFinishLoad",0x23246f1e,"flixel.addons.ui.FlxUI._onFinishLoad","flixel/addons/ui/FlxUI.hx",5710,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5718_getText,"flixel.addons.ui.FlxUI","getText",0xde0de34a,"flixel.addons.ui.FlxUI.getText","flixel/addons/ui/FlxUI.hx",5718,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5735_formatFromCode,"flixel.addons.ui.FlxUI","formatFromCode",0x3be1ae07,"flixel.addons.ui.FlxUI.formatFromCode","flixel/addons/ui/FlxUI.hx",5735,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5820_formatButtonText,"flixel.addons.ui.FlxUI","formatButtonText",0xeca59e0f,"flixel.addons.ui.FlxUI.formatButtonText","flixel/addons/ui/FlxUI.hx",5820,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_157_event,"flixel.addons.ui.FlxUI","event",0xe056d741,"flixel.addons.ui.FlxUI.event","flixel/addons/ui/FlxUI.hx",157,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_178_fontStr,"flixel.addons.ui.FlxUI","fontStr",0x54bbb509,"flixel.addons.ui.FlxUI.fontStr","flixel/addons/ui/FlxUI.hx",178,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_195_fontSize,"flixel.addons.ui.FlxUI","fontSize",0xcf7a6169,"flixel.addons.ui.FlxUI.fontSize","flixel/addons/ui/FlxUI.hx",195,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_213_font,"flixel.addons.ui.FlxUI","font",0x30b6b088,"flixel.addons.ui.FlxUI.font","flixel/addons/ui/FlxUI.hx",213,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_224___getTongue,"flixel.addons.ui.FlxUI","__getTongue",0xfa337e41,"flixel.addons.ui.FlxUI.__getTongue","flixel/addons/ui/FlxUI.hx",224,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_240_forceFocus,"flixel.addons.ui.FlxUI","forceFocus",0x91e0ed66,"flixel.addons.ui.FlxUI.forceFocus","flixel/addons/ui/FlxUI.hx",240,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_253_getLeafUIState,"flixel.addons.ui.FlxUI","getLeafUIState",0xebda1e42,"flixel.addons.ui.FlxUI.getLeafUIState","flixel/addons/ui/FlxUI.hx",253,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_278_request,"flixel.addons.ui.FlxUI","request",0x03164636,"flixel.addons.ui.FlxUI.request","flixel/addons/ui/FlxUI.hx",278,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1576__delta,"flixel.addons.ui.FlxUI","_delta",0xa8496232,"flixel.addons.ui.FlxUI._delta","flixel/addons/ui/FlxUI.hx",1576,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1587__center,"flixel.addons.ui.FlxUI","_center",0x32e39e5b,"flixel.addons.ui.FlxUI._center","flixel/addons/ui/FlxUI.hx",1587,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2999_consolidateData,"flixel.addons.ui.FlxUI","consolidateData",0x9bb7ebba,"flixel.addons.ui.FlxUI.consolidateData","flixel/addons/ui/FlxUI.hx",2999,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4322__loadBitmapRect,"flixel.addons.ui.FlxUI","_loadBitmapRect",0xdc5324ff,"flixel.addons.ui.FlxUI._loadBitmapRect","flixel/addons/ui/FlxUI.hx",4322,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5755_getParams,"flixel.addons.ui.FlxUI","getParams",0xfcb7b323,"flixel.addons.ui.FlxUI.getParams","flixel/addons/ui/FlxUI.hx",5755,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5811_sortParams,"flixel.addons.ui.FlxUI","sortParams",0x40e314bd,"flixel.addons.ui.FlxUI.sortParams","flixel/addons/ui/FlxUI.hx",5811,0xf354486a)
namespace flixel{
namespace addons{
namespace ui{

void FlxUI_obj::__construct( ::Xml data,::Dynamic ptr, ::flixel::addons::ui::FlxUI superIndex_,::Dynamic tongue_,::String __o_liveFilePath_, ::haxe::ds::StringMap uiVars_){
            		::String liveFilePath_ = __o_liveFilePath_;
            		if (::hx::IsNull(__o_liveFilePath_)) liveFilePath_ = HX_("",00,00,00,00);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_57_new)
HXLINE(1641)		this->_scaledAssets = ::Array_obj< ::String >::__new(0);
HXLINE(1640)		this->_assetsToCleanUp = ::Array_obj< ::String >::__new(0);
HXLINE(1636)		this->_safe_input_delay_elapsed = ((Float)0.0);
HXLINE(1631)		this->_curr_mode = HX_("",00,00,00,00);
HXLINE(1622)		this->_pointY = ((Float)1);
HXLINE(1621)		this->_pointX = ((Float)1);
HXLINE(1619)		this->_postLoaded = false;
HXLINE( 123)		this->cursorLists = null();
HXLINE( 114)		this->getTextFallback = null();
HXLINE(  64)		this->failed_by = ((Float)0);
HXLINE(  63)		this->failed = false;
HXLINE(  61)		this->safe_input_delay_time = ((Float)0.01);
HXLINE(  60)		this->do_safe_input_delay = true;
HXLINE( 338)		super::__construct(null(),null());
HXLINE( 339)		this->_ptr_tongue = tongue_;
HXLINE( 347)		this->_ptr = ptr;
HXLINE( 348)		if (::hx::IsNotNull( superIndex_ )) {
HXLINE( 350)			this->setSuperIndex(superIndex_);
            		}
HXLINE( 354)		if (::hx::IsNotNull( uiVars_ )) {
HXLINE( 356)			this->_variable_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 357)			{
HXLINE( 357)				 ::Dynamic key = uiVars_->keys();
HXDLIN( 357)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 357)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 359)					{
HXLINE( 359)						::Dynamic this1 = this->_variable_index;
HXDLIN( 359)						( ( ::haxe::ds::StringMap)(this1) )->set(key1,uiVars_->get_string(key1));
            					}
            				}
            			}
            		}
HXLINE( 363)		if (::hx::IsNotNull( data )) {
HXLINE( 365)			this->load(data);
            		}
            	}

Dynamic FlxUI_obj::__CreateEmpty() { return new FlxUI_obj; }

void *FlxUI_obj::_hx_vtable = 0;

Dynamic FlxUI_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxUI_obj > _hx_result = new FlxUI_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool FlxUI_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x39f54363) {
		if (inClassId<=(int)0x296a9148) {
			if (inClassId<=(int)0x288ce903) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x288ce903;
			} else {
				return inClassId==(int)0x296a9148;
			}
		} else {
			return inClassId==(int)0x2c01639b || inClassId==(int)0x39f54363;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x5f6ac8a1 || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7dab0655;
		}
	}
}

static ::flixel::addons::ui::interfaces::IEventGetter_obj _hx_flixel_addons_ui_FlxUI__hx_flixel_addons_ui_interfaces_IEventGetter= {
	( void (::hx::Object::*)(::String,::Dynamic, ::Dynamic,::cpp::VirtualArray))&::flixel::addons::ui::FlxUI_obj::getEvent,
	(  ::Dynamic (::hx::Object::*)(::String,::Dynamic, ::Dynamic,::cpp::VirtualArray))&::flixel::addons::ui::FlxUI_obj::getRequest,
};

void *FlxUI_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xdcf9e4f9: return &_hx_flixel_addons_ui_FlxUI__hx_flixel_addons_ui_interfaces_IEventGetter;
	}
	return super::_hx_getInterface(inHash);
}

bool FlxUI_obj::get_isRoot(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_73_get_isRoot)
HXDLIN(  73)		if (::hx::IsNotNull( this->_ptr )) {
HXDLIN(  73)			::Dynamic _hx_tmp = this->_ptr;
HXDLIN(  73)			return ::hx::IsInstanceEq( _hx_tmp,::flixel::addons::ui::FlxUI_obj::getLeafUIState() );
            		}
            		else {
HXDLIN(  73)			return false;
            		}
HXDLIN(  73)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,get_isRoot,return )

::Dynamic FlxUI_obj::get_tongue(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_87_get_tongue)
HXDLIN(  87)		return this->_ptr_tongue;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,get_tongue,return )

::Dynamic FlxUI_obj::set_tongue(::Dynamic t){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_91_set_tongue)
HXLINE(  92)		this->_ptr_tongue = t;
HXLINE(  93)		this->_tongueSet(this->group->members,t);
HXLINE(  94)		return this->_ptr_tongue;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,set_tongue,return )

::Dynamic FlxUI_obj::set_focus(::Dynamic widget){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_100_set_focus)
HXLINE( 101)		if (::hx::IsNotNull( this->focus )) {
HXLINE( 103)			this->onFocusLost(this->focus);
            		}
HXLINE( 105)		this->focus = widget;
HXLINE( 106)		if (::hx::IsNotNull( this->focus )) {
HXLINE( 108)			this->onFocus(this->focus);
            		}
HXLINE( 110)		return widget;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,set_focus,return )

void FlxUI_obj::_tongueSet(::Array< ::Dynamic> list,::Dynamic tongue){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_133__tongueSet)
HXDLIN( 133)		int _g = 0;
HXDLIN( 133)		while((_g < list->length)){
HXDLIN( 133)			 ::flixel::FlxSprite sprite = list->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 133)			_g = (_g + 1);
HXLINE( 135)			if (::Std_obj::isOfType(sprite,::hx::ClassOf< ::flixel::addons::ui::FlxTypedUIGroup >())) {
HXLINE( 137)				 ::flixel::addons::ui::FlxTypedUIGroup group = ( ( ::flixel::addons::ui::FlxTypedUIGroup)(sprite) );
HXLINE( 138)				this->_tongueSet(group->group->members,tongue);
            			}
            			else {
HXLINE( 140)				if (::Std_obj::isOfType(sprite,::hx::ClassOf< ::flixel::addons::ui::FlxUI >())) {
HXLINE( 142)					 ::flixel::addons::ui::FlxUI ui = ( ( ::flixel::addons::ui::FlxUI)(sprite) );
HXLINE( 143)					ui->set_tongue(tongue);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_tongueSet,(void))

void FlxUI_obj::callEvent(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_293_callEvent)
HXDLIN( 293)		this->getEvent(name,sender,data,params);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,callEvent,(void))

void FlxUI_obj::getEvent(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_298_getEvent)
HXDLIN( 298)		if (::hx::IsNotNull( this->_ptr )) {
HXLINE( 300)			::flixel::addons::ui::interfaces::IEventGetter_obj::getEvent(this->_ptr,name,sender,data,params);
HXLINE( 301)			if ((name == HX_("post_load",a5,55,d0,20))) {
HXLINE( 304)				 ::Dynamic key = this->_asset_index->keys();
HXDLIN( 304)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 304)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 306)					::Dynamic thing = this->_asset_index->get(key1);
HXLINE( 307)					if (::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::addons::ui::FlxUI >())) {
HXLINE( 309)						 ::flixel::addons::ui::FlxUI fui = ( ( ::flixel::addons::ui::FlxUI)(thing) );
HXLINE( 310)						fui->getEvent(HX_("post_load",a5,55,d0,20),sender,data,null());
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,getEvent,(void))

 ::Dynamic FlxUI_obj::getRequest(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_318_getRequest)
HXLINE( 319)		if (::hx::IsNotNull( this->_ptr )) {
HXLINE( 321)			return ::flixel::addons::ui::interfaces::IEventGetter_obj::getRequest(this->_ptr,name,sender,data,params);
            		}
HXLINE( 323)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,getRequest,return )

void FlxUI_obj::onFocus(::Dynamic widget){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_371_onFocus)
HXDLIN( 371)		if (::Std_obj::isOfType(widget,::hx::ClassOf< ::flixel::addons::ui::FlxUIDropDownMenu >())) {
HXLINE( 374)			int _g = 0;
HXDLIN( 374)			::Array< ::Dynamic> _g1 = this->group->members;
HXDLIN( 374)			while((_g < _g1->length)){
HXLINE( 374)				 ::flixel::FlxSprite asset = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 374)				_g = (_g + 1);
HXLINE( 376)				this->setWidgetSuppression(asset,widget,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,onFocus,(void))

void FlxUI_obj::setWidgetSuppression( ::flixel::FlxSprite asset,::Dynamic butNotThisOne,::hx::Null< bool >  __o_suppressed){
            		bool suppressed = __o_suppressed.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_383_setWidgetSuppression)
HXDLIN( 383)		if (::Std_obj::isOfType(asset,::hx::ClassOf< ::flixel::addons::ui::interfaces::IFlxUIClickable >())) {
HXLINE( 385)			bool skip = false;
HXLINE( 386)			if (::Std_obj::isOfType(asset,::hx::ClassOf< ::flixel::addons::ui::FlxUIDropDownMenu >())) {
HXLINE( 388)				 ::flixel::addons::ui::FlxUIDropDownMenu ddasset = ( ( ::flixel::addons::ui::FlxUIDropDownMenu)(asset) );
HXLINE( 389)				if (::hx::IsInstanceEq( ddasset,butNotThisOne )) {
HXLINE( 391)					skip = true;
            				}
            			}
HXLINE( 394)			if (!(skip)) {
HXLINE( 396)				::Dynamic ibtn = asset;
HXLINE( 397)				::flixel::addons::ui::interfaces::IFlxUIClickable_obj::set_skipButtonUpdate(ibtn,suppressed);
            			}
            		}
            		else {
HXLINE( 400)			if (::Std_obj::isOfType(asset,::hx::ClassOf< ::flixel::addons::ui::FlxTypedUIGroup >())) {
HXLINE( 402)				 ::flixel::addons::ui::FlxTypedUIGroup g = ( ( ::flixel::addons::ui::FlxTypedUIGroup)(asset) );
HXLINE( 403)				{
HXLINE( 403)					int _g = 0;
HXDLIN( 403)					::Array< ::Dynamic> _g1 = g->group->members;
HXDLIN( 403)					while((_g < _g1->length)){
HXLINE( 403)						 ::flixel::FlxSprite groupAsset = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 403)						_g = (_g + 1);
HXLINE( 405)						this->setWidgetSuppression(groupAsset,butNotThisOne,suppressed);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,setWidgetSuppression,(void))

void FlxUI_obj::onFocusLost(::Dynamic widget){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_416_onFocusLost)
HXDLIN( 416)		if (::Std_obj::isOfType(widget,::hx::ClassOf< ::flixel::addons::ui::FlxUIDropDownMenu >())) {
HXLINE( 421)			int _g = 0;
HXDLIN( 421)			::Array< ::Dynamic> _g1 = this->group->members;
HXDLIN( 421)			while((_g < _g1->length)){
HXLINE( 421)				 ::flixel::FlxSprite asset = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 421)				_g = (_g + 1);
HXLINE( 423)				this->setWidgetSuppression(asset,null(),false);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,onFocusLost,(void))

void FlxUI_obj::setSuperIndex( ::flixel::addons::ui::FlxUI flxUI){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_434_setSuperIndex)
HXDLIN( 434)		this->_superIndexUI = flxUI;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,setSuperIndex,(void))

void FlxUI_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_438_update)
HXLINE( 439)		if (this->do_safe_input_delay) {
HXLINE( 441)			 ::flixel::addons::ui::FlxUI _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 441)			_hx_tmp->_safe_input_delay_elapsed = (_hx_tmp->_safe_input_delay_elapsed + ::flixel::FlxG_obj::elapsed);
HXLINE( 442)			if ((this->_safe_input_delay_elapsed > this->safe_input_delay_time)) {
HXLINE( 444)				this->do_safe_input_delay = false;
            			}
            			else {
HXLINE( 448)				return;
            			}
            		}
HXLINE( 451)		this->super::update(elapsed);
            	}


bool FlxUI_obj::toggleShow(::String key){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_455_toggleShow)
HXLINE( 456)		::Dynamic thing = this->getAsset(key,false);
HXLINE( 457)		if (::hx::IsNull( thing )) {
HXLINE( 459)			 ::flixel::addons::ui::FlxTypedUIGroup group = this->getGroup(key,false);
HXLINE( 460)			if (::hx::IsNotNull( group )) {
HXLINE( 462)				group->set_visible(!(group->visible));
HXLINE( 463)				return group->visible;
            			}
            		}
            		else {
HXLINE( 468)			::flixel::IFlxBasic_obj::set_visible(thing,!(( (bool)(thing->__Field(HX_("visible",72,78,24,a3),::hx::paccDynamic)) )));
HXLINE( 469)			return ( (bool)(thing->__Field(HX_("visible",72,78,24,a3),::hx::paccDynamic)) );
            		}
HXLINE( 471)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,toggleShow,return )

void FlxUI_obj::showGroup(::String key,bool Show, ::Dynamic Active){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_475_showGroup)
HXLINE( 476)		 ::flixel::addons::ui::FlxTypedUIGroup group = this->getGroup(key,false);
HXLINE( 477)		if (::hx::IsNotNull( group )) {
HXLINE( 479)			group->set_visible(Show);
HXLINE( 480)			if (::hx::IsNull( Active )) {
HXLINE( 482)				group->set_active(Show);
            			}
            			else {
HXLINE( 486)				group->set_active(( (bool)(Active) ));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,showGroup,(void))

void FlxUI_obj::showAsset(::String key,bool Show, ::Dynamic Active){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_492_showAsset)
HXLINE( 493)		::Dynamic asset = this->getAsset(key,false);
HXLINE( 494)		if (::hx::IsNotNull( asset )) {
HXLINE( 496)			::flixel::IFlxBasic_obj::set_visible(asset,Show);
HXLINE( 497)			if (::hx::IsNull( Active )) {
HXLINE( 499)				::flixel::IFlxBasic_obj::set_active(asset,Show);
            			}
            			else {
HXLINE( 503)				::flixel::IFlxBasic_obj::set_active(asset,Active);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,showAsset,(void))

::Dynamic FlxUI_obj::removeAsset(::String key,::hx::Null< bool >  __o_destroy){
            		bool destroy = __o_destroy.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_515_removeAsset)
HXLINE( 516)		::Dynamic asset = this->getAsset(key,false);
HXLINE( 517)		if (::hx::IsNotNull( asset )) {
HXLINE( 519)			this->replaceInGroup(( ( ::flixel::FlxSprite)(asset) ),null(),true);
HXLINE( 520)			this->_asset_index->remove(key);
            		}
HXLINE( 522)		bool _hx_tmp;
HXDLIN( 522)		if (destroy) {
HXLINE( 522)			_hx_tmp = ::hx::IsNotNull( asset );
            		}
            		else {
HXLINE( 522)			_hx_tmp = false;
            		}
HXDLIN( 522)		if (_hx_tmp) {
HXLINE( 524)			::flixel::IFlxBasic_obj::destroy(asset);
HXLINE( 525)			asset = null();
            		}
HXLINE( 527)		return asset;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,removeAsset,return )

bool FlxUI_obj::addAsset(::Dynamic asset,::String key,::String __o_group_name,::hx::Null< bool >  __o_recursive){
            		::String group_name = __o_group_name;
            		if (::hx::IsNull(__o_group_name)) group_name = HX_("",00,00,00,00);
            		bool recursive = __o_recursive.Default(false);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_538_addAsset)
HXLINE( 539)		if (this->_asset_index->exists(key)) {
HXLINE( 541)			if ((key == HX_("screen",6c,3b,5d,47))) {
HXLINE( 543)				::flixel::FlxG_obj::log->advanced(HX_("Failed to add a widget with the name 'screen', that is reserved by the system for the screen itself",a1,98,88,7b),::flixel::_hx_system::debug::log::LogStyle_obj::NOTICE,null());
            			}
            			else {
HXLINE( 547)				::flixel::FlxG_obj::log->advanced(((HX_("Duplicate screen name '",d1,0b,e0,7e) + key) + HX_("'",27,00,00,00)),::flixel::_hx_system::debug::log::LogStyle_obj::NOTICE,null());
            			}
HXLINE( 549)			return false;
            		}
HXLINE( 552)		 ::flixel::addons::ui::FlxTypedUIGroup g = this->getGroup(group_name,recursive);
HXLINE( 553)		if (::hx::IsNotNull( g )) {
HXLINE( 555)			g->add(( ( ::flixel::FlxSprite)(asset) )).StaticCast<  ::flixel::FlxSprite >();
            		}
            		else {
HXLINE( 559)			this->add(( ( ::flixel::FlxSprite)(asset) ));
            		}
HXLINE( 562)		this->_asset_index->set(key,asset);
HXLINE( 564)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,addAsset,return )

::Dynamic FlxUI_obj::replaceAsset(::String key,::Dynamic replace,::hx::Null< bool >  __o_center_x,::hx::Null< bool >  __o_center_y,::hx::Null< bool >  __o_destroy_old){
            		bool center_x = __o_center_x.Default(true);
            		bool center_y = __o_center_y.Default(true);
            		bool destroy_old = __o_destroy_old.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_575_replaceAsset)
HXLINE( 577)		::Dynamic original = this->getAsset(key,false);
HXLINE( 579)		if (::hx::IsNotNull( original )) {
HXLINE( 582)			if (!(center_x)) {
HXLINE( 584)				::flixel::IFlxSprite_obj::set_x(replace, ::Dynamic(original->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)));
            			}
            			else {
HXLINE( 588)				Float original1 = ( (Float)(original->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN( 588)				Float _hx_tmp = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(original);
HXDLIN( 588)				::flixel::IFlxSprite_obj::set_x(replace,(original1 + ((_hx_tmp - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(replace)) / ( (Float)(2) ))));
            			}
HXLINE( 590)			if (!(center_y)) {
HXLINE( 592)				::flixel::IFlxSprite_obj::set_y(replace, ::Dynamic(original->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)));
            			}
            			else {
HXLINE( 596)				Float original2 = ( (Float)(original->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN( 596)				Float _hx_tmp1 = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(original);
HXDLIN( 596)				::flixel::IFlxSprite_obj::set_y(replace,(original2 + ((_hx_tmp1 - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(replace)) / ( (Float)(2) ))));
            			}
HXLINE( 600)			this->replaceInGroup(( ( ::flixel::FlxSprite)(original) ),( ( ::flixel::FlxSprite)(replace) ),null());
HXLINE( 603)			this->_asset_index->remove(key);
HXLINE( 606)			this->_asset_index->set(key,replace);
HXLINE( 609)			if (destroy_old) {
HXLINE( 611)				::flixel::IFlxBasic_obj::destroy(original);
HXLINE( 612)				original = null();
            			}
            		}
HXLINE( 616)		return original;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxUI_obj,replaceAsset,return )

void FlxUI_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_623_destroy)
HXLINE( 624)		if (::hx::IsNotNull( this->_group_index )) {
HXLINE( 626)			{
HXLINE( 626)				 ::Dynamic key = this->_group_index->keys();
HXDLIN( 626)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 626)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 628)					this->_group_index->remove(key1);
            				}
            			}
HXLINE( 630)			this->_group_index = null();
            		}
HXLINE( 632)		if (::hx::IsNotNull( this->_asset_index )) {
HXLINE( 634)			{
HXLINE( 634)				 ::Dynamic key2 = this->_asset_index->keys();
HXDLIN( 634)				while(( (bool)(key2->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 634)					::String key3 = ( (::String)(key2->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 636)					this->_asset_index->remove(key3);
            				}
            			}
HXLINE( 638)			this->_asset_index = null();
            		}
HXLINE( 640)		if (::hx::IsNotNull( this->_tag_index )) {
HXLINE( 642)			{
HXLINE( 642)				 ::Dynamic key4 = this->_tag_index->keys();
HXDLIN( 642)				while(( (bool)(key4->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 642)					::String key5 = ( (::String)(key4->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 644)					::flixel::util::FlxArrayUtil_obj::clearArray(( (::cpp::VirtualArray)(this->_tag_index->get(key5)) ),null());
HXLINE( 645)					this->_tag_index->remove(key5);
            				}
            			}
HXLINE( 647)			this->_tag_index = null();
            		}
HXLINE( 649)		if (::hx::IsNotNull( this->_definition_index )) {
HXLINE( 651)			{
HXLINE( 651)				 ::Dynamic key6 = this->_definition_index->keys();
HXDLIN( 651)				while(( (bool)(key6->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 651)					::String key7 = ( (::String)(key6->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 653)					this->_definition_index->remove(key7);
            				}
            			}
HXLINE( 655)			this->_definition_index = null();
            		}
HXLINE( 657)		if (::hx::IsNotNull( this->_variable_index )) {
HXLINE( 659)			{
HXLINE( 659)				 ::Dynamic key8 = this->_variable_index->keys();
HXDLIN( 659)				while(( (bool)(key8->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 659)					::String key9 = ( (::String)(key8->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 661)					this->_variable_index->remove(key9);
            				}
            			}
HXLINE( 663)			this->_variable_index = null();
            		}
HXLINE( 665)		if (::hx::IsNotNull( this->_mode_index )) {
HXLINE( 667)			{
HXLINE( 667)				 ::Dynamic key10 = this->_mode_index->keys();
HXDLIN( 667)				while(( (bool)(key10->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 667)					::String key11 = ( (::String)(key10->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 669)					this->_mode_index->remove(key11);
            				}
            			}
HXLINE( 671)			this->_mode_index = null();
            		}
HXLINE( 673)		this->_ptr = null();
HXLINE( 674)		this->_superIndexUI = null();
HXLINE( 675)		this->_ptr_tongue = null();
HXLINE( 676)		if (::hx::IsNotNull( this->cursorLists )) {
HXLINE( 678)			{
HXLINE( 678)				int _g = 0;
HXDLIN( 678)				::Array< ::Dynamic> _g1 = this->cursorLists;
HXDLIN( 678)				while((_g < _g1->length)){
HXLINE( 678)					::Array< ::Dynamic> arr = _g1->__get(_g).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 678)					_g = (_g + 1);
HXLINE( 680)					::flixel::util::FlxArrayUtil_obj::clearArray(arr,null());
            				}
            			}
HXLINE( 682)			::flixel::util::FlxArrayUtil_obj::clearArray(this->cursorLists,null());
            		}
HXLINE( 684)		this->cursorLists = null();
HXLINE( 685)		::flixel::util::FlxArrayUtil_obj::clearArray(this->_failure_checks,null());
HXLINE( 686)		this->_failure_checks = null();
HXLINE( 687)		::flixel::util::FlxArrayUtil_obj::clearArray(this->_assetsToCleanUp,null());
HXLINE( 688)		this->_assetsToCleanUp = null();
HXLINE( 689)		::flixel::util::FlxArrayUtil_obj::clearArray(this->_scaledAssets,null());
HXLINE( 690)		this->_scaledAssets = null();
HXLINE( 691)		this->super::destroy();
            	}


void FlxUI_obj::load( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_701_load)
HXLINE( 702)		this->_group_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 703)		this->_asset_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 704)		this->_tag_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 705)		this->_definition_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 706)		if (::hx::IsNull( this->_variable_index )) {
HXLINE( 708)			this->_variable_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
HXLINE( 710)		this->_mode_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 712)		if (::hx::IsNotNull( data )) {
HXLINE( 714)			if (::hx::IsNull( this->_superIndexUI )) {
HXLINE( 717)				 ::flixel::addons::ui::FlxUIRegion screenRegion =  ::flixel::addons::ui::FlxUIRegion_obj::__alloc( HX_CTX ,0,0,::flixel::FlxG_obj::width,::flixel::FlxG_obj::height);
HXLINE( 718)				screenRegion->name = HX_("screen",6c,3b,5d,47);
HXLINE( 719)				this->addAsset(screenRegion,HX_("screen",6c,3b,5d,47),null(),null());
HXLINE( 721)				if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("screen_override",bf,10,cc,3e))) {
HXLINE( 723)					if (this->_loadTest(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("screen_override",bf,10,cc,3e)))) {
HXLINE( 725)						 ::Xml screenNode = ::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("screen_override",bf,10,cc,3e));
HXLINE( 726)						this->_loadPosition(screenNode,screenRegion);
HXLINE( 727)						screenRegion->set_width(this->_loadWidth(screenNode,::flixel::FlxG_obj::width,null(),null()));
HXLINE( 728)						screenRegion->set_height(this->_loadHeight(screenNode,::flixel::FlxG_obj::height,null(),null()));
            					}
            				}
            			}
HXLINE( 733)			this->_data = data;
HXLINE( 735)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("inject",91,4a,ea,97))) {
HXLINE( 737)				while(::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("inject",91,4a,ea,97))){
HXLINE( 739)					 ::Xml inj_data = ::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("inject",91,4a,ea,97));
HXLINE( 740)					::String inj_name = ::flixel::addons::ui::U_obj::xml_name(inj_data);
HXLINE( 741)					 ::Xml payload = ( ( ::Xml)(::flixel::addons::ui::U_obj::xml(inj_name,HX_("xml",d7,6d,5b,00),false,null())) );
HXLINE( 742)					if (::hx::IsNotNull( payload )) {
HXLINE( 744)						 ::Xml parent = inj_data->parent;
HXLINE( 745)						int i = 0;
HXLINE( 746)						{
HXLINE( 746)							int _g = 0;
HXDLIN( 746)							::Array< ::Dynamic> _g1 = parent->children;
HXDLIN( 746)							while((_g < _g1->length)){
HXLINE( 746)								 ::Xml child = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN( 746)								_g = (_g + 1);
HXLINE( 748)								if (::hx::IsInstanceEq( child,inj_data )) {
HXLINE( 750)									goto _hx_goto_35;
            								}
HXLINE( 752)								i = (i + 1);
            							}
            							_hx_goto_35:;
            						}
HXLINE( 755)						if (parent->removeChild(inj_data)) {
HXLINE( 757)							int j = 0;
HXLINE( 758)							{
HXLINE( 758)								 ::Dynamic e = payload->elements();
HXDLIN( 758)								while(( (bool)(e->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 758)									 ::Xml e1 = ( ( ::Xml)(e->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 760)									parent->insertChild(e1,(i + j));
HXLINE( 761)									j = (j + 1);
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 769)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("include",28,fe,f6,51))) {
HXLINE( 771)				int _g2 = 0;
HXDLIN( 771)				::Array< ::Dynamic> _g3 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("include",28,fe,f6,51));
HXDLIN( 771)				while((_g2 < _g3->length)){
HXLINE( 771)					 ::Xml inc_data = _g3->__get(_g2).StaticCast<  ::Xml >();
HXDLIN( 771)					_g2 = (_g2 + 1);
HXLINE( 773)					::String inc_name = ::flixel::addons::ui::U_obj::xml_name(inc_data);
HXLINE( 775)					 ::Xml liveFile = null();
HXLINE( 792)					 ::Xml inc_xml = null();
HXLINE( 793)					if (::hx::IsNull( liveFile )) {
HXLINE( 795)						inc_xml = ( ( ::Xml)(::flixel::addons::ui::U_obj::xml(inc_name,null(),null(),null())) );
            					}
            					else {
HXLINE( 799)						inc_xml = liveFile;
            					}
HXLINE( 802)					if (::hx::IsNotNull( inc_xml )) {
HXLINE( 804)						{
HXLINE( 804)							int _g4 = 0;
HXDLIN( 804)							::Array< ::Dynamic> _g5 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(inc_xml,HX_("definition",93,d5,0d,ec));
HXDLIN( 804)							while((_g4 < _g5->length)){
HXLINE( 804)								 ::Xml def_data = _g5->__get(_g4).StaticCast<  ::Xml >();
HXDLIN( 804)								_g4 = (_g4 + 1);
HXLINE( 807)								::String def_name = (HX_("include:",12,65,27,66) + ::flixel::addons::ui::U_obj::xml_name(def_data));
HXLINE( 809)								this->unparentXML(def_data);
HXLINE( 811)								this->_definition_index->set(def_name,def_data);
            							}
            						}
HXLINE( 817)						if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(inc_xml,HX_("point_size",50,66,f5,4b))) {
HXLINE( 819)							this->_loadPointSize(inc_xml);
            						}
HXLINE( 822)						if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(inc_xml,HX_("default",c1,d8,c3,9b))) {
HXLINE( 824)							int _g6 = 0;
HXDLIN( 824)							::Array< ::Dynamic> _g7 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(inc_xml,HX_("default",c1,d8,c3,9b));
HXDLIN( 824)							while((_g6 < _g7->length)){
HXLINE( 824)								 ::Xml defaultNode = _g7->__get(_g6).StaticCast<  ::Xml >();
HXDLIN( 824)								_g6 = (_g6 + 1);
HXLINE( 826)								if (this->_loadTest(defaultNode)) {
HXLINE( 828)									::String defaultName = ::flixel::addons::ui::U_obj::xml_name(defaultNode);
HXLINE( 830)									this->unparentXML(defaultNode);
HXLINE( 832)									this->_definition_index->set((HX_("default:",59,d0,99,af) + defaultName),defaultNode);
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 842)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("point_size",50,66,f5,4b))) {
HXLINE( 844)				this->_loadPointSize(data);
            			}
HXLINE( 848)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("definition",93,d5,0d,ec))) {
HXLINE( 850)				int _g8 = 0;
HXDLIN( 850)				::Array< ::Dynamic> _g9 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("definition",93,d5,0d,ec));
HXDLIN( 850)				while((_g8 < _g9->length)){
HXLINE( 850)					 ::Xml def_data1 = _g9->__get(_g8).StaticCast<  ::Xml >();
HXDLIN( 850)					_g8 = (_g8 + 1);
HXLINE( 852)					if (this->_loadTest(def_data1)) {
HXLINE( 854)						::String def_name1 = ::flixel::addons::ui::U_obj::xml_name(def_data1);
HXLINE( 855)						::String error = HX_("",00,00,00,00);
HXLINE( 856)						if ((def_name1.indexOf(HX_("default:",59,d0,99,af),null()) != -1)) {
HXLINE( 858)							error = HX_("'default:'",a7,c0,54,42);
            						}
HXLINE( 860)						if ((def_name1.indexOf(HX_("include:",12,65,27,66),null()) != -1)) {
HXLINE( 862)							error = HX_("'include:'",ce,4d,a9,47);
            						}
HXLINE( 864)						if ((error != HX_("",00,00,00,00))) {
HXLINE( 866)							::flixel::FlxG_obj::log->advanced(((((HX_("Can't create FlxUI definition '",b5,82,49,00) + def_name1) + HX_("', because '",92,6b,a1,0c)) + error) + HX_("' is a reserved name prefix!",16,78,51,ae)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            						}
            						else {
HXLINE( 870)							this->unparentXML(def_data1);
HXLINE( 872)							this->_definition_index->set(def_name1,def_data1);
            						}
            					}
            				}
            			}
HXLINE( 878)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("default",c1,d8,c3,9b))) {
HXLINE( 880)				int _g10 = 0;
HXDLIN( 880)				::Array< ::Dynamic> _g11 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("default",c1,d8,c3,9b));
HXDLIN( 880)				while((_g10 < _g11->length)){
HXLINE( 880)					 ::Xml defaultNode1 = _g11->__get(_g10).StaticCast<  ::Xml >();
HXDLIN( 880)					_g10 = (_g10 + 1);
HXLINE( 882)					if (this->_loadTest(defaultNode1)) {
HXLINE( 884)						::String defaultName1 = ::flixel::addons::ui::U_obj::xml_name(defaultNode1);
HXLINE( 886)						this->unparentXML(defaultNode1);
HXLINE( 888)						this->_definition_index->set((HX_("default:",59,d0,99,af) + defaultName1),defaultNode1);
            					}
            				}
            			}
HXLINE( 894)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("variable",3c,12,0d,69))) {
HXLINE( 896)				int _g12 = 0;
HXDLIN( 896)				::Array< ::Dynamic> _g13 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("variable",3c,12,0d,69));
HXDLIN( 896)				while((_g12 < _g13->length)){
HXLINE( 896)					 ::Xml var_data = _g13->__get(_g12).StaticCast<  ::Xml >();
HXDLIN( 896)					_g12 = (_g12 + 1);
HXLINE( 898)					if (this->_loadTest(var_data)) {
HXLINE( 900)						::String var_name = ::flixel::addons::ui::U_obj::xml_name(var_data);
HXLINE( 901)						::String var_value = ::flixel::addons::ui::U_obj::xml_str(var_data,HX_("value",71,7f,b8,31),null(),null());
HXLINE( 902)						if ((var_name != HX_("",00,00,00,00))) {
HXLINE( 904)							this->_variable_index->set(var_name,var_value);
            						}
            					}
            				}
            			}
HXLINE( 911)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("mode",63,d3,60,48))) {
HXLINE( 913)				int _g14 = 0;
HXDLIN( 913)				::Array< ::Dynamic> _g15 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("mode",63,d3,60,48));
HXDLIN( 913)				while((_g14 < _g15->length)){
HXLINE( 913)					 ::Xml mode_data = _g15->__get(_g14).StaticCast<  ::Xml >();
HXDLIN( 913)					_g14 = (_g14 + 1);
HXLINE( 915)					if (this->_loadTest(mode_data)) {
HXLINE( 917)						 ::Xml mode_data2 = this->applyNodeConditionals(mode_data);
HXLINE( 918)						::String mode_name = ::flixel::addons::ui::U_obj::xml_name(mode_data);
HXLINE( 921)						this->unparentXML(mode_data2);
HXLINE( 923)						this->_mode_index->set(mode_name,mode_data2);
            					}
            				}
            			}
HXLINE( 929)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("group",3f,b3,f4,99))) {
HXLINE( 931)				int _g16 = 0;
HXDLIN( 931)				::Array< ::Dynamic> _g17 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("group",3f,b3,f4,99));
HXDLIN( 931)				while((_g16 < _g17->length)){
HXLINE( 931)					 ::Xml group_data = _g17->__get(_g16).StaticCast<  ::Xml >();
HXDLIN( 931)					_g16 = (_g16 + 1);
HXLINE( 933)					if (this->_loadTest(group_data)) {
HXLINE( 936)						::String name = ::flixel::addons::ui::U_obj::xml_name(group_data);
HXLINE( 937)						::String custom = ::flixel::addons::ui::U_obj::xml_str(group_data,HX_("custom",b1,87,92,3f),null(),null());
HXLINE( 939)						 ::flixel::addons::ui::FlxTypedUIGroup tempGroup = null();
HXLINE( 942)						if ((custom != HX_("",00,00,00,00))) {
HXLINE( 944)							 ::Dynamic result = ::flixel::addons::ui::interfaces::IEventGetter_obj::getRequest(this->_ptr,HX_("ui_get_group:",2f,b3,b6,b7),::hx::ObjectPtr<OBJ_>(this),custom,null());
HXLINE( 945)							bool _hx_tmp;
HXDLIN( 945)							if (::hx::IsNotNull( result )) {
HXLINE( 945)								_hx_tmp = ::Std_obj::isOfType(result,::hx::ClassOf< ::flixel::addons::ui::FlxTypedUIGroup >());
            							}
            							else {
HXLINE( 945)								_hx_tmp = false;
            							}
HXDLIN( 945)							if (_hx_tmp) {
HXLINE( 947)								tempGroup = ( ( ::flixel::addons::ui::FlxTypedUIGroup)(result) );
            							}
            						}
HXLINE( 951)						if (::hx::IsNull( tempGroup )) {
HXLINE( 953)							tempGroup =  ::flixel::addons::ui::FlxTypedUIGroup_obj::__alloc( HX_CTX ,null(),null());
            						}
HXLINE( 956)						tempGroup->name = name;
HXLINE( 957)						this->_group_index->set(name,tempGroup);
HXLINE( 958)						this->add(tempGroup);
            					}
            				}
            			}
HXLINE( 963)			if (::hx::IsNotNull( data->firstElement() )) {
HXLINE( 966)				 ::Dynamic node = data->elements();
HXDLIN( 966)				while(( (bool)(node->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 966)					 ::Xml node1 = ( ( ::Xml)(node->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 968)					this->_loadSub(node1,null());
            				}
            			}
HXLINE( 972)			this->_postLoad(data);
            		}
            		else {
HXLINE( 976)			this->_onFinishLoad();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,load,(void))

 ::Xml FlxUI_obj::unparentXML( ::Xml f){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_982_unparentXML)
HXDLIN( 982)		return ::flixel::addons::ui::U_obj::unparentXML(f);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,unparentXML,return )

void FlxUI_obj::_loadPointSize( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_986__loadPointSize)
HXLINE( 987)		Float ptx = this->_loadWidth(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("point_size",50,66,f5,4b)),((Float)-1.0),HX_("x",78,00,00,00),null());
HXLINE( 988)		Float pty = this->_loadHeight(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("point_size",50,66,f5,4b)),((Float)-1.0),HX_("y",79,00,00,00),null());
HXLINE( 991)		bool _hx_tmp;
HXDLIN( 991)		if ((pty < 1)) {
HXLINE( 991)			_hx_tmp = (ptx < 1);
            		}
            		else {
HXLINE( 991)			_hx_tmp = false;
            		}
HXDLIN( 991)		if (_hx_tmp) {
HXLINE( 993)			pty = this->_loadHeight(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("point_size",50,66,f5,4b)),-1,HX_("value",71,7f,b8,31),null());
HXLINE( 994)			ptx = pty;
            		}
HXLINE( 998)		if ((pty > 0)) {
HXLINE(1000)			this->_pointX = ptx;
            		}
HXLINE(1002)		if ((ptx > 0)) {
HXLINE(1004)			this->_pointY = pty;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadPointSize,(void))

void FlxUI_obj::_loadSub( ::Xml node,::hx::Null< int >  __o_iteration){
            		int iteration = __o_iteration.Default(0);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1009__loadSub)
HXLINE(1010)		if ((node->nodeType != ::Xml_obj::Element)) {
HXLINE(1010)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(node->nodeType)));
            		}
HXDLIN(1010)		::String type = node->nodeName;
HXLINE(1011)		type.toLowerCase();
HXLINE(1012)		bool _hx_tmp;
HXDLIN(1012)		if ((node->nodeType != ::Xml_obj::Document)) {
HXLINE(1012)			_hx_tmp = (node->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE(1012)			_hx_tmp = false;
            		}
HXDLIN(1012)		if (_hx_tmp) {
HXLINE(1012)			HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(node->nodeType)));
            		}
HXDLIN(1012)		 ::Xml obj = node;
HXLINE(1016)		if ((type == HX_("load_if",96,33,eb,08))) {
HXLINE(1018)			if (this->_loadTest(obj)) {
HXLINE(1020)				if (::hx::IsNotNull( node->firstElement() )) {
HXLINE(1022)					 ::Dynamic subNode = node->elements();
HXDLIN(1022)					while(( (bool)(subNode->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1022)						 ::Xml subNode1 = ( ( ::Xml)(subNode->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1024)						this->_loadSub(subNode1,(iteration + 1));
            					}
            				}
            			}
HXLINE(1029)			return;
            		}
HXLINE(1032)		::String group_name = HX_("",00,00,00,00);
HXLINE(1033)		 ::flixel::addons::ui::FlxTypedUIGroup tempGroup = null();
HXLINE(1035)		::String thing_name = ::flixel::addons::ui::U_obj::xml_name(obj);
HXLINE(1037)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(obj,HX_("group",3f,b3,f4,99))) {
HXLINE(1039)			group_name = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(obj,HX_("group",3f,b3,f4,99));
HXLINE(1040)			tempGroup = this->getGroup(group_name,null());
            		}
HXLINE(1044)		::Dynamic thing = this->_loadThing(type,obj);
HXLINE(1046)		if (::hx::IsNotNull( thing )) {
HXLINE(1048)			this->_loadGlobals(obj,thing);
HXLINE(1050)			bool _hx_tmp1;
HXDLIN(1050)			if (::hx::IsNotNull( thing_name )) {
HXLINE(1050)				_hx_tmp1 = (thing_name != HX_("",00,00,00,00));
            			}
            			else {
HXLINE(1050)				_hx_tmp1 = false;
            			}
HXDLIN(1050)			if (_hx_tmp1) {
HXLINE(1052)				this->_asset_index->set(thing_name,thing);
HXLINE(1055)				thing->__SetField(HX_("name",4b,72,ff,48),thing_name,::hx::paccDynamic);
HXLINE(1057)				::String thing_tags = ::flixel::addons::ui::U_obj::xml_str(obj,HX_("tags",d9,b4,f6,4c),null(),null());
HXLINE(1058)				if ((thing_tags != HX_("",00,00,00,00))) {
HXLINE(1060)					::Array< ::String > tagArr = thing_tags.split(HX_(",",2c,00,00,00));
HXLINE(1061)					this->_addTags(tagArr,thing_name);
            				}
            			}
HXLINE(1065)			this->_loadTooltip(thing,obj);
HXLINE(1067)			if (::hx::IsNotNull( tempGroup )) {
HXLINE(1069)				tempGroup->add(( ( ::flixel::FlxSprite)(thing) )).StaticCast<  ::flixel::FlxSprite >();
            			}
            			else {
HXLINE(1073)				this->add(( ( ::flixel::FlxSprite)(thing) ));
            			}
HXLINE(1076)			this->_loadPosition(obj,thing);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadSub,(void))

void FlxUI_obj::_addTags(::Array< ::String > arr,::String thingName){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1082__addTags)
HXDLIN(1082)		int _g = 0;
HXDLIN(1082)		while((_g < arr->length)){
HXDLIN(1082)			::String tag = arr->__get(_g);
HXDLIN(1082)			_g = (_g + 1);
HXLINE(1084)			::Array< ::String > list = null();
HXLINE(1085)			if (!(this->_tag_index->exists(tag))) {
HXLINE(1087)				this->_tag_index->set(tag,::Array_obj< ::String >::__new(0));
            			}
HXLINE(1089)			list = ( (::Array< ::String >)(this->_tag_index->get(tag)) );
HXLINE(1090)			if ((list->indexOf(thingName,null()) == -1)) {
HXLINE(1092)				list->push(thingName);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_addTags,(void))

void FlxUI_obj::_loadGlobals( ::Xml data, ::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1099__loadGlobals)
HXDLIN(1099)		if (::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::FlxBasic >())) {
HXLINE(1101)			bool isVis = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("visible",72,78,24,a3),true);
HXLINE(1102)			bool isActive = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("active",c6,41,46,16),true);
HXLINE(1103)			int numID = ::flixel::addons::ui::U_obj::xml_i(data,HX_("num_id",74,43,78,a1),null());
HXLINE(1105)			thing->__SetField(HX_("visible",72,78,24,a3),isVis,::hx::paccDynamic);
HXLINE(1106)			thing->__SetField(HX_("active",c6,41,46,16),isActive,::hx::paccDynamic);
HXLINE(1107)			thing->__SetField(HX_("ID",db,3f,00,00),numID,::hx::paccDynamic);
HXLINE(1108)			if (::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::FlxSprite >())) {
HXLINE(1110)				Float alpha = ::flixel::addons::ui::U_obj::xml_f(data,HX_("alpha",5e,a7,96,21),((Float)1.0));
HXLINE(1111)				 ::flixel::FlxSprite s = ( ( ::flixel::FlxSprite)(thing) );
HXLINE(1112)				s->set_alpha(alpha);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadGlobals,(void))

void FlxUI_obj::_postLoad( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1118__postLoad)
HXLINE(1119)		this->_postLoaded = true;
HXLINE(1120)		if (::hx::IsNotNull( data->firstElement() )) {
HXLINE(1123)			 ::Dynamic node = data->elements();
HXDLIN(1123)			while(( (bool)(node->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1123)				 ::Xml node1 = ( ( ::Xml)(node->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1125)				if ((node1->nodeType != ::Xml_obj::Element)) {
HXLINE(1125)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(node1->nodeType)));
            				}
HXDLIN(1125)				::String _hx_tmp = node1->nodeName.toLowerCase();
HXDLIN(1125)				bool _hx_tmp1;
HXDLIN(1125)				if ((node1->nodeType != ::Xml_obj::Document)) {
HXLINE(1125)					_hx_tmp1 = (node1->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE(1125)					_hx_tmp1 = false;
            				}
HXDLIN(1125)				if (_hx_tmp1) {
HXLINE(1125)					HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(node1->nodeType)));
            				}
HXDLIN(1125)				this->_postLoadThing(_hx_tmp,node1);
            			}
            		}
HXLINE(1129)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("mode",63,d3,60,48))) {
HXLINE(1131)			int _g = 0;
HXDLIN(1131)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("mode",63,d3,60,48));
HXDLIN(1131)			while((_g < _g1->length)){
HXLINE(1131)				 ::Xml mode_node = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(1131)				_g = (_g + 1);
HXLINE(1133)				bool is_default = ::flixel::addons::ui::U_obj::xml_bool(mode_node,HX_("is_default",2c,88,79,76),null());
HXLINE(1134)				if (is_default) {
HXLINE(1136)					::String mode_name = ::flixel::addons::ui::U_obj::xml_name(mode_node);
HXLINE(1137)					this->setMode(mode_name,null());
HXLINE(1138)					goto _hx_goto_55;
            				}
            			}
            			_hx_goto_55:;
            		}
HXLINE(1143)		if (::hx::IsNotNull( this->_failure_checks )) {
HXLINE(1145)			{
HXLINE(1145)				int _g2 = 0;
HXDLIN(1145)				::Array< ::Dynamic> _g3 = this->_failure_checks;
HXDLIN(1145)				while((_g2 < _g3->length)){
HXLINE(1145)					 ::Xml data1 = _g3->__get(_g2).StaticCast<  ::Xml >();
HXDLIN(1145)					_g2 = (_g2 + 1);
HXLINE(1147)					if (this->_checkFailure(data1)) {
HXLINE(1149)						this->failed = true;
HXLINE(1150)						goto _hx_goto_56;
            					}
            				}
            				_hx_goto_56:;
            			}
HXLINE(1153)			::flixel::addons::ui::U_obj::clearArraySoft(this->_failure_checks);
HXLINE(1154)			this->_failure_checks = null();
            		}
HXLINE(1157)		this->_onFinishLoad();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_postLoad,(void))

void FlxUI_obj::_sendTo(::Dynamic thing,int dir){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1161__sendTo)
HXLINE(1162)		 ::flixel::addons::ui::FlxTypedUIGroup group = this->getAssetGroup(null(),thing);
HXLINE(1163)		if (::hx::IsNull( group )) {
HXLINE(1165)			if ((this->group->members->indexOf(( ( ::flixel::FlxSprite)(thing) ),null()) != -1)) {
HXLINE(1167)				group = ::hx::ObjectPtr<OBJ_>(this);
            			}
            			else {
HXLINE(1171)				return;
            			}
            		}
HXLINE(1174)		bool _hx_tmp;
HXDLIN(1174)		if ((dir != -1)) {
HXLINE(1174)			_hx_tmp = (dir != 1);
            		}
            		else {
HXLINE(1174)			_hx_tmp = false;
            		}
HXDLIN(1174)		if (_hx_tmp) {
HXLINE(1176)			return;
            		}
HXLINE(1179)		group->group->members->remove(( ( ::flixel::FlxSprite)(thing) ));
HXLINE(1181)		switch((int)(dir)){
            			case (int)-1: {
HXLINE(1184)				group->group->members->insert(0,( ( ::flixel::FlxSprite)(thing) ));
            			}
            			break;
            			case (int)1: {
HXLINE(1186)				group->group->members->push(( ( ::flixel::FlxSprite)(thing) ));
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_sendTo,(void))

void FlxUI_obj::sendToFront(::String name,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1196_sendToFront)
HXLINE(1197)		::Dynamic thing = this->getAsset(name,recursive);
HXLINE(1198)		if (::hx::IsNotNull( thing )) {
HXLINE(1199)			this->_sendTo(thing,1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,sendToFront,(void))

void FlxUI_obj::sendToBack(::String name,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1208_sendToBack)
HXLINE(1209)		::Dynamic thing = this->getAsset(name,recursive);
HXLINE(1210)		if (::hx::IsNotNull( thing )) {
HXLINE(1211)			this->_sendTo(thing,-1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,sendToBack,(void))

::String FlxUI_obj::get_currMode(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1218_get_currMode)
HXDLIN(1218)		return this->_curr_mode;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,get_currMode,return )

::String FlxUI_obj::set_currMode(::String m){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1222_set_currMode)
HXLINE(1223)		this->setMode(m,null());
HXLINE(1224)		return this->_curr_mode;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,set_currMode,return )

void FlxUI_obj::setMode(::String mode_name,::String __o_target_name){
            		::String target_name = __o_target_name;
            		if (::hx::IsNull(__o_target_name)) target_name = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1233_setMode)
HXLINE(1234)		if ((this->_curr_mode == mode_name)) {
HXLINE(1236)			return;
            		}
HXLINE(1238)		 ::Xml mode = this->getMode(mode_name,null());
HXLINE(1239)		this->_curr_mode = mode_name;
HXLINE(1240)		::String name = HX_("",00,00,00,00);
HXLINE(1241)		::Dynamic thing;
HXLINE(1242)		if ((target_name == HX_("",00,00,00,00))) {
HXLINE(1244)			if (::hx::IsNotNull( mode )) {
HXLINE(1246)				 ::Xml xml;
HXLINE(1247)				{
HXLINE(1247)					 ::Dynamic node = mode->elements();
HXDLIN(1247)					while(( (bool)(node->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1247)						 ::Xml node1 = ( ( ::Xml)(node->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1249)						 ::Xml node2 = this->applyNodeConditionals(node1);
HXLINE(1250)						xml = node2;
HXLINE(1252)						if ((xml->nodeType != ::Xml_obj::Element)) {
HXLINE(1252)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(xml->nodeType)));
            						}
HXDLIN(1252)						::String nodeName = xml->nodeName;
HXLINE(1255)						 ::Dynamic activeStatus;
HXDLIN(1255)						if ((::flixel::addons::ui::U_obj::xml_str(xml,HX_("active",c6,41,46,16),null(),null()) == HX_("",00,00,00,00))) {
HXLINE(1255)							activeStatus = null();
            						}
            						else {
HXLINE(1255)							activeStatus = true;
            						}
HXLINE(1256)						if (::hx::IsNotNull( activeStatus )) {
HXLINE(1258)							activeStatus = ::flixel::addons::ui::U_obj::xml_bool(xml,HX_("active",c6,41,46,16),null());
            						}
HXLINE(1261)						if (this->_loadTest(node2)) {
HXLINE(1263)							::String _hx_switch_0 = nodeName;
            							if (  (_hx_switch_0==HX_("align",c5,56,91,21)) ){
HXLINE(1270)								this->_alignThing(node2,null());
HXDLIN(1270)								goto _hx_goto_64;
            							}
            							if (  (_hx_switch_0==HX_("change",70,91,72,b7)) ){
HXLINE(1272)								this->_changeThing(node2);
HXDLIN(1272)								goto _hx_goto_64;
            							}
            							if (  (_hx_switch_0==HX_("hide",c2,34,0e,45)) ){
HXLINE(1268)								this->showThing(::flixel::addons::ui::U_obj::xml_name(xml),false,activeStatus);
HXDLIN(1268)								goto _hx_goto_64;
            							}
            							if (  (_hx_switch_0==HX_("position",a9,a0,fa,ca)) ){
HXLINE(1274)								name = ::flixel::addons::ui::U_obj::xml_name(xml);
HXLINE(1275)								thing = this->getAsset(name,null());
HXLINE(1276)								if (::hx::IsNotNull( thing )) {
HXLINE(1278)									this->_loadPosition(node2,thing);
            								}
HXLINE(1273)								goto _hx_goto_64;
            							}
            							if (  (_hx_switch_0==HX_("show",fd,d4,52,4c)) ){
HXLINE(1266)								this->showThing(::flixel::addons::ui::U_obj::xml_name(xml),true,activeStatus);
HXDLIN(1266)								goto _hx_goto_64;
            							}
            							_hx_goto_64:;
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(1287)			::Dynamic target = this->getAsset(target_name,null());
HXLINE(1288)			bool _hx_tmp;
HXDLIN(1288)			if (::hx::IsNotNull( target )) {
HXLINE(1288)				_hx_tmp = ::Std_obj::isOfType(target,::hx::ClassOf< ::flixel::addons::ui::FlxUI >());
            			}
            			else {
HXLINE(1288)				_hx_tmp = false;
            			}
HXDLIN(1288)			if (_hx_tmp) {
HXLINE(1290)				 ::flixel::addons::ui::FlxUI targetUI = ::hx::TCast<  ::flixel::addons::ui::FlxUI >::cast(target);
HXLINE(1291)				targetUI->setMode(mode_name,HX_("",00,00,00,00));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,setMode,(void))

void FlxUI_obj::showThing(::String name,::hx::Null< bool >  __o_visibleStatus, ::Dynamic activeStatus){
            		bool visibleStatus = __o_visibleStatus.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1298_showThing)
HXDLIN(1298)		if ((name.indexOf(HX_(",",2c,00,00,00),null()) != -1)) {
HXLINE(1300)			::Array< ::String > names = name.split(HX_(",",2c,00,00,00));
HXLINE(1301)			{
HXLINE(1301)				int _g = 0;
HXDLIN(1301)				while((_g < names->length)){
HXLINE(1301)					::String each_name = names->__get(_g);
HXDLIN(1301)					_g = (_g + 1);
HXLINE(1303)					::Dynamic thing = this->getAsset(each_name,null());
HXLINE(1304)					if (::hx::IsNotNull( thing )) {
HXLINE(1306)						::flixel::IFlxBasic_obj::set_visible(thing,visibleStatus);
HXLINE(1307)						if (::hx::IsNotNull( activeStatus )) {
HXLINE(1309)							::flixel::IFlxBasic_obj::set_active(thing,activeStatus);
            						}
            					}
            					else {
HXLINE(1314)						 ::flixel::addons::ui::FlxTypedUIGroup group = this->getGroup(each_name,null());
HXLINE(1315)						if (::hx::IsNotNull( group )) {
HXLINE(1317)							group->set_visible(visibleStatus);
HXLINE(1318)							if (::hx::IsNotNull( activeStatus )) {
HXLINE(1320)								group->set_active(( (bool)(activeStatus) ));
            							}
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(1328)			if ((name != HX_("*",2a,00,00,00))) {
HXLINE(1330)				::Dynamic thing1 = this->getAsset(name,null());
HXLINE(1331)				if (::hx::IsNotNull( thing1 )) {
HXLINE(1333)					::flixel::IFlxBasic_obj::set_visible(thing1,visibleStatus);
HXLINE(1334)					if (::hx::IsNotNull( activeStatus )) {
HXLINE(1336)						::flixel::IFlxBasic_obj::set_active(thing1,activeStatus);
            					}
            				}
            				else {
HXLINE(1341)					 ::flixel::addons::ui::FlxTypedUIGroup group1 = this->getGroup(name,null());
HXLINE(1342)					if (::hx::IsNotNull( group1 )) {
HXLINE(1344)						group1->set_visible(visibleStatus);
HXLINE(1345)						if (::hx::IsNotNull( activeStatus )) {
HXLINE(1347)							group1->set_active(( (bool)(activeStatus) ));
            						}
            					}
            				}
            			}
            			else {
HXLINE(1354)				 ::Dynamic asset_name = this->_asset_index->keys();
HXDLIN(1354)				while(( (bool)(asset_name->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1354)					::String asset_name1 = ( (::String)(asset_name->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1356)					if ((asset_name1 != HX_("*",2a,00,00,00))) {
HXLINE(1358)						this->showThing(asset_name1,visibleStatus,activeStatus);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,showThing,(void))

 ::flixel::addons::ui::FlxTypedUIGroup FlxUI_obj::getGroup(::String key,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1367_getGroup)
HXLINE(1368)		 ::flixel::addons::ui::FlxTypedUIGroup tempGroup = ( ( ::flixel::addons::ui::FlxTypedUIGroup)(this->_group_index->get(key)) );
HXLINE(1369)		bool _hx_tmp;
HXDLIN(1369)		bool _hx_tmp1;
HXDLIN(1369)		if (::hx::IsNull( tempGroup )) {
HXLINE(1369)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1369)			_hx_tmp1 = false;
            		}
HXDLIN(1369)		if (_hx_tmp1) {
HXLINE(1369)			_hx_tmp = ::hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1369)			_hx_tmp = false;
            		}
HXDLIN(1369)		if (_hx_tmp) {
HXLINE(1371)			return this->_superIndexUI->getGroup(key,recursive);
            		}
HXLINE(1373)		return tempGroup;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getGroup,return )

 ::flixel::text::FlxText FlxUI_obj::getFlxText(::String key,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1377_getFlxText)
HXLINE(1378)		::Dynamic asset = this->getAsset(key,recursive);
HXLINE(1379)		if (::hx::IsNotNull( asset )) {
HXLINE(1381)			if (::Std_obj::isOfType(asset,::hx::ClassOf< ::flixel::text::FlxText >())) {
HXLINE(1383)				return ::hx::TCast<  ::flixel::text::FlxText >::cast(asset);
            			}
            		}
HXLINE(1386)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getFlxText,return )

::Array< ::Dynamic> FlxUI_obj::getAllAssets(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1390_getAllAssets)
HXLINE(1391)		::Array< ::Dynamic> arr = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1392)		{
HXLINE(1392)			 ::Dynamic key = this->_asset_index->keys();
HXDLIN(1392)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1392)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1394)				arr->push(this->getAsset(key1,null()));
            			}
            		}
HXLINE(1396)		return arr;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,getAllAssets,return )

::Array< ::String > FlxUI_obj::getAssetKeys(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1400_getAssetKeys)
HXLINE(1401)		::Array< ::String > arr = ::Array_obj< ::String >::__new(0);
HXLINE(1402)		{
HXLINE(1402)			 ::Dynamic key = this->_asset_index->keys();
HXDLIN(1402)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1402)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1404)				arr->push(key1);
            			}
            		}
HXLINE(1406)		return arr;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,getAssetKeys,return )

bool FlxUI_obj::hasAsset(::String key,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1410_hasAsset)
HXLINE(1411)		if (this->_asset_index->exists(key)) {
HXLINE(1413)			return true;
            		}
HXLINE(1415)		bool _hx_tmp;
HXDLIN(1415)		if (recursive) {
HXLINE(1415)			_hx_tmp = ::hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1415)			_hx_tmp = false;
            		}
HXDLIN(1415)		if (_hx_tmp) {
HXLINE(1417)			return this->_superIndexUI->hasAsset(key,recursive);
            		}
HXLINE(1419)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,hasAsset,return )

::Dynamic FlxUI_obj::getAsset(::String key,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1423_getAsset)
HXLINE(1424)		::Dynamic asset = this->_asset_index->get(key);
HXLINE(1425)		bool _hx_tmp;
HXDLIN(1425)		bool _hx_tmp1;
HXDLIN(1425)		if (::hx::IsNull( asset )) {
HXLINE(1425)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1425)			_hx_tmp1 = false;
            		}
HXDLIN(1425)		if (_hx_tmp1) {
HXLINE(1425)			_hx_tmp = ::hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1425)			_hx_tmp = false;
            		}
HXDLIN(1425)		if (_hx_tmp) {
HXLINE(1427)			return this->_superIndexUI->getAsset(key,recursive);
            		}
HXLINE(1429)		return asset;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getAsset,return )

::Array< ::Dynamic> FlxUI_obj::getAssetsWithTag(::String tag){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1433_getAssetsWithTag)
HXLINE(1434)		if (this->_tag_index->exists(tag)) {
HXLINE(1436)			::Array< ::String > list = ( (::Array< ::String >)(this->_tag_index->get(tag)) );
HXLINE(1437)			bool _hx_tmp;
HXDLIN(1437)			if (::hx::IsNotNull( list )) {
HXLINE(1437)				_hx_tmp = (list->length == 0);
            			}
            			else {
HXLINE(1437)				_hx_tmp = true;
            			}
HXDLIN(1437)			if (_hx_tmp) {
HXLINE(1438)				return null();
            			}
HXLINE(1439)			::Array< ::Dynamic> arr = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1440)			{
HXLINE(1440)				int _g = 0;
HXDLIN(1440)				while((_g < list->length)){
HXLINE(1440)					::String key = list->__get(_g);
HXDLIN(1440)					_g = (_g + 1);
HXLINE(1442)					::Dynamic widget = this->getAsset(key,null());
HXLINE(1443)					if (::hx::IsNotNull( widget )) {
HXLINE(1445)						arr->push(widget);
            					}
            				}
            			}
HXLINE(1448)			return arr;
            		}
HXLINE(1450)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,getAssetsWithTag,return )

 ::flixel::addons::ui::FlxTypedUIGroup FlxUI_obj::getAssetGroup(::String key,::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1460_getAssetGroup)
HXLINE(1461)		bool _hx_tmp;
HXDLIN(1461)		if (::hx::IsNull( thing )) {
HXLINE(1461)			if (::hx::IsNotNull( key )) {
HXLINE(1461)				_hx_tmp = (key == HX_("",00,00,00,00));
            			}
            			else {
HXLINE(1461)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(1461)			_hx_tmp = false;
            		}
HXDLIN(1461)		if (_hx_tmp) {
HXLINE(1462)			return null();
            		}
HXLINE(1463)		if (::hx::IsNull( thing )) {
HXLINE(1464)			thing = this->getAsset(key,null());
            		}
HXLINE(1465)		if (::hx::IsNull( thing )) {
HXLINE(1466)			return null();
            		}
HXLINE(1468)		{
HXLINE(1468)			 ::Dynamic key1 = this->_group_index->keys();
HXDLIN(1468)			while(( (bool)(key1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1468)				::String key2 = ( (::String)(key1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1470)				 ::flixel::addons::ui::FlxTypedUIGroup g = ( ( ::flixel::addons::ui::FlxTypedUIGroup)(this->_group_index->get(key2)) );
HXLINE(1471)				if ((g->group->members->indexOf(( ( ::flixel::FlxSprite)(thing) ),null()) != -1)) {
HXLINE(1473)					return g;
            				}
            			}
            		}
HXLINE(1477)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getAssetGroup,return )

 ::Xml FlxUI_obj::getMode(::String key,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1481_getMode)
HXLINE(1482)		 ::Xml mode = ( ( ::Xml)(this->_mode_index->get(key)) );
HXLINE(1483)		bool _hx_tmp;
HXDLIN(1483)		bool _hx_tmp1;
HXDLIN(1483)		if (::hx::IsNull( mode )) {
HXLINE(1483)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1483)			_hx_tmp1 = false;
            		}
HXDLIN(1483)		if (_hx_tmp1) {
HXLINE(1483)			_hx_tmp = ::hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1483)			_hx_tmp = false;
            		}
HXDLIN(1483)		if (_hx_tmp) {
HXLINE(1485)			return this->_superIndexUI->getMode(key,recursive);
            		}
HXLINE(1487)		return mode;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getMode,return )

 ::flixel::addons::ui::ButtonLabelStyle FlxUI_obj::getLabelStyleFromDefinition(::String key,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1491_getLabelStyleFromDefinition)
HXLINE(1492)		 ::Xml definition = this->getDefinition(key,recursive);
HXLINE(1493)		if (::hx::IsNotNull( definition )) {
HXLINE(1495)			 ::flixel::addons::ui::FontDef fontDef = this->_loadFontDef(definition);
HXLINE(1496)			::String align = ::flixel::addons::ui::U_obj::xml_str(definition,HX_("align",c5,56,91,21),null(),null());
HXLINE(1497)			if ((align == HX_("",00,00,00,00))) {
HXLINE(1499)				align = null();
            			}
HXLINE(1501)			int color = this->_loadColor(definition,null(),null());
HXLINE(1502)			 ::flixel::addons::ui::BorderDef border = this->_loadBorder(definition);
HXLINE(1503)			return  ::flixel::addons::ui::ButtonLabelStyle_obj::__alloc( HX_CTX ,fontDef,align,color,border);
            		}
HXLINE(1505)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getLabelStyleFromDefinition,return )

 ::flixel::addons::ui::ButtonLabelStyle FlxUI_obj::getLabelStyleFromData( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1509_getLabelStyleFromData)
HXLINE(1510)		 ::flixel::addons::ui::FontDef fontDef = this->_loadFontDef(data);
HXLINE(1511)		::String align = ::flixel::addons::ui::U_obj::xml_str(data,HX_("align",c5,56,91,21),null(),null());
HXLINE(1512)		if ((align == HX_("",00,00,00,00))) {
HXLINE(1514)			align = null();
            		}
HXLINE(1516)		int color = this->_loadColor(data,null(),null());
HXLINE(1517)		 ::flixel::addons::ui::BorderDef border = this->_loadBorder(data);
HXLINE(1518)		return  ::flixel::addons::ui::ButtonLabelStyle_obj::__alloc( HX_CTX ,fontDef,align,color,border);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,getLabelStyleFromData,return )

bool FlxUI_obj::checkVariable(::String key,::String otherValue,::String type,::String __o_op,::hx::Null< bool >  __o_recursive){
            		::String op = __o_op;
            		if (::hx::IsNull(__o_op)) op = HX_("==",60,35,00,00);
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1522_checkVariable)
HXLINE(1523)		::String variable = this->getVariable(key,recursive);
HXLINE(1524)		if (::hx::IsNotNull( variable )) {
HXLINE(1526)			return ::flixel::addons::ui::U_obj::compareStringVars(variable,otherValue,type,op);
            		}
            		else {
HXLINE(1530)			return ::flixel::addons::ui::U_obj::compareStringVars(HX_("",00,00,00,00),otherValue,type,op);
            		}
HXLINE(1524)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxUI_obj,checkVariable,return )

void FlxUI_obj::setVariable(::String key,::String value){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1536_setVariable)
HXDLIN(1536)		this->_variable_index->set(key,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,setVariable,(void))

::String FlxUI_obj::getVariable(::String key,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1540_getVariable)
HXLINE(1541)		::String variable = this->_variable_index->get_string(key);
HXLINE(1542)		bool _hx_tmp;
HXDLIN(1542)		bool _hx_tmp1;
HXDLIN(1542)		if (::hx::IsNull( variable )) {
HXLINE(1542)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1542)			_hx_tmp1 = false;
            		}
HXDLIN(1542)		if (_hx_tmp1) {
HXLINE(1542)			_hx_tmp = ::hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1542)			_hx_tmp = false;
            		}
HXDLIN(1542)		if (_hx_tmp) {
HXLINE(1544)			variable = this->_superIndexUI->getVariable(key,recursive);
            		}
HXLINE(1546)		return variable;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getVariable,return )

 ::Xml FlxUI_obj::getDefinition(::String key,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1550_getDefinition)
HXLINE(1551)		 ::Xml definition = ( ( ::Xml)(this->_definition_index->get(key)) );
HXLINE(1552)		bool _hx_tmp;
HXDLIN(1552)		bool _hx_tmp1;
HXDLIN(1552)		if (::hx::IsNull( definition )) {
HXLINE(1552)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1552)			_hx_tmp1 = false;
            		}
HXDLIN(1552)		if (_hx_tmp1) {
HXLINE(1552)			_hx_tmp = ::hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1552)			_hx_tmp = false;
            		}
HXDLIN(1552)		if (_hx_tmp) {
HXLINE(1554)			definition = this->_superIndexUI->getDefinition(key,recursive);
            		}
HXLINE(1556)		if (::hx::IsNull( definition )) {
HXLINE(1558)			if ((key.indexOf(HX_("include:",12,65,27,66),null()) == -1)) {
HXLINE(1562)				definition = this->getDefinition((HX_("include:",12,65,27,66) + key),recursive);
            			}
            		}
HXLINE(1566)		return definition;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getDefinition,return )

int FlxUI_obj::screenWidth(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1600_screenWidth)
HXLINE(1601)		if (this->hasAsset(HX_("screen",6c,3b,5d,47),null())) {
HXLINE(1603)			return ::Std_obj::_hx_int(::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(this->getAsset(HX_("screen",6c,3b,5d,47),null())));
            		}
HXLINE(1605)		return ::flixel::FlxG_obj::width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,screenWidth,return )

Float FlxUI_obj::screenHeight(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1609_screenHeight)
HXLINE(1610)		if (this->hasAsset(HX_("height",e7,07,4c,02),null())) {
HXLINE(1612)			return ( (Float)(::Std_obj::_hx_int(::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(this->getAsset(HX_("screen",6c,3b,5d,47),null())))) );
            		}
HXLINE(1614)		return ( (Float)(::flixel::FlxG_obj::height) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,screenHeight,return )

void FlxUI_obj::replaceInGroup( ::flixel::FlxSprite original, ::flixel::FlxSprite replace,::hx::Null< bool >  __o_splice){
            		bool splice = __o_splice.Default(false);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1650_replaceInGroup)
HXLINE(1653)		if (::hx::IsNotNull( this->_group_index )) {
HXLINE(1655)			 ::Dynamic key = this->_group_index->keys();
HXDLIN(1655)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1655)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1657)				 ::flixel::addons::ui::FlxTypedUIGroup tempGroup = ( ( ::flixel::addons::ui::FlxTypedUIGroup)(this->_group_index->get(key1)) );
HXLINE(1658)				if (::hx::IsNotNull( tempGroup->group->members )) {
HXLINE(1660)					int i = 0;
HXLINE(1661)					{
HXLINE(1661)						int _g = 0;
HXDLIN(1661)						::Array< ::Dynamic> _g1 = tempGroup->group->members;
HXDLIN(1661)						while((_g < _g1->length)){
HXLINE(1661)							 ::flixel::FlxSprite member = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(1661)							_g = (_g + 1);
HXLINE(1663)							if (::hx::IsNotNull( member )) {
HXLINE(1665)								if (::hx::IsInstanceEq( member,original )) {
HXLINE(1667)									tempGroup->group->members->set(i,replace);
HXLINE(1668)									if (::hx::IsNull( replace )) {
HXLINE(1670)										if (splice) {
HXLINE(1672)											tempGroup->group->members->splice(i,1);
HXLINE(1673)											i = (i - 1);
            										}
            									}
HXLINE(1676)									return;
            								}
HXLINE(1678)								i = (i + 1);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1686)		if (::hx::IsNotNull( this->group->members )) {
HXLINE(1688)			int i1 = 0;
HXLINE(1689)			{
HXLINE(1689)				int _g2 = 0;
HXDLIN(1689)				::Array< ::Dynamic> _g3 = this->group->members;
HXDLIN(1689)				while((_g2 < _g3->length)){
HXLINE(1689)					 ::flixel::FlxSprite member1 = _g3->__get(_g2).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(1689)					_g2 = (_g2 + 1);
HXLINE(1691)					if (::hx::IsNotNull( member1 )) {
HXLINE(1693)						if (::hx::IsInstanceEq( member1,original )) {
HXLINE(1695)							this->group->members->set(i1,replace);
HXLINE(1696)							if (::hx::IsNull( replace )) {
HXLINE(1698)								if (splice) {
HXLINE(1700)									this->group->members->splice(i1,1);
HXLINE(1701)									i1 = (i1 - 1);
            								}
            							}
HXLINE(1704)							return;
            						}
            					}
HXLINE(1707)					i1 = (i1 + 1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,replaceInGroup,(void))

 ::Xml FlxUI_obj::applyNodeConditionals( ::Xml info){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1714_applyNodeConditionals)
HXLINE(1715)		bool _hx_tmp;
HXDLIN(1715)		if (!(::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(info,HX_("locale",9a,74,bf,59)))) {
HXLINE(1715)			_hx_tmp = ::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(info,HX_("haxedef",5f,a1,7a,08));
            		}
            		else {
HXLINE(1715)			_hx_tmp = true;
            		}
HXDLIN(1715)		if (_hx_tmp) {
HXLINE(1717)			 ::Xml x = ::Xml_obj::parse(::haxe::xml::Printer_obj::print(info,null()))->firstElement();
HXDLIN(1717)			bool info1;
HXDLIN(1717)			if ((x->nodeType != ::Xml_obj::Document)) {
HXLINE(1717)				info1 = (x->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(1717)				info1 = false;
            			}
HXDLIN(1717)			if (info1) {
HXLINE(1717)				HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(x->nodeType)));
            			}
HXDLIN(1717)			info = x;
HXLINE(1719)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(info,HX_("locale",9a,74,bf,59))) {
HXLINE(1721)				info = this->applyNodeChanges(info,HX_("locale",9a,74,bf,59));
            			}
HXLINE(1724)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(info,HX_("haxedef",5f,a1,7a,08))) {
HXLINE(1726)				info = this->applyNodeChanges(info,HX_("haxedef",5f,a1,7a,08));
            			}
HXLINE(1729)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(info,HX_("window",f0,93,8c,52))) {
HXLINE(1731)				info = this->applyNodeChanges(info,HX_("window",f0,93,8c,52));
            			}
            		}
HXLINE(1734)		return info;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,applyNodeConditionals,return )

 ::Xml FlxUI_obj::applyNodeChanges( ::Xml data,::String nodeName){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1743_applyNodeChanges)
HXLINE(1746)		::String nodeValue = HX_("",00,00,00,00);
HXLINE(1749)		if ((nodeName == HX_("locale",9a,74,bf,59))) {
HXLINE(1751)			if (::hx::IsNull( this->_ptr_tongue )) {
HXLINE(1753)				return data;
            			}
HXLINE(1755)			nodeValue = ( (::String)(this->_ptr_tongue->__Field(HX_("locale",9a,74,bf,59),::hx::paccDynamic)) ).toLowerCase();
            		}
HXLINE(1759)		bool haxedef = false;
HXLINE(1760)		if ((nodeName == HX_("haxedef",5f,a1,7a,08))) {
HXLINE(1762)			haxedef = true;
            		}
HXLINE(1766)		if ((nodeName == HX_("window",f0,93,8c,52))) {
HXLINE(1768)			nodeValue = ((::flixel::FlxG_obj::width + HX_(",",2c,00,00,00)) + ::flixel::FlxG_obj::height);
            		}
HXLINE(1771)		{
HXLINE(1771)			int _g = 0;
HXDLIN(1771)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,nodeName);
HXDLIN(1771)			while((_g < _g1->length)){
HXLINE(1771)				 ::Xml cNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(1771)				_g = (_g + 1);
HXLINE(1773)				::String cname = ::flixel::addons::ui::U_obj::xml_name(cNode);
HXLINE(1775)				if (haxedef) {
HXLINE(1777)					nodeValue = HX_("",00,00,00,00);
HXLINE(1778)					if (::flixel::addons::ui::U_obj::checkHaxedef(cname)) {
HXLINE(1780)						nodeValue = cname;
            					}
            				}
HXLINE(1784)				if ((cname == nodeValue)) {
HXLINE(1786)					if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(cNode,HX_("change",70,91,72,b7))) {
HXLINE(1788)						int _g2 = 0;
HXDLIN(1788)						::Array< ::Dynamic> _g3 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(cNode,HX_("change",70,91,72,b7));
HXDLIN(1788)						while((_g2 < _g3->length)){
HXLINE(1788)							 ::Xml change = _g3->__get(_g2).StaticCast<  ::Xml >();
HXDLIN(1788)							_g2 = (_g2 + 1);
HXLINE(1790)							{
HXLINE(1790)								 ::Dynamic att = change->attributes();
HXDLIN(1790)								while(( (bool)(att->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1790)									::String att1 = ( (::String)(att->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1792)									::String value = change->get(att1);
HXLINE(1793)									data->set(att1,value);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1800)		return data;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,applyNodeChanges,return )

::Dynamic FlxUI_obj::loadThing(::String type, ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1811_loadThing)
HXDLIN(1811)		return this->_loadThing(type,data);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,loadThing,return )

 ::Xml FlxUI_obj::_loadThingGetInfo( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1815__loadThingGetInfo)
HXLINE(1816)		 ::Xml _this = data;
HXDLIN(1816)		if ((_this->nodeType != ::Xml_obj::Element)) {
HXLINE(1816)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            		}
HXDLIN(1816)		::String nodeName = _this->nodeName;
HXLINE(1817)		 ::Xml defaultDef = this->getDefinition((HX_("default:",59,d0,99,af) + nodeName),null());
HXLINE(1822)		 ::Xml info = null();
HXLINE(1823)		if (::hx::IsNotNull( defaultDef )) {
HXLINE(1825)			info = ::flixel::addons::ui::FlxUI_obj::consolidateData(data,defaultDef,true);
            		}
HXLINE(1828)		if (::hx::IsNull( info )) {
HXLINE(1830)			info = data;
            		}
HXLINE(1833)		::String use_def = ::flixel::addons::ui::U_obj::xml_str(info,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(1834)		 ::Xml definition = null();
HXLINE(1835)		if ((use_def != HX_("",00,00,00,00))) {
HXLINE(1837)			definition = this->getDefinition(use_def,null());
            		}
HXLINE(1840)		info = ::flixel::addons::ui::FlxUI_obj::consolidateData(info,definition,null());
HXLINE(1841)		info = this->applyNodeConditionals(info);
HXLINE(1843)		if ((this->_loadTest(info) == false)) {
HXLINE(1845)			return null();
            		}
HXLINE(1848)		return info;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadThingGetInfo,return )

void FlxUI_obj::_loadTooltip(::Dynamic thing, ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1853__loadTooltip)
HXDLIN(1853)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("tooltip",03,ad,8c,6a))) {
HXLINE(1855)			 ::Dynamic tt = this->_loadTooltipData(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("tooltip",03,ad,8c,6a)));
HXLINE(1856)			::Dynamic state = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXLINE(1858)			if (::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::addons::ui::FlxUICheckBox >())) {
HXLINE(1860)				 ::flixel::addons::ui::FlxUICheckBox check = ( ( ::flixel::addons::ui::FlxUICheckBox)(thing) );
HXLINE(1861)				( ( ::flixel::addons::ui::FlxUITooltipManager)(state->__Field(HX_("tooltips",10,b6,8a,d0),::hx::paccDynamic)) )->add(check->button,tt);
            			}
            			else {
HXLINE(1865)				( ( ::flixel::addons::ui::FlxUITooltipManager)(state->__Field(HX_("tooltips",10,b6,8a,d0),::hx::paccDynamic)) )->add(( ( ::flixel::FlxObject)(thing) ),tt);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadTooltip,(void))

 ::Dynamic FlxUI_obj::_loadTooltipData( ::Xml tNode){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1871__loadTooltipData)
HXLINE(1872)		 ::Dynamic tt =  ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("style",31,a5,1d,84), ::Dynamic(::hx::Anon_obj::Create(18)
            				->setFixed(0,HX_("bodyWidth",04,e0,6a,8a),-1)
            				->setFixed(1,HX_("titleFormat",ef,5a,1a,94),null())
            				->setFixed(2,HX_("autoSizeHorizontal",d4,74,ce,9f),null())
            				->setFixed(3,HX_("bodyOffset",d5,2b,5c,a7),null())
            				->setFixed(4,HX_("bodyBorder",2e,e1,36,ab),null())
            				->setFixed(5,HX_("rightPadding",55,e9,2b,bb),-1)
            				->setFixed(6,HX_("leftPadding",8a,98,10,d0),-1)
            				->setFixed(7,HX_("borderColor",d7,3c,d5,d6),null())
            				->setFixed(8,HX_("titleWidth",4e,c9,47,dc),-1)
            				->setFixed(9,HX_("titleOffset",4b,63,cb,f6),null())
            				->setFixed(10,HX_("titleBorder",a4,18,a6,fa),null())
            				->setFixed(11,HX_("borderSize",cd,ff,ed,06),-1)
            				->setFixed(12,HX_("arrow",c9,79,8f,25),null())
            				->setFixed(13,HX_("background",ee,93,1d,26),null())
            				->setFixed(14,HX_("bottomPadding",26,1e,2d,2b),-1)
            				->setFixed(15,HX_("topPadding",bc,47,4b,3c),-1)
            				->setFixed(16,HX_("bodyFormat",79,23,ab,44),null())
            				->setFixed(17,HX_("autoSizeVertical",66,58,0d,52),null())))
            			->setFixed(1,HX_("title",98,15,3b,10),HX_("",00,00,00,00))
            			->setFixed(2,HX_("body",a2,7a,1b,41),HX_("",00,00,00,00))
            			->setFixed(3,HX_("anchor",75,3a,71,60),null()));
HXLINE(1901)		 ::Xml defaultDef = this->getDefinition(HX_("default:tooltip",ca,89,56,af),null());
HXLINE(1902)		if (::hx::IsNotNull( defaultDef )) {
HXLINE(1904)			tNode = ::flixel::addons::ui::FlxUI_obj::consolidateData(tNode,defaultDef,true);
            		}
HXLINE(1907)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(tNode,HX_("use_def",8d,da,e9,62))) {
HXLINE(1909)			::String defStr = ::flixel::addons::ui::U_obj::xml_str(tNode,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(1910)			 ::Xml def = this->getDefinition(defStr,null());
HXLINE(1911)			if (::hx::IsNotNull( def )) {
HXLINE(1913)				tNode = ::flixel::addons::ui::FlxUI_obj::consolidateData(tNode,def,true);
            			}
            		}
HXLINE(1917)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(tNode,HX_("text",ad,cc,f9,4c))) {
HXLINE(1919)			this->_loadTooltipText(tNode,HX_("text",ad,cc,f9,4c),tt);
            		}
HXLINE(1922)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(tNode,HX_("title",98,15,3b,10))) {
HXLINE(1924)			this->_loadTooltipText(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(tNode,HX_("title",98,15,3b,10)),HX_("text",ad,cc,f9,4c),tt);
            		}
HXLINE(1926)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(tNode,HX_("body",a2,7a,1b,41))) {
HXLINE(1928)			this->_loadTooltipText(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(tNode,HX_("body",a2,7a,1b,41)),HX_("text",ad,cc,f9,4c),tt);
            		}
HXLINE(1931)		tt->__SetField(HX_("anchor",75,3a,71,60),this->_loadAnchor(tNode),::hx::paccDynamic);
HXLINE(1933)		this->_loadTooltipStyle(tNode,tt);
HXLINE(1935)		return tt;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTooltipData,return )

void FlxUI_obj::_loadTooltipStyle( ::Xml node, ::Dynamic tt){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1939__loadTooltipStyle)
HXLINE(1940)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("background",ee,93,1d,26),::flixel::addons::ui::U_obj::xml_color(node,HX_("background",ee,93,1d,26),null(),null()),::hx::paccDynamic);
HXLINE(1941)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("borderSize",cd,ff,ed,06),::flixel::addons::ui::U_obj::xml_i(node,HX_("border",ec,4c,1a,64),-1),::hx::paccDynamic);
HXLINE(1942)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("borderColor",d7,3c,d5,d6),::flixel::addons::ui::U_obj::xml_color(node,HX_("border_color",90,7e,e8,6e),null(),null()),::hx::paccDynamic);
HXLINE(1944)		 ::Dynamic _hx_tmp;
HXDLIN(1944)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(node,HX_("arrow",c9,79,8f,25))) {
HXLINE(1944)			 ::Xml data = node;
HXDLIN(1944)			::String str = HX_("",00,00,00,00);
HXDLIN(1944)			if (::hx::IsNotNull( data->get(HX_("arrow",c9,79,8f,25)) )) {
HXLINE(1944)				str = data->get(HX_("arrow",c9,79,8f,25));
HXDLIN(1944)				bool _hx_tmp1;
HXDLIN(1944)				if ((str != HX_("",00,00,00,00))) {
HXLINE(1944)					_hx_tmp1 = ::hx::IsNull( str );
            				}
            				else {
HXLINE(1944)					_hx_tmp1 = true;
            				}
HXDLIN(1944)				if (_hx_tmp1) {
HXLINE(1944)					str = HX_("",00,00,00,00);
            				}
            				else {
HXLINE(1944)					str = ::flixel::addons::ui::U_obj::gfx(str,null(),null(),null(),null(),null());
HXDLIN(1944)					try {
            						HX_STACK_CATCHABLE(::String, 0);
            						HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE(1944)						if (!(::openfl::utils::Assets_obj::exists(str,HX_("IMAGE",3b,57,57,3b)))) {
HXLINE(1944)							HX_STACK_DO_THROW(((HX_("couldn't load bmp \"",73,a2,6e,30) + HX_("arrow",c9,79,8f,25)) + HX_("\"",22,00,00,00)));
            						}
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass< ::String >() && _hx_e->toString()!=null() ){
            							HX_STACK_BEGIN_CATCH
            							::String msg1 = _hx_e;
HXLINE(1944)							 ::flixel::_hx_system::frontEnds::LogFrontEnd _this1 = ::flixel::FlxG_obj::log;
HXDLIN(1944)							_this1->advanced((HX_("FlxUI: U.xml_gfx() : ",f9,3c,00,4f) + msg1),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            						}
            						else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::haxe::ValueException _g = _hx_e;
HXLINE( 462)							{
HXLINE( 462)								null();
            							}
HXLINE(1944)							if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::String >())) {
HXLINE( 462)								::String msg1 = ( (::String)(_g->value) );
HXLINE(1944)								{
HXLINE(1944)									 ::flixel::_hx_system::frontEnds::LogFrontEnd _this1 = ::flixel::FlxG_obj::log;
HXDLIN(1944)									_this1->advanced((HX_("FlxUI: U.xml_gfx() : ",f9,3c,00,4f) + msg1),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            								}
            							}
            							else {
HXLINE(1944)								HX_STACK_DO_THROW(_g);
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
HXDLIN(1944)			_hx_tmp = str;
            		}
            		else {
HXLINE(1944)			_hx_tmp = null();
            		}
HXDLIN(1944)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("arrow",c9,79,8f,25),_hx_tmp,::hx::paccDynamic);
HXLINE(1946)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("autoSizeHorizontal",d4,74,ce,9f),::flixel::addons::ui::U_obj::xml_bool(node,HX_("auto_size_horizontal",d2,fe,ab,ff),true),::hx::paccDynamic);
HXLINE(1947)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("autoSizeVertical",66,58,0d,52),::flixel::addons::ui::U_obj::xml_bool(node,HX_("auto_size_vertical",e4,c6,93,30),true),::hx::paccDynamic);
HXLINE(1949)		int padAll = ::Std_obj::_hx_int(this->_loadHeight(node,-1,HX_("pad_all",f5,34,29,cd),null()));
HXLINE(1950)		if ((padAll != -1)) {
HXLINE(1952)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("leftPadding",8a,98,10,d0),( ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("rightPadding",55,e9,2b,bb),( ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("topPadding",bc,47,4b,3c),( ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("bottomPadding",26,1e,2d,2b),padAll,::hx::paccDynamic)),::hx::paccDynamic)),::hx::paccDynamic)),::hx::paccDynamic);
            		}
            		else {
HXLINE(1956)			Float _hx_tmp2 = this->_loadWidth(node,0,HX_("pad_left",b3,25,25,be),null());
HXDLIN(1956)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("leftPadding",8a,98,10,d0),::Std_obj::_hx_int(_hx_tmp2),::hx::paccDynamic);
HXLINE(1957)			Float _hx_tmp3 = this->_loadWidth(node,0,HX_("pad_right",b0,e4,68,19),null());
HXDLIN(1957)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("rightPadding",55,e9,2b,bb),::Std_obj::_hx_int(_hx_tmp3),::hx::paccDynamic);
HXLINE(1958)			Float _hx_tmp4 = this->_loadHeight(node,0,HX_("pad_top",69,a2,37,cd),null());
HXDLIN(1958)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("topPadding",bc,47,4b,3c),::Std_obj::_hx_int(_hx_tmp4),::hx::paccDynamic);
HXLINE(1959)			Float _hx_tmp5 = this->_loadHeight(node,0,HX_("pad_bottom",97,c7,b1,39),null());
HXDLIN(1959)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("bottomPadding",26,1e,2d,2b),::Std_obj::_hx_int(_hx_tmp5),::hx::paccDynamic);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadTooltipStyle,(void))

void FlxUI_obj::_loadTooltipText( ::Xml node,::String fieldName, ::Dynamic tt){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1964__loadTooltipText)
HXLINE(1965)		::String nodeName;
HXDLIN(1965)		if ((node->nodeType == ::Xml_obj::Document)) {
HXLINE(1965)			nodeName = HX_("Document",3b,ab,c4,74);
            		}
            		else {
HXLINE(1965)			if ((node->nodeType != ::Xml_obj::Element)) {
HXLINE(1965)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(node->nodeType)));
            			}
HXDLIN(1965)			nodeName = node->nodeName;
            		}
HXLINE(1966)		::String text = this->_loadString(node,fieldName);
HXLINE(1968)		Float x = this->_loadWidth(node,( (Float)(0) ),HX_("x",78,00,00,00),null());
HXDLIN(1968)		Float y = this->_loadHeight(node,( (Float)(0) ),HX_("y",79,00,00,00),null());
HXDLIN(1968)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN(1968)		point->_inPool = false;
HXDLIN(1968)		 ::flixel::math::FlxBasePoint offset = point;
HXLINE(1970)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(node,HX_("use_def",8d,da,e9,62))) {
HXLINE(1972)			::String use_def = ::flixel::addons::ui::U_obj::xml_str(node,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(1973)			 ::Xml the_def = this->getDefinition(use_def,null());
HXLINE(1974)			if (::hx::IsNotNull( the_def )) {
HXLINE(1976)				node = ::flixel::addons::ui::FlxUI_obj::consolidateData(node,the_def,null());
            			}
            		}
HXLINE(1980)		 ::flixel::addons::ui::BorderDef border = this->_loadBorder(node);
HXLINE(1981)		 ::flixel::addons::ui::FontDef format = this->_loadFontDef(node);
HXLINE(1982)		 ::Dynamic color = ::flixel::addons::ui::U_obj::xml_color(node,HX_("color",63,71,5c,4a),true,-16777216);
HXLINE(1983)		format->format->color = color;
HXLINE(1985)		int W = ::Std_obj::_hx_int(this->_loadWidth(node,-1,HX_("width",06,b6,62,ca),null()));
HXLINE(1987)		::String _hx_switch_0 = nodeName;
            		if (  (_hx_switch_0==HX_("body",a2,7a,1b,41)) ){
HXLINE(1999)			if ((text != HX_("",00,00,00,00))) {
HXLINE(2001)				tt->__SetField(HX_("body",a2,7a,1b,41),text,::hx::paccDynamic);
            			}
HXLINE(2003)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("bodyOffset",d5,2b,5c,a7),offset,::hx::paccDynamic);
HXLINE(2004)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("bodyFormat",79,23,ab,44),format,::hx::paccDynamic);
HXLINE(2005)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("bodyWidth",04,e0,6a,8a),W,::hx::paccDynamic);
HXLINE(2006)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("bodyBorder",2e,e1,36,ab),border,::hx::paccDynamic);
HXLINE(1998)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("title",98,15,3b,10)) ||  (_hx_switch_0==HX_("tooltip",03,ad,8c,6a)) ){
HXLINE(1990)			if ((text != HX_("",00,00,00,00))) {
HXLINE(1992)				tt->__SetField(HX_("title",98,15,3b,10),text,::hx::paccDynamic);
            			}
HXLINE(1994)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("titleOffset",4b,63,cb,f6),offset,::hx::paccDynamic);
HXLINE(1995)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("titleFormat",ef,5a,1a,94),format,::hx::paccDynamic);
HXLINE(1996)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("titleWidth",4e,c9,47,dc),W,::hx::paccDynamic);
HXLINE(1997)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("titleBorder",a4,18,a6,fa),border,::hx::paccDynamic);
HXLINE(1989)			goto _hx_goto_104;
            		}
            		/* default */{
            		}
            		_hx_goto_104:;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_loadTooltipText,(void))

 ::flixel::addons::ui::Anchor FlxUI_obj::_loadAnchor( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2013__loadAnchor)
HXLINE(2014)		Float xOff = this->_loadWidth(data,( (Float)(0) ),HX_("x",78,00,00,00),null());
HXLINE(2015)		Float yOff = this->_loadHeight(data,( (Float)(0) ),HX_("y",79,00,00,00),null());
HXLINE(2016)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60))) {
HXLINE(2018)			::String xSide = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("x",78,00,00,00),true,HX_("right",dc,0b,64,e9));
HXLINE(2019)			::String ySide = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("y",79,00,00,00),true,HX_("top",95,66,58,00));
HXLINE(2020)			::String xFlush = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("x-flush",ef,49,ba,7e),true,HX_("left",07,08,b0,47));
HXLINE(2021)			::String yFlush = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("y-flush",b0,c0,4f,a8),true,HX_("top",95,66,58,00));
HXLINE(2022)			return  ::flixel::addons::ui::Anchor_obj::__alloc( HX_CTX ,xOff,yOff,xSide,ySide,xFlush,yFlush);
            		}
HXLINE(2024)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadAnchor,return )

::Dynamic FlxUI_obj::_loadThing(::String type, ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2028__loadThing)
HXLINE(2029)		 ::Xml info = this->_loadThingGetInfo(data);
HXLINE(2030)		if (::hx::IsNull( info )) {
HXLINE(2032)			return null();
            		}
HXLINE(2035)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("align",c5,56,91,21)) ){
HXLINE(2083)			this->_alignThing(info,true);
HXLINE(2084)			return null();
HXLINE(2082)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("bar",d3,b1,4a,00)) ){
HXLINE(2050)			return this->_loadBar(info);
HXDLIN(2050)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("box",0b,be,4a,00)) ){
HXLINE(2046)			return this->_loadBox(info);
HXDLIN(2046)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("button",f2,61,e0,d9)) ){
HXLINE(2058)			return this->_loadButton(info,null(),null(),null());
HXDLIN(2058)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("button_toggle",81,71,c8,4e)) ){
HXLINE(2060)			return this->_loadButton(info,true,true,null());
HXDLIN(2060)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("change",70,91,72,b7)) ){
HXLINE(2088)			this->_changeThing(info);
HXLINE(2089)			return null();
HXLINE(2087)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("checkbox",43,d2,f5,ac)) ){
HXLINE(2069)			return this->_loadCheckBox(info);
HXDLIN(2069)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("failure",4a,70,fa,16)) ){
HXLINE(2075)			if (::hx::IsNull( this->_failure_checks )) {
HXLINE(2077)				this->_failure_checks = ::Array_obj< ::Dynamic>::__new();
            			}
HXLINE(2079)			this->unparentXML(info);
HXLINE(2080)			this->_failure_checks->push(info);
HXLINE(2081)			return null();
HXLINE(2074)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("input_text",42,40,18,eb)) ){
HXLINE(2054)			return this->_loadInputText(info);
HXDLIN(2054)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("line",f4,17,b3,47)) ){
HXLINE(2044)			return this->_loadLine(info);
HXDLIN(2044)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("default",c1,d8,c3,9b)) ||  (_hx_switch_0==HX_("group",3f,b3,f4,99)) ||  (_hx_switch_0==HX_("include",28,fe,f6,51)) ||  (_hx_switch_0==HX_("inject",91,4a,ea,97)) ||  (_hx_switch_0==HX_("load_if",96,33,eb,08)) ||  (_hx_switch_0==HX_("mode",63,d3,60,48)) ){
HXLINE(2086)			return null();
HXDLIN(2086)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("chrome",7a,f9,af,c2)) ||  (_hx_switch_0==HX_("nine_slice",45,82,57,9b)) ||  (_hx_switch_0==HX_("nine_slice_sprite",ff,6d,22,c8)) ||  (_hx_switch_0==HX_("nineslice",e0,29,78,d8)) ||  (_hx_switch_0==HX_("nineslicesprite",e5,ad,da,98)) ){
HXLINE(2040)			return this->_load9SliceSprite(info,null());
HXDLIN(2040)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("num_stepper",d8,f2,7c,cd)) ||  (_hx_switch_0==HX_("numeric_stepper",5f,56,dc,30)) ||  (_hx_switch_0==HX_("numstepper",8b,1b,2f,e4)) ){
HXLINE(2056)			return this->_loadNumericStepper(info,null());
HXDLIN(2056)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("position",a9,a0,fa,ca)) ){
HXLINE(2091)			this->name = ::flixel::addons::ui::U_obj::xml_name(info);
HXLINE(2092)			::Dynamic thing = this->getAsset(this->name,null());
HXLINE(2093)			if (::hx::IsNotNull( thing )) {
HXLINE(2095)				this->_loadPosition(info,thing);
            			}
HXLINE(2097)			return null();
HXLINE(2090)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("dropdown",11,74,2f,fd)) ||  (_hx_switch_0==HX_("dropdown_menu",cd,8f,c7,05)) ||  (_hx_switch_0==HX_("pulldown",a7,ca,a0,a7)) ||  (_hx_switch_0==HX_("pulldown_menu",77,99,46,8c)) ){
HXLINE(2066)			return this->_loadDropDownMenu(info);
HXDLIN(2066)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("radio_group",bb,79,eb,b8)) ){
HXLINE(2071)			return this->_loadRadioGroup(info);
HXDLIN(2071)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("region",f4,c0,8c,00)) ){
HXLINE(2038)			return this->_loadRegion(info);
HXDLIN(2038)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("sprite",05,dc,95,c3)) ){
HXLINE(2048)			return this->_loadSprite(info);
HXDLIN(2048)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("tab_menu",09,73,e1,d6)) ){
HXLINE(2063)			return this->_loadTabMenu(info);
HXDLIN(2063)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("text",ad,cc,f9,4c)) ){
HXLINE(2052)			return this->_loadText(info);
HXDLIN(2052)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("tile_test",43,d2,38,f8)) ){
HXLINE(2042)			return this->_loadTileTest(info);
HXDLIN(2042)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("layout",aa,ae,b8,58)) ||  (_hx_switch_0==HX_("ui",54,66,00,00)) ){
HXLINE(2073)			return this->_loadLayout(info);
HXDLIN(2073)			goto _hx_goto_107;
            		}
            		/* default */{
HXLINE(2101)			::Dynamic result = ::flixel::addons::ui::interfaces::IEventGetter_obj::getRequest(this->_ptr,(HX_("ui_get:",ef,47,3b,f4) + type),::hx::ObjectPtr<OBJ_>(this),info,::cpp::VirtualArray_obj::__new(1)->init(0,data));
HXLINE(2102)			return result;
            		}
            		_hx_goto_107:;
HXLINE(2035)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadThing,return )

Float FlxUI_obj::_loadX( ::Xml data,::hx::Null< Float >  __o_default_){
            		Float default_ = __o_default_.Default(0);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2110__loadX)
HXDLIN(2110)		return this->_loadWidth(data,default_,HX_("x",78,00,00,00),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadX,return )

Float FlxUI_obj::_loadY( ::Xml data,::hx::Null< Float >  __o_default_){
            		Float default_ = __o_default_.Default(0);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2115__loadY)
HXDLIN(2115)		return this->_loadHeight(data,default_,HX_("y",79,00,00,00),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadY,return )

Float FlxUI_obj::_loadScale( ::Xml data,::hx::Null< Float >  __o_default_,::String __o_str){
            		Float default_ = __o_default_.Default(((Float)1.0));
            		::String str = __o_str;
            		if (::hx::IsNull(__o_str)) str = HX_("scale",8a,ce,ce,78);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2120__loadScale)
HXDLIN(2120)		return this->_loadHeight(data,default_,str,HX_("none",b8,12,0a,49));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_loadScale,return )

Float FlxUI_obj::_loadScaleX( ::Xml data,::hx::Null< Float >  __o_default_){
            		Float default_ = __o_default_.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2125__loadScaleX)
HXDLIN(2125)		return this->_loadWidth(data,default_,HX_("scale_x",43,58,07,65),HX_("none",b8,12,0a,49));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadScaleX,return )

Float FlxUI_obj::_loadScaleY( ::Xml data,::hx::Null< Float >  __o_default_){
            		Float default_ = __o_default_.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2130__loadScaleY)
HXDLIN(2130)		return this->_loadHeight(data,default_,HX_("scale_y",44,58,07,65),HX_("none",b8,12,0a,49));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadScaleY,return )

Float FlxUI_obj::_loadWidth( ::Xml data,::hx::Null< Float >  __o_default_,::String __o_str,::String __o_defaultRound){
            		Float default_ = __o_default_.Default(10);
            		::String str = __o_str;
            		if (::hx::IsNull(__o_str)) str = HX_("width",06,b6,62,ca);
            		::String defaultRound = __o_defaultRound;
            		if (::hx::IsNull(__o_defaultRound)) defaultRound = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2134__loadWidth)
HXLINE(2135)		::String ws = ::flixel::addons::ui::U_obj::xml_str(data,str,true,::Std_obj::string(default_));
HXLINE(2136)		 ::flixel::addons::ui::Rounding round = this->getRound(data,defaultRound);
HXLINE(2137)		return this->doRound(this->_getDataSize(HX_("w",77,00,00,00),ws,default_),round);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,_loadWidth,return )

Float FlxUI_obj::_loadHeight( ::Xml data,::hx::Null< Float >  __o_default_,::String __o_str,::String __o_defaultRound){
            		Float default_ = __o_default_.Default(10);
            		::String str = __o_str;
            		if (::hx::IsNull(__o_str)) str = HX_("height",e7,07,4c,02);
            		::String defaultRound = __o_defaultRound;
            		if (::hx::IsNull(__o_defaultRound)) defaultRound = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2141__loadHeight)
HXLINE(2142)		::String hs = ::flixel::addons::ui::U_obj::xml_str(data,str,true,::Std_obj::string(default_));
HXLINE(2143)		 ::flixel::addons::ui::Rounding round = this->getRound(data,defaultRound);
HXLINE(2144)		return this->doRound(this->_getDataSize(HX_("h",68,00,00,00),hs,default_),round);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,_loadHeight,return )

 ::flixel::math::FlxBasePoint FlxUI_obj::_loadCompass( ::Xml data,::String __o_str){
            		::String str = __o_str;
            		if (::hx::IsNull(__o_str)) str = HX_("resize_point",85,44,f0,71);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2148__loadCompass)
HXLINE(2149)		::String cs = ::flixel::addons::ui::U_obj::xml_str(data,str,true,HX_("nw",49,60,00,00));
HXLINE(2150)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(2150)		point->_inPool = false;
HXDLIN(2150)		 ::flixel::math::FlxBasePoint fp = point;
HXLINE(2151)		::String _hx_switch_0 = cs;
            		if (  (_hx_switch_0==HX_("c",63,00,00,00)) ||  (_hx_switch_0==HX_("center",d5,25,db,05)) ||  (_hx_switch_0==HX_("m",6d,00,00,00)) ||  (_hx_switch_0==HX_("mid",88,11,53,00)) ){
HXLINE(2178)			fp->set_x(((Float)0.5));
HXLINE(2179)			fp->set_y(((Float)0.5));
HXLINE(2177)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("ll",80,5e,00,00)) ||  (_hx_switch_0==HX_("sw",a4,64,00,00)) ){
HXLINE(2172)			fp->set_x(( (Float)(0) ));
HXLINE(2173)			fp->set_y(( (Float)(1) ));
HXLINE(2171)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("lr",86,5e,00,00)) ||  (_hx_switch_0==HX_("se",92,64,00,00)) ){
HXLINE(2166)			fp->set_x(( (Float)(1) ));
HXLINE(2167)			fp->set_y(( (Float)(1) ));
HXLINE(2165)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("e",65,00,00,00)) ||  (_hx_switch_0==HX_("r",72,00,00,00)) ){
HXLINE(2163)			fp->set_x(( (Float)(1) ));
HXLINE(2164)			fp->set_y(((Float)0.5));
HXLINE(2162)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("s",73,00,00,00)) ){
HXLINE(2169)			fp->set_x(((Float)0.5));
HXLINE(2170)			fp->set_y(( (Float)(1) ));
HXLINE(2168)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("n",6e,00,00,00)) ||  (_hx_switch_0==HX_("u",75,00,00,00)) ){
HXLINE(2157)			fp->set_x(((Float)0.5));
HXLINE(2158)			fp->set_y(( (Float)(0) ));
HXLINE(2156)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("nw",49,60,00,00)) ||  (_hx_switch_0==HX_("ul",57,66,00,00)) ){
HXLINE(2154)			fp->set_x(( (Float)(0) ));
HXLINE(2155)			fp->set_y(( (Float)(0) ));
HXLINE(2153)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("ne",37,60,00,00)) ||  (_hx_switch_0==HX_("ur",5d,66,00,00)) ){
HXLINE(2160)			fp->set_x(( (Float)(1) ));
HXLINE(2161)			fp->set_y(( (Float)(0) ));
HXLINE(2159)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("w",77,00,00,00)) ){
HXLINE(2175)			fp->set_x(((Float)0.5));
HXLINE(2176)			fp->set_y(( (Float)(0) ));
HXLINE(2174)			goto _hx_goto_116;
            		}
            		_hx_goto_116:;
HXLINE(2181)		return fp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadCompass,return )

void FlxUI_obj::_changeParamsThing( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2185__changeParamsThing)
HXLINE(2186)		::String name = ::flixel::addons::ui::U_obj::xml_name(data);
HXLINE(2187)		::Dynamic thing = this->getAsset(name,null());
HXLINE(2188)		if (::hx::IsNull( thing )) {
HXLINE(2190)			return;
            		}
HXLINE(2193)		if (!(::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::addons::ui::interfaces::IHasParams >()))) {
HXLINE(2195)			return;
            		}
HXLINE(2198)		::Dynamic ihp = thing;
HXLINE(2199)		::cpp::VirtualArray params = null();
HXDLIN(2199)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(2199)			params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2199)			{
HXLINE(2199)				int _g = 0;
HXDLIN(2199)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(2199)				while((_g < _g1->length)){
HXLINE(2199)					 ::Xml param = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(2199)					_g = (_g + 1);
HXDLIN(2199)					bool _hx_tmp;
HXDLIN(2199)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(2199)						_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(2199)						_hx_tmp = false;
            					}
HXDLIN(2199)					if (_hx_tmp) {
HXLINE(2199)						::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(2199)						type = type.toLowerCase();
HXDLIN(2199)						::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(2199)						 ::Dynamic value = valueStr;
HXDLIN(2199)						int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(2199)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2199)							::String str = ::String(valueStr);
HXDLIN(2199)							str = str.toLowerCase();
HXDLIN(2199)							bool _hx_tmp1;
HXDLIN(2199)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(2199)								_hx_tmp1 = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(2199)								_hx_tmp1 = true;
            							}
HXDLIN(2199)							if (_hx_tmp1) {
HXLINE(2199)								value = true;
            							}
            							else {
HXLINE(2199)								value = false;
            							}
HXDLIN(2199)							goto _hx_goto_119;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(2199)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2199)							goto _hx_goto_119;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(2199)							 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2199)							if (::hx::IsNull( return_val )) {
HXLINE(2199)								HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            							}
HXDLIN(2199)							value = return_val;
HXDLIN(2199)							goto _hx_goto_119;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(2199)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(2199)							goto _hx_goto_119;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(2199)							value = ::String(valueStr);
HXDLIN(2199)							goto _hx_goto_119;
            						}
            						_hx_goto_119:;
HXDLIN(2199)						params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXDLIN(2199)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2199)			{
HXLINE(2199)				int _g2 = 0;
HXDLIN(2199)				int _g3 = params->get_length();
HXDLIN(2199)				while((_g2 < _g3)){
HXLINE(2199)					_g2 = (_g2 + 1);
HXDLIN(2199)					int i = (_g2 - 1);
HXDLIN(2199)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            				}
            			}
            		}
HXDLIN(2199)		::flixel::addons::ui::interfaces::IHasParams_obj::set_params(ihp,params);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_changeParamsThing,(void))

void FlxUI_obj::_changeThing( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2203__changeThing)
HXLINE(2204)		::String name = ::flixel::addons::ui::U_obj::xml_name(data);
HXLINE(2205)		::Dynamic thing = this->getAsset(name,null());
HXLINE(2206)		if (::hx::IsNull( thing )) {
HXLINE(2208)			return;
            		}
HXLINE(2211)		Float new_width = ( (Float)(-1) );
HXLINE(2212)		Float new_height = ( (Float)(-1) );
HXLINE(2214)		::String context = HX_("",00,00,00,00);
HXLINE(2215)		::String code = HX_("",00,00,00,00);
HXLINE(2217)		{
HXLINE(2217)			 ::Dynamic attribute = data->attributes();
HXDLIN(2217)			while(( (bool)(attribute->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2217)				::String attribute1 = ( (::String)(attribute->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2219)				::String _hx_switch_0 = attribute1;
            				if (  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(2243)					new_height = this->_loadHeight(data,null(),null(),null());
HXDLIN(2243)					goto _hx_goto_123;
            				}
            				if (  (_hx_switch_0==HX_("label",f4,0d,af,6f)) ){
HXLINE(2231)					::String label = ::flixel::addons::ui::U_obj::xml_str(data,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(2232)					context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2233)					code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2234)					label = this->getText(label,context,true,code);
HXLINE(2235)					if (::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::addons::ui::interfaces::ILabeled >())) {
HXLINE(2237)						::Dynamic b = thing;
HXLINE(2238)						::flixel::addons::ui::interfaces::ILabeled_obj::getLabel(b)->set_text(label);
            					}
HXLINE(2230)					goto _hx_goto_123;
            				}
            				if (  (_hx_switch_0==HX_("text",ad,cc,f9,4c)) ){
HXLINE(2222)					if (::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::addons::ui::FlxUIText >())) {
HXLINE(2224)						::String text = ::flixel::addons::ui::U_obj::xml_str(data,HX_("text",ad,cc,f9,4c),null(),null());
HXLINE(2225)						context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2226)						 ::flixel::addons::ui::FlxUIText t = ( ( ::flixel::addons::ui::FlxUIText)(thing) );
HXLINE(2227)						code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2228)						t->set_text(this->getText(text,context,true,code));
            					}
HXLINE(2222)					goto _hx_goto_123;
            				}
            				if (  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(2241)					new_width = this->_loadWidth(data,null(),null(),null());
HXDLIN(2241)					goto _hx_goto_123;
            				}
            				_hx_goto_123:;
            			}
            		}
HXLINE(2246)		if (::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE(2248)			::Dynamic ir = thing;
HXLINE(2249)			bool _hx_tmp;
HXDLIN(2249)			if ((new_width == -1)) {
HXLINE(2249)				_hx_tmp = (new_height != -1);
            			}
            			else {
HXLINE(2249)				_hx_tmp = true;
            			}
HXDLIN(2249)			if (_hx_tmp) {
HXLINE(2251)				if ((new_width == -1)) {
HXLINE(2253)					new_width = ::flixel::addons::ui::interfaces::IResizable_obj::get_width(ir);
            				}
HXLINE(2255)				if ((new_height == -1)) {
HXLINE(2257)					new_height = ::flixel::addons::ui::interfaces::IResizable_obj::get_height(ir);
            				}
HXLINE(2259)				::flixel::addons::ui::interfaces::IResizable_obj::resize(ir,new_width,new_height);
            			}
            		}
HXLINE(2263)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(2265)			if (::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::addons::ui::interfaces::IHasParams >())) {
HXLINE(2267)				::Dynamic ihp = thing;
HXLINE(2268)				::cpp::VirtualArray params = null();
HXDLIN(2268)				if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(2268)					params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2268)					{
HXLINE(2268)						int _g = 0;
HXDLIN(2268)						::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(2268)						while((_g < _g1->length)){
HXLINE(2268)							 ::Xml param = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(2268)							_g = (_g + 1);
HXDLIN(2268)							bool _hx_tmp1;
HXDLIN(2268)							if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(2268)								_hx_tmp1 = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            							}
            							else {
HXLINE(2268)								_hx_tmp1 = false;
            							}
HXDLIN(2268)							if (_hx_tmp1) {
HXLINE(2268)								::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(2268)								type = type.toLowerCase();
HXDLIN(2268)								::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(2268)								 ::Dynamic value = valueStr;
HXDLIN(2268)								int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(2268)								::String _hx_switch_1 = type;
            								if (  (_hx_switch_1==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_1==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2268)									::String str = ::String(valueStr);
HXDLIN(2268)									str = str.toLowerCase();
HXDLIN(2268)									bool _hx_tmp2;
HXDLIN(2268)									if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(2268)										_hx_tmp2 = (str == HX_("1",31,00,00,00));
            									}
            									else {
HXLINE(2268)										_hx_tmp2 = true;
            									}
HXDLIN(2268)									if (_hx_tmp2) {
HXLINE(2268)										value = true;
            									}
            									else {
HXLINE(2268)										value = false;
            									}
HXDLIN(2268)									goto _hx_goto_125;
            								}
            								if (  (_hx_switch_1==HX_("float",9c,c5,96,02)) ){
HXLINE(2268)									value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2268)									goto _hx_goto_125;
            								}
            								if (  (_hx_switch_1==HX_("color",63,71,5c,4a)) ||  (_hx_switch_1==HX_("hex",db,42,4f,00)) ){
HXLINE(2268)									 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2268)									if (::hx::IsNull( return_val )) {
HXLINE(2268)										HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            									}
HXDLIN(2268)									value = return_val;
HXDLIN(2268)									goto _hx_goto_125;
            								}
            								if (  (_hx_switch_1==HX_("int",ef,0c,50,00)) ){
HXLINE(2268)									value = ::Std_obj::parseInt(valueStr);
HXDLIN(2268)									goto _hx_goto_125;
            								}
            								if (  (_hx_switch_1==HX_("string",d1,28,30,11)) ){
HXLINE(2268)									value = ::String(valueStr);
HXDLIN(2268)									goto _hx_goto_125;
            								}
            								_hx_goto_125:;
HXDLIN(2268)								params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            									->setFixed(0,HX_("value",71,7f,b8,31),value)
            									->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            							}
            						}
            					}
HXDLIN(2268)					params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2268)					{
HXLINE(2268)						int _g2 = 0;
HXDLIN(2268)						int _g3 = params->get_length();
HXDLIN(2268)						while((_g2 < _g3)){
HXLINE(2268)							_g2 = (_g2 + 1);
HXDLIN(2268)							int i = (_g2 - 1);
HXDLIN(2268)							params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            						}
            					}
            				}
HXDLIN(2268)				::flixel::addons::ui::interfaces::IHasParams_obj::set_params(ihp,params);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_changeThing,(void))

void FlxUI_obj::_alignThing( ::Xml data,::hx::Null< bool >  __o_suppressError){
            		bool suppressError = __o_suppressError.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2275__alignThing)
HXDLIN(2275)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("objects",d4,68,4f,82))) {
HXLINE(2277)			int _g = 0;
HXDLIN(2277)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("objects",d4,68,4f,82));
HXDLIN(2277)			while((_g < _g1->length)){
HXLINE(2277)				 ::Xml objectNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(2277)				_g = (_g + 1);
HXLINE(2279)				::Array< ::String > objects = ::flixel::addons::ui::U_obj::xml_str(objectNode,HX_("value",71,7f,b8,31),true,HX_("",00,00,00,00)).split(HX_(",",2c,00,00,00));
HXLINE(2281)				::String axis = ::flixel::addons::ui::U_obj::xml_str(data,HX_("axis",a1,1c,79,40),true,null());
HXLINE(2282)				bool _hx_tmp;
HXDLIN(2282)				if ((axis != HX_("horizontal",e4,fc,c3,15))) {
HXLINE(2282)					_hx_tmp = (axis != HX_("vertical",76,bc,15,6a));
            				}
            				else {
HXLINE(2282)					_hx_tmp = false;
            				}
HXDLIN(2282)				if (_hx_tmp) {
HXLINE(2284)					HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._alignThing(): axis must be \"horizontal\" or \"vertical\"!",a0,ea,67,82),null()));
            				}
HXLINE(2288)				Float spacing = ( (Float)(-1) );
HXLINE(2289)				if ((axis == HX_("horizontal",e4,fc,c3,15))) {
HXLINE(2291)					spacing = this->_getDataSize(HX_("w",77,00,00,00),::flixel::addons::ui::U_obj::xml_str(data,HX_("spacing",83,33,bb,91),true,null()),-1);
            				}
            				else {
HXLINE(2295)					spacing = this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(data,HX_("spacing",83,33,bb,91),true,null()),-1);
            				}
HXLINE(2298)				bool resize = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("resize",f4,59,7b,08),null());
HXLINE(2300)				bool grow = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("grow",13,dc,6b,44),true);
HXLINE(2301)				bool shrink = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("shrink",c9,32,61,28),true);
HXLINE(2303)				 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(-1,-1);
HXDLIN(2303)				point->_inPool = false;
HXDLIN(2303)				 ::flixel::math::FlxBasePoint bounds = point;
HXLINE(2305)				::String boundsError = HX_("",00,00,00,00);
HXLINE(2307)				if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("bounds",75,86,1d,66))) {
HXLINE(2309)					if ((axis == HX_("horizontal",e4,fc,c3,15))) {
HXLINE(2311)						bounds->set_x(this->_getDataSize(HX_("w",77,00,00,00),::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("bounds",75,86,1d,66)),HX_("left",07,08,b0,47),null(),null()),-1));
HXLINE(2312)						bounds->set_y(this->_getDataSize(HX_("w",77,00,00,00),::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("bounds",75,86,1d,66)),HX_("right",dc,0b,64,e9),null(),null()),-1));
            					}
            					else {
HXLINE(2314)						if ((axis == HX_("vertical",76,bc,15,6a))) {
HXLINE(2316)							bounds->set_x(this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("bounds",75,86,1d,66)),HX_("top",95,66,58,00),null(),null()),-1));
HXLINE(2317)							bounds->set_y(this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("bounds",75,86,1d,66)),HX_("bottom",eb,e6,78,65),null(),null()),-1));
            						}
            					}
            				}
HXLINE(2321)				bool _hx_tmp1;
HXDLIN(2321)				if ((bounds->x != -1)) {
HXLINE(2321)					_hx_tmp1 = (bounds->y != -1);
            				}
            				else {
HXLINE(2321)					_hx_tmp1 = false;
            				}
HXDLIN(2321)				if (_hx_tmp1) {
HXLINE(2323)					if ((bounds->y <= bounds->x)) {
HXLINE(2325)						boundsError = ((((HX_("bounds max must be > bounds min! (max=",4c,8b,2f,26) + bounds->y) + HX_(" min=",8b,de,2e,b5)) + bounds->x) + HX_(")",29,00,00,00));
            					}
            				}
            				else {
HXLINE(2330)					boundsError = HX_("missing bound!",9d,f7,06,0b);
            				}
HXLINE(2333)				if ((boundsError == HX_("",00,00,00,00))) {
HXLINE(2335)					this->_doAlign(objects,axis,spacing,resize,bounds,grow,shrink);
            				}
HXLINE(2338)				bool _hx_tmp2;
HXDLIN(2338)				bool _hx_tmp3;
HXDLIN(2338)				if (!(::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)))) {
HXLINE(2338)					_hx_tmp3 = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(data,HX_("x",78,00,00,00));
            				}
            				else {
HXLINE(2338)					_hx_tmp3 = true;
            				}
HXDLIN(2338)				if (!(_hx_tmp3)) {
HXLINE(2338)					_hx_tmp2 = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(data,HX_("y",79,00,00,00));
            				}
            				else {
HXLINE(2338)					_hx_tmp2 = true;
            				}
HXDLIN(2338)				if (_hx_tmp2) {
HXLINE(2340)					int _g2 = 0;
HXDLIN(2340)					while((_g2 < objects->length)){
HXLINE(2340)						::String object = objects->__get(_g2);
HXDLIN(2340)						_g2 = (_g2 + 1);
HXLINE(2342)						::Dynamic thing = this->getAsset(object,null());
HXLINE(2343)						this->_loadPosition(data,thing);
            					}
            				}
            				else {
HXLINE(2348)					if ((boundsError != HX_("",00,00,00,00))) {
HXLINE(2350)						if (!(suppressError)) {
HXLINE(2352)							::flixel::FlxG_obj::log->advanced(boundsError,::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(2360)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._alignThing(): <objects> node not found!",e9,2b,f0,7a),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_alignThing,(void))

void FlxUI_obj::_doAlign(::Array< ::String > objects,::String axis,Float spacing,bool resize, ::flixel::math::FlxBasePoint bounds,::hx::Null< bool >  __o_allowGrow,::hx::Null< bool >  __o_allowShrink){
            		bool allowGrow = __o_allowGrow.Default(true);
            		bool allowShrink = __o_allowShrink.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2367__doAlign)
HXLINE(2368)		Float total_spacing = ( (Float)(0) );
HXLINE(2369)		Float total_size = ( (Float)(0) );
HXLINE(2371)		Float bound_range = (bounds->y - bounds->x);
HXLINE(2373)		Float spaces = ( (Float)((objects->length - 1)) );
HXLINE(2374)		Float space_size = ( (Float)(0) );
HXLINE(2375)		Float object_size = ( (Float)(0) );
HXLINE(2377)		::String size_prop = HX_("width",06,b6,62,ca);
HXLINE(2378)		::String pos_prop = HX_("x",78,00,00,00);
HXLINE(2379)		if ((axis == HX_("vertical",76,bc,15,6a))) {
HXLINE(2381)			size_prop = HX_("height",e7,07,4c,02);
HXLINE(2382)			pos_prop = HX_("y",79,00,00,00);
            		}
HXLINE(2386)		{
HXLINE(2386)			int _g = 0;
HXDLIN(2386)			while((_g < objects->length)){
HXLINE(2386)				::String nameStr = objects->__get(_g);
HXDLIN(2386)				_g = (_g + 1);
HXLINE(2388)				::Dynamic widget = this->getAsset(nameStr,null());
HXLINE(2389)				if (::hx::IsNotNull( widget )) {
HXLINE(2391)					Float theval = ( (Float)(0) );
HXLINE(2392)					::String _hx_switch_0 = size_prop;
            					if (  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(2397)						theval = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(widget);
HXDLIN(2397)						goto _hx_goto_132;
            					}
            					if (  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(2395)						theval = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(widget);
HXDLIN(2395)						goto _hx_goto_132;
            					}
            					_hx_goto_132:;
HXLINE(2400)					total_size = (total_size + theval);
            				}
            			}
            		}
HXLINE(2404)		if ((resize == false)) {
HXLINE(2406)			total_spacing = (bound_range - total_size);
HXLINE(2407)			space_size = (total_spacing / spaces);
            		}
            		else {
HXLINE(2411)			space_size = spacing;
HXLINE(2412)			total_spacing = (spacing * spaces);
HXLINE(2413)			object_size = ((bound_range - total_spacing) / ( (Float)(objects->length) ));
            		}
HXLINE(2416)		object_size = ( (Float)(::Std_obj::_hx_int(object_size)) );
HXLINE(2417)		space_size = ( (Float)(::Std_obj::_hx_int(space_size)) );
HXLINE(2419)		Float last_pos = bounds->x;
HXLINE(2420)		{
HXLINE(2420)			int _g1 = 0;
HXDLIN(2420)			while((_g1 < objects->length)){
HXLINE(2420)				::String nameStr1 = objects->__get(_g1);
HXDLIN(2420)				_g1 = (_g1 + 1);
HXLINE(2422)				::Dynamic widget1 = this->getAsset(nameStr1,null());
HXLINE(2423)				if (::hx::IsNotNull( widget1 )) {
HXLINE(2425)					Float pos = last_pos;
HXLINE(2426)					if (!(resize)) {
HXLINE(2428)						::String _hx_switch_1 = size_prop;
            						if (  (_hx_switch_1==HX_("height",e7,07,4c,02)) ){
HXLINE(2433)							object_size = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(widget1);
HXDLIN(2433)							goto _hx_goto_134;
            						}
            						if (  (_hx_switch_1==HX_("width",06,b6,62,ca)) ){
HXLINE(2431)							object_size = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(widget1);
HXDLIN(2431)							goto _hx_goto_134;
            						}
            						_hx_goto_134:;
            					}
            					else {
HXLINE(2439)						if (::Std_obj::isOfType(widget1,::hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE(2441)							bool allow = true;
HXLINE(2442)							::Dynamic widgetr = widget1;
HXLINE(2443)							if ((axis == HX_("vertical",76,bc,15,6a))) {
HXLINE(2445)								if ((object_size > ::flixel::addons::ui::interfaces::IResizable_obj::get_width(widgetr))) {
HXLINE(2447)									allow = allowGrow;
            								}
            								else {
HXLINE(2449)									if ((object_size < ::flixel::addons::ui::interfaces::IResizable_obj::get_width(widgetr))) {
HXLINE(2451)										allow = allowShrink;
            									}
            								}
HXLINE(2453)								if (allow) {
HXLINE(2455)									::flixel::addons::ui::interfaces::IResizable_obj::resize(widgetr,::flixel::addons::ui::interfaces::IResizable_obj::get_width(widgetr),object_size);
            								}
            							}
            							else {
HXLINE(2458)								if ((axis == HX_("horizontal",e4,fc,c3,15))) {
HXLINE(2460)									if ((object_size > ::flixel::addons::ui::interfaces::IResizable_obj::get_height(widgetr))) {
HXLINE(2462)										allow = allowGrow;
            									}
            									else {
HXLINE(2464)										if ((object_size < ::flixel::addons::ui::interfaces::IResizable_obj::get_height(widgetr))) {
HXLINE(2466)											allow = allowShrink;
            										}
            									}
HXLINE(2468)									if (allow) {
HXLINE(2470)										::flixel::addons::ui::interfaces::IResizable_obj::resize(widgetr,object_size,::flixel::addons::ui::interfaces::IResizable_obj::get_height(widgetr));
            									}
            								}
            							}
            						}
            					}
HXLINE(2476)					last_pos = ((pos + object_size) + space_size);
HXLINE(2478)					::String _hx_switch_2 = pos_prop;
            					if (  (_hx_switch_2==HX_("x",78,00,00,00)) ){
HXLINE(2481)						::flixel::IFlxSprite_obj::set_x(widget1,pos);
HXDLIN(2481)						goto _hx_goto_135;
            					}
            					if (  (_hx_switch_2==HX_("y",79,00,00,00)) ){
HXLINE(2483)						::flixel::IFlxSprite_obj::set_y(widget1,pos);
HXDLIN(2483)						goto _hx_goto_135;
            					}
            					_hx_goto_135:;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(FlxUI_obj,_doAlign,(void))

bool FlxUI_obj::_checkFailure( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2490__checkFailure)
HXLINE(2491)		::String target = ::flixel::addons::ui::U_obj::xml_str(data,HX_("target",51,f3,ec,86),true,null());
HXLINE(2492)		::String property = ::flixel::addons::ui::U_obj::xml_str(data,HX_("property",55,48,38,ac),true,null());
HXLINE(2493)		::String compare = ::flixel::addons::ui::U_obj::xml_str(data,HX_("compare",a5,18,69,83),true,null());
HXLINE(2494)		::String value = ::flixel::addons::ui::U_obj::xml_str(data,HX_("value",71,7f,b8,31),true,null());
HXLINE(2496)		::Dynamic thing = this->getAsset(target,null());
HXLINE(2498)		if (::hx::IsNull( thing )) {
HXLINE(2500)			return false;
            		}
HXLINE(2503)		Float prop_f = ( (Float)(0) );
HXLINE(2504)		Float val_f = ( (Float)(0) );
HXLINE(2506)		Float p = ::flixel::addons::ui::U_obj::perc_to_float(value);
HXLINE(2508)		::String _hx_switch_0 = property;
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(2513)			prop_f = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing);
HXDLIN(2513)			goto _hx_goto_137;
            		}
            		if (  (_hx_switch_0==HX_("w",77,00,00,00)) ||  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(2511)			prop_f = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing);
HXDLIN(2511)			goto _hx_goto_137;
            		}
            		_hx_goto_137:;
HXLINE(2516)		if (::Math_obj::isNaN(p)) {
HXLINE(2518)			if (::flixel::addons::ui::U_obj::isStrNum(value)) {
HXLINE(2520)				val_f = ::Std_obj::parseFloat(value);
            			}
            			else {
HXLINE(2524)				return false;
            			}
            		}
            		else {
HXLINE(2529)			::String _hx_switch_1 = property;
            			if (  (_hx_switch_1==HX_("h",68,00,00,00)) ||  (_hx_switch_1==HX_("height",e7,07,4c,02)) ){
HXLINE(2534)				val_f = (p * this->screenHeight());
HXDLIN(2534)				goto _hx_goto_138;
            			}
            			if (  (_hx_switch_1==HX_("w",77,00,00,00)) ||  (_hx_switch_1==HX_("width",06,b6,62,ca)) ){
HXLINE(2532)				val_f = (p * ( (Float)(this->screenWidth()) ));
HXDLIN(2532)				goto _hx_goto_138;
            			}
            			_hx_goto_138:;
            		}
HXLINE(2538)		bool return_val = false;
HXLINE(2540)		::String _hx_switch_2 = compare;
            		if (  (_hx_switch_2==HX_("<",3c,00,00,00)) ){
HXLINE(2543)			if ((prop_f < val_f)) {
HXLINE(2545)				this->failed_by = (val_f - prop_f);
HXLINE(2546)				return_val = true;
            			}
HXLINE(2543)			goto _hx_goto_139;
            		}
            		if (  (_hx_switch_2==HX_("<=",81,34,00,00)) ){
HXLINE(2561)			if ((prop_f <= val_f)) {
HXLINE(2563)				this->failed_by = (val_f - prop_f);
HXLINE(2564)				return_val = true;
            			}
HXLINE(2561)			goto _hx_goto_139;
            		}
            		if (  (_hx_switch_2==HX_("=",3d,00,00,00)) ||  (_hx_switch_2==HX_("==",60,35,00,00)) ){
HXLINE(2555)			if ((prop_f == val_f)) {
HXLINE(2557)				this->failed_by = ::Math_obj::abs((prop_f - val_f));
HXLINE(2558)				return_val = true;
            			}
HXLINE(2555)			goto _hx_goto_139;
            		}
            		if (  (_hx_switch_2==HX_(">",3e,00,00,00)) ){
HXLINE(2549)			if ((prop_f > val_f)) {
HXLINE(2551)				this->failed_by = (prop_f - val_f);
HXLINE(2552)				return_val = true;
            			}
HXLINE(2549)			goto _hx_goto_139;
            		}
            		if (  (_hx_switch_2==HX_(">=",3f,36,00,00)) ){
HXLINE(2567)			if ((prop_f >= val_f)) {
HXLINE(2569)				this->failed_by = (prop_f - val_f);
HXLINE(2570)				return_val = true;
            			}
HXLINE(2567)			goto _hx_goto_139;
            		}
            		_hx_goto_139:;
HXLINE(2574)		return return_val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_checkFailure,return )

void FlxUI_obj::_resizeThing(::Dynamic fo_r, ::Dynamic bounds){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2584__resizeThing)
HXLINE(2585)		bool do_resize = false;
HXLINE(2586)		Float ww = ::flixel::addons::ui::interfaces::IResizable_obj::get_width(fo_r);
HXLINE(2587)		Float hh = ::flixel::addons::ui::interfaces::IResizable_obj::get_height(fo_r);
HXLINE(2589)		if (::hx::IsLess( ww,bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE(2591)			do_resize = true;
HXLINE(2592)			ww = ( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(2594)			if (::hx::IsGreater( ww,bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE(2596)				do_resize = true;
HXLINE(2597)				ww = ( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic)) );
            			}
            		}
HXLINE(2600)		if (::hx::IsLess( hh,bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE(2602)			do_resize = true;
HXLINE(2603)			hh = ( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(2605)			if (::hx::IsGreater( hh,bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE(2607)				do_resize = true;
HXLINE(2608)				hh = ( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) );
            			}
            		}
HXLINE(2611)		if (do_resize) {
HXLINE(2613)			::flixel::addons::ui::interfaces::IResizable_obj::resize(fo_r,ww,hh);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_resizeThing,(void))

void FlxUI_obj::_postLoadThing(::String type, ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2618__postLoadThing)
HXLINE(2619)		if ((type == HX_("load_if",96,33,eb,08))) {
HXLINE(2621)			if (this->_loadTest(data)) {
HXLINE(2623)				if (::hx::IsNotNull( data->firstElement() )) {
HXLINE(2625)					 ::Dynamic subNode = data->elements();
HXDLIN(2625)					while(( (bool)(subNode->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2625)						 ::Xml subNode1 = ( ( ::Xml)(subNode->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2627)						if ((subNode1->nodeType != ::Xml_obj::Element)) {
HXLINE(2627)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(subNode1->nodeType)));
            						}
HXDLIN(2627)						::String nodeType = subNode1->nodeName.toLowerCase();
HXLINE(2628)						bool _hx_tmp;
HXDLIN(2628)						if ((subNode1->nodeType != ::Xml_obj::Document)) {
HXLINE(2628)							_hx_tmp = (subNode1->nodeType != ::Xml_obj::Element);
            						}
            						else {
HXLINE(2628)							_hx_tmp = false;
            						}
HXDLIN(2628)						if (_hx_tmp) {
HXLINE(2628)							HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(subNode1->nodeType)));
            						}
HXDLIN(2628)						this->_postLoadThing(nodeType,subNode1);
            					}
            				}
            			}
HXLINE(2632)			return;
            		}
HXLINE(2635)		if ((this->_loadTest(data) == false)) {
HXLINE(2637)			return;
            		}
HXLINE(2640)		::String name = ::flixel::addons::ui::U_obj::xml_name(data);
HXLINE(2642)		::Dynamic thing = this->getAsset(name,null());
HXLINE(2643)		bool isGroup = (type == HX_("group",3f,b3,f4,99));
HXLINE(2644)		if (isGroup) {
HXLINE(2646)			thing = this->getGroup(name,null());
            		}
HXLINE(2649)		if ((type == HX_("align",c5,56,91,21))) {
HXLINE(2651)			this->_alignThing(data,null());
            		}
HXLINE(2654)		if ((type == HX_("change",70,91,72,b7))) {
HXLINE(2656)			this->_changeThing(data);
            		}
HXLINE(2659)		if ((type == HX_("position",a9,a0,fa,ca))) {
HXLINE(2661)			this->_loadPosition(data,thing);
HXLINE(2662)			return;
            		}
HXLINE(2665)		if ((type == HX_("cursor",d6,8e,e8,3e))) {
HXLINE(2667)			this->_loadCursor(data);
            		}
HXLINE(2670)		bool _hx_tmp1;
HXDLIN(2670)		if (::hx::IsNull( thing )) {
HXLINE(2670)			_hx_tmp1 = !(isGroup);
            		}
            		else {
HXLINE(2670)			_hx_tmp1 = false;
            		}
HXDLIN(2670)		if (_hx_tmp1) {
HXLINE(2672)			return;
            		}
HXLINE(2675)		if (!(isGroup)) {
HXLINE(2677)			::String use_def = ::flixel::addons::ui::U_obj::xml_str(data,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(2678)			 ::Xml definition = null();
HXLINE(2679)			if ((use_def != HX_("",00,00,00,00))) {
HXLINE(2681)				definition = this->getDefinition(use_def,null());
            			}
HXLINE(2684)			if (::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE(2686)				 ::Dynamic ww = this->_getDataSize(HX_("w",77,00,00,00),::flixel::addons::ui::U_obj::xml_str(data,HX_("width",06,b6,62,ca),null(),null()),null());
HXLINE(2687)				 ::Dynamic hh = this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(data,HX_("height",e7,07,4c,02),null(),null()),null());
HXLINE(2688)				bool _hx_tmp2;
HXDLIN(2688)				if (::hx::IsNotEq( ww,0 )) {
HXLINE(2688)					_hx_tmp2 = ::hx::IsEq( ww,::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing) );
            				}
            				else {
HXLINE(2688)					_hx_tmp2 = true;
            				}
HXDLIN(2688)				if (_hx_tmp2) {
HXLINE(2690)					ww = null();
            				}
HXLINE(2692)				bool _hx_tmp3;
HXDLIN(2692)				if (::hx::IsNotEq( hh,0 )) {
HXLINE(2692)					_hx_tmp3 = ::hx::IsEq( hh,::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing) );
            				}
            				else {
HXLINE(2692)					_hx_tmp3 = true;
            				}
HXDLIN(2692)				if (_hx_tmp3) {
HXLINE(2694)					hh = null();
            				}
HXLINE(2697)				 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(2699)				if (::hx::IsNotNull( bounds )) {
HXLINE(2701)					if (::hx::IsNotNull( ww )) {
HXLINE(2703)						if (::hx::IsLess( ww,bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE(2705)							ww = bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic);
            						}
HXLINE(2707)						if (::hx::IsGreater( ww,bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE(2709)							ww = bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic);
            						}
HXLINE(2711)						bounds->__SetField(HX_("min_width",59,88,fd,ea),(bounds->__SetField(HX_("max_width",eb,9a,40,c1),ww,::hx::paccDynamic)),::hx::paccDynamic);
            					}
HXLINE(2713)					if (::hx::IsNotNull( hh )) {
HXLINE(2715)						if (::hx::IsLess( hh,bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE(2717)							hh = bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic);
            						}
HXLINE(2719)						if (::hx::IsGreater( hh,bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE(2721)							hh = bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic);
            						}
HXLINE(2723)						bounds->__SetField(HX_("min_height",34,3e,29,69),(bounds->__SetField(HX_("max_height",62,6b,96,0d),hh,::hx::paccDynamic)),::hx::paccDynamic);
            					}
HXLINE(2726)					this->_resizeThing(thing,bounds);
            				}
            			}
HXLINE(2730)			{
HXLINE(2730)				Float Y = -(( (Float)(thing->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) ));
HXDLIN(2730)				::flixel::IFlxSprite_obj::set_x(thing, ::Dynamic((thing->__Field(HX_("x",78,00,00,00),::hx::paccDynamic) + -(( (Float)(thing->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) )))));
HXDLIN(2730)				::flixel::IFlxSprite_obj::set_y(thing, ::Dynamic((thing->__Field(HX_("y",79,00,00,00),::hx::paccDynamic) + Y)));
            			}
HXLINE(2731)			this->_loadPosition(data,thing);
            		}
HXLINE(2734)		::String send_to = ::flixel::addons::ui::U_obj::xml_str(data,HX_("send_to",52,6b,a5,a8),true,HX_("",00,00,00,00));
HXLINE(2735)		if ((send_to != HX_("",00,00,00,00))) {
HXLINE(2737)			::String _hx_switch_0 = send_to;
            			if (  (_hx_switch_0==HX_("back",27,da,10,41)) ||  (_hx_switch_0==HX_("bottom",eb,e6,78,65)) ){
HXLINE(2740)				this->_sendTo(thing,-1);
HXDLIN(2740)				goto _hx_goto_143;
            			}
            			if (  (_hx_switch_0==HX_("front",a9,18,8e,06)) ||  (_hx_switch_0==HX_("top",95,66,58,00)) ){
HXLINE(2742)				this->_sendTo(thing,1);
HXDLIN(2742)				goto _hx_goto_143;
            			}
            			_hx_goto_143:;
            		}
HXLINE(2746)		bool _hx_tmp4;
HXDLIN(2746)		if (!(isGroup)) {
HXLINE(2746)			_hx_tmp4 = ::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::addons::ui::FlxUI >());
            		}
            		else {
HXLINE(2746)			_hx_tmp4 = false;
            		}
HXDLIN(2746)		if (_hx_tmp4) {
HXLINE(2748)			 ::flixel::addons::ui::FlxUI fui_thing = ( ( ::flixel::addons::ui::FlxUI)(thing) );
HXLINE(2749)			if ((fui_thing->_postLoaded == false)) {
HXLINE(2751)				fui_thing->getEvent(HX_("post_load",a5,55,d0,20),::hx::ObjectPtr<OBJ_>(this),null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_postLoadThing,(void))

 ::flixel::addons::ui::FlxUITileTest FlxUI_obj::_loadTileTest( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2757__loadTileTest)
HXLINE(2758)		int tiles_w = ::flixel::addons::ui::U_obj::xml_i(data,HX_("tiles_w",fd,7b,93,45),2);
HXLINE(2759)		int tiles_h = ::flixel::addons::ui::U_obj::xml_i(data,HX_("tiles_h",ee,7b,93,45),2);
HXLINE(2760)		Float w = this->_loadWidth(data,null(),null(),null());
HXLINE(2761)		Float h = this->_loadHeight(data,null(),null(),null());
HXLINE(2763)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(2771)		if (::hx::IsLess( w,bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE(2773)			w = ( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic)) );
            		}
HXLINE(2775)		if (::hx::IsLess( h,bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE(2777)			h = ( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic)) );
            		}
HXLINE(2780)		int tileWidth = ::Std_obj::_hx_int((w / ( (Float)(tiles_w) )));
HXLINE(2781)		int tileHeight = ::Std_obj::_hx_int((h / ( (Float)(tiles_h) )));
HXLINE(2783)		if ((tileWidth < tileHeight)) {
HXLINE(2785)			tileHeight = tileWidth;
            		}
            		else {
HXLINE(2787)			if ((tileHeight < tileWidth)) {
HXLINE(2789)				tileWidth = tileHeight;
            			}
            		}
HXLINE(2792)		Float totalw = ( (Float)((tileWidth * tiles_w)) );
HXLINE(2793)		Float totalh = ( (Float)((tileHeight * tiles_h)) );
HXLINE(2795)		if (::hx::IsGreater( totalw,bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE(2797)			tileWidth = ::Std_obj::_hx_int((( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic)) ) / ( (Float)(tiles_w) )));
            		}
HXLINE(2799)		if (::hx::IsGreater( totalh,bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE(2801)			tileHeight = ::Std_obj::_hx_int((( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ) / ( (Float)(tiles_h) )));
            		}
HXLINE(2804)		if ((tileWidth < tileHeight)) {
HXLINE(2806)			tileHeight = tileWidth;
            		}
            		else {
HXLINE(2808)			if ((tileHeight < tileWidth)) {
HXLINE(2810)				tileWidth = tileHeight;
            			}
            		}
HXLINE(2813)		if ((tileWidth < 2)) {
HXLINE(2815)			tileWidth = 2;
            		}
HXLINE(2817)		if ((tileHeight < 2)) {
HXLINE(2819)			tileHeight = 2;
            		}
HXLINE(2822)		int color1 = ( (int)(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(::flixel::addons::ui::U_obj::xml_str(data,HX_("color1",6e,c5,86,c6),true,HX_("0x808080",30,ad,e5,63)))) );
HXLINE(2823)		int color2 = ( (int)(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(::flixel::addons::ui::U_obj::xml_str(data,HX_("color2",6f,c5,86,c6),true,HX_("0xc4c4c4",5b,de,47,ff)))) );
HXLINE(2825)		int baseTileSize = ::flixel::addons::ui::U_obj::xml_i(data,HX_("base_tile_size",c4,2d,3d,a8),-1);
HXLINE(2826)		bool floorToEven = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("floor_to_even",eb,3e,ec,20),false);
HXLINE(2828)		 ::flixel::addons::ui::FlxUITileTest ftt =  ::flixel::addons::ui::FlxUITileTest_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),tileWidth,tileHeight,tiles_w,tiles_h,color1,color2,floorToEven);
HXLINE(2829)		ftt->baseTileSize = baseTileSize;
HXLINE(2830)		return ftt;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTileTest,return )

::String FlxUI_obj::_loadString( ::Xml data,::String attributeName){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2834__loadString)
HXLINE(2835)		::String string = ::flixel::addons::ui::U_obj::xml_str(data,attributeName,null(),null());
HXLINE(2836)		::String context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2837)		::String code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2838)		string = this->getText(string,context,true,code);
HXLINE(2839)		return string;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadString,return )

::Dynamic FlxUI_obj::_loadText( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2843__loadText)
HXLINE(2844)		::String text = ::flixel::addons::ui::U_obj::xml_str(data,HX_("text",ad,cc,f9,4c),null(),null());
HXLINE(2845)		::String context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2846)		::String code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2847)		text = this->getText(text,context,true,code);
HXLINE(2849)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,100,null(),null()));
HXLINE(2850)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,-1,null(),null()));
HXLINE(2852)		::String the_font = this->_loadFontFace(data);
HXLINE(2854)		bool input = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("input",0a,c4,1d,be),null());
HXLINE(2855)		if (input) {
HXLINE(2857)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._loadText(): <text> with input has been deprecated. Use <input_text> instead.",96,71,67,6a),null()));
            		}
HXLINE(2860)		::String align = ::flixel::addons::ui::U_obj::xml_str(data,HX_("align",c5,56,91,21),null(),null());
HXLINE(2861)		if ((align == HX_("",00,00,00,00))) {
HXLINE(2863)			align = null();
            		}
HXLINE(2865)		int size = ::Std_obj::_hx_int(this->_loadHeight(data,8,HX_("size",c1,a0,53,4c),HX_("floor",cc,d1,96,02)));
HXLINE(2867)		int color = this->_loadColor(data,null(),null());
HXLINE(2869)		 ::flixel::addons::ui::BorderDef border = this->_loadBorder(data);
HXLINE(2872)		 ::flixel::addons::ui::FlxUIText ftu =  ::flixel::addons::ui::FlxUIText_obj::__alloc( HX_CTX ,0,0,W,text,size,null());
HXLINE(2873)		ftu->setFormat(the_font,size,color,align,null(),null(),null());
HXLINE(2874)		border->apply(ftu);
HXLINE(2875)		ftu->drawFrame(null());
HXLINE(2871)		::Dynamic ft = ftu;
HXLINE(2878)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(2880)			::cpp::VirtualArray params = null();
HXDLIN(2880)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(2880)				params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2880)				{
HXLINE(2880)					int _g = 0;
HXDLIN(2880)					::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(2880)					while((_g < _g1->length)){
HXLINE(2880)						 ::Xml param = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(2880)						_g = (_g + 1);
HXDLIN(2880)						bool _hx_tmp;
HXDLIN(2880)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(2880)							_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            						}
            						else {
HXLINE(2880)							_hx_tmp = false;
            						}
HXDLIN(2880)						if (_hx_tmp) {
HXLINE(2880)							::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(2880)							type = type.toLowerCase();
HXDLIN(2880)							::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(2880)							 ::Dynamic value = valueStr;
HXDLIN(2880)							int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(2880)							::String _hx_switch_0 = type;
            							if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2880)								::String str = ::String(valueStr);
HXDLIN(2880)								str = str.toLowerCase();
HXDLIN(2880)								bool _hx_tmp1;
HXDLIN(2880)								if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(2880)									_hx_tmp1 = (str == HX_("1",31,00,00,00));
            								}
            								else {
HXLINE(2880)									_hx_tmp1 = true;
            								}
HXDLIN(2880)								if (_hx_tmp1) {
HXLINE(2880)									value = true;
            								}
            								else {
HXLINE(2880)									value = false;
            								}
HXDLIN(2880)								goto _hx_goto_148;
            							}
            							if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(2880)								value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2880)								goto _hx_goto_148;
            							}
            							if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(2880)								 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2880)								if (::hx::IsNull( return_val )) {
HXLINE(2880)									HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            								}
HXDLIN(2880)								value = return_val;
HXDLIN(2880)								goto _hx_goto_148;
            							}
            							if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(2880)								value = ::Std_obj::parseInt(valueStr);
HXDLIN(2880)								goto _hx_goto_148;
            							}
            							if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(2880)								value = ::String(valueStr);
HXDLIN(2880)								goto _hx_goto_148;
            							}
            							_hx_goto_148:;
HXDLIN(2880)							params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("value",71,7f,b8,31),value)
            								->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            						}
            					}
            				}
HXDLIN(2880)				params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2880)				{
HXLINE(2880)					int _g2 = 0;
HXDLIN(2880)					int _g3 = params->get_length();
HXDLIN(2880)					while((_g2 < _g3)){
HXLINE(2880)						_g2 = (_g2 + 1);
HXDLIN(2880)						int i = (_g2 - 1);
HXDLIN(2880)						params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            					}
            				}
            			}
HXDLIN(2880)			::cpp::VirtualArray params1 = params;
HXLINE(2881)			::Dynamic ihp = ft;
HXLINE(2882)			::flixel::addons::ui::interfaces::IHasParams_obj::set_params(ihp,params1);
            		}
HXLINE(2885)		bool _hx_tmp2;
HXDLIN(2885)		if ((H > 0)) {
HXLINE(2885)			_hx_tmp2 = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(ft) != H);
            		}
            		else {
HXLINE(2885)			_hx_tmp2 = false;
            		}
HXDLIN(2885)		if (_hx_tmp2) {
HXLINE(2887)			if (::Std_obj::isOfType(ft,::hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE(2889)				::Dynamic r = ft;
HXLINE(2890)				::flixel::addons::ui::interfaces::IResizable_obj::resize(r,::flixel::addons::ui::interfaces::IResizable_obj::get_width(r),H);
            			}
            		}
HXLINE(2895)		ftu->set_text(HX_(" ",20,00,00,00));
HXLINE(2896)		ftu->set_text(text);
HXLINE(2898)		return ft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadText,return )

::Dynamic FlxUI_obj::_loadInputText( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2902__loadInputText)
HXLINE(2903)		::String text = ::flixel::addons::ui::U_obj::xml_str(data,HX_("text",ad,cc,f9,4c),null(),null());
HXLINE(2904)		::String context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2905)		::String code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2906)		text = this->getText(text,context,true,code);
HXLINE(2908)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,100,null(),null()));
HXLINE(2909)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,-1,null(),null()));
HXLINE(2911)		::String the_font = this->_loadFontFace(data);
HXLINE(2913)		::String align = ::flixel::addons::ui::U_obj::xml_str(data,HX_("align",c5,56,91,21),null(),null());
HXLINE(2914)		if ((align == HX_("",00,00,00,00))) {
HXLINE(2916)			align = null();
            		}
HXLINE(2918)		int size = ::Std_obj::_hx_int(this->_loadHeight(data,8,HX_("size",c1,a0,53,4c),null()));
HXLINE(2919)		int color = this->_loadColor(data,null(),null());
HXLINE(2921)		 ::flixel::addons::ui::BorderDef border = this->_loadBorder(data);
HXLINE(2923)		::String str = ::flixel::addons::ui::U_obj::xml_str(data,HX_("background",ee,93,1d,26),true,HX_("0x00000000",48,5a,d7,68));
HXDLIN(2923)		 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(str);
HXDLIN(2923)		if (::hx::IsNull( return_val )) {
HXLINE(2923)			return_val = 0;
            		}
HXDLIN(2923)		int backgroundColor = ( (int)(return_val) );
HXLINE(2924)		bool passwordMode = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("password_mode",47,aa,e5,09),null());
HXLINE(2927)		 ::flixel::addons::ui::FlxUIInputText fti =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,0,0,W,text,size,color,backgroundColor,null());
HXLINE(2928)		fti->set_passwordMode(passwordMode);
HXLINE(2930)		::String force_case = ::flixel::addons::ui::U_obj::xml_str(data,HX_("force_case",c4,b4,72,f8),true,HX_("",00,00,00,00));
HXLINE(2931)		int forceCase;
HXLINE(2932)		::String _hx_switch_0 = force_case;
            		if (  (_hx_switch_0==HX_("l",6c,00,00,00)) ||  (_hx_switch_0==HX_("u",75,00,00,00)) ){
HXLINE(2939)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._loadInputText(): 1 letter values have been deprecated (force_case attribute).",30,f9,74,27),null()));
HXDLIN(2939)			goto _hx_goto_151;
            		}
            		if (  (_hx_switch_0==HX_("lower",01,fa,ff,78)) ||  (_hx_switch_0==HX_("lower_case",ee,5c,fc,1d)) ||  (_hx_switch_0==HX_("lowercase",31,ad,a5,66)) ){
HXLINE(2937)			forceCase = 2;
HXDLIN(2937)			goto _hx_goto_151;
            		}
            		if (  (_hx_switch_0==HX_("upper",62,19,3f,a8)) ||  (_hx_switch_0==HX_("upper_case",ed,dd,2a,23)) ||  (_hx_switch_0==HX_("uppercase",12,91,3e,e7)) ){
HXLINE(2935)			forceCase = 1;
HXDLIN(2935)			goto _hx_goto_151;
            		}
            		/* default */{
HXLINE(2941)			forceCase = 0;
            		}
            		_hx_goto_151:;
HXLINE(2944)		::String filter = ::flixel::addons::ui::U_obj::xml_str(data,HX_("filter",b8,1f,35,85),true,HX_("",00,00,00,00));
HXLINE(2945)		int filterMode;
HXLINE(2946)		while((filter.indexOf(HX_("_",5f,00,00,00),null()) != -1)){
HXLINE(2948)			filter = ::StringTools_obj::replace(filter,HX_("_",5f,00,00,00),HX_("",00,00,00,00));
            		}
HXLINE(2951)		::String _hx_switch_1 = filter;
            		if (  (_hx_switch_1==HX_("a",61,00,00,00)) ||  (_hx_switch_1==HX_("an",ed,54,00,00)) ||  (_hx_switch_1==HX_("n",6e,00,00,00)) ){
HXLINE(2960)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._loadInputText(): 1 letter values have been deprecated (filter attribute).",a4,a0,22,50),null()));
HXDLIN(2960)			goto _hx_goto_153;
            		}
            		if (  (_hx_switch_1==HX_("alpha",5e,a7,96,21)) ||  (_hx_switch_1==HX_("onlyalpha",72,fa,2c,18)) ){
HXLINE(2954)			filterMode = 1;
HXDLIN(2954)			goto _hx_goto_153;
            		}
            		if (  (_hx_switch_1==HX_("alphanum",a8,a5,41,21)) ||  (_hx_switch_1==HX_("alphanumeric",2f,03,e3,71)) ||  (_hx_switch_1==HX_("onlyalphanumeric",9b,fa,fd,ec)) ){
HXLINE(2958)			filterMode = 3;
HXDLIN(2958)			goto _hx_goto_153;
            		}
            		if (  (_hx_switch_1==HX_("num",46,de,53,00)) ||  (_hx_switch_1==HX_("numeric",cd,e2,c0,ab)) ||  (_hx_switch_1==HX_("onlynumeric",e1,22,e1,32)) ){
HXLINE(2956)			filterMode = 2;
HXDLIN(2956)			goto _hx_goto_153;
            		}
            		/* default */{
HXLINE(2962)			filterMode = 0;
            		}
            		_hx_goto_153:;
HXLINE(2965)		fti->setFormat(the_font,size,color,align,null(),null(),null());
HXLINE(2966)		fti->set_forceCase(forceCase);
HXLINE(2967)		fti->set_filterMode(filterMode);
HXLINE(2968)		border->apply(fti);
HXLINE(2969)		fti->drawFrame(null());
HXLINE(2926)		::Dynamic ft = fti;
HXLINE(2972)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(2974)			::cpp::VirtualArray params = null();
HXDLIN(2974)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(2974)				params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2974)				{
HXLINE(2974)					int _g = 0;
HXDLIN(2974)					::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(2974)					while((_g < _g1->length)){
HXLINE(2974)						 ::Xml param = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(2974)						_g = (_g + 1);
HXDLIN(2974)						bool _hx_tmp;
HXDLIN(2974)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(2974)							_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            						}
            						else {
HXLINE(2974)							_hx_tmp = false;
            						}
HXDLIN(2974)						if (_hx_tmp) {
HXLINE(2974)							::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(2974)							type = type.toLowerCase();
HXDLIN(2974)							::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(2974)							 ::Dynamic value = valueStr;
HXDLIN(2974)							int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(2974)							::String _hx_switch_2 = type;
            							if (  (_hx_switch_2==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_2==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2974)								::String str1 = ::String(valueStr);
HXDLIN(2974)								str1 = str1.toLowerCase();
HXDLIN(2974)								bool _hx_tmp1;
HXDLIN(2974)								if ((str1 != HX_("true",4e,a7,03,4d))) {
HXLINE(2974)									_hx_tmp1 = (str1 == HX_("1",31,00,00,00));
            								}
            								else {
HXLINE(2974)									_hx_tmp1 = true;
            								}
HXDLIN(2974)								if (_hx_tmp1) {
HXLINE(2974)									value = true;
            								}
            								else {
HXLINE(2974)									value = false;
            								}
HXDLIN(2974)								goto _hx_goto_155;
            							}
            							if (  (_hx_switch_2==HX_("float",9c,c5,96,02)) ){
HXLINE(2974)								value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2974)								goto _hx_goto_155;
            							}
            							if (  (_hx_switch_2==HX_("color",63,71,5c,4a)) ||  (_hx_switch_2==HX_("hex",db,42,4f,00)) ){
HXLINE(2974)								 ::Dynamic return_val1 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2974)								if (::hx::IsNull( return_val1 )) {
HXLINE(2974)									HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            								}
HXDLIN(2974)								value = return_val1;
HXDLIN(2974)								goto _hx_goto_155;
            							}
            							if (  (_hx_switch_2==HX_("int",ef,0c,50,00)) ){
HXLINE(2974)								value = ::Std_obj::parseInt(valueStr);
HXDLIN(2974)								goto _hx_goto_155;
            							}
            							if (  (_hx_switch_2==HX_("string",d1,28,30,11)) ){
HXLINE(2974)								value = ::String(valueStr);
HXDLIN(2974)								goto _hx_goto_155;
            							}
            							_hx_goto_155:;
HXDLIN(2974)							params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("value",71,7f,b8,31),value)
            								->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            						}
            					}
            				}
HXDLIN(2974)				params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2974)				{
HXLINE(2974)					int _g2 = 0;
HXDLIN(2974)					int _g3 = params->get_length();
HXDLIN(2974)					while((_g2 < _g3)){
HXLINE(2974)						_g2 = (_g2 + 1);
HXDLIN(2974)						int i = (_g2 - 1);
HXDLIN(2974)						params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            					}
            				}
            			}
HXDLIN(2974)			::cpp::VirtualArray params1 = params;
HXLINE(2975)			::Dynamic ihp = ft;
HXLINE(2976)			::flixel::addons::ui::interfaces::IHasParams_obj::set_params(ihp,params1);
            		}
HXLINE(2979)		bool _hx_tmp2;
HXDLIN(2979)		if ((H > 0)) {
HXLINE(2979)			_hx_tmp2 = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(ft) != H);
            		}
            		else {
HXLINE(2979)			_hx_tmp2 = false;
            		}
HXDLIN(2979)		if (_hx_tmp2) {
HXLINE(2981)			if (::Std_obj::isOfType(ft,::hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE(2983)				::Dynamic r = ft;
HXLINE(2984)				::flixel::addons::ui::interfaces::IResizable_obj::resize(r,::flixel::addons::ui::interfaces::IResizable_obj::get_width(r),H);
            			}
            		}
HXLINE(2988)		return ft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadInputText,return )

 ::flixel::addons::ui::FlxUIRadioGroup FlxUI_obj::_loadRadioGroup( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3067__loadRadioGroup)
HXLINE(3068)		 ::flixel::addons::ui::FlxUIRadioGroup frg = null();
HXLINE(3070)		::String dot_src = ::flixel::addons::ui::U_obj::xml_str(data,HX_("dot_src",ee,a6,9d,a9),true,null());
HXLINE(3071)		::String radio_src = ::flixel::addons::ui::U_obj::xml_str(data,HX_("radio_src",60,96,16,fe),true,null());
HXLINE(3073)		::Array< ::String > labels = ::Array_obj< ::String >::__new();
HXLINE(3074)		::Array< ::String > names = ::Array_obj< ::String >::__new();
HXLINE(3076)		int W = ( (int)(this->_loadWidth(data,11,HX_("radio_width",82,7c,59,e9),null())) );
HXLINE(3077)		int H = ( (int)(this->_loadHeight(data,11,HX_("radio_height",eb,ed,42,fb),null())) );
HXLINE(3079)		int scrollH = ( (int)(this->_loadHeight(data,0,HX_("height",e7,07,4c,02),null())) );
HXLINE(3080)		int scrollW = ( (int)(this->_loadHeight(data,0,HX_("width",06,b6,62,ca),null())) );
HXLINE(3082)		int labelW = ( (int)(this->_loadWidth(data,100,HX_("label_width",3b,fa,b5,dc),null())) );
HXLINE(3084)		{
HXLINE(3084)			int _g = 0;
HXDLIN(3084)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("radio",fb,10,18,e4));
HXDLIN(3084)			while((_g < _g1->length)){
HXLINE(3084)				 ::Xml radioNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3084)				_g = (_g + 1);
HXLINE(3086)				::String name = ::flixel::addons::ui::U_obj::xml_name(radioNode);
HXLINE(3087)				::String label = ::flixel::addons::ui::U_obj::xml_str(radioNode,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(3089)				::String context = ::flixel::addons::ui::U_obj::xml_str(radioNode,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(3090)				::String code = ::flixel::addons::ui::U_obj::xml_str(radioNode,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(3091)				label = this->getText(label,context,true,code);
HXLINE(3093)				names->push(name);
HXLINE(3094)				labels->push(label);
            			}
            		}
HXLINE(3097)		names->reverse();
HXLINE(3098)		labels->reverse();
HXLINE(3100)		Float y_space = this->_loadHeight(data,25,HX_("y_space",40,f5,f2,24),null());
HXLINE(3102)		::cpp::VirtualArray params = null();
HXDLIN(3102)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(3102)			params = ::cpp::VirtualArray_obj::__new();
HXDLIN(3102)			{
HXLINE(3102)				int _g2 = 0;
HXDLIN(3102)				::Array< ::Dynamic> _g3 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(3102)				while((_g2 < _g3->length)){
HXLINE(3102)					 ::Xml param = _g3->__get(_g2).StaticCast<  ::Xml >();
HXDLIN(3102)					_g2 = (_g2 + 1);
HXDLIN(3102)					bool _hx_tmp;
HXDLIN(3102)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(3102)						_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(3102)						_hx_tmp = false;
            					}
HXDLIN(3102)					if (_hx_tmp) {
HXLINE(3102)						::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(3102)						type = type.toLowerCase();
HXDLIN(3102)						::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(3102)						 ::Dynamic value = valueStr;
HXDLIN(3102)						int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(3102)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(3102)							::String str = ::String(valueStr);
HXDLIN(3102)							str = str.toLowerCase();
HXDLIN(3102)							bool _hx_tmp1;
HXDLIN(3102)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(3102)								_hx_tmp1 = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(3102)								_hx_tmp1 = true;
            							}
HXDLIN(3102)							if (_hx_tmp1) {
HXLINE(3102)								value = true;
            							}
            							else {
HXLINE(3102)								value = false;
            							}
HXDLIN(3102)							goto _hx_goto_160;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(3102)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(3102)							goto _hx_goto_160;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(3102)							 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(3102)							if (::hx::IsNull( return_val )) {
HXLINE(3102)								HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            							}
HXDLIN(3102)							value = return_val;
HXDLIN(3102)							goto _hx_goto_160;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(3102)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(3102)							goto _hx_goto_160;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(3102)							value = ::String(valueStr);
HXDLIN(3102)							goto _hx_goto_160;
            						}
            						_hx_goto_160:;
HXDLIN(3102)						params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXDLIN(3102)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(3102)			{
HXLINE(3102)				int _g4 = 0;
HXDLIN(3102)				int _g5 = params->get_length();
HXDLIN(3102)				while((_g4 < _g5)){
HXLINE(3102)					_g4 = (_g4 + 1);
HXDLIN(3102)					int i = (_g4 - 1);
HXDLIN(3102)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            				}
            			}
            		}
HXDLIN(3102)		::cpp::VirtualArray params1 = params;
HXLINE(3110)		 ::Dynamic radio_asset = null();
HXLINE(3111)		if ((radio_src != HX_("",00,00,00,00))) {
HXLINE(3113)			radio_asset = ::flixel::addons::ui::U_obj::gfx(radio_src,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(3115)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00))) {
HXLINE(3118)				if ((::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00)),HX_("slice9",a7,03,04,70),null(),null()) != HX_("",00,00,00,00))) {
HXLINE(3121)					radio_asset = this->_load9SliceSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00)),null());
            				}
            				else {
HXLINE(3126)					radio_asset = this->_loadSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00)));
            				}
            			}
            		}
HXLINE(3130)		 ::Dynamic dot_asset = null();
HXLINE(3131)		if ((dot_src != HX_("",00,00,00,00))) {
HXLINE(3133)			dot_asset = ::flixel::addons::ui::U_obj::gfx(dot_src,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(3135)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("dot",89,42,4c,00))) {
HXLINE(3138)				if ((::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("dot",89,42,4c,00)),HX_("slice9",a7,03,04,70),null(),null()) != HX_("",00,00,00,00))) {
HXLINE(3141)					dot_asset = this->_load9SliceSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("dot",89,42,4c,00)),null());
            				}
            				else {
HXLINE(3146)					dot_asset = this->_loadSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("dot",89,42,4c,00)));
            				}
            			}
            		}
HXLINE(3153)		 ::flixel::math::FlxBasePoint prevOffset = null();
HXLINE(3154)		 ::flixel::math::FlxBasePoint nextOffset = null();
HXLINE(3156)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("button",f2,61,e0,d9))) {
HXLINE(3158)			int _g6 = 0;
HXDLIN(3158)			::Array< ::Dynamic> _g7 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("button",f2,61,e0,d9));
HXDLIN(3158)			while((_g6 < _g7->length)){
HXLINE(3158)				 ::Xml btnNode = _g7->__get(_g6).StaticCast<  ::Xml >();
HXDLIN(3158)				_g6 = (_g6 + 1);
HXLINE(3160)				::String name1 = ::flixel::addons::ui::U_obj::xml_name(btnNode);
HXLINE(3161)				bool _hx_tmp2;
HXDLIN(3161)				if ((name1 != HX_("previous",37,bc,b0,23))) {
HXLINE(3161)					_hx_tmp2 = (name1 == HX_("prev",f3,be,5e,4a));
            				}
            				else {
HXLINE(3161)					_hx_tmp2 = true;
            				}
HXDLIN(3161)				if (_hx_tmp2) {
HXLINE(3163)					Float x = ::flixel::addons::ui::U_obj::xml_f(btnNode,HX_("x",78,00,00,00),null());
HXDLIN(3163)					Float y = ::flixel::addons::ui::U_obj::xml_f(btnNode,HX_("y",79,00,00,00),null());
HXDLIN(3163)					 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN(3163)					point->_inPool = false;
HXDLIN(3163)					prevOffset = point;
            				}
            				else {
HXLINE(3165)					if ((name1 == HX_("next",f3,84,02,49))) {
HXLINE(3167)						Float x1 = ::flixel::addons::ui::U_obj::xml_f(btnNode,HX_("x",78,00,00,00),null());
HXDLIN(3167)						Float y1 = ::flixel::addons::ui::U_obj::xml_f(btnNode,HX_("y",79,00,00,00),null());
HXDLIN(3167)						 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x1,y1);
HXDLIN(3167)						point1->_inPool = false;
HXDLIN(3167)						nextOffset = point1;
            					}
            				}
            			}
            		}
HXLINE(3172)		frg =  ::flixel::addons::ui::FlxUIRadioGroup_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),names,labels,null(),y_space,W,H,labelW,null(),prevOffset,nextOffset,null(),null());
HXLINE(3173)		frg->set_params(params1);
HXLINE(3175)		bool _hx_tmp3;
HXDLIN(3175)		if (::hx::IsNotEq( radio_asset,HX_("",00,00,00,00) )) {
HXLINE(3175)			_hx_tmp3 = ::hx::IsNotNull( radio_asset );
            		}
            		else {
HXLINE(3175)			_hx_tmp3 = false;
            		}
HXDLIN(3175)		if (_hx_tmp3) {
HXLINE(3177)			frg->loadGraphics(radio_asset,dot_asset);
            		}
HXLINE(3180)		int text_x = ::Std_obj::_hx_int(this->_loadWidth(data,0,HX_("text_x",26,65,88,d8),null()));
HXLINE(3181)		int text_y = ::Std_obj::_hx_int(this->_loadHeight(data,0,HX_("text_y",27,65,88,d8),null()));
HXLINE(3183)		::Array< ::Dynamic> radios = frg->getRadios();
HXLINE(3184)		int i1 = 0;
HXLINE(3185)		bool styleSet = false;
HXLINE(3187)		 ::Dynamic radioList = data->elementsNamed(HX_("radio",fb,10,18,e4));
HXLINE(3188)		 ::Xml radioNode1 = null();
HXLINE(3190)		{
HXLINE(3190)			int _g8 = 0;
HXDLIN(3190)			int _g9 = radios->length;
HXDLIN(3190)			while((_g8 < _g9)){
HXLINE(3190)				_g8 = (_g8 + 1);
HXDLIN(3190)				int k = (_g8 - 1);
HXLINE(3192)				 ::flixel::addons::ui::FlxUICheckBox fo = radios->__get(((radios->length - 1) - k)).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >();
HXLINE(3193)				if (( (bool)(radioList->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(3193)					radioNode1 = ( ( ::Xml)(radioList->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
            				}
            				else {
HXLINE(3193)					radioNode1 = null();
            				}
HXLINE(3194)				if (::hx::IsNotNull( fo )) {
HXLINE(3196)					if (::Std_obj::isOfType(fo,::hx::ClassOf< ::flixel::addons::ui::FlxUICheckBox >())) {
HXLINE(3198)						 ::flixel::addons::ui::FlxUICheckBox fc = fo;
HXLINE(3199)						 ::flixel::text::FlxText t = this->formatButtonText(data,fc);
HXLINE(3200)						bool _hx_tmp4;
HXDLIN(3200)						if (::hx::IsNotNull( t )) {
HXLINE(3200)							_hx_tmp4 = (styleSet == false);
            						}
            						else {
HXLINE(3200)							_hx_tmp4 = false;
            						}
HXDLIN(3200)						if (_hx_tmp4) {
HXLINE(3202)							 ::flixel::addons::ui::FontDef fd = ::flixel::addons::ui::FontDef_obj::copyFromFlxText(t);
HXLINE(3203)							 ::flixel::addons::ui::BorderDef bd =  ::flixel::addons::ui::BorderDef_obj::__alloc( HX_CTX ,t->borderStyle,t->borderColor,t->borderSize,t->borderQuality);
HXLINE(3204)							::String _hx_tmp5 = ::flixel::text::_FlxText::FlxTextAlign_Impl__obj::fromOpenFL(t->_defaultFormat->align);
HXDLIN(3204)							frg->set_activeStyle( ::flixel::addons::ui::CheckStyle_obj::__alloc( HX_CTX ,16777215,fd,_hx_tmp5,t->color,bd));
HXLINE(3205)							styleSet = true;
            						}
HXLINE(3207)						fc->set_textX(( (Float)(text_x) ));
HXLINE(3208)						fc->set_textY(( (Float)(text_y) ));
HXLINE(3209)						i1 = (i1 + 1);
HXLINE(3210)						if (::hx::IsNotNull( radioNode1 )) {
HXLINE(3212)							bool _hx_tmp6;
HXDLIN(3212)							if ((radioNode1->nodeType != ::Xml_obj::Document)) {
HXLINE(3212)								_hx_tmp6 = (radioNode1->nodeType != ::Xml_obj::Element);
            							}
            							else {
HXLINE(3212)								_hx_tmp6 = false;
            							}
HXDLIN(3212)							if (_hx_tmp6) {
HXLINE(3212)								HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(radioNode1->nodeType)));
            							}
HXDLIN(3212)							this->_loadTooltip(fc,radioNode1);
            						}
            					}
            				}
            			}
            		}
HXLINE(3218)		if ((scrollW != 0)) {
HXLINE(3220)			frg->fixedSize = true;
HXLINE(3221)			frg->set_width(( (Float)(scrollW) ));
            		}
HXLINE(3223)		if ((scrollH != 0)) {
HXLINE(3225)			frg->fixedSize = true;
HXLINE(3226)			frg->set_height(( (Float)(scrollH) ));
            		}
HXLINE(3229)		return frg;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadRadioGroup,return )

 ::flixel::addons::ui::FlxUICheckBox FlxUI_obj::_loadCheckBox( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3233__loadCheckBox)
HXLINE(3234)		 ::flixel::addons::ui::FlxUICheckBox fc = null();
HXLINE(3236)		::String label = ::flixel::addons::ui::U_obj::xml_str(data,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(3237)		::String context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(3238)		::String code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(3240)		bool checked = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("checked",27,b3,24,13),false);
HXLINE(3242)		label = this->getText(label,context,true,code);
HXLINE(3244)		int labelW = ( (int)(this->_loadWidth(data,100,HX_("label_width",3b,fa,b5,dc),null())) );
HXLINE(3246)		::String check_src = ::flixel::addons::ui::U_obj::xml_str(data,HX_("check_src",ad,88,29,a8),true,null());
HXLINE(3247)		::String box_src = ::flixel::addons::ui::U_obj::xml_str(data,HX_("box_src",70,0b,0d,a4),true,null());
HXLINE(3249)		::cpp::VirtualArray params = null();
HXDLIN(3249)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(3249)			params = ::cpp::VirtualArray_obj::__new();
HXDLIN(3249)			{
HXLINE(3249)				int _g = 0;
HXDLIN(3249)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(3249)				while((_g < _g1->length)){
HXLINE(3249)					 ::Xml param = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3249)					_g = (_g + 1);
HXDLIN(3249)					bool _hx_tmp;
HXDLIN(3249)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(3249)						_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(3249)						_hx_tmp = false;
            					}
HXDLIN(3249)					if (_hx_tmp) {
HXLINE(3249)						::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(3249)						type = type.toLowerCase();
HXDLIN(3249)						::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(3249)						 ::Dynamic value = valueStr;
HXDLIN(3249)						int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(3249)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(3249)							::String str = ::String(valueStr);
HXDLIN(3249)							str = str.toLowerCase();
HXDLIN(3249)							bool _hx_tmp1;
HXDLIN(3249)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(3249)								_hx_tmp1 = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(3249)								_hx_tmp1 = true;
            							}
HXDLIN(3249)							if (_hx_tmp1) {
HXLINE(3249)								value = true;
            							}
            							else {
HXLINE(3249)								value = false;
            							}
HXDLIN(3249)							goto _hx_goto_166;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(3249)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(3249)							goto _hx_goto_166;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(3249)							 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(3249)							if (::hx::IsNull( return_val )) {
HXLINE(3249)								HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            							}
HXDLIN(3249)							value = return_val;
HXDLIN(3249)							goto _hx_goto_166;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(3249)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(3249)							goto _hx_goto_166;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(3249)							value = ::String(valueStr);
HXDLIN(3249)							goto _hx_goto_166;
            						}
            						_hx_goto_166:;
HXDLIN(3249)						params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXDLIN(3249)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(3249)			{
HXLINE(3249)				int _g2 = 0;
HXDLIN(3249)				int _g3 = params->get_length();
HXDLIN(3249)				while((_g2 < _g3)){
HXLINE(3249)					_g2 = (_g2 + 1);
HXDLIN(3249)					int i = (_g2 - 1);
HXDLIN(3249)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            				}
            			}
            		}
HXDLIN(3249)		::cpp::VirtualArray params1 = params;
HXLINE(3251)		 ::Dynamic box_asset = null();
HXLINE(3252)		 ::Dynamic check_asset = null();
HXLINE(3260)		if ((box_src != HX_("",00,00,00,00))) {
HXLINE(3263)			box_asset = ::flixel::addons::ui::U_obj::gfx(box_src,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(3265)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00))) {
HXLINE(3268)				if ((::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00)),HX_("slice9",a7,03,04,70),null(),null()) != HX_("",00,00,00,00))) {
HXLINE(3271)					box_asset = this->_load9SliceSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00)),null());
            				}
            				else {
HXLINE(3276)					box_asset = this->_loadSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00)));
            				}
            			}
            		}
HXLINE(3280)		if ((check_src != HX_("",00,00,00,00))) {
HXLINE(3283)			check_asset = ::flixel::addons::ui::U_obj::gfx(check_src,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(3285)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("check",c8,98,b6,45))) {
HXLINE(3288)				if ((::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("check",c8,98,b6,45)),HX_("slice9",a7,03,04,70),null(),null()) != HX_("",00,00,00,00))) {
HXLINE(3291)					check_asset = this->_load9SliceSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("check",c8,98,b6,45)),null());
            				}
            				else {
HXLINE(3296)					check_asset = this->_loadSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("check",c8,98,b6,45)));
            				}
            			}
            		}
HXLINE(3300)		fc =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,0,0,box_asset,check_asset,label,labelW,params1,null());
HXLINE(3301)		this->formatButtonText(data,fc);
HXLINE(3303)		int text_x = ::Std_obj::_hx_int(this->_loadWidth(data,0,HX_("text_x",26,65,88,d8),null()));
HXLINE(3304)		int text_y = ::Std_obj::_hx_int(this->_loadHeight(data,0,HX_("text_y",27,65,88,d8),null()));
HXLINE(3306)		fc->set_textX(( (Float)(text_x) ));
HXLINE(3307)		fc->set_textY(( (Float)(text_y) ));
HXLINE(3309)		fc->set_text(label);
HXLINE(3311)		fc->set_checked(checked);
HXLINE(3313)		return fc;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadCheckBox,return )

 ::flixel::addons::ui::FlxUIDropDownMenu FlxUI_obj::_loadDropDownMenu( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3317__loadDropDownMenu)
HXLINE(3341)		 ::flixel::addons::ui::FlxUIDropDownMenu fud = null();
HXLINE(3343)		::String label = ::flixel::addons::ui::U_obj::xml_str(data,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(3344)		::String context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(3345)		::String code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(3346)		label = this->getText(label,context,true,code);
HXLINE(3348)		::String back_def = ::flixel::addons::ui::U_obj::xml_str(data,HX_("back_def",6d,f8,3d,17),true,null());
HXLINE(3349)		::String panel_def = ::flixel::addons::ui::U_obj::xml_str(data,HX_("panel_def",ca,cb,5d,a4),true,null());
HXLINE(3350)		::String button_def = ::flixel::addons::ui::U_obj::xml_str(data,HX_("button_def",b8,c1,34,be),true,null());
HXLINE(3351)		::String label_def = ::flixel::addons::ui::U_obj::xml_str(data,HX_("label_def",ba,96,96,65),true,null());
HXLINE(3353)		 ::flixel::FlxSprite back_asset = null();
HXLINE(3354)		 ::flixel::addons::ui::FlxUI9SliceSprite panel_asset = null();
HXLINE(3355)		 ::flixel::addons::ui::FlxUISpriteButton button_asset = null();
HXLINE(3356)		 ::flixel::addons::ui::FlxUIText label_asset = null();
HXLINE(3358)		if ((back_def != HX_("",00,00,00,00))) {
HXLINE(3360)			back_asset = this->_loadSprite(this->getDefinition(back_def,null()));
            		}
HXLINE(3363)		if ((panel_def != HX_("",00,00,00,00))) {
HXLINE(3365)			panel_asset = this->_load9SliceSprite(this->getDefinition(panel_def,null()),null());
            		}
HXLINE(3368)		if ((button_def != HX_("",00,00,00,00))) {
HXLINE(3370)			try {
            				HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE(3372)				button_asset = ( ( ::flixel::addons::ui::FlxUISpriteButton)(this->_loadButton(this->getDefinition(button_def,null()),false,false,null())) );
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::openfl::errors::Error e = _hx_e;
HXLINE(3376)					::flixel::FlxG_obj::log->advanced(((HX_("couldn't loadButton with definition \"",2d,5f,ac,2b) + button_def) + HX_("\"",22,00,00,00)),::flixel::_hx_system::debug::log::LogStyle_obj::NORMAL,null());
HXLINE(3377)					button_asset = null();
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE(3381)		if ((label_def != HX_("",00,00,00,00))) {
HXLINE(3383)			try {
            				HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE(3385)				label_asset = ( ( ::flixel::addons::ui::FlxUIText)(this->_loadText(this->getDefinition(label_def,null()))) );
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::openfl::errors::Error e1 = _hx_e;
HXLINE(3389)					::flixel::FlxG_obj::log->advanced(((HX_("couldn't loadText with definition \"",a8,f1,da,63) + label_def) + HX_("\"",22,00,00,00)),::flixel::_hx_system::debug::log::LogStyle_obj::NORMAL,null());
HXLINE(3390)					label_asset = null();
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(3392)			bool _hx_tmp;
HXDLIN(3392)			if (::hx::IsNotNull( label_asset )) {
HXLINE(3392)				_hx_tmp = (label != HX_("",00,00,00,00));
            			}
            			else {
HXLINE(3392)				_hx_tmp = false;
            			}
HXDLIN(3392)			if (_hx_tmp) {
HXLINE(3394)				label_asset->set_text(label);
            			}
            		}
HXLINE(3398)		::Array< ::Dynamic> asset_list = null();
HXLINE(3399)		::Array< ::Dynamic> data_list = null();
HXLINE(3401)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("data",2a,56,63,42))) {
HXLINE(3403)			int _g = 0;
HXDLIN(3403)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("data",2a,56,63,42));
HXDLIN(3403)			while((_g < _g1->length)){
HXLINE(3403)				 ::Xml dataNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3403)				_g = (_g + 1);
HXLINE(3405)				if (::hx::IsNull( data_list )) {
HXLINE(3407)					data_list = ::Array_obj< ::Dynamic>::__new();
            				}
HXLINE(3409)				::String namel = ::flixel::addons::ui::U_obj::xml_str(dataNode,HX_("name",4b,72,ff,48),true,null());
HXDLIN(3409)				 ::flixel::addons::ui::StrNameLabel namel1 =  ::flixel::addons::ui::StrNameLabel_obj::__alloc( HX_CTX ,namel,::flixel::addons::ui::U_obj::xml_str(dataNode,HX_("label",f4,0d,af,6f),null(),null()));
HXLINE(3410)				data_list->push(namel1);
            			}
            		}
            		else {
HXLINE(3413)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("asset",f0,69,39,26))) {
HXLINE(3415)				int _g2 = 0;
HXDLIN(3415)				::Array< ::Dynamic> _g3 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("asset",f0,69,39,26));
HXDLIN(3415)				while((_g2 < _g3->length)){
HXLINE(3415)					 ::Xml assetNode = _g3->__get(_g2).StaticCast<  ::Xml >();
HXDLIN(3415)					_g2 = (_g2 + 1);
HXLINE(3417)					if (::hx::IsNull( asset_list )) {
HXLINE(3419)						asset_list = ::Array_obj< ::Dynamic>::__new();
            					}
HXLINE(3421)					::String def_name = ::flixel::addons::ui::U_obj::xml_str(assetNode,HX_("def",c5,39,4c,00),true,null());
HXLINE(3422)					::String name = ::flixel::addons::ui::U_obj::xml_name(assetNode);
HXLINE(3423)					 ::flixel::addons::ui::FlxUIButton asset = null();
HXLINE(3425)					try {
            						HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE(3427)						asset = ( ( ::flixel::addons::ui::FlxUIButton)(this->_loadButton(this->getDefinition(def_name,null()),false,null(),null())) );
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::openfl::errors::Error e2 = _hx_e;
HXLINE(3431)							::flixel::FlxG_obj::log->advanced(((HX_("couldn't loadButton with definition \"",2d,5f,ac,2b) + def_name) + HX_("\"",22,00,00,00)),::flixel::_hx_system::debug::log::LogStyle_obj::NORMAL,null());
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXLINE(3434)					if (::hx::IsNotNull( asset )) {
HXLINE(3436)						asset->name = name;
HXLINE(3437)						if (::hx::IsNull( asset_list )) {
HXLINE(3439)							asset_list = ::Array_obj< ::Dynamic>::__new();
            						}
HXLINE(3441)						asset_list->push(asset);
            					}
            				}
            			}
            		}
HXLINE(3446)		 ::flixel::addons::ui::FlxUIDropDownHeader header =  ::flixel::addons::ui::FlxUIDropDownHeader_obj::__alloc( HX_CTX ,120,back_asset,label_asset,button_asset);
HXLINE(3447)		fud =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,0,0,data_list,null(),header,panel_asset,asset_list,null());
HXLINE(3449)		return fud;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadDropDownMenu,return )

bool FlxUI_obj::_loadTest( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3453__loadTest)
HXLINE(3454)		bool result = true;
HXLINE(3457)		::String _hx_tmp;
HXDLIN(3457)		if ((data->nodeType == ::Xml_obj::Document)) {
HXLINE(3457)			_hx_tmp = HX_("Document",3b,ab,c4,74);
            		}
            		else {
HXLINE(3457)			if ((data->nodeType != ::Xml_obj::Element)) {
HXLINE(3457)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(data->nodeType)));
            			}
HXDLIN(3457)			_hx_tmp = data->nodeName;
            		}
HXDLIN(3457)		if ((_hx_tmp == HX_("load_if",96,33,eb,08))) {
HXLINE(3459)			result = this->_loadTestSub(data);
HXLINE(3460)			if ((result == false)) {
HXLINE(3462)				return false;
            			}
            		}
HXLINE(3467)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("load_if",96,33,eb,08))) {
HXLINE(3487)			int _g = 0;
HXDLIN(3487)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("load_if",96,33,eb,08));
HXDLIN(3487)			while((_g < _g1->length)){
HXLINE(3487)				 ::Xml node = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3487)				_g = (_g + 1);
HXLINE(3489)				 ::Xml _this = node;
HXDLIN(3489)				bool _hx_tmp1;
HXDLIN(3489)				if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(3489)					_hx_tmp1 = (_this->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE(3489)					_hx_tmp1 = false;
            				}
HXDLIN(3489)				if (_hx_tmp1) {
HXLINE(3489)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            				}
HXDLIN(3489)				if (::hx::IsNull( _this->children->__get(0).StaticCast<  ::Xml >() )) {
HXLINE(3491)					result = this->_loadTestSub(node);
HXLINE(3492)					if ((result == false)) {
HXLINE(3494)						return false;
            					}
            				}
            			}
            		}
HXLINE(3499)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTest,return )

bool FlxUI_obj::_loadTestSub( ::Xml node){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3503__loadTestSub)
HXLINE(3504)		bool matchValue = ::flixel::addons::ui::U_obj::xml_bool(node,HX_("is",ea,5b,00,00),true);
HXLINE(3505)		bool match = matchValue;
HXLINE(3508)		Float aspect_ratio = ::flixel::addons::ui::U_obj::xml_f(node,HX_("aspect_ratio",24,04,8d,fd),-1);
HXLINE(3509)		if ((aspect_ratio != -1)) {
HXLINE(3511)			match = true;
HXLINE(3512)			Float screen_ratio = (::hx::TCast< Float >::cast(::flixel::FlxG_obj::width) / ::hx::TCast< Float >::cast(::flixel::FlxG_obj::height));
HXLINE(3513)			Float diff = ::Math_obj::abs((screen_ratio - aspect_ratio));
HXLINE(3514)			if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(node,HX_("tolerance",0d,3d,7c,33))) {
HXLINE(3516)				Float tolerance = ::flixel::addons::ui::U_obj::xml_f(node,HX_("tolerance",0d,3d,7c,33),((Float)0.1));
HXLINE(3517)				if ((diff > tolerance)) {
HXLINE(3519)					match = false;
            				}
            			}
            			else {
HXLINE(3522)				bool _hx_tmp;
HXDLIN(3522)				if (!(::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(node,HX_("tolerance_plus",0c,af,15,a0)))) {
HXLINE(3522)					_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(node,HX_("tolerance_minus",7e,cc,ae,b6));
            				}
            				else {
HXLINE(3522)					_hx_tmp = true;
            				}
HXDLIN(3522)				if (_hx_tmp) {
HXLINE(3524)					Float tolerance_minus = ::flixel::addons::ui::U_obj::xml_f(node,HX_("tolerance_minus",7e,cc,ae,b6),-1);
HXLINE(3525)					Float tolerance_plus = ::flixel::addons::ui::U_obj::xml_f(node,HX_("tolerance_plus",0c,af,15,a0),-1);
HXLINE(3526)					bool _hx_tmp1;
HXDLIN(3526)					if ((screen_ratio > aspect_ratio)) {
HXLINE(3526)						_hx_tmp1 = (tolerance_plus != -1);
            					}
            					else {
HXLINE(3526)						_hx_tmp1 = false;
            					}
HXDLIN(3526)					if (_hx_tmp1) {
HXLINE(3528)						if ((diff > tolerance_plus)) {
HXLINE(3530)							match = false;
            						}
            					}
HXLINE(3533)					bool _hx_tmp2;
HXDLIN(3533)					if ((screen_ratio < aspect_ratio)) {
HXLINE(3533)						_hx_tmp2 = (tolerance_minus != -1);
            					}
            					else {
HXLINE(3533)						_hx_tmp2 = false;
            					}
HXDLIN(3533)					if (_hx_tmp2) {
HXLINE(3535)						if ((diff > tolerance_minus)) {
HXLINE(3537)							match = false;
            						}
            					}
            				}
            			}
HXLINE(3541)			if ((match != matchValue)) {
HXLINE(3543)				return false;
            			}
            		}
HXLINE(3548)		 ::flixel::math::FlxBasePoint resolution = ::flixel::addons::ui::U_obj::xml_pt(node,HX_("resolution",2c,35,49,6d),null());
HXLINE(3549)		if (::hx::IsNotNull( resolution )) {
HXLINE(3551)			match = true;
HXLINE(3552)			 ::flixel::math::FlxBasePoint toleranceRes = ::flixel::addons::ui::U_obj::xml_pt(node,HX_("tolerance",0d,3d,7c,33),null());
HXLINE(3553)			if (::hx::IsNull( toleranceRes )) {
HXLINE(3555)				 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(0,0);
HXDLIN(3555)				point->_inPool = false;
HXDLIN(3555)				toleranceRes = point;
            			}
HXLINE(3557)			Float diffX = ::Math_obj::abs((resolution->x - ( (Float)(::flixel::FlxG_obj::width) )));
HXLINE(3558)			Float diffY = ::Math_obj::abs((resolution->y - ( (Float)(::flixel::FlxG_obj::height) )));
HXLINE(3559)			bool _hx_tmp3;
HXDLIN(3559)			if (!((diffX > toleranceRes->x))) {
HXLINE(3559)				_hx_tmp3 = (diffY > toleranceRes->y);
            			}
            			else {
HXLINE(3559)				_hx_tmp3 = true;
            			}
HXDLIN(3559)			if (_hx_tmp3) {
HXLINE(3561)				match = false;
            			}
HXLINE(3563)			if ((match != matchValue)) {
HXLINE(3565)				return false;
            			}
            		}
HXLINE(3570)		::String haxeDef = ::flixel::addons::ui::U_obj::xml_str(node,HX_("haxedef",5f,a1,7a,08),true,HX_("",00,00,00,00));
HXLINE(3571)		bool haxeVal = ::flixel::addons::ui::U_obj::xml_bool(node,HX_("value",71,7f,b8,31),true);
HXLINE(3573)		if ((haxeDef != HX_("",00,00,00,00))) {
HXLINE(3575)			match = true;
HXLINE(3576)			bool defValue = ::flixel::addons::ui::U_obj::checkHaxedef(haxeDef);
HXLINE(3577)			match = (defValue == haxeVal);
HXLINE(3578)			if ((match != matchValue)) {
HXLINE(3580)				return false;
            			}
            		}
HXLINE(3585)		::String variable = ::flixel::addons::ui::U_obj::xml_str(node,HX_("variable",3c,12,0d,69),false,HX_("",00,00,00,00));
HXLINE(3586)		::String variableType = ::flixel::addons::ui::U_obj::xml_str(node,HX_("type",ba,f2,08,4d),true,HX_("string",d1,28,30,11));
HXLINE(3587)		if ((variable != HX_("",00,00,00,00))) {
HXLINE(3589)			match = true;
HXLINE(3590)			 ::Dynamic varData = this->parseVarValue(variable);
HXLINE(3591)			if (::hx::IsNotNull( varData )) {
HXLINE(3593)				match = this->checkVariable(( (::String)(varData->__Field(HX_("variable",3c,12,0d,69),::hx::paccDynamic)) ),( (::String)(varData->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) ),variableType,( (::String)(varData->__Field(HX_("op",21,61,00,00),::hx::paccDynamic)) ),null());
            			}
HXLINE(3595)			if ((match != matchValue)) {
HXLINE(3597)				return false;
            			}
            		}
HXLINE(3600)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTestSub,return )

 ::Dynamic FlxUI_obj::parseVarValue(::String varString){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3604_parseVarValue)
HXLINE(3605)		::Array< ::String > arr = ::Array_obj< ::String >::fromData( _hx_array_data_e9110855_177,8);
HXLINE(3606)		::Array< ::String > temp;
HXLINE(3607)		{
HXLINE(3607)			int _g = 0;
HXDLIN(3607)			while((_g < arr->length)){
HXLINE(3607)				::String op = arr->__get(_g);
HXDLIN(3607)				_g = (_g + 1);
HXLINE(3609)				if ((varString.indexOf(op,null()) != -1)) {
HXLINE(3611)					temp = varString.split(op);
HXLINE(3612)					bool _hx_tmp;
HXDLIN(3612)					if (::hx::IsNotNull( temp )) {
HXLINE(3612)						_hx_tmp = (temp->length == 2);
            					}
            					else {
HXLINE(3612)						_hx_tmp = false;
            					}
HXDLIN(3612)					if (_hx_tmp) {
HXLINE(3614)						return  ::Dynamic(::hx::Anon_obj::Create(3)
            							->setFixed(0,HX_("op",21,61,00,00),op)
            							->setFixed(1,HX_("value",71,7f,b8,31),temp->__get(1))
            							->setFixed(2,HX_("variable",3c,12,0d,69),temp->__get(0)));
            					}
            				}
            			}
            		}
HXLINE(3618)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,parseVarValue,return )

 ::flixel::addons::ui::FlxUI FlxUI_obj::_loadLayout( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3622__loadLayout)
HXLINE(3623)		::String name = ::flixel::addons::ui::U_obj::xml_str(data,HX_("name",4b,72,ff,48),true,null());
HXLINE(3624)		Float X = this->_loadWidth(data,( (Float)(0) ),HX_("x",78,00,00,00),null());
HXLINE(3625)		Float Y = this->_loadHeight(data,( (Float)(0) ),HX_("y",79,00,00,00),null());
HXLINE(3626)		 ::flixel::addons::ui::FlxUI _ui = this->createUI(data);
HXLINE(3627)		_ui->set_x(X);
HXLINE(3628)		_ui->set_y(Y);
HXLINE(3629)		_ui->name = name;
HXLINE(3630)		return _ui;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadLayout,return )

void FlxUI_obj::addToCleanup(::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3634_addToCleanup)
HXLINE(3635)		if (::hx::IsNull( this->_assetsToCleanUp )) {
HXLINE(3636)			return;
            		}
HXLINE(3637)		if ((this->_assetsToCleanUp->indexOf(str,null()) == -1)) {
HXLINE(3639)			this->_assetsToCleanUp->push(str);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,addToCleanup,(void))

void FlxUI_obj::addToScaledAssets(::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3645_addToScaledAssets)
HXDLIN(3645)		bool _hx_tmp;
HXDLIN(3645)		if (::hx::IsNotNull( this->_scaledAssets )) {
HXDLIN(3645)			_hx_tmp = (this->_scaledAssets->indexOf(str,null()) == -1);
            		}
            		else {
HXDLIN(3645)			_hx_tmp = false;
            		}
HXDLIN(3645)		if (_hx_tmp) {
HXLINE(3647)			this->_scaledAssets->push(str);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,addToScaledAssets,(void))

void FlxUI_obj::cleanup(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3652_cleanup)
HXLINE(3653)		{
HXLINE(3653)			int _g = 0;
HXDLIN(3653)			::Array< ::String > _g1 = this->_assetsToCleanUp;
HXDLIN(3653)			while((_g < _g1->length)){
HXLINE(3653)				::String key = _g1->__get(_g);
HXDLIN(3653)				_g = (_g + 1);
HXLINE(3655)				::flixel::FlxG_obj::bitmap->removeByKey(key);
            			}
            		}
HXLINE(3657)		this->_assetsToCleanUp = null();
HXLINE(3658)		this->_scaledAssets = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,cleanup,(void))

 ::flixel::addons::ui::FlxUI FlxUI_obj::createUI( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3663_createUI)
HXDLIN(3663)		return  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,data,::hx::ObjectPtr<OBJ_>(this),::hx::ObjectPtr<OBJ_>(this),this->_ptr_tongue,this->liveFilePath,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,createUI,return )

 ::flixel::addons::ui::FlxUITabMenu FlxUI_obj::_loadTabMenu( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3667__loadTabMenu)
HXLINE(3668)		::String back_def_str = ::flixel::addons::ui::U_obj::xml_str(data,HX_("back_def",6d,f8,3d,17),null(),null());
HXLINE(3669)		 ::Xml back_def = this->getDefinition(back_def_str,null());
HXLINE(3670)		if (::hx::IsNull( back_def )) {
HXLINE(3672)			back_def = data;
            		}
HXLINE(3674)		back_def = ::flixel::addons::ui::FlxUI_obj::consolidateData(back_def,data,null());
HXLINE(3676)		::String back_type = ::flixel::addons::ui::U_obj::xml_str(data,HX_("back_type",12,07,9e,49),true,HX_("chrome",7a,f9,af,c2));
HXLINE(3678)		 ::flixel::FlxSprite backSprite;
HXDLIN(3678)		::String _hx_switch_0 = back_type;
            		if (  (_hx_switch_0==HX_("region",f4,c0,8c,00)) ){
HXLINE(3678)			backSprite =  ::flixel::addons::ui::FlxUIRegion_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXDLIN(3678)			goto _hx_goto_184;
            		}
            		if (  (_hx_switch_0==HX_("sprite",05,dc,95,c3)) ){
HXLINE(3678)			backSprite = this->_loadSprite(back_def);
HXDLIN(3678)			goto _hx_goto_184;
            		}
            		/* default */{
HXLINE(3678)			backSprite = this->_load9SliceSprite(back_def,HX_("tab_menu",09,73,e1,d6));
            		}
            		_hx_goto_184:;
HXLINE(3685)		 ::Xml tab_def = null();
HXLINE(3687)		bool stretch_tabs = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("stretch_tabs",38,9c,fc,5c),false);
HXLINE(3689)		::String stackToggled = HX_("front",a9,18,8e,06);
HXLINE(3690)		::String stackUntoggled = HX_("back",27,da,10,41);
HXLINE(3692)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("stacking",9a,62,b6,99))) {
HXLINE(3694)			stackToggled = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("stacking",9a,62,b6,99)),HX_("toggled",50,e2,03,cc),true,HX_("front",a9,18,8e,06));
HXLINE(3695)			stackUntoggled = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("stacking",9a,62,b6,99)),HX_("untoggled",17,e9,05,c8),true,HX_("back",27,da,10,41));
            		}
HXLINE(3698)		::String tab_spacing_str = ::flixel::addons::ui::U_obj::xml_str(data,HX_("spacing",83,33,bb,91),true,HX_("",00,00,00,00));
HXLINE(3699)		 ::Dynamic tab_spacing = null();
HXLINE(3700)		if ((tab_spacing_str != HX_("",00,00,00,00))) {
HXLINE(3702)			tab_spacing = this->_loadWidth(data,0,HX_("spacing",83,33,bb,91),null());
            		}
HXLINE(3706)		Float tab_x = this->_loadWidth(data,0,HX_("tab_x",ce,ac,e3,0a),null());
HXLINE(3707)		Float tab_y = this->_loadHeight(data,0,HX_("tab_y",cf,ac,e3,0a),null());
HXLINE(3708)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(tab_x,tab_y);
HXDLIN(3708)		point->_inPool = false;
HXDLIN(3708)		 ::flixel::math::FlxBasePoint tab_offset = point;
HXLINE(3710)		::String tab_def_str = HX_("",00,00,00,00);
HXLINE(3712)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("tab",55,5a,58,00))) {
HXLINE(3714)			{
HXLINE(3714)				int _g = 0;
HXDLIN(3714)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("tab",55,5a,58,00));
HXDLIN(3714)				while((_g < _g1->length)){
HXLINE(3714)					 ::Xml tabNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3714)					_g = (_g + 1);
HXLINE(3716)					::String temp = ::flixel::addons::ui::U_obj::xml_str(tabNode,HX_("use_def",8d,da,e9,62),null(),null());
HXLINE(3717)					if ((temp != HX_("",00,00,00,00))) {
HXLINE(3719)						tab_def_str = temp;
            					}
            				}
            			}
HXLINE(3722)			if ((tab_def_str != HX_("",00,00,00,00))) {
HXLINE(3724)				tab_def = this->getDefinition(tab_def_str,null());
            			}
            			else {
HXLINE(3728)				tab_def = ::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("tab",55,5a,58,00));
            			}
            		}
HXLINE(3732)		::Array< ::Dynamic> list_tabs = ::Array_obj< ::Dynamic>::__new();
HXLINE(3734)		::String name = HX_("",00,00,00,00);
HXLINE(3736)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("tab",55,5a,58,00))) {
HXLINE(3738)			int _g2 = 0;
HXDLIN(3738)			::Array< ::Dynamic> _g3 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("tab",55,5a,58,00));
HXDLIN(3738)			while((_g2 < _g3->length)){
HXLINE(3738)				 ::Xml tab_node = _g3->__get(_g2).StaticCast<  ::Xml >();
HXDLIN(3738)				_g2 = (_g2 + 1);
HXLINE(3740)				name = ::flixel::addons::ui::U_obj::xml_name(tab_node);
HXLINE(3742)				if ((name != HX_("",00,00,00,00))) {
HXLINE(3744)					::String label = ::flixel::addons::ui::U_obj::xml_str(tab_node,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(3745)					::String context = ::flixel::addons::ui::U_obj::xml_str(tab_node,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(3746)					::String code = ::flixel::addons::ui::U_obj::xml_str(tab_node,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(3747)					label = this->getText(label,context,true,code);
HXLINE(3749)					label = this->getText(label,context,true,code);
HXLINE(3751)					 ::Xml tab_info = ::flixel::addons::ui::FlxUI_obj::consolidateData(tab_node,tab_def,null());
HXLINE(3752)					::Dynamic tab = this->_loadButton(tab_info,true,true,HX_("tab_menu",09,73,e1,d6));
HXLINE(3753)					tab->__SetField(HX_("name",4b,72,ff,48),name,::hx::paccDynamic);
HXLINE(3754)					list_tabs->push(tab);
HXLINE(3755)					this->_loadTooltip(tab,tab_info);
            				}
            			}
            		}
HXLINE(3760)		if ((list_tabs->length > 0)) {
HXLINE(3762)			bool _hx_tmp;
HXDLIN(3762)			if (::hx::IsNotNull( tab_def )) {
HXLINE(3762)				_hx_tmp = !(::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(tab_def,HX_("text",ad,cc,f9,4c)));
            			}
            			else {
HXLINE(3762)				_hx_tmp = true;
            			}
HXDLIN(3762)			if (_hx_tmp) {
HXLINE(3764)				int _g4 = 0;
HXDLIN(3764)				while((_g4 < list_tabs->length)){
HXLINE(3764)					::Dynamic t = list_tabs->__get(_g4);
HXDLIN(3764)					_g4 = (_g4 + 1);
HXLINE(3766)					if (::Std_obj::isOfType(t,::hx::ClassOf< ::flixel::addons::ui::FlxUITypedButton >())) {
HXLINE(3768)						 ::flixel::addons::ui::FlxUITypedButton tb = ( ( ::flixel::addons::ui::FlxUITypedButton)(t) );
HXLINE(3769)						( ( ::flixel::FlxSprite)(tb->label) )->set_color(16777215);
HXLINE(3770)						if (::Std_obj::isOfType(tb->label,::hx::ClassOf< ::flixel::addons::ui::FlxUIText >())) {
HXLINE(3772)							 ::flixel::addons::ui::FlxUIText labelText = ( ( ::flixel::addons::ui::FlxUIText)(tb->label) );
HXLINE(3773)							{
HXLINE(3773)								labelText->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN(3773)								labelText->set_borderColor(0);
HXDLIN(3773)								labelText->set_borderSize(( (Float)(1) ));
HXDLIN(3773)								labelText->set_borderQuality(( (Float)(1) ));
            							}
            						}
            					}
            				}
            			}
HXLINE(3779)			bool _hx_tmp1;
HXDLIN(3779)			if (::hx::IsNotNull( tab_def )) {
HXLINE(3779)				_hx_tmp1 = !(::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(tab_def,HX_("width",06,b6,62,ca)));
            			}
            			else {
HXLINE(3779)				_hx_tmp1 = true;
            			}
HXDLIN(3779)			if (_hx_tmp1) {
HXLINE(3781)				stretch_tabs = true;
            			}
            		}
HXLINE(3786)		::Array< ::String > tab_stacking = ::Array_obj< ::String >::__new(2)->init(0,stackToggled)->init(1,stackUntoggled);
HXLINE(3788)		 ::flixel::addons::ui::FlxUITabMenu fg =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,backSprite,list_tabs,null(),tab_offset,stretch_tabs,tab_spacing,tab_stacking);
HXLINE(3790)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("group",3f,b3,f4,99))) {
HXLINE(3792)			int _g5 = 0;
HXDLIN(3792)			::Array< ::Dynamic> _g6 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("group",3f,b3,f4,99));
HXDLIN(3792)			while((_g5 < _g6->length)){
HXLINE(3792)				 ::Xml group_node = _g6->__get(_g5).StaticCast<  ::Xml >();
HXDLIN(3792)				_g5 = (_g5 + 1);
HXLINE(3794)				name = ::flixel::addons::ui::U_obj::xml_name(group_node);
HXLINE(3795)				 ::flixel::addons::ui::FlxUI _ui =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,group_node,fg,::hx::ObjectPtr<OBJ_>(this),this->_ptr_tongue,null(),null());
HXLINE(3796)				bool _hx_tmp2;
HXDLIN(3796)				if (::hx::IsNotNull( list_tabs )) {
HXLINE(3796)					_hx_tmp2 = (list_tabs->length > 0);
            				}
            				else {
HXLINE(3796)					_hx_tmp2 = false;
            				}
HXDLIN(3796)				if (_hx_tmp2) {
HXLINE(3798)					Float _ui1 = _ui->y;
HXDLIN(3798)					_ui->set_y((_ui1 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(list_tabs->__get(0))));
            				}
HXLINE(3800)				_ui->name = name;
HXLINE(3801)				fg->addGroup(_ui);
            			}
            		}
HXLINE(3807)		return fg;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTabMenu,return )

::Dynamic FlxUI_obj::_loadNumericStepper( ::Xml data,::hx::Null< bool >  __o_setCallback){
            		bool setCallback = __o_setCallback.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3811__loadNumericStepper)
HXLINE(3822)		Float stepSize = ::flixel::addons::ui::U_obj::xml_f(data,HX_("step",4c,e7,5b,4c),1);
HXLINE(3823)		Float defaultValue = ::flixel::addons::ui::U_obj::xml_f(data,HX_("value",71,7f,b8,31),0);
HXLINE(3824)		Float min = ::flixel::addons::ui::U_obj::xml_f(data,HX_("min",92,11,53,00),0);
HXLINE(3825)		Float max = ::flixel::addons::ui::U_obj::xml_f(data,HX_("max",a4,0a,53,00),10);
HXLINE(3826)		int decimals = ::flixel::addons::ui::U_obj::xml_i(data,HX_("decimals",c2,4a,6a,12),0);
HXLINE(3827)		bool percent = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("percent",c5,aa,da,78),null());
HXLINE(3828)		::String stack = ::flixel::addons::ui::U_obj::xml_str(data,HX_("stack",48,67,0b,84),true,HX_("",00,00,00,00));
HXLINE(3829)		if ((stack == HX_("",00,00,00,00))) {
HXLINE(3831)			stack = ::flixel::addons::ui::U_obj::xml_str(data,HX_("stacking",9a,62,b6,99),true,HX_("",00,00,00,00));
            		}
HXLINE(3833)		stack = stack.toLowerCase();
HXLINE(3834)		int stacking;
HXLINE(3836)		::String _hx_switch_0 = stack;
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("horizontal",e4,fc,c3,15)) ||  (_hx_switch_0==HX_("horz",8f,ce,12,45)) ){
HXLINE(3839)			stacking = 1;
HXDLIN(3839)			goto _hx_goto_190;
            		}
            		if (  (_hx_switch_0==HX_("v",76,00,00,00)) ||  (_hx_switch_0==HX_("vert",b1,34,4c,4e)) ||  (_hx_switch_0==HX_("vertical",76,bc,15,6a)) ){
HXLINE(3841)			stacking = 0;
HXDLIN(3841)			goto _hx_goto_190;
            		}
            		/* default */{
HXLINE(3843)			stacking = 1;
            		}
            		_hx_goto_190:;
HXLINE(3846)		 ::flixel::text::FlxText theText = null();
HXLINE(3847)		 ::flixel::addons::ui::FlxUITypedButton buttPlus = null();
HXLINE(3848)		 ::flixel::addons::ui::FlxUITypedButton buttMinus = null();
HXLINE(3850)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("text",ad,cc,f9,4c))) {
HXLINE(3852)			theText = ( ( ::flixel::text::FlxText)(this->_loadThing(HX_("text",ad,cc,f9,4c),::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("text",ad,cc,f9,4c)))) );
            		}
HXLINE(3854)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("plus",5a,3f,5a,4a))) {
HXLINE(3856)			buttPlus = ( ( ::flixel::addons::ui::FlxUITypedButton)(this->_loadThing(HX_("button",f2,61,e0,d9),::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("plus",5a,3f,5a,4a)))) );
            		}
HXLINE(3858)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("minus",70,80,68,08))) {
HXLINE(3860)			buttMinus = ( ( ::flixel::addons::ui::FlxUITypedButton)(this->_loadThing(HX_("button",f2,61,e0,d9),::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("minus",70,80,68,08)))) );
            		}
HXLINE(3863)		 ::flixel::addons::ui::FlxUINumericStepper ns =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,0,0,stepSize,defaultValue,min,max,decimals,stacking,theText,buttPlus,buttMinus,percent);
HXLINE(3866)		if (setCallback) {
HXLINE(3868)			::cpp::VirtualArray params = null();
HXDLIN(3868)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(3868)				params = ::cpp::VirtualArray_obj::__new();
HXDLIN(3868)				{
HXLINE(3868)					int _g = 0;
HXDLIN(3868)					::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(3868)					while((_g < _g1->length)){
HXLINE(3868)						 ::Xml param = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3868)						_g = (_g + 1);
HXDLIN(3868)						bool _hx_tmp;
HXDLIN(3868)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(3868)							_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            						}
            						else {
HXLINE(3868)							_hx_tmp = false;
            						}
HXDLIN(3868)						if (_hx_tmp) {
HXLINE(3868)							::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(3868)							type = type.toLowerCase();
HXDLIN(3868)							::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(3868)							 ::Dynamic value = valueStr;
HXDLIN(3868)							int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(3868)							::String _hx_switch_1 = type;
            							if (  (_hx_switch_1==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_1==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(3868)								::String str = ::String(valueStr);
HXDLIN(3868)								str = str.toLowerCase();
HXDLIN(3868)								bool _hx_tmp1;
HXDLIN(3868)								if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(3868)									_hx_tmp1 = (str == HX_("1",31,00,00,00));
            								}
            								else {
HXLINE(3868)									_hx_tmp1 = true;
            								}
HXDLIN(3868)								if (_hx_tmp1) {
HXLINE(3868)									value = true;
            								}
            								else {
HXLINE(3868)									value = false;
            								}
HXDLIN(3868)								goto _hx_goto_192;
            							}
            							if (  (_hx_switch_1==HX_("float",9c,c5,96,02)) ){
HXLINE(3868)								value = ::Std_obj::parseFloat(valueStr);
HXDLIN(3868)								goto _hx_goto_192;
            							}
            							if (  (_hx_switch_1==HX_("color",63,71,5c,4a)) ||  (_hx_switch_1==HX_("hex",db,42,4f,00)) ){
HXLINE(3868)								 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(3868)								if (::hx::IsNull( return_val )) {
HXLINE(3868)									HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            								}
HXDLIN(3868)								value = return_val;
HXDLIN(3868)								goto _hx_goto_192;
            							}
            							if (  (_hx_switch_1==HX_("int",ef,0c,50,00)) ){
HXLINE(3868)								value = ::Std_obj::parseInt(valueStr);
HXDLIN(3868)								goto _hx_goto_192;
            							}
            							if (  (_hx_switch_1==HX_("string",d1,28,30,11)) ){
HXLINE(3868)								value = ::String(valueStr);
HXDLIN(3868)								goto _hx_goto_192;
            							}
            							_hx_goto_192:;
HXDLIN(3868)							params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("value",71,7f,b8,31),value)
            								->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            						}
            					}
            				}
HXDLIN(3868)				params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(3868)				{
HXLINE(3868)					int _g2 = 0;
HXDLIN(3868)					int _g3 = params->get_length();
HXDLIN(3868)					while((_g2 < _g3)){
HXLINE(3868)						_g2 = (_g2 + 1);
HXDLIN(3868)						int i = (_g2 - 1);
HXDLIN(3868)						params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            					}
            				}
            			}
HXDLIN(3868)			::cpp::VirtualArray params1 = params;
HXLINE(3869)			ns->set_params(params1);
            		}
HXLINE(3872)		return ns;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadNumericStepper,return )

 ::flixel::math::FlxBasePoint FlxUI_obj::getResizeRatio( ::Xml data,::hx::Null< int >  __o_defaultAxis){
            		int defaultAxis = __o_defaultAxis.Default(1);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3876_getResizeRatio)
HXLINE(3877)		::String str = ::flixel::addons::ui::U_obj::xml_str(data,HX_("resize_ratio_x",79,e8,30,0e),true,null());
HXLINE(3878)		if ((str == HX_("",00,00,00,00))) {
HXLINE(3880)			str = ::flixel::addons::ui::U_obj::xml_str(data,HX_("resize_ratio_y",7a,e8,30,0e),true,null());
HXLINE(3881)			if ((str == HX_("",00,00,00,00))) {
HXLINE(3884)				Float resize_ratio = ::flixel::addons::ui::U_obj::xml_f(data,HX_("resize_ratio",40,c5,84,8f),-1);
HXLINE(3885)				 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(resize_ratio,defaultAxis);
HXDLIN(3885)				point->_inPool = false;
HXDLIN(3885)				return point;
            			}
            			else {
HXLINE(3890)				Float x = ::Std_obj::parseFloat(str);
HXDLIN(3890)				 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,1);
HXDLIN(3890)				point1->_inPool = false;
HXDLIN(3890)				return point1;
            			}
            		}
            		else {
HXLINE(3896)			Float x1 = ::Std_obj::parseFloat(str);
HXDLIN(3896)			 ::flixel::math::FlxBasePoint point2 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x1,0);
HXDLIN(3896)			point2->_inPool = false;
HXDLIN(3896)			return point2;
            		}
HXLINE(3878)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getResizeRatio,return )

::Dynamic FlxUI_obj::_loadButton( ::Xml data,::hx::Null< bool >  __o_setCallback,::hx::Null< bool >  __o_isToggle,::String __o_load_code){
            		bool setCallback = __o_setCallback.Default(true);
            		bool isToggle = __o_isToggle.Default(false);
            		::String load_code = __o_load_code;
            		if (::hx::IsNull(__o_load_code)) load_code = HX_("",00,00,00,00);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3905__loadButton)
HXLINE(3906)		::Dynamic fb = null();
HXLINE(3907)		int color = this->_loadColor(data,null(),null());
HXLINE(3908)		Float resize_ratio = ::flixel::addons::ui::U_obj::xml_f(data,HX_("resize_ratio",40,c5,84,8f),-1);
HXLINE(3909)		 ::flixel::math::FlxBasePoint resize_point = this->_loadCompass(data,HX_("resize_point",85,44,f0,71));
HXLINE(3910)		bool resize_label = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("resize_label",29,9e,0f,1b),false);
HXLINE(3912)		::String label = ::flixel::addons::ui::U_obj::xml_str(data,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(3914)		 ::flixel::addons::ui::FlxUISprite sprite = null();
HXLINE(3915)		 ::flixel::addons::ui::FlxUISprite toggleSprite = null();
HXLINE(3916)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("sprite",05,dc,95,c3))) {
HXLINE(3918)			int _g = 0;
HXDLIN(3918)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("sprite",05,dc,95,c3));
HXDLIN(3918)			while((_g < _g1->length)){
HXLINE(3918)				 ::Xml spriteNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3918)				_g = (_g + 1);
HXLINE(3920)				bool forToggle;
HXDLIN(3920)				if (isToggle) {
HXLINE(3920)					forToggle = ::flixel::addons::ui::U_obj::xml_bool(spriteNode,HX_("toggle",94,bf,43,8f),null());
            				}
            				else {
HXLINE(3920)					forToggle = false;
            				}
HXLINE(3921)				if (forToggle) {
HXLINE(3923)					toggleSprite = ( ( ::flixel::addons::ui::FlxUISprite)(this->_loadThing(HX_("sprite",05,dc,95,c3),spriteNode)) );
            				}
            				else {
HXLINE(3927)					sprite = ( ( ::flixel::addons::ui::FlxUISprite)(this->_loadThing(HX_("sprite",05,dc,95,c3),spriteNode)) );
            				}
            			}
            		}
HXLINE(3932)		::String context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(3933)		::String code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(3935)		label = this->getText(label,context,true,code);
HXLINE(3937)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,0,HX_("width",06,b6,62,ca),null()));
HXLINE(3938)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,0,HX_("height",e7,07,4c,02),null()));
HXLINE(3940)		::cpp::VirtualArray params = null();
HXDLIN(3940)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(3940)			params = ::cpp::VirtualArray_obj::__new();
HXDLIN(3940)			{
HXLINE(3940)				int _g2 = 0;
HXDLIN(3940)				::Array< ::Dynamic> _g3 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(3940)				while((_g2 < _g3->length)){
HXLINE(3940)					 ::Xml param = _g3->__get(_g2).StaticCast<  ::Xml >();
HXDLIN(3940)					_g2 = (_g2 + 1);
HXDLIN(3940)					bool _hx_tmp;
HXDLIN(3940)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(3940)						_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(3940)						_hx_tmp = false;
            					}
HXDLIN(3940)					if (_hx_tmp) {
HXLINE(3940)						::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(3940)						type = type.toLowerCase();
HXDLIN(3940)						::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(3940)						 ::Dynamic value = valueStr;
HXDLIN(3940)						int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(3940)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(3940)							::String str = ::String(valueStr);
HXDLIN(3940)							str = str.toLowerCase();
HXDLIN(3940)							bool _hx_tmp1;
HXDLIN(3940)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(3940)								_hx_tmp1 = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(3940)								_hx_tmp1 = true;
            							}
HXDLIN(3940)							if (_hx_tmp1) {
HXLINE(3940)								value = true;
            							}
            							else {
HXLINE(3940)								value = false;
            							}
HXDLIN(3940)							goto _hx_goto_198;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(3940)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(3940)							goto _hx_goto_198;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(3940)							 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(3940)							if (::hx::IsNull( return_val )) {
HXLINE(3940)								HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            							}
HXDLIN(3940)							value = return_val;
HXDLIN(3940)							goto _hx_goto_198;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(3940)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(3940)							goto _hx_goto_198;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(3940)							value = ::String(valueStr);
HXDLIN(3940)							goto _hx_goto_198;
            						}
            						_hx_goto_198:;
HXDLIN(3940)						params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXDLIN(3940)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(3940)			{
HXLINE(3940)				int _g4 = 0;
HXDLIN(3940)				int _g5 = params->get_length();
HXDLIN(3940)				while((_g4 < _g5)){
HXLINE(3940)					_g4 = (_g4 + 1);
HXDLIN(3940)					int i = (_g4 - 1);
HXDLIN(3940)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            				}
            			}
            		}
HXDLIN(3940)		::cpp::VirtualArray params1 = params;
HXLINE(3942)		if (::hx::IsNull( sprite )) {
HXLINE(3944)			bool useDefaultGraphic = (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74)) == false);
HXLINE(3945)			fb =  ::flixel::addons::ui::FlxUIButton_obj::__alloc( HX_CTX ,0,0,label,null(),useDefaultGraphic,false,color);
HXLINE(3946)			 ::flixel::addons::ui::FlxUIButton fuib = ( ( ::flixel::addons::ui::FlxUIButton)(fb) );
HXLINE(3947)			fuib->_autoCleanup = false;
            		}
            		else {
HXLINE(3951)			 ::flixel::group::FlxTypedSpriteGroup tempGroup = null();
HXLINE(3952)			if ((label != HX_("",00,00,00,00))) {
HXLINE(3956)				 ::flixel::addons::ui::FlxUIText labelTxt =  ::flixel::addons::ui::FlxUIText_obj::__alloc( HX_CTX ,0,0,80,label,8,null());
HXLINE(3958)				labelTxt->setFormat(null(),8,3355443,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(3960)				tempGroup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(3962)				tempGroup->add(sprite).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3963)				tempGroup->add(labelTxt).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3965)				fb =  ::flixel::addons::ui::FlxUISpriteButton_obj::__alloc( HX_CTX ,0,0,tempGroup,null());
            			}
            			else {
HXLINE(3969)				fb =  ::flixel::addons::ui::FlxUISpriteButton_obj::__alloc( HX_CTX ,0,0,sprite,null());
            			}
            		}
HXLINE(3972)		fb->__SetField(HX_("resize_ratio",40,c5,84,8f),resize_ratio,::hx::paccDynamic);
HXLINE(3973)		fb->__SetField(HX_("resize_point",85,44,f0,71),resize_point,::hx::paccDynamic);
HXLINE(3974)		fb->__SetField(HX_("autoResizeLabel",31,30,ad,1c),resize_label,::hx::paccDynamic);
HXLINE(3976)		if (setCallback) {
HXLINE(3978)			::flixel::addons::ui::interfaces::IHasParams_obj::set_params(fb,params1);
            		}
HXLINE(3983)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74))) {
HXLINE(3985)			bool blank = ::flixel::addons::ui::U_obj::xml_bool(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74)),HX_("blank",54,df,f1,b4),null());
HXLINE(3987)			if (blank) {
HXLINE(3993)				::flixel::addons::ui::interfaces::IFlxUIButton_obj::loadGraphicSlice9(fb,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00))->init(2,HX_("",00,00,00,00)),W,H,null(),0,resize_ratio,null(),null(),null(),null());
            			}
            			else {
HXLINE(3998)				::cpp::VirtualArray graphic_names = null();
HXLINE(3999)				::Array< ::Dynamic> slice9_names = null();
HXLINE(4000)				::Array< int > frames = null();
HXLINE(4002)				if (isToggle) {
HXLINE(4004)					graphic_names = ::cpp::VirtualArray_obj::__new(6)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00))->init(2,HX_("",00,00,00,00))->init(3,HX_("",00,00,00,00))->init(4,HX_("",00,00,00,00))->init(5,HX_("",00,00,00,00));
HXLINE(4005)					slice9_names = ::Array_obj< ::Dynamic>::__new(6)->init(0,null())->init(1,null())->init(2,null())->init(3,null())->init(4,null())->init(5,null());
            				}
            				else {
HXLINE(4009)					graphic_names = ::cpp::VirtualArray_obj::__new(3)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00))->init(2,HX_("",00,00,00,00));
HXLINE(4010)					slice9_names = ::Array_obj< ::Dynamic>::__new(3)->init(0,null())->init(1,null())->init(2,null());
            				}
HXLINE(4014)				int src_w = ::flixel::addons::ui::U_obj::xml_i(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74)),HX_("src_w",1c,7b,ba,82),0);
HXLINE(4015)				int src_h = ::flixel::addons::ui::U_obj::xml_i(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74)),HX_("src_h",0d,7b,ba,82),0);
HXLINE(4016)				::String tileStr = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74)),HX_("tile",2e,cb,fc,4c),true,HX_("",00,00,00,00));
HXDLIN(4016)				int tile = 0;
HXDLIN(4016)				::String _hx_switch_1 = tileStr;
            				if (  (_hx_switch_1==HX_("h",68,00,00,00)) ||  (_hx_switch_1==HX_("horizontal",e4,fc,c3,15)) ){
HXLINE(4016)					tile = 16;
HXDLIN(4016)					goto _hx_goto_200;
            				}
            				if (  (_hx_switch_1==HX_("v",76,00,00,00)) ||  (_hx_switch_1==HX_("vertical",76,bc,15,6a)) ){
HXLINE(4016)					tile = 1;
HXDLIN(4016)					goto _hx_goto_200;
            				}
            				if (  (_hx_switch_1==HX_("all",21,f9,49,00)) ||  (_hx_switch_1==HX_("both",81,88,1b,41)) ||  (_hx_switch_1==HX_("hv",0e,5b,00,00)) ||  (_hx_switch_1==HX_("true",4e,a7,03,4d)) ||  (_hx_switch_1==HX_("vh",32,67,00,00)) ){
HXLINE(4016)					tile = 17;
HXDLIN(4016)					goto _hx_goto_200;
            				}
            				_hx_goto_200:;
HXDLIN(4016)				int tile1 = tile;
HXLINE(4019)				::String frame_str = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74)),HX_("frames",a6,af,85,ac),true,null());
HXLINE(4020)				if ((frame_str != HX_("",00,00,00,00))) {
HXLINE(4022)					frames = ::Array_obj< int >::__new();
HXLINE(4023)					::Array< ::String > arr = frame_str.split(HX_(",",2c,00,00,00));
HXLINE(4024)					{
HXLINE(4024)						int _g6 = 0;
HXDLIN(4024)						while((_g6 < arr->length)){
HXLINE(4024)							::String numstr = arr->__get(_g6);
HXDLIN(4024)							_g6 = (_g6 + 1);
HXLINE(4026)							frames->push(::Std_obj::parseInt(numstr));
            						}
            					}
            				}
HXLINE(4030)				{
HXLINE(4030)					int _g7 = 0;
HXDLIN(4030)					::Array< ::Dynamic> _g8 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74));
HXDLIN(4030)					while((_g7 < _g8->length)){
HXLINE(4030)						 ::Xml graphicNode = _g8->__get(_g7).StaticCast<  ::Xml >();
HXDLIN(4030)						_g7 = (_g7 + 1);
HXLINE(4032)						::String graphic_name = ::flixel::addons::ui::U_obj::xml_name(graphicNode);
HXLINE(4033)						::String image = ::flixel::addons::ui::U_obj::xml_str(graphicNode,HX_("image",5b,1f,69,bd),null(),null());
HXLINE(4034)						::Array< int > slice9 = ::flixel::util::FlxStringUtil_obj::toIntArray(::flixel::addons::ui::U_obj::xml_str(graphicNode,HX_("slice9",a7,03,04,70),null(),null()));
HXLINE(4035)						::String tileStr1 = ::flixel::addons::ui::U_obj::xml_str(graphicNode,HX_("tile",2e,cb,fc,4c),true,HX_("",00,00,00,00));
HXDLIN(4035)						int tile2 = 0;
HXDLIN(4035)						::String _hx_switch_2 = tileStr1;
            						if (  (_hx_switch_2==HX_("h",68,00,00,00)) ||  (_hx_switch_2==HX_("horizontal",e4,fc,c3,15)) ){
HXLINE(4035)							tile2 = 16;
HXDLIN(4035)							goto _hx_goto_203;
            						}
            						if (  (_hx_switch_2==HX_("v",76,00,00,00)) ||  (_hx_switch_2==HX_("vertical",76,bc,15,6a)) ){
HXLINE(4035)							tile2 = 1;
HXDLIN(4035)							goto _hx_goto_203;
            						}
            						if (  (_hx_switch_2==HX_("all",21,f9,49,00)) ||  (_hx_switch_2==HX_("both",81,88,1b,41)) ||  (_hx_switch_2==HX_("hv",0e,5b,00,00)) ||  (_hx_switch_2==HX_("true",4e,a7,03,4d)) ||  (_hx_switch_2==HX_("vh",32,67,00,00)) ){
HXLINE(4035)							tile2 = 17;
HXDLIN(4035)							goto _hx_goto_203;
            						}
            						_hx_goto_203:;
HXDLIN(4035)						tile1 = tile2;
HXLINE(4037)						bool toggleState = ::flixel::addons::ui::U_obj::xml_bool(graphicNode,HX_("toggle",94,bf,43,8f),null());
HXLINE(4038)						if (toggleState) {
HXLINE(4038)							toggleState = isToggle;
            						}
            						else {
HXLINE(4038)							toggleState = false;
            						}
HXLINE(4040)						::String igfx = ::flixel::addons::ui::U_obj::gfx(image,null(),null(),null(),null(),null());
HXLINE(4042)						::String _hx_switch_3 = graphic_name;
            						if (  (_hx_switch_3==HX_("all",21,f9,49,00)) ){
HXLINE(4105)							int tilesTall;
HXDLIN(4105)							if (isToggle) {
HXLINE(4105)								tilesTall = 6;
            							}
            							else {
HXLINE(4105)								tilesTall = 3;
            							}
HXLINE(4107)							 ::openfl::display::BitmapData temp = null();
HXLINE(4110)							if ((src_h != 0)) {
HXLINE(4112)								 ::openfl::display::BitmapData temp1 = ::flixel::addons::ui::U_obj::getBmp(igfx);
HXLINE(4113)								tilesTall = ::Std_obj::_hx_int((( (Float)(temp1->height) ) / ( (Float)(src_h) )));
            							}
HXLINE(4116)							if ((image != HX_("",00,00,00,00))) {
HXLINE(4118)								graphic_names = ::cpp::VirtualArray_obj::__new(1)->init(0,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),1,tilesTall));
            							}
HXLINE(4121)							slice9_names = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get(0)) ),HX_("image",5b,1f,69,bd)));
HXLINE(4124)							temp = ::flixel::addons::ui::U_obj::getBmp(graphic_names->__get(0));
HXLINE(4125)							src_w = temp->width;
HXLINE(4126)							src_h = ::Std_obj::_hx_int((( (Float)(temp->height) ) / ( (Float)(tilesTall) )));
HXLINE(4104)							goto _hx_goto_204;
            						}
            						if (  (_hx_switch_3==HX_("active",c6,41,46,16)) ||  (_hx_switch_3==HX_("highlight",34,56,00,ed)) ||  (_hx_switch_3==HX_("hilight",35,b2,2d,55)) ||  (_hx_switch_3==HX_("hover",bc,e5,64,2b)) ||  (_hx_switch_3==HX_("over",54,91,b8,49)) ){
HXLINE(4065)							if ((image != HX_("",00,00,00,00))) {
HXLINE(4067)								if (!(toggleState)) {
HXLINE(4069)									graphic_names->set(1,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            								else {
HXLINE(4073)									graphic_names->set(4,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            							}
HXLINE(4076)							if (!(toggleState)) {
HXLINE(4078)								slice9_names[1] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get(1)) ),HX_("image",5b,1f,69,bd));
            							}
            							else {
HXLINE(4082)								slice9_names[4] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get(4)) ),HX_("image",5b,1f,69,bd));
            							}
HXLINE(4064)							goto _hx_goto_204;
            						}
            						if (  (_hx_switch_3==HX_("down",62,f8,6d,42)) ||  (_hx_switch_3==HX_("pressed",a2,d2,e6,39)) ||  (_hx_switch_3==HX_("pushed",b9,14,2d,72)) ){
HXLINE(4085)							if ((image != HX_("",00,00,00,00))) {
HXLINE(4087)								if (!(toggleState)) {
HXLINE(4089)									graphic_names->set(2,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            								else {
HXLINE(4093)									graphic_names->set(5,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            							}
HXLINE(4096)							if (!(toggleState)) {
HXLINE(4098)								slice9_names[2] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get(2)) ),HX_("image",5b,1f,69,bd));
            							}
            							else {
HXLINE(4102)								slice9_names[5] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get(5)) ),HX_("image",5b,1f,69,bd));
            							}
HXLINE(4084)							goto _hx_goto_204;
            						}
            						if (  (_hx_switch_3==HX_("",00,00,00,00)) ||  (_hx_switch_3==HX_("inactive",6b,17,30,6a)) ||  (_hx_switch_3==HX_("normal",27,72,69,30)) ||  (_hx_switch_3==HX_("up",5b,66,00,00)) ){
HXLINE(4045)							if ((image != HX_("",00,00,00,00))) {
HXLINE(4047)								if (!(toggleState)) {
HXLINE(4049)									graphic_names->set(0,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            								else {
HXLINE(4053)									graphic_names->set(3,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            							}
HXLINE(4056)							if (!(toggleState)) {
HXLINE(4058)								slice9_names[0] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get(0)) ),HX_("image",5b,1f,69,bd));
            							}
            							else {
HXLINE(4062)								slice9_names[3] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get(3)) ),HX_("image",5b,1f,69,bd));
            							}
HXLINE(4044)							goto _hx_goto_204;
            						}
            						_hx_goto_204:;
HXLINE(4129)						if (::hx::IsNotEq( graphic_names->__get(0),HX_("",00,00,00,00) )) {
HXLINE(4131)							if ((graphic_names->get_length() >= 3)) {
HXLINE(4133)								if (::hx::IsEq( graphic_names->__get(1),HX_("",00,00,00,00) )) {
HXLINE(4135)									graphic_names->set(1,graphic_names->__get(0));
            								}
HXLINE(4137)								if (::hx::IsEq( graphic_names->__get(2),HX_("",00,00,00,00) )) {
HXLINE(4139)									graphic_names->set(2,graphic_names->__get(1));
            								}
HXLINE(4141)								if ((graphic_names->get_length() >= 6)) {
HXLINE(4143)									if (::hx::IsEq( graphic_names->__get(3),HX_("",00,00,00,00) )) {
HXLINE(4145)										graphic_names->set(3,graphic_names->__get(0));
            									}
HXLINE(4147)									if (::hx::IsEq( graphic_names->__get(4),HX_("",00,00,00,00) )) {
HXLINE(4149)										graphic_names->set(4,graphic_names->__get(1));
            									}
HXLINE(4151)									if (::hx::IsEq( graphic_names->__get(5),HX_("",00,00,00,00) )) {
HXLINE(4153)										graphic_names->set(5,graphic_names->__get(2));
            									}
            								}
            							}
            						}
            					}
            				}
HXLINE(4161)				::flixel::addons::ui::interfaces::IFlxUIButton_obj::loadGraphicSlice9(fb,graphic_names,W,H,slice9_names,tile1,resize_ratio,isToggle,src_w,src_h,frames);
            			}
            		}
            		else {
HXLINE(4166)			if ((load_code == HX_("tab_menu",09,73,e1,d6))) {
HXLINE(4169)				::cpp::VirtualArray graphic_names1 = ::cpp::VirtualArray_obj::__new(6)->init(0,HX_("flixel/flixel-ui/img/tab_back.png",d5,c5,cd,aa))->init(1,HX_("flixel/flixel-ui/img/tab_back.png",d5,c5,cd,aa))->init(2,HX_("flixel/flixel-ui/img/tab_back.png",d5,c5,cd,aa))->init(3,HX_("flixel/flixel-ui/img/tab.png",27,2e,82,04))->init(4,HX_("flixel/flixel-ui/img/tab.png",27,2e,82,04))->init(5,HX_("flixel/flixel-ui/img/tab.png",27,2e,82,04));
HXLINE(4177)				::Array< int > slice9_tab = ::flixel::util::FlxStringUtil_obj::toIntArray(HX_("6,6,11,11",c0,1f,fa,07));
HXLINE(4178)				::Array< ::Dynamic> slice9_names1 = ::Array_obj< ::Dynamic>::__new(6)->init(0,slice9_tab)->init(1,slice9_tab)->init(2,slice9_tab)->init(3,slice9_tab)->init(4,slice9_tab)->init(5,slice9_tab);
HXLINE(4181)				if (::Std_obj::isOfType(fb,::hx::ClassOf< ::flixel::addons::ui::FlxUIButton >())) {
HXLINE(4183)					 ::flixel::addons::ui::FlxUIButton fbui = ( ( ::flixel::addons::ui::FlxUIButton)(fb) );
HXLINE(4184)					fbui->loadGraphicSlice9(graphic_names1,W,H,slice9_names1,0,resize_ratio,isToggle,null(),null(),null());
            				}
            				else {
HXLINE(4186)					if (::Std_obj::isOfType(fb,::hx::ClassOf< ::flixel::addons::ui::FlxUISpriteButton >())) {
HXLINE(4188)						 ::flixel::addons::ui::FlxUISpriteButton fbuis = ( ( ::flixel::addons::ui::FlxUISpriteButton)(fb) );
HXLINE(4189)						fbuis->loadGraphicSlice9(graphic_names1,W,H,slice9_names1,0,resize_ratio,isToggle,null(),null(),null());
            					}
            					else {
HXLINE(4193)						::flixel::addons::ui::interfaces::IFlxUIButton_obj::loadGraphicSlice9(fb,graphic_names1,W,H,slice9_names1,0,resize_ratio,isToggle,null(),null(),null());
            					}
            				}
            			}
            			else {
HXLINE(4199)				if ((W <= 0)) {
HXLINE(4200)					W = 80;
            				}
HXLINE(4201)				if ((H <= 0)) {
HXLINE(4202)					H = 20;
            				}
HXLINE(4203)				::flixel::addons::ui::interfaces::IFlxUIButton_obj::loadGraphicSlice9(fb,null(),W,H,null(),0,resize_ratio,isToggle,null(),null(),null());
            			}
            		}
HXLINE(4209)		if (::hx::IsNull( sprite )) {
HXLINE(4211)			bool _hx_tmp2;
HXDLIN(4211)			if (::hx::IsNotNull( data )) {
HXLINE(4211)				_hx_tmp2 = ::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("text",ad,cc,f9,4c));
            			}
            			else {
HXLINE(4211)				_hx_tmp2 = false;
            			}
HXDLIN(4211)			if (_hx_tmp2) {
HXLINE(4213)				this->formatButtonText(data,fb);
            			}
            			else {
HXLINE(4217)				if ((load_code == HX_("tab_menu",09,73,e1,d6))) {
HXLINE(4219)					fb->__SetField(HX_("up_color",3f,d5,b5,9b),16777215,::hx::paccDynamic);
HXLINE(4220)					fb->__SetField(HX_("down_color",86,26,b3,4e),16777215,::hx::paccDynamic);
HXLINE(4221)					fb->__SetField(HX_("over_color",f8,00,4a,f7),16777215,::hx::paccDynamic);
HXLINE(4222)					fb->__SetField(HX_("up_toggle_color",dc,6e,0c,dd),16777215,::hx::paccDynamic);
HXLINE(4223)					fb->__SetField(HX_("down_toggle_color",75,e4,c8,06),16777215,::hx::paccDynamic);
HXLINE(4224)					fb->__SetField(HX_("over_toggle_color",43,1c,98,aa),16777215,::hx::paccDynamic);
            				}
            				else {
HXLINE(4229)					::flixel::addons::ui::interfaces::IFlxUIButton_obj::autoCenterLabel(fb);
            				}
            			}
            		}
            		else {
HXLINE(4235)			::flixel::addons::ui::interfaces::IFlxUIButton_obj::autoCenterLabel(fb);
            		}
HXLINE(4238)		bool _hx_tmp3;
HXDLIN(4238)		if (::hx::IsNotNull( sprite )) {
HXLINE(4238)			_hx_tmp3 = (label != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(4238)			_hx_tmp3 = false;
            		}
HXDLIN(4238)		if (_hx_tmp3) {
HXLINE(4240)			bool _hx_tmp4;
HXDLIN(4240)			if (::hx::IsNotNull( data )) {
HXLINE(4240)				_hx_tmp4 = ::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("text",ad,cc,f9,4c));
            			}
            			else {
HXLINE(4240)				_hx_tmp4 = false;
            			}
HXDLIN(4240)			if (_hx_tmp4) {
HXLINE(4242)				this->formatButtonText(data,fb);
            			}
            		}
HXLINE(4246)		int text_x = 0;
HXLINE(4247)		int text_y = 0;
HXLINE(4248)		if (::hx::IsNotNull( data->get(HX_("text_x",26,65,88,d8)) )) {
HXLINE(4250)			text_x = ::Std_obj::_hx_int(this->_loadWidth(data,0,HX_("text_x",26,65,88,d8),null()));
            		}
            		else {
HXLINE(4252)			if (::hx::IsNotNull( data->get(HX_("label_x",2d,c6,05,04)) )) {
HXLINE(4254)				text_x = ::Std_obj::_hx_int(this->_loadWidth(data,0,HX_("label_x",2d,c6,05,04),null()));
            			}
            		}
HXLINE(4256)		if (::hx::IsNotNull( data->get(HX_("text_y",27,65,88,d8)) )) {
HXLINE(4258)			text_y = ::Std_obj::_hx_int(this->_loadHeight(data,0,HX_("text_y",27,65,88,d8),null()));
            		}
            		else {
HXLINE(4260)			if (::hx::IsNotNull( data->get(HX_("label_y",2e,c6,05,04)) )) {
HXLINE(4262)				text_y = ::Std_obj::_hx_int(this->_loadHeight(data,0,HX_("label_y",2e,c6,05,04),null()));
            			}
            		}
HXLINE(4265)		if (::Std_obj::isOfType(fb,::hx::ClassOf< ::flixel::addons::ui::FlxUISpriteButton >())) {
HXLINE(4267)			 ::flixel::addons::ui::FlxUISpriteButton fbs = ( ( ::flixel::addons::ui::FlxUISpriteButton)(fb) );
HXLINE(4268)			if (::Std_obj::isOfType(fbs->label,::hx::ClassOf< ::flixel::group::FlxTypedSpriteGroup >())) {
HXLINE(4270)				 ::flixel::group::FlxTypedSpriteGroup g = ( ( ::flixel::group::FlxTypedSpriteGroup)(fbs->label) );
HXLINE(4271)				{
HXLINE(4271)					int _g9 = 0;
HXDLIN(4271)					::Array< ::Dynamic> _g10 = g->group->members;
HXDLIN(4271)					while((_g9 < _g10->length)){
HXLINE(4271)						 ::flixel::FlxSprite sprite1 = _g10->__get(_g9).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(4271)						_g9 = (_g9 + 1);
HXLINE(4273)						if (::Std_obj::isOfType(sprite1,::hx::ClassOf< ::flixel::addons::ui::FlxUIText >())) {
HXLINE(4276)							sprite1->offset->set_x((sprite1->offset->x - ( (Float)(text_x) )));
HXLINE(4277)							sprite1->offset->set_y((sprite1->offset->y - ( (Float)(text_y) )));
HXLINE(4278)							goto _hx_goto_205;
            						}
            					}
            					_hx_goto_205:;
            				}
            			}
            			else {
HXLINE(4284)				 ::flixel::FlxSprite fh = ( ( ::flixel::FlxSprite)(fbs->label) );
HXDLIN(4284)				fh->offset->set_x((fh->offset->x - ( (Float)(text_x) )));
HXLINE(4285)				 ::flixel::FlxSprite fh1 = ( ( ::flixel::FlxSprite)(fbs->label) );
HXDLIN(4285)				fh1->offset->set_y((fh1->offset->y - ( (Float)(text_y) )));
HXLINE(4286)				if (::hx::IsNotNull( toggleSprite )) {
HXLINE(4288)					toggleSprite->offset->set_x((toggleSprite->offset->x - ( (Float)(text_x) )));
HXLINE(4289)					toggleSprite->offset->set_y((toggleSprite->offset->y - ( (Float)(text_y) )));
            				}
            			}
            		}
            		else {
HXLINE(4295)			 ::flixel::addons::ui::FlxUIButton fbu = ( ( ::flixel::addons::ui::FlxUIButton)(fb) );
HXLINE(4297)			 ::flixel::addons::ui::FlxUIText fh2 = ( ( ::flixel::addons::ui::FlxUIText)(fbu->label) );
HXDLIN(4297)			fh2->offset->set_x((fh2->offset->x - ( (Float)(text_x) )));
HXLINE(4298)			 ::flixel::addons::ui::FlxUIText fh3 = ( ( ::flixel::addons::ui::FlxUIText)(fbu->label) );
HXDLIN(4298)			fh3->offset->set_y((fh3->offset->y - ( (Float)(text_y) )));
            		}
HXLINE(4301)		bool _hx_tmp5;
HXDLIN(4301)		if (::hx::IsNotNull( sprite )) {
HXLINE(4301)			_hx_tmp5 = ::hx::IsNotNull( toggleSprite );
            		}
            		else {
HXLINE(4301)			_hx_tmp5 = false;
            		}
HXDLIN(4301)		if (_hx_tmp5) {
HXLINE(4303)			::flixel::addons::ui::interfaces::IFlxUIButton_obj::set_toggle_label(fb,toggleSprite);
            		}
HXLINE(4306)		if (::Std_obj::isOfType(fb,::hx::ClassOf< ::flixel::addons::ui::FlxUITypedButton >())) {
HXLINE(4308)			 ::flixel::addons::ui::FlxUITypedButton fuitb = ( ( ::flixel::addons::ui::FlxUITypedButton)(fb) );
HXLINE(4309)			if (::hx::IsNotNull( fuitb->_assetsToCleanup )) {
HXLINE(4311)				int _g11 = 0;
HXDLIN(4311)				::Array< ::String > _g12 = fuitb->_assetsToCleanup;
HXDLIN(4311)				while((_g11 < _g12->length)){
HXLINE(4311)					::String key = _g12->__get(_g11);
HXDLIN(4311)					_g11 = (_g11 + 1);
HXLINE(4313)					this->addToCleanup(key);
            				}
            			}
            		}
HXLINE(4318)		return fb;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,_loadButton,return )

 ::flixel::addons::ui::FlxUIRegion FlxUI_obj::_loadRegion( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4331__loadRegion)
HXLINE(4332)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(4334)		int w = ::Std_obj::_hx_int(this->_loadWidth(data,null(),null(),null()));
HXLINE(4335)		int h = ::Std_obj::_hx_int(this->_loadHeight(data,null(),null(),null()));
HXLINE(4337)		if (::hx::IsNotNull( bounds )) {
HXLINE(4339)			 ::openfl::geom::Point pt = ::flixel::addons::ui::U_obj::conformToBounds( ::openfl::geom::Point_obj::__alloc( HX_CTX ,w,h),bounds);
HXLINE(4340)			w = ::Std_obj::_hx_int(pt->x);
HXLINE(4341)			h = ::Std_obj::_hx_int(pt->y);
            		}
HXLINE(4344)		bool vis = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("visible",72,78,24,a3),true);
HXLINE(4345)		 ::flixel::addons::ui::FlxUIRegion reg =  ::flixel::addons::ui::FlxUIRegion_obj::__alloc( HX_CTX ,0,0,w,h);
HXLINE(4346)		reg->set_visible(vis);
HXLINE(4347)		return reg;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadRegion,return )

 ::flixel::addons::ui::FlxUI9SliceSprite FlxUI_obj::_load9SliceSprite( ::Xml data,::String __o_load_code){
            		::String load_code = __o_load_code;
            		if (::hx::IsNull(__o_load_code)) load_code = HX_("",00,00,00,00);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4351__load9SliceSprite)
HXLINE(4352)		::String src = HX_("",00,00,00,00);
HXLINE(4353)		 ::flixel::addons::ui::FlxUI9SliceSprite f9s = null();
HXLINE(4355)		 ::flixel::math::FlxBasePoint resize = this->getResizeRatio(data,null());
HXLINE(4356)		int color = this->_loadColor(data,null(),null());
HXLINE(4357)		Float resize_ratio = resize->x;
HXLINE(4358)		 ::flixel::math::FlxBasePoint resize_point = this->_loadCompass(data,HX_("resize_point",85,44,f0,71));
HXLINE(4359)		int resize_ratio_axis = ::Std_obj::_hx_int(resize->y);
HXLINE(4361)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(4369)		 ::Xml data1 = data;
HXDLIN(4369)		::String str = HX_("",00,00,00,00);
HXDLIN(4369)		if (::hx::IsNotNull( data1->get(HX_("src",e4,a6,57,00)) )) {
HXLINE(4369)			str = data1->get(HX_("src",e4,a6,57,00));
HXDLIN(4369)			bool src1;
HXDLIN(4369)			if ((str != HX_("",00,00,00,00))) {
HXLINE(4369)				src1 = ::hx::IsNull( str );
            			}
            			else {
HXLINE(4369)				src1 = true;
            			}
HXDLIN(4369)			if (src1) {
HXLINE(4369)				str = HX_("",00,00,00,00);
            			}
            			else {
HXLINE(4369)				str = ::flixel::addons::ui::U_obj::gfx(str,null(),null(),null(),null(),null());
HXDLIN(4369)				try {
            					HX_STACK_CATCHABLE(::String, 0);
            					HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE(4369)					if (!(::openfl::utils::Assets_obj::exists(str,HX_("IMAGE",3b,57,57,3b)))) {
HXLINE(4369)						HX_STACK_DO_THROW(((HX_("couldn't load bmp \"",73,a2,6e,30) + HX_("src",e4,a6,57,00)) + HX_("\"",22,00,00,00)));
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass< ::String >() && _hx_e->toString()!=null() ){
            						HX_STACK_BEGIN_CATCH
            						::String msg1 = _hx_e;
HXLINE(4369)						 ::flixel::_hx_system::frontEnds::LogFrontEnd _this1 = ::flixel::FlxG_obj::log;
HXDLIN(4369)						_this1->advanced((HX_("FlxUI: U.xml_gfx() : ",f9,3c,00,4f) + msg1),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            					}
            					else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::haxe::ValueException _g = _hx_e;
HXLINE( 462)						{
HXLINE( 462)							null();
            						}
HXLINE(4369)						if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::String >())) {
HXLINE( 462)							::String msg1 = ( (::String)(_g->value) );
HXLINE(4369)							{
HXLINE(4369)								 ::flixel::_hx_system::frontEnds::LogFrontEnd _this1 = ::flixel::FlxG_obj::log;
HXDLIN(4369)								_this1->advanced((HX_("FlxUI: U.xml_gfx() : ",f9,3c,00,4f) + msg1),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            							}
            						}
            						else {
HXLINE(4369)							HX_STACK_DO_THROW(_g);
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXDLIN(4369)		src = str;
HXLINE(4371)		bool hasScaledSrc = ::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("scale_src",6f,c7,bc,37));
HXLINE(4372)		if (hasScaledSrc) {
HXLINE(4376)			::String origSrc = src;
HXLINE(4378)			src = this->loadScaledSrc(data,HX_("src",e4,a6,57,00),HX_("scale_src",6f,c7,bc,37),null(),null());
HXLINE(4380)			if ((src != origSrc)) {
HXLINE(4382)				this->addToCleanup(origSrc);
            			}
            		}
HXLINE(4386)		if ((src == HX_("",00,00,00,00))) {
HXLINE(4388)			src = null();
            		}
HXLINE(4391)		if (::hx::IsNull( src )) {
HXLINE(4393)			if ((load_code == HX_("tab_menu",09,73,e1,d6))) {
HXLINE(4395)				src = HX_("flixel/flixel-ui/img/chrome_flat.png",30,cf,0a,80);
            			}
            		}
HXLINE(4399)		int rect_w = ::Std_obj::_hx_int(this->_loadWidth(data,null(),null(),null()));
HXLINE(4400)		int rect_h = ::Std_obj::_hx_int(this->_loadHeight(data,null(),null(),null()));
HXLINE(4402)		if (::hx::IsNotNull( bounds )) {
HXLINE(4404)			if (::hx::IsLess( rect_w,bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE(4406)				rect_w = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4408)				if (::hx::IsGreater( rect_w,bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE(4410)					rect_w = ( (int)(bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic)) );
            				}
            			}
HXLINE(4413)			if (::hx::IsLess( rect_h,bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE(4415)				rect_h = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4417)				if (::hx::IsGreater( rect_h,bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE(4419)					rect_h = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE(4422)		bool _hx_tmp;
HXDLIN(4422)		if ((rect_w != 0)) {
HXLINE(4422)			_hx_tmp = (rect_h == 0);
            		}
            		else {
HXLINE(4422)			_hx_tmp = true;
            		}
HXDLIN(4422)		if (_hx_tmp) {
HXLINE(4424)			return null();
            		}
HXLINE(4427)		 ::openfl::geom::Rectangle rc =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,rect_w,rect_h);
HXLINE(4429)		::Array< int > slice9 = ::flixel::util::FlxStringUtil_obj::toIntArray(::flixel::addons::ui::U_obj::xml_str(data,HX_("slice9",a7,03,04,70),null(),null()));
HXLINE(4431)		::String srcId = HX_("",00,00,00,00);
HXLINE(4432)		 ::Dynamic srcGraphic = src;
HXLINE(4434)		if (hasScaledSrc) {
HXLINE(4436)			slice9 = this->load9SliceSprite_scaleSub(slice9,data,src,null());
HXLINE(4438)			srcId = src;
HXLINE(4439)			srcGraphic = ::flixel::FlxG_obj::bitmap->_cache->get(src);
            		}
HXLINE(4442)		bool smooth = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("smooth",2e,08,6b,07),false);
HXLINE(4444)		::String tileStr = ::flixel::addons::ui::U_obj::xml_str(data,HX_("tile",2e,cb,fc,4c),true,HX_("",00,00,00,00));
HXDLIN(4444)		int tile = 0;
HXDLIN(4444)		::String _hx_switch_0 = tileStr;
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("horizontal",e4,fc,c3,15)) ){
HXLINE(4444)			tile = 16;
HXDLIN(4444)			goto _hx_goto_209;
            		}
            		if (  (_hx_switch_0==HX_("v",76,00,00,00)) ||  (_hx_switch_0==HX_("vertical",76,bc,15,6a)) ){
HXLINE(4444)			tile = 1;
HXDLIN(4444)			goto _hx_goto_209;
            		}
            		if (  (_hx_switch_0==HX_("all",21,f9,49,00)) ||  (_hx_switch_0==HX_("both",81,88,1b,41)) ||  (_hx_switch_0==HX_("hv",0e,5b,00,00)) ||  (_hx_switch_0==HX_("true",4e,a7,03,4d)) ||  (_hx_switch_0==HX_("vh",32,67,00,00)) ){
HXLINE(4444)			tile = 17;
HXDLIN(4444)			goto _hx_goto_209;
            		}
            		_hx_goto_209:;
HXDLIN(4444)		int tile1 = tile;
HXLINE(4446)		f9s =  ::flixel::addons::ui::FlxUI9SliceSprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),srcGraphic,rc,slice9,tile1,smooth,srcId,resize_ratio,resize_point,resize_ratio_axis,false,color);
HXLINE(4448)		return f9s;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_load9SliceSprite,return )

::Array< int > FlxUI_obj::load9SliceSprite_scaleSub(::Array< int > slice9, ::Xml data,::String src,::String __o_srcString){
            		::String srcString = __o_srcString;
            		if (::hx::IsNull(__o_srcString)) srcString = HX_("src",e4,a6,57,00);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4452_load9SliceSprite_scaleSub)
HXLINE(4454)		 ::Xml data1 = data;
HXDLIN(4454)		::String str = HX_("",00,00,00,00);
HXDLIN(4454)		if (::hx::IsNotNull( data1->get(srcString) )) {
HXLINE(4454)			str = data1->get(srcString);
HXDLIN(4454)			bool _hx_tmp;
HXDLIN(4454)			if ((str != HX_("",00,00,00,00))) {
HXLINE(4454)				_hx_tmp = ::hx::IsNull( str );
            			}
            			else {
HXLINE(4454)				_hx_tmp = true;
            			}
HXDLIN(4454)			if (_hx_tmp) {
HXLINE(4454)				str = HX_("",00,00,00,00);
            			}
            			else {
HXLINE(4454)				str = ::flixel::addons::ui::U_obj::gfx(str,null(),null(),null(),null(),null());
HXDLIN(4454)				try {
            					HX_STACK_CATCHABLE(::String, 0);
            					HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE(4454)					if (!(::openfl::utils::Assets_obj::exists(str,HX_("IMAGE",3b,57,57,3b)))) {
HXLINE(4454)						HX_STACK_DO_THROW(((HX_("couldn't load bmp \"",73,a2,6e,30) + srcString) + HX_("\"",22,00,00,00)));
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass< ::String >() && _hx_e->toString()!=null() ){
            						HX_STACK_BEGIN_CATCH
            						::String msg1 = _hx_e;
HXLINE(4454)						 ::flixel::_hx_system::frontEnds::LogFrontEnd _this1 = ::flixel::FlxG_obj::log;
HXDLIN(4454)						_this1->advanced((HX_("FlxUI: U.xml_gfx() : ",f9,3c,00,4f) + msg1),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            					}
            					else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::haxe::ValueException _g = _hx_e;
HXLINE( 462)						{
HXLINE( 462)							null();
            						}
HXLINE(4454)						if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::String >())) {
HXLINE( 462)							::String msg1 = ( (::String)(_g->value) );
HXLINE(4454)							{
HXLINE(4454)								 ::flixel::_hx_system::frontEnds::LogFrontEnd _this1 = ::flixel::FlxG_obj::log;
HXDLIN(4454)								_this1->advanced((HX_("FlxUI: U.xml_gfx() : ",f9,3c,00,4f) + msg1),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            							}
            						}
            						else {
HXLINE(4454)							HX_STACK_DO_THROW(_g);
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXDLIN(4454)		::String origSrc = str;
HXLINE(4456)		if ((src == origSrc)) {
HXLINE(4457)			return slice9;
            		}
HXLINE(4459)		 ::openfl::display::BitmapData srcAsset;
HXDLIN(4459)		if (::hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(src)) ) )) {
HXLINE(4459)			srcAsset = ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(src)) )->bitmap;
            		}
            		else {
HXLINE(4459)			srcAsset = null();
            		}
HXLINE(4461)		if (::hx::IsNull( srcAsset )) {
HXLINE(4462)			srcAsset = ::openfl::utils::Assets_obj::getBitmapData(origSrc,null());
            		}
HXLINE(4464)		 ::openfl::display::BitmapData origAsset = ::openfl::utils::Assets_obj::getBitmapData(origSrc,false);
HXLINE(4465)		Float srcScaleFactorX = (( (Float)(srcAsset->width) ) / ( (Float)(origAsset->width) ));
HXLINE(4466)		Float srcScaleFactorY = (( (Float)(srcAsset->height) ) / ( (Float)(origAsset->height) ));
HXLINE(4468)		bool _hx_tmp1;
HXDLIN(4468)		if ((::Math_obj::abs((((Float)1.0) - srcScaleFactorX)) <= ((Float)0.001))) {
HXLINE(4468)			_hx_tmp1 = (::Math_obj::abs((((Float)1.0) - srcScaleFactorY)) <= ((Float)0.001));
            		}
            		else {
HXLINE(4468)			_hx_tmp1 = false;
            		}
HXDLIN(4468)		if (_hx_tmp1) {
HXLINE(4470)			return slice9;
            		}
HXLINE(4473)		if (::hx::IsNotNull( slice9 )) {
HXLINE(4476)			slice9[0] = ::Std_obj::_hx_int((( (Float)(slice9->__get(0)) ) * srcScaleFactorX));
HXLINE(4477)			slice9[1] = ::Std_obj::_hx_int((( (Float)(slice9->__get(1)) ) * srcScaleFactorY));
HXLINE(4479)			int widthDiff = (origAsset->width - slice9->__get(2));
HXLINE(4480)			int heightDiff = (origAsset->height - slice9->__get(3));
HXLINE(4482)			widthDiff = ::Std_obj::_hx_int((( (Float)(widthDiff) ) * srcScaleFactorX));
HXLINE(4483)			heightDiff = ::Std_obj::_hx_int((( (Float)(heightDiff) ) * srcScaleFactorY));
HXLINE(4485)			slice9[2] = ::Std_obj::_hx_int(( (Float)((srcAsset->width - widthDiff)) ));
HXLINE(4486)			slice9[3] = ::Std_obj::_hx_int(( (Float)((srcAsset->height - heightDiff)) ));
            		}
HXLINE(4488)		return slice9;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,load9SliceSprite_scaleSub,return )

int FlxUI_obj::_loadTileRule( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4492__loadTileRule)
HXLINE(4493)		::String tileStr = ::flixel::addons::ui::U_obj::xml_str(data,HX_("tile",2e,cb,fc,4c),true,HX_("",00,00,00,00));
HXLINE(4494)		int tile = 0;
HXLINE(4495)		::String _hx_switch_0 = tileStr;
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("horizontal",e4,fc,c3,15)) ){
HXLINE(4500)			tile = 16;
HXDLIN(4500)			goto _hx_goto_212;
            		}
            		if (  (_hx_switch_0==HX_("v",76,00,00,00)) ||  (_hx_switch_0==HX_("vertical",76,bc,15,6a)) ){
HXLINE(4502)			tile = 1;
HXDLIN(4502)			goto _hx_goto_212;
            		}
            		if (  (_hx_switch_0==HX_("all",21,f9,49,00)) ||  (_hx_switch_0==HX_("both",81,88,1b,41)) ||  (_hx_switch_0==HX_("hv",0e,5b,00,00)) ||  (_hx_switch_0==HX_("true",4e,a7,03,4d)) ||  (_hx_switch_0==HX_("vh",32,67,00,00)) ){
HXLINE(4498)			tile = 17;
HXDLIN(4498)			goto _hx_goto_212;
            		}
            		_hx_goto_212:;
HXLINE(4504)		return tile;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTileRule,return )

 ::flixel::addons::ui::FlxUISprite FlxUI_obj::_loadBox( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4508__loadBox)
HXLINE(4509)		 ::flixel::addons::ui::FlxUISprite fs = null();
HXLINE(4511)		int thickness = ::Std_obj::_hx_int(this->_loadWidth(data,1,HX_("thickness",74,f1,66,5a),null()));
HXLINE(4513)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(4521)		if (::hx::IsNull( bounds )) {
HXLINE(4523)			bounds =  ::Dynamic(::hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("max_width",eb,9a,40,c1),::Math_obj::POSITIVE_INFINITY)
            				->setFixed(1,HX_("min_width",59,88,fd,ea),::Math_obj::NEGATIVE_INFINITY)
            				->setFixed(2,HX_("max_height",62,6b,96,0d),::Math_obj::POSITIVE_INFINITY)
            				->setFixed(3,HX_("min_height",34,3e,29,69),::Math_obj::NEGATIVE_INFINITY));
            		}
HXLINE(4531)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,null(),null(),null()));
HXLINE(4532)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,null(),null(),null()));
HXLINE(4534)		if (::hx::IsNotNull( bounds )) {
HXLINE(4536)			if (::hx::IsLess( W,bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE(4538)				W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4540)				if (::hx::IsGreater( W,bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE(4542)					W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic)) ));
            				}
            			}
HXLINE(4544)			if (::hx::IsLess( H,bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE(4546)				H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4548)				if (::hx::IsGreater( H,bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE(4550)					H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE(4554)		::String cstr = ::flixel::addons::ui::U_obj::xml_str(data,HX_("color",63,71,5c,4a),true,HX_("0xff000000",88,79,02,3f));
HXLINE(4555)		int C = 0;
HXLINE(4556)		if ((cstr != HX_("",00,00,00,00))) {
HXLINE(4558)			 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(cstr);
HXDLIN(4558)			if (::hx::IsNull( return_val )) {
HXLINE(4558)				HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + cstr));
            			}
HXDLIN(4558)			C = ( (int)(return_val) );
            		}
HXLINE(4560)		fs =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE(4561)		::String key = ((((((W + HX_("x",78,00,00,00)) + H) + HX_(":",3a,00,00,00)) + C) + HX_(":",3a,00,00,00)) + thickness);
HXLINE(4563)		if (::hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(key)) ) )) {
HXLINE(4565)			fs->loadGraphic(key,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(4569)			fs->makeGraphic(W,H,C,false,key);
HXLINE(4570)			 ::openfl::geom::Rectangle r =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,thickness,thickness,(W - (thickness * 2)),(H - (thickness * 2)));
HXLINE(4571)			fs->graphic->bitmap->fillRect(r,0);
            		}
HXLINE(4574)		return fs;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadBox,return )

 ::flixel::addons::ui::FlxUILine FlxUI_obj::_loadLine( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4578__loadLine)
HXLINE(4579)		::String axis = ::flixel::addons::ui::U_obj::xml_str(data,HX_("axis",a1,1c,79,40),true,HX_("horizontal",e4,fc,c3,15));
HXLINE(4580)		int thickness = ::Std_obj::_hx_int(this->_loadWidth(data,-1,HX_("thickness",74,f1,66,5a),null()));
HXLINE(4582)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(4590)		if (::hx::IsNull( bounds )) {
HXLINE(4592)			bounds =  ::Dynamic(::hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("max_width",eb,9a,40,c1),::Math_obj::POSITIVE_INFINITY)
            				->setFixed(1,HX_("min_width",59,88,fd,ea),( (Float)(1) ))
            				->setFixed(2,HX_("max_height",62,6b,96,0d),::Math_obj::POSITIVE_INFINITY)
            				->setFixed(3,HX_("min_height",34,3e,29,69),( (Float)(1) )));
            		}
HXLINE(4599)		::String _hx_switch_0 = axis;
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("horizontal",e4,fc,c3,15)) ||  (_hx_switch_0==HX_("horz",8f,ce,12,45)) ){
HXLINE(4602)			bounds->__SetField(HX_("max_height",62,6b,96,0d),thickness,::hx::paccDynamic);
HXLINE(4603)			bounds->__SetField(HX_("min_height",34,3e,29,69),thickness,::hx::paccDynamic);
HXLINE(4601)			goto _hx_goto_215;
            		}
            		if (  (_hx_switch_0==HX_("v",76,00,00,00)) ||  (_hx_switch_0==HX_("vert",b1,34,4c,4e)) ||  (_hx_switch_0==HX_("vertical",76,bc,15,6a)) ){
HXLINE(4605)			bounds->__SetField(HX_("max_width",eb,9a,40,c1),thickness,::hx::paccDynamic);
HXLINE(4606)			bounds->__SetField(HX_("min_width",59,88,fd,ea),thickness,::hx::paccDynamic);
HXLINE(4604)			goto _hx_goto_215;
            		}
            		_hx_goto_215:;
HXLINE(4609)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,null(),null(),null()));
HXLINE(4610)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,null(),null(),null()));
HXLINE(4612)		if (::hx::IsNotNull( bounds )) {
HXLINE(4614)			if (::hx::IsLess( W,bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE(4616)				W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4618)				if (::hx::IsGreater( W,bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE(4620)					W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic)) ));
            				}
            			}
HXLINE(4622)			if (::hx::IsLess( H,bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE(4624)				H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4626)				if (::hx::IsGreater( H,bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE(4628)					H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE(4632)		::String cstr = ::flixel::addons::ui::U_obj::xml_str(data,HX_("color",63,71,5c,4a),true,HX_("0xff000000",88,79,02,3f));
HXLINE(4633)		int C = 0;
HXLINE(4634)		if ((cstr != HX_("",00,00,00,00))) {
HXLINE(4636)			 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(cstr);
HXDLIN(4636)			if (::hx::IsNull( return_val )) {
HXLINE(4636)				HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + cstr));
            			}
HXDLIN(4636)			C = ( (int)(return_val) );
            		}
HXLINE(4639)		 ::flixel::addons::ui::LineAxis lineAxis;
HXDLIN(4639)		if ((axis == HX_("horizontal",e4,fc,c3,15))) {
HXLINE(4639)			lineAxis = ::flixel::addons::ui::LineAxis_obj::HORIZONTAL_dyn();
            		}
            		else {
HXLINE(4639)			lineAxis = ::flixel::addons::ui::LineAxis_obj::VERTICAL_dyn();
            		}
HXLINE(4640)		Float lineLength;
HXDLIN(4640)		if (::hx::IsPointerEq( lineAxis,::flixel::addons::ui::LineAxis_obj::HORIZONTAL_dyn() )) {
HXLINE(4640)			lineLength = ( (Float)(W) );
            		}
            		else {
HXLINE(4640)			lineLength = ( (Float)(H) );
            		}
HXLINE(4641)		Float lineThickness;
HXDLIN(4641)		if ((thickness != -1)) {
HXLINE(4641)			lineThickness = ( (Float)(thickness) );
            		}
            		else {
HXLINE(4641)			if (::hx::IsPointerEq( lineAxis,::flixel::addons::ui::LineAxis_obj::HORIZONTAL_dyn() )) {
HXLINE(4641)				lineThickness = ( (Float)(H) );
            			}
            			else {
HXLINE(4641)				lineThickness = ( (Float)(W) );
            			}
            		}
HXLINE(4643)		 ::flixel::addons::ui::FlxUILine fl =  ::flixel::addons::ui::FlxUILine_obj::__alloc( HX_CTX ,0,0,lineAxis,lineLength,lineThickness,C);
HXLINE(4645)		return fl;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadLine,return )

 ::flixel::addons::ui::FlxUIBar FlxUI_obj::_loadBar( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4649__loadBar)
HXLINE(4650)		 ::flixel::addons::ui::FlxUIBar fb = null();
HXLINE(4652)		 ::Dynamic style =  ::Dynamic(::hx::Anon_obj::Create(9)
            			->setFixed(0,HX_("emptyColors",1d,5c,af,8e),null())
            			->setFixed(1,HX_("filledColor",61,28,7c,97),null())
            			->setFixed(2,HX_("chunkSize",ce,cd,77,9f),null())
            			->setFixed(3,HX_("emptyImgSrc",0e,0d,a3,ca),HX_("",00,00,00,00))
            			->setFixed(4,HX_("emptyColor",96,47,af,ca),null())
            			->setFixed(5,HX_("borderColor",d7,3c,d5,d6),null())
            			->setFixed(6,HX_("filledColors",f2,2c,27,f5),null())
            			->setFixed(7,HX_("gradRotation",2c,47,cd,fb),null())
            			->setFixed(8,HX_("filledImgSrc",e3,dd,1a,31),HX_("",00,00,00,00)));
HXLINE(4667)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,-1,null(),null()));
HXLINE(4668)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,-1,null(),null()));
HXLINE(4670)		::String direction = ::flixel::addons::ui::U_obj::xml_str(data,HX_("fill_direction",43,0e,7d,b3),true,null());
HXLINE(4671)		 ::flixel::ui::FlxBarFillDirection fillDir = ::flixel::ui::FlxBarFillDirection_obj::TOP_TO_BOTTOM_dyn();
HXLINE(4673)		::String _hx_switch_0 = direction;
            		if (  (_hx_switch_0==HX_("bottom_to_top",a5,98,d9,85)) ){
HXLINE(4682)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::BOTTOM_TO_TOP_dyn();
HXDLIN(4682)			goto _hx_goto_217;
            		}
            		if (  (_hx_switch_0==HX_("horizontal_inside_out",46,c6,92,00)) ){
HXLINE(4684)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::HORIZONTAL_INSIDE_OUT_dyn();
HXDLIN(4684)			goto _hx_goto_217;
            		}
            		if (  (_hx_switch_0==HX_("horizontal_outside_in",ba,dc,41,90)) ){
HXLINE(4686)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::HORIZONTAL_OUTSIDE_IN_dyn();
HXDLIN(4686)			goto _hx_goto_217;
            		}
            		if (  (_hx_switch_0==HX_("left_to_right",50,bd,a3,f7)) ){
HXLINE(4676)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn();
HXDLIN(4676)			goto _hx_goto_217;
            		}
            		if (  (_hx_switch_0==HX_("right_to_left",e8,a1,2d,02)) ){
HXLINE(4678)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::RIGHT_TO_LEFT_dyn();
HXDLIN(4678)			goto _hx_goto_217;
            		}
            		if (  (_hx_switch_0==HX_("top_to_bottom",05,d7,5d,10)) ){
HXLINE(4680)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::TOP_TO_BOTTOM_dyn();
HXDLIN(4680)			goto _hx_goto_217;
            		}
            		if (  (_hx_switch_0==HX_("vertical_inside_out",f4,eb,d7,2d)) ){
HXLINE(4688)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::VERTICAL_INSIDE_OUT_dyn();
HXDLIN(4688)			goto _hx_goto_217;
            		}
            		if (  (_hx_switch_0==HX_("vertical_outside_in",68,02,87,bd)) ){
HXLINE(4690)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::VERTICAL_OUTSIDE_IN_dyn();
HXDLIN(4690)			goto _hx_goto_217;
            		}
            		/* default */{
HXLINE(4692)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn();
            		}
            		_hx_goto_217:;
HXLINE(4695)		::String parentRefStr = ::flixel::addons::ui::U_obj::xml_str(data,HX_("parent_ref",7e,00,5b,f3),true,null());
HXLINE(4696)		::Dynamic parentRef;
HXDLIN(4696)		if ((parentRefStr != HX_("",00,00,00,00))) {
HXLINE(4696)			parentRef = this->getAsset(parentRefStr,null());
            		}
            		else {
HXLINE(4696)			parentRef = null();
            		}
HXLINE(4697)		::String variableName = ::flixel::addons::ui::U_obj::xml_str(data,HX_("variable",3c,12,0d,69),null(),null());
HXLINE(4699)		Float value = ::flixel::addons::ui::U_obj::xml_f(data,HX_("value",71,7f,b8,31),-1);
HXLINE(4701)		Float min = ::flixel::addons::ui::U_obj::xml_f(data,HX_("min",92,11,53,00),0);
HXLINE(4702)		Float max = ::flixel::addons::ui::U_obj::xml_f(data,HX_("max",a4,0a,53,00),100);
HXLINE(4704)		if ((value == -1)) {
HXLINE(4706)			value = max;
            		}
HXLINE(4709)		style->__SetField(HX_("borderColor",d7,3c,d5,d6),::flixel::addons::ui::U_obj::xml_color(data,HX_("border_color",90,7e,e8,6e),null(),null()),::hx::paccDynamic);
HXLINE(4710)		bool showBorder = ::hx::IsNotNull( style->__Field(HX_("borderColor",d7,3c,d5,d6),::hx::paccDynamic) );
HXLINE(4712)		style->__SetField(HX_("filledColor",61,28,7c,97),::flixel::addons::ui::U_obj::xml_color(data,HX_("filled_color",c6,ab,4f,40),null(),null()),::hx::paccDynamic);
HXLINE(4713)		if (::hx::IsNull( style->__Field(HX_("filledColor",61,28,7c,97),::hx::paccDynamic) )) {
HXLINE(4715)			style->__SetField(HX_("filledColor",61,28,7c,97),::flixel::addons::ui::U_obj::xml_color(data,HX_("color",63,71,5c,4a),null(),null()),::hx::paccDynamic);
            		}
HXLINE(4718)		style->__SetField(HX_("emptyColor",96,47,af,ca),::flixel::addons::ui::U_obj::xml_color(data,HX_("empty_color",f1,da,d7,d9),null(),null()),::hx::paccDynamic);
HXLINE(4720)		style->__SetField(HX_("filledColors",f2,2c,27,f5),::flixel::addons::ui::U_obj::xml_colorArray(data,HX_("filled_colors",ed,a1,66,05),null()),::hx::paccDynamic);
HXLINE(4721)		style->__SetField(HX_("emptyColors",1d,5c,af,8e),::flixel::addons::ui::U_obj::xml_colorArray(data,HX_("empty_colors",62,b8,07,c3),null()),::hx::paccDynamic);
HXLINE(4722)		if (::hx::IsNull( style->__Field(HX_("filledColors",f2,2c,27,f5),::hx::paccDynamic) )) {
HXLINE(4724)			style->__SetField(HX_("filledColors",f2,2c,27,f5),::flixel::addons::ui::U_obj::xml_colorArray(data,HX_("colors",b0,c5,86,c6),null()),::hx::paccDynamic);
            		}
HXLINE(4727)		style->__SetField(HX_("filledImgSrc",e3,dd,1a,31),this->loadScaledSrc(data,HX_("src_filled",dd,dc,1c,63),null(),null(),null()),::hx::paccDynamic);
HXLINE(4728)		style->__SetField(HX_("emptyImgSrc",0e,0d,a3,ca),this->loadScaledSrc(data,HX_("src_empty",b2,6b,77,bb),null(),null(),null()),::hx::paccDynamic);
HXLINE(4729)		if (::hx::IsEq( style->__Field(HX_("filledImgSrc",e3,dd,1a,31),::hx::paccDynamic),HX_("",00,00,00,00) )) {
HXLINE(4731)			style->__SetField(HX_("filledImgSrc",e3,dd,1a,31),this->loadScaledSrc(data,HX_("src",e4,a6,57,00),null(),null(),null()),::hx::paccDynamic);
            		}
HXLINE(4734)		style->__SetField(HX_("chunkSize",ce,cd,77,9f),::flixel::addons::ui::U_obj::xml_i(data,HX_("chunk_size",13,8b,ba,d8),1),::hx::paccDynamic);
HXLINE(4735)		style->__SetField(HX_("gradRotation",2c,47,cd,fb),::flixel::addons::ui::U_obj::xml_i(data,HX_("rotation",3e,3d,86,08),90),::hx::paccDynamic);
HXLINE(4737)		bool _hx_tmp;
HXDLIN(4737)		bool _hx_tmp1;
HXDLIN(4737)		if (::hx::IsEq( style->__Field(HX_("filledImgSrc",e3,dd,1a,31),::hx::paccDynamic),HX_("",00,00,00,00) )) {
HXLINE(4737)			_hx_tmp1 = ::hx::IsNull( style->__Field(HX_("filledColor",61,28,7c,97),::hx::paccDynamic) );
            		}
            		else {
HXLINE(4737)			_hx_tmp1 = false;
            		}
HXDLIN(4737)		if (_hx_tmp1) {
HXLINE(4737)			_hx_tmp = ::hx::IsNull( style->__Field(HX_("filledColors",f2,2c,27,f5),::hx::paccDynamic) );
            		}
            		else {
HXLINE(4737)			_hx_tmp = false;
            		}
HXDLIN(4737)		if (_hx_tmp) {
HXLINE(4739)			style->__SetField(HX_("filledColor",61,28,7c,97),-65536,::hx::paccDynamic);
            		}
HXLINE(4742)		bool _hx_tmp2;
HXDLIN(4742)		if ((W == -1)) {
HXLINE(4742)			_hx_tmp2 = (H == -1);
            		}
            		else {
HXLINE(4742)			_hx_tmp2 = false;
            		}
HXDLIN(4742)		if (_hx_tmp2) {
HXLINE(4744)			fb =  ::flixel::addons::ui::FlxUIBar_obj::__alloc( HX_CTX ,0,0,fillDir,100,10,parentRef,variableName,min,max,showBorder);
            		}
            		else {
HXLINE(4748)			fb =  ::flixel::addons::ui::FlxUIBar_obj::__alloc( HX_CTX ,0,0,fillDir,W,H,parentRef,variableName,min,max,showBorder);
            		}
HXLINE(4751)		fb->set_style(style);
HXLINE(4752)		fb->resize(( (Float)(fb->barWidth) ),( (Float)(fb->barHeight) ));
HXLINE(4754)		fb->set_value(value);
HXLINE(4756)		return fb;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadBar,return )

 ::flixel::addons::ui::FlxUISprite FlxUI_obj::_loadSprite( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4760__loadSprite)
HXLINE(4761)		::String src = HX_("",00,00,00,00);
HXLINE(4762)		 ::flixel::addons::ui::FlxUISprite fs = null();
HXLINE(4764)		src = this->loadScaledSrc(data,null(),null(),null(),null());
HXLINE(4766)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(4774)		 ::flixel::math::FlxBasePoint resize = this->getResizeRatio(data,-1);
HXLINE(4776)		Float resize_ratio = resize->x;
HXLINE(4777)		int resize_ratio_axis = ::Std_obj::_hx_int(resize->y);
HXLINE(4778)		 ::flixel::math::FlxBasePoint resize_point = this->_loadCompass(data,HX_("resize_point",85,44,f0,71));
HXLINE(4780)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,-1,null(),null()));
HXLINE(4781)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,-1,null(),null()));
HXLINE(4783)		if (::hx::IsNotNull( bounds )) {
HXLINE(4785)			if (::hx::IsLess( W,bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE(4787)				W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4789)				if (::hx::IsGreater( W,bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE(4791)					W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic)) ));
            				}
            			}
HXLINE(4793)			if (::hx::IsLess( H,bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE(4795)				H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4797)				if (::hx::IsGreater( H,bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE(4799)					H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE(4803)		if ((src != HX_("",00,00,00,00))) {
HXLINE(4805)			bool _hx_tmp;
HXDLIN(4805)			if ((W == -1)) {
HXLINE(4805)				_hx_tmp = (H == -1);
            			}
            			else {
HXLINE(4805)				_hx_tmp = false;
            			}
HXDLIN(4805)			if (_hx_tmp) {
HXLINE(4807)				fs =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,0,0,src);
            			}
            			else {
HXLINE(4812)				bool _hx_tmp1;
HXDLIN(4812)				if ((resize_ratio != -1)) {
HXLINE(4812)					if ((W != -1)) {
HXLINE(4812)						_hx_tmp1 = (H == -1);
            					}
            					else {
HXLINE(4812)						_hx_tmp1 = true;
            					}
            				}
            				else {
HXLINE(4812)					_hx_tmp1 = false;
            				}
HXDLIN(4812)				if (_hx_tmp1) {
HXLINE(4815)					if ((resize_ratio_axis == -1)) {
HXLINE(4817)						if ((W == -1)) {
HXLINE(4819)							resize_ratio_axis = 0;
            						}
HXLINE(4821)						if ((H == -1)) {
HXLINE(4823)							resize_ratio_axis = 1;
            						}
            					}
HXLINE(4828)					if ((resize_ratio_axis == 1)) {
HXLINE(4830)						H = ( (int)((( (Float)(W) ) * (( (Float)(1) ) / resize_ratio))) );
            					}
            					else {
HXLINE(4832)						if ((resize_ratio_axis == 0)) {
HXLINE(4834)							W = ( (int)((( (Float)(H) ) * (( (Float)(1) ) / resize_ratio))) );
            						}
            					}
            				}
HXLINE(4838)				bool smooth = this->loadSmooth(data,true);
HXLINE(4839)				fs =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,0,0,::flixel::addons::ui::U_obj::loadScaledImage(::flixel::addons::ui::U_obj::xml_str(data,HX_("src",e4,a6,57,00),null(),null()),( (Float)(W) ),( (Float)(H) ),smooth));
            			}
            		}
            		else {
HXLINE(4844)			::String cstr = ::flixel::addons::ui::U_obj::xml_str(data,HX_("color",63,71,5c,4a),null(),null());
HXLINE(4845)			int C = 0;
HXLINE(4846)			if ((cstr != HX_("",00,00,00,00))) {
HXLINE(4848)				 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(cstr);
HXDLIN(4848)				if (::hx::IsNull( return_val )) {
HXLINE(4848)					HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + cstr));
            				}
HXDLIN(4848)				C = ( (int)(return_val) );
            			}
HXLINE(4850)			fs =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE(4851)			fs->makeGraphic(W,H,C,null(),null());
            		}
HXLINE(4854)		fs->set_resize_point(resize_point);
HXLINE(4855)		fs->set_resize_ratio(resize_ratio);
HXLINE(4856)		fs->resize_ratio_axis = resize_ratio_axis;
HXLINE(4858)		return fs;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadSprite,return )

bool FlxUI_obj::loadSmooth( ::Xml scaleNode,bool defaultValue){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4862_loadSmooth)
HXLINE(4863)		::String defaultStr;
HXDLIN(4863)		if (defaultValue) {
HXLINE(4863)			defaultStr = HX_("true",4e,a7,03,4d);
            		}
            		else {
HXLINE(4863)			defaultStr = HX_("false",a3,35,4f,fb);
            		}
HXLINE(4864)		::String smoothStr = ::flixel::addons::ui::U_obj::xml_str(scaleNode,HX_("smooth",2e,08,6b,07),true,defaultStr);
HXLINE(4865)		if ((smoothStr == HX_("",00,00,00,00))) {
HXLINE(4867)			smoothStr = ::flixel::addons::ui::U_obj::xml_str(scaleNode,HX_("antialias",ae,d6,e9,75),true,defaultStr);
            		}
HXLINE(4869)		return ::flixel::addons::ui::U_obj::boolify(smoothStr);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,loadSmooth,return )

::String FlxUI_obj::loadScaledSrc( ::Xml data,::String __o_attName,::String __o_scaleName,::hx::Null< int >  __o_tilesWide,::hx::Null< int >  __o_tilesTall){
            		::String attName = __o_attName;
            		if (::hx::IsNull(__o_attName)) attName = HX_("src",e4,a6,57,00);
            		::String scaleName = __o_scaleName;
            		if (::hx::IsNull(__o_scaleName)) scaleName = HX_("scale",8a,ce,ce,78);
            		int tilesWide = __o_tilesWide.Default(1);
            		int tilesTall = __o_tilesTall.Default(1);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4878_loadScaledSrc)
HXLINE(4879)		::String src = ::flixel::addons::ui::U_obj::xml_str(data,attName,null(),null());
HXLINE(4880)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,scaleName)) {
HXLINE(4882)			int _g = 0;
HXDLIN(4882)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,scaleName);
HXDLIN(4882)			while((_g < _g1->length)){
HXLINE(4882)				 ::Xml scaleNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(4882)				_g = (_g + 1);
HXLINE(4884)				Float ratio = ::flixel::addons::ui::U_obj::xml_f(scaleNode,HX_("screen_ratio",b8,10,95,88),-1);
HXLINE(4885)				Float tolerance = ::flixel::addons::ui::U_obj::xml_f(scaleNode,HX_("tolerance",0d,3d,7c,33),((Float)0.1));
HXLINE(4886)				Float actualRatio = (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(::flixel::FlxG_obj::height) ));
HXLINE(4889)				bool _hx_tmp;
HXDLIN(4889)				if (!((ratio < 0))) {
HXLINE(4889)					if ((ratio > 0)) {
HXLINE(4889)						_hx_tmp = (::Math_obj::abs((ratio - actualRatio)) <= tolerance);
            					}
            					else {
HXLINE(4889)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE(4889)					_hx_tmp = true;
            				}
HXDLIN(4889)				if (_hx_tmp) {
HXLINE(4891)					::String suffix = ::flixel::addons::ui::U_obj::xml_str(scaleNode,HX_("suffix",d1,e2,a5,9c),null(),null());
HXLINE(4892)					::String srcSuffix = (src + suffix);
HXLINE(4893)					 ::openfl::display::BitmapData testAsset = null();
HXLINE(4894)					Float scale_ = ( (Float)(-1) );
HXLINE(4895)					bool smooth = this->loadSmooth(scaleNode,true);
HXLINE(4897)					Float to_height = this->_loadHeight(scaleNode,-1,HX_("to_height",6b,29,06,d3),null());
HXLINE(4899)					if ((to_height != -1)) {
HXLINE(4901)						 ::openfl::display::BitmapData testAsset1 = ::flixel::addons::ui::U_obj::getBmp(::flixel::addons::ui::U_obj::gfx(src,null(),null(),null(),null(),null()));
HXLINE(4902)						if (::hx::IsNotNull( testAsset1 )) {
HXLINE(4904)							scale_ = (to_height / ( (Float)(testAsset1->height) ));
            						}
            					}
            					else {
HXLINE(4909)						scale_ = this->_loadScale(scaleNode,-1,null());
HXLINE(4910)						if ((scale_ == -1)) {
HXLINE(4912)							scale_ = this->_loadScale(scaleNode,-1,HX_("value",71,7f,b8,31));
            						}
            					}
HXLINE(4916)					Float scale_x;
HXDLIN(4916)					if ((scale_ != -1)) {
HXLINE(4916)						scale_x = scale_;
            					}
            					else {
HXLINE(4916)						scale_x = this->_loadScaleX(scaleNode,-1);
            					}
HXLINE(4917)					Float scale_y;
HXDLIN(4917)					if ((scale_ != -1)) {
HXLINE(4917)						scale_y = scale_;
            					}
            					else {
HXLINE(4917)						scale_y = this->_loadScaleY(scaleNode,-1);
            					}
HXLINE(4919)					Float sw = ( (Float)(0) );
HXLINE(4920)					Float sh = ( (Float)(0) );
HXLINE(4922)					bool _hx_tmp1;
HXDLIN(4922)					if ((scale_x > 0)) {
HXLINE(4922)						_hx_tmp1 = (scale_y > 0);
            					}
            					else {
HXLINE(4922)						_hx_tmp1 = false;
            					}
HXDLIN(4922)					if (_hx_tmp1) {
HXLINE(4924)						if ((scale_x <= 0)) {
HXLINE(4925)							scale_x = ((Float)1.0);
            						}
HXLINE(4926)						if ((scale_y <= 0)) {
HXLINE(4927)							scale_y = ((Float)1.0);
            						}
HXLINE(4929)						sw = this->_loadWidth(scaleNode,-1,null(),null());
HXLINE(4930)						sh = this->_loadHeight(scaleNode,-1,null(),null());
HXLINE(4932)						bool _hx_tmp2;
HXDLIN(4932)						if ((sw != -1)) {
HXLINE(4932)							_hx_tmp2 = (sh == -1);
            						}
            						else {
HXLINE(4932)							_hx_tmp2 = true;
            						}
HXDLIN(4932)						if (_hx_tmp2) {
HXLINE(4934)							testAsset = ::openfl::utils::Assets_obj::getBitmapData(::flixel::addons::ui::U_obj::gfx(src,null(),null(),null(),null(),null()),null());
HXLINE(4935)							sw = ( (Float)(testAsset->width) );
HXLINE(4936)							sh = ( (Float)(testAsset->height) );
            						}
HXLINE(4939)						sw = (sw * scale_x);
HXLINE(4940)						sh = (sh * scale_y);
            					}
            					else {
HXLINE(4944)						sw = this->_loadWidth(scaleNode,-1,null(),null());
HXLINE(4945)						sh = this->_loadHeight(scaleNode,-1,null(),null());
            					}
HXLINE(4948)					bool _hx_tmp3;
HXDLIN(4948)					if ((sw != 0)) {
HXLINE(4948)						_hx_tmp3 = (sh != 0);
            					}
            					else {
HXLINE(4948)						_hx_tmp3 = false;
            					}
HXDLIN(4948)					if (_hx_tmp3) {
HXLINE(4950)						bool _hx_tmp4;
HXDLIN(4950)						if ((tilesTall <= 1)) {
HXLINE(4950)							_hx_tmp4 = (tilesWide > 1);
            						}
            						else {
HXLINE(4950)							_hx_tmp4 = true;
            						}
HXDLIN(4950)						if (_hx_tmp4) {
HXLINE(4952)							testAsset = ::openfl::utils::Assets_obj::getBitmapData(::flixel::addons::ui::U_obj::gfx(src,null(),null(),null(),null(),null()),null());
HXLINE(4953)							::String str = ::flixel::addons::ui::U_obj::gfx(srcSuffix,null(),null(),null(),null(),null());
HXDLIN(4953)							int str1 = ::Std_obj::_hx_int((( (Float)(testAsset->width) ) / ( (Float)(tilesWide) )));
HXLINE(4954)							int str2 = ::Std_obj::_hx_int((( (Float)(testAsset->height) ) / ( (Float)(tilesTall) )));
HXDLIN(4954)							int str3 = ::Std_obj::_hx_int(sw);
HXLINE(4953)							::String str4 = ::flixel::addons::ui::U_obj::scaleAndStoreTileset(str,scale_y,str1,str2,str3,::Std_obj::_hx_int((sh / ( (Float)(tilesTall) ))),smooth);
HXLINE(4955)							this->addToScaledAssets(str4);
HXLINE(4956)							return str4;
            						}
            						else {
HXLINE(4960)							::String str5 = ::flixel::addons::ui::U_obj::loadScaledImage(srcSuffix,sw,sh,smooth);
HXLINE(4961)							this->addToScaledAssets(str5);
HXLINE(4962)							return str5;
            						}
            					}
HXLINE(4965)					goto _hx_goto_221;
            				}
            			}
            			_hx_goto_221:;
            		}
HXLINE(4969)		 ::Xml data1 = data;
HXDLIN(4969)		::String str6 = HX_("",00,00,00,00);
HXDLIN(4969)		if (::hx::IsNotNull( data1->get(attName) )) {
HXLINE(4969)			str6 = data1->get(attName);
HXDLIN(4969)			bool _hx_tmp5;
HXDLIN(4969)			if ((str6 != HX_("",00,00,00,00))) {
HXLINE(4969)				_hx_tmp5 = ::hx::IsNull( str6 );
            			}
            			else {
HXLINE(4969)				_hx_tmp5 = true;
            			}
HXDLIN(4969)			if (_hx_tmp5) {
HXLINE(4969)				str6 = HX_("",00,00,00,00);
            			}
            			else {
HXLINE(4969)				str6 = ::flixel::addons::ui::U_obj::gfx(str6,null(),null(),null(),null(),null());
HXDLIN(4969)				try {
            					HX_STACK_CATCHABLE(::String, 0);
            					HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE(4969)					if (!(::openfl::utils::Assets_obj::exists(str6,HX_("IMAGE",3b,57,57,3b)))) {
HXLINE(4969)						HX_STACK_DO_THROW(((HX_("couldn't load bmp \"",73,a2,6e,30) + attName) + HX_("\"",22,00,00,00)));
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass< ::String >() && _hx_e->toString()!=null() ){
            						HX_STACK_BEGIN_CATCH
            						::String msg1 = _hx_e;
HXLINE(4969)						 ::flixel::_hx_system::frontEnds::LogFrontEnd _this1 = ::flixel::FlxG_obj::log;
HXDLIN(4969)						_this1->advanced((HX_("FlxUI: U.xml_gfx() : ",f9,3c,00,4f) + msg1),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            					}
            					else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::haxe::ValueException _g2 = _hx_e;
HXLINE( 462)						{
HXLINE( 462)							null();
            						}
HXLINE(4969)						if (::Std_obj::isOfType(_g2->value,::hx::ClassOf< ::String >())) {
HXLINE( 462)							::String msg1 = ( (::String)(_g2->value) );
HXLINE(4969)							{
HXLINE(4969)								 ::flixel::_hx_system::frontEnds::LogFrontEnd _this1 = ::flixel::FlxG_obj::log;
HXDLIN(4969)								_this1->advanced((HX_("FlxUI: U.xml_gfx() : ",f9,3c,00,4f) + msg1),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            							}
            						}
            						else {
HXLINE(4969)							HX_STACK_DO_THROW(_g2);
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXDLIN(4969)		return str6;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxUI_obj,loadScaledSrc,return )

int FlxUI_obj::thisWidth(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4981_thisWidth)
HXDLIN(4981)		return ::flixel::FlxG_obj::width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,thisWidth,return )

int FlxUI_obj::thisHeight(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4990_thisHeight)
HXDLIN(4990)		return ::flixel::FlxG_obj::height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,thisHeight,return )

Float FlxUI_obj::_getAnchorPos(::Dynamic thing,::String axis,::String str){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4997__getAnchorPos)
HXLINE(4998)		::String _hx_switch_0 = str;
            		if (  (_hx_switch_0==HX_("",00,00,00,00)) ){
HXLINE(5001)			return ( (Float)(0) );
HXDLIN(5001)			goto _hx_goto_225;
            		}
            		if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE(5007)			if ((axis == HX_("x",78,00,00,00))) {
HXLINE(5009)				return (( (Float)(this->screenWidth()) ) / ( (Float)(2) ));
            			}
            			else {
HXLINE(5011)				if ((axis == HX_("y",79,00,00,00))) {
HXLINE(5013)					return (this->screenHeight() / ( (Float)(2) ));
            				}
            			}
HXLINE(5007)			goto _hx_goto_225;
            		}
            		if (  (_hx_switch_0==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_0==HX_("down",62,f8,6d,42)) ){
HXLINE(5018)			return this->screenHeight();
HXDLIN(5018)			goto _hx_goto_225;
            		}
            		if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(5003)			return ( (Float)(0) );
HXDLIN(5003)			goto _hx_goto_225;
            		}
            		if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(5005)			return ( (Float)(this->screenWidth()) );
HXDLIN(5005)			goto _hx_goto_225;
            		}
            		if (  (_hx_switch_0==HX_("top",95,66,58,00)) ||  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE(5016)			return ( (Float)(0) );
HXDLIN(5016)			goto _hx_goto_225;
            		}
            		/* default */{
HXLINE(5020)			Float perc = ::flixel::addons::ui::U_obj::perc_to_float(str);
HXLINE(5021)			if (!(::Math_obj::isNaN(perc))) {
HXLINE(5023)				if ((axis == HX_("x",78,00,00,00))) {
HXLINE(5025)					return (perc * ( (Float)(this->screenWidth()) ));
            				}
            				else {
HXLINE(5027)					if ((axis == HX_("y",79,00,00,00))) {
HXLINE(5029)						return (perc * this->screenHeight());
            					}
            				}
            			}
            			else {
HXLINE(5034)				 ::EReg r =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\\w]+\\.[\\w]+",ee,da,86,47),HX_("",00,00,00,00));
HXLINE(5036)				if (r->match(str)) {
HXLINE(5038)					::String wh = HX_("",00,00,00,00);
HXLINE(5039)					if ((axis == HX_("x",78,00,00,00))) {
HXLINE(5041)						wh = HX_("w",77,00,00,00);
            					}
HXLINE(5043)					if ((axis == HX_("y",79,00,00,00))) {
HXLINE(5045)						wh = HX_("h",68,00,00,00);
            					}
HXLINE(5047)					Float assetValue = this->_getStretch(1,wh,str);
HXLINE(5048)					return assetValue;
            				}
            			}
            		}
            		_hx_goto_225:;
HXLINE(5052)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_getAnchorPos,return )

 ::flixel::addons::ui::Rounding FlxUI_obj::getRound( ::Xml node,::String __o_defaultStr){
            		::String defaultStr = __o_defaultStr;
            		if (::hx::IsNull(__o_defaultStr)) defaultStr = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5056_getRound)
HXLINE(5057)		::String roundStr = ::flixel::addons::ui::U_obj::xml_str(node,HX_("round",4e,f8,65,ed),true,defaultStr);
HXLINE(5058)		::String _hx_switch_0 = roundStr;
            		if (  (_hx_switch_0==HX_("1",31,00,00,00)) ||  (_hx_switch_0==HX_("ceil",05,1f,bd,41)) ||  (_hx_switch_0==HX_("ceiling",fd,5e,9e,33)) ||  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE(5063)			return ::flixel::addons::ui::Rounding_obj::Ceil_dyn();
HXDLIN(5063)			goto _hx_goto_227;
            		}
            		if (  (_hx_switch_0==HX_("-1",64,27,00,00)) ||  (_hx_switch_0==HX_("down",62,f8,6d,42)) ||  (_hx_switch_0==HX_("floor",cc,d1,96,02)) ){
HXLINE(5061)			return ::flixel::addons::ui::Rounding_obj::Floor_dyn();
HXDLIN(5061)			goto _hx_goto_227;
            		}
            		if (  (_hx_switch_0==HX_("0",30,00,00,00)) ||  (_hx_switch_0==HX_("round",4e,f8,65,ed)) ||  (_hx_switch_0==HX_("true",4e,a7,03,4d)) ){
HXLINE(5065)			return ::flixel::addons::ui::Rounding_obj::Round_dyn();
HXDLIN(5065)			goto _hx_goto_227;
            		}
            		_hx_goto_227:;
HXLINE(5067)		return ::flixel::addons::ui::Rounding_obj::None_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getRound,return )

Float FlxUI_obj::doRound(Float f, ::flixel::addons::ui::Rounding round){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5072_doRound)
HXDLIN(5072)		switch((int)(round->_hx_getIndex())){
            			case (int)0: {
HXLINE(5077)				return ( (Float)(::Math_obj::floor(f)) );
            			}
            			break;
            			case (int)1: {
HXLINE(5081)				return ( (Float)(::Math_obj::ceil(f)) );
            			}
            			break;
            			case (int)2: {
HXLINE(5079)				return ( (Float)(::Math_obj::round(f)) );
            			}
            			break;
            			case (int)3: {
HXLINE(5075)				return f;
            			}
            			break;
            		}
HXLINE(5072)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,doRound,return )

 ::Dynamic FlxUI_obj::calcMaxMinSize( ::Xml data, ::Dynamic width, ::Dynamic height){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5087_calcMaxMinSize)
HXLINE(5088)		Float min_w = ( (Float)(0) );
HXLINE(5089)		Float min_h = ( (Float)(0) );
HXLINE(5090)		Float max_w = ::Math_obj::POSITIVE_INFINITY;
HXLINE(5091)		Float max_h = ::Math_obj::POSITIVE_INFINITY;
HXLINE(5092)		Float temp_min_w = ( (Float)(0) );
HXLINE(5093)		Float temp_min_h = ( (Float)(0) );
HXLINE(5094)		Float temp_max_w = ::Math_obj::POSITIVE_INFINITY;
HXLINE(5095)		Float temp_max_h = ::Math_obj::POSITIVE_INFINITY;
HXLINE(5097)		 ::flixel::addons::ui::Rounding round = ::flixel::addons::ui::Rounding_obj::None_dyn();
HXLINE(5099)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("exact_size",81,45,3f,e0))) {
HXLINE(5101)			int _g = 0;
HXDLIN(5101)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("exact_size",81,45,3f,e0));
HXDLIN(5101)			while((_g < _g1->length)){
HXLINE(5101)				 ::Xml exactNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(5101)				_g = (_g + 1);
HXLINE(5103)				::String exact_w_str = ::flixel::addons::ui::U_obj::xml_str(exactNode,HX_("width",06,b6,62,ca),null(),null());
HXLINE(5104)				::String exact_h_str = ::flixel::addons::ui::U_obj::xml_str(exactNode,HX_("height",e7,07,4c,02),null(),null());
HXLINE(5106)				round = this->getRound(exactNode,null());
HXLINE(5107)				min_w = this->doRound(this->_getDataSize(HX_("w",77,00,00,00),exact_w_str,0),round);
HXLINE(5108)				min_h = this->doRound(this->_getDataSize(HX_("h",68,00,00,00),exact_h_str,0),round);
HXLINE(5109)				max_w = this->doRound(min_w,round);
HXLINE(5110)				max_h = this->doRound(min_h,round);
            			}
            		}
            		else {
HXLINE(5113)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("min_size",ce,b9,6e,63))) {
HXLINE(5115)				int _g2 = 0;
HXDLIN(5115)				::Array< ::Dynamic> _g3 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("min_size",ce,b9,6e,63));
HXDLIN(5115)				while((_g2 < _g3->length)){
HXLINE(5115)					 ::Xml minNode = _g3->__get(_g2).StaticCast<  ::Xml >();
HXDLIN(5115)					_g2 = (_g2 + 1);
HXLINE(5117)					::String min_w_str = ::flixel::addons::ui::U_obj::xml_str(minNode,HX_("width",06,b6,62,ca),null(),null());
HXLINE(5118)					::String min_h_str = ::flixel::addons::ui::U_obj::xml_str(minNode,HX_("height",e7,07,4c,02),null(),null());
HXLINE(5119)					round = this->getRound(minNode,null());
HXLINE(5120)					temp_min_w = this->doRound(this->_getDataSize(HX_("w",77,00,00,00),min_w_str,0),round);
HXLINE(5121)					temp_min_h = this->doRound(this->_getDataSize(HX_("h",68,00,00,00),min_h_str,0),round);
HXLINE(5122)					if ((temp_min_w > min_w)) {
HXLINE(5124)						min_w = temp_min_w;
            					}
HXLINE(5126)					if ((temp_min_h > min_h)) {
HXLINE(5128)						min_h = temp_min_h;
            					}
            				}
            			}
            			else {
HXLINE(5132)				if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("max_size",7c,9f,54,16))) {
HXLINE(5134)					int _g4 = 0;
HXDLIN(5134)					::Array< ::Dynamic> _g5 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("max_size",7c,9f,54,16));
HXDLIN(5134)					while((_g4 < _g5->length)){
HXLINE(5134)						 ::Xml maxNode = _g5->__get(_g4).StaticCast<  ::Xml >();
HXDLIN(5134)						_g4 = (_g4 + 1);
HXLINE(5136)						::String max_w_str = ::flixel::addons::ui::U_obj::xml_str(maxNode,HX_("width",06,b6,62,ca),null(),null());
HXLINE(5137)						::String max_h_str = ::flixel::addons::ui::U_obj::xml_str(maxNode,HX_("height",e7,07,4c,02),null(),null());
HXLINE(5138)						round = this->getRound(maxNode,null());
HXLINE(5139)						temp_max_w = this->doRound(this->_getDataSize(HX_("w",77,00,00,00),max_w_str,::Math_obj::POSITIVE_INFINITY),round);
HXLINE(5140)						temp_max_h = this->doRound(this->_getDataSize(HX_("h",68,00,00,00),max_h_str,::Math_obj::POSITIVE_INFINITY),round);
HXLINE(5141)						if ((temp_max_w < max_w)) {
HXLINE(5143)							max_w = temp_max_w;
            						}
HXLINE(5145)						if ((temp_max_h < max_h)) {
HXLINE(5147)							max_h = temp_max_h;
            						}
            					}
            				}
            				else {
HXLINE(5153)					return null();
            				}
            			}
            		}
HXLINE(5156)		if (::hx::IsNotNull( width )) {
HXLINE(5158)			if (::hx::IsGreater( width,min_w )) {
HXLINE(5160)				min_w = ( (Float)(width) );
            			}
HXLINE(5162)			if (::hx::IsLess( width,max_w )) {
HXLINE(5164)				max_w = ( (Float)(width) );
            			}
            		}
HXLINE(5167)		if (::hx::IsNotNull( height )) {
HXLINE(5169)			if (::hx::IsGreater( height,min_h )) {
HXLINE(5171)				min_h = ( (Float)(height) );
            			}
HXLINE(5173)			if (::hx::IsLess( height,max_h )) {
HXLINE(5175)				max_h = ( (Float)(height) );
            			}
            		}
HXLINE(5181)		if ((max_w <= 0)) {
HXLINE(5183)			max_w = ::Math_obj::POSITIVE_INFINITY;
            		}
HXLINE(5185)		if ((max_h <= 0)) {
HXLINE(5187)			max_h = ::Math_obj::POSITIVE_INFINITY;
            		}
HXLINE(5190)		return  ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("max_width",eb,9a,40,c1),max_w)
            			->setFixed(1,HX_("min_width",59,88,fd,ea),min_w)
            			->setFixed(2,HX_("max_height",62,6b,96,0d),max_h)
            			->setFixed(3,HX_("min_height",34,3e,29,69),min_h));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,calcMaxMinSize,return )

Float FlxUI_obj::_getDataSize(::String target,::String str,::hx::Null< Float >  __o_default_){
            		Float default_ = __o_default_.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5199__getDataSize)
HXLINE(5200)		if (::flixel::addons::ui::U_obj::isStrNum(str)) {
HXLINE(5202)			return ::Std_obj::parseFloat(str);
            		}
HXLINE(5204)		Float percf = ::flixel::addons::ui::U_obj::perc_to_float(str);
HXLINE(5205)		if (!(::Math_obj::isNaN(percf))) {
HXLINE(5207)			::String _hx_switch_0 = target;
            			if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(5212)				return (this->screenHeight() * percf);
HXDLIN(5212)				goto _hx_goto_234;
            			}
            			if (  (_hx_switch_0==HX_("scale",8a,ce,ce,78)) ||  (_hx_switch_0==HX_("scale_x",43,58,07,65)) ||  (_hx_switch_0==HX_("scale_y",44,58,07,65)) ){
HXLINE(5214)				return percf;
HXDLIN(5214)				goto _hx_goto_234;
            			}
            			if (  (_hx_switch_0==HX_("w",77,00,00,00)) ||  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(5210)				return (( (Float)(this->screenWidth()) ) * percf);
HXDLIN(5210)				goto _hx_goto_234;
            			}
            			_hx_goto_234:;
            		}
            		else {
HXLINE(5219)			if ((str.indexOf(HX_("stretch:",95,06,83,92),null()) == 0)) {
HXLINE(5221)				str = ::StringTools_obj::replace(str,HX_("stretch:",95,06,83,92),HX_("",00,00,00,00));
HXLINE(5222)				::Array< ::String > arr = str.split(HX_(",",2c,00,00,00));
HXLINE(5223)				Float stretch_0 = this->_getStretch(0,target,arr->__get(0));
HXLINE(5224)				Float stretch_1 = this->_getStretch(1,target,arr->__get(1));
HXLINE(5225)				bool _hx_tmp;
HXDLIN(5225)				if ((stretch_0 != -1)) {
HXLINE(5225)					_hx_tmp = (stretch_1 != -1);
            				}
            				else {
HXLINE(5225)					_hx_tmp = false;
            				}
HXDLIN(5225)				if (_hx_tmp) {
HXLINE(5227)					return (stretch_1 - stretch_0);
            				}
            				else {
HXLINE(5231)					return default_;
            				}
            			}
            			else {
HXLINE(5234)				if ((str.indexOf(HX_("asset:",4a,48,03,4c),null()) == 0)) {
HXLINE(5236)					str = ::StringTools_obj::replace(str,HX_("asset:",4a,48,03,4c),HX_("",00,00,00,00));
HXLINE(5237)					Float assetValue = this->_getStretch(1,target,str);
HXLINE(5238)					return assetValue;
            				}
            				else {
HXLINE(5242)					 ::EReg r =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\\w]+\\.[\\w]+",ee,da,86,47),HX_("",00,00,00,00));
HXLINE(5243)					if (r->match(str)) {
HXLINE(5245)						Float assetValue1 = this->_getStretch(1,target,str);
HXLINE(5246)						return assetValue1;
            					}
            				}
            			}
HXLINE(5250)			::String ptStr = HX_("",00,00,00,00);
HXLINE(5252)			int _hx_tmp1 = str.indexOf(HX_("pt",04,62,00,00),null());
HXDLIN(5252)			if ((_hx_tmp1 == (str.length - 2))) {
HXLINE(5254)				ptStr = str.substr(0,(str.length - 2));
            			}
HXLINE(5257)			bool _hx_tmp2;
HXDLIN(5257)			if ((ptStr != HX_("",00,00,00,00))) {
HXLINE(5257)				_hx_tmp2 = ::flixel::addons::ui::U_obj::isStrNum(ptStr);
            			}
            			else {
HXLINE(5257)				_hx_tmp2 = false;
            			}
HXDLIN(5257)			if (_hx_tmp2) {
HXLINE(5259)				Float tempNum = ::Std_obj::parseFloat(ptStr);
HXLINE(5261)				::String _hx_switch_1 = target;
            				if (  (_hx_switch_1==HX_("h",68,00,00,00)) ||  (_hx_switch_1==HX_("height",e7,07,4c,02)) ){
HXLINE(5266)					return (this->_pointY * tempNum);
HXDLIN(5266)					goto _hx_goto_235;
            				}
            				if (  (_hx_switch_1==HX_("w",77,00,00,00)) ||  (_hx_switch_1==HX_("width",06,b6,62,ca)) ){
HXLINE(5264)					return (this->_pointX * tempNum);
HXDLIN(5264)					goto _hx_goto_235;
            				}
            				_hx_goto_235:;
            			}
            		}
HXLINE(5270)		return default_;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_getDataSize,return )

::cpp::VirtualArray FlxUI_obj::_getOperation(::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5281__getOperation)
HXLINE(5282)		::Array< ::String > list = ::Array_obj< ::String >::fromData( _hx_array_data_e9110855_239,5);
HXLINE(5284)		::String op = HX_("",00,00,00,00);
HXLINE(5285)		Float besti = ::Math_obj::POSITIVE_INFINITY;
HXLINE(5287)		{
HXLINE(5287)			int _g = 0;
HXDLIN(5287)			while((_g < list->length)){
HXLINE(5287)				::String item = list->__get(_g);
HXDLIN(5287)				_g = (_g + 1);
HXLINE(5289)				int i = str.indexOf(item,null());
HXLINE(5290)				if ((i != -1)) {
HXLINE(5292)					if ((i < besti)) {
HXLINE(5294)						besti = ( (Float)(i) );
HXLINE(5295)						op = item;
            					}
            				}
            			}
            		}
HXLINE(5300)		bool hasPoint = false;
HXLINE(5302)		if ((op != HX_("",00,00,00,00))) {
HXLINE(5304)			if ((str.indexOf(op,null()) != -1)) {
HXLINE(5306)				int opindex = str.indexOf(op,null());
HXLINE(5308)				if ((opindex != (str.length - 1))) {
HXLINE(5310)					::String firstBit = str.substr(0,opindex);
HXLINE(5311)					::String secondBit = str.substr((opindex + 1),(str.length - (opindex + 1)));
HXLINE(5313)					Float f = ( (Float)(0) );
HXLINE(5316)					int ptIndex = secondBit.indexOf(HX_("pt",04,62,00,00),null());
HXLINE(5317)					bool _hx_tmp;
HXDLIN(5317)					if ((ptIndex != -1)) {
HXLINE(5317)						_hx_tmp = (ptIndex == (secondBit.length - 2));
            					}
            					else {
HXLINE(5317)						_hx_tmp = false;
            					}
HXDLIN(5317)					if (_hx_tmp) {
HXLINE(5319)						::String sansPt = ::StringTools_obj::replace(secondBit,HX_("pt",04,62,00,00),HX_("",00,00,00,00));
HXLINE(5320)						f = ::Std_obj::parseFloat(sansPt);
HXLINE(5321)						hasPoint = true;
            					}
            					else {
HXLINE(5325)						f = ::Std_obj::parseFloat(secondBit);
            					}
HXLINE(5328)					if (::Math_obj::isNaN(f)) {
HXLINE(5330)						f = this->getAssetProperty(1,HX_("",00,00,00,00),secondBit);
            					}
HXLINE(5332)					bool _hx_tmp1;
HXDLIN(5332)					if ((f == 0)) {
HXLINE(5332)						_hx_tmp1 = (secondBit != HX_("0",30,00,00,00));
            					}
            					else {
HXLINE(5332)						_hx_tmp1 = false;
            					}
HXDLIN(5332)					if (_hx_tmp1) {
HXLINE(5334)						return null();
            					}
            					else {
HXLINE(5338)						return ::cpp::VirtualArray_obj::__new(4)->init(0,firstBit)->init(1,op)->init(2,f)->init(3,hasPoint);
            					}
            				}
            			}
            		}
HXLINE(5344)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_getOperation,return )

Float FlxUI_obj::_doOperation(Float value,::String op,Float operand){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5348__doOperation)
HXLINE(5349)		::String _hx_switch_0 = op;
            		if (  (_hx_switch_0==HX_("*",2a,00,00,00)) ){
HXLINE(5358)			return (value * operand);
HXDLIN(5358)			goto _hx_goto_240;
            		}
            		if (  (_hx_switch_0==HX_("+",2b,00,00,00)) ){
HXLINE(5352)			return (value + operand);
HXDLIN(5352)			goto _hx_goto_240;
            		}
            		if (  (_hx_switch_0==HX_("-",2d,00,00,00)) ){
HXLINE(5354)			return (value - operand);
HXDLIN(5354)			goto _hx_goto_240;
            		}
            		if (  (_hx_switch_0==HX_("/",2f,00,00,00)) ){
HXLINE(5356)			return (value / operand);
HXDLIN(5356)			goto _hx_goto_240;
            		}
            		if (  (_hx_switch_0==HX_("^",5e,00,00,00)) ){
HXLINE(5360)			return ::Math_obj::pow(value,operand);
HXDLIN(5360)			goto _hx_goto_240;
            		}
            		_hx_goto_240:;
HXLINE(5362)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_doOperation,return )

Float FlxUI_obj::_getStretch(int index,::String target,::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5366__getStretch)
HXLINE(5367)		::cpp::VirtualArray arr = null();
HXLINE(5369)		::String op = HX_("",00,00,00,00);
HXLINE(5370)		Float operand = ( (Float)(0) );
HXLINE(5371)		bool hasPoint = false;
HXLINE(5373)		arr = this->_getOperation(str);
HXLINE(5375)		if (::hx::IsNotNull( arr )) {
HXLINE(5377)			str = ( (::String)(arr->__get(0)) );
HXLINE(5378)			op = ( (::String)(arr->__get(1)) );
HXLINE(5379)			operand = ( (Float)(arr->__get(2)) );
HXLINE(5380)			hasPoint = ( (bool)(arr->__get(3)) );
HXLINE(5382)			if (hasPoint) {
HXLINE(5384)				::String _hx_switch_0 = target;
            				if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(5389)					operand = (operand * this->_pointY);
HXDLIN(5389)					goto _hx_goto_242;
            				}
            				if (  (_hx_switch_0==HX_("w",77,00,00,00)) ||  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(5387)					operand = (operand * this->_pointX);
HXDLIN(5387)					goto _hx_goto_242;
            				}
            				/* default */{
HXLINE(5391)					operand = (operand * this->_pointY);
            				}
            				_hx_goto_242:;
            			}
            		}
HXLINE(5396)		Float return_val = this->getAssetProperty(index,target,str);
HXLINE(5398)		bool _hx_tmp;
HXDLIN(5398)		if ((return_val != -1)) {
HXLINE(5398)			_hx_tmp = (op != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(5398)			_hx_tmp = false;
            		}
HXDLIN(5398)		if (_hx_tmp) {
HXLINE(5400)			return_val = this->_doOperation(return_val,op,operand);
            		}
HXLINE(5403)		return return_val;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_getStretch,return )

Float FlxUI_obj::getAssetProperty(int index,::String target,::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5407_getAssetProperty)
HXLINE(5408)		::String prop = HX_("",00,00,00,00);
HXLINE(5410)		if ((str.indexOf(HX_(".",2e,00,00,00),null()) != -1)) {
HXLINE(5412)			::Array< ::String > arr = null();
HXLINE(5413)			arr = str.split(HX_(".",2e,00,00,00));
HXLINE(5414)			str = arr->__get(0);
HXLINE(5415)			prop = arr->__get(1);
            		}
HXLINE(5418)		::Dynamic other = this->getAsset(str,null());
HXLINE(5420)		Float return_val = ( (Float)(0) );
HXLINE(5422)		if (::hx::IsNull( other )) {
HXLINE(5424)			::String _hx_switch_0 = str;
            			if (  (_hx_switch_0==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_0==HX_("down",62,f8,6d,42)) ){
HXLINE(5429)				return_val = this->screenHeight();
HXDLIN(5429)				goto _hx_goto_244;
            			}
            			if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(5431)				return_val = ( (Float)(0) );
HXDLIN(5431)				goto _hx_goto_244;
            			}
            			if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(5433)				return_val = ( (Float)(this->screenWidth()) );
HXDLIN(5433)				goto _hx_goto_244;
            			}
            			if (  (_hx_switch_0==HX_("top",95,66,58,00)) ||  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE(5427)				return_val = ( (Float)(0) );
HXDLIN(5427)				goto _hx_goto_244;
            			}
            			/* default */{
HXLINE(5435)				if (::flixel::addons::ui::U_obj::isStrNum(str)) {
HXLINE(5437)					return_val = ::Std_obj::parseFloat(str);
            				}
            				else {
HXLINE(5441)					return_val = ( (Float)(-1) );
            				}
            			}
            			_hx_goto_244:;
            		}
            		else {
HXLINE(5447)			::String _hx_switch_1 = target;
            			if (  (_hx_switch_1==HX_("h",68,00,00,00)) ||  (_hx_switch_1==HX_("height",e7,07,4c,02)) ){
HXLINE(5477)				if ((prop == HX_("",00,00,00,00))) {
HXLINE(5479)					if ((index == 0)) {
HXLINE(5481)						Float other1 = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(5481)						return_val = (other1 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other));
            					}
HXLINE(5483)					if ((index == 1)) {
HXLINE(5485)						return_val = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
            					}
            				}
            				else {
HXLINE(5490)					::String _hx_switch_2 = prop;
            					if (  (_hx_switch_2==HX_("center",d5,25,db,05)) ){
HXLINE(5496)						Float other2 = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(5496)						return_val = (other2 + (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other) / ( (Float)(2) )));
HXDLIN(5496)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_2==HX_("down",62,f8,6d,42)) ){
HXLINE(5493)						Float other3 = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(5493)						return_val = (other3 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other));
HXDLIN(5493)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("halfheight",da,f9,da,c0)) ){
HXLINE(5499)						return_val = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other) / ( (Float)(2) ));
HXDLIN(5499)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("halfwidth",73,83,07,7c)) ){
HXLINE(5500)						return_val = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other) / ( (Float)(2) ));
HXDLIN(5500)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("height",e7,07,4c,02)) ){
HXLINE(5497)						return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other);
HXDLIN(5497)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("right",dc,0b,64,e9)) ){
HXLINE(5494)						Float other4 = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(5494)						return_val = (other4 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other));
HXDLIN(5494)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("width",06,b6,62,ca)) ){
HXLINE(5498)						return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other);
HXDLIN(5498)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("left",07,08,b0,47)) ||  (_hx_switch_2==HX_("x",78,00,00,00)) ){
HXLINE(5495)						return_val = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(5495)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("top",95,66,58,00)) ||  (_hx_switch_2==HX_("up",5b,66,00,00)) ||  (_hx_switch_2==HX_("y",79,00,00,00)) ){
HXLINE(5492)						return_val = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(5492)						goto _hx_goto_247;
            					}
            					_hx_goto_247:;
            				}
HXLINE(5477)				goto _hx_goto_246;
            			}
            			if (  (_hx_switch_1==HX_("w",77,00,00,00)) ||  (_hx_switch_1==HX_("width",06,b6,62,ca)) ){
HXLINE(5450)				if ((prop == HX_("",00,00,00,00))) {
HXLINE(5452)					if ((index == 0)) {
HXLINE(5454)						Float other5 = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(5454)						return_val = (other5 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other));
            					}
HXLINE(5456)					if ((index == 1)) {
HXLINE(5458)						return_val = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
            					}
            				}
            				else {
HXLINE(5463)					::String _hx_switch_3 = prop;
            					if (  (_hx_switch_3==HX_("center",d5,25,db,05)) ){
HXLINE(5469)						Float other6 = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(5469)						return_val = (other6 + (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other) / ( (Float)(2) )));
HXDLIN(5469)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_3==HX_("down",62,f8,6d,42)) ){
HXLINE(5466)						Float other7 = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(5466)						return_val = (other7 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other));
HXDLIN(5466)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("halfheight",da,f9,da,c0)) ){
HXLINE(5472)						return_val = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other) / ( (Float)(2) ));
HXDLIN(5472)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("halfwidth",73,83,07,7c)) ){
HXLINE(5473)						return_val = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other) / ( (Float)(2) ));
HXDLIN(5473)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("height",e7,07,4c,02)) ){
HXLINE(5471)						return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other);
HXDLIN(5471)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("right",dc,0b,64,e9)) ){
HXLINE(5467)						Float other8 = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(5467)						return_val = (other8 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other));
HXDLIN(5467)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("width",06,b6,62,ca)) ){
HXLINE(5470)						return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other);
HXDLIN(5470)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("left",07,08,b0,47)) ||  (_hx_switch_3==HX_("x",78,00,00,00)) ){
HXLINE(5468)						return_val = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(5468)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("top",95,66,58,00)) ||  (_hx_switch_3==HX_("up",5b,66,00,00)) ||  (_hx_switch_3==HX_("y",79,00,00,00)) ){
HXLINE(5465)						return_val = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(5465)						goto _hx_goto_248;
            					}
            					_hx_goto_248:;
            				}
HXLINE(5450)				goto _hx_goto_246;
            			}
            			/* default */{
HXLINE(5504)				::String _hx_switch_4 = prop;
            				if (  (_hx_switch_4==HX_("centerx",03,f5,e5,19)) ){
HXLINE(5511)					Float other9 = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(5511)					return_val = (other9 + (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other) / ( (Float)(2) )));
HXDLIN(5511)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("centery",04,f5,e5,19)) ){
HXLINE(5510)					Float other10 = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(5510)					return_val = (other10 + (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other) / ( (Float)(2) )));
HXDLIN(5510)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_4==HX_("down",62,f8,6d,42)) ){
HXLINE(5507)					Float other11 = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(5507)					return_val = (other11 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other));
HXDLIN(5507)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("halfheight",da,f9,da,c0)) ){
HXLINE(5514)					return_val = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other) / ( (Float)(2) ));
HXDLIN(5514)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("halfwidth",73,83,07,7c)) ){
HXLINE(5515)					return_val = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other) / ( (Float)(2) ));
HXDLIN(5515)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("height",e7,07,4c,02)) ){
HXLINE(5512)					return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other);
HXDLIN(5512)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("right",dc,0b,64,e9)) ){
HXLINE(5508)					Float other12 = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(5508)					return_val = (other12 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other));
HXDLIN(5508)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("width",06,b6,62,ca)) ){
HXLINE(5513)					return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other);
HXDLIN(5513)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("left",07,08,b0,47)) ||  (_hx_switch_4==HX_("x",78,00,00,00)) ){
HXLINE(5509)					return_val = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(5509)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("top",95,66,58,00)) ||  (_hx_switch_4==HX_("up",5b,66,00,00)) ||  (_hx_switch_4==HX_("y",79,00,00,00)) ){
HXLINE(5506)					return_val = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(5506)					goto _hx_goto_245;
            				}
            				_hx_goto_245:;
            			}
            			_hx_goto_246:;
            		}
HXLINE(5519)		return return_val;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,getAssetProperty,return )

void FlxUI_obj::_loadCursor( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5524__loadCursor)
HXDLIN(5524)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("list",5e,1c,b3,47))) {
HXLINE(5526)			if (::hx::IsNull( this->cursorLists )) {
HXLINE(5528)				this->cursorLists = ::Array_obj< ::Dynamic>::__new(0);
            			}
HXLINE(5530)			{
HXLINE(5530)				int _g = 0;
HXDLIN(5530)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("list",5e,1c,b3,47));
HXDLIN(5530)				while((_g < _g1->length)){
HXLINE(5530)					 ::Xml lNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(5530)					_g = (_g + 1);
HXLINE(5532)					::String ids = ::flixel::addons::ui::U_obj::xml_str(lNode,HX_("ids",38,04,50,00),null(),null());
HXLINE(5533)					::Array< ::String > arr = ids.split(HX_(",",2c,00,00,00));
HXLINE(5534)					bool _hx_tmp;
HXDLIN(5534)					if (::hx::IsNotNull( arr )) {
HXLINE(5534)						_hx_tmp = (arr->length > 0);
            					}
            					else {
HXLINE(5534)						_hx_tmp = false;
            					}
HXDLIN(5534)					if (_hx_tmp) {
HXLINE(5536)						::Array< ::Dynamic> list = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(5537)						{
HXLINE(5537)							int _g2 = 0;
HXDLIN(5537)							while((_g2 < arr->length)){
HXLINE(5537)								::String str = arr->__get(_g2);
HXDLIN(5537)								_g2 = (_g2 + 1);
HXLINE(5539)								::Dynamic widget = this->getAsset(str,null());
HXLINE(5540)								if (::hx::IsNotNull( widget )) {
HXLINE(5542)									list->push(widget);
            								}
            							}
            						}
HXLINE(5545)						this->cursorLists->push(list);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadCursor,(void))

void FlxUI_obj::_loadPosition( ::Xml data,::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5552__loadPosition)
HXLINE(5553)		Float X = this->_loadWidth(data,( (Float)(0) ),HX_("x",78,00,00,00),null());
HXLINE(5554)		Float Y = this->_loadHeight(data,( (Float)(0) ),HX_("y",79,00,00,00),null());
HXLINE(5559)		bool ctrX = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("center_x",4e,58,50,8f),null());
HXLINE(5560)		bool ctrY = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("center_y",4f,58,50,8f),null());
HXLINE(5562)		::String center_on = ::flixel::addons::ui::U_obj::xml_str(data,HX_("center_on",89,e4,fc,d6),null(),null());
HXLINE(5563)		::String center_on_x = ::flixel::addons::ui::U_obj::xml_str(data,HX_("center_on_x",02,2c,66,3b),null(),null());
HXLINE(5564)		::String center_on_y = ::flixel::addons::ui::U_obj::xml_str(data,HX_("center_on_y",03,2c,66,3b),null(),null());
HXLINE(5566)		::String anchor_x_str = HX_("",00,00,00,00);
HXLINE(5567)		::String anchor_y_str = HX_("",00,00,00,00);
HXLINE(5568)		Float anchor_x = ( (Float)(0) );
HXLINE(5569)		Float anchor_y = ( (Float)(0) );
HXLINE(5570)		::String anchor_x_flush = HX_("",00,00,00,00);
HXLINE(5571)		::String anchor_y_flush = HX_("",00,00,00,00);
HXLINE(5573)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60))) {
HXLINE(5575)			anchor_x_str = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("x",78,00,00,00),null(),null());
HXLINE(5576)			anchor_y_str = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("y",79,00,00,00),null(),null());
HXLINE(5578)			 ::flixel::addons::ui::Rounding rounding = this->getRound(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),null());
HXLINE(5580)			anchor_x = this->_getAnchorPos(thing,HX_("x",78,00,00,00),anchor_x_str);
HXLINE(5581)			anchor_y = this->_getAnchorPos(thing,HX_("y",79,00,00,00),anchor_y_str);
HXLINE(5583)			anchor_x = this->doRound(anchor_x,rounding);
HXLINE(5584)			anchor_y = this->doRound(anchor_y,rounding);
HXLINE(5586)			anchor_x_flush = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("x-flush",ef,49,ba,7e),true,null());
HXLINE(5587)			anchor_y_flush = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("y-flush",b0,c0,4f,a8),true,null());
            		}
HXLINE(5591)		bool _hx_tmp;
HXDLIN(5591)		if ((anchor_x_str == HX_("",00,00,00,00))) {
HXLINE(5591)			_hx_tmp = (anchor_y_str != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(5591)			_hx_tmp = true;
            		}
HXDLIN(5591)		if (_hx_tmp) {
HXLINE(5593)			::String _hx_switch_0 = anchor_x_flush;
            			if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE(5599)				anchor_x = (anchor_x - (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing) / ( (Float)(2) )));
HXDLIN(5599)				goto _hx_goto_253;
            			}
            			if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(5595)				goto _hx_goto_253;
            			}
            			if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(5597)				anchor_x = (anchor_x - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing));
HXDLIN(5597)				goto _hx_goto_253;
            			}
            			_hx_goto_253:;
HXLINE(5601)			::String _hx_switch_1 = anchor_y_flush;
            			if (  (_hx_switch_1==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_1==HX_("down",62,f8,6d,42)) ){
HXLINE(5605)				anchor_y = (anchor_y - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing));
HXDLIN(5605)				goto _hx_goto_254;
            			}
            			if (  (_hx_switch_1==HX_("center",d5,25,db,05)) ){
HXLINE(5607)				anchor_y = (anchor_y - (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing) / ( (Float)(2) )));
HXDLIN(5607)				goto _hx_goto_254;
            			}
            			if (  (_hx_switch_1==HX_("top",95,66,58,00)) ||  (_hx_switch_1==HX_("up",5b,66,00,00)) ){
HXLINE(5603)				goto _hx_goto_254;
            			}
            			_hx_goto_254:;
HXLINE(5610)			if ((anchor_x_str != HX_("",00,00,00,00))) {
HXLINE(5612)				::flixel::IFlxSprite_obj::set_x(thing,anchor_x);
            			}
HXLINE(5614)			if ((anchor_y_str != HX_("",00,00,00,00))) {
HXLINE(5616)				::flixel::IFlxSprite_obj::set_y(thing,anchor_y);
            			}
            		}
HXLINE(5621)		bool _hx_tmp1;
HXDLIN(5621)		if (!(ctrX)) {
HXLINE(5621)			_hx_tmp1 = ctrY;
            		}
            		else {
HXLINE(5621)			_hx_tmp1 = true;
            		}
HXDLIN(5621)		if (_hx_tmp1) {
HXLINE(5623)			if (ctrX) {
HXLINE(5623)				int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN(5623)				::flixel::IFlxSprite_obj::set_x(thing,((( (Float)(_hx_tmp2) ) - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing)) / ( (Float)(2) )));
            			}
HXDLIN(5623)			if (ctrY) {
HXLINE(5623)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(5623)				::flixel::IFlxSprite_obj::set_y(thing,((( (Float)(_hx_tmp3) ) - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing)) / ( (Float)(2) )));
            			}
            		}
HXLINE(5627)		if ((center_on != HX_("",00,00,00,00))) {
HXLINE(5629)			::Dynamic other = this->getAsset(center_on,null());
HXLINE(5630)			if (::hx::IsNotNull( other )) {
HXLINE(5632)				 ::flixel::FlxObject fb1 = ::hx::TCast<  ::flixel::FlxObject >::cast(other);
HXDLIN(5632)				 ::flixel::FlxObject fb2 = ::hx::TCast<  ::flixel::FlxObject >::cast(thing);
HXDLIN(5632)				{
HXLINE(5632)					Float fb11 = fb1->x;
HXDLIN(5632)					Float _hx_tmp4 = fb1->get_width();
HXDLIN(5632)					fb2->set_x((fb11 + ((_hx_tmp4 - fb2->get_width()) / ( (Float)(2) ))));
            				}
HXDLIN(5632)				{
HXLINE(5632)					Float fb12 = fb1->y;
HXDLIN(5632)					Float _hx_tmp5 = fb1->get_height();
HXDLIN(5632)					fb2->set_y((fb12 + ((_hx_tmp5 - fb2->get_height()) / ( (Float)(2) ))));
            				}
            			}
            		}
            		else {
HXLINE(5637)			if ((center_on_x != HX_("",00,00,00,00))) {
HXLINE(5639)				::Dynamic other1 = this->getAsset(center_on_x,null());
HXLINE(5640)				if (::hx::IsNotNull( other1 )) {
HXLINE(5642)					 ::flixel::FlxObject fb13 = ::hx::TCast<  ::flixel::FlxObject >::cast(other1);
HXDLIN(5642)					 ::flixel::FlxObject fb21 = ::hx::TCast<  ::flixel::FlxObject >::cast(thing);
HXDLIN(5642)					Float fb14 = fb13->x;
HXDLIN(5642)					Float _hx_tmp6 = fb13->get_width();
HXDLIN(5642)					fb21->set_x((fb14 + ((_hx_tmp6 - fb21->get_width()) / ( (Float)(2) ))));
            				}
            			}
HXLINE(5645)			if ((center_on_y != HX_("",00,00,00,00))) {
HXLINE(5647)				::Dynamic other2 = this->getAsset(center_on_y,null());
HXLINE(5648)				if (::hx::IsNotNull( other2 )) {
HXLINE(5650)					 ::flixel::FlxObject fb15 = ::hx::TCast<  ::flixel::FlxObject >::cast(other2);
HXDLIN(5650)					 ::flixel::FlxObject fb22 = ::hx::TCast<  ::flixel::FlxObject >::cast(thing);
HXDLIN(5650)					Float fb16 = fb15->y;
HXDLIN(5650)					Float _hx_tmp7 = fb15->get_height();
HXDLIN(5650)					fb22->set_y((fb16 + ((_hx_tmp7 - fb22->get_height()) / ( (Float)(2) ))));
            				}
            			}
            		}
HXLINE(5656)		{
HXLINE(5656)			::flixel::IFlxSprite_obj::set_x(thing, ::Dynamic((thing->__Field(HX_("x",78,00,00,00),::hx::paccDynamic) + X)));
HXDLIN(5656)			::flixel::IFlxSprite_obj::set_y(thing, ::Dynamic((thing->__Field(HX_("y",79,00,00,00),::hx::paccDynamic) + Y)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadPosition,(void))

 ::flixel::addons::ui::BorderDef FlxUI_obj::_loadBorder( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5660__loadBorder)
HXLINE(5661)		 ::flixel::addons::ui::BorderDef borderDef = ::flixel::addons::ui::BorderDef_obj::fromXML(data);
HXLINE(5663)		 ::flixel::addons::ui::Rounding round = this->getRound(data,HX_("floor",cc,d1,96,02));
HXLINE(5664)		Float dataSize = this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(data,HX_("border_size",34,18,b0,f8),null(),null()),1);
HXLINE(5665)		int border_size = ::Std_obj::_hx_int(this->doRound(dataSize,round));
HXLINE(5667)		borderDef->size = ( (Float)(border_size) );
HXLINE(5669)		return borderDef;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadBorder,return )

int FlxUI_obj::_loadColor( ::Xml data,::String __o_colorName,::hx::Null< int >  __o__default){
            		::String colorName = __o_colorName;
            		if (::hx::IsNull(__o_colorName)) colorName = HX_("color",63,71,5c,4a);
            		int _default = __o__default.Default(-1);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5673__loadColor)
HXLINE(5674)		::String colorStr = ::flixel::addons::ui::U_obj::xml_str(data,colorName,null(),null());
HXLINE(5675)		bool _hx_tmp;
HXDLIN(5675)		if ((colorStr == HX_("",00,00,00,00))) {
HXLINE(5675)			 ::Xml _this = data;
HXDLIN(5675)			if ((_this->nodeType != ::Xml_obj::Element)) {
HXLINE(5675)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            			}
HXDLIN(5675)			_hx_tmp = (_this->nodeName == colorName);
            		}
            		else {
HXLINE(5675)			_hx_tmp = false;
            		}
HXDLIN(5675)		if (_hx_tmp) {
HXLINE(5677)			colorStr = ::flixel::addons::ui::U_obj::xml_str(data,HX_("value",71,7f,b8,31),null(),null());
            		}
HXLINE(5679)		int color = _default;
HXLINE(5680)		if ((colorStr != HX_("",00,00,00,00))) {
HXLINE(5682)			 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(colorStr);
HXDLIN(5682)			if (::hx::IsNull( return_val )) {
HXLINE(5682)				HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + colorStr));
            			}
HXDLIN(5682)			color = ( (int)(return_val) );
            		}
HXLINE(5684)		return color;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_loadColor,return )

 ::flixel::addons::ui::FontDef FlxUI_obj::_loadFontDef( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5688__loadFontDef)
HXLINE(5689)		 ::flixel::addons::ui::FontDef fd = ::flixel::addons::ui::FontDef_obj::fromXML(data);
HXLINE(5690)		int fontSize = ::Std_obj::_hx_int(this->_loadHeight(data,8,HX_("size",c1,a0,53,4c),null()));
HXLINE(5691)		fd->format->size = ::flixel::addons::ui::FlxUI_obj::fontSize(fd->file,fontSize);
HXLINE(5692)		fd->set_size(fontSize);
HXLINE(5693)		return fd;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadFontDef,return )

::String FlxUI_obj::_loadFontFace( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5697__loadFontFace)
HXLINE(5698)		::String fontFace = ::flixel::addons::ui::U_obj::xml_str(data,HX_("font",cf,5d,c0,43),null(),null());
HXLINE(5699)		::String fontStyle = ::flixel::addons::ui::U_obj::xml_str(data,HX_("style",31,a5,1d,84),null(),null());
HXLINE(5700)		::String the_font = null();
HXLINE(5701)		if ((fontFace != HX_("",00,00,00,00))) {
HXLINE(5703)			the_font = ::flixel::addons::ui::FlxUI_obj::font(fontFace,fontStyle,null());
            		}
HXLINE(5705)		return the_font;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadFontFace,return )

void FlxUI_obj::_onFinishLoad(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5710__onFinishLoad)
HXDLIN(5710)		if (::hx::IsNotNull( this->_ptr )) {
HXLINE(5712)			::flixel::addons::ui::interfaces::IEventGetter_obj::getEvent(this->_ptr,HX_("finish_load",d2,68,a0,8e),::hx::ObjectPtr<OBJ_>(this),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,_onFinishLoad,(void))

::String FlxUI_obj::getText(::String flag,::String __o_context,::hx::Null< bool >  __o_safe,::String __o_code){
            		::String context = __o_context;
            		if (::hx::IsNull(__o_context)) context = HX_("data",2a,56,63,42);
            		bool safe = __o_safe.Default(true);
            		::String code = __o_code;
            		if (::hx::IsNull(__o_code)) code = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5718_getText)
HXLINE(5719)		::String str = HX_("",00,00,00,00);
HXLINE(5720)		if (::hx::IsNotNull( this->_ptr_tongue )) {
HXLINE(5722)			str = ::flixel::addons::ui::interfaces::IFireTongue_obj::get(this->_ptr_tongue,flag,context,safe);
HXLINE(5723)			return this->formatFromCode(str,code);
            		}
            		else {
HXLINE(5725)			if (::hx::IsNotNull( this->getTextFallback )) {
HXLINE(5727)				str = ( (::String)(this->getTextFallback(flag,context,safe)) );
HXLINE(5728)				return this->formatFromCode(str,code);
            			}
            		}
HXLINE(5731)		return flag;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,getText,return )

::String FlxUI_obj::formatFromCode(::String str,::String code){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5735_formatFromCode)
HXLINE(5736)		::String _hx_switch_0 = code;
            		if (  (_hx_switch_0==HX_("fu",4f,59,00,00)) ){
HXLINE(5743)			return ::flixel::addons::ui::U_obj::FU(str);
HXDLIN(5743)			goto _hx_goto_262;
            		}
            		if (  (_hx_switch_0==HX_("fu_",30,cc,4d,00)) ){
HXLINE(5745)			return ::flixel::addons::ui::U_obj::FU_(str);
HXDLIN(5745)			goto _hx_goto_262;
            		}
            		if (  (_hx_switch_0==HX_("l",6c,00,00,00)) ){
HXLINE(5741)			return str.toLowerCase();
HXDLIN(5741)			goto _hx_goto_262;
            		}
            		if (  (_hx_switch_0==HX_("u",75,00,00,00)) ){
HXLINE(5739)			return str.toUpperCase();
HXDLIN(5739)			goto _hx_goto_262;
            		}
            		_hx_goto_262:;
HXLINE(5747)		return str;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,formatFromCode,return )

 ::flixel::text::FlxText FlxUI_obj::formatButtonText( ::Xml data, ::Dynamic button){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5820_formatButtonText)
HXLINE(5821)		bool _hx_tmp;
HXDLIN(5821)		if (::hx::IsNotNull( data )) {
HXLINE(5821)			_hx_tmp = ::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("text",ad,cc,f9,4c));
            		}
            		else {
HXLINE(5821)			_hx_tmp = false;
            		}
HXDLIN(5821)		if (_hx_tmp) {
HXLINE(5823)			 ::Xml textNode = ::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("text",ad,cc,f9,4c));
HXLINE(5824)			::String use_def = ::flixel::addons::ui::U_obj::xml_str(textNode,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(5825)			 ::Xml text_def = null();
HXLINE(5827)			if ((use_def != HX_("",00,00,00,00))) {
HXLINE(5829)				text_def = this->getDefinition(use_def,null());
            			}
HXLINE(5832)			 ::Xml info = ::flixel::addons::ui::FlxUI_obj::consolidateData(textNode,text_def,null());
HXLINE(5834)			::String the_font = this->_loadFontFace(info);
HXLINE(5835)			int size = ::Std_obj::_hx_int(this->_loadHeight(info,8,HX_("size",c1,a0,53,4c),HX_("floor",cc,d1,96,02)));
HXLINE(5836)			int color = this->_loadColor(info,null(),null());
HXLINE(5838)			Float labelWidth = ::flixel::addons::ui::U_obj::xml_f(info,HX_("width",06,b6,62,ca),null());
HXLINE(5840)			 ::flixel::addons::ui::BorderDef border = this->_loadBorder(info);
HXLINE(5842)			::String align = ::flixel::addons::ui::U_obj::xml_str(info,HX_("align",c5,56,91,21),true,null());
HXLINE(5843)			if ((align == HX_("",00,00,00,00))) {
HXLINE(5845)				align = null();
            			}
HXLINE(5848)			 ::flixel::text::FlxText the_label = null();
HXLINE(5849)			 ::flixel::addons::ui::FlxUIButton fb = null();
HXLINE(5850)			 ::flixel::addons::ui::FlxUISpriteButton fsb = null();
HXLINE(5851)			::Dynamic ifb = null();
HXLINE(5853)			if ((::Std_obj::isOfType(button,::hx::ClassOf< ::flixel::addons::ui::FlxUICheckBox >()) == false)) {
HXLINE(5855)				ifb = button;
HXLINE(5856)				bool _hx_tmp1;
HXDLIN(5856)				if ((align != HX_("",00,00,00,00))) {
HXLINE(5856)					_hx_tmp1 = ::hx::IsNull( align );
            				}
            				else {
HXLINE(5856)					_hx_tmp1 = true;
            				}
HXDLIN(5856)				if (_hx_tmp1) {
HXLINE(5858)					align = HX_("center",d5,25,db,05);
            				}
            			}
            			else {
HXLINE(5863)				 ::flixel::addons::ui::FlxUICheckBox cb = ( ( ::flixel::addons::ui::FlxUICheckBox)(button) );
HXLINE(5864)				ifb = cb->button;
HXLINE(5865)				align = HX_("left",07,08,b0,47);
            			}
HXLINE(5868)			if (::hx::IsNotNull( ifb )) {
HXLINE(5870)				if (::Std_obj::isOfType(ifb,::hx::ClassOf< ::flixel::addons::ui::FlxUIButton >())) {
HXLINE(5872)					fb = ( ( ::flixel::addons::ui::FlxUIButton)(ifb) );
HXLINE(5873)					the_label = ( ( ::flixel::text::FlxText)(fb->label) );
            				}
            				else {
HXLINE(5875)					if (::Std_obj::isOfType(ifb,::hx::ClassOf< ::flixel::addons::ui::FlxUISpriteButton >())) {
HXLINE(5877)						fsb = ( ( ::flixel::addons::ui::FlxUISpriteButton)(ifb) );
HXLINE(5878)						if (::Std_obj::isOfType(fsb->label,::hx::ClassOf< ::flixel::text::FlxText >())) {
HXLINE(5880)							the_label = ( ( ::flixel::text::FlxText)(fsb->label) );
            						}
            						else {
HXLINE(5882)							if (::Std_obj::isOfType(fsb->label,::hx::ClassOf< ::flixel::group::FlxTypedSpriteGroup >())) {
HXLINE(5884)								 ::flixel::group::FlxTypedSpriteGroup fsg = ( ( ::flixel::group::FlxTypedSpriteGroup)(fsb->label) );
HXLINE(5885)								{
HXLINE(5885)									int _g = 0;
HXDLIN(5885)									::Array< ::Dynamic> _g1 = fsg->group->members;
HXDLIN(5885)									while((_g < _g1->length)){
HXLINE(5885)										 ::flixel::FlxSprite fs = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(5885)										_g = (_g + 1);
HXLINE(5887)										if (::Std_obj::isOfType(fs,::hx::ClassOf< ::flixel::text::FlxText >())) {
HXLINE(5889)											the_label = ( ( ::flixel::text::FlxText)(fs) );
HXLINE(5890)											goto _hx_goto_264;
            										}
            									}
            									_hx_goto_264:;
            								}
            							}
            						}
            					}
            				}
HXLINE(5896)				ifb->__SetField(HX_("up_color",3f,d5,b5,9b),color,::hx::paccDynamic);
HXLINE(5897)				ifb->__SetField(HX_("down_color",86,26,b3,4e),0,::hx::paccDynamic);
HXLINE(5898)				ifb->__SetField(HX_("over_color",f8,00,4a,f7),0,::hx::paccDynamic);
            			}
HXLINE(5901)			if (::hx::IsNotNull( the_label )) {
HXLINE(5903)				if ((labelWidth != 0)) {
HXLINE(5905)					the_label->set_width(labelWidth);
HXLINE(5906)					the_label->resetHelpers();
            				}
HXLINE(5909)				if (::hx::IsNotNull( fb )) {
HXLINE(5911)					fb->setLabelFormat(the_font,size,color,align,null(),null(),null());
            				}
            				else {
HXLINE(5915)					the_label->setFormat(the_font,size,color,align,null(),null(),null());
            				}
HXLINE(5918)				the_label->set_borderStyle(border->style);
HXLINE(5919)				the_label->set_borderColor(border->color);
HXLINE(5920)				the_label->set_borderSize(border->size);
HXLINE(5921)				the_label->set_borderQuality(border->quality);
HXLINE(5923)				if (::Std_obj::isOfType(the_label,::hx::ClassOf< ::flixel::addons::ui::FlxUIText >())) {
HXLINE(5925)					 ::flixel::addons::ui::FlxUIText ftu = ( ( ::flixel::addons::ui::FlxUIText)(the_label) );
HXLINE(5926)					ftu->drawFrame(null());
            				}
HXLINE(5929)				if (::hx::IsNotNull( fb )) {
HXLINE(5931)					fb->autoCenterLabel();
            				}
HXLINE(5933)				if (::hx::IsNotNull( fsb )) {
HXLINE(5935)					fsb->autoCenterLabel();
            				}
            			}
HXLINE(5939)			{
HXLINE(5939)				int _g2 = 0;
HXDLIN(5939)				::Array< ::Dynamic> _g3 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(info,HX_("color",63,71,5c,4a));
HXDLIN(5939)				while((_g2 < _g3->length)){
HXLINE(5939)					 ::Xml textColorNode = _g3->__get(_g2).StaticCast<  ::Xml >();
HXDLIN(5939)					_g2 = (_g2 + 1);
HXLINE(5941)					int color1 = this->_loadColor(textColorNode,null(),null());
HXLINE(5942)					bool vis = ::flixel::addons::ui::U_obj::xml_bool(textColorNode,HX_("visible",72,78,24,a3),true);
HXLINE(5943)					::String state_name = ::flixel::addons::ui::U_obj::xml_name(textColorNode);
HXLINE(5944)					bool toggle = ::flixel::addons::ui::U_obj::xml_bool(textColorNode,HX_("toggle",94,bf,43,8f),null());
HXLINE(5945)					::String _hx_switch_0 = state_name;
            					if (  (_hx_switch_0==HX_("active",c6,41,46,16)) ||  (_hx_switch_0==HX_("hilight",35,b2,2d,55)) ||  (_hx_switch_0==HX_("hover",bc,e5,64,2b)) ||  (_hx_switch_0==HX_("over",54,91,b8,49)) ){
HXLINE(5959)						if (!(toggle)) {
HXLINE(5961)							ifb->__SetField(HX_("over_color",f8,00,4a,f7),color1,::hx::paccDynamic);
HXLINE(5962)							ifb->__SetField(HX_("over_visible",47,d7,44,92),vis,::hx::paccDynamic);
            						}
            						else {
HXLINE(5966)							ifb->__SetField(HX_("over_toggle_color",43,1c,98,aa),color1,::hx::paccDynamic);
HXLINE(5967)							ifb->__SetField(HX_("over_toggle_visible",52,9b,c8,49),vis,::hx::paccDynamic);
            						}
HXLINE(5959)						goto _hx_goto_266;
            					}
            					if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("inactive",6b,17,30,6a)) ||  (_hx_switch_0==HX_("normal",27,72,69,30)) ||  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE(5948)						if (!(toggle)) {
HXLINE(5950)							ifb->__SetField(HX_("up_color",3f,d5,b5,9b),color1,::hx::paccDynamic);
HXLINE(5951)							ifb->__SetField(HX_("up_visible",4e,8b,83,08),vis,::hx::paccDynamic);
            						}
            						else {
HXLINE(5955)							ifb->__SetField(HX_("up_toggle_color",dc,6e,0c,dd),color1,::hx::paccDynamic);
HXLINE(5956)							ifb->__SetField(HX_("up_toggle_visible",2b,86,e9,3f),vis,::hx::paccDynamic);
            						}
HXLINE(5948)						goto _hx_goto_266;
            					}
            					if (  (_hx_switch_0==HX_("down",62,f8,6d,42)) ||  (_hx_switch_0==HX_("pressed",a2,d2,e6,39)) ||  (_hx_switch_0==HX_("pushed",b9,14,2d,72)) ){
HXLINE(5970)						if (!(toggle)) {
HXLINE(5972)							ifb->__SetField(HX_("down_color",86,26,b3,4e),color1,::hx::paccDynamic);
HXLINE(5973)							ifb->__SetField(HX_("down_visible",55,fc,6c,72),vis,::hx::paccDynamic);
            						}
            						else {
HXLINE(5977)							ifb->__SetField(HX_("down_toggle_color",75,e4,c8,06),color1,::hx::paccDynamic);
HXLINE(5978)							ifb->__SetField(HX_("down_toggle_visible",04,54,e1,a9),vis,::hx::paccDynamic);
            						}
HXLINE(5970)						goto _hx_goto_266;
            					}
            					_hx_goto_266:;
            				}
            			}
HXLINE(5983)			if (::hx::IsEq( ifb->__Field(HX_("over_color",f8,00,4a,f7),::hx::paccDynamic),0 )) {
HXLINE(5985)				ifb->__SetField(HX_("over_color",f8,00,4a,f7),ifb->__Field(HX_("up_color",3f,d5,b5,9b),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE(5987)			if (::hx::IsEq( ifb->__Field(HX_("down_color",86,26,b3,4e),::hx::paccDynamic),0 )) {
HXLINE(5989)				ifb->__SetField(HX_("down_color",86,26,b3,4e),ifb->__Field(HX_("over_color",f8,00,4a,f7),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE(5993)			if (::hx::IsEq( ifb->__Field(HX_("up_toggle_color",dc,6e,0c,dd),::hx::paccDynamic),0 )) {
HXLINE(5995)				ifb->__SetField(HX_("up_toggle_color",dc,6e,0c,dd),ifb->__Field(HX_("up_color",3f,d5,b5,9b),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE(5997)			if (::hx::IsEq( ifb->__Field(HX_("over_toggle_color",43,1c,98,aa),::hx::paccDynamic),0 )) {
HXLINE(5999)				ifb->__SetField(HX_("over_toggle_color",43,1c,98,aa),ifb->__Field(HX_("over_color",f8,00,4a,f7),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE(6001)			if (::hx::IsEq( ifb->__Field(HX_("down_toggle_color",75,e4,c8,06),::hx::paccDynamic),0 )) {
HXLINE(6003)				ifb->__SetField(HX_("down_toggle_color",75,e4,c8,06),ifb->__Field(HX_("down_color",86,26,b3,4e),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE(6006)			if (::hx::IsNotNull( the_label )) {
HXLINE(6008)				the_label->set_visible(( (bool)(ifb->__Field(HX_("up_visible",4e,8b,83,08),::hx::paccDynamic)) ));
HXLINE(6009)				the_label->set_color(( (int)(ifb->__Field(HX_("up_color",3f,d5,b5,9b),::hx::paccDynamic)) ));
            			}
HXLINE(6011)			return the_label;
            		}
HXLINE(6013)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,formatButtonText,return )

void FlxUI_obj::event(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_157_event)
HXLINE( 158)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXLINE( 160)		if (::hx::IsNotNull( currState )) {
HXLINE( 162)			::flixel::addons::ui::interfaces::IEventGetter_obj::getEvent(currState,name,sender,data,params);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,event,(void))

::String FlxUI_obj::fontStr(::String str,::String __o_style){
            		::String style = __o_style;
            		if (::hx::IsNull(__o_style)) style = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_178_fontStr)
HXLINE( 179)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXDLIN( 179)		::Dynamic tongue =  ::Dynamic(currState->__Field(HX_("_tongue",63,57,5b,02),::hx::paccDynamic));
HXDLIN( 179)		::Dynamic t;
HXDLIN( 179)		if (::hx::IsNotNull( tongue )) {
HXLINE( 179)			t = tongue;
            		}
            		else {
HXLINE( 179)			t = null();
            		}
HXDLIN( 179)		::Dynamic t1 = t;
HXLINE( 180)		if (::hx::IsNotNull( t1 )) {
HXLINE( 182)			str = ::flixel::addons::ui::interfaces::IFireTongue_obj::getFont(t1,str);
            		}
HXLINE( 184)		::String style1 = style;
HXDLIN( 184)		if (::hx::IsNull( style1 )) {
HXLINE( 184)			style1 = HX_("",00,00,00,00);
            		}
HXDLIN( 184)		::String style2 = style1;
HXDLIN( 184)		if (::hx::IsNull( style2 )) {
HXLINE( 184)			style2 = HX_("",00,00,00,00);
            		}
HXDLIN( 184)		style2 = style2.toLowerCase();
HXDLIN( 184)		::String suffix = HX_("",00,00,00,00);
HXDLIN( 184)		::String _hx_switch_0 = style2;
            		if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("none",b8,12,0a,49)) ||  (_hx_switch_0==HX_("normal",27,72,69,30)) ||  (_hx_switch_0==HX_("regular",5c,52,88,82)) ){
HXLINE( 184)			suffix = HX_("",00,00,00,00);
HXDLIN( 184)			goto _hx_goto_269;
            		}
            		if (  (_hx_switch_0==HX_("b",62,00,00,00)) ||  (_hx_switch_0==HX_("bold",85,81,1b,41)) ){
HXLINE( 184)			suffix = HX_("b",62,00,00,00);
HXDLIN( 184)			goto _hx_goto_269;
            		}
            		if (  (_hx_switch_0==HX_("i",69,00,00,00)) ||  (_hx_switch_0==HX_("italic",f0,2e,64,06)) ){
HXLINE( 184)			suffix = HX_("i",69,00,00,00);
HXDLIN( 184)			goto _hx_goto_269;
            		}
            		if (  (_hx_switch_0==HX_("bi",c7,55,00,00)) ||  (_hx_switch_0==HX_("bold-italic",f8,f7,a5,60)) ||  (_hx_switch_0==HX_("boldi",44,d3,f5,b6)) ||  (_hx_switch_0==HX_("bolditalic",35,22,3d,79)) ||  (_hx_switch_0==HX_("ib",d9,5b,00,00)) ||  (_hx_switch_0==HX_("ibold",6e,6a,2e,b6)) ||  (_hx_switch_0==HX_("italic-bold",42,47,7f,d9)) ||  (_hx_switch_0==HX_("italicbold",75,e8,59,e8)) ||  (_hx_switch_0==HX_("z",7a,00,00,00)) ){
HXLINE( 184)			suffix = HX_("z",7a,00,00,00);
HXDLIN( 184)			goto _hx_goto_269;
            		}
            		_hx_goto_269:;
HXDLIN( 184)		if ((str.indexOf(HX_("assets/fonts/",37,ff,a5,9c),null()) != 0)) {
HXLINE( 184)			return ((HX_("assets/fonts/",37,ff,a5,9c) + str) + suffix);
            		}
            		else {
HXLINE( 184)			return (str + suffix);
            		}
HXDLIN( 184)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,fontStr,return )

int FlxUI_obj::fontSize(::String str,int size){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_195_fontSize)
HXLINE( 196)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXDLIN( 196)		::Dynamic tongue =  ::Dynamic(currState->__Field(HX_("_tongue",63,57,5b,02),::hx::paccDynamic));
HXDLIN( 196)		::Dynamic t;
HXDLIN( 196)		if (::hx::IsNotNull( tongue )) {
HXLINE( 196)			t = tongue;
            		}
            		else {
HXLINE( 196)			t = null();
            		}
HXDLIN( 196)		::Dynamic t1 = t;
HXLINE( 197)		if (::hx::IsNotNull( t1 )) {
HXLINE( 199)			size = ::flixel::addons::ui::interfaces::IFireTongue_obj::getFontSize(t1,str,size);
            		}
HXLINE( 201)		return size;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,fontSize,return )

::String FlxUI_obj::font(::String str,::String __o_style,::String __o_extension){
            		::String style = __o_style;
            		if (::hx::IsNull(__o_style)) style = HX_("",00,00,00,00);
            		::String extension = __o_extension;
            		if (::hx::IsNull(__o_extension)) extension = HX_(".ttf",78,3b,c0,1e);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_213_font)
HXLINE( 214)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXDLIN( 214)		::Dynamic tongue =  ::Dynamic(currState->__Field(HX_("_tongue",63,57,5b,02),::hx::paccDynamic));
HXDLIN( 214)		::Dynamic t;
HXDLIN( 214)		if (::hx::IsNotNull( tongue )) {
HXLINE( 214)			t = tongue;
            		}
            		else {
HXLINE( 214)			t = null();
            		}
HXDLIN( 214)		::Dynamic t1 = t;
HXLINE( 215)		if (::hx::IsNotNull( t1 )) {
HXLINE( 217)			str = ::flixel::addons::ui::interfaces::IFireTongue_obj::getFont(t1,str);
            		}
HXLINE( 219)		return ::flixel::addons::ui::U_obj::font(str,style,extension);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,font,return )

::Dynamic FlxUI_obj::_hx___getTongue(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_224___getTongue)
HXLINE( 225)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXLINE( 226)		::Dynamic tongue =  ::Dynamic(currState->__Field(HX_("_tongue",63,57,5b,02),::hx::paccDynamic));
HXLINE( 227)		if (::hx::IsNotNull( tongue )) {
HXLINE( 229)			return tongue;
            		}
HXLINE( 231)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,_hx___getTongue,return )

void FlxUI_obj::forceFocus(bool b,::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_240_forceFocus)
HXLINE( 241)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXLINE( 242)		if (::hx::IsNotNull( currState )) {
HXLINE( 244)			::flixel::addons::ui::interfaces::IFlxUIState_obj::forceFocus(currState,b,thing);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,forceFocus,(void))

::Dynamic FlxUI_obj::getLeafUIState(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_253_getLeafUIState)
HXLINE( 254)		 ::flixel::FlxState state = ::flixel::FlxG_obj::game->_state;
HXLINE( 255)		if (::hx::IsNotNull( state )) {
HXLINE( 257)			while(::hx::IsNotNull( state->subState )){
HXLINE( 259)				state = state->subState;
            			}
            		}
HXLINE( 262)		if (::Std_obj::isOfType(state,::hx::ClassOf< ::flixel::addons::ui::interfaces::IFlxUIState >())) {
HXLINE( 264)			return state;
            		}
HXLINE( 266)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,getLeafUIState,return )

 ::Dynamic FlxUI_obj::request(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_278_request)
HXLINE( 279)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXLINE( 280)		if (::hx::IsNotNull( currState )) {
HXLINE( 282)			return ::flixel::addons::ui::interfaces::IEventGetter_obj::getRequest(currState,name,sender,data,params);
            		}
            		else {
HXLINE( 286)			::flixel::FlxG_obj::log->advanced(HX_("Warning, FlxUI event not handled, IFlxUIWidgets need to exist within an IFlxUIState",71,f5,8f,fb),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            		}
HXLINE( 288)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,request,return )

void FlxUI_obj::_delta(::Dynamic thing,::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y){
            		Float X = __o_X.Default(0);
            		Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1576__delta)
HXLINE(1577)		::flixel::IFlxSprite_obj::set_x(thing, ::Dynamic((thing->__Field(HX_("x",78,00,00,00),::hx::paccDynamic) + X)));
HXLINE(1578)		::flixel::IFlxSprite_obj::set_y(thing, ::Dynamic((thing->__Field(HX_("y",79,00,00,00),::hx::paccDynamic) + Y)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_delta,(void))

::Dynamic FlxUI_obj::_center(::Dynamic thing,::hx::Null< bool >  __o_X,::hx::Null< bool >  __o_Y){
            		bool X = __o_X.Default(true);
            		bool Y = __o_Y.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1587__center)
HXLINE(1588)		if (X) {
HXLINE(1590)			int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(1590)			::flixel::IFlxSprite_obj::set_x(thing,((( (Float)(_hx_tmp) ) - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing)) / ( (Float)(2) )));
            		}
HXLINE(1592)		if (Y) {
HXLINE(1594)			int _hx_tmp1 = ::flixel::FlxG_obj::height;
HXDLIN(1594)			::flixel::IFlxSprite_obj::set_y(thing,((( (Float)(_hx_tmp1) ) - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing)) / ( (Float)(2) )));
            		}
HXLINE(1596)		return thing;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_center,return )

 ::Xml FlxUI_obj::consolidateData( ::Xml data, ::Xml definition,::hx::Null< bool >  __o_combineUniqueChildren){
            		bool combineUniqueChildren = __o_combineUniqueChildren.Default(false);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2999_consolidateData)
HXLINE(3000)		bool _hx_tmp;
HXDLIN(3000)		if (::hx::IsNull( data )) {
HXLINE(3000)			_hx_tmp = ::hx::IsNotNull( definition );
            		}
            		else {
HXLINE(3000)			_hx_tmp = false;
            		}
HXDLIN(3000)		if (_hx_tmp) {
HXLINE(3002)			return definition;
            		}
HXLINE(3004)		if (::hx::IsNull( definition )) {
HXLINE(3006)			return data;
            		}
            		else {
HXLINE(3013)			 ::Xml new_data = ::Xml_obj::parse(::haxe::xml::Printer_obj::print(definition,null()))->firstElement();
HXLINE(3015)			{
HXLINE(3015)				 ::Dynamic att = data->attributes();
HXDLIN(3015)				while(( (bool)(att->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(3015)					::String att1 = ( (::String)(att->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(3017)					::String val = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(data,att1);
HXLINE(3018)					new_data->set(att1,val);
            				}
            			}
HXLINE(3022)			{
HXLINE(3022)				::String v;
HXDLIN(3022)				if ((data->nodeType == ::Xml_obj::Document)) {
HXLINE(3022)					v = HX_("Document",3b,ab,c4,74);
            				}
            				else {
HXLINE(3022)					if ((data->nodeType != ::Xml_obj::Element)) {
HXLINE(3022)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(data->nodeType)));
            					}
HXDLIN(3022)					v = data->nodeName;
            				}
HXDLIN(3022)				if ((new_data->nodeType != ::Xml_obj::Element)) {
HXLINE(3022)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(new_data->nodeType)));
            				}
HXDLIN(3022)				new_data->nodeName = v;
            			}
HXLINE(3023)			bool _hx_tmp1;
HXDLIN(3023)			if (!(::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(data,HX_("name",4b,72,ff,48)))) {
HXLINE(3023)				_hx_tmp1 = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(data,HX_("id",db,5b,00,00));
            			}
            			else {
HXLINE(3023)				_hx_tmp1 = true;
            			}
HXDLIN(3023)			if (_hx_tmp1) {
HXLINE(3025)				new_data->set(HX_("name",4b,72,ff,48),::flixel::addons::ui::U_obj::xml_name(data));
            			}
            			else {
HXLINE(3029)				new_data->set(HX_("name",4b,72,ff,48),HX_("",00,00,00,00));
            			}
HXLINE(3032)			{
HXLINE(3032)				 ::Dynamic element = data->elements();
HXDLIN(3032)				while(( (bool)(element->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(3032)					 ::Xml element1 = ( ( ::Xml)(element->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(3034)					if ((element1->nodeType != ::Xml_obj::Element)) {
HXLINE(3034)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(element1->nodeType)));
            					}
HXDLIN(3034)					::String nodeName = element1->nodeName;
HXLINE(3035)					bool notCombine = !(combineUniqueChildren);
HXLINE(3036)					if (combineUniqueChildren) {
HXLINE(3038)						 ::Dynamic new_els = new_data->elementsNamed(nodeName);
HXLINE(3039)						 ::Xml new_el = ( ( ::Xml)(new_els->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(3042)						bool _hx_tmp2;
HXDLIN(3042)						bool _hx_tmp3;
HXDLIN(3042)						if ((::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,nodeName)->length == 1)) {
HXLINE(3042)							_hx_tmp3 = ::hx::IsNotNull( new_el );
            						}
            						else {
HXLINE(3042)							_hx_tmp3 = false;
            						}
HXDLIN(3042)						if (_hx_tmp3) {
HXLINE(3042)							_hx_tmp2 = ::hx::IsEq( new_els->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)(),false );
            						}
            						else {
HXLINE(3042)							_hx_tmp2 = false;
            						}
HXDLIN(3042)						if (_hx_tmp2) {
HXLINE(3045)							 ::Dynamic att2 = element1->attributes();
HXDLIN(3045)							while(( (bool)(att2->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(3045)								::String att3 = ( (::String)(att2->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(3047)								new_el->set(att3,element1->get(att3));
            							}
            						}
            						else {
HXLINE(3052)							notCombine = true;
            						}
            					}
HXLINE(3056)					if (notCombine) {
HXLINE(3058)						new_data->insertChild(::Xml_obj::parse(::haxe::xml::Printer_obj::print(element1,null()))->firstElement(),0);
            					}
            				}
            			}
HXLINE(3061)			bool _hx_tmp4;
HXDLIN(3061)			if ((new_data->nodeType != ::Xml_obj::Document)) {
HXLINE(3061)				_hx_tmp4 = (new_data->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(3061)				_hx_tmp4 = false;
            			}
HXDLIN(3061)			if (_hx_tmp4) {
HXLINE(3061)				HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(new_data->nodeType)));
            			}
HXDLIN(3061)			return new_data;
            		}
HXLINE(3004)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,consolidateData,return )

 ::openfl::display::BitmapData FlxUI_obj::_loadBitmapRect(::String source,::String rect_str){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4322__loadBitmapRect)
HXLINE(4323)		 ::openfl::display::BitmapData b1 = ::openfl::utils::Assets_obj::getBitmapData(::flixel::addons::ui::U_obj::gfx(source,null(),null(),null(),null(),null()),null());
HXLINE(4324)		::Array< ::String > coords = rect_str.split(HX_(",",2c,00,00,00));
HXDLIN(4324)		 ::openfl::geom::Rectangle rect = null();
HXDLIN(4324)		bool _hx_tmp;
HXDLIN(4324)		if (::hx::IsNotNull( coords )) {
HXLINE(4324)			_hx_tmp = (coords->length == 4);
            		}
            		else {
HXLINE(4324)			_hx_tmp = false;
            		}
HXDLIN(4324)		if (_hx_tmp) {
HXLINE(4324)			int x_ = ( (int)(::Std_obj::parseInt(coords->__get(0))) );
HXDLIN(4324)			int y_ = ( (int)(::Std_obj::parseInt(coords->__get(1))) );
HXDLIN(4324)			int w_ = ( (int)(::Std_obj::parseInt(coords->__get(2))) );
HXDLIN(4324)			int h_ = ( (int)(::Std_obj::parseInt(coords->__get(3))) );
HXDLIN(4324)			rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,x_,y_,w_,h_);
            		}
HXDLIN(4324)		 ::openfl::geom::Rectangle r = rect;
HXLINE(4325)		int b2 = ::Std_obj::_hx_int(r->width);
HXDLIN(4325)		 ::openfl::display::BitmapData b21 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,b2,::Std_obj::_hx_int(r->height),true,16777215);
HXLINE(4326)		b21->copyPixels(b1,r, ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0),null(),null(),null());
HXLINE(4327)		return b21;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadBitmapRect,return )

::cpp::VirtualArray FlxUI_obj::getParams( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5755_getParams)
HXLINE(5756)		::cpp::VirtualArray params = null();
HXLINE(5758)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(5760)			params = ::cpp::VirtualArray_obj::__new();
HXLINE(5761)			{
HXLINE(5761)				int _g = 0;
HXDLIN(5761)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(5761)				while((_g < _g1->length)){
HXLINE(5761)					 ::Xml param = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(5761)					_g = (_g + 1);
HXLINE(5763)					bool _hx_tmp;
HXDLIN(5763)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(5763)						_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(5763)						_hx_tmp = false;
            					}
HXDLIN(5763)					if (_hx_tmp) {
HXLINE(5765)						::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXLINE(5766)						type = type.toLowerCase();
HXLINE(5767)						::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXLINE(5768)						 ::Dynamic value = valueStr;
HXLINE(5769)						int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXLINE(5770)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(5781)							::String str = ::String(valueStr);
HXLINE(5782)							str = str.toLowerCase();
HXLINE(5783)							bool _hx_tmp1;
HXDLIN(5783)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(5783)								_hx_tmp1 = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(5783)								_hx_tmp1 = true;
            							}
HXDLIN(5783)							if (_hx_tmp1) {
HXLINE(5785)								value = true;
            							}
            							else {
HXLINE(5789)								value = false;
            							}
HXLINE(5780)							goto _hx_goto_286;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(5777)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(5777)							goto _hx_goto_286;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(5779)							 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(5779)							if (::hx::IsNull( return_val )) {
HXLINE(5779)								HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            							}
HXDLIN(5779)							value = return_val;
HXDLIN(5779)							goto _hx_goto_286;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(5775)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(5775)							goto _hx_goto_286;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(5773)							value = ::String(valueStr);
HXDLIN(5773)							goto _hx_goto_286;
            						}
            						_hx_goto_286:;
HXLINE(5794)						params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXLINE(5799)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXLINE(5802)			{
HXLINE(5802)				int _g2 = 0;
HXDLIN(5802)				int _g3 = params->get_length();
HXDLIN(5802)				while((_g2 < _g3)){
HXLINE(5802)					_g2 = (_g2 + 1);
HXDLIN(5802)					int i = (_g2 - 1);
HXLINE(5804)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            				}
            			}
            		}
HXLINE(5807)		return params;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,getParams,return )

int FlxUI_obj::sortParams( ::Dynamic a, ::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5811_sortParams)
HXLINE(5812)		if (::hx::IsLess( a->__Field(HX_("sort",5e,27,58,4c),::hx::paccDynamic),b->__Field(HX_("sort",5e,27,58,4c),::hx::paccDynamic) )) {
HXLINE(5813)			return -1;
            		}
HXLINE(5814)		if (::hx::IsGreater( a->__Field(HX_("sort",5e,27,58,4c),::hx::paccDynamic),b->__Field(HX_("sort",5e,27,58,4c),::hx::paccDynamic) )) {
HXLINE(5815)			return 1;
            		}
HXLINE(5816)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,sortParams,return )


::hx::ObjectPtr< FlxUI_obj > FlxUI_obj::__new( ::Xml data,::Dynamic ptr, ::flixel::addons::ui::FlxUI superIndex_,::Dynamic tongue_,::String __o_liveFilePath_, ::haxe::ds::StringMap uiVars_) {
	::hx::ObjectPtr< FlxUI_obj > __this = new FlxUI_obj();
	__this->__construct(data,ptr,superIndex_,tongue_,__o_liveFilePath_,uiVars_);
	return __this;
}

::hx::ObjectPtr< FlxUI_obj > FlxUI_obj::__alloc(::hx::Ctx *_hx_ctx, ::Xml data,::Dynamic ptr, ::flixel::addons::ui::FlxUI superIndex_,::Dynamic tongue_,::String __o_liveFilePath_, ::haxe::ds::StringMap uiVars_) {
	FlxUI_obj *__this = (FlxUI_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxUI_obj), true, "flixel.addons.ui.FlxUI"));
	*(void **)__this = FlxUI_obj::_hx_vtable;
	__this->__construct(data,ptr,superIndex_,tongue_,__o_liveFilePath_,uiVars_);
	return __this;
}

FlxUI_obj::FlxUI_obj()
{
}

void FlxUI_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxUI);
	HX_MARK_MEMBER_NAME(do_safe_input_delay,"do_safe_input_delay");
	HX_MARK_MEMBER_NAME(safe_input_delay_time,"safe_input_delay_time");
	HX_MARK_MEMBER_NAME(failed,"failed");
	HX_MARK_MEMBER_NAME(failed_by,"failed_by");
	HX_MARK_MEMBER_NAME(liveFilePath,"liveFilePath");
	HX_MARK_MEMBER_NAME(focus,"focus");
	HX_MARK_MEMBER_NAME(getTextFallback,"getTextFallback");
	HX_MARK_MEMBER_NAME(cursorLists,"cursorLists");
	HX_MARK_MEMBER_NAME(_ptr_tongue,"_ptr_tongue");
	HX_MARK_MEMBER_NAME(_data,"_data");
	HX_MARK_MEMBER_NAME(_postLoaded,"_postLoaded");
	HX_MARK_MEMBER_NAME(_pointX,"_pointX");
	HX_MARK_MEMBER_NAME(_pointY,"_pointY");
	HX_MARK_MEMBER_NAME(_group_index,"_group_index");
	HX_MARK_MEMBER_NAME(_asset_index,"_asset_index");
	HX_MARK_MEMBER_NAME(_tag_index,"_tag_index");
	HX_MARK_MEMBER_NAME(_definition_index,"_definition_index");
	HX_MARK_MEMBER_NAME(_variable_index,"_variable_index");
	HX_MARK_MEMBER_NAME(_mode_index,"_mode_index");
	HX_MARK_MEMBER_NAME(_curr_mode,"_curr_mode");
	HX_MARK_MEMBER_NAME(_ptr,"_ptr");
	HX_MARK_MEMBER_NAME(_superIndexUI,"_superIndexUI");
	HX_MARK_MEMBER_NAME(_safe_input_delay_elapsed,"_safe_input_delay_elapsed");
	HX_MARK_MEMBER_NAME(_failure_checks,"_failure_checks");
	HX_MARK_MEMBER_NAME(_assetsToCleanUp,"_assetsToCleanUp");
	HX_MARK_MEMBER_NAME(_scaledAssets,"_scaledAssets");
	 ::flixel::addons::ui::FlxTypedUIGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxUI_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(do_safe_input_delay,"do_safe_input_delay");
	HX_VISIT_MEMBER_NAME(safe_input_delay_time,"safe_input_delay_time");
	HX_VISIT_MEMBER_NAME(failed,"failed");
	HX_VISIT_MEMBER_NAME(failed_by,"failed_by");
	HX_VISIT_MEMBER_NAME(liveFilePath,"liveFilePath");
	HX_VISIT_MEMBER_NAME(focus,"focus");
	HX_VISIT_MEMBER_NAME(getTextFallback,"getTextFallback");
	HX_VISIT_MEMBER_NAME(cursorLists,"cursorLists");
	HX_VISIT_MEMBER_NAME(_ptr_tongue,"_ptr_tongue");
	HX_VISIT_MEMBER_NAME(_data,"_data");
	HX_VISIT_MEMBER_NAME(_postLoaded,"_postLoaded");
	HX_VISIT_MEMBER_NAME(_pointX,"_pointX");
	HX_VISIT_MEMBER_NAME(_pointY,"_pointY");
	HX_VISIT_MEMBER_NAME(_group_index,"_group_index");
	HX_VISIT_MEMBER_NAME(_asset_index,"_asset_index");
	HX_VISIT_MEMBER_NAME(_tag_index,"_tag_index");
	HX_VISIT_MEMBER_NAME(_definition_index,"_definition_index");
	HX_VISIT_MEMBER_NAME(_variable_index,"_variable_index");
	HX_VISIT_MEMBER_NAME(_mode_index,"_mode_index");
	HX_VISIT_MEMBER_NAME(_curr_mode,"_curr_mode");
	HX_VISIT_MEMBER_NAME(_ptr,"_ptr");
	HX_VISIT_MEMBER_NAME(_superIndexUI,"_superIndexUI");
	HX_VISIT_MEMBER_NAME(_safe_input_delay_elapsed,"_safe_input_delay_elapsed");
	HX_VISIT_MEMBER_NAME(_failure_checks,"_failure_checks");
	HX_VISIT_MEMBER_NAME(_assetsToCleanUp,"_assetsToCleanUp");
	HX_VISIT_MEMBER_NAME(_scaledAssets,"_scaledAssets");
	 ::flixel::addons::ui::FlxTypedUIGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxUI_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { return ::hx::Val( load_dyn() ); }
		if (HX_FIELD_EQ(inName,"_ptr") ) { return ::hx::Val( _ptr ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"focus") ) { return ::hx::Val( focus ); }
		if (HX_FIELD_EQ(inName,"_data") ) { return ::hx::Val( _data ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"failed") ) { return ::hx::Val( failed ); }
		if (HX_FIELD_EQ(inName,"isRoot") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_isRoot() ); }
		if (HX_FIELD_EQ(inName,"tongue") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_tongue() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadX") ) { return ::hx::Val( _loadX_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadY") ) { return ::hx::Val( _loadY_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onFocus") ) { return ::hx::Val( onFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"_sendTo") ) { return ::hx::Val( _sendTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMode") ) { return ::hx::Val( setMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMode") ) { return ::hx::Val( getMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"_pointX") ) { return ::hx::Val( _pointX ); }
		if (HX_FIELD_EQ(inName,"_pointY") ) { return ::hx::Val( _pointY ); }
		if (HX_FIELD_EQ(inName,"cleanup") ) { return ::hx::Val( cleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"doRound") ) { return ::hx::Val( doRound_dyn() ); }
		if (HX_FIELD_EQ(inName,"getText") ) { return ::hx::Val( getText_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getEvent") ) { return ::hx::Val( getEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"addAsset") ) { return ::hx::Val( addAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadSub") ) { return ::hx::Val( _loadSub_dyn() ); }
		if (HX_FIELD_EQ(inName,"_addTags") ) { return ::hx::Val( _addTags_dyn() ); }
		if (HX_FIELD_EQ(inName,"currMode") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_currMode() ); }
		if (HX_FIELD_EQ(inName,"getGroup") ) { return ::hx::Val( getGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasAsset") ) { return ::hx::Val( hasAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAsset") ) { return ::hx::Val( getAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"_doAlign") ) { return ::hx::Val( _doAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"createUI") ) { return ::hx::Val( createUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadBox") ) { return ::hx::Val( _loadBox_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadBar") ) { return ::hx::Val( _loadBar_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRound") ) { return ::hx::Val( getRound_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"failed_by") ) { return ::hx::Val( failed_by ); }
		if (HX_FIELD_EQ(inName,"set_focus") ) { return ::hx::Val( set_focus_dyn() ); }
		if (HX_FIELD_EQ(inName,"callEvent") ) { return ::hx::Val( callEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"showGroup") ) { return ::hx::Val( showGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"showAsset") ) { return ::hx::Val( showAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"_postLoad") ) { return ::hx::Val( _postLoad_dyn() ); }
		if (HX_FIELD_EQ(inName,"showThing") ) { return ::hx::Val( showThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadThing") ) { return ::hx::Val( loadThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadText") ) { return ::hx::Val( _loadText_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTest") ) { return ::hx::Val( _loadTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadLine") ) { return ::hx::Val( _loadLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"thisWidth") ) { return ::hx::Val( thisWidth_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_isRoot") ) { return ::hx::Val( get_isRoot_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tongue") ) { return ::hx::Val( get_tongue_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_tongue") ) { return ::hx::Val( set_tongue_dyn() ); }
		if (HX_FIELD_EQ(inName,"_tongueSet") ) { return ::hx::Val( _tongueSet_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRequest") ) { return ::hx::Val( getRequest_dyn() ); }
		if (HX_FIELD_EQ(inName,"toggleShow") ) { return ::hx::Val( toggleShow_dyn() ); }
		if (HX_FIELD_EQ(inName,"sendToBack") ) { return ::hx::Val( sendToBack_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFlxText") ) { return ::hx::Val( getFlxText_dyn() ); }
		if (HX_FIELD_EQ(inName,"_tag_index") ) { return ::hx::Val( _tag_index ); }
		if (HX_FIELD_EQ(inName,"_curr_mode") ) { return ::hx::Val( _curr_mode ); }
		if (HX_FIELD_EQ(inName,"_loadThing") ) { return ::hx::Val( _loadThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadScale") ) { return ::hx::Val( _loadScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadWidth") ) { return ::hx::Val( _loadWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadSmooth") ) { return ::hx::Val( loadSmooth_dyn() ); }
		if (HX_FIELD_EQ(inName,"thisHeight") ) { return ::hx::Val( thisHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadColor") ) { return ::hx::Val( _loadColor_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cursorLists") ) { return ::hx::Val( cursorLists ); }
		if (HX_FIELD_EQ(inName,"_ptr_tongue") ) { return ::hx::Val( _ptr_tongue ); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return ::hx::Val( onFocusLost_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeAsset") ) { return ::hx::Val( removeAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"unparentXML") ) { return ::hx::Val( unparentXML_dyn() ); }
		if (HX_FIELD_EQ(inName,"sendToFront") ) { return ::hx::Val( sendToFront_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVariable") ) { return ::hx::Val( setVariable_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVariable") ) { return ::hx::Val( getVariable_dyn() ); }
		if (HX_FIELD_EQ(inName,"screenWidth") ) { return ::hx::Val( screenWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"_postLoaded") ) { return ::hx::Val( _postLoaded ); }
		if (HX_FIELD_EQ(inName,"_mode_index") ) { return ::hx::Val( _mode_index ); }
		if (HX_FIELD_EQ(inName,"_loadAnchor") ) { return ::hx::Val( _loadAnchor_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadScaleX") ) { return ::hx::Val( _loadScaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadScaleY") ) { return ::hx::Val( _loadScaleY_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadHeight") ) { return ::hx::Val( _loadHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"_alignThing") ) { return ::hx::Val( _alignThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadString") ) { return ::hx::Val( _loadString_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadLayout") ) { return ::hx::Val( _loadLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadButton") ) { return ::hx::Val( _loadButton_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadRegion") ) { return ::hx::Val( _loadRegion_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadSprite") ) { return ::hx::Val( _loadSprite_dyn() ); }
		if (HX_FIELD_EQ(inName,"_getStretch") ) { return ::hx::Val( _getStretch_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadCursor") ) { return ::hx::Val( _loadCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadBorder") ) { return ::hx::Val( _loadBorder_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"liveFilePath") ) { return ::hx::Val( liveFilePath ); }
		if (HX_FIELD_EQ(inName,"replaceAsset") ) { return ::hx::Val( replaceAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadGlobals") ) { return ::hx::Val( _loadGlobals_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_currMode") ) { return ::hx::Val( get_currMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_currMode") ) { return ::hx::Val( set_currMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAllAssets") ) { return ::hx::Val( getAllAssets_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAssetKeys") ) { return ::hx::Val( getAssetKeys_dyn() ); }
		if (HX_FIELD_EQ(inName,"screenHeight") ) { return ::hx::Val( screenHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"_group_index") ) { return ::hx::Val( _group_index ); }
		if (HX_FIELD_EQ(inName,"_asset_index") ) { return ::hx::Val( _asset_index ); }
		if (HX_FIELD_EQ(inName,"_loadTooltip") ) { return ::hx::Val( _loadTooltip_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadCompass") ) { return ::hx::Val( _loadCompass_dyn() ); }
		if (HX_FIELD_EQ(inName,"_changeThing") ) { return ::hx::Val( _changeThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_resizeThing") ) { return ::hx::Val( _resizeThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTestSub") ) { return ::hx::Val( _loadTestSub_dyn() ); }
		if (HX_FIELD_EQ(inName,"addToCleanup") ) { return ::hx::Val( addToCleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTabMenu") ) { return ::hx::Val( _loadTabMenu_dyn() ); }
		if (HX_FIELD_EQ(inName,"_getDataSize") ) { return ::hx::Val( _getDataSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"_doOperation") ) { return ::hx::Val( _doOperation_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadFontDef") ) { return ::hx::Val( _loadFontDef_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setSuperIndex") ) { return ::hx::Val( setSuperIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAssetGroup") ) { return ::hx::Val( getAssetGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkVariable") ) { return ::hx::Val( checkVariable_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDefinition") ) { return ::hx::Val( getDefinition_dyn() ); }
		if (HX_FIELD_EQ(inName,"_superIndexUI") ) { return ::hx::Val( _superIndexUI ); }
		if (HX_FIELD_EQ(inName,"_scaledAssets") ) { return ::hx::Val( _scaledAssets ); }
		if (HX_FIELD_EQ(inName,"_checkFailure") ) { return ::hx::Val( _checkFailure_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTileTest") ) { return ::hx::Val( _loadTileTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadCheckBox") ) { return ::hx::Val( _loadCheckBox_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseVarValue") ) { return ::hx::Val( parseVarValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTileRule") ) { return ::hx::Val( _loadTileRule_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadScaledSrc") ) { return ::hx::Val( loadScaledSrc_dyn() ); }
		if (HX_FIELD_EQ(inName,"_getAnchorPos") ) { return ::hx::Val( _getAnchorPos_dyn() ); }
		if (HX_FIELD_EQ(inName,"_getOperation") ) { return ::hx::Val( _getOperation_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadPosition") ) { return ::hx::Val( _loadPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadFontFace") ) { return ::hx::Val( _loadFontFace_dyn() ); }
		if (HX_FIELD_EQ(inName,"_onFinishLoad") ) { return ::hx::Val( _onFinishLoad_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_loadPointSize") ) { return ::hx::Val( _loadPointSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"replaceInGroup") ) { return ::hx::Val( replaceInGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"_postLoadThing") ) { return ::hx::Val( _postLoadThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadInputText") ) { return ::hx::Val( _loadInputText_dyn() ); }
		if (HX_FIELD_EQ(inName,"getResizeRatio") ) { return ::hx::Val( getResizeRatio_dyn() ); }
		if (HX_FIELD_EQ(inName,"calcMaxMinSize") ) { return ::hx::Val( calcMaxMinSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"formatFromCode") ) { return ::hx::Val( formatFromCode_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getTextFallback") ) { return ::hx::Val( getTextFallback ); }
		if (HX_FIELD_EQ(inName,"_variable_index") ) { return ::hx::Val( _variable_index ); }
		if (HX_FIELD_EQ(inName,"_failure_checks") ) { return ::hx::Val( _failure_checks ); }
		if (HX_FIELD_EQ(inName,"_loadRadioGroup") ) { return ::hx::Val( _loadRadioGroup_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getAssetsWithTag") ) { return ::hx::Val( getAssetsWithTag_dyn() ); }
		if (HX_FIELD_EQ(inName,"_assetsToCleanUp") ) { return ::hx::Val( _assetsToCleanUp ); }
		if (HX_FIELD_EQ(inName,"applyNodeChanges") ) { return ::hx::Val( applyNodeChanges_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTooltipData") ) { return ::hx::Val( _loadTooltipData_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTooltipText") ) { return ::hx::Val( _loadTooltipText_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAssetProperty") ) { return ::hx::Val( getAssetProperty_dyn() ); }
		if (HX_FIELD_EQ(inName,"formatButtonText") ) { return ::hx::Val( formatButtonText_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_definition_index") ) { return ::hx::Val( _definition_index ); }
		if (HX_FIELD_EQ(inName,"_loadThingGetInfo") ) { return ::hx::Val( _loadThingGetInfo_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTooltipStyle") ) { return ::hx::Val( _loadTooltipStyle_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadDropDownMenu") ) { return ::hx::Val( _loadDropDownMenu_dyn() ); }
		if (HX_FIELD_EQ(inName,"addToScaledAssets") ) { return ::hx::Val( addToScaledAssets_dyn() ); }
		if (HX_FIELD_EQ(inName,"_load9SliceSprite") ) { return ::hx::Val( _load9SliceSprite_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_changeParamsThing") ) { return ::hx::Val( _changeParamsThing_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"do_safe_input_delay") ) { return ::hx::Val( do_safe_input_delay ); }
		if (HX_FIELD_EQ(inName,"_loadNumericStepper") ) { return ::hx::Val( _loadNumericStepper_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"setWidgetSuppression") ) { return ::hx::Val( setWidgetSuppression_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"safe_input_delay_time") ) { return ::hx::Val( safe_input_delay_time ); }
		if (HX_FIELD_EQ(inName,"getLabelStyleFromData") ) { return ::hx::Val( getLabelStyleFromData_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyNodeConditionals") ) { return ::hx::Val( applyNodeConditionals_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_safe_input_delay_elapsed") ) { return ::hx::Val( _safe_input_delay_elapsed ); }
		if (HX_FIELD_EQ(inName,"load9SliceSprite_scaleSub") ) { return ::hx::Val( load9SliceSprite_scaleSub_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"getLabelStyleFromDefinition") ) { return ::hx::Val( getLabelStyleFromDefinition_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxUI_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { outValue = font_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"event") ) { outValue = event_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_delta") ) { outValue = _delta_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fontStr") ) { outValue = fontStr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"request") ) { outValue = request_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_center") ) { outValue = _center_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fontSize") ) { outValue = fontSize_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getParams") ) { outValue = getParams_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"forceFocus") ) { outValue = forceFocus_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sortParams") ) { outValue = sortParams_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__getTongue") ) { outValue = _hx___getTongue_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getLeafUIState") ) { outValue = getLeafUIState_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"consolidateData") ) { outValue = consolidateData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_loadBitmapRect") ) { outValue = _loadBitmapRect_dyn(); return true; }
	}
	return false;
}

::hx::Val FlxUI_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_ptr") ) { _ptr=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"focus") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_focus(inValue.Cast< ::Dynamic >()) );focus=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_data") ) { _data=inValue.Cast<  ::Xml >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"failed") ) { failed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tongue") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_tongue(inValue.Cast< ::Dynamic >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_pointX") ) { _pointX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_pointY") ) { _pointY=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"currMode") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_currMode(inValue.Cast< ::String >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"failed_by") ) { failed_by=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_tag_index") ) { _tag_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_curr_mode") ) { _curr_mode=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cursorLists") ) { cursorLists=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_ptr_tongue") ) { _ptr_tongue=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_postLoaded") ) { _postLoaded=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mode_index") ) { _mode_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"liveFilePath") ) { liveFilePath=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_group_index") ) { _group_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_asset_index") ) { _asset_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_superIndexUI") ) { _superIndexUI=inValue.Cast<  ::flixel::addons::ui::FlxUI >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scaledAssets") ) { _scaledAssets=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getTextFallback") ) { getTextFallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_variable_index") ) { _variable_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_failure_checks") ) { _failure_checks=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_assetsToCleanUp") ) { _assetsToCleanUp=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_definition_index") ) { _definition_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"do_safe_input_delay") ) { do_safe_input_delay=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"safe_input_delay_time") ) { safe_input_delay_time=inValue.Cast< Float >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_safe_input_delay_elapsed") ) { _safe_input_delay_elapsed=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxUI_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("do_safe_input_delay",90,5b,9d,88));
	outFields->push(HX_("safe_input_delay_time",50,71,b0,f4));
	outFields->push(HX_("failed",bd,c5,fe,e7));
	outFields->push(HX_("failed_by",59,1a,00,5f));
	outFields->push(HX_("isRoot",2c,b3,15,69));
	outFields->push(HX_("liveFilePath",4d,75,d5,b0));
	outFields->push(HX_("tongue",c4,45,e4,93));
	outFields->push(HX_("focus",d8,5f,89,04));
	outFields->push(HX_("cursorLists",9f,0f,e7,fd));
	outFields->push(HX_("_ptr_tongue",54,fc,53,03));
	outFields->push(HX_("_data",09,72,74,f5));
	outFields->push(HX_("currMode",75,ab,68,8b));
	outFields->push(HX_("_postLoaded",a4,95,31,80));
	outFields->push(HX_("_pointX",a7,23,a5,65));
	outFields->push(HX_("_pointY",a8,23,a5,65));
	outFields->push(HX_("_group_index",d3,bc,ca,66));
	outFields->push(HX_("_asset_index",44,0e,d3,80));
	outFields->push(HX_("_tag_index",ee,f7,41,12));
	outFields->push(HX_("_definition_index",85,96,e5,82));
	outFields->push(HX_("_variable_index",2e,92,8a,75));
	outFields->push(HX_("_mode_index",15,af,93,a2));
	outFields->push(HX_("_curr_mode",d1,32,bc,27));
	outFields->push(HX_("_ptr",ef,a6,20,3f));
	outFields->push(HX_("_superIndexUI",8a,fc,6d,d1));
	outFields->push(HX_("_safe_input_delay_elapsed",38,44,1a,3b));
	outFields->push(HX_("_failure_checks",df,fd,ae,28));
	outFields->push(HX_("_assetsToCleanUp",87,59,f7,5a));
	outFields->push(HX_("_scaledAssets",9c,29,61,6b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxUI_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(FlxUI_obj,do_safe_input_delay),HX_("do_safe_input_delay",90,5b,9d,88)},
	{::hx::fsFloat,(int)offsetof(FlxUI_obj,safe_input_delay_time),HX_("safe_input_delay_time",50,71,b0,f4)},
	{::hx::fsBool,(int)offsetof(FlxUI_obj,failed),HX_("failed",bd,c5,fe,e7)},
	{::hx::fsFloat,(int)offsetof(FlxUI_obj,failed_by),HX_("failed_by",59,1a,00,5f)},
	{::hx::fsString,(int)offsetof(FlxUI_obj,liveFilePath),HX_("liveFilePath",4d,75,d5,b0)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(FlxUI_obj,focus),HX_("focus",d8,5f,89,04)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxUI_obj,getTextFallback),HX_("getTextFallback",a5,c3,03,82)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxUI_obj,cursorLists),HX_("cursorLists",9f,0f,e7,fd)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(FlxUI_obj,_ptr_tongue),HX_("_ptr_tongue",54,fc,53,03)},
	{::hx::fsObject /*  ::Xml */ ,(int)offsetof(FlxUI_obj,_data),HX_("_data",09,72,74,f5)},
	{::hx::fsBool,(int)offsetof(FlxUI_obj,_postLoaded),HX_("_postLoaded",a4,95,31,80)},
	{::hx::fsFloat,(int)offsetof(FlxUI_obj,_pointX),HX_("_pointX",a7,23,a5,65)},
	{::hx::fsFloat,(int)offsetof(FlxUI_obj,_pointY),HX_("_pointY",a8,23,a5,65)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxUI_obj,_group_index),HX_("_group_index",d3,bc,ca,66)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxUI_obj,_asset_index),HX_("_asset_index",44,0e,d3,80)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxUI_obj,_tag_index),HX_("_tag_index",ee,f7,41,12)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxUI_obj,_definition_index),HX_("_definition_index",85,96,e5,82)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxUI_obj,_variable_index),HX_("_variable_index",2e,92,8a,75)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxUI_obj,_mode_index),HX_("_mode_index",15,af,93,a2)},
	{::hx::fsString,(int)offsetof(FlxUI_obj,_curr_mode),HX_("_curr_mode",d1,32,bc,27)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(FlxUI_obj,_ptr),HX_("_ptr",ef,a6,20,3f)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUI */ ,(int)offsetof(FlxUI_obj,_superIndexUI),HX_("_superIndexUI",8a,fc,6d,d1)},
	{::hx::fsFloat,(int)offsetof(FlxUI_obj,_safe_input_delay_elapsed),HX_("_safe_input_delay_elapsed",38,44,1a,3b)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxUI_obj,_failure_checks),HX_("_failure_checks",df,fd,ae,28)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(FlxUI_obj,_assetsToCleanUp),HX_("_assetsToCleanUp",87,59,f7,5a)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(FlxUI_obj,_scaledAssets),HX_("_scaledAssets",9c,29,61,6b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxUI_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxUI_obj_sMemberFields[] = {
	HX_("do_safe_input_delay",90,5b,9d,88),
	HX_("safe_input_delay_time",50,71,b0,f4),
	HX_("failed",bd,c5,fe,e7),
	HX_("failed_by",59,1a,00,5f),
	HX_("get_isRoot",f5,22,9d,59),
	HX_("liveFilePath",4d,75,d5,b0),
	HX_("get_tongue",8d,b5,6b,84),
	HX_("set_tongue",01,54,e9,87),
	HX_("focus",d8,5f,89,04),
	HX_("set_focus",3b,a8,83,2b),
	HX_("getTextFallback",a5,c3,03,82),
	HX_("cursorLists",9f,0f,e7,fd),
	HX_("_ptr_tongue",54,fc,53,03),
	HX_("_data",09,72,74,f5),
	HX_("_tongueSet",ff,7b,c4,6b),
	HX_("callEvent",9c,22,04,02),
	HX_("getEvent",a4,d7,9b,d5),
	HX_("getRequest",59,65,e6,93),
	HX_("onFocus",39,fe,c6,9a),
	HX_("setWidgetSuppression",4d,9a,d2,bf),
	HX_("onFocusLost",bd,e4,85,41),
	HX_("setSuperIndex",d9,09,3c,bf),
	HX_("update",09,86,05,87),
	HX_("toggleShow",b1,1a,09,e4),
	HX_("showGroup",02,19,59,c8),
	HX_("showAsset",b3,cf,9d,54),
	HX_("removeAsset",0c,47,6d,24),
	HX_("addAsset",0f,90,96,9f),
	HX_("replaceAsset",1c,55,c8,19),
	HX_("destroy",fa,2c,86,24),
	HX_("load",26,9a,b7,47),
	HX_("unparentXML",54,a1,ff,04),
	HX_("_loadPointSize",6c,aa,6c,e2),
	HX_("_loadSub",7b,7c,9a,42),
	HX_("_addTags",1b,51,ec,c2),
	HX_("_loadGlobals",2b,72,e0,4a),
	HX_("_postLoad",05,f2,8c,4d),
	HX_("_sendTo",82,ca,fb,d9),
	HX_("sendToFront",c6,b8,1e,5d),
	HX_("sendToBack",aa,6c,20,18),
	HX_("get_currMode",7e,5f,82,40),
	HX_("set_currMode",f2,82,7b,55),
	HX_("setMode",25,14,e5,0d),
	HX_("showThing",b1,ed,ed,3d),
	HX_("getGroup",c9,c2,cb,f9),
	HX_("getFlxText",49,64,62,5f),
	HX_("getAllAssets",0e,61,bd,29),
	HX_("getAssetKeys",8e,cc,03,bb),
	HX_("hasAsset",36,b4,91,b2),
	HX_("getAsset",7a,79,10,86),
	HX_("getAssetsWithTag",3b,93,24,96),
	HX_("getAssetGroup",65,0f,45,a3),
	HX_("getMode",19,83,e3,1a),
	HX_("getLabelStyleFromDefinition",d0,35,54,c4),
	HX_("getLabelStyleFromData",a7,ba,4b,0c),
	HX_("checkVariable",24,6f,67,51),
	HX_("setVariable",fe,db,6d,99),
	HX_("getVariable",f2,d4,00,8f),
	HX_("getDefinition",c9,31,80,48),
	HX_("screenWidth",fa,02,e8,81),
	HX_("screenHeight",73,10,6a,df),
	HX_("_postLoaded",a4,95,31,80),
	HX_("_pointX",a7,23,a5,65),
	HX_("_pointY",a8,23,a5,65),
	HX_("_group_index",d3,bc,ca,66),
	HX_("_asset_index",44,0e,d3,80),
	HX_("_tag_index",ee,f7,41,12),
	HX_("_definition_index",85,96,e5,82),
	HX_("_variable_index",2e,92,8a,75),
	HX_("_mode_index",15,af,93,a2),
	HX_("_curr_mode",d1,32,bc,27),
	HX_("_ptr",ef,a6,20,3f),
	HX_("_superIndexUI",8a,fc,6d,d1),
	HX_("_safe_input_delay_elapsed",38,44,1a,3b),
	HX_("_failure_checks",df,fd,ae,28),
	HX_("_assetsToCleanUp",87,59,f7,5a),
	HX_("_scaledAssets",9c,29,61,6b),
	HX_("replaceInGroup",46,97,32,5c),
	HX_("applyNodeConditionals",1d,b1,ba,ec),
	HX_("applyNodeChanges",53,40,3a,89),
	HX_("loadThing",e8,d3,c0,2a),
	HX_("_loadThingGetInfo",7b,f7,10,95),
	HX_("_loadTooltip",7e,19,34,a1),
	HX_("_loadTooltipData",c8,32,6e,09),
	HX_("_loadTooltipStyle",d3,d2,93,e6),
	HX_("_loadTooltipText",4b,a9,04,14),
	HX_("_loadAnchor",5a,36,26,e8),
	HX_("_loadThing",a9,4f,63,86),
	HX_("_loadX",b3,8e,d6,74),
	HX_("_loadY",b4,8e,d6,74),
	HX_("_loadScale",45,96,a8,ef),
	HX_("_loadScaleX",73,e6,da,c3),
	HX_("_loadScaleY",74,e6,da,c3),
	HX_("_loadWidth",c1,7d,3c,41),
	HX_("_loadHeight",cc,03,01,8a),
	HX_("_loadCompass",0d,86,10,ba),
	HX_("_changeParamsThing",f9,9f,76,8d),
	HX_("_changeThing",5f,de,58,9b),
	HX_("_alignThing",08,c4,65,7b),
	HX_("_doAlign",bb,90,76,8e),
	HX_("_checkFailure",41,bb,ef,e6),
	HX_("_resizeThing",5b,b7,96,b4),
	HX_("_postLoadThing",a9,93,c5,16),
	HX_("_loadTileTest",c5,6d,d7,22),
	HX_("_loadString",b6,24,e5,98),
	HX_("_loadText",52,95,2f,05),
	HX_("_loadInputText",12,4b,dc,d4),
	HX_("_loadRadioGroup",a9,f6,74,63),
	HX_("_loadCheckBox",48,09,b5,48),
	HX_("_loadDropDownMenu",15,f4,83,17),
	HX_("_loadTest",f7,90,2f,05),
	HX_("_loadTestSub",c9,84,6d,f4),
	HX_("parseVarValue",5d,e2,a6,bd),
	HX_("_loadLayout",8f,aa,6d,e0),
	HX_("addToCleanup",88,65,2a,da),
	HX_("addToScaledAssets",d9,b2,d7,0f),
	HX_("cleanup",24,0c,42,ab),
	HX_("createUI",50,68,f4,2b),
	HX_("_loadTabMenu",0f,87,76,77),
	HX_("_loadNumericStepper",a9,d6,b0,b0),
	HX_("getResizeRatio",81,09,c6,aa),
	HX_("_loadButton",d7,5d,95,61),
	HX_("_loadRegion",d9,bc,41,88),
	HX_("_load9SliceSprite",c3,47,93,cb),
	HX_("load9SliceSprite_scaleSub",91,16,9e,f3),
	HX_("_loadTileRule",6f,1e,91,21),
	HX_("_loadBox",06,91,8d,42),
	HX_("_loadLine",99,e0,e8,ff),
	HX_("_loadBar",ce,84,8d,42),
	HX_("_loadSprite",ea,d7,4a,4b),
	HX_("loadSmooth",f4,36,96,bc),
	HX_("loadScaledSrc",64,61,58,bd),
	HX_("thisWidth",c8,4a,ca,38),
	HX_("thisHeight",e5,9c,86,2e),
	HX_("_getAnchorPos",88,41,e7,51),
	HX_("getRound",d8,07,3d,4d),
	HX_("doRound",c3,d8,92,20),
	HX_("calcMaxMinSize",24,12,ef,e7),
	HX_("_getDataSize",c2,f0,c4,17),
	HX_("_getOperation",90,b3,05,92),
	HX_("_doOperation",1d,f1,48,5f),
	HX_("_getStretch",2e,91,3e,18),
	HX_("getAssetProperty",ef,87,a7,3d),
	HX_("_loadCursor",bb,8a,9d,c6),
	HX_("_loadPosition",ce,1f,d2,66),
	HX_("_loadBorder",d1,48,cf,eb),
	HX_("_loadColor",1e,39,36,c1),
	HX_("_loadFontDef",b1,4b,c6,cc),
	HX_("_loadFontFace",31,51,0b,62),
	HX_("_onFinishLoad",f7,60,a4,8e),
	HX_("getText",63,7c,7c,1f),
	HX_("formatFromCode",0e,5a,55,e0),
	HX_("formatButtonText",d6,99,61,56),
	::String(null()) };

::hx::Class FlxUI_obj::__mClass;

static ::String FlxUI_obj_sStaticFields[] = {
	HX_("event",1a,c8,c4,75),
	HX_("fontStr",22,4e,2a,96),
	HX_("fontSize",30,be,d1,ce),
	HX_("font",cf,5d,c0,43),
	HX_("__getTongue",da,17,67,3e),
	HX_("forceFocus",ed,49,5e,9b),
	HX_("getLeafUIState",49,ca,4d,90),
	HX_("request",4f,df,84,44),
	HX_("_delta",39,2f,0e,d3),
	HX_("_center",74,37,52,74),
	HX_("consolidateData",d3,c5,7a,dc),
	HX_("_loadBitmapRect",18,ff,15,1d),
	HX_("getParams",7c,84,d1,69),
	HX_("sortParams",44,71,60,4a),
	::String(null())
};

void FlxUI_obj::__register()
{
	FlxUI_obj _hx_dummy;
	FlxUI_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.ui.FlxUI",55,08,11,e9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxUI_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxUI_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxUI_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxUI_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUI_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUI_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
