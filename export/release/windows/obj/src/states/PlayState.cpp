// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_backend_BaseStage
#include <backend/BaseStage.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Conductor
#include <backend/Conductor.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_CoolUtil
#include <backend/CoolUtil.h>
#endif
#ifndef INCLUDED_backend_Countdown
#include <backend/Countdown.h>
#endif
#ifndef INCLUDED_backend_Difficulty
#include <backend/Difficulty.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_Highscore
#include <backend/Highscore.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_NoteTypesConfig
#include <backend/NoteTypesConfig.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_PsychCamera
#include <backend/PsychCamera.h>
#endif
#ifndef INCLUDED_backend_Rating
#include <backend/Rating.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_backend_Song
#include <backend/Song.h>
#endif
#ifndef INCLUDED_backend_StageData
#include <backend/StageData.h>
#endif
#ifndef INCLUDED_backend_WeekData
#include <backend/WeekData.h>
#endif
#ifndef INCLUDED_cutscenes_DialogueBoxPsych
#include <cutscenes/DialogueBoxPsych.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxRuntimeShader
#include <flixel/addons/display/FlxRuntimeShader.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTweenManager
#include <flixel/tweens/FlxTweenManager.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSort
#include <flixel/util/FlxSort.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_flxanimate_FlxAnimate
#include <flxanimate/FlxAnimate.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxAnim
#include <flxanimate/animate/FlxAnim.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxSymbol
#include <flxanimate/animate/FlxSymbol.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_objects_Bar
#include <objects/Bar.h>
#endif
#ifndef INCLUDED_objects_Character
#include <objects/Character.h>
#endif
#ifndef INCLUDED_objects_HealthIcon
#include <objects/HealthIcon.h>
#endif
#ifndef INCLUDED_objects_Note
#include <objects/Note.h>
#endif
#ifndef INCLUDED_objects_NoteSplash
#include <objects/NoteSplash.h>
#endif
#ifndef INCLUDED_objects_StrumNote
#include <objects/StrumNote.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Application
#include <openfl/display/Application.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_psychlua_DebugLuaText
#include <psychlua/DebugLuaText.h>
#endif
#ifndef INCLUDED_psychlua_FunkinLua
#include <psychlua/FunkinLua.h>
#endif
#ifndef INCLUDED_psychlua_HScript
#include <psychlua/HScript.h>
#endif
#ifndef INCLUDED_psychlua_LuaUtils
#include <psychlua/LuaUtils.h>
#endif
#ifndef INCLUDED_psychlua_ModchartSprite
#include <psychlua/ModchartSprite.h>
#endif
#ifndef INCLUDED_shaders_RGBPalette
#include <shaders/RGBPalette.h>
#endif
#ifndef INCLUDED_states_FreeplayState
#include <states/FreeplayState.h>
#endif
#ifndef INCLUDED_states_LoadingState
#include <states/LoadingState.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_states_StoryMenuState
#include <states/StoryMenuState.h>
#endif
#ifndef INCLUDED_states_editors_CharacterEditorState
#include <states/editors/CharacterEditorState.h>
#endif
#ifndef INCLUDED_states_editors_ChartingState
#include <states/editors/ChartingState.h>
#endif
#ifndef INCLUDED_states_stages_Limo
#include <states/stages/Limo.h>
#endif
#ifndef INCLUDED_states_stages_Mall
#include <states/stages/Mall.h>
#endif
#ifndef INCLUDED_states_stages_MallEvil
#include <states/stages/MallEvil.h>
#endif
#ifndef INCLUDED_states_stages_Philly
#include <states/stages/Philly.h>
#endif
#ifndef INCLUDED_states_stages_School
#include <states/stages/School.h>
#endif
#ifndef INCLUDED_states_stages_SchoolEvil
#include <states/stages/SchoolEvil.h>
#endif
#ifndef INCLUDED_states_stages_Spooky
#include <states/stages/Spooky.h>
#endif
#ifndef INCLUDED_states_stages_StageWeek1
#include <states/stages/StageWeek1.h>
#endif
#ifndef INCLUDED_states_stages_Tank
#include <states/stages/Tank.h>
#endif
#ifndef INCLUDED_substates_GameOverSubstate
#include <substates/GameOverSubstate.h>
#endif
#ifndef INCLUDED_substates_PauseSubState
#include <substates/PauseSubState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_tea_SScript
#include <tea/SScript.h>
#endif
#ifndef INCLUDED_tea_backend__SScriptException_SScriptException_Impl_
#include <tea/backend/_SScriptException/SScriptException_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_801e532e222627de_78_new,"states.PlayState","new",0x0e695aa3,"states.PlayState.new","states/PlayState.hx",78,0x36e487ae)
static const ::String _hx_array_data_0420cd31_1[] = {
	HX_("singLEFT",d6,39,ef,3b),HX_("singDOWN",31,2a,ad,36),HX_("singUP",6a,52,21,b9),HX_("singRIGHT",0d,6f,70,ac),
};
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_468_create,"states.PlayState","create",0x0cd56899,"states.PlayState.create","states/PlayState.hx",468,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_488_create,"states.PlayState","create",0x0cd56899,"states.PlayState.create","states/PlayState.hx",488,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_534_create,"states.PlayState","create",0x0cd56899,"states.PlayState.create","states/PlayState.hx",534,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_268_create,"states.PlayState","create",0x0cd56899,"states.PlayState.create","states/PlayState.hx",268,0x36e487ae)
static const ::String _hx_array_data_0420cd31_18[] = {
	HX_("note_left",b4,fe,20,a5),HX_("note_down",0f,ef,de,9f),HX_("note_up",c8,67,5c,4d),HX_("note_right",8f,ec,ca,4e),
};
static const Float _hx_array_data_0420cd31_19[] = {
	(Float)0,(Float)0,
};
static const Float _hx_array_data_0420cd31_20[] = {
	(Float)0,(Float)0,
};
static const Float _hx_array_data_0420cd31_21[] = {
	(Float)0,(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_647_set_songSpeed,"states.PlayState","set_songSpeed",0xb1a9b158,"states.PlayState.set_songSpeed","states/PlayState.hx",647,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_663_set_playbackRate,"states.PlayState","set_playbackRate",0x86851c75,"states.PlayState.set_playbackRate","states/PlayState.hx",663,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_698_addTextToDebug,"states.PlayState","addTextToDebug",0x2b3707a7,"states.PlayState.addTextToDebug","states/PlayState.hx",698,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_689_addTextToDebug,"states.PlayState","addTextToDebug",0x2b3707a7,"states.PlayState.addTextToDebug","states/PlayState.hx",689,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_707_reloadHealthBarColors,"states.PlayState","reloadHealthBarColors",0x93a70751,"states.PlayState.reloadHealthBarColors","states/PlayState.hx",707,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_712_addCharacterToList,"states.PlayState","addCharacterToList",0x6e9c97fe,"states.PlayState.addCharacterToList","states/PlayState.hx",712,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_747_startCharacterScripts,"states.PlayState","startCharacterScripts",0xc5a30ae4,"states.PlayState.startCharacterScripts","states/PlayState.hx",747,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_813_getLuaObject,"states.PlayState","getLuaObject",0xbc19987e,"states.PlayState.getLuaObject","states/PlayState.hx",813,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_822_startCharacterPos,"states.PlayState","startCharacterPos",0x1074ce70,"states.PlayState.startCharacterPos","states/PlayState.hx",822,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_833_startVideo,"states.PlayState","startVideo",0x8b5680d6,"states.PlayState.startVideo","states/PlayState.hx",833,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_877_startAndEnd,"states.PlayState","startAndEnd",0xdbc44489,"states.PlayState.startAndEnd","states/PlayState.hx",877,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_887_startDialogue,"states.PlayState","startDialogue",0xa6abab9d,"states.PlayState.startDialogue","states/PlayState.hx",887,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_896_startDialogue,"states.PlayState","startDialogue",0xa6abab9d,"states.PlayState.startDialogue","states/PlayState.hx",896,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_901_startDialogue,"states.PlayState","startDialogue",0xa6abab9d,"states.PlayState.startDialogue","states/PlayState.hx",901,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_926_cacheCountdown,"states.PlayState","cacheCountdown",0x7d7fa4ac,"states.PlayState.cacheCountdown","states/PlayState.hx",926,0x36e487ae)
static const ::String _hx_array_data_0420cd31_44[] = {
	HX_("ready",63,a0,ba,e6),HX_("set",a2,9b,57,00),HX_("go",28,5a,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_944_startCountdown,"states.PlayState","startCountdown",0x9f2c868c,"states.PlayState.startCountdown","states/PlayState.hx",944,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1024_startCountdown,"states.PlayState","startCountdown",0x9f2c868c,"states.PlayState.startCountdown","states/PlayState.hx",1024,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1033_startCountdown,"states.PlayState","startCountdown",0x9f2c868c,"states.PlayState.startCountdown","states/PlayState.hx",1033,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_987_startCountdown,"states.PlayState","startCountdown",0x9f2c868c,"states.PlayState.startCountdown","states/PlayState.hx",987,0x36e487ae)
static const ::String _hx_array_data_0420cd31_52[] = {
	HX_("ready",63,a0,ba,e6),HX_("set",a2,9b,57,00),HX_("go",28,5a,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1008_startCountdown,"states.PlayState","startCountdown",0x9f2c868c,"states.PlayState.startCountdown","states/PlayState.hx",1008,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1012_startCountdown,"states.PlayState","startCountdown",0x9f2c868c,"states.PlayState.startCountdown","states/PlayState.hx",1012,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1016_startCountdown,"states.PlayState","startCountdown",0x9f2c868c,"states.PlayState.startCountdown","states/PlayState.hx",1016,0x36e487ae)
static const int _hx_array_data_0420cd31_56[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1059_createCountdownSprite,"states.PlayState","createCountdownSprite",0x34e6eefd,"states.PlayState.createCountdownSprite","states/PlayState.hx",1059,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1044_createCountdownSprite,"states.PlayState","createCountdownSprite",0x34e6eefd,"states.PlayState.createCountdownSprite","states/PlayState.hx",1044,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1069_addBehindGF,"states.PlayState","addBehindGF",0xd4b3cddd,"states.PlayState.addBehindGF","states/PlayState.hx",1069,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1073_addBehindBF,"states.PlayState","addBehindBF",0xd4b3c982,"states.PlayState.addBehindBF","states/PlayState.hx",1073,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1077_addBehindDad,"states.PlayState","addBehindDad",0x489e24a9,"states.PlayState.addBehindDad","states/PlayState.hx",1077,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1081_clearNotesBefore,"states.PlayState","clearNotesBefore",0x17b4faf0,"states.PlayState.clearNotesBefore","states/PlayState.hx",1081,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1117___default_updateScore,"states.PlayState","__default_updateScore",0x7d6278ae,"states.PlayState.__default_updateScore","states/PlayState.hx",1117,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1143___default_fullComboFunction,"states.PlayState","__default_fullComboFunction",0xde9eac5c,"states.PlayState.__default_fullComboFunction","states/PlayState.hx",1143,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1173_doScoreBop,"states.PlayState","doScoreBop",0xb46f0c99,"states.PlayState.doScoreBop","states/PlayState.hx",1173,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1162_doScoreBop,"states.PlayState","doScoreBop",0xb46f0c99,"states.PlayState.doScoreBop","states/PlayState.hx",1162,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1179_setSongTime,"states.PlayState","setSongTime",0x6e13f987,"states.PlayState.setSongTime","states/PlayState.hx",1179,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1204_startNextDialogue,"states.PlayState","startNextDialogue",0x398cbe30,"states.PlayState.startNextDialogue","states/PlayState.hx",1204,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1210_skipDialogue,"states.PlayState","skipDialogue",0x8ecaac14,"states.PlayState.skipDialogue","states/PlayState.hx",1210,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1220_startSong,"states.PlayState","startSong",0xc542bbda,"states.PlayState.startSong","states/PlayState.hx",1220,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1214_startSong,"states.PlayState","startSong",0xc542bbda,"states.PlayState.startSong","states/PlayState.hx",1214,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1251_generateSong,"states.PlayState","generateSong",0x9e928307,"states.PlayState.generateSong","states/PlayState.hx",1251,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1427_eventPushed,"states.PlayState","eventPushed",0xc85865b6,"states.PlayState.eventPushed","states/PlayState.hx",1427,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1421_eventPushed,"states.PlayState","eventPushed",0xc85865b6,"states.PlayState.eventPushed","states/PlayState.hx",1421,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1453_eventPushedUnique,"states.PlayState","eventPushedUnique",0xba9b9967,"states.PlayState.eventPushedUnique","states/PlayState.hx",1453,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1432_eventPushedUnique,"states.PlayState","eventPushedUnique",0xba9b9967,"states.PlayState.eventPushedUnique","states/PlayState.hx",1432,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1456_eventEarlyTrigger,"states.PlayState","eventEarlyTrigger",0xf614ab92,"states.PlayState.eventEarlyTrigger","states/PlayState.hx",1456,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1473_makeEvent,"states.PlayState","makeEvent",0x09545dcf,"states.PlayState.makeEvent","states/PlayState.hx",1473,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1487_generateStaticArrows,"states.PlayState","generateStaticArrows",0xbbc6ff0a,"states.PlayState.generateStaticArrows","states/PlayState.hx",1487,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1532_openSubState,"states.PlayState","openSubState",0xb6aefbb8,"states.PlayState.openSubState","states/PlayState.hx",1532,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1531_openSubState,"states.PlayState","openSubState",0xb6aefbb8,"states.PlayState.openSubState","states/PlayState.hx",1531,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1541_openSubState,"states.PlayState","openSubState",0xb6aefbb8,"states.PlayState.openSubState","states/PlayState.hx",1541,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1542_openSubState,"states.PlayState","openSubState",0xb6aefbb8,"states.PlayState.openSubState","states/PlayState.hx",1542,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1552_closeSubState,"states.PlayState","closeSubState",0xfe8e344c,"states.PlayState.closeSubState","states/PlayState.hx",1552,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1549_closeSubState,"states.PlayState","closeSubState",0xfe8e344c,"states.PlayState.closeSubState","states/PlayState.hx",1549,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1559_closeSubState,"states.PlayState","closeSubState",0xfe8e344c,"states.PlayState.closeSubState","states/PlayState.hx",1559,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1560_closeSubState,"states.PlayState","closeSubState",0xfe8e344c,"states.PlayState.closeSubState","states/PlayState.hx",1560,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1569_onFocus,"states.PlayState","onFocus",0xb74265fc,"states.PlayState.onFocus","states/PlayState.hx",1569,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1575_onFocusLost,"states.PlayState","onFocusLost",0x4463ea00,"states.PlayState.onFocusLost","states/PlayState.hx",1575,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1586_resetRPC,"states.PlayState","resetRPC",0x1f5c6333,"states.PlayState.resetRPC","states/PlayState.hx",1586,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1598_resyncVocals,"states.PlayState","resyncVocals",0xea53abe9,"states.PlayState.resyncVocals","states/PlayState.hx",1598,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1630_update,"states.PlayState","update",0x17cb87a6,"states.PlayState.update","states/PlayState.hx",1630,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1755_update,"states.PlayState","update",0x17cb87a6,"states.PlayState.update","states/PlayState.hx",1755,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1786_update,"states.PlayState","update",0x17cb87a6,"states.PlayState.update","states/PlayState.hx",1786,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1817___default_updateIconsScale,"states.PlayState","__default_updateIconsScale",0xa0801274,"states.PlayState.__default_updateIconsScale","states/PlayState.hx",1817,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1828___default_updateIconsPosition,"states.PlayState","__default_updateIconsPosition",0xabe12aff,"states.PlayState.__default_updateIconsPosition","states/PlayState.hx",1828,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1836_set_health,"states.PlayState","set_health",0x294ecaf6,"states.PlayState.set_health","states/PlayState.hx",1836,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1854_openPauseMenu,"states.PlayState","openPauseMenu",0x62e52a8e,"states.PlayState.openPauseMenu","states/PlayState.hx",1854,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1882_openChartEditor,"states.PlayState","openChartEditor",0x6f50a444,"states.PlayState.openChartEditor","states/PlayState.hx",1882,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1899_openCharacterEditor,"states.PlayState","openCharacterEditor",0x90328dcf,"states.PlayState.openCharacterEditor","states/PlayState.hx",1899,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1910_doDeathCheck,"states.PlayState","doDeathCheck",0x4d7cc9bc,"states.PlayState.doDeathCheck","states/PlayState.hx",1910,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1950_checkEventNote,"states.PlayState","checkEventNote",0x750a75e1,"states.PlayState.checkEventNote","states/PlayState.hx",1950,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2206_triggerEvent,"states.PlayState","triggerEvent",0x73c18d1f,"states.PlayState.triggerEvent","states/PlayState.hx",2206,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1969_triggerEvent,"states.PlayState","triggerEvent",0x73c18d1f,"states.PlayState.triggerEvent","states/PlayState.hx",1969,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2175_triggerEvent,"states.PlayState","triggerEvent",0x73c18d1f,"states.PlayState.triggerEvent","states/PlayState.hx",2175,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2210_moveCameraSection,"states.PlayState","moveCameraSection",0x92a32572,"states.PlayState.moveCameraSection","states/PlayState.hx",2210,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2233_moveCamera,"states.PlayState","moveCamera",0x3ffe54b3,"states.PlayState.moveCamera","states/PlayState.hx",2233,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2252_moveCamera,"states.PlayState","moveCamera",0x3ffe54b3,"states.PlayState.moveCamera","states/PlayState.hx",2252,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2259_tweenCamIn,"states.PlayState","tweenCamIn",0x30a3cb86,"states.PlayState.tweenCamIn","states/PlayState.hx",2259,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2263_tweenCamIn,"states.PlayState","tweenCamIn",0x30a3cb86,"states.PlayState.tweenCamIn","states/PlayState.hx",2263,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2270_finishSong,"states.PlayState","finishSong",0x10d649e5,"states.PlayState.finishSong","states/PlayState.hx",2270,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2283_finishSong,"states.PlayState","finishSong",0x10d649e5,"states.PlayState.finishSong","states/PlayState.hx",2283,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2291_endSong,"states.PlayState","endSong",0x4af84513,"states.PlayState.endSong","states/PlayState.hx",2291,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2295_endSong,"states.PlayState","endSong",0x4af84513,"states.PlayState.endSong","states/PlayState.hx",2295,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2399_KillNotes,"states.PlayState","KillNotes",0xeef30e26,"states.PlayState.KillNotes","states/PlayState.hx",2399,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2425_cachePopUpScore,"states.PlayState","cachePopUpScore",0x7d31c90b,"states.PlayState.cachePopUpScore","states/PlayState.hx",2425,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2581_popUpScore,"states.PlayState","popUpScore",0x78363583,"states.PlayState.popUpScore","states/PlayState.hx",2581,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2441_popUpScore,"states.PlayState","popUpScore",0x78363583,"states.PlayState.popUpScore","states/PlayState.hx",2441,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2566_popUpScore,"states.PlayState","popUpScore",0x78363583,"states.PlayState.popUpScore","states/PlayState.hx",2566,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2591_onKeyPress,"states.PlayState","onKeyPress",0x22ec61c0,"states.PlayState.onKeyPress","states/PlayState.hx",2591,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2608_keyPressed,"states.PlayState","keyPressed",0xe0b206e0,"states.PlayState.keyPressed","states/PlayState.hx",2608,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2679_onKeyRelease,"states.PlayState","onKeyRelease",0x1f1f5d44,"states.PlayState.onKeyRelease","states/PlayState.hx",2679,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2686_keyReleased,"states.PlayState","keyReleased",0xc1ea0abf,"states.PlayState.keyReleased","states/PlayState.hx",2686,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2718_keysCheck,"states.PlayState","keysCheck",0xf758b0b7,"states.PlayState.keysCheck","states/PlayState.hx",2718,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2776_noteMiss,"states.PlayState","noteMiss",0x270edaeb,"states.PlayState.noteMiss","states/PlayState.hx",2776,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2773_noteMiss,"states.PlayState","noteMiss",0x270edaeb,"states.PlayState.noteMiss","states/PlayState.hx",2773,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2786_noteMissPress,"states.PlayState","noteMissPress",0xa46e7498,"states.PlayState.noteMissPress","states/PlayState.hx",2786,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2795_noteMissCommon,"states.PlayState","noteMissCommon",0x54a54676,"states.PlayState.noteMissCommon","states/PlayState.hx",2795,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2876_opponentNoteHit,"states.PlayState","opponentNoteHit",0x0fe9d827,"states.PlayState.opponentNoteHit","states/PlayState.hx",2876,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2916_goodNoteHit,"states.PlayState","goodNoteHit",0x25a25307,"states.PlayState.goodNoteHit","states/PlayState.hx",2916,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2999_invalidateNote,"states.PlayState","invalidateNote",0x85139daa,"states.PlayState.invalidateNote","states/PlayState.hx",2999,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3006_spawnNoteSplashOnNote,"states.PlayState","spawnNoteSplashOnNote",0xe8ef5be8,"states.PlayState.spawnNoteSplashOnNote","states/PlayState.hx",3006,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3013_spawnNoteSplash,"states.PlayState","spawnNoteSplash",0x2955cbd7,"states.PlayState.spawnNoteSplash","states/PlayState.hx",3013,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3019_destroy,"states.PlayState","destroy",0x410194bd,"states.PlayState.destroy","states/PlayState.hx",3019,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3054_stepHit,"states.PlayState","stepHit",0x9dbd162a,"states.PlayState.stepHit","states/PlayState.hx",3054,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3081_beatHit,"states.PlayState","beatHit",0x90805240,"states.PlayState.beatHit","states/PlayState.hx",3081,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3088_beatHit,"states.PlayState","beatHit",0x90805240,"states.PlayState.beatHit","states/PlayState.hx",3088,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3106_characterBopper,"states.PlayState","characterBopper",0x3ad65206,"states.PlayState.characterBopper","states/PlayState.hx",3106,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3116_playerDance,"states.PlayState","playerDance",0xde402d55,"states.PlayState.playerDance","states/PlayState.hx",3116,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3123_sectionHit,"states.PlayState","sectionHit",0xf711898b,"states.PlayState.sectionHit","states/PlayState.hx",3123,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3154_startLuasNamed,"states.PlayState","startLuasNamed",0x3dbc27d9,"states.PlayState.startLuasNamed","states/PlayState.hx",3154,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3178_startHScriptsNamed,"states.PlayState","startHScriptsNamed",0xb8736e74,"states.PlayState.startHScriptsNamed","states/PlayState.hx",3178,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3199_initHScript,"states.PlayState","initHScript",0x1bf574a6,"states.PlayState.initHScript","states/PlayState.hx",3199,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3248_callOnScripts,"states.PlayState","callOnScripts",0x00f6942e,"states.PlayState.callOnScripts","states/PlayState.hx",3248,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3259_callOnLuas,"states.PlayState","callOnLuas",0x4db99bd5,"states.PlayState.callOnLuas","states/PlayState.hx",3259,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3298_callOnHScript,"states.PlayState","callOnHScript",0x34bf98b9,"states.PlayState.callOnHScript","states/PlayState.hx",3298,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3346_setOnScripts,"states.PlayState","setOnScripts",0xa8450a04,"states.PlayState.setOnScripts","states/PlayState.hx",3346,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3352_setOnLuas,"states.PlayState","setOnLuas",0x09e4c43f,"states.PlayState.setOnLuas","states/PlayState.hx",3352,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3364_setOnHScript,"states.PlayState","setOnHScript",0xdc0e0e8f,"states.PlayState.setOnHScript","states/PlayState.hx",3364,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3378_strumPlayAnim,"states.PlayState","strumPlayAnim",0x3aa71091,"states.PlayState.strumPlayAnim","states/PlayState.hx",3378,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3395_RecalculateRating,"states.PlayState","RecalculateRating",0x439ba533,"states.PlayState.RecalculateRating","states/PlayState.hx",3395,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3482_createRuntimeShader,"states.PlayState","createRuntimeShader",0x1421d5c4,"states.PlayState.createRuntimeShader","states/PlayState.hx",3482,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3501_initLuaShader,"states.PlayState","initLuaShader",0xaa9985d0,"states.PlayState.initLuaShader","states/PlayState.hx",3501,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_141_get_isPixelStage,"states.PlayState","get_isPixelStage",0x64d0cb48,"states.PlayState.get_isPixelStage","states/PlayState.hx",141,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1470_sortByTime,"states.PlayState","sortByTime",0xa7748f9f,"states.PlayState.sortByTime","states/PlayState.hx",1470,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2669_sortHitNotes,"states.PlayState","sortHitNotes",0xd83e3fc9,"states.PlayState.sortHitNotes","states/PlayState.hx",2669,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2702_getKeyFromEvent,"states.PlayState","getKeyFromEvent",0x839e152a,"states.PlayState.getKeyFromEvent","states/PlayState.hx",2702,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_80_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",80,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_81_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",81,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_83_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",83,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_135_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",135,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_136_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",136,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_143_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",143,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_144_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",144,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_145_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",145,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_146_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",146,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_147_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",147,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_190_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",190,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_191_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",191,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_219_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",219,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_220_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",220,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_221_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",221,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_222_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",222,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_227_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",227,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_923_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",923,0x36e487ae)
namespace states{

void PlayState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_78_new)
HXLINE(3480)		this->runtimeShaders =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(3392)		this->ratingName = HX_("?",3f,00,00,00);
HXLINE(3078)		this->lastBeatHit = -1;
HXLINE(3052)		this->lastStepHit = -1;
HXLINE(2589)		this->strumsBlocked = ::Array_obj< bool >::__new(0);
HXLINE(2415)		this->showRating = true;
HXLINE(2414)		this->showComboNum = true;
HXLINE(2413)		this->showCombo = false;
HXLINE(2411)		this->totalNotesHit = ((Float)0.0);
HXLINE(2410)		this->totalPlayed = 0;
HXLINE(2289)		this->transitioning = false;
HXLINE(1909)		this->isDead = false;
HXLINE(1834)		this->iconsAnimations = true;
HXLINE(1627)		this->allowDebugKeys = true;
HXLINE(1626)		this->freezeCamera = false;
HXLINE(1625)		this->canPause = true;
HXLINE(1624)		this->startedCountdown = false;
HXLINE(1623)		this->canReset = true;
HXLINE(1622)		this->paused = false;
HXLINE(1584)		this->autoUpdateRPC = true;
HXLINE(1485)		this->skipArrowStartTween = false;
HXLINE(1249)		this->eventsPushed = ::Array_obj< ::String >::__new(0);
HXLINE(1248)		this->noteTypes = ::Array_obj< ::String >::__new(0);
HXLINE(1247)		this->debugNum = 0;
HXLINE( 917)		this->finishTimer = null();
HXLINE( 883)		this->dialogueCount = 0;
HXLINE( 265)		this->endCallback = null();
HXLINE( 264)		this->startCallback = null();
HXLINE( 257)		this->introSoundsSuffix = HX_("",00,00,00,00);
HXLINE( 252)		this->luaArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 248)		this->boyfriendIdled = false;
HXLINE( 247)		this->boyfriendIdleTime = ((Float)0.0);
HXLINE( 246)		this->keysPressed = ::Array_obj< int >::__new(0);
HXLINE( 242)		this->detailsPausedText = HX_("",00,00,00,00);
HXLINE( 241)		this->detailsText = HX_("",00,00,00,00);
HXLINE( 240)		this->storyDifficultyText = HX_("",00,00,00,00);
HXLINE( 236)		this->girlfriendCameraOffset = null();
HXLINE( 235)		this->opponentCameraOffset = null();
HXLINE( 234)		this->boyfriendCameraOffset = null();
HXLINE( 232)		this->songLength = ((Float)0);
HXLINE( 231)		this->skipCountdown = false;
HXLINE( 230)		this->inCutscene = false;
HXLINE( 228)		this->singAnimations = ::Array_obj< ::String >::fromData( _hx_array_data_0420cd31_1,4);
HXLINE( 224)		this->defaultCamZoom = ((Float)1.05);
HXLINE( 214)		this->songMisses = 0;
HXLINE( 213)		this->songHits = 0;
HXLINE( 212)		this->songScore = 0;
HXLINE( 210)		this->cameraSpeed = ((Float)1);
HXLINE( 202)		this->botplaySine = ((Float)0);
HXLINE( 200)		this->practiceMode = false;
HXLINE( 199)		this->cpuControlled = false;
HXLINE( 198)		this->instakillOnMiss = false;
HXLINE( 197)		this->guitarHeroSustains = false;
HXLINE( 195)		this->healthLoss = ((Float)1);
HXLINE( 194)		this->healthGain = ((Float)1);
HXLINE( 189)		this->updateTime = true;
HXLINE( 188)		this->startingSong = false;
HXLINE( 187)		this->endingSong = false;
HXLINE( 186)		this->generatedMusic = false;
HXLINE( 184)		this->ratingsData = ::backend::Rating_obj::loadDefault();
HXLINE( 182)		this->songPercent = ((Float)0);
HXLINE( 178)		this->combo = 0;
HXLINE( 177)		this->health = ((Float)1);
HXLINE( 176)		this->gfSpeed = 1;
HXLINE( 174)		this->curSong = HX_("",00,00,00,00);
HXLINE( 173)		this->camZoomingDecay = ((Float)1);
HXLINE( 172)		this->camZoomingMult = ((Float)1);
HXLINE( 171)		this->camZooming = false;
HXLINE( 161)		this->eventNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 160)		this->unspawnNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 157)		this->boyfriend = null();
HXLINE( 156)		this->gf = null();
HXLINE( 155)		this->dad = null();
HXLINE( 149)		this->spawnTime = ((Float)2000);
HXLINE( 130)		this->playbackRate = ((Float)1);
HXLINE( 128)		this->noteKillOffset = ((Float)350);
HXLINE( 127)		this->songSpeedType = HX_("multiplicative",96,7a,3f,fa);
HXLINE( 126)		this->songSpeed = ((Float)1);
HXLINE( 123)		this->GF_Y = ((Float)130);
HXLINE( 122)		this->GF_X = ((Float)400);
HXLINE( 121)		this->DAD_Y = ((Float)100);
HXLINE( 120)		this->DAD_X = ((Float)100);
HXLINE( 119)		this->BF_Y = ((Float)100);
HXLINE( 118)		this->BF_X = ((Float)770);
HXLINE( 115)		this->modchartSaves =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 114)		this->modchartTexts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 113)		this->modchartSounds =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 112)		this->modchartTimers =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 111)		this->modchartSprites =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 110)		this->modchartTweens =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 106)		this->instancesExclude = ::Array_obj< ::String >::__new(0);
HXLINE( 105)		this->hscriptArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 102)		this->variables =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 101)		this->gfMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 100)		this->dadMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  99)		this->boyfriendMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  97)		this->isCameraOnForcedPos = false;
HXLINE(  78)		super::__construct(TransIn,TransOut);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x53aaab8a) {
		if (inClassId<=(int)0x26cbb7db) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x26cbb7db;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x53aaab8a;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			if (inClassId<=(int)0x62817b24) {
				return inClassId==(int)0x563293a6 || inClassId==(int)0x62817b24;
			} else {
				return inClassId==(int)0x7c795c9f;
			}
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void PlayState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::backend::BaseStage stage){
            			HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_468_create)
HXLINE( 468)			stage->createPost();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::PlayState,_gthis) HXARGC(0)
            		Float _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_488_create)
HXLINE( 488)			return _gthis->songPercent;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::PlayState,_gthis) HXARGC(0)
            		Float _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_534_create)
HXLINE( 534)			return _gthis->health;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_268_create)
HXDLIN( 268)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 269)		::openfl::Lib_obj::get_application()->_hx___window->set_title(HX_("Randomness Funkin",77,f5,c5,3f));
HXLINE( 272)		::backend::Paths_obj::clearStoredMemory();
HXLINE( 274)		this->startCallback = this->startCountdown_dyn();
HXLINE( 275)		this->endCallback = this->endSong_dyn();
HXLINE( 278)		::states::PlayState_obj::instance = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 280)		::substates::PauseSubState_obj::songName = null();
HXLINE( 281)		 ::Dynamic defaultValue = null();
HXDLIN( 281)		defaultValue = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("songspeed",92,6f,b6,1d));
HXDLIN( 281)		 ::Dynamic _hx_tmp;
HXDLIN( 281)		if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("songspeed",92,6f,b6,1d))) {
HXLINE( 281)			_hx_tmp = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("songspeed",92,6f,b6,1d));
            		}
            		else {
HXLINE( 281)			_hx_tmp = defaultValue;
            		}
HXDLIN( 281)		this->set_playbackRate(( (Float)(_hx_tmp) ));
HXLINE( 283)		this->keysArray = ::Array_obj< ::String >::fromData( _hx_array_data_0420cd31_18,4);
HXLINE( 290)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 291)			 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 291)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE( 294)		 ::Dynamic defaultValue1 = null();
HXDLIN( 294)		defaultValue1 = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("healthgain",1b,97,1b,16));
HXDLIN( 294)		 ::Dynamic _hx_tmp1;
HXDLIN( 294)		if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("healthgain",1b,97,1b,16))) {
HXLINE( 294)			_hx_tmp1 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("healthgain",1b,97,1b,16));
            		}
            		else {
HXLINE( 294)			_hx_tmp1 = defaultValue1;
            		}
HXDLIN( 294)		this->healthGain = ( (Float)(_hx_tmp1) );
HXLINE( 295)		 ::Dynamic defaultValue2 = null();
HXDLIN( 295)		defaultValue2 = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("healthloss",7f,50,74,19));
HXDLIN( 295)		 ::Dynamic _hx_tmp2;
HXDLIN( 295)		if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("healthloss",7f,50,74,19))) {
HXLINE( 295)			_hx_tmp2 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("healthloss",7f,50,74,19));
            		}
            		else {
HXLINE( 295)			_hx_tmp2 = defaultValue2;
            		}
HXDLIN( 295)		this->healthLoss = ( (Float)(_hx_tmp2) );
HXLINE( 296)		 ::Dynamic defaultValue3 = null();
HXDLIN( 296)		defaultValue3 = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("instakill",f9,72,23,49));
HXDLIN( 296)		 ::Dynamic _hx_tmp3;
HXDLIN( 296)		if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("instakill",f9,72,23,49))) {
HXLINE( 296)			_hx_tmp3 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("instakill",f9,72,23,49));
            		}
            		else {
HXLINE( 296)			_hx_tmp3 = defaultValue3;
            		}
HXDLIN( 296)		this->instakillOnMiss = ( (bool)(_hx_tmp3) );
HXLINE( 297)		 ::Dynamic defaultValue4 = null();
HXDLIN( 297)		defaultValue4 = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("practice",bb,00,e7,a0));
HXDLIN( 297)		 ::Dynamic _hx_tmp4;
HXDLIN( 297)		if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("practice",bb,00,e7,a0))) {
HXLINE( 297)			_hx_tmp4 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("practice",bb,00,e7,a0));
            		}
            		else {
HXLINE( 297)			_hx_tmp4 = defaultValue4;
            		}
HXDLIN( 297)		this->practiceMode = ( (bool)(_hx_tmp4) );
HXLINE( 298)		 ::Dynamic defaultValue5 = null();
HXDLIN( 298)		defaultValue5 = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("botplay",7b,fb,a9,61));
HXDLIN( 298)		 ::Dynamic _hx_tmp5;
HXDLIN( 298)		if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("botplay",7b,fb,a9,61))) {
HXLINE( 298)			_hx_tmp5 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("botplay",7b,fb,a9,61));
            		}
            		else {
HXLINE( 298)			_hx_tmp5 = defaultValue5;
            		}
HXDLIN( 298)		this->cpuControlled = ( (bool)(_hx_tmp5) );
HXLINE( 299)		this->guitarHeroSustains = ::backend::ClientPrefs_obj::data->guitarHeroSustains;
HXLINE( 302)		this->camGame = this->initPsychCamera();
HXLINE( 303)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 304)		this->camOther =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 305)		{
HXLINE( 305)			 ::flixel::FlxCamera _hx_tmp6 = this->camHUD;
HXDLIN( 305)			_hx_tmp6->bgColor = (_hx_tmp6->bgColor & 16777215);
HXDLIN( 305)			 ::flixel::FlxCamera _hx_tmp7 = this->camHUD;
HXDLIN( 305)			_hx_tmp7->bgColor = (_hx_tmp7->bgColor | 0);
            		}
HXLINE( 306)		{
HXLINE( 306)			 ::flixel::FlxCamera _hx_tmp8 = this->camOther;
HXDLIN( 306)			_hx_tmp8->bgColor = (_hx_tmp8->bgColor & 16777215);
HXDLIN( 306)			 ::flixel::FlxCamera _hx_tmp9 = this->camOther;
HXDLIN( 306)			_hx_tmp9->bgColor = (_hx_tmp9->bgColor | 0);
            		}
HXLINE( 308)		::flixel::FlxG_obj::cameras->add(this->camHUD,false).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 309)		::flixel::FlxG_obj::cameras->add(this->camOther,false).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 310)		this->grpNoteSplashes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 312)		this->persistentUpdate = true;
HXLINE( 313)		this->persistentDraw = true;
HXLINE( 315)		if (::hx::IsNull( ::states::PlayState_obj::SONG )) {
HXLINE( 316)			::states::PlayState_obj::SONG = ::backend::Song_obj::loadFromJson(HX_("tutorial",9e,8f,b5,82),null());
            		}
HXLINE( 318)		::backend::Conductor_obj::mapBPMChanges(::states::PlayState_obj::SONG);
HXLINE( 319)		::backend::Conductor_obj::set_bpm(( (Float)(::states::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE( 324)		 ::Dynamic num = null();
HXDLIN( 324)		 ::Dynamic _hx_tmp10;
HXDLIN( 324)		if (::hx::IsNull( num )) {
HXLINE( 324)			_hx_tmp10 = ::states::PlayState_obj::storyDifficulty;
            		}
            		else {
HXLINE( 324)			_hx_tmp10 = num;
            		}
HXDLIN( 324)		this->storyDifficultyText = ::backend::Difficulty_obj::list->__get(( (int)(_hx_tmp10) ));
HXLINE( 326)		if (::states::PlayState_obj::isStoryMode) {
HXLINE( 327)			this->detailsText = (HX_("Story Mode: ",d4,01,86,36) + ::backend::WeekData_obj::getCurrentWeek()->weekName);
            		}
            		else {
HXLINE( 329)			this->detailsText = HX_("Freeplay",c0,4c,38,fc);
            		}
HXLINE( 332)		this->detailsPausedText = (HX_("Paused - ",65,2f,92,fd) + this->detailsText);
HXLINE( 335)		::substates::GameOverSubstate_obj::resetVariables();
HXLINE( 336)		::String path = ( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN( 336)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN( 336)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN( 336)		::String path1 = invalidChars->split(::StringTools_obj::replace(path,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN( 336)		this->songName = hideChars->split(path1)->join(HX_("",00,00,00,00)).toLowerCase();
HXLINE( 337)		bool _hx_tmp11;
HXDLIN( 337)		if (::hx::IsNotNull( ::states::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic) )) {
HXLINE( 337)			_hx_tmp11 = (( (::String)(::states::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) ).length < 1);
            		}
            		else {
HXLINE( 337)			_hx_tmp11 = true;
            		}
HXDLIN( 337)		if (_hx_tmp11) {
HXLINE( 338)			::states::PlayState_obj::SONG->__SetField(HX_("stage",be,6a,0b,84),::backend::StageData_obj::vanillaSongStage(this->songName),::hx::paccDynamic);
            		}
HXLINE( 340)		::states::PlayState_obj::curStage = ( (::String)(::states::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) );
HXLINE( 342)		 ::Dynamic stageData = ::backend::StageData_obj::getStageFile(::states::PlayState_obj::curStage);
HXLINE( 343)		if (::hx::IsNull( stageData )) {
HXLINE( 344)			stageData = ::backend::StageData_obj::dummy();
            		}
HXLINE( 347)		this->defaultCamZoom = ( (Float)(stageData->__Field(HX_("defaultZoom",74,9c,b7,22),::hx::paccDynamic)) );
HXLINE( 349)		::states::PlayState_obj::stageUI = HX_("normal",27,72,69,30);
HXLINE( 350)		bool _hx_tmp12;
HXDLIN( 350)		if (::hx::IsNotNull( stageData->__Field(HX_("stageUI",92,60,ca,2d),::hx::paccDynamic) )) {
HXLINE( 350)			_hx_tmp12 = (::StringTools_obj::trim(( (::String)(stageData->__Field(HX_("stageUI",92,60,ca,2d),::hx::paccDynamic)) )).length > 0);
            		}
            		else {
HXLINE( 350)			_hx_tmp12 = false;
            		}
HXDLIN( 350)		if (_hx_tmp12) {
HXLINE( 351)			::states::PlayState_obj::stageUI = ( (::String)(stageData->__Field(HX_("stageUI",92,60,ca,2d),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 353)			if (( (bool)(stageData->__Field(HX_("isPixelStage",e2,d6,18,f5),::hx::paccDynamic)) )) {
HXLINE( 354)				::states::PlayState_obj::stageUI = HX_("pixel",86,c6,a3,c2);
            			}
            		}
HXLINE( 357)		this->BF_X = ( (Float)( ::Dynamic(stageData->__Field(HX_("boyfriend",6a,29,b8,e6),::hx::paccDynamic))->__GetItem(0)) );
HXLINE( 358)		this->BF_Y = ( (Float)( ::Dynamic(stageData->__Field(HX_("boyfriend",6a,29,b8,e6),::hx::paccDynamic))->__GetItem(1)) );
HXLINE( 359)		this->GF_X = ( (Float)( ::Dynamic(stageData->__Field(HX_("girlfriend",ba,91,48,98),::hx::paccDynamic))->__GetItem(0)) );
HXLINE( 360)		this->GF_Y = ( (Float)( ::Dynamic(stageData->__Field(HX_("girlfriend",ba,91,48,98),::hx::paccDynamic))->__GetItem(1)) );
HXLINE( 361)		this->DAD_X = ( (Float)( ::Dynamic(stageData->__Field(HX_("opponent",9d,b9,b8,f8),::hx::paccDynamic))->__GetItem(0)) );
HXLINE( 362)		this->DAD_Y = ( (Float)( ::Dynamic(stageData->__Field(HX_("opponent",9d,b9,b8,f8),::hx::paccDynamic))->__GetItem(1)) );
HXLINE( 364)		if (::hx::IsNotNull( stageData->__Field(HX_("camera_speed",2d,2f,ab,11),::hx::paccDynamic) )) {
HXLINE( 365)			this->cameraSpeed = ( (Float)(stageData->__Field(HX_("camera_speed",2d,2f,ab,11),::hx::paccDynamic)) );
            		}
HXLINE( 367)		this->boyfriendCameraOffset = ( (::Array< Float >)(stageData->__Field(HX_("camera_boyfriend",10,8c,95,41),::hx::paccDynamic)) );
HXLINE( 368)		if (::hx::IsNull( this->boyfriendCameraOffset )) {
HXLINE( 369)			this->boyfriendCameraOffset = ::Array_obj< Float >::fromData( _hx_array_data_0420cd31_19,2);
            		}
HXLINE( 371)		this->opponentCameraOffset = ( (::Array< Float >)(stageData->__Field(HX_("camera_opponent",b7,ed,08,84),::hx::paccDynamic)) );
HXLINE( 372)		if (::hx::IsNull( this->opponentCameraOffset )) {
HXLINE( 373)			this->opponentCameraOffset = ::Array_obj< Float >::fromData( _hx_array_data_0420cd31_20,2);
            		}
HXLINE( 375)		this->girlfriendCameraOffset = ( (::Array< Float >)(stageData->__Field(HX_("camera_girlfriend",54,80,21,bf),::hx::paccDynamic)) );
HXLINE( 376)		if (::hx::IsNull( this->girlfriendCameraOffset )) {
HXLINE( 377)			this->girlfriendCameraOffset = ::Array_obj< Float >::fromData( _hx_array_data_0420cd31_21,2);
            		}
HXLINE( 379)		this->boyfriendGroup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,this->BF_X,this->BF_Y,null());
HXLINE( 380)		this->dadGroup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,this->DAD_X,this->DAD_Y,null());
HXLINE( 381)		this->gfGroup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,this->GF_X,this->GF_Y,null());
HXLINE( 383)		::String _hx_switch_0 = ::states::PlayState_obj::curStage;
            		if (  (_hx_switch_0==HX_("limo",1f,17,b3,47)) ){
HXLINE( 388)			 ::states::stages::Limo_obj::__alloc( HX_CTX );
HXDLIN( 388)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("mall",d4,3a,56,48)) ){
HXLINE( 389)			 ::states::stages::Mall_obj::__alloc( HX_CTX );
HXDLIN( 389)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("mallEvil",88,d3,e3,a7)) ){
HXLINE( 390)			 ::states::stages::MallEvil_obj::__alloc( HX_CTX );
HXDLIN( 390)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("philly",28,77,5e,ef)) ){
HXLINE( 387)			 ::states::stages::Philly_obj::__alloc( HX_CTX );
HXDLIN( 387)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("school",74,b8,c8,40)) ){
HXLINE( 391)			 ::states::stages::School_obj::__alloc( HX_CTX );
HXDLIN( 391)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE( 392)			 ::states::stages::SchoolEvil_obj::__alloc( HX_CTX );
HXDLIN( 392)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("spooky",eb,bd,9e,c1)) ){
HXLINE( 386)			 ::states::stages::Spooky_obj::__alloc( HX_CTX );
HXDLIN( 386)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("stage",be,6a,0b,84)) ){
HXLINE( 385)			 ::states::stages::StageWeek1_obj::__alloc( HX_CTX );
HXDLIN( 385)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("tank",ea,ba,f6,4c)) ){
HXLINE( 393)			 ::states::stages::Tank_obj::__alloc( HX_CTX );
HXDLIN( 393)			goto _hx_goto_2;
            		}
            		_hx_goto_2:;
HXLINE( 396)		if (::states::PlayState_obj::get_isPixelStage()) {
HXLINE( 397)			this->introSoundsSuffix = HX_("-pixel",39,03,b3,c0);
            		}
HXLINE( 400)		this->add(this->gfGroup);
HXLINE( 401)		this->add(this->dadGroup);
HXLINE( 402)		this->add(this->boyfriendGroup);
HXLINE( 405)		this->luaDebugGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 406)		this->luaDebugGroup->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camOther));
HXLINE( 407)		this->add(this->luaDebugGroup);
HXLINE( 412)		{
HXLINE( 412)			int _g = 0;
HXDLIN( 412)			::Array< ::String > foldersToCheck = ::Array_obj< ::String >::__new(0);
HXDLIN( 412)			if (::sys::FileSystem_obj::exists((HX_("assets/shared/",1e,69,1e,47) + HX_("scripts/",27,8b,98,1a)))) {
HXLINE( 412)				foldersToCheck->push((HX_("assets/shared/",1e,69,1e,47) + HX_("scripts/",27,8b,98,1a)));
            			}
HXDLIN( 412)			{
HXLINE( 412)				{
HXLINE( 412)					int _g1 = 0;
HXDLIN( 412)					::Array< ::String > _g2 = ::backend::Mods_obj::globalMods;
HXDLIN( 412)					while((_g1 < _g2->length)){
HXLINE( 412)						::String mod = _g2->__get(_g1);
HXDLIN( 412)						_g1 = (_g1 + 1);
HXDLIN( 412)						::String key = ((mod + HX_("/",2f,00,00,00)) + HX_("scripts/",27,8b,98,1a));
HXDLIN( 412)						if (::hx::IsNull( key )) {
HXLINE( 412)							key = HX_("",00,00,00,00);
            						}
HXDLIN( 412)						::String folder = (HX_("mods/",9e,2f,58,0c) + key);
HXDLIN( 412)						bool _hx_tmp13;
HXDLIN( 412)						if (::sys::FileSystem_obj::exists(folder)) {
HXLINE( 412)							_hx_tmp13 = !(foldersToCheck->contains(folder));
            						}
            						else {
HXLINE( 412)							_hx_tmp13 = false;
            						}
HXDLIN( 412)						if (_hx_tmp13) {
HXLINE( 412)							foldersToCheck->push(folder);
            						}
            					}
            				}
HXDLIN( 412)				::String key1 = HX_("scripts/",27,8b,98,1a);
HXDLIN( 412)				if (::hx::IsNull( key1 )) {
HXLINE( 412)					key1 = HX_("",00,00,00,00);
            				}
HXDLIN( 412)				::String folder1 = (HX_("mods/",9e,2f,58,0c) + key1);
HXDLIN( 412)				bool _hx_tmp14;
HXDLIN( 412)				if (::sys::FileSystem_obj::exists(folder1)) {
HXLINE( 412)					_hx_tmp14 = !(foldersToCheck->contains(folder1));
            				}
            				else {
HXLINE( 412)					_hx_tmp14 = false;
            				}
HXDLIN( 412)				if (_hx_tmp14) {
HXLINE( 412)					::String key2 = HX_("scripts/",27,8b,98,1a);
HXDLIN( 412)					if (::hx::IsNull( key2 )) {
HXLINE( 412)						key2 = HX_("",00,00,00,00);
            					}
HXDLIN( 412)					foldersToCheck->push((HX_("mods/",9e,2f,58,0c) + key2));
            				}
HXDLIN( 412)				bool _hx_tmp15;
HXDLIN( 412)				if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE( 412)					_hx_tmp15 = (::backend::Mods_obj::currentModDirectory.length > 0);
            				}
            				else {
HXLINE( 412)					_hx_tmp15 = false;
            				}
HXDLIN( 412)				if (_hx_tmp15) {
HXLINE( 412)					::String key3 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + HX_("scripts/",27,8b,98,1a));
HXDLIN( 412)					if (::hx::IsNull( key3 )) {
HXLINE( 412)						key3 = HX_("",00,00,00,00);
            					}
HXDLIN( 412)					::String folder2 = (HX_("mods/",9e,2f,58,0c) + key3);
HXDLIN( 412)					bool _hx_tmp16;
HXDLIN( 412)					if (::sys::FileSystem_obj::exists(folder2)) {
HXLINE( 412)						_hx_tmp16 = !(foldersToCheck->contains(folder2));
            					}
            					else {
HXLINE( 412)						_hx_tmp16 = false;
            					}
HXDLIN( 412)					if (_hx_tmp16) {
HXLINE( 412)						foldersToCheck->push(folder2);
            					}
            				}
            			}
HXDLIN( 412)			::Array< ::String > _g3 = foldersToCheck;
HXDLIN( 412)			while((_g < _g3->length)){
HXLINE( 412)				::String folder3 = _g3->__get(_g);
HXDLIN( 412)				_g = (_g + 1);
HXLINE( 413)				{
HXLINE( 413)					int _g4 = 0;
HXDLIN( 413)					::Array< ::String > _g5 = ::sys::FileSystem_obj::readDirectory(folder3);
HXDLIN( 413)					while((_g4 < _g5->length)){
HXLINE( 413)						::String file = _g5->__get(_g4);
HXDLIN( 413)						_g4 = (_g4 + 1);
HXLINE( 416)						if (::StringTools_obj::endsWith(file.toLowerCase(),HX_(".lua",4a,2a,ba,1e))) {
HXLINE( 417)							 ::psychlua::FunkinLua_obj::__alloc( HX_CTX ,(folder3 + file));
            						}
HXLINE( 421)						if (::StringTools_obj::endsWith(file.toLowerCase(),HX_(".hx",be,42,23,00))) {
HXLINE( 422)							this->initHScript((folder3 + file));
            						}
            					}
            				}
            			}
            		}
HXLINE( 429)		this->startLuasNamed(((HX_("stages/",9a,7a,ca,2d) + ::states::PlayState_obj::curStage) + HX_(".lua",4a,2a,ba,1e)));
HXLINE( 433)		this->startHScriptsNamed(((HX_("stages/",9a,7a,ca,2d) + ::states::PlayState_obj::curStage) + HX_(".hx",be,42,23,00)));
HXLINE( 436)		if (!(( (bool)(stageData->__Field(HX_("hide_girlfriend",57,bd,d9,f9),::hx::paccDynamic)) ))) {
HXLINE( 438)			bool _hx_tmp17;
HXDLIN( 438)			if (::hx::IsNotNull( ::states::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic) )) {
HXLINE( 438)				_hx_tmp17 = (( (::String)(::states::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) ).length < 1);
            			}
            			else {
HXLINE( 438)				_hx_tmp17 = true;
            			}
HXDLIN( 438)			if (_hx_tmp17) {
HXLINE( 438)				::states::PlayState_obj::SONG->__SetField(HX_("gfVersion",b9,c6,7d,f3),HX_("gf",1f,5a,00,00),::hx::paccDynamic);
            			}
HXLINE( 439)			this->gf =  ::objects::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),( (::String)(::states::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) ),null());
HXLINE( 440)			this->startCharacterPos(this->gf,null());
HXLINE( 441)			{
HXLINE( 441)				 ::flixel::math::FlxBasePoint this1 = this->gf->scrollFactor;
HXDLIN( 441)				this1->set_x(((Float)0.95));
HXDLIN( 441)				this1->set_y(((Float)0.95));
            			}
HXLINE( 442)			this->gfGroup->add(this->gf).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 443)			this->startCharacterScripts(this->gf->curCharacter);
            		}
HXLINE( 446)		this->dad =  ::objects::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),( (::String)(::states::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 447)		this->startCharacterPos(this->dad,true);
HXLINE( 448)		this->dadGroup->add(this->dad).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 449)		this->startCharacterScripts(this->dad->curCharacter);
HXLINE( 451)		this->boyfriend =  ::objects::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),( (::String)(::states::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),true);
HXLINE( 452)		this->startCharacterPos(this->boyfriend,null());
HXLINE( 453)		this->boyfriendGroup->add(this->boyfriend).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 454)		this->startCharacterScripts(this->boyfriend->curCharacter);
HXLINE( 456)		Float x = this->girlfriendCameraOffset->__get(0);
HXDLIN( 456)		Float y = this->girlfriendCameraOffset->__get(1);
HXDLIN( 456)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 456)		point->_inPool = false;
HXDLIN( 456)		 ::flixel::math::FlxBasePoint camPos = point;
HXLINE( 457)		if (::hx::IsNotNull( this->gf )) {
HXLINE( 459)			{
HXLINE( 459)				Float camPos1 = camPos->x;
HXDLIN( 459)				Float x1 = this->gf->getGraphicMidpoint(null())->x;
HXDLIN( 459)				camPos->set_x((camPos1 + (x1 + this->gf->cameraPosition->__get(0))));
            			}
HXLINE( 460)			{
HXLINE( 460)				Float camPos2 = camPos->y;
HXDLIN( 460)				Float y1 = this->gf->getGraphicMidpoint(null())->y;
HXDLIN( 460)				camPos->set_y((camPos2 + (y1 + this->gf->cameraPosition->__get(1))));
            			}
            		}
HXLINE( 463)		if (::StringTools_obj::startsWith(this->dad->curCharacter,HX_("gf",1f,5a,00,00))) {
HXLINE( 464)			this->dad->setPosition(this->GF_X,this->GF_Y);
HXLINE( 465)			if (::hx::IsNotNull( this->gf )) {
HXLINE( 466)				this->gf->set_visible(false);
            			}
            		}
HXLINE( 468)		this->stagesFunc( ::Dynamic(new _hx_Closure_0()));
HXLINE( 470)		this->comboGroup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 471)		this->add(this->comboGroup);
HXLINE( 472)		this->noteGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 473)		this->add(this->noteGroup);
HXLINE( 474)		this->uiGroup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 475)		this->add(this->uiGroup);
HXLINE( 477)		::backend::Conductor_obj::songPosition = (( (Float)(-5000) ) / ::backend::Conductor_obj::songPosition);
HXLINE( 478)		bool showTime = (::backend::ClientPrefs_obj::data->timeBarType != HX_("Disabled",9c,fd,b5,55));
HXLINE( 479)		this->timeTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,((::states::PlayState_obj::STRUM_X + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))) - ( (Float)(248) )),19,400,HX_("",00,00,00,00),32,null());
HXLINE( 480)		 ::flixel::text::FlxText _hx_tmp18 = this->timeTxt;
HXDLIN( 480)		::String file1 = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN( 480)		::String _hx_tmp19;
HXDLIN( 480)		if (::sys::FileSystem_obj::exists(file1)) {
HXLINE( 480)			_hx_tmp19 = file1;
            		}
            		else {
HXLINE( 480)			_hx_tmp19 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN( 480)		_hx_tmp18->setFormat(_hx_tmp19,32,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 481)		{
HXLINE( 481)			 ::flixel::math::FlxBasePoint this2 = this->timeTxt->scrollFactor;
HXDLIN( 481)			this2->set_x(( (Float)(0) ));
HXDLIN( 481)			this2->set_y(( (Float)(0) ));
            		}
HXLINE( 482)		this->timeTxt->set_alpha(( (Float)(0) ));
HXLINE( 483)		this->timeTxt->set_borderSize(( (Float)(2) ));
HXLINE( 484)		this->timeTxt->set_visible((this->updateTime = showTime));
HXLINE( 485)		if (::backend::ClientPrefs_obj::data->downScroll) {
HXLINE( 485)			this->timeTxt->set_y(( (Float)((::flixel::FlxG_obj::height - 44)) ));
            		}
HXLINE( 486)		if ((::backend::ClientPrefs_obj::data->timeBarType == HX_("Song Name",76,e6,ca,de))) {
HXLINE( 486)			this->timeTxt->set_text(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
            		}
HXLINE( 488)		Float _hx_tmp20 = this->timeTxt->y;
HXDLIN( 488)		this->timeBar =  ::objects::Bar_obj::__alloc( HX_CTX ,( (Float)(0) ),(_hx_tmp20 + (this->timeTxt->get_height() / ( (Float)(4) ))),HX_("timeBar",c6,e3,d4,d8), ::Dynamic(new _hx_Closure_1(_gthis)),0,1);
HXLINE( 489)		{
HXLINE( 489)			 ::flixel::math::FlxBasePoint this3 = this->timeBar->scrollFactor;
HXDLIN( 489)			this3->set_x(( (Float)(0) ));
HXDLIN( 489)			this3->set_y(( (Float)(0) ));
            		}
HXLINE( 490)		{
HXLINE( 490)			 ::objects::Bar _this1 = this->timeBar;
HXDLIN( 490)			int axes = 1;
HXDLIN( 490)			bool _hx_tmp21;
HXDLIN( 490)			if ((axes != 1)) {
HXLINE( 490)				_hx_tmp21 = (axes == 17);
            			}
            			else {
HXLINE( 490)				_hx_tmp21 = true;
            			}
HXDLIN( 490)			if (_hx_tmp21) {
HXLINE( 490)				int _hx_tmp22 = ::flixel::FlxG_obj::width;
HXDLIN( 490)				_this1->set_x(((( (Float)(_hx_tmp22) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 490)			bool _hx_tmp23;
HXDLIN( 490)			if ((axes != 16)) {
HXLINE( 490)				_hx_tmp23 = (axes == 17);
            			}
            			else {
HXLINE( 490)				_hx_tmp23 = true;
            			}
HXDLIN( 490)			if (_hx_tmp23) {
HXLINE( 490)				int _hx_tmp24 = ::flixel::FlxG_obj::height;
HXDLIN( 490)				_this1->set_y(((( (Float)(_hx_tmp24) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 491)		this->timeBar->set_alpha(( (Float)(0) ));
HXLINE( 492)		this->timeBar->set_visible(showTime);
HXLINE( 493)		this->uiGroup->add(this->timeBar).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 494)		this->uiGroup->add(this->timeTxt).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 496)		this->strumLineNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 497)		this->noteGroup->add(this->strumLineNotes).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 499)		if ((::backend::ClientPrefs_obj::data->timeBarType == HX_("Song Name",76,e6,ca,de))) {
HXLINE( 501)			this->timeTxt->set_size(24);
HXLINE( 502)			 ::flixel::text::FlxText fh = this->timeTxt;
HXDLIN( 502)			fh->set_y((fh->y + 3));
            		}
HXLINE( 505)		 ::objects::NoteSplash splash =  ::objects::NoteSplash_obj::__alloc( HX_CTX ,100,100);
HXLINE( 506)		this->grpNoteSplashes->add(splash).StaticCast<  ::objects::NoteSplash >();
HXLINE( 507)		splash->set_alpha(((Float)0.000001));
HXLINE( 509)		this->opponentStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 510)		this->playerStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 512)		this->generateSong(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
HXLINE( 514)		this->noteGroup->add(this->grpNoteSplashes).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 516)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE( 517)		this->camFollow->setPosition(camPos->x,camPos->y);
HXLINE( 518)		camPos->put();
HXLINE( 520)		if (::hx::IsNotNull( ::states::PlayState_obj::prevCamFollow )) {
HXLINE( 522)			this->camFollow = ::states::PlayState_obj::prevCamFollow;
HXLINE( 523)			::states::PlayState_obj::prevCamFollow = null();
            		}
HXLINE( 525)		this->add(this->camFollow);
HXLINE( 527)		::flixel::FlxG_obj::camera->follow(this->camFollow,::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn(),0);
HXLINE( 528)		::flixel::FlxG_obj::camera->set_zoom(this->defaultCamZoom);
HXLINE( 529)		::flixel::FlxG_obj::camera->snapToTarget();
HXLINE( 531)		{
HXLINE( 531)			 ::flixel::math::FlxRect _this2 = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 531)			_this2->x = ( (Float)(0) );
HXDLIN( 531)			_this2->y = ( (Float)(0) );
HXDLIN( 531)			_this2->width = ( (Float)(::flixel::FlxG_obj::width) );
HXDLIN( 531)			_this2->height = ( (Float)(::flixel::FlxG_obj::height) );
            		}
HXLINE( 532)		this->moveCameraSection(null());
HXLINE( 534)		Float _hx_tmp25;
HXDLIN( 534)		if (!(::backend::ClientPrefs_obj::data->downScroll)) {
HXLINE( 534)			_hx_tmp25 = ((Float)0.89);
            		}
            		else {
HXLINE( 534)			_hx_tmp25 = ((Float)0.11);
            		}
HXDLIN( 534)		this->healthBar =  ::objects::Bar_obj::__alloc( HX_CTX ,( (Float)(0) ),(( (Float)(::flixel::FlxG_obj::height) ) * _hx_tmp25),HX_("healthBar",97,8a,92,42), ::Dynamic(new _hx_Closure_2(_gthis)),0,2);
HXLINE( 535)		{
HXLINE( 535)			 ::objects::Bar _this3 = this->healthBar;
HXDLIN( 535)			int axes1 = 1;
HXDLIN( 535)			bool _hx_tmp26;
HXDLIN( 535)			if ((axes1 != 1)) {
HXLINE( 535)				_hx_tmp26 = (axes1 == 17);
            			}
            			else {
HXLINE( 535)				_hx_tmp26 = true;
            			}
HXDLIN( 535)			if (_hx_tmp26) {
HXLINE( 535)				int _hx_tmp27 = ::flixel::FlxG_obj::width;
HXDLIN( 535)				_this3->set_x(((( (Float)(_hx_tmp27) ) - _this3->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 535)			bool _hx_tmp28;
HXDLIN( 535)			if ((axes1 != 16)) {
HXLINE( 535)				_hx_tmp28 = (axes1 == 17);
            			}
            			else {
HXLINE( 535)				_hx_tmp28 = true;
            			}
HXDLIN( 535)			if (_hx_tmp28) {
HXLINE( 535)				int _hx_tmp29 = ::flixel::FlxG_obj::height;
HXDLIN( 535)				_this3->set_y(((( (Float)(_hx_tmp29) ) - _this3->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 536)		this->healthBar->set_leftToRight(false);
HXLINE( 537)		{
HXLINE( 537)			 ::flixel::math::FlxBasePoint this4 = this->healthBar->scrollFactor;
HXDLIN( 537)			this4->set_x(( (Float)(0) ));
HXDLIN( 537)			this4->set_y(( (Float)(0) ));
            		}
HXLINE( 538)		this->healthBar->set_visible(!(::backend::ClientPrefs_obj::data->hideHud));
HXLINE( 539)		this->healthBar->set_alpha(::backend::ClientPrefs_obj::data->healthBarAlpha);
HXLINE( 540)		this->reloadHealthBarColors();
HXLINE( 541)		this->uiGroup->add(this->healthBar).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 543)		this->iconP1 =  ::objects::HealthIcon_obj::__alloc( HX_CTX ,this->boyfriend->healthIcon,true,null());
HXLINE( 544)		this->iconP1->set_y((this->healthBar->y - ( (Float)(75) )));
HXLINE( 545)		this->iconP1->set_visible(!(::backend::ClientPrefs_obj::data->hideHud));
HXLINE( 546)		this->iconP1->set_alpha(::backend::ClientPrefs_obj::data->healthBarAlpha);
HXLINE( 547)		this->uiGroup->add(this->iconP1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 549)		this->iconP2 =  ::objects::HealthIcon_obj::__alloc( HX_CTX ,this->dad->healthIcon,false,null());
HXLINE( 550)		this->iconP2->set_y((this->healthBar->y - ( (Float)(75) )));
HXLINE( 551)		this->iconP2->set_visible(!(::backend::ClientPrefs_obj::data->hideHud));
HXLINE( 552)		this->iconP2->set_alpha(::backend::ClientPrefs_obj::data->healthBarAlpha);
HXLINE( 553)		this->uiGroup->add(this->iconP2).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 555)		this->scoreTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,(this->healthBar->y + 40),::flixel::FlxG_obj::width,HX_("",00,00,00,00),20,null());
HXLINE( 556)		 ::flixel::text::FlxText _hx_tmp30 = this->scoreTxt;
HXDLIN( 556)		::String file2 = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN( 556)		::String _hx_tmp31;
HXDLIN( 556)		if (::sys::FileSystem_obj::exists(file2)) {
HXLINE( 556)			_hx_tmp31 = file2;
            		}
            		else {
HXLINE( 556)			_hx_tmp31 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN( 556)		_hx_tmp30->setFormat(_hx_tmp31,20,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 557)		{
HXLINE( 557)			 ::flixel::math::FlxBasePoint this5 = this->scoreTxt->scrollFactor;
HXDLIN( 557)			this5->set_x(( (Float)(0) ));
HXDLIN( 557)			this5->set_y(( (Float)(0) ));
            		}
HXLINE( 558)		this->scoreTxt->set_borderSize(((Float)1.25));
HXLINE( 559)		this->scoreTxt->set_visible(!(::backend::ClientPrefs_obj::data->hideHud));
HXLINE( 560)		this->updateScore(false);
HXLINE( 561)		this->uiGroup->add(this->scoreTxt).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 563)		this->botplayTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,400,(this->timeBar->y + 55),(::flixel::FlxG_obj::width - 800),HX_("BOTPLAY",5b,cf,7d,e1),32,null());
HXLINE( 564)		 ::flixel::text::FlxText _hx_tmp32 = this->botplayTxt;
HXDLIN( 564)		::String file3 = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN( 564)		::String _hx_tmp33;
HXDLIN( 564)		if (::sys::FileSystem_obj::exists(file3)) {
HXLINE( 564)			_hx_tmp33 = file3;
            		}
            		else {
HXLINE( 564)			_hx_tmp33 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN( 564)		_hx_tmp32->setFormat(_hx_tmp33,32,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 565)		{
HXLINE( 565)			 ::flixel::math::FlxBasePoint this6 = this->botplayTxt->scrollFactor;
HXDLIN( 565)			this6->set_x(( (Float)(0) ));
HXDLIN( 565)			this6->set_y(( (Float)(0) ));
            		}
HXLINE( 566)		this->botplayTxt->set_borderSize(((Float)1.25));
HXLINE( 567)		this->botplayTxt->set_visible(this->cpuControlled);
HXLINE( 568)		this->uiGroup->add(this->botplayTxt).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 569)		if (::backend::ClientPrefs_obj::data->downScroll) {
HXLINE( 570)			this->botplayTxt->set_y((this->timeBar->y - ( (Float)(78) )));
            		}
HXLINE( 572)		this->uiGroup->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 573)		this->noteGroup->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 574)		this->comboGroup->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 576)		this->startingSong = true;
HXLINE( 579)		{
HXLINE( 579)			int _g6 = 0;
HXDLIN( 579)			::Array< ::String > _g7 = this->noteTypes;
HXDLIN( 579)			while((_g6 < _g7->length)){
HXLINE( 579)				::String notetype = _g7->__get(_g6);
HXDLIN( 579)				_g6 = (_g6 + 1);
HXLINE( 580)				this->startLuasNamed(((HX_("custom_notetypes/",16,04,18,a1) + notetype) + HX_(".lua",4a,2a,ba,1e)));
            			}
            		}
HXLINE( 581)		{
HXLINE( 581)			int _g8 = 0;
HXDLIN( 581)			::Array< ::String > _g9 = this->eventsPushed;
HXDLIN( 581)			while((_g8 < _g9->length)){
HXLINE( 581)				::String event = _g9->__get(_g8);
HXDLIN( 581)				_g8 = (_g8 + 1);
HXLINE( 582)				this->startLuasNamed(((HX_("custom_events/",28,61,2e,89) + event) + HX_(".lua",4a,2a,ba,1e)));
            			}
            		}
HXLINE( 586)		{
HXLINE( 586)			int _g10 = 0;
HXDLIN( 586)			::Array< ::String > _g11 = this->noteTypes;
HXDLIN( 586)			while((_g10 < _g11->length)){
HXLINE( 586)				::String notetype1 = _g11->__get(_g10);
HXDLIN( 586)				_g10 = (_g10 + 1);
HXLINE( 587)				this->startHScriptsNamed(((HX_("custom_notetypes/",16,04,18,a1) + notetype1) + HX_(".hx",be,42,23,00)));
            			}
            		}
HXLINE( 588)		{
HXLINE( 588)			int _g12 = 0;
HXDLIN( 588)			::Array< ::String > _g13 = this->eventsPushed;
HXDLIN( 588)			while((_g12 < _g13->length)){
HXLINE( 588)				::String event1 = _g13->__get(_g12);
HXDLIN( 588)				_g12 = (_g12 + 1);
HXLINE( 589)				this->startHScriptsNamed(((HX_("custom_events/",28,61,2e,89) + event1) + HX_(".hx",be,42,23,00)));
            			}
            		}
HXLINE( 591)		this->noteTypes = null();
HXLINE( 592)		this->eventsPushed = null();
HXLINE( 594)		if ((this->eventNotes->length > 1)) {
HXLINE( 596)			{
HXLINE( 596)				int _g14 = 0;
HXDLIN( 596)				::Array< ::Dynamic> _g15 = this->eventNotes;
HXDLIN( 596)				while((_g14 < _g15->length)){
HXLINE( 596)					 ::Dynamic event2 = _g15->__get(_g14);
HXDLIN( 596)					_g14 = (_g14 + 1);
HXDLIN( 596)					 ::Dynamic event3 = event2;
HXDLIN( 596)					Float event4 = ( (Float)(event3->__Field(HX_("strumTime",f6,2d,21,f4),::hx::paccDynamic)) );
HXDLIN( 596)					event3->__SetField(HX_("strumTime",f6,2d,21,f4),(event4 - this->eventEarlyTrigger(event2)),::hx::paccDynamic);
            				}
            			}
HXLINE( 597)			this->eventNotes->sort(::states::PlayState_obj::sortByTime_dyn());
            		}
HXLINE( 602)		{
HXLINE( 602)			int _g16 = 0;
HXDLIN( 602)			::String fileToFind = ((HX_("data/",c5,0e,88,d4) + this->songName) + HX_("/",2f,00,00,00));
HXDLIN( 602)			::Array< ::String > foldersToCheck1 = ::Array_obj< ::String >::__new(0);
HXDLIN( 602)			if (::sys::FileSystem_obj::exists((HX_("assets/shared/",1e,69,1e,47) + fileToFind))) {
HXLINE( 602)				foldersToCheck1->push((HX_("assets/shared/",1e,69,1e,47) + fileToFind));
            			}
HXDLIN( 602)			{
HXLINE( 602)				{
HXLINE( 602)					int _g17 = 0;
HXDLIN( 602)					::Array< ::String > _g18 = ::backend::Mods_obj::globalMods;
HXDLIN( 602)					while((_g17 < _g18->length)){
HXLINE( 602)						::String mod1 = _g18->__get(_g17);
HXDLIN( 602)						_g17 = (_g17 + 1);
HXDLIN( 602)						::String key4 = ((mod1 + HX_("/",2f,00,00,00)) + fileToFind);
HXDLIN( 602)						if (::hx::IsNull( key4 )) {
HXLINE( 602)							key4 = HX_("",00,00,00,00);
            						}
HXDLIN( 602)						::String folder4 = (HX_("mods/",9e,2f,58,0c) + key4);
HXDLIN( 602)						bool _hx_tmp34;
HXDLIN( 602)						if (::sys::FileSystem_obj::exists(folder4)) {
HXLINE( 602)							_hx_tmp34 = !(foldersToCheck1->contains(folder4));
            						}
            						else {
HXLINE( 602)							_hx_tmp34 = false;
            						}
HXDLIN( 602)						if (_hx_tmp34) {
HXLINE( 602)							foldersToCheck1->push(folder4);
            						}
            					}
            				}
HXDLIN( 602)				::String key5 = fileToFind;
HXDLIN( 602)				if (::hx::IsNull( key5 )) {
HXLINE( 602)					key5 = HX_("",00,00,00,00);
            				}
HXDLIN( 602)				::String folder5 = (HX_("mods/",9e,2f,58,0c) + key5);
HXDLIN( 602)				bool _hx_tmp35;
HXDLIN( 602)				if (::sys::FileSystem_obj::exists(folder5)) {
HXLINE( 602)					_hx_tmp35 = !(foldersToCheck1->contains(folder5));
            				}
            				else {
HXLINE( 602)					_hx_tmp35 = false;
            				}
HXDLIN( 602)				if (_hx_tmp35) {
HXLINE( 602)					::String key6 = fileToFind;
HXDLIN( 602)					if (::hx::IsNull( key6 )) {
HXLINE( 602)						key6 = HX_("",00,00,00,00);
            					}
HXDLIN( 602)					foldersToCheck1->push((HX_("mods/",9e,2f,58,0c) + key6));
            				}
HXDLIN( 602)				bool _hx_tmp36;
HXDLIN( 602)				if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE( 602)					_hx_tmp36 = (::backend::Mods_obj::currentModDirectory.length > 0);
            				}
            				else {
HXLINE( 602)					_hx_tmp36 = false;
            				}
HXDLIN( 602)				if (_hx_tmp36) {
HXLINE( 602)					::String key7 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + fileToFind);
HXDLIN( 602)					if (::hx::IsNull( key7 )) {
HXLINE( 602)						key7 = HX_("",00,00,00,00);
            					}
HXDLIN( 602)					::String folder6 = (HX_("mods/",9e,2f,58,0c) + key7);
HXDLIN( 602)					bool _hx_tmp37;
HXDLIN( 602)					if (::sys::FileSystem_obj::exists(folder6)) {
HXLINE( 602)						_hx_tmp37 = !(foldersToCheck1->contains(folder6));
            					}
            					else {
HXLINE( 602)						_hx_tmp37 = false;
            					}
HXDLIN( 602)					if (_hx_tmp37) {
HXLINE( 602)						foldersToCheck1->push(folder6);
            					}
            				}
            			}
HXDLIN( 602)			::Array< ::String > _g19 = foldersToCheck1;
HXDLIN( 602)			while((_g16 < _g19->length)){
HXLINE( 602)				::String folder7 = _g19->__get(_g16);
HXDLIN( 602)				_g16 = (_g16 + 1);
HXLINE( 603)				{
HXLINE( 603)					int _g20 = 0;
HXDLIN( 603)					::Array< ::String > _g21 = ::sys::FileSystem_obj::readDirectory(folder7);
HXDLIN( 603)					while((_g20 < _g21->length)){
HXLINE( 603)						::String file4 = _g21->__get(_g20);
HXDLIN( 603)						_g20 = (_g20 + 1);
HXLINE( 606)						if (::StringTools_obj::endsWith(file4.toLowerCase(),HX_(".lua",4a,2a,ba,1e))) {
HXLINE( 607)							 ::psychlua::FunkinLua_obj::__alloc( HX_CTX ,(folder7 + file4));
            						}
HXLINE( 611)						if (::StringTools_obj::endsWith(file4.toLowerCase(),HX_(".hx",be,42,23,00))) {
HXLINE( 612)							this->initHScript((folder7 + file4));
            						}
            					}
            				}
            			}
            		}
HXLINE( 617)		this->startCallback();
HXLINE( 618)		this->RecalculateRating(null());
HXLINE( 620)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->onKeyPress_dyn(),null(),null(),null());
HXLINE( 621)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyUp",da,b9,fe,de),this->onKeyRelease_dyn(),null(),null(),null());
HXLINE( 624)		if ((::backend::ClientPrefs_obj::data->hitsoundVolume > 0)) {
HXLINE( 624)			::backend::Paths_obj::sound(HX_("hitsound",9c,79,fe,2c),null());
            		}
HXLINE( 625)		{
HXLINE( 625)			::backend::Paths_obj::sound((HX_("missnote",ee,98,f1,e3) + 1),null());
HXDLIN( 625)			::backend::Paths_obj::sound((HX_("missnote",ee,98,f1,e3) + 2),null());
HXDLIN( 625)			::backend::Paths_obj::sound((HX_("missnote",ee,98,f1,e3) + 3),null());
            		}
HXLINE( 626)		::backend::Paths_obj::image(HX_("alphabet",b3,7c,38,21),null(),null());
HXLINE( 628)		if (::hx::IsNotNull( ::substates::PauseSubState_obj::songName )) {
HXLINE( 629)			::String library = null();
HXDLIN( 629)			 ::openfl::media::Sound file5 = ::backend::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),::substates::PauseSubState_obj::songName,library);
            		}
            		else {
HXLINE( 630)			::String path2 = ::backend::ClientPrefs_obj::data->pauseMusic;
HXDLIN( 630)			 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN( 630)			 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN( 630)			::String path3 = invalidChars1->split(::StringTools_obj::replace(path2,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN( 630)			if ((hideChars1->split(path3)->join(HX_("",00,00,00,00)).toLowerCase() != HX_("none",b8,12,0a,49))) {
HXLINE( 631)				::String path4 = ::backend::ClientPrefs_obj::data->pauseMusic;
HXDLIN( 631)				 ::EReg invalidChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN( 631)				 ::EReg hideChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN( 631)				::String path5 = invalidChars2->split(::StringTools_obj::replace(path4,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN( 631)				::String library1 = null();
HXDLIN( 631)				 ::openfl::media::Sound file6 = ::backend::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),hideChars2->split(path5)->join(HX_("",00,00,00,00)).toLowerCase(),library1);
            			}
            		}
HXLINE( 633)		this->resetRPC(null());
HXLINE( 635)		this->callOnScripts(HX_("onCreatePost",7b,e7,2d,35),null(),null(),null(),null());
HXLINE( 637)		this->cacheCountdown();
HXLINE( 638)		this->cachePopUpScore();
HXLINE( 640)		this->super::create();
HXLINE( 641)		::backend::Paths_obj::clearUnusedMemory();
HXLINE( 643)		if ((this->eventNotes->length < 1)) {
HXLINE( 643)			this->checkEventNote();
            		}
            	}


Float PlayState_obj::set_songSpeed(Float value){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_647_set_songSpeed)
HXLINE( 648)		if (this->generatedMusic) {
HXLINE( 650)			Float ratio = (value / this->songSpeed);
HXLINE( 651)			if ((ratio != 1)) {
HXLINE( 653)				{
HXLINE( 653)					int _g = 0;
HXDLIN( 653)					::Array< ::Dynamic> _g1 = this->notes->members;
HXDLIN( 653)					while((_g < _g1->length)){
HXLINE( 653)						 ::objects::Note note = _g1->__get(_g).StaticCast<  ::objects::Note >();
HXDLIN( 653)						_g = (_g + 1);
HXDLIN( 653)						note->resizeByRatio(ratio);
            					}
            				}
HXLINE( 654)				{
HXLINE( 654)					int _g2 = 0;
HXDLIN( 654)					::Array< ::Dynamic> _g3 = this->unspawnNotes;
HXDLIN( 654)					while((_g2 < _g3->length)){
HXLINE( 654)						 ::objects::Note note1 = _g3->__get(_g2).StaticCast<  ::objects::Note >();
HXDLIN( 654)						_g2 = (_g2 + 1);
HXDLIN( 654)						note1->resizeByRatio(ratio);
            					}
            				}
            			}
            		}
HXLINE( 657)		this->songSpeed = value;
HXLINE( 658)		this->noteKillOffset = ::Math_obj::max(::backend::Conductor_obj::stepCrochet,((( (Float)(350) ) / this->songSpeed) * this->playbackRate));
HXLINE( 659)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,set_songSpeed,return )

Float PlayState_obj::set_playbackRate(Float value){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_663_set_playbackRate)
HXLINE( 665)		if (this->generatedMusic) {
HXLINE( 667)			this->vocals->set_pitch(value);
HXLINE( 668)			this->opponentVocals->set_pitch(value);
HXLINE( 669)			::flixel::FlxG_obj::sound->music->set_pitch(value);
HXLINE( 671)			Float ratio = (this->playbackRate / value);
HXLINE( 672)			if ((ratio != 1)) {
HXLINE( 674)				{
HXLINE( 674)					int _g = 0;
HXDLIN( 674)					::Array< ::Dynamic> _g1 = this->notes->members;
HXDLIN( 674)					while((_g < _g1->length)){
HXLINE( 674)						 ::objects::Note note = _g1->__get(_g).StaticCast<  ::objects::Note >();
HXDLIN( 674)						_g = (_g + 1);
HXDLIN( 674)						note->resizeByRatio(ratio);
            					}
            				}
HXLINE( 675)				{
HXLINE( 675)					int _g2 = 0;
HXDLIN( 675)					::Array< ::Dynamic> _g3 = this->unspawnNotes;
HXDLIN( 675)					while((_g2 < _g3->length)){
HXLINE( 675)						 ::objects::Note note1 = _g3->__get(_g2).StaticCast<  ::objects::Note >();
HXDLIN( 675)						_g2 = (_g2 + 1);
HXDLIN( 675)						note1->resizeByRatio(ratio);
            					}
            				}
            			}
            		}
HXLINE( 678)		this->playbackRate = value;
HXLINE( 679)		::flixel::FlxG_obj::animationTimeScale = value;
HXLINE( 680)		::backend::Conductor_obj::safeZoneOffset = (((::backend::ClientPrefs_obj::data->safeFrames / ( (Float)(60) )) * ( (Float)(1000) )) * value);
HXLINE( 681)		this->setOnScripts(HX_("playbackRate",9b,3a,8b,c0),this->playbackRate,null());
HXLINE( 685)		return this->playbackRate;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,set_playbackRate,return )

void PlayState_obj::addTextToDebug(::String text,int color){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::psychlua::DebugLuaText,newText) HXARGC(1)
            		void _hx_run( ::psychlua::DebugLuaText spr){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_698_addTextToDebug)
HXLINE( 698)			Float spr1 = spr->y;
HXDLIN( 698)			spr->set_y((spr1 + (newText->get_height() + 2)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_801e532e222627de_689_addTextToDebug)
HXLINE( 690)		 ::psychlua::DebugLuaText newText = this->luaDebugGroup->recycle(::hx::ClassOf< ::psychlua::DebugLuaText >(),null(),null(),null()).StaticCast<  ::psychlua::DebugLuaText >();
HXLINE( 691)		newText->set_text(text);
HXLINE( 692)		newText->set_color(color);
HXLINE( 693)		newText->disableTime = ( (Float)(6) );
HXLINE( 694)		newText->set_alpha(( (Float)(1) ));
HXLINE( 695)		 ::psychlua::DebugLuaText newText1 = newText;
HXDLIN( 695)		newText1->setPosition(10,(( (Float)(8) ) - newText->get_height()));
HXLINE( 697)		this->luaDebugGroup->forEachAlive( ::Dynamic(new _hx_Closure_0(newText)),null());
HXLINE( 700)		this->luaDebugGroup->add(newText).StaticCast<  ::psychlua::DebugLuaText >();
HXLINE( 702)		::Sys_obj::println(text);
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,addTextToDebug,(void))

void PlayState_obj::reloadHealthBarColors(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_707_reloadHealthBarColors)
HXDLIN( 707)		 ::objects::Bar _hx_tmp = this->healthBar;
HXDLIN( 707)		int Red = this->dad->healthColorArray->__get(0);
HXDLIN( 707)		int Green = this->dad->healthColorArray->__get(1);
HXDLIN( 707)		int Blue = this->dad->healthColorArray->__get(2);
HXDLIN( 707)		int Alpha = 255;
HXDLIN( 707)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 707)		{
HXDLIN( 707)			color = (color & -16711681);
HXDLIN( 707)			int color1;
HXDLIN( 707)			if ((Red > 255)) {
HXDLIN( 707)				color1 = 255;
            			}
            			else {
HXDLIN( 707)				if ((Red < 0)) {
HXDLIN( 707)					color1 = 0;
            				}
            				else {
HXDLIN( 707)					color1 = Red;
            				}
            			}
HXDLIN( 707)			color = (color | (color1 << 16));
            		}
HXDLIN( 707)		{
HXDLIN( 707)			color = (color & -65281);
HXDLIN( 707)			int color2;
HXDLIN( 707)			if ((Green > 255)) {
HXDLIN( 707)				color2 = 255;
            			}
            			else {
HXDLIN( 707)				if ((Green < 0)) {
HXDLIN( 707)					color2 = 0;
            				}
            				else {
HXDLIN( 707)					color2 = Green;
            				}
            			}
HXDLIN( 707)			color = (color | (color2 << 8));
            		}
HXDLIN( 707)		{
HXDLIN( 707)			color = (color & -256);
HXDLIN( 707)			int color3;
HXDLIN( 707)			if ((Blue > 255)) {
HXDLIN( 707)				color3 = 255;
            			}
            			else {
HXDLIN( 707)				if ((Blue < 0)) {
HXDLIN( 707)					color3 = 0;
            				}
            				else {
HXDLIN( 707)					color3 = Blue;
            				}
            			}
HXDLIN( 707)			color = (color | color3);
            		}
HXDLIN( 707)		{
HXDLIN( 707)			color = (color & 16777215);
HXDLIN( 707)			int color4;
HXDLIN( 707)			if ((Alpha > 255)) {
HXDLIN( 707)				color4 = 255;
            			}
            			else {
HXDLIN( 707)				if ((Alpha < 0)) {
HXDLIN( 707)					color4 = 0;
            				}
            				else {
HXDLIN( 707)					color4 = Alpha;
            				}
            			}
HXDLIN( 707)			color = (color | (color4 << 24));
            		}
HXLINE( 708)		int Red1 = this->boyfriend->healthColorArray->__get(0);
HXDLIN( 708)		int Green1 = this->boyfriend->healthColorArray->__get(1);
HXDLIN( 708)		int Blue1 = this->boyfriend->healthColorArray->__get(2);
HXDLIN( 708)		int Alpha1 = 255;
HXDLIN( 708)		int color5 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 708)		{
HXLINE( 708)			color5 = (color5 & -16711681);
HXDLIN( 708)			int color6;
HXDLIN( 708)			if ((Red1 > 255)) {
HXLINE( 708)				color6 = 255;
            			}
            			else {
HXLINE( 708)				if ((Red1 < 0)) {
HXLINE( 708)					color6 = 0;
            				}
            				else {
HXLINE( 708)					color6 = Red1;
            				}
            			}
HXDLIN( 708)			color5 = (color5 | (color6 << 16));
            		}
HXDLIN( 708)		{
HXLINE( 708)			color5 = (color5 & -65281);
HXDLIN( 708)			int color7;
HXDLIN( 708)			if ((Green1 > 255)) {
HXLINE( 708)				color7 = 255;
            			}
            			else {
HXLINE( 708)				if ((Green1 < 0)) {
HXLINE( 708)					color7 = 0;
            				}
            				else {
HXLINE( 708)					color7 = Green1;
            				}
            			}
HXDLIN( 708)			color5 = (color5 | (color7 << 8));
            		}
HXDLIN( 708)		{
HXLINE( 708)			color5 = (color5 & -256);
HXDLIN( 708)			int color8;
HXDLIN( 708)			if ((Blue1 > 255)) {
HXLINE( 708)				color8 = 255;
            			}
            			else {
HXLINE( 708)				if ((Blue1 < 0)) {
HXLINE( 708)					color8 = 0;
            				}
            				else {
HXLINE( 708)					color8 = Blue1;
            				}
            			}
HXDLIN( 708)			color5 = (color5 | color8);
            		}
HXDLIN( 708)		{
HXLINE( 708)			color5 = (color5 & 16777215);
HXDLIN( 708)			int color9;
HXDLIN( 708)			if ((Alpha1 > 255)) {
HXLINE( 708)				color9 = 255;
            			}
            			else {
HXLINE( 708)				if ((Alpha1 < 0)) {
HXLINE( 708)					color9 = 0;
            				}
            				else {
HXLINE( 708)					color9 = Alpha1;
            				}
            			}
HXDLIN( 708)			color5 = (color5 | (color9 << 24));
            		}
HXLINE( 707)		_hx_tmp->setColors(color,color5);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,reloadHealthBarColors,(void))

void PlayState_obj::addCharacterToList(::String newCharacter,int type){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_712_addCharacterToList)
HXDLIN( 712)		switch((int)(type)){
            			case (int)0: {
HXLINE( 714)				if (!(this->boyfriendMap->exists(newCharacter))) {
HXLINE( 715)					 ::objects::Character newBoyfriend =  ::objects::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),newCharacter,true);
HXLINE( 716)					this->boyfriendMap->set(newCharacter,newBoyfriend);
HXLINE( 717)					this->boyfriendGroup->add(newBoyfriend).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 718)					this->startCharacterPos(newBoyfriend,null());
HXLINE( 719)					newBoyfriend->set_alpha(((Float)0.00001));
HXLINE( 720)					this->startCharacterScripts(newBoyfriend->curCharacter);
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 724)				if (!(this->dadMap->exists(newCharacter))) {
HXLINE( 725)					 ::objects::Character newDad =  ::objects::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),newCharacter,null());
HXLINE( 726)					this->dadMap->set(newCharacter,newDad);
HXLINE( 727)					this->dadGroup->add(newDad).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 728)					this->startCharacterPos(newDad,true);
HXLINE( 729)					newDad->set_alpha(((Float)0.00001));
HXLINE( 730)					this->startCharacterScripts(newDad->curCharacter);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 734)				bool _hx_tmp;
HXDLIN( 734)				if (::hx::IsNotNull( this->gf )) {
HXLINE( 734)					_hx_tmp = !(this->gfMap->exists(newCharacter));
            				}
            				else {
HXLINE( 734)					_hx_tmp = false;
            				}
HXDLIN( 734)				if (_hx_tmp) {
HXLINE( 735)					 ::objects::Character newGf =  ::objects::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),newCharacter,null());
HXLINE( 736)					{
HXLINE( 736)						 ::flixel::math::FlxBasePoint this1 = newGf->scrollFactor;
HXDLIN( 736)						this1->set_x(((Float)0.95));
HXDLIN( 736)						this1->set_y(((Float)0.95));
            					}
HXLINE( 737)					this->gfMap->set(newCharacter,newGf);
HXLINE( 738)					this->gfGroup->add(newGf).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 739)					this->startCharacterPos(newGf,null());
HXLINE( 740)					newGf->set_alpha(((Float)0.00001));
HXLINE( 741)					this->startCharacterScripts(newGf->curCharacter);
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,addCharacterToList,(void))

void PlayState_obj::startCharacterScripts(::String name){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_747_startCharacterScripts)
HXLINE( 750)		bool doPush = false;
HXLINE( 751)		::String luaFile = ((HX_("characters/",45,3c,bf,be) + name) + HX_(".lua",4a,2a,ba,1e));
HXLINE( 753)		::String replacePath = ::backend::Paths_obj::modFolders(luaFile);
HXLINE( 754)		if (::sys::FileSystem_obj::exists(replacePath)) {
HXLINE( 756)			luaFile = replacePath;
HXLINE( 757)			doPush = true;
            		}
            		else {
HXLINE( 761)			::String file = luaFile;
HXDLIN( 761)			if (::hx::IsNull( file )) {
HXLINE( 761)				file = HX_("",00,00,00,00);
            			}
HXDLIN( 761)			luaFile = (HX_("assets/shared/",1e,69,1e,47) + file);
HXLINE( 762)			if (::sys::FileSystem_obj::exists(luaFile)) {
HXLINE( 763)				doPush = true;
            			}
            		}
HXLINE( 770)		if (doPush) {
HXLINE( 772)			{
HXLINE( 772)				int _g = 0;
HXDLIN( 772)				::Array< ::Dynamic> _g1 = this->luaArray;
HXDLIN( 772)				while((_g < _g1->length)){
HXLINE( 772)					 ::psychlua::FunkinLua script = _g1->__get(_g).StaticCast<  ::psychlua::FunkinLua >();
HXDLIN( 772)					_g = (_g + 1);
HXLINE( 774)					if ((script->scriptName == luaFile)) {
HXLINE( 776)						doPush = false;
HXLINE( 777)						goto _hx_goto_32;
            					}
            				}
            				_hx_goto_32:;
            			}
HXLINE( 780)			if (doPush) {
HXLINE( 780)				 ::psychlua::FunkinLua_obj::__alloc( HX_CTX ,luaFile);
            			}
            		}
HXLINE( 786)		bool doPush1 = false;
HXLINE( 787)		::String scriptFile = ((HX_("characters/",45,3c,bf,be) + name) + HX_(".hx",be,42,23,00));
HXLINE( 789)		::String replacePath1 = ::backend::Paths_obj::modFolders(scriptFile);
HXLINE( 790)		if (::sys::FileSystem_obj::exists(replacePath1)) {
HXLINE( 792)			scriptFile = replacePath1;
HXLINE( 793)			doPush1 = true;
            		}
            		else {
HXLINE( 798)			::String file1 = scriptFile;
HXDLIN( 798)			if (::hx::IsNull( file1 )) {
HXLINE( 798)				file1 = HX_("",00,00,00,00);
            			}
HXDLIN( 798)			scriptFile = (HX_("assets/shared/",1e,69,1e,47) + file1);
HXLINE( 799)			if (::sys::FileSystem_obj::exists(scriptFile)) {
HXLINE( 800)				doPush1 = true;
            			}
            		}
HXLINE( 803)		if (doPush1) {
HXLINE( 805)			if (::tea::SScript_obj::global->exists(scriptFile)) {
HXLINE( 806)				doPush1 = false;
            			}
HXLINE( 808)			if (doPush1) {
HXLINE( 808)				this->initHScript(scriptFile);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,startCharacterScripts,(void))

 ::flixel::FlxSprite PlayState_obj::getLuaObject(::String tag,::hx::Null< bool >  __o_text){
            		bool text = __o_text.Default(true);
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_813_getLuaObject)
HXLINE( 815)		if (this->modchartSprites->exists(tag)) {
HXLINE( 815)			return ( ( ::flixel::FlxSprite)(this->modchartSprites->get(tag)) );
            		}
HXLINE( 816)		bool _hx_tmp;
HXDLIN( 816)		if (text) {
HXLINE( 816)			_hx_tmp = this->modchartTexts->exists(tag);
            		}
            		else {
HXLINE( 816)			_hx_tmp = false;
            		}
HXDLIN( 816)		if (_hx_tmp) {
HXLINE( 816)			return ( ( ::flixel::FlxSprite)(this->modchartTexts->get(tag)) );
            		}
HXLINE( 817)		if (this->variables->exists(tag)) {
HXLINE( 817)			return ( ( ::flixel::FlxSprite)(this->variables->get(tag)) );
            		}
HXLINE( 819)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,getLuaObject,return )

void PlayState_obj::startCharacterPos( ::objects::Character _hx_char, ::Dynamic __o_gfCheck){
            		 ::Dynamic gfCheck = __o_gfCheck;
            		if (::hx::IsNull(__o_gfCheck)) gfCheck = false;
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_822_startCharacterPos)
HXLINE( 823)		bool _hx_tmp;
HXDLIN( 823)		if (( (bool)(gfCheck) )) {
HXLINE( 823)			_hx_tmp = ::StringTools_obj::startsWith(_hx_char->curCharacter,HX_("gf",1f,5a,00,00));
            		}
            		else {
HXLINE( 823)			_hx_tmp = false;
            		}
HXDLIN( 823)		if (_hx_tmp) {
HXLINE( 824)			_hx_char->setPosition(this->GF_X,this->GF_Y);
HXLINE( 825)			{
HXLINE( 825)				 ::flixel::math::FlxBasePoint this1 = _hx_char->scrollFactor;
HXDLIN( 825)				this1->set_x(((Float)0.95));
HXDLIN( 825)				this1->set_y(((Float)0.95));
            			}
HXLINE( 826)			_hx_char->danceEveryNumBeats = 2;
            		}
HXLINE( 828)		_hx_char->set_x((_hx_char->x + _hx_char->positionArray->__get(0)));
HXLINE( 829)		_hx_char->set_y((_hx_char->y + _hx_char->positionArray->__get(1)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,startCharacterPos,(void))

void PlayState_obj::startVideo(::String name){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_833_startVideo)
HXLINE( 869)		::flixel::FlxG_obj::log->advanced(HX_("Platform not supported!",cd,22,85,f3),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE( 870)		this->startAndEnd();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,startVideo,(void))

void PlayState_obj::startAndEnd(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_877_startAndEnd)
HXDLIN( 877)		if (this->endingSong) {
HXLINE( 878)			this->endSong();
            		}
            		else {
HXLINE( 880)			this->startCountdown();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startAndEnd,(void))

void PlayState_obj::startDialogue( ::Dynamic dialogueFile,::String song){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_887_startDialogue)
HXDLIN( 887)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 889)		if (::hx::IsNotNull( this->psychDialogue )) {
HXLINE( 889)			return;
            		}
HXLINE( 891)		if ((( (::Array< ::Dynamic>)(dialogueFile->__Field(HX_("dialogue",18,2d,94,a7),::hx::paccDynamic)) )->length > 0)) {
HXLINE( 892)			this->inCutscene = true;
HXLINE( 893)			this->psychDialogue =  ::cutscenes::DialogueBoxPsych_obj::__alloc( HX_CTX ,dialogueFile,song);
HXLINE( 894)			{
HXLINE( 894)				 ::flixel::math::FlxBasePoint this1 = this->psychDialogue->scrollFactor;
HXDLIN( 894)				this1->set_x(( (Float)(0) ));
HXDLIN( 894)				this1->set_y(( (Float)(0) ));
            			}
HXLINE( 895)			if (this->endingSong) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_896_startDialogue)
HXLINE( 897)					_gthis->psychDialogue = null();
HXLINE( 898)					_gthis->endSong();
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 896)				this->psychDialogue->finishThing =  ::Dynamic(new _hx_Closure_0(_gthis));
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::PlayState,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_901_startDialogue)
HXLINE( 902)					_gthis->psychDialogue = null();
HXLINE( 903)					_gthis->startCountdown();
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 901)				this->psychDialogue->finishThing =  ::Dynamic(new _hx_Closure_1(_gthis));
            			}
HXLINE( 906)			this->psychDialogue->nextDialogueThing = this->startNextDialogue_dyn();
HXLINE( 907)			this->psychDialogue->skipDialogueThing = this->skipDialogue_dyn();
HXLINE( 908)			this->psychDialogue->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 909)			this->add(this->psychDialogue);
            		}
            		else {
HXLINE( 911)			::flixel::FlxG_obj::log->advanced(HX_("Your dialogue file is badly formatted!",40,79,c5,b3),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE( 912)			this->startAndEnd();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,startDialogue,(void))

void PlayState_obj::cacheCountdown(){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_926_cacheCountdown)
HXLINE( 927)		 ::haxe::ds::StringMap introAssets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 928)		::Array< ::String > introImagesArray;
HXDLIN( 928)		::String _hx_switch_0 = ::states::PlayState_obj::stageUI;
            		if (  (_hx_switch_0==HX_("normal",27,72,69,30)) ){
HXLINE( 928)			introImagesArray = ::Array_obj< ::String >::fromData( _hx_array_data_0420cd31_44,3);
HXDLIN( 928)			goto _hx_goto_41;
            		}
            		if (  (_hx_switch_0==HX_("pixel",86,c6,a3,c2)) ){
HXLINE( 928)			introImagesArray = ::Array_obj< ::String >::__new(3)->init(0,((HX_("",00,00,00,00) + ::states::PlayState_obj::stageUI) + HX_("UI/ready-pixel",61,28,88,87)))->init(1,((HX_("",00,00,00,00) + ::states::PlayState_obj::stageUI) + HX_("UI/set-pixel",a0,01,6e,cd)))->init(2,((HX_("",00,00,00,00) + ::states::PlayState_obj::stageUI) + HX_("UI/date-pixel",02,cf,6b,af)));
HXDLIN( 928)			goto _hx_goto_41;
            		}
            		/* default */{
HXLINE( 928)			introImagesArray = ::Array_obj< ::String >::__new(3)->init(0,((HX_("",00,00,00,00) + ::states::PlayState_obj::stageUI) + HX_("UI/ready",28,57,df,8a)))->init(1,((HX_("",00,00,00,00) + ::states::PlayState_obj::stageUI) + HX_("UI/set",27,a7,fe,23)))->init(2,((HX_("",00,00,00,00) + ::states::PlayState_obj::stageUI) + HX_("UI/go",43,e6,73,21)));
            		}
            		_hx_goto_41:;
HXLINE( 933)		introAssets->set(::states::PlayState_obj::stageUI,introImagesArray);
HXLINE( 934)		::Array< ::String > introAlts = ( (::Array< ::String >)(introAssets->get(::states::PlayState_obj::stageUI)) );
HXLINE( 935)		{
HXLINE( 935)			int _g = 0;
HXDLIN( 935)			while((_g < introAlts->length)){
HXLINE( 935)				::String asset = introAlts->__get(_g);
HXDLIN( 935)				_g = (_g + 1);
HXDLIN( 935)				::backend::Paths_obj::image(asset,null(),null());
            			}
            		}
HXLINE( 937)		::backend::Paths_obj::sound((HX_("intro3",47,54,90,9e) + this->introSoundsSuffix),null());
HXLINE( 938)		::backend::Paths_obj::sound((HX_("intro2",46,54,90,9e) + this->introSoundsSuffix),null());
HXLINE( 939)		::backend::Paths_obj::sound((HX_("intro1",45,54,90,9e) + this->introSoundsSuffix),null());
HXLINE( 940)		::backend::Paths_obj::sound((HX_("introGo",b4,7b,b9,1f) + this->introSoundsSuffix),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,cacheCountdown,(void))

bool PlayState_obj::startCountdown(){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_944_startCountdown)
HXDLIN( 944)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 945)		if (this->startedCountdown) {
HXLINE( 946)			this->callOnScripts(HX_("onStartCountdown",6e,2d,46,95),null(),null(),null(),null());
HXLINE( 947)			return false;
            		}
HXLINE( 950)		::states::PlayState_obj::seenCutscene = true;
HXLINE( 951)		this->inCutscene = false;
HXLINE( 952)		 ::Dynamic ret = this->callOnScripts(HX_("onStartCountdown",6e,2d,46,95),null(),true,null(),null());
HXLINE( 953)		if (::hx::IsNotEq( ret,::psychlua::LuaUtils_obj::Function_Stop )) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_5, ::states::PlayState,_gthis,::Array< int >,swagCounter) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(1)
            				void _hx_run( ::objects::Note note){
            					HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1024_startCountdown)
HXLINE(1024)					bool _hx_tmp;
HXDLIN(1024)					if (!(::backend::ClientPrefs_obj::data->opponentStrums)) {
HXLINE(1024)						_hx_tmp = note->mustPress;
            					}
            					else {
HXLINE(1024)						_hx_tmp = true;
            					}
HXDLIN(1024)					if (_hx_tmp) {
HXLINE(1026)						note->copyAlpha = false;
HXLINE(1027)						note->set_alpha(note->multAlpha);
HXLINE(1028)						bool _hx_tmp1;
HXDLIN(1028)						if (::backend::ClientPrefs_obj::data->middleScroll) {
HXLINE(1028)							_hx_tmp1 = !(note->mustPress);
            						}
            						else {
HXLINE(1028)							_hx_tmp1 = false;
            						}
HXDLIN(1028)						if (_hx_tmp1) {
HXLINE(1029)							note->set_alpha((note->alpha * ((Float)0.35)));
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_4,::Array< ::Dynamic>,tick,::Array< int >,swagCounter) HXARGC(1)
            				void _hx_run( ::backend::BaseStage stage){
            					HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1033_startCountdown)
HXLINE(1033)					stage->countdownTick(tick->__get(0).StaticCast<  ::backend::Countdown >(),swagCounter->__get(0));
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_987_startCountdown)
HXLINE( 988)				_gthis->characterBopper((tmr->loops - tmr->_loopsCounter));
HXLINE( 990)				 ::haxe::ds::StringMap introAssets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 991)				::Array< ::String > introImagesArray;
HXDLIN( 991)				::String _hx_switch_0 = ::states::PlayState_obj::stageUI;
            				if (  (_hx_switch_0==HX_("normal",27,72,69,30)) ){
HXLINE( 991)					introImagesArray = ::Array_obj< ::String >::fromData( _hx_array_data_0420cd31_52,3);
HXDLIN( 991)					goto _hx_goto_47;
            				}
            				if (  (_hx_switch_0==HX_("pixel",86,c6,a3,c2)) ){
HXLINE( 991)					introImagesArray = ::Array_obj< ::String >::__new(3)->init(0,((HX_("",00,00,00,00) + ::states::PlayState_obj::stageUI) + HX_("UI/ready-pixel",61,28,88,87)))->init(1,((HX_("",00,00,00,00) + ::states::PlayState_obj::stageUI) + HX_("UI/set-pixel",a0,01,6e,cd)))->init(2,((HX_("",00,00,00,00) + ::states::PlayState_obj::stageUI) + HX_("UI/date-pixel",02,cf,6b,af)));
HXDLIN( 991)					goto _hx_goto_47;
            				}
            				/* default */{
HXLINE( 991)					introImagesArray = ::Array_obj< ::String >::__new(3)->init(0,((HX_("",00,00,00,00) + ::states::PlayState_obj::stageUI) + HX_("UI/ready",28,57,df,8a)))->init(1,((HX_("",00,00,00,00) + ::states::PlayState_obj::stageUI) + HX_("UI/set",27,a7,fe,23)))->init(2,((HX_("",00,00,00,00) + ::states::PlayState_obj::stageUI) + HX_("UI/go",43,e6,73,21)));
            				}
            				_hx_goto_47:;
HXLINE( 996)				introAssets->set(::states::PlayState_obj::stageUI,introImagesArray);
HXLINE( 998)				::Array< ::String > introAlts = ( (::Array< ::String >)(introAssets->get(::states::PlayState_obj::stageUI)) );
HXLINE( 999)				bool antialias;
HXDLIN( 999)				if (::backend::ClientPrefs_obj::data->antialiasing) {
HXLINE( 999)					antialias = !(::states::PlayState_obj::get_isPixelStage());
            				}
            				else {
HXLINE( 999)					antialias = false;
            				}
HXLINE(1000)				::Array< ::Dynamic> tick = ::Array_obj< ::Dynamic>::__new(1)->init(0,::backend::Countdown_obj::THREE_dyn());
HXLINE(1002)				switch((int)(swagCounter->__get(0))){
            					case (int)0: {
HXLINE(1005)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1005)						_hx_tmp->play(::backend::Paths_obj::sound((HX_("intro3",47,54,90,9e) + _gthis->introSoundsSuffix),null()),((Float)0.6),null(),null(),null(),null());
HXLINE(1006)						tick[0] = ::backend::Countdown_obj::THREE_dyn();
            					}
            					break;
            					case (int)1: {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,spr1, ::states::PlayState,_gthis1) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween twn){
            							HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1008_startCountdown)
HXLINE(1008)							_gthis1->remove(spr1,null()).StaticCast<  ::flixel::FlxBasic >();
HXDLIN(1008)							spr1->destroy();
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(1008)						 ::states::PlayState _gthis1 = _gthis;
HXDLIN(1008)						 ::flixel::FlxSprite spr =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1008)						 ::flixel::FlxSprite spr1 = spr->loadGraphic(::backend::Paths_obj::image(introAlts->__get(0),null(),null()),null(),null(),null(),null(),null());
HXDLIN(1008)						spr1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->camHUD));
HXDLIN(1008)						{
HXLINE(1008)							 ::flixel::math::FlxBasePoint this1 = spr1->scrollFactor;
HXDLIN(1008)							this1->set_x(( (Float)(0) ));
HXDLIN(1008)							this1->set_y(( (Float)(0) ));
            						}
HXDLIN(1008)						spr1->updateHitbox();
HXDLIN(1008)						if (::states::PlayState_obj::get_isPixelStage()) {
HXLINE(1008)							 ::flixel::FlxSprite spr2 = spr1;
HXDLIN(1008)							Float _hx_tmp1 = spr1->get_width();
HXDLIN(1008)							spr2->setGraphicSize(::Std_obj::_hx_int((_hx_tmp1 * ::states::PlayState_obj::daPixelZoom)),null());
            						}
HXDLIN(1008)						{
HXLINE(1008)							int axes = 17;
HXDLIN(1008)							bool _hx_tmp2;
HXDLIN(1008)							if ((axes != 1)) {
HXLINE(1008)								_hx_tmp2 = (axes == 17);
            							}
            							else {
HXLINE(1008)								_hx_tmp2 = true;
            							}
HXDLIN(1008)							if (_hx_tmp2) {
HXLINE(1008)								 ::flixel::FlxSprite spr3 = spr1;
HXDLIN(1008)								int _hx_tmp3 = ::flixel::FlxG_obj::width;
HXDLIN(1008)								spr3->set_x(((( (Float)(_hx_tmp3) ) - spr1->get_width()) / ( (Float)(2) )));
            							}
HXDLIN(1008)							bool _hx_tmp4;
HXDLIN(1008)							if ((axes != 16)) {
HXLINE(1008)								_hx_tmp4 = (axes == 17);
            							}
            							else {
HXLINE(1008)								_hx_tmp4 = true;
            							}
HXDLIN(1008)							if (_hx_tmp4) {
HXLINE(1008)								 ::flixel::FlxSprite spr4 = spr1;
HXDLIN(1008)								int _hx_tmp5 = ::flixel::FlxG_obj::height;
HXDLIN(1008)								spr4->set_y(((( (Float)(_hx_tmp5) ) - spr1->get_height()) / ( (Float)(2) )));
            							}
            						}
HXDLIN(1008)						spr1->set_antialiasing(antialias);
HXDLIN(1008)						 ::states::PlayState _gthis2 = _gthis;
HXDLIN(1008)						int _hx_tmp6 = _gthis->members->indexOf(_gthis->noteGroup,null());
HXDLIN(1008)						_gthis2->insert(_hx_tmp6,spr1).StaticCast<  ::flixel::FlxBasic >();
HXDLIN(1008)						::flixel::tweens::FlxTween_obj::tween(spr1, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(::backend::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            							->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(spr1,_gthis1)))));
HXDLIN(1008)						_gthis->countdownReady = spr1;
HXLINE(1009)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp7 = ::flixel::FlxG_obj::sound;
HXDLIN(1009)						_hx_tmp7->play(::backend::Paths_obj::sound((HX_("intro2",46,54,90,9e) + _gthis->introSoundsSuffix),null()),((Float)0.6),null(),null(),null(),null());
HXLINE(1010)						tick[0] = ::backend::Countdown_obj::TWO_dyn();
            					}
            					break;
            					case (int)2: {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,spr6, ::states::PlayState,_gthis3) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween twn){
            							HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1012_startCountdown)
HXLINE(1012)							_gthis3->remove(spr6,null()).StaticCast<  ::flixel::FlxBasic >();
HXDLIN(1012)							spr6->destroy();
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(1012)						 ::states::PlayState _gthis3 = _gthis;
HXDLIN(1012)						 ::flixel::FlxSprite spr5 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1012)						 ::flixel::FlxSprite spr6 = spr5->loadGraphic(::backend::Paths_obj::image(introAlts->__get(1),null(),null()),null(),null(),null(),null(),null());
HXDLIN(1012)						spr6->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->camHUD));
HXDLIN(1012)						{
HXLINE(1012)							 ::flixel::math::FlxBasePoint this2 = spr6->scrollFactor;
HXDLIN(1012)							this2->set_x(( (Float)(0) ));
HXDLIN(1012)							this2->set_y(( (Float)(0) ));
            						}
HXDLIN(1012)						spr6->updateHitbox();
HXDLIN(1012)						if (::states::PlayState_obj::get_isPixelStage()) {
HXLINE(1012)							 ::flixel::FlxSprite spr7 = spr6;
HXDLIN(1012)							Float _hx_tmp8 = spr6->get_width();
HXDLIN(1012)							spr7->setGraphicSize(::Std_obj::_hx_int((_hx_tmp8 * ::states::PlayState_obj::daPixelZoom)),null());
            						}
HXDLIN(1012)						{
HXLINE(1012)							int axes1 = 17;
HXDLIN(1012)							bool _hx_tmp9;
HXDLIN(1012)							if ((axes1 != 1)) {
HXLINE(1012)								_hx_tmp9 = (axes1 == 17);
            							}
            							else {
HXLINE(1012)								_hx_tmp9 = true;
            							}
HXDLIN(1012)							if (_hx_tmp9) {
HXLINE(1012)								 ::flixel::FlxSprite spr8 = spr6;
HXDLIN(1012)								int _hx_tmp10 = ::flixel::FlxG_obj::width;
HXDLIN(1012)								spr8->set_x(((( (Float)(_hx_tmp10) ) - spr6->get_width()) / ( (Float)(2) )));
            							}
HXDLIN(1012)							bool _hx_tmp11;
HXDLIN(1012)							if ((axes1 != 16)) {
HXLINE(1012)								_hx_tmp11 = (axes1 == 17);
            							}
            							else {
HXLINE(1012)								_hx_tmp11 = true;
            							}
HXDLIN(1012)							if (_hx_tmp11) {
HXLINE(1012)								 ::flixel::FlxSprite spr9 = spr6;
HXDLIN(1012)								int _hx_tmp12 = ::flixel::FlxG_obj::height;
HXDLIN(1012)								spr9->set_y(((( (Float)(_hx_tmp12) ) - spr6->get_height()) / ( (Float)(2) )));
            							}
            						}
HXDLIN(1012)						spr6->set_antialiasing(antialias);
HXDLIN(1012)						 ::states::PlayState _gthis4 = _gthis;
HXDLIN(1012)						int _hx_tmp13 = _gthis->members->indexOf(_gthis->noteGroup,null());
HXDLIN(1012)						_gthis4->insert(_hx_tmp13,spr6).StaticCast<  ::flixel::FlxBasic >();
HXDLIN(1012)						::flixel::tweens::FlxTween_obj::tween(spr6, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(::backend::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            							->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(spr6,_gthis3)))));
HXDLIN(1012)						_gthis->countdownSet = spr6;
HXLINE(1013)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp14 = ::flixel::FlxG_obj::sound;
HXDLIN(1013)						_hx_tmp14->play(::backend::Paths_obj::sound((HX_("intro1",45,54,90,9e) + _gthis->introSoundsSuffix),null()),((Float)0.6),null(),null(),null(),null());
HXLINE(1014)						tick[0] = ::backend::Countdown_obj::ONE_dyn();
            					}
            					break;
            					case (int)3: {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::states::PlayState,_gthis5, ::flixel::FlxSprite,spr11) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween twn){
            							HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1016_startCountdown)
HXLINE(1016)							_gthis5->remove(spr11,null()).StaticCast<  ::flixel::FlxBasic >();
HXDLIN(1016)							spr11->destroy();
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(1016)						 ::states::PlayState _gthis5 = _gthis;
HXDLIN(1016)						 ::flixel::FlxSprite spr10 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1016)						 ::flixel::FlxSprite spr11 = spr10->loadGraphic(::backend::Paths_obj::image(introAlts->__get(2),null(),null()),null(),null(),null(),null(),null());
HXDLIN(1016)						spr11->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->camHUD));
HXDLIN(1016)						{
HXLINE(1016)							 ::flixel::math::FlxBasePoint this3 = spr11->scrollFactor;
HXDLIN(1016)							this3->set_x(( (Float)(0) ));
HXDLIN(1016)							this3->set_y(( (Float)(0) ));
            						}
HXDLIN(1016)						spr11->updateHitbox();
HXDLIN(1016)						if (::states::PlayState_obj::get_isPixelStage()) {
HXLINE(1016)							 ::flixel::FlxSprite spr12 = spr11;
HXDLIN(1016)							Float _hx_tmp15 = spr11->get_width();
HXDLIN(1016)							spr12->setGraphicSize(::Std_obj::_hx_int((_hx_tmp15 * ::states::PlayState_obj::daPixelZoom)),null());
            						}
HXDLIN(1016)						{
HXLINE(1016)							int axes2 = 17;
HXDLIN(1016)							bool _hx_tmp16;
HXDLIN(1016)							if ((axes2 != 1)) {
HXLINE(1016)								_hx_tmp16 = (axes2 == 17);
            							}
            							else {
HXLINE(1016)								_hx_tmp16 = true;
            							}
HXDLIN(1016)							if (_hx_tmp16) {
HXLINE(1016)								 ::flixel::FlxSprite spr13 = spr11;
HXDLIN(1016)								int _hx_tmp17 = ::flixel::FlxG_obj::width;
HXDLIN(1016)								spr13->set_x(((( (Float)(_hx_tmp17) ) - spr11->get_width()) / ( (Float)(2) )));
            							}
HXDLIN(1016)							bool _hx_tmp18;
HXDLIN(1016)							if ((axes2 != 16)) {
HXLINE(1016)								_hx_tmp18 = (axes2 == 17);
            							}
            							else {
HXLINE(1016)								_hx_tmp18 = true;
            							}
HXDLIN(1016)							if (_hx_tmp18) {
HXLINE(1016)								 ::flixel::FlxSprite spr14 = spr11;
HXDLIN(1016)								int _hx_tmp19 = ::flixel::FlxG_obj::height;
HXDLIN(1016)								spr14->set_y(((( (Float)(_hx_tmp19) ) - spr11->get_height()) / ( (Float)(2) )));
            							}
            						}
HXDLIN(1016)						spr11->set_antialiasing(antialias);
HXDLIN(1016)						 ::states::PlayState _gthis6 = _gthis;
HXDLIN(1016)						int _hx_tmp20 = _gthis->members->indexOf(_gthis->noteGroup,null());
HXDLIN(1016)						_gthis6->insert(_hx_tmp20,spr11).StaticCast<  ::flixel::FlxBasic >();
HXDLIN(1016)						::flixel::tweens::FlxTween_obj::tween(spr11, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(::backend::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            							->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(_gthis5,spr11)))));
HXDLIN(1016)						_gthis->countdownGo = spr11;
HXLINE(1017)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp21 = ::flixel::FlxG_obj::sound;
HXDLIN(1017)						_hx_tmp21->play(::backend::Paths_obj::sound((HX_("introGo",b4,7b,b9,1f) + _gthis->introSoundsSuffix),null()),((Float)0.6),null(),null(),null(),null());
HXLINE(1018)						tick[0] = ::backend::Countdown_obj::GO_dyn();
            					}
            					break;
            					case (int)4: {
HXLINE(1020)						tick[0] = ::backend::Countdown_obj::START_dyn();
            					}
            					break;
            				}
HXLINE(1023)				_gthis->notes->forEachAlive( ::Dynamic(new _hx_Closure_3()),null());
HXLINE(1033)				_gthis->stagesFunc( ::Dynamic(new _hx_Closure_4(tick,swagCounter)));
HXLINE(1034)				_gthis->callOnLuas(HX_("onCountdownTick",0f,54,e4,9f),::cpp::VirtualArray_obj::__new(1)->init(0,swagCounter->__get(0)),null(),null(),null());
HXLINE(1035)				_gthis->callOnHScript(HX_("onCountdownTick",0f,54,e4,9f),::cpp::VirtualArray_obj::__new(2)->init(0,tick->__get(0).StaticCast<  ::backend::Countdown >())->init(1,swagCounter->__get(0)),null(),null(),null());
HXLINE(1037)				::Array< int > swagCounter1 = swagCounter;
HXDLIN(1037)				int _hx_tmp22 = 0;
HXDLIN(1037)				swagCounter1[_hx_tmp22] = (swagCounter1->__get(_hx_tmp22) + 1);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 954)			bool _hx_tmp;
HXDLIN( 954)			if (!(this->skipCountdown)) {
HXLINE( 954)				_hx_tmp = (::states::PlayState_obj::startOnTime > 0);
            			}
            			else {
HXLINE( 954)				_hx_tmp = true;
            			}
HXDLIN( 954)			if (_hx_tmp) {
HXLINE( 954)				this->skipArrowStartTween = true;
            			}
HXLINE( 956)			this->generateStaticArrows(0);
HXLINE( 957)			this->generateStaticArrows(1);
HXLINE( 958)			{
HXLINE( 958)				int _g = 0;
HXDLIN( 958)				int _g1 = this->playerStrums->length;
HXDLIN( 958)				while((_g < _g1)){
HXLINE( 958)					_g = (_g + 1);
HXDLIN( 958)					int i = (_g - 1);
HXLINE( 959)					this->setOnScripts((HX_("defaultPlayerStrumX",91,a3,83,89) + i),Dynamic( this->playerStrums->members->__get(i)).StaticCast<  ::objects::StrumNote >()->x,null());
HXLINE( 960)					this->setOnScripts((HX_("defaultPlayerStrumY",92,a3,83,89) + i),Dynamic( this->playerStrums->members->__get(i)).StaticCast<  ::objects::StrumNote >()->y,null());
            				}
            			}
HXLINE( 962)			{
HXLINE( 962)				int _g2 = 0;
HXDLIN( 962)				int _g3 = this->opponentStrums->length;
HXDLIN( 962)				while((_g2 < _g3)){
HXLINE( 962)					_g2 = (_g2 + 1);
HXDLIN( 962)					int i1 = (_g2 - 1);
HXLINE( 963)					this->setOnScripts((HX_("defaultOpponentStrumX",0d,e1,d7,f1) + i1),Dynamic( this->opponentStrums->members->__get(i1)).StaticCast<  ::objects::StrumNote >()->x,null());
HXLINE( 964)					this->setOnScripts((HX_("defaultOpponentStrumY",0e,e1,d7,f1) + i1),Dynamic( this->opponentStrums->members->__get(i1)).StaticCast<  ::objects::StrumNote >()->y,null());
            				}
            			}
HXLINE( 968)			this->startedCountdown = true;
HXLINE( 969)			::backend::Conductor_obj::songPosition = (-(::backend::Conductor_obj::crochet) * ( (Float)(5) ));
HXLINE( 970)			this->setOnScripts(HX_("startedCountdown",30,57,28,9b),true,null());
HXLINE( 971)			this->callOnScripts(HX_("onCountdownStarted",cf,93,f5,10),null(),null(),null(),null());
HXLINE( 973)			::Array< int > swagCounter = ::Array_obj< int >::fromData( _hx_array_data_0420cd31_56,1);
HXLINE( 974)			if ((::states::PlayState_obj::startOnTime > 0)) {
HXLINE( 975)				this->clearNotesBefore(::states::PlayState_obj::startOnTime);
HXLINE( 976)				this->setSongTime((::states::PlayState_obj::startOnTime - ( (Float)(350) )));
HXLINE( 977)				return true;
            			}
            			else {
HXLINE( 979)				if (this->skipCountdown) {
HXLINE( 981)					this->setSongTime(( (Float)(0) ));
HXLINE( 982)					return true;
            				}
            			}
HXLINE( 984)			this->moveCameraSection(null());
HXLINE( 986)			 ::flixel::util::FlxTimer _hx_tmp1 =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN( 986)			this->startTimer = _hx_tmp1->start(((::backend::Conductor_obj::crochet / ( (Float)(1000) )) / this->playbackRate), ::Dynamic(new _hx_Closure_5(_gthis,swagCounter)),5);
            		}
HXLINE(1040)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startCountdown,return )

 ::flixel::FlxSprite PlayState_obj::createCountdownSprite(::String image,bool antialias){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,_gthis, ::flixel::FlxSprite,spr1) HXARGC(1)
            		void _hx_run( ::flixel::tweens::FlxTween twn){
            			HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1059_createCountdownSprite)
HXLINE(1060)			_gthis->remove(spr1,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1061)			spr1->destroy();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1044_createCountdownSprite)
HXDLIN(1044)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1045)		 ::flixel::FlxSprite spr =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1045)		 ::flixel::FlxSprite spr1 = spr->loadGraphic(::backend::Paths_obj::image(image,null(),null()),null(),null(),null(),null(),null());
HXLINE(1046)		spr1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1047)		{
HXLINE(1047)			 ::flixel::math::FlxBasePoint this1 = spr1->scrollFactor;
HXDLIN(1047)			this1->set_x(( (Float)(0) ));
HXDLIN(1047)			this1->set_y(( (Float)(0) ));
            		}
HXLINE(1048)		spr1->updateHitbox();
HXLINE(1050)		if (::states::PlayState_obj::get_isPixelStage()) {
HXLINE(1051)			 ::flixel::FlxSprite spr2 = spr1;
HXDLIN(1051)			Float _hx_tmp = spr1->get_width();
HXDLIN(1051)			spr2->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::states::PlayState_obj::daPixelZoom)),null());
            		}
HXLINE(1053)		{
HXLINE(1053)			int axes = 17;
HXDLIN(1053)			bool _hx_tmp1;
HXDLIN(1053)			if ((axes != 1)) {
HXLINE(1053)				_hx_tmp1 = (axes == 17);
            			}
            			else {
HXLINE(1053)				_hx_tmp1 = true;
            			}
HXDLIN(1053)			if (_hx_tmp1) {
HXLINE(1053)				 ::flixel::FlxSprite spr3 = spr1;
HXDLIN(1053)				int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN(1053)				spr3->set_x(((( (Float)(_hx_tmp2) ) - spr1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(1053)			bool _hx_tmp3;
HXDLIN(1053)			if ((axes != 16)) {
HXLINE(1053)				_hx_tmp3 = (axes == 17);
            			}
            			else {
HXLINE(1053)				_hx_tmp3 = true;
            			}
HXDLIN(1053)			if (_hx_tmp3) {
HXLINE(1053)				 ::flixel::FlxSprite spr4 = spr1;
HXDLIN(1053)				int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN(1053)				spr4->set_y(((( (Float)(_hx_tmp4) ) - spr1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(1054)		spr1->set_antialiasing(antialias);
HXLINE(1055)		int _hx_tmp5 = this->members->indexOf(this->noteGroup,null());
HXDLIN(1055)		this->insert(_hx_tmp5,spr1);
HXLINE(1056)		::flixel::tweens::FlxTween_obj::tween(spr1, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(::backend::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            			->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis,spr1)))));
HXLINE(1064)		return spr1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,createCountdownSprite,return )

void PlayState_obj::addBehindGF( ::flixel::FlxBasic obj){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1069_addBehindGF)
HXDLIN(1069)		this->insert(this->members->indexOf(this->gfGroup,null()),obj);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,addBehindGF,(void))

void PlayState_obj::addBehindBF( ::flixel::FlxBasic obj){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1073_addBehindBF)
HXDLIN(1073)		this->insert(this->members->indexOf(this->boyfriendGroup,null()),obj);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,addBehindBF,(void))

void PlayState_obj::addBehindDad( ::flixel::FlxBasic obj){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1077_addBehindDad)
HXDLIN(1077)		this->insert(this->members->indexOf(this->dadGroup,null()),obj);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,addBehindDad,(void))

void PlayState_obj::clearNotesBefore(Float time){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1081_clearNotesBefore)
HXLINE(1082)		int i = (this->unspawnNotes->length - 1);
HXLINE(1083)		while((i >= 0)){
HXLINE(1084)			 ::objects::Note daNote = this->unspawnNotes->__get(i).StaticCast<  ::objects::Note >();
HXLINE(1085)			if (((daNote->strumTime - ( (Float)(350) )) < time)) {
HXLINE(1087)				daNote->set_active(false);
HXLINE(1088)				daNote->set_visible(false);
HXLINE(1089)				daNote->ignoreNote = true;
HXLINE(1091)				daNote->kill();
HXLINE(1092)				this->unspawnNotes->remove(daNote);
HXLINE(1093)				daNote->destroy();
            			}
HXLINE(1095)			i = (i - 1);
            		}
HXLINE(1098)		i = (this->notes->length - 1);
HXLINE(1099)		while((i >= 0)){
HXLINE(1100)			 ::objects::Note daNote1 = Dynamic( this->notes->members->__get(i)).StaticCast<  ::objects::Note >();
HXLINE(1101)			if (((daNote1->strumTime - ( (Float)(350) )) < time)) {
HXLINE(1103)				daNote1->set_active(false);
HXLINE(1104)				daNote1->set_visible(false);
HXLINE(1105)				daNote1->ignoreNote = true;
HXLINE(1106)				this->invalidateNote(daNote1);
            			}
HXLINE(1108)			i = (i - 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,clearNotesBefore,(void))

HX_BEGIN_DEFAULT_FUNC(__default_updateScore,PlayState_obj)
void _hx_run(::hx::Null< bool >  __o_miss){
            		bool miss = __o_miss.Default(false);
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1117___default_updateScore)
HXLINE(1118)		 ::Dynamic ret = ( ( ::states::PlayState)(__this) )->callOnScripts(HX_("preUpdateScore",26,11,b7,6e),::cpp::VirtualArray_obj::__new(1)->init(0,miss),true,null(),null());
HXLINE(1119)		if (::hx::IsEq( ret,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(1120)			return;
            		}
HXLINE(1122)		::String str = ( ( ::states::PlayState)(__this) )->ratingName;
HXLINE(1123)		if ((( ( ::states::PlayState)(__this) )->totalPlayed != 0)) {
HXLINE(1125)			Float percent = ::backend::CoolUtil_obj::floorDecimal((( ( ::states::PlayState)(__this) )->ratingPercent * ( (Float)(100) )),2);
HXLINE(1126)			str = (str + (((HX_(" (",08,1c,00,00) + percent) + HX_("%) - ",8f,a5,05,69)) + ( ( ::states::PlayState)(__this) )->ratingFC));
            		}
HXLINE(1130)		::String tempScore;
HXDLIN(1130)		if (!(( ( ::states::PlayState)(__this) )->instakillOnMiss)) {
HXLINE(1130)			tempScore = (HX_(" | Misses: ",f4,d7,bf,55) + ( ( ::states::PlayState)(__this) )->songMisses);
            		}
            		else {
HXLINE(1130)			tempScore = HX_("",00,00,00,00);
            		}
HXLINE(1129)		::String tempScore1 = (((HX_("Score: ",58,c6,eb,45) + ( ( ::states::PlayState)(__this) )->songScore) + tempScore) + (HX_(" | Rating: ",67,bc,53,d1) + str));
HXLINE(1134)		( ( ::states::PlayState)(__this) )->scoreTxt->set_text(((HX_("",00,00,00,00) + tempScore1) + HX_("\n",0a,00,00,00)));
HXLINE(1136)		bool _hx_tmp;
HXDLIN(1136)		if (!(miss)) {
HXLINE(1136)			_hx_tmp = !(( ( ::states::PlayState)(__this) )->cpuControlled);
            		}
            		else {
HXLINE(1136)			_hx_tmp = false;
            		}
HXDLIN(1136)		if (_hx_tmp) {
HXLINE(1137)			( ( ::states::PlayState)(__this) )->doScoreBop();
            		}
HXLINE(1139)		( ( ::states::PlayState)(__this) )->callOnScripts(HX_("onUpdateScore",aa,f9,5b,c1),::cpp::VirtualArray_obj::__new(1)->init(0,miss),null(),null(),null());
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_fullComboFunction,PlayState_obj)
void _hx_run(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1143___default_fullComboFunction)
HXLINE(1144)		int sicks = ( ( ::states::PlayState)(__this) )->ratingsData->__get(0).StaticCast<  ::backend::Rating >()->hits;
HXLINE(1145)		int goods = ( ( ::states::PlayState)(__this) )->ratingsData->__get(1).StaticCast<  ::backend::Rating >()->hits;
HXLINE(1146)		int bads = ( ( ::states::PlayState)(__this) )->ratingsData->__get(2).StaticCast<  ::backend::Rating >()->hits;
HXLINE(1147)		int shits = ( ( ::states::PlayState)(__this) )->ratingsData->__get(3).StaticCast<  ::backend::Rating >()->hits;
HXLINE(1149)		( ( ::states::PlayState)(__this) )->ratingFC = HX_("",00,00,00,00);
HXLINE(1150)		if ((( ( ::states::PlayState)(__this) )->songMisses == 0)) {
HXLINE(1152)			bool _hx_tmp;
HXDLIN(1152)			if ((bads <= 0)) {
HXLINE(1152)				_hx_tmp = (shits > 0);
            			}
            			else {
HXLINE(1152)				_hx_tmp = true;
            			}
HXDLIN(1152)			if (_hx_tmp) {
HXLINE(1152)				( ( ::states::PlayState)(__this) )->ratingFC = HX_("FC",3d,3d,00,00);
            			}
            			else {
HXLINE(1153)				if ((goods > 0)) {
HXLINE(1153)					( ( ::states::PlayState)(__this) )->ratingFC = HX_("GFC",44,1d,36,00);
            				}
            				else {
HXLINE(1154)					if ((sicks > 0)) {
HXLINE(1154)						( ( ::states::PlayState)(__this) )->ratingFC = HX_("SFC",50,38,3f,00);
            					}
            				}
            			}
            		}
            		else {
HXLINE(1157)			if ((( ( ::states::PlayState)(__this) )->songMisses < 10)) {
HXLINE(1157)				( ( ::states::PlayState)(__this) )->ratingFC = HX_("SDCB",70,89,10,37);
            			}
            			else {
HXLINE(1158)				( ( ::states::PlayState)(__this) )->ratingFC = HX_("Clear",6d,e1,88,db);
            			}
            		}
            	}
HX_END_LOCAL_FUNC0((void))
HX_END_DEFAULT_FUNC

void PlayState_obj::doScoreBop(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::tweens::FlxTween twn){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_1173_doScoreBop)
HXLINE(1173)			_gthis->scoreTxtTween = null();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1162_doScoreBop)
HXDLIN(1162)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1163)		if (!(::backend::ClientPrefs_obj::data->scoreZoom)) {
HXLINE(1164)			return;
            		}
HXLINE(1166)		if (::hx::IsNotNull( this->scoreTxtTween )) {
HXLINE(1167)			this->scoreTxtTween->cancel();
            		}
HXLINE(1169)		this->scoreTxt->scale->set_x(((Float)1.075));
HXLINE(1170)		this->scoreTxt->scale->set_y(((Float)1.075));
HXLINE(1171)		this->scoreTxtTween = ::flixel::tweens::FlxTween_obj::tween(this->scoreTxt->scale, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),1)
            			->setFixed(1,HX_("y",79,00,00,00),1)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,doScoreBop,(void))

void PlayState_obj::setSongTime(Float time){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1179_setSongTime)
HXLINE(1180)		if ((time < 0)) {
HXLINE(1180)			time = ( (Float)(0) );
            		}
HXLINE(1182)		::flixel::FlxG_obj::sound->music->pause();
HXLINE(1183)		this->vocals->pause();
HXLINE(1184)		this->opponentVocals->pause();
HXLINE(1186)		::flixel::FlxG_obj::sound->music->set_time(time);
HXLINE(1187)		::flixel::FlxG_obj::sound->music->set_pitch(this->playbackRate);
HXLINE(1188)		::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(1190)		if ((::backend::Conductor_obj::songPosition <= this->vocals->_length)) {
HXLINE(1192)			this->vocals->set_time(time);
HXLINE(1193)			this->opponentVocals->set_time(time);
HXLINE(1195)			this->vocals->set_pitch(this->playbackRate);
HXLINE(1196)			this->opponentVocals->set_pitch(this->playbackRate);
            		}
HXLINE(1199)		this->vocals->play(null(),null(),null());
HXLINE(1200)		this->opponentVocals->play(null(),null(),null());
HXLINE(1201)		::backend::Conductor_obj::songPosition = time;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,setSongTime,(void))

void PlayState_obj::startNextDialogue(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1204_startNextDialogue)
HXLINE(1205)		this->dialogueCount++;
HXLINE(1206)		this->callOnScripts(HX_("onNextDialogue",ea,78,82,7b),::cpp::VirtualArray_obj::__new(1)->init(0,this->dialogueCount),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startNextDialogue,(void))

void PlayState_obj::skipDialogue(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1210_skipDialogue)
HXDLIN(1210)		this->callOnScripts(HX_("onSkipDialogue",76,76,53,39),::cpp::VirtualArray_obj::__new(1)->init(0,this->dialogueCount),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,skipDialogue,(void))

void PlayState_obj::startSong(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,_g) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_1220_startSong)
HXLINE(1220)			_g->finishSong(null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1214_startSong)
HXLINE(1215)		this->startingSong = false;
HXLINE(1218)		::flixel::FlxG_obj::sound->playMusic(this->inst->_sound,1,false,null());
HXLINE(1219)		::flixel::FlxG_obj::sound->music->set_pitch(this->playbackRate);
HXLINE(1220)		 ::states::PlayState _g = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1220)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(_g));
HXDLIN(1220)		::flixel::FlxG_obj::sound->music->onComplete = _hx_tmp;
HXLINE(1221)		this->vocals->play(null(),null(),null());
HXLINE(1222)		this->opponentVocals->play(null(),null(),null());
HXLINE(1224)		if ((::states::PlayState_obj::startOnTime > 0)) {
HXLINE(1224)			this->setSongTime((::states::PlayState_obj::startOnTime - ( (Float)(500) )));
            		}
HXLINE(1225)		::states::PlayState_obj::startOnTime = ( (Float)(0) );
HXLINE(1227)		if (this->paused) {
HXLINE(1229)			::flixel::FlxG_obj::sound->music->pause();
HXLINE(1230)			this->vocals->pause();
HXLINE(1231)			this->opponentVocals->pause();
            		}
HXLINE(1235)		this->songLength = ::flixel::FlxG_obj::sound->music->_length;
HXLINE(1236)		::flixel::tweens::FlxTween_obj::tween(this->timeBar, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
HXLINE(1237)		::flixel::tweens::FlxTween_obj::tween(this->timeTxt, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
HXLINE(1241)		if (this->autoUpdateRPC) {
HXLINE(1241)			::String _hx_tmp1 = this->detailsText;
HXDLIN(1241)			::String _hx_tmp2 = ( (::String)((((::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) );
HXDLIN(1241)			::String _hx_tmp3 = this->iconP2->getCharacter();
HXDLIN(1241)			::backend::DiscordClient_obj::changePresence(_hx_tmp1,_hx_tmp2,_hx_tmp3,true,this->songLength);
            		}
HXLINE(1243)		this->setOnScripts(HX_("songLength",9b,3a,8c,fa),this->songLength,null());
HXLINE(1244)		this->callOnScripts(HX_("onSongStart",2e,9f,c8,d5),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startSong,(void))

void PlayState_obj::generateSong(::String dataPath){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1251_generateSong)
HXLINE(1253)		this->set_songSpeed(( (Float)(::states::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ));
HXLINE(1254)		 ::Dynamic defaultValue = null();
HXDLIN(1254)		defaultValue = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("scrolltype",47,55,ef,1f));
HXDLIN(1254)		 ::Dynamic _hx_tmp;
HXDLIN(1254)		if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("scrolltype",47,55,ef,1f))) {
HXLINE(1254)			_hx_tmp = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("scrolltype",47,55,ef,1f));
            		}
            		else {
HXLINE(1254)			_hx_tmp = defaultValue;
            		}
HXDLIN(1254)		this->songSpeedType = ( (::String)(_hx_tmp) );
HXLINE(1255)		::String _hx_switch_0 = this->songSpeedType;
            		if (  (_hx_switch_0==HX_("constant",64,c1,9d,a5)) ){
HXLINE(1260)			 ::Dynamic defaultValue1 = null();
HXDLIN(1260)			defaultValue1 = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
HXDLIN(1260)			 ::Dynamic _hx_tmp1;
HXDLIN(1260)			if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("scrollspeed",5a,70,19,38))) {
HXLINE(1260)				_hx_tmp1 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
            			}
            			else {
HXLINE(1260)				_hx_tmp1 = defaultValue1;
            			}
HXDLIN(1260)			this->set_songSpeed(( (Float)(_hx_tmp1) ));
HXDLIN(1260)			goto _hx_goto_74;
            		}
            		if (  (_hx_switch_0==HX_("multiplicative",96,7a,3f,fa)) ){
HXLINE(1258)			Float _hx_tmp2 = ( (Float)(::states::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
HXDLIN(1258)			 ::Dynamic defaultValue2 = null();
HXDLIN(1258)			defaultValue2 = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
HXDLIN(1258)			 ::Dynamic _hx_tmp3;
HXDLIN(1258)			if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("scrollspeed",5a,70,19,38))) {
HXLINE(1258)				_hx_tmp3 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
            			}
            			else {
HXLINE(1258)				_hx_tmp3 = defaultValue2;
            			}
HXDLIN(1258)			this->set_songSpeed((_hx_tmp2 * ( (Float)(_hx_tmp3) )));
HXDLIN(1258)			goto _hx_goto_74;
            		}
            		_hx_goto_74:;
HXLINE(1263)		 ::Dynamic songData = ::states::PlayState_obj::SONG;
HXLINE(1264)		::backend::Conductor_obj::set_bpm(( (Float)(songData->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE(1266)		this->curSong = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXLINE(1268)		this->vocals =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXLINE(1269)		this->opponentVocals =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXLINE(1270)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1272)			if (( (bool)(songData->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(1274)				::String song = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(1274)				::String postfix;
HXDLIN(1274)				bool postfix1;
HXDLIN(1274)				if (::hx::IsNotNull( this->boyfriend->vocalsFile )) {
HXLINE(1274)					postfix1 = (this->boyfriend->vocalsFile.length < 1);
            				}
            				else {
HXLINE(1274)					postfix1 = true;
            				}
HXDLIN(1274)				if (postfix1) {
HXLINE(1274)					postfix = HX_("Player",81,5f,4d,6c);
            				}
            				else {
HXLINE(1274)					postfix = this->boyfriend->vocalsFile;
            				}
HXDLIN(1274)				 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(1274)				 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(1274)				::String path = invalidChars->split(::StringTools_obj::replace(song,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(1274)				::String songKey = ((HX_("",00,00,00,00) + hideChars->split(path)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34));
HXDLIN(1274)				if (::hx::IsNotNull( postfix )) {
HXLINE(1274)					songKey = (songKey + (HX_("-",2d,00,00,00) + postfix));
            				}
HXDLIN(1274)				 ::openfl::media::Sound voices = ::backend::Paths_obj::returnSound(null(),songKey,HX_("songs",fe,36,c7,80));
HXDLIN(1274)				 ::Dynamic playerVocals = voices;
HXLINE(1275)				 ::flixel::sound::FlxSound _hx_tmp4 = this->vocals;
HXDLIN(1275)				 ::Dynamic _hx_tmp5;
HXDLIN(1275)				if (::hx::IsNotNull( playerVocals )) {
HXLINE(1275)					_hx_tmp5 = playerVocals;
            				}
            				else {
HXLINE(1275)					::String song1 = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(1275)					::String postfix2 = null();
HXDLIN(1275)					 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(1275)					 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(1275)					::String path1 = invalidChars1->split(::StringTools_obj::replace(song1,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(1275)					::String songKey1 = ((HX_("",00,00,00,00) + hideChars1->split(path1)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34));
HXDLIN(1275)					if (::hx::IsNotNull( postfix2 )) {
HXLINE(1275)						songKey1 = (songKey1 + (HX_("-",2d,00,00,00) + postfix2));
            					}
HXDLIN(1275)					 ::openfl::media::Sound voices1 = ::backend::Paths_obj::returnSound(null(),songKey1,HX_("songs",fe,36,c7,80));
HXDLIN(1275)					_hx_tmp5 = voices1;
            				}
HXDLIN(1275)				_hx_tmp4->loadEmbedded(_hx_tmp5,null(),null(),null());
HXLINE(1277)				::String song2 = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(1277)				::String postfix3;
HXDLIN(1277)				bool postfix4;
HXDLIN(1277)				if (::hx::IsNotNull( this->dad->vocalsFile )) {
HXLINE(1277)					postfix4 = (this->dad->vocalsFile.length < 1);
            				}
            				else {
HXLINE(1277)					postfix4 = true;
            				}
HXDLIN(1277)				if (postfix4) {
HXLINE(1277)					postfix3 = HX_("Opponent",bd,75,6a,d2);
            				}
            				else {
HXLINE(1277)					postfix3 = this->dad->vocalsFile;
            				}
HXDLIN(1277)				 ::EReg invalidChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(1277)				 ::EReg hideChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(1277)				::String path2 = invalidChars2->split(::StringTools_obj::replace(song2,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(1277)				::String songKey2 = ((HX_("",00,00,00,00) + hideChars2->split(path2)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34));
HXDLIN(1277)				if (::hx::IsNotNull( postfix3 )) {
HXLINE(1277)					songKey2 = (songKey2 + (HX_("-",2d,00,00,00) + postfix3));
            				}
HXDLIN(1277)				 ::openfl::media::Sound voices2 = ::backend::Paths_obj::returnSound(null(),songKey2,HX_("songs",fe,36,c7,80));
HXDLIN(1277)				 ::Dynamic oppVocals = voices2;
HXLINE(1278)				if (::hx::IsNotNull( oppVocals )) {
HXLINE(1278)					this->opponentVocals->loadEmbedded(oppVocals,null(),null(),null());
            				}
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(1281)				{
HXLINE(1281)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(1284)		this->vocals->set_pitch(this->playbackRate);
HXLINE(1285)		this->opponentVocals->set_pitch(this->playbackRate);
HXLINE(1287)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::sound::FlxSound >();
HXLINE(1288)		::flixel::FlxG_obj::sound->list->add(this->opponentVocals).StaticCast<  ::flixel::sound::FlxSound >();
HXLINE(1290)		this->inst =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXLINE(1291)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1292)			 ::flixel::sound::FlxSound _hx_tmp6 = this->inst;
HXDLIN(1292)			::String song3 = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(1292)			 ::EReg invalidChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(1292)			 ::EReg hideChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(1292)			::String path3 = invalidChars3->split(::StringTools_obj::replace(song3,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(1292)			::String songKey3 = ((HX_("",00,00,00,00) + hideChars3->split(path3)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Inst",95,b3,69,40));
HXDLIN(1292)			 ::openfl::media::Sound inst = ::backend::Paths_obj::returnSound(null(),songKey3,HX_("songs",fe,36,c7,80));
HXDLIN(1292)			_hx_tmp6->loadEmbedded(inst,null(),null(),null());
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g1 = _hx_e;
HXLINE(1294)				{
HXLINE(1294)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(1295)		::flixel::FlxG_obj::sound->list->add(this->inst).StaticCast<  ::flixel::sound::FlxSound >();
HXLINE(1297)		this->notes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(1298)		this->noteGroup->add(this->notes).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1300)		::Array< ::Dynamic> noteData = ( (::Array< ::Dynamic>)(songData->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXLINE(1305)		::String library = null();
HXDLIN(1305)		::String file = ::backend::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + (this->songName + HX_("/events",88,1c,db,38))) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library,null());
HXLINE(1307)		bool _hx_tmp7;
HXDLIN(1307)		if (!(::sys::FileSystem_obj::exists(::backend::Paths_obj::modFolders(((HX_("data/",c5,0e,88,d4) + (this->songName + HX_("/events",88,1c,db,38))) + HX_(".json",56,f1,d6,c2)))))) {
HXLINE(1307)			_hx_tmp7 = ::sys::FileSystem_obj::exists(file);
            		}
            		else {
HXLINE(1307)			_hx_tmp7 = true;
            		}
HXDLIN(1307)		if (_hx_tmp7) {
HXLINE(1312)			::cpp::VirtualArray eventsData = ( (::cpp::VirtualArray)(::backend::Song_obj::loadFromJson(HX_("events",19,4f,6a,96),this->songName)->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) );
HXLINE(1313)			{
HXLINE(1313)				int _g2 = 0;
HXDLIN(1313)				while((_g2 < eventsData->get_length())){
HXLINE(1313)					 ::Dynamic event = eventsData->__get(_g2);
HXDLIN(1313)					_g2 = (_g2 + 1);
HXLINE(1314)					{
HXLINE(1314)						int _g3 = 0;
HXDLIN(1314)						int _g4 = ( (int)(event->__GetItem(1)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN(1314)						while((_g3 < _g4)){
HXLINE(1314)							_g3 = (_g3 + 1);
HXDLIN(1314)							int i = (_g3 - 1);
HXLINE(1315)							this->makeEvent(( (::cpp::VirtualArray)(event) ),i);
            						}
            					}
            				}
            			}
            		}
HXLINE(1318)		{
HXLINE(1318)			int _g5 = 0;
HXDLIN(1318)			while((_g5 < noteData->length)){
HXLINE(1318)				 ::Dynamic section = noteData->__get(_g5);
HXDLIN(1318)				_g5 = (_g5 + 1);
HXLINE(1320)				{
HXLINE(1320)					int _g6 = 0;
HXDLIN(1320)					::cpp::VirtualArray _g7 = ( (::cpp::VirtualArray)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1320)					while((_g6 < _g7->get_length())){
HXLINE(1320)						 ::Dynamic songNotes = _g7->__get(_g6);
HXDLIN(1320)						_g6 = (_g6 + 1);
HXLINE(1322)						Float daStrumTime = ( (Float)(songNotes->__GetItem(0)) );
HXLINE(1323)						int daNoteData = ::Std_obj::_hx_int(::hx::Mod(songNotes->__GetItem(1),4));
HXLINE(1324)						bool gottaHitNote = ( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE(1326)						if (::hx::IsGreater( songNotes->__GetItem(1),3 )) {
HXLINE(1328)							gottaHitNote = !(( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            						}
HXLINE(1331)						 ::objects::Note oldNote;
HXLINE(1332)						if ((this->unspawnNotes->length > 0)) {
HXLINE(1333)							oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::objects::Note >();
            						}
            						else {
HXLINE(1335)							oldNote = null();
            						}
HXLINE(1337)						 ::objects::Note swagNote =  ::objects::Note_obj::__alloc( HX_CTX ,daStrumTime,daNoteData,oldNote,null(),null(),null());
HXLINE(1338)						swagNote->mustPress = gottaHitNote;
HXLINE(1339)						swagNote->sustainLength = ( (Float)(songNotes->__GetItem(2)) );
HXLINE(1340)						bool _hx_tmp8;
HXDLIN(1340)						if (( (bool)(section->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic)) )) {
HXLINE(1340)							_hx_tmp8 = ::hx::IsLess( songNotes->__GetItem(1),4 );
            						}
            						else {
HXLINE(1340)							_hx_tmp8 = false;
            						}
HXDLIN(1340)						swagNote->gfNote = _hx_tmp8;
HXLINE(1341)						swagNote->set_noteType(( (::String)(songNotes->__GetItem(3)) ));
HXLINE(1342)						if (!(::Std_obj::isOfType(songNotes->__GetItem(3),::hx::ClassOf< ::String >()))) {
HXLINE(1342)							swagNote->set_noteType(::states::editors::ChartingState_obj::noteTypeList->__get(( (int)(songNotes->__GetItem(3)) )));
            						}
HXLINE(1344)						{
HXLINE(1344)							 ::flixel::math::FlxBasePoint this1 = swagNote->scrollFactor;
HXDLIN(1344)							this1->set_x(( (Float)(0) ));
HXDLIN(1344)							this1->set_y(( (Float)(0) ));
            						}
HXLINE(1346)						this->unspawnNotes->push(swagNote);
HXLINE(1348)						Float susLength = (swagNote->sustainLength / ::backend::Conductor_obj::stepCrochet);
HXLINE(1349)						int floorSus = ::Math_obj::floor(susLength);
HXLINE(1351)						if ((floorSus > 0)) {
HXLINE(1352)							int _g8 = 0;
HXDLIN(1352)							int _g9 = (floorSus + 1);
HXDLIN(1352)							while((_g8 < _g9)){
HXLINE(1352)								_g8 = (_g8 + 1);
HXDLIN(1352)								int susNote = (_g8 - 1);
HXLINE(1354)								oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::objects::Note >();
HXLINE(1356)								 ::objects::Note sustainNote =  ::objects::Note_obj::__alloc( HX_CTX ,(daStrumTime + (::backend::Conductor_obj::stepCrochet * ( (Float)(susNote) ))),daNoteData,oldNote,true,null(),null());
HXLINE(1357)								sustainNote->mustPress = gottaHitNote;
HXLINE(1358)								bool _hx_tmp9;
HXDLIN(1358)								if (( (bool)(section->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic)) )) {
HXLINE(1358)									_hx_tmp9 = ::hx::IsLess( songNotes->__GetItem(1),4 );
            								}
            								else {
HXLINE(1358)									_hx_tmp9 = false;
            								}
HXDLIN(1358)								sustainNote->gfNote = _hx_tmp9;
HXLINE(1359)								sustainNote->set_noteType(swagNote->noteType);
HXLINE(1360)								{
HXLINE(1360)									 ::flixel::math::FlxBasePoint this2 = sustainNote->scrollFactor;
HXDLIN(1360)									this2->set_x(( (Float)(0) ));
HXDLIN(1360)									this2->set_y(( (Float)(0) ));
            								}
HXLINE(1361)								sustainNote->parent = swagNote;
HXLINE(1362)								this->unspawnNotes->push(sustainNote);
HXLINE(1363)								swagNote->tail->push(sustainNote);
HXLINE(1365)								sustainNote->correctionOffset = (swagNote->get_height() / ( (Float)(2) ));
HXLINE(1366)								if (!(::states::PlayState_obj::get_isPixelStage())) {
HXLINE(1368)									if (oldNote->isSustainNote) {
HXLINE(1370)										oldNote->scale->set_y((oldNote->scale->y * (( (Float)(::objects::Note_obj::SUSTAIN_SIZE) ) / ( (Float)(oldNote->frameHeight) ))));
HXLINE(1371)										oldNote->scale->set_y((oldNote->scale->y / this->playbackRate));
HXLINE(1372)										oldNote->updateHitbox();
            									}
HXLINE(1375)									if (::backend::ClientPrefs_obj::data->downScroll) {
HXLINE(1376)										sustainNote->correctionOffset = ( (Float)(0) );
            									}
            								}
            								else {
HXLINE(1378)									if (oldNote->isSustainNote) {
HXLINE(1380)										oldNote->scale->set_y((oldNote->scale->y / this->playbackRate));
HXLINE(1381)										oldNote->updateHitbox();
            									}
            								}
HXLINE(1384)								if (sustainNote->mustPress) {
HXLINE(1384)									sustainNote->set_x((sustainNote->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            								}
            								else {
HXLINE(1385)									if (::backend::ClientPrefs_obj::data->middleScroll) {
HXLINE(1387)										sustainNote->set_x((sustainNote->x + 310));
HXLINE(1388)										if ((daNoteData > 1)) {
HXLINE(1389)											sustainNote->set_x((sustainNote->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 25)));
            										}
            									}
            								}
            							}
            						}
HXLINE(1394)						if (swagNote->mustPress) {
HXLINE(1396)							swagNote->set_x((swagNote->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            						}
            						else {
HXLINE(1398)							if (::backend::ClientPrefs_obj::data->middleScroll) {
HXLINE(1400)								swagNote->set_x((swagNote->x + 310));
HXLINE(1401)								if ((daNoteData > 1)) {
HXLINE(1403)									swagNote->set_x((swagNote->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 25)));
            								}
            							}
            						}
HXLINE(1407)						if (!(this->noteTypes->contains(swagNote->noteType))) {
HXLINE(1408)							this->noteTypes->push(swagNote->noteType);
            						}
            					}
            				}
            			}
            		}
HXLINE(1412)		{
HXLINE(1412)			int _g10 = 0;
HXDLIN(1412)			::cpp::VirtualArray _g11 = ( (::cpp::VirtualArray)(songData->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) );
HXDLIN(1412)			while((_g10 < _g11->get_length())){
HXLINE(1412)				 ::Dynamic event1 = _g11->__get(_g10);
HXDLIN(1412)				_g10 = (_g10 + 1);
HXLINE(1413)				{
HXLINE(1413)					int _g12 = 0;
HXDLIN(1413)					int _g13 = ( (int)(event1->__GetItem(1)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN(1413)					while((_g12 < _g13)){
HXLINE(1413)						_g12 = (_g12 + 1);
HXDLIN(1413)						int i1 = (_g12 - 1);
HXLINE(1414)						this->makeEvent(( (::cpp::VirtualArray)(event1) ),i1);
            					}
            				}
            			}
            		}
HXLINE(1416)		this->unspawnNotes->sort(::states::PlayState_obj::sortByTime_dyn());
HXLINE(1417)		this->generatedMusic = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateSong,(void))

void PlayState_obj::eventPushed( ::Dynamic event){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,event) HXARGC(1)
            		void _hx_run( ::backend::BaseStage stage){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_1427_eventPushed)
HXLINE(1427)			stage->eventPushed(event);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1421_eventPushed)
HXLINE(1422)		this->eventPushedUnique(event);
HXLINE(1423)		if (this->eventsPushed->contains( ::Dynamic(event->__Field(HX_("event",1a,c8,c4,75),::hx::paccDynamic)))) {
HXLINE(1424)			return;
            		}
HXLINE(1427)		this->stagesFunc( ::Dynamic(new _hx_Closure_0(event)));
HXLINE(1428)		this->eventsPushed->push( ::Dynamic(event->__Field(HX_("event",1a,c8,c4,75),::hx::paccDynamic)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,eventPushed,(void))

void PlayState_obj::eventPushedUnique( ::Dynamic event){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,event) HXARGC(1)
            		void _hx_run( ::backend::BaseStage stage){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_1453_eventPushedUnique)
HXLINE(1453)			stage->eventPushedUnique(event);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1432_eventPushedUnique)
HXLINE(1433)		::String _hx_switch_0 = ( (::String)(event->__Field(HX_("event",1a,c8,c4,75),::hx::paccDynamic)) );
            		if (  (_hx_switch_0==HX_("Change Character",f9,50,ef,9c)) ){
HXLINE(1435)			int charType = 0;
HXLINE(1436)			::String _hx_switch_1 = ( (::String)(event->__Field(HX_("value1",a0,03,b7,4f),::hx::paccDynamic)) ).toLowerCase();
            			if (  (_hx_switch_1==HX_("0",30,00,00,00)) ||  (_hx_switch_1==HX_("dad",47,36,4c,00)) ||  (_hx_switch_1==HX_("opponent",9d,b9,b8,f8)) ){
HXLINE(1440)				charType = 1;
HXDLIN(1440)				goto _hx_goto_86;
            			}
            			if (  (_hx_switch_1==HX_("1",31,00,00,00)) ||  (_hx_switch_1==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_1==HX_("girlfriend",ba,91,48,98)) ){
HXLINE(1438)				charType = 2;
HXDLIN(1438)				goto _hx_goto_86;
            			}
            			/* default */{
HXLINE(1442)				int val1 = ( (int)(::Std_obj::parseInt(( (::String)(event->__Field(HX_("value1",a0,03,b7,4f),::hx::paccDynamic)) ))) );
HXLINE(1443)				if (::Math_obj::isNaN(( (Float)(val1) ))) {
HXLINE(1443)					val1 = 0;
            				}
HXLINE(1444)				charType = val1;
            			}
            			_hx_goto_86:;
HXLINE(1447)			::String newCharacter = ( (::String)(event->__Field(HX_("value2",a1,03,b7,4f),::hx::paccDynamic)) );
HXLINE(1448)			this->addCharacterToList(newCharacter,charType);
HXLINE(1434)			goto _hx_goto_85;
            		}
            		if (  (_hx_switch_0==HX_("Play Sound",a3,a9,45,48)) ){
HXLINE(1451)			::backend::Paths_obj::sound(( (::String)(event->__Field(HX_("value1",a0,03,b7,4f),::hx::paccDynamic)) ),null());
HXDLIN(1451)			goto _hx_goto_85;
            		}
            		_hx_goto_85:;
HXLINE(1453)		this->stagesFunc( ::Dynamic(new _hx_Closure_0(event)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,eventPushedUnique,(void))

Float PlayState_obj::eventEarlyTrigger( ::Dynamic event){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1456_eventEarlyTrigger)
HXLINE(1457)		 ::Dynamic returnedValue = this->callOnScripts(HX_("eventEarlyTrigger",0f,d2,46,ab),::cpp::VirtualArray_obj::__new(4)->init(0, ::Dynamic(event->__Field(HX_("event",1a,c8,c4,75),::hx::paccDynamic)))->init(1, ::Dynamic(event->__Field(HX_("value1",a0,03,b7,4f),::hx::paccDynamic)))->init(2, ::Dynamic(event->__Field(HX_("value2",a1,03,b7,4f),::hx::paccDynamic)))->init(3, ::Dynamic(event->__Field(HX_("strumTime",f6,2d,21,f4),::hx::paccDynamic))),true,::Array_obj< ::String >::__new(0),::cpp::VirtualArray_obj::__new(1)->init(0,0));
HXLINE(1458)		bool _hx_tmp;
HXDLIN(1458)		bool _hx_tmp1;
HXDLIN(1458)		if (::hx::IsNotNull( returnedValue )) {
HXLINE(1458)			_hx_tmp1 = ::hx::IsNotEq( returnedValue,0 );
            		}
            		else {
HXLINE(1458)			_hx_tmp1 = false;
            		}
HXDLIN(1458)		if (_hx_tmp1) {
HXLINE(1458)			_hx_tmp = ::hx::IsNotEq( returnedValue,::psychlua::LuaUtils_obj::Function_Continue );
            		}
            		else {
HXLINE(1458)			_hx_tmp = false;
            		}
HXDLIN(1458)		if (_hx_tmp) {
HXLINE(1459)			return ( (Float)(returnedValue) );
            		}
HXLINE(1462)		if (::hx::IsEq( event->__Field(HX_("event",1a,c8,c4,75),::hx::paccDynamic),HX_("Kill Henchmen",e2,fc,7b,01) )) {
HXLINE(1464)			return ( (Float)(280) );
            		}
HXLINE(1466)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,eventEarlyTrigger,return )

void PlayState_obj::makeEvent(::cpp::VirtualArray event,int i){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1473_makeEvent)
HXLINE(1474)		 ::Dynamic subEvent =  ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("strumTime",f6,2d,21,f4),( (Float)((event->__get(0) + ::backend::ClientPrefs_obj::data->noteOffset)) ))
            			->setFixed(1,HX_("value1",a0,03,b7,4f),event->__get(1)->__GetItem(i)->__GetItem(1))
            			->setFixed(2,HX_("value2",a1,03,b7,4f),event->__get(1)->__GetItem(i)->__GetItem(2))
            			->setFixed(3,HX_("event",1a,c8,c4,75),event->__get(1)->__GetItem(i)->__GetItem(0)));
HXLINE(1480)		this->eventNotes->push(subEvent);
HXLINE(1481)		this->eventPushed(subEvent);
HXLINE(1482)		 ::Dynamic _hx_tmp;
HXDLIN(1482)		if (::hx::IsNotNull( subEvent->__Field(HX_("value1",a0,03,b7,4f),::hx::paccDynamic) )) {
HXLINE(1482)			_hx_tmp =  ::Dynamic(subEvent->__Field(HX_("value1",a0,03,b7,4f),::hx::paccDynamic));
            		}
            		else {
HXLINE(1482)			_hx_tmp = HX_("",00,00,00,00);
            		}
HXDLIN(1482)		 ::Dynamic _hx_tmp1;
HXDLIN(1482)		if (::hx::IsNotNull( subEvent->__Field(HX_("value2",a1,03,b7,4f),::hx::paccDynamic) )) {
HXLINE(1482)			_hx_tmp1 =  ::Dynamic(subEvent->__Field(HX_("value2",a1,03,b7,4f),::hx::paccDynamic));
            		}
            		else {
HXLINE(1482)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXDLIN(1482)		this->callOnScripts(HX_("onEventPushed",94,7d,64,28),::cpp::VirtualArray_obj::__new(4)->init(0, ::Dynamic(subEvent->__Field(HX_("event",1a,c8,c4,75),::hx::paccDynamic)))->init(1,_hx_tmp)->init(2,_hx_tmp1)->init(3, ::Dynamic(subEvent->__Field(HX_("strumTime",f6,2d,21,f4),::hx::paccDynamic))),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,makeEvent,(void))

void PlayState_obj::generateStaticArrows(int player){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1487_generateStaticArrows)
HXLINE(1488)		Float strumLineX;
HXDLIN(1488)		if (::backend::ClientPrefs_obj::data->middleScroll) {
HXLINE(1488)			strumLineX = ( (Float)(::states::PlayState_obj::STRUM_X_MIDDLESCROLL) );
            		}
            		else {
HXLINE(1488)			strumLineX = ( (Float)(::states::PlayState_obj::STRUM_X) );
            		}
HXLINE(1489)		Float strumLineY;
HXDLIN(1489)		if (::backend::ClientPrefs_obj::data->downScroll) {
HXLINE(1489)			strumLineY = ( (Float)((::flixel::FlxG_obj::height - 150)) );
            		}
            		else {
HXLINE(1489)			strumLineY = ( (Float)(50) );
            		}
HXLINE(1490)		{
HXLINE(1490)			int _g = 0;
HXDLIN(1490)			while((_g < 4)){
HXLINE(1490)				_g = (_g + 1);
HXDLIN(1490)				int i = (_g - 1);
HXLINE(1493)				Float targetAlpha = ( (Float)(1) );
HXLINE(1494)				if ((player < 1)) {
HXLINE(1496)					if (!(::backend::ClientPrefs_obj::data->opponentStrums)) {
HXLINE(1496)						targetAlpha = ( (Float)(0) );
            					}
            					else {
HXLINE(1497)						if (::backend::ClientPrefs_obj::data->middleScroll) {
HXLINE(1497)							targetAlpha = ((Float)0.35);
            						}
            					}
            				}
HXLINE(1500)				 ::objects::StrumNote babyArrow =  ::objects::StrumNote_obj::__alloc( HX_CTX ,strumLineX,strumLineY,i,player);
HXLINE(1501)				babyArrow->downScroll = ::backend::ClientPrefs_obj::data->downScroll;
HXLINE(1502)				bool _hx_tmp;
HXDLIN(1502)				if (!(::states::PlayState_obj::isStoryMode)) {
HXLINE(1502)					_hx_tmp = !(this->skipArrowStartTween);
            				}
            				else {
HXLINE(1502)					_hx_tmp = false;
            				}
HXDLIN(1502)				if (_hx_tmp) {
HXLINE(1505)					babyArrow->set_alpha(( (Float)(0) ));
HXLINE(1506)					::flixel::tweens::FlxTween_obj::tween(babyArrow, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),targetAlpha)),1, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("startDelay",c1,af,3d,f3),(((Float)0.5) + (((Float)0.2) * ( (Float)(i) ))))
            						->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
            				}
            				else {
HXLINE(1509)					babyArrow->set_alpha(targetAlpha);
            				}
HXLINE(1511)				if ((player == 1)) {
HXLINE(1512)					this->playerStrums->add(babyArrow).StaticCast<  ::objects::StrumNote >();
            				}
            				else {
HXLINE(1515)					if (::backend::ClientPrefs_obj::data->middleScroll) {
HXLINE(1517)						babyArrow->set_x((babyArrow->x + 310));
HXLINE(1518)						if ((i > 1)) {
HXLINE(1519)							babyArrow->set_x((babyArrow->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 25)));
            						}
            					}
HXLINE(1522)					this->opponentStrums->add(babyArrow).StaticCast<  ::objects::StrumNote >();
            				}
HXLINE(1525)				this->strumLineNotes->add(babyArrow).StaticCast<  ::objects::StrumNote >();
HXLINE(1526)				babyArrow->postAddedToGroup();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateStaticArrows,(void))

void PlayState_obj::openSubState( ::flixel::FlxSubState SubState){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSubState,SubState) HXARGC(1)
            		void _hx_run( ::backend::BaseStage stage){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_1532_openSubState)
HXLINE(1532)			stage->openSubState(SubState);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1531_openSubState)
HXLINE(1532)		this->stagesFunc( ::Dynamic(new _hx_Closure_0(SubState)));
HXLINE(1533)		if (this->paused) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_STACKFRAME(&_hx_pos_801e532e222627de_1541_openSubState)
HXLINE(1541)				if (!(tmr->finished)) {
HXLINE(1541)					tmr->active = false;
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween twn){
            				HX_STACKFRAME(&_hx_pos_801e532e222627de_1542_openSubState)
HXLINE(1542)				if (!(twn->finished)) {
HXLINE(1542)					twn->set_active(false);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1535)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1537)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(1538)				this->vocals->pause();
HXLINE(1539)				this->opponentVocals->pause();
            			}
HXLINE(1541)			::flixel::util::FlxTimer_obj::globalManager->forEach( ::Dynamic(new _hx_Closure_1()));
HXLINE(1542)			::flixel::tweens::FlxTween_obj::globalManager->forEach( ::Dynamic(new _hx_Closure_2()));
            		}
HXLINE(1545)		this->super::openSubState(SubState);
            	}


void PlayState_obj::closeSubState(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::backend::BaseStage stage){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_1552_closeSubState)
HXLINE(1552)			stage->closeSubState();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1549_closeSubState)
HXLINE(1550)		this->super::closeSubState();
HXLINE(1552)		this->stagesFunc( ::Dynamic(new _hx_Closure_0()));
HXLINE(1553)		if (this->paused) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_STACKFRAME(&_hx_pos_801e532e222627de_1559_closeSubState)
HXLINE(1559)				if (!(tmr->finished)) {
HXLINE(1559)					tmr->active = true;
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween twn){
            				HX_STACKFRAME(&_hx_pos_801e532e222627de_1560_closeSubState)
HXLINE(1560)				if (!(twn->finished)) {
HXLINE(1560)					twn->set_active(true);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1555)			bool _hx_tmp;
HXDLIN(1555)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1555)				_hx_tmp = !(this->startingSong);
            			}
            			else {
HXLINE(1555)				_hx_tmp = false;
            			}
HXDLIN(1555)			if (_hx_tmp) {
HXLINE(1557)				this->resyncVocals();
            			}
HXLINE(1559)			::flixel::util::FlxTimer_obj::globalManager->forEach( ::Dynamic(new _hx_Closure_1()));
HXLINE(1560)			::flixel::tweens::FlxTween_obj::globalManager->forEach( ::Dynamic(new _hx_Closure_2()));
HXLINE(1562)			this->paused = false;
HXLINE(1563)			this->callOnScripts(HX_("onResume",2c,60,31,e8),null(),null(),null(),null());
HXLINE(1564)			bool _hx_tmp1;
HXDLIN(1564)			if (::hx::IsNotNull( this->startTimer )) {
HXLINE(1564)				_hx_tmp1 = this->startTimer->finished;
            			}
            			else {
HXLINE(1564)				_hx_tmp1 = false;
            			}
HXDLIN(1564)			this->resetRPC(_hx_tmp1);
            		}
            	}


void PlayState_obj::onFocus(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1569_onFocus)
HXLINE(1570)		bool _hx_tmp;
HXDLIN(1570)		if ((this->health > 0)) {
HXLINE(1570)			_hx_tmp = !(this->paused);
            		}
            		else {
HXLINE(1570)			_hx_tmp = false;
            		}
HXDLIN(1570)		if (_hx_tmp) {
HXLINE(1570)			this->resetRPC((::backend::Conductor_obj::songPosition > ((Float)0.0)));
            		}
HXLINE(1571)		this->super::onFocus();
            	}


void PlayState_obj::onFocusLost(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1575_onFocusLost)
HXLINE(1577)		bool _hx_tmp;
HXDLIN(1577)		bool _hx_tmp1;
HXDLIN(1577)		if ((this->health > 0)) {
HXLINE(1577)			_hx_tmp1 = !(this->paused);
            		}
            		else {
HXLINE(1577)			_hx_tmp1 = false;
            		}
HXDLIN(1577)		if (_hx_tmp1) {
HXLINE(1577)			_hx_tmp = this->autoUpdateRPC;
            		}
            		else {
HXLINE(1577)			_hx_tmp = false;
            		}
HXDLIN(1577)		if (_hx_tmp) {
HXLINE(1577)			::String _hx_tmp2 = this->detailsPausedText;
HXDLIN(1577)			::String _hx_tmp3 = ( (::String)((((::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) );
HXDLIN(1577)			::backend::DiscordClient_obj::changePresence(_hx_tmp2,_hx_tmp3,this->iconP2->getCharacter(),null(),null());
            		}
HXLINE(1580)		this->super::onFocusLost();
            	}


void PlayState_obj::resetRPC( ::Dynamic __o_showTime){
            		 ::Dynamic showTime = __o_showTime;
            		if (::hx::IsNull(__o_showTime)) showTime = false;
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1586_resetRPC)
HXLINE(1588)		if (!(this->autoUpdateRPC)) {
HXLINE(1588)			return;
            		}
HXLINE(1590)		if (( (bool)(showTime) )) {
HXLINE(1591)			::String _hx_tmp = this->detailsText;
HXDLIN(1591)			::String _hx_tmp1 = ( (::String)((((::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) );
HXDLIN(1591)			::String _hx_tmp2 = this->iconP2->getCharacter();
HXDLIN(1591)			::backend::DiscordClient_obj::changePresence(_hx_tmp,_hx_tmp1,_hx_tmp2,true,((this->songLength - ::backend::Conductor_obj::songPosition) - ( (Float)(::backend::ClientPrefs_obj::data->noteOffset) )));
            		}
            		else {
HXLINE(1593)			::String _hx_tmp3 = this->detailsText;
HXDLIN(1593)			::String _hx_tmp4 = ( (::String)((((::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) );
HXDLIN(1593)			::backend::DiscordClient_obj::changePresence(_hx_tmp3,_hx_tmp4,this->iconP2->getCharacter(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,resetRPC,(void))

void PlayState_obj::resyncVocals(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1598_resyncVocals)
HXLINE(1599)		if (::hx::IsNotNull( this->finishTimer )) {
HXLINE(1599)			return;
            		}
HXLINE(1601)		this->vocals->pause();
HXLINE(1602)		this->opponentVocals->pause();
HXLINE(1604)		::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(1605)		::flixel::FlxG_obj::sound->music->set_pitch(this->playbackRate);
HXLINE(1606)		::backend::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(1607)		if ((::backend::Conductor_obj::songPosition <= this->vocals->_length)) {
HXLINE(1609)			this->vocals->set_time(::backend::Conductor_obj::songPosition);
HXLINE(1610)			this->vocals->set_pitch(this->playbackRate);
            		}
HXLINE(1613)		if ((::backend::Conductor_obj::songPosition <= this->opponentVocals->_length)) {
HXLINE(1615)			this->opponentVocals->set_time(::backend::Conductor_obj::songPosition);
HXLINE(1616)			this->opponentVocals->set_pitch(this->playbackRate);
            		}
HXLINE(1618)		this->vocals->play(null(),null(),null());
HXLINE(1619)		this->opponentVocals->play(null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,resyncVocals,(void))

void PlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1630_update)
HXDLIN(1630)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1631)		bool _hx_tmp;
HXDLIN(1631)		bool _hx_tmp1;
HXDLIN(1631)		if (!(this->inCutscene)) {
HXLINE(1631)			_hx_tmp1 = !(this->paused);
            		}
            		else {
HXLINE(1631)			_hx_tmp1 = false;
            		}
HXDLIN(1631)		if (_hx_tmp1) {
HXLINE(1631)			_hx_tmp = !(this->freezeCamera);
            		}
            		else {
HXLINE(1631)			_hx_tmp = false;
            		}
HXDLIN(1631)		if (_hx_tmp) {
HXLINE(1632)			::flixel::FlxG_obj::camera->set_followLerp(((((Float)2.4) * this->cameraSpeed) * this->playbackRate));
HXLINE(1633)			bool _hx_tmp2;
HXDLIN(1633)			bool _hx_tmp3;
HXDLIN(1633)			if (!(this->startingSong)) {
HXLINE(1633)				_hx_tmp3 = !(this->endingSong);
            			}
            			else {
HXLINE(1633)				_hx_tmp3 = false;
            			}
HXDLIN(1633)			if (_hx_tmp3) {
HXLINE(1633)				 ::objects::Character _this = this->boyfriend;
HXDLIN(1633)				::String name = HX_("",00,00,00,00);
HXDLIN(1633)				bool _hx_tmp4;
HXDLIN(1633)				if (!(_this->isAnimateAtlas)) {
HXLINE(1633)					_hx_tmp4 = ::hx::IsNull( _this->animation->_curAnim );
            				}
            				else {
HXLINE(1633)					_hx_tmp4 = ::hx::IsNull( _this->atlas->anim->get_curSymbol() );
            				}
HXDLIN(1633)				if (!(_hx_tmp4)) {
HXLINE(1633)					if (!(_this->isAnimateAtlas)) {
HXLINE(1633)						name = _this->animation->_curAnim->name;
            					}
            					else {
HXLINE(1633)						name = _this->atlas->anim->lastPlayedAnim;
            					}
            				}
HXDLIN(1633)				::String _hx_tmp5;
HXDLIN(1633)				if (::hx::IsNotNull( name )) {
HXLINE(1633)					_hx_tmp5 = name;
            				}
            				else {
HXLINE(1633)					_hx_tmp5 = HX_("",00,00,00,00);
            				}
HXDLIN(1633)				_hx_tmp2 = ::StringTools_obj::startsWith(_hx_tmp5,HX_("idle",14,a7,b3,45));
            			}
            			else {
HXLINE(1633)				_hx_tmp2 = false;
            			}
HXDLIN(1633)			if (_hx_tmp2) {
HXLINE(1634)				 ::states::PlayState _hx_tmp6 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1634)				_hx_tmp6->boyfriendIdleTime = (_hx_tmp6->boyfriendIdleTime + elapsed);
HXLINE(1635)				if ((this->boyfriendIdleTime >= ((Float)0.15))) {
HXLINE(1636)					this->boyfriendIdled = true;
            				}
            			}
            			else {
HXLINE(1639)				this->boyfriendIdleTime = ( (Float)(0) );
            			}
            		}
            		else {
HXLINE(1642)			::flixel::FlxG_obj::camera->set_followLerp(( (Float)(0) ));
            		}
HXLINE(1643)		this->callOnScripts(HX_("onUpdate",88,7c,b2,66),::cpp::VirtualArray_obj::__new(1)->init(0,elapsed),null(),null(),null());
HXLINE(1645)		this->super::update(elapsed);
HXLINE(1647)		this->setOnScripts(HX_("curDecStep",8e,a8,37,e3),this->curDecStep,null());
HXLINE(1648)		this->setOnScripts(HX_("curDecBeat",b8,a2,ef,d7),this->curDecBeat,null());
HXLINE(1650)		bool _hx_tmp7;
HXDLIN(1650)		if (::hx::IsNotNull( this->botplayTxt )) {
HXLINE(1650)			_hx_tmp7 = this->botplayTxt->visible;
            		}
            		else {
HXLINE(1650)			_hx_tmp7 = false;
            		}
HXDLIN(1650)		if (_hx_tmp7) {
HXLINE(1651)			 ::states::PlayState _hx_tmp8 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1651)			_hx_tmp8->botplaySine = (_hx_tmp8->botplaySine + (( (Float)(180) ) * elapsed));
HXLINE(1652)			this->botplayTxt->set_alpha((( (Float)(1) ) - ::Math_obj::sin(((::Math_obj::PI * this->botplaySine) / ( (Float)(180) )))));
            		}
HXLINE(1655)		bool _hx_tmp9;
HXDLIN(1655)		bool _hx_tmp10;
HXDLIN(1655)		if (this->get_controls()->get_PAUSE()) {
HXLINE(1655)			_hx_tmp10 = this->startedCountdown;
            		}
            		else {
HXLINE(1655)			_hx_tmp10 = false;
            		}
HXDLIN(1655)		if (_hx_tmp10) {
HXLINE(1655)			_hx_tmp9 = this->canPause;
            		}
            		else {
HXLINE(1655)			_hx_tmp9 = false;
            		}
HXDLIN(1655)		if (_hx_tmp9) {
HXLINE(1657)			 ::Dynamic ret = this->callOnScripts(HX_("onPause",57,75,95,53),null(),true,null(),null());
HXLINE(1658)			if (::hx::IsNotEq( ret,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(1659)				this->openPauseMenu();
            			}
            		}
HXLINE(1663)		bool _hx_tmp11;
HXDLIN(1663)		bool _hx_tmp12;
HXDLIN(1663)		if (!(this->endingSong)) {
HXLINE(1663)			_hx_tmp12 = !(this->inCutscene);
            		}
            		else {
HXLINE(1663)			_hx_tmp12 = false;
            		}
HXDLIN(1663)		if (_hx_tmp12) {
HXLINE(1663)			_hx_tmp11 = this->allowDebugKeys;
            		}
            		else {
HXLINE(1663)			_hx_tmp11 = false;
            		}
HXDLIN(1663)		if (_hx_tmp11) {
HXLINE(1665)			if (this->get_controls()->justPressed(HX_("debug_1",05,20,57,5b))) {
HXLINE(1666)				this->openChartEditor();
            			}
            			else {
HXLINE(1667)				if (this->get_controls()->justPressed(HX_("debug_2",06,20,57,5b))) {
HXLINE(1668)					this->openCharacterEditor();
            				}
            			}
            		}
HXLINE(1671)		bool _hx_tmp13;
HXDLIN(1671)		if (::hx::IsNotNull( this->healthBar->bounds->__Field(HX_("max",a4,0a,53,00),::hx::paccDynamic) )) {
HXLINE(1671)			_hx_tmp13 = ::hx::IsGreater( this->health,this->healthBar->bounds->__Field(HX_("max",a4,0a,53,00),::hx::paccDynamic) );
            		}
            		else {
HXLINE(1671)			_hx_tmp13 = false;
            		}
HXDLIN(1671)		if (_hx_tmp13) {
HXLINE(1672)			this->set_health(( (Float)(this->healthBar->bounds->__Field(HX_("max",a4,0a,53,00),::hx::paccDynamic)) ));
            		}
HXLINE(1674)		this->updateIconsScale(elapsed);
HXLINE(1675)		this->updateIconsPosition();
HXLINE(1677)		bool _hx_tmp14;
HXDLIN(1677)		if (this->startedCountdown) {
HXLINE(1677)			_hx_tmp14 = !(this->paused);
            		}
            		else {
HXLINE(1677)			_hx_tmp14 = false;
            		}
HXDLIN(1677)		if (_hx_tmp14) {
HXLINE(1678)			 ::Dynamic _hx_tmp15 = ::hx::ClassOf< ::backend::Conductor >();
HXDLIN(1678)			::backend::Conductor_obj::songPosition = (::backend::Conductor_obj::songPosition + ((::flixel::FlxG_obj::elapsed * ( (Float)(1000) )) * this->playbackRate));
            		}
HXLINE(1680)		if (this->startingSong) {
HXLINE(1682)			bool _hx_tmp16;
HXDLIN(1682)			if (this->startedCountdown) {
HXLINE(1682)				_hx_tmp16 = (::backend::Conductor_obj::songPosition >= 0);
            			}
            			else {
HXLINE(1682)				_hx_tmp16 = false;
            			}
HXDLIN(1682)			if (_hx_tmp16) {
HXLINE(1683)				this->startSong();
            			}
            			else {
HXLINE(1684)				if (!(this->startedCountdown)) {
HXLINE(1685)					::backend::Conductor_obj::songPosition = (-(::backend::Conductor_obj::crochet) * ( (Float)(5) ));
            				}
            			}
            		}
            		else {
HXLINE(1687)			bool _hx_tmp17;
HXDLIN(1687)			if (!(this->paused)) {
HXLINE(1687)				_hx_tmp17 = this->updateTime;
            			}
            			else {
HXLINE(1687)				_hx_tmp17 = false;
            			}
HXDLIN(1687)			if (_hx_tmp17) {
HXLINE(1689)				Float curTime = ::Math_obj::max(( (Float)(0) ),(::backend::Conductor_obj::songPosition - ( (Float)(::backend::ClientPrefs_obj::data->noteOffset) )));
HXLINE(1690)				this->songPercent = (curTime / this->songLength);
HXLINE(1692)				Float songCalc = (this->songLength - curTime);
HXLINE(1693)				if ((::backend::ClientPrefs_obj::data->timeBarType == HX_("Time Elapsed",29,71,5d,35))) {
HXLINE(1693)					songCalc = curTime;
            				}
HXLINE(1695)				int secondsTotal = ::Math_obj::floor((songCalc / ( (Float)(1000) )));
HXLINE(1696)				if ((secondsTotal < 0)) {
HXLINE(1696)					secondsTotal = 0;
            				}
HXLINE(1698)				if ((::backend::ClientPrefs_obj::data->timeBarType != HX_("Song Name",76,e6,ca,de))) {
HXLINE(1699)					 ::flixel::text::FlxText _hx_tmp18 = this->timeTxt;
HXDLIN(1699)					_hx_tmp18->set_text(::flixel::util::FlxStringUtil_obj::formatTime(( (Float)(secondsTotal) ),false));
            				}
            			}
            		}
HXLINE(1702)		if (this->camZooming) {
HXLINE(1704)			Float a = this->defaultCamZoom;
HXDLIN(1704)			::flixel::FlxG_obj::camera->set_zoom((a + (::Math_obj::exp((((-(elapsed) * ((Float)3.125)) * this->camZoomingDecay) * this->playbackRate)) * (::flixel::FlxG_obj::camera->zoom - a))));
HXLINE(1705)			this->camHUD->set_zoom((1 + (::Math_obj::exp((((-(elapsed) * ((Float)3.125)) * this->camZoomingDecay) * this->playbackRate)) * (this->camHUD->zoom - ( (Float)(1) )))));
            		}
HXLINE(1713)		bool _hx_tmp19;
HXDLIN(1713)		bool _hx_tmp20;
HXDLIN(1713)		bool _hx_tmp21;
HXDLIN(1713)		bool _hx_tmp22;
HXDLIN(1713)		bool _hx_tmp23;
HXDLIN(1713)		if (!(::backend::ClientPrefs_obj::data->noReset)) {
HXLINE(1713)			_hx_tmp23 = this->get_controls()->get_RESET();
            		}
            		else {
HXLINE(1713)			_hx_tmp23 = false;
            		}
HXDLIN(1713)		if (_hx_tmp23) {
HXLINE(1713)			_hx_tmp22 = this->canReset;
            		}
            		else {
HXLINE(1713)			_hx_tmp22 = false;
            		}
HXDLIN(1713)		if (_hx_tmp22) {
HXLINE(1713)			_hx_tmp21 = !(this->inCutscene);
            		}
            		else {
HXLINE(1713)			_hx_tmp21 = false;
            		}
HXDLIN(1713)		if (_hx_tmp21) {
HXLINE(1713)			_hx_tmp20 = this->startedCountdown;
            		}
            		else {
HXLINE(1713)			_hx_tmp20 = false;
            		}
HXDLIN(1713)		if (_hx_tmp20) {
HXLINE(1713)			_hx_tmp19 = !(this->endingSong);
            		}
            		else {
HXLINE(1713)			_hx_tmp19 = false;
            		}
HXDLIN(1713)		if (_hx_tmp19) {
HXLINE(1715)			this->set_health(( (Float)(0) ));
HXLINE(1716)			::haxe::Log_obj::trace(HX_("RESET = True",82,e0,2a,fe),::hx::SourceInfo(HX_("source/states/PlayState.hx",3a,21,29,28),1716,HX_("states.PlayState",31,cd,20,04),HX_("update",09,86,05,87)));
            		}
HXLINE(1718)		this->doDeathCheck(null());
HXLINE(1720)		if (::hx::IsNotNull( this->unspawnNotes->__get(0).StaticCast<  ::objects::Note >() )) {
HXLINE(1722)			Float time = (this->spawnTime * this->playbackRate);
HXLINE(1723)			if ((this->songSpeed < 1)) {
HXLINE(1723)				time = (time / this->songSpeed);
            			}
HXLINE(1724)			if ((this->unspawnNotes->__get(0).StaticCast<  ::objects::Note >()->multSpeed < 1)) {
HXLINE(1724)				time = (time / this->unspawnNotes->__get(0).StaticCast<  ::objects::Note >()->multSpeed);
            			}
HXLINE(1726)			while(true){
HXLINE(1726)				bool _hx_tmp24;
HXDLIN(1726)				if ((this->unspawnNotes->length > 0)) {
HXLINE(1726)					_hx_tmp24 = ((this->unspawnNotes->__get(0).StaticCast<  ::objects::Note >()->strumTime - ::backend::Conductor_obj::songPosition) < time);
            				}
            				else {
HXLINE(1726)					_hx_tmp24 = false;
            				}
HXDLIN(1726)				if (!(_hx_tmp24)) {
HXLINE(1726)					goto _hx_goto_105;
            				}
HXLINE(1728)				 ::objects::Note dunceNote = this->unspawnNotes->__get(0).StaticCast<  ::objects::Note >();
HXLINE(1729)				this->notes->insert(0,dunceNote).StaticCast<  ::objects::Note >();
HXLINE(1730)				dunceNote->spawned = true;
HXLINE(1732)				int _hx_tmp25 = this->notes->members->indexOf(dunceNote,null());
HXDLIN(1732)				this->callOnLuas(HX_("onSpawnNote",ae,fe,d7,ca),::cpp::VirtualArray_obj::__new(5)->init(0,_hx_tmp25)->init(1,dunceNote->noteData)->init(2,dunceNote->noteType)->init(3,dunceNote->isSustainNote)->init(4,dunceNote->strumTime),null(),null(),null());
HXLINE(1733)				this->callOnHScript(HX_("onSpawnNote",ae,fe,d7,ca),::cpp::VirtualArray_obj::__new(1)->init(0,dunceNote),null(),null(),null());
HXLINE(1735)				int index = this->unspawnNotes->indexOf(dunceNote,null());
HXLINE(1736)				this->unspawnNotes->removeRange(index,1);
            			}
            			_hx_goto_105:;
            		}
HXLINE(1740)		if (this->generatedMusic) {
HXLINE(1742)			if (!(this->inCutscene)) {
HXLINE(1744)				if (!(this->cpuControlled)) {
HXLINE(1745)					this->keysCheck();
            				}
            				else {
HXLINE(1747)					this->playerDance();
            				}
HXLINE(1749)				if ((this->notes->length > 0)) {
HXLINE(1751)					if (this->startedCountdown) {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,Float,fakeCrochet, ::states::PlayState,_gthis) HXARGC(1)
            						void _hx_run( ::objects::Note daNote){
            							HX_STACKFRAME(&_hx_pos_801e532e222627de_1755_update)
HXLINE(1756)							 ::flixel::group::FlxTypedGroup strumGroup = _gthis->playerStrums;
HXLINE(1757)							if (!(daNote->mustPress)) {
HXLINE(1757)								strumGroup = _gthis->opponentStrums;
            							}
HXLINE(1759)							 ::objects::StrumNote strum = Dynamic( strumGroup->members->__get(daNote->noteData)).StaticCast<  ::objects::StrumNote >();
HXLINE(1760)							daNote->followStrumNote(strum,fakeCrochet,(_gthis->songSpeed / _gthis->playbackRate));
HXLINE(1762)							if (daNote->mustPress) {
HXLINE(1764)								bool _hx_tmp;
HXDLIN(1764)								bool _hx_tmp1;
HXDLIN(1764)								bool _hx_tmp2;
HXDLIN(1764)								if (_gthis->cpuControlled) {
HXLINE(1764)									_hx_tmp2 = !(daNote->blockHit);
            								}
            								else {
HXLINE(1764)									_hx_tmp2 = false;
            								}
HXDLIN(1764)								if (_hx_tmp2) {
HXLINE(1764)									_hx_tmp1 = daNote->canBeHit;
            								}
            								else {
HXLINE(1764)									_hx_tmp1 = false;
            								}
HXDLIN(1764)								if (_hx_tmp1) {
HXLINE(1764)									if (!(daNote->isSustainNote)) {
HXLINE(1764)										_hx_tmp = (daNote->strumTime <= ::backend::Conductor_obj::songPosition);
            									}
            									else {
HXLINE(1764)										_hx_tmp = true;
            									}
            								}
            								else {
HXLINE(1764)									_hx_tmp = false;
            								}
HXDLIN(1764)								if (_hx_tmp) {
HXLINE(1765)									_gthis->goodNoteHit(daNote);
            								}
            							}
            							else {
HXLINE(1767)								bool _hx_tmp3;
HXDLIN(1767)								bool _hx_tmp4;
HXDLIN(1767)								if (daNote->wasGoodHit) {
HXLINE(1767)									_hx_tmp4 = !(daNote->hitByOpponent);
            								}
            								else {
HXLINE(1767)									_hx_tmp4 = false;
            								}
HXDLIN(1767)								if (_hx_tmp4) {
HXLINE(1767)									_hx_tmp3 = !(daNote->ignoreNote);
            								}
            								else {
HXLINE(1767)									_hx_tmp3 = false;
            								}
HXDLIN(1767)								if (_hx_tmp3) {
HXLINE(1768)									_gthis->opponentNoteHit(daNote);
            								}
            							}
HXLINE(1770)							bool _hx_tmp5;
HXDLIN(1770)							if (daNote->isSustainNote) {
HXLINE(1770)								_hx_tmp5 = strum->sustainReduce;
            							}
            							else {
HXLINE(1770)								_hx_tmp5 = false;
            							}
HXDLIN(1770)							if (_hx_tmp5) {
HXLINE(1770)								daNote->clipToStrumNote(strum);
            							}
HXLINE(1773)							if (((::backend::Conductor_obj::songPosition - daNote->strumTime) > _gthis->noteKillOffset)) {
HXLINE(1775)								bool _hx_tmp6;
HXDLIN(1775)								bool _hx_tmp7;
HXDLIN(1775)								bool _hx_tmp8;
HXDLIN(1775)								bool _hx_tmp9;
HXDLIN(1775)								if (daNote->mustPress) {
HXLINE(1775)									_hx_tmp9 = !(_gthis->cpuControlled);
            								}
            								else {
HXLINE(1775)									_hx_tmp9 = false;
            								}
HXDLIN(1775)								if (_hx_tmp9) {
HXLINE(1775)									_hx_tmp8 = !(daNote->ignoreNote);
            								}
            								else {
HXLINE(1775)									_hx_tmp8 = false;
            								}
HXDLIN(1775)								if (_hx_tmp8) {
HXLINE(1775)									_hx_tmp7 = !(_gthis->endingSong);
            								}
            								else {
HXLINE(1775)									_hx_tmp7 = false;
            								}
HXDLIN(1775)								if (_hx_tmp7) {
HXLINE(1775)									if (!(daNote->tooLate)) {
HXLINE(1775)										_hx_tmp6 = !(daNote->wasGoodHit);
            									}
            									else {
HXLINE(1775)										_hx_tmp6 = true;
            									}
            								}
            								else {
HXLINE(1775)									_hx_tmp6 = false;
            								}
HXDLIN(1775)								if (_hx_tmp6) {
HXLINE(1776)									_gthis->noteMiss(daNote);
            								}
HXLINE(1778)								daNote->set_active(daNote->set_visible(false));
HXLINE(1779)								_gthis->invalidateNote(daNote);
            							}
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(1753)						Float fakeCrochet = ((( (Float)(60) ) / ( (Float)(::states::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) )) * ( (Float)(1000) ));
HXLINE(1754)						this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(fakeCrochet,_gthis)),null());
            					}
            					else {
            						HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            						void _hx_run( ::objects::Note daNote){
            							HX_STACKFRAME(&_hx_pos_801e532e222627de_1786_update)
HXLINE(1787)							daNote->canBeHit = false;
HXLINE(1788)							daNote->wasGoodHit = false;
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(1785)						this->notes->forEachAlive( ::Dynamic(new _hx_Closure_1()),null());
            					}
            				}
            			}
HXLINE(1793)			this->checkEventNote();
            		}
HXLINE(1809)		this->setOnScripts(HX_("cameraX",13,8a,31,e3),this->camFollow->x,null());
HXLINE(1810)		this->setOnScripts(HX_("cameraY",14,8a,31,e3),this->camFollow->y,null());
HXLINE(1811)		this->setOnScripts(HX_("botPlay",9b,27,83,4c),this->cpuControlled,null());
HXLINE(1812)		this->callOnScripts(HX_("onUpdatePost",08,11,55,db),::cpp::VirtualArray_obj::__new(1)->init(0,elapsed),null(),null(),null());
            	}


HX_BEGIN_DEFAULT_FUNC(__default_updateIconsScale,PlayState_obj)
void _hx_run(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1817___default_updateIconsScale)
HXLINE(1818)		Float mult = (1 + (::Math_obj::exp(((-(elapsed) * ( (Float)(9) )) * ( ( ::states::PlayState)(__this) )->playbackRate)) * (( ( ::states::PlayState)(__this) )->iconP1->scale->x - ( (Float)(1) ))));
HXLINE(1819)		{
HXLINE(1819)			 ::flixel::math::FlxBasePoint this1 = ( ( ::states::PlayState)(__this) )->iconP1->scale;
HXDLIN(1819)			this1->set_x(mult);
HXDLIN(1819)			this1->set_y(mult);
            		}
HXLINE(1820)		( ( ::states::PlayState)(__this) )->iconP1->updateHitbox();
HXLINE(1822)		Float mult1 = (1 + (::Math_obj::exp(((-(elapsed) * ( (Float)(9) )) * ( ( ::states::PlayState)(__this) )->playbackRate)) * (( ( ::states::PlayState)(__this) )->iconP2->scale->x - ( (Float)(1) ))));
HXLINE(1823)		{
HXLINE(1823)			 ::flixel::math::FlxBasePoint this2 = ( ( ::states::PlayState)(__this) )->iconP2->scale;
HXDLIN(1823)			this2->set_x(mult1);
HXDLIN(1823)			this2->set_y(mult1);
            		}
HXLINE(1824)		( ( ::states::PlayState)(__this) )->iconP2->updateHitbox();
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_updateIconsPosition,PlayState_obj)
void _hx_run(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1828___default_updateIconsPosition)
HXLINE(1829)		int iconOffset = 26;
HXLINE(1830)		( ( ::states::PlayState)(__this) )->iconP1->set_x(((( ( ::states::PlayState)(__this) )->healthBar->barCenter + (((( (Float)(150) ) * ( ( ::states::PlayState)(__this) )->iconP1->scale->x) - ( (Float)(150) )) / ( (Float)(2) ))) - ( (Float)(iconOffset) )));
HXLINE(1831)		( ( ::states::PlayState)(__this) )->iconP2->set_x(((( ( ::states::PlayState)(__this) )->healthBar->barCenter - ((( (Float)(150) ) * ( ( ::states::PlayState)(__this) )->iconP2->scale->x) / ( (Float)(2) ))) - ( (Float)((iconOffset * 2)) )));
            	}
HX_END_LOCAL_FUNC0((void))
HX_END_DEFAULT_FUNC

Float PlayState_obj::set_health(Float value){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1836_set_health)
HXLINE(1837)		bool _hx_tmp;
HXDLIN(1837)		bool _hx_tmp1;
HXDLIN(1837)		bool _hx_tmp2;
HXDLIN(1837)		if (this->iconsAnimations) {
HXLINE(1837)			_hx_tmp2 = ::hx::IsNull( this->healthBar );
            		}
            		else {
HXLINE(1837)			_hx_tmp2 = true;
            		}
HXDLIN(1837)		if (!(_hx_tmp2)) {
HXLINE(1837)			_hx_tmp1 = !(this->healthBar->enabled);
            		}
            		else {
HXLINE(1837)			_hx_tmp1 = true;
            		}
HXDLIN(1837)		if (!(_hx_tmp1)) {
HXLINE(1837)			_hx_tmp = ::hx::IsNull( this->healthBar->valueFunction );
            		}
            		else {
HXLINE(1837)			_hx_tmp = true;
            		}
HXDLIN(1837)		if (_hx_tmp) {
HXLINE(1839)			this->health = value;
HXLINE(1840)			return this->health;
            		}
HXLINE(1844)		this->health = value;
HXLINE(1845)		Float Value = ( (Float)(this->healthBar->valueFunction()) );
HXDLIN(1845)		 ::Dynamic Min = this->healthBar->bounds->__Field(HX_("min",92,11,53,00),::hx::paccDynamic);
HXDLIN(1845)		 ::Dynamic Max = this->healthBar->bounds->__Field(HX_("max",a4,0a,53,00),::hx::paccDynamic);
HXDLIN(1845)		Float lowerBound;
HXDLIN(1845)		bool lowerBound1;
HXDLIN(1845)		if (::hx::IsNotNull( Min )) {
HXLINE(1845)			lowerBound1 = ::hx::IsLess( Value,Min );
            		}
            		else {
HXLINE(1845)			lowerBound1 = false;
            		}
HXDLIN(1845)		if (lowerBound1) {
HXLINE(1845)			lowerBound = ( (Float)(Min) );
            		}
            		else {
HXLINE(1845)			lowerBound = Value;
            		}
HXDLIN(1845)		Float newPercent;
HXDLIN(1845)		bool newPercent1;
HXDLIN(1845)		if (::hx::IsNotNull( Max )) {
HXLINE(1845)			newPercent1 = ::hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE(1845)			newPercent1 = false;
            		}
HXDLIN(1845)		if (newPercent1) {
HXLINE(1845)			newPercent = ( (Float)(Max) );
            		}
            		else {
HXLINE(1845)			newPercent = lowerBound;
            		}
HXDLIN(1845)		 ::Dynamic newPercent2 = ::flixel::math::FlxMath_obj::remapToRange(newPercent,( (Float)(this->healthBar->bounds->__Field(HX_("min",92,11,53,00),::hx::paccDynamic)) ),( (Float)(this->healthBar->bounds->__Field(HX_("max",a4,0a,53,00),::hx::paccDynamic)) ),( (Float)(0) ),( (Float)(100) ));
HXLINE(1846)		Float _hx_tmp3;
HXDLIN(1846)		if (::hx::IsNotNull( newPercent2 )) {
HXLINE(1846)			_hx_tmp3 = ( (Float)(newPercent2) );
            		}
            		else {
HXLINE(1846)			_hx_tmp3 = ( (Float)(0) );
            		}
HXDLIN(1846)		this->healthBar->set_percent(_hx_tmp3);
HXLINE(1848)		int _hx_tmp4;
HXDLIN(1848)		if ((this->healthBar->percent < 20)) {
HXLINE(1848)			_hx_tmp4 = 1;
            		}
            		else {
HXLINE(1848)			_hx_tmp4 = 0;
            		}
HXDLIN(1848)		this->iconP1->animation->_curAnim->set_curFrame(_hx_tmp4);
HXLINE(1849)		int _hx_tmp5;
HXDLIN(1849)		if ((this->healthBar->percent > 80)) {
HXLINE(1849)			_hx_tmp5 = 1;
            		}
            		else {
HXLINE(1849)			_hx_tmp5 = 0;
            		}
HXDLIN(1849)		this->iconP2->animation->_curAnim->set_curFrame(_hx_tmp5);
HXLINE(1850)		return this->health;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,set_health,return )

void PlayState_obj::openPauseMenu(){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1854_openPauseMenu)
HXLINE(1855)		::flixel::FlxG_obj::camera->set_followLerp(( (Float)(0) ));
HXLINE(1856)		this->persistentUpdate = false;
HXLINE(1857)		this->persistentDraw = true;
HXLINE(1858)		this->paused = true;
HXLINE(1860)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1861)			::flixel::FlxG_obj::sound->music->pause();
HXLINE(1862)			this->vocals->pause();
HXLINE(1863)			this->opponentVocals->pause();
            		}
HXLINE(1865)		if (!(this->cpuControlled)) {
HXLINE(1867)			 ::Dynamic filter = null();
HXDLIN(1867)			 ::flixel::group::FlxTypedGroupIterator note =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->playerStrums->members,filter);
HXDLIN(1867)			while(note->hasNext()){
HXLINE(1867)				 ::objects::StrumNote note1 = note->next().StaticCast<  ::objects::StrumNote >();
HXLINE(1868)				bool _hx_tmp;
HXDLIN(1868)				if (::hx::IsNotNull( note1->animation->_curAnim )) {
HXLINE(1868)					_hx_tmp = (note1->animation->_curAnim->name != HX_("static",ae,dc,fb,05));
            				}
            				else {
HXLINE(1868)					_hx_tmp = false;
            				}
HXDLIN(1868)				if (_hx_tmp) {
HXLINE(1870)					note1->playAnim(HX_("static",ae,dc,fb,05),null());
HXLINE(1871)					note1->resetAnim = ( (Float)(0) );
            				}
            			}
            		}
HXLINE(1874)		this->openSubState( ::substates::PauseSubState_obj::__alloc( HX_CTX ));
HXLINE(1877)		if (this->autoUpdateRPC) {
HXLINE(1877)			::String _hx_tmp1 = this->detailsPausedText;
HXDLIN(1877)			::String _hx_tmp2 = ( (::String)((((::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) );
HXDLIN(1877)			::backend::DiscordClient_obj::changePresence(_hx_tmp1,_hx_tmp2,this->iconP2->getCharacter(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,openPauseMenu,(void))

void PlayState_obj::openChartEditor(){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1882_openChartEditor)
HXLINE(1883)		::flixel::FlxG_obj::camera->set_followLerp(( (Float)(0) ));
HXLINE(1884)		this->persistentUpdate = false;
HXLINE(1885)		this->paused = true;
HXLINE(1886)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1887)			 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1887)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(1888)		::states::PlayState_obj::chartingMode = true;
HXLINE(1891)		::backend::DiscordClient_obj::changePresence(HX_("Chart Editor",ef,b4,29,e9),null(),null(),true,null());
HXLINE(1892)		::backend::DiscordClient_obj::resetClientID();
HXLINE(1895)		::backend::MusicBeatState_obj::switchState( ::states::editors::ChartingState_obj::__alloc( HX_CTX ,null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,openChartEditor,(void))

void PlayState_obj::openCharacterEditor(){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1899_openCharacterEditor)
HXLINE(1900)		::flixel::FlxG_obj::camera->set_followLerp(( (Float)(0) ));
HXLINE(1901)		this->persistentUpdate = false;
HXLINE(1902)		this->paused = true;
HXLINE(1903)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1904)			 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1904)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(1905)		::backend::DiscordClient_obj::resetClientID();
HXLINE(1906)		::backend::MusicBeatState_obj::switchState( ::states::editors::CharacterEditorState_obj::__alloc( HX_CTX ,( (::String)(::states::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,openCharacterEditor,(void))

bool PlayState_obj::doDeathCheck( ::Dynamic __o_skipHealthCheck){
            		 ::Dynamic skipHealthCheck = __o_skipHealthCheck;
            		if (::hx::IsNull(__o_skipHealthCheck)) skipHealthCheck = false;
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1910_doDeathCheck)
HXLINE(1911)		bool _hx_tmp;
HXDLIN(1911)		bool _hx_tmp1;
HXDLIN(1911)		bool _hx_tmp2;
HXDLIN(1911)		bool _hx_tmp3;
HXDLIN(1911)		if (( (bool)(skipHealthCheck) )) {
HXLINE(1911)			_hx_tmp3 = this->instakillOnMiss;
            		}
            		else {
HXLINE(1911)			_hx_tmp3 = false;
            		}
HXDLIN(1911)		if (!(_hx_tmp3)) {
HXLINE(1911)			_hx_tmp2 = (this->health <= 0);
            		}
            		else {
HXLINE(1911)			_hx_tmp2 = true;
            		}
HXDLIN(1911)		if (_hx_tmp2) {
HXLINE(1911)			_hx_tmp1 = !(this->practiceMode);
            		}
            		else {
HXLINE(1911)			_hx_tmp1 = false;
            		}
HXDLIN(1911)		if (_hx_tmp1) {
HXLINE(1911)			_hx_tmp = !(this->isDead);
            		}
            		else {
HXLINE(1911)			_hx_tmp = false;
            		}
HXDLIN(1911)		if (_hx_tmp) {
HXLINE(1913)			 ::Dynamic ret = this->callOnScripts(HX_("onGameOver",a5,66,95,93),null(),true,null(),null());
HXLINE(1914)			if (::hx::IsNotEq( ret,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(1915)				::flixel::FlxG_obj::animationTimeScale = ( (Float)(1) );
HXLINE(1916)				this->boyfriend->stunned = true;
HXLINE(1917)				::states::PlayState_obj::deathCounter++;
HXLINE(1919)				this->paused = true;
HXLINE(1921)				{
HXLINE(1921)					 ::flixel::sound::FlxSound _this = this->vocals;
HXDLIN(1921)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(1922)				{
HXLINE(1922)					 ::flixel::sound::FlxSound _this1 = this->opponentVocals;
HXDLIN(1922)					_this1->cleanup(_this1->autoDestroy,true);
            				}
HXLINE(1923)				{
HXLINE(1923)					 ::flixel::sound::FlxSound _this2 = ::flixel::FlxG_obj::sound->music;
HXDLIN(1923)					_this2->cleanup(_this2->autoDestroy,true);
            				}
HXLINE(1925)				this->persistentUpdate = false;
HXLINE(1926)				this->persistentDraw = false;
HXLINE(1927)				::flixel::util::FlxArrayUtil_obj::clearArray(::flixel::util::FlxTimer_obj::globalManager->_timers,null());
HXLINE(1928)				::flixel::tweens::FlxTween_obj::globalManager->clear();
HXLINE(1930)				this->modchartTimers->clear();
HXLINE(1931)				this->modchartTweens->clear();
HXLINE(1934)				this->openSubState( ::substates::GameOverSubstate_obj::__alloc( HX_CTX ));
HXLINE(1940)				if (this->autoUpdateRPC) {
HXLINE(1940)					::String _hx_tmp4 = (HX_("Game Over - ",71,58,c7,c5) + this->detailsText);
HXDLIN(1940)					::String _hx_tmp5 = ( (::String)((((::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) );
HXDLIN(1940)					::backend::DiscordClient_obj::changePresence(_hx_tmp4,_hx_tmp5,this->iconP2->getCharacter(),null(),null());
            				}
HXLINE(1942)				this->isDead = true;
HXLINE(1943)				return true;
            			}
            		}
HXLINE(1946)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,doDeathCheck,return )

void PlayState_obj::checkEventNote(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1950_checkEventNote)
HXDLIN(1950)		while((this->eventNotes->length > 0)){
HXLINE(1951)			Float leStrumTime = ( (Float)(this->eventNotes->__get(0)->__Field(HX_("strumTime",f6,2d,21,f4),::hx::paccDynamic)) );
HXLINE(1952)			if ((::backend::Conductor_obj::songPosition < leStrumTime)) {
HXLINE(1953)				return;
            			}
HXLINE(1956)			::String value1 = HX_("",00,00,00,00);
HXLINE(1957)			if (::hx::IsNotNull( this->eventNotes->__get(0)->__Field(HX_("value1",a0,03,b7,4f),::hx::paccDynamic) )) {
HXLINE(1958)				value1 = ( (::String)(this->eventNotes->__get(0)->__Field(HX_("value1",a0,03,b7,4f),::hx::paccDynamic)) );
            			}
HXLINE(1960)			::String value2 = HX_("",00,00,00,00);
HXLINE(1961)			if (::hx::IsNotNull( this->eventNotes->__get(0)->__Field(HX_("value2",a1,03,b7,4f),::hx::paccDynamic) )) {
HXLINE(1962)				value2 = ( (::String)(this->eventNotes->__get(0)->__Field(HX_("value2",a1,03,b7,4f),::hx::paccDynamic)) );
            			}
HXLINE(1964)			this->triggerEvent(( (::String)(this->eventNotes->__get(0)->__Field(HX_("event",1a,c8,c4,75),::hx::paccDynamic)) ),value1,value2,leStrumTime);
HXLINE(1965)			this->eventNotes->shift();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,checkEventNote,(void))

void PlayState_obj::triggerEvent(::String eventName,::String value1,::String value2,Float strumTime){
            		HX_BEGIN_LOCAL_FUNC_S6(::hx::LocalFunc,_hx_Closure_1,Float,strumTime,::Array< ::Dynamic>,flValue1,::String,value2,::String,eventName,::String,value1,::Array< ::Dynamic>,flValue2) HXARGC(1)
            		void _hx_run( ::backend::BaseStage stage){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_2206_triggerEvent)
HXLINE(2206)			stage->eventCalled(eventName,value1,value2,flValue1->__get(0),flValue2->__get(0),strumTime);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1969_triggerEvent)
HXDLIN(1969)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1970)		::Array< ::Dynamic> flValue1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::Std_obj::parseFloat(value1));
HXLINE(1971)		::Array< ::Dynamic> flValue2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::Std_obj::parseFloat(value2));
HXLINE(1972)		if (::Math_obj::isNaN(( (Float)(flValue1->__get(0)) ))) {
HXLINE(1972)			flValue1[0] = null();
            		}
HXLINE(1973)		if (::Math_obj::isNaN(( (Float)(flValue2->__get(0)) ))) {
HXLINE(1973)			flValue2[0] = null();
            		}
HXLINE(1975)		::String _hx_switch_0 = eventName;
            		if (  (_hx_switch_0==HX_("Add Camera Zoom",cf,55,a6,44)) ){
HXLINE(2009)			bool _hx_tmp;
HXDLIN(2009)			if (::backend::ClientPrefs_obj::data->camZooms) {
HXLINE(2009)				_hx_tmp = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            			}
            			else {
HXLINE(2009)				_hx_tmp = false;
            			}
HXDLIN(2009)			if (_hx_tmp) {
HXLINE(2010)				if (::hx::IsNull( flValue1->__get(0) )) {
HXLINE(2010)					flValue1[0] = ((Float)0.015);
            				}
HXLINE(2011)				if (::hx::IsNull( flValue2->__get(0) )) {
HXLINE(2011)					flValue2[0] = ((Float)0.03);
            				}
HXLINE(2013)				 ::flixel::FlxCamera fh = ::flixel::FlxG_obj::camera;
HXDLIN(2013)				fh->set_zoom((fh->zoom + flValue1->__get(0)));
HXLINE(2014)				 ::flixel::FlxCamera fh1 = this->camHUD;
HXDLIN(2014)				fh1->set_zoom((fh1->zoom + flValue2->__get(0)));
            			}
HXLINE(2009)			goto _hx_goto_119;
            		}
            		if (  (_hx_switch_0==HX_("Alt Idle Animation",2f,00,fa,18)) ){
HXLINE(2054)			 ::objects::Character _hx_char = this->dad;
HXLINE(2055)			::String _hx_switch_1 = ::StringTools_obj::trim(value1.toLowerCase());
            			if (  (_hx_switch_1==HX_("bf",c4,55,00,00)) ||  (_hx_switch_1==HX_("boyfriend",6a,29,b8,e6)) ){
HXLINE(2059)				_hx_char = this->boyfriend;
HXDLIN(2059)				goto _hx_goto_120;
            			}
            			if (  (_hx_switch_1==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_1==HX_("girlfriend",ba,91,48,98)) ){
HXLINE(2057)				_hx_char = this->gf;
HXDLIN(2057)				goto _hx_goto_120;
            			}
            			/* default */{
HXLINE(2061)				int val = ( (int)(::Std_obj::parseInt(value1)) );
HXLINE(2062)				if (::Math_obj::isNaN(( (Float)(val) ))) {
HXLINE(2062)					val = 0;
            				}
HXLINE(2064)				switch((int)(val)){
            					case (int)1: {
HXLINE(2065)						_hx_char = this->boyfriend;
            					}
            					break;
            					case (int)2: {
HXLINE(2066)						_hx_char = this->gf;
            					}
            					break;
            				}
            			}
            			_hx_goto_120:;
HXLINE(2070)			if (::hx::IsNotNull( _hx_char )) {
HXLINE(2072)				_hx_char->idleSuffix = value2;
HXLINE(2073)				_hx_char->recalculateDanceIdle();
            			}
HXLINE(2053)			goto _hx_goto_119;
            		}
            		if (  (_hx_switch_0==HX_("Camera Follow Pos",e0,d4,b1,c4)) ){
HXLINE(2040)			if (::hx::IsNotNull( this->camFollow )) {
HXLINE(2042)				this->isCameraOnForcedPos = false;
HXLINE(2043)				bool _hx_tmp1;
HXDLIN(2043)				if (::hx::IsNull( flValue1->__get(0) )) {
HXLINE(2043)					_hx_tmp1 = ::hx::IsNotNull( flValue2->__get(0) );
            				}
            				else {
HXLINE(2043)					_hx_tmp1 = true;
            				}
HXDLIN(2043)				if (_hx_tmp1) {
HXLINE(2045)					this->isCameraOnForcedPos = true;
HXLINE(2046)					if (::hx::IsNull( flValue1->__get(0) )) {
HXLINE(2046)						flValue1[0] = 0;
            					}
HXLINE(2047)					if (::hx::IsNull( flValue2->__get(0) )) {
HXLINE(2047)						flValue2[0] = 0;
            					}
HXLINE(2048)					this->camFollow->set_x(( (Float)(flValue1->__get(0)) ));
HXLINE(2049)					this->camFollow->set_y(( (Float)(flValue2->__get(0)) ));
            				}
            			}
HXLINE(2040)			goto _hx_goto_119;
            		}
            		if (  (_hx_switch_0==HX_("Change Character",f9,50,ef,9c)) ){
HXLINE(2095)			int charType = 0;
HXLINE(2096)			::String _hx_switch_2 = ::StringTools_obj::trim(value1.toLowerCase());
            			if (  (_hx_switch_2==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_2==HX_("girlfriend",ba,91,48,98)) ){
HXLINE(2098)				charType = 2;
HXDLIN(2098)				goto _hx_goto_121;
            			}
            			if (  (_hx_switch_2==HX_("dad",47,36,4c,00)) ||  (_hx_switch_2==HX_("opponent",9d,b9,b8,f8)) ){
HXLINE(2100)				charType = 1;
HXDLIN(2100)				goto _hx_goto_121;
            			}
            			/* default */{
HXLINE(2102)				charType = ( (int)(::Std_obj::parseInt(value1)) );
HXLINE(2103)				if (::Math_obj::isNaN(( (Float)(charType) ))) {
HXLINE(2103)					charType = 0;
            				}
            			}
            			_hx_goto_121:;
HXLINE(2106)			switch((int)(charType)){
            				case (int)0: {
HXLINE(2108)					if ((this->boyfriend->curCharacter != value2)) {
HXLINE(2109)						if (!(this->boyfriendMap->exists(value2))) {
HXLINE(2110)							this->addCharacterToList(value2,charType);
            						}
HXLINE(2113)						Float lastAlpha = this->boyfriend->alpha;
HXLINE(2114)						this->boyfriend->set_alpha(((Float)0.00001));
HXLINE(2115)						this->boyfriend = ( ( ::objects::Character)(this->boyfriendMap->get(value2)) );
HXLINE(2116)						this->boyfriend->set_alpha(lastAlpha);
HXLINE(2117)						this->iconP1->changeIcon(this->boyfriend->healthIcon,null());
            					}
HXLINE(2119)					this->setOnScripts(HX_("boyfriendName",d5,c4,d2,4c),this->boyfriend->curCharacter,null());
            				}
            				break;
            				case (int)1: {
HXLINE(2122)					if ((this->dad->curCharacter != value2)) {
HXLINE(2123)						if (!(this->dadMap->exists(value2))) {
HXLINE(2124)							this->addCharacterToList(value2,charType);
            						}
HXLINE(2127)						bool wasGf;
HXDLIN(2127)						if (!(::StringTools_obj::startsWith(this->dad->curCharacter,HX_("gf-",2e,81,4e,00)))) {
HXLINE(2127)							wasGf = (this->dad->curCharacter == HX_("gf",1f,5a,00,00));
            						}
            						else {
HXLINE(2127)							wasGf = true;
            						}
HXLINE(2128)						Float lastAlpha1 = this->dad->alpha;
HXLINE(2129)						this->dad->set_alpha(((Float)0.00001));
HXLINE(2130)						this->dad = ( ( ::objects::Character)(this->dadMap->get(value2)) );
HXLINE(2131)						bool _hx_tmp2;
HXDLIN(2131)						if (!(::StringTools_obj::startsWith(this->dad->curCharacter,HX_("gf-",2e,81,4e,00)))) {
HXLINE(2131)							_hx_tmp2 = (this->dad->curCharacter != HX_("gf",1f,5a,00,00));
            						}
            						else {
HXLINE(2131)							_hx_tmp2 = false;
            						}
HXDLIN(2131)						if (_hx_tmp2) {
HXLINE(2132)							bool _hx_tmp3;
HXDLIN(2132)							if (wasGf) {
HXLINE(2132)								_hx_tmp3 = ::hx::IsNotNull( this->gf );
            							}
            							else {
HXLINE(2132)								_hx_tmp3 = false;
            							}
HXDLIN(2132)							if (_hx_tmp3) {
HXLINE(2133)								this->gf->set_visible(true);
            							}
            						}
            						else {
HXLINE(2135)							if (::hx::IsNotNull( this->gf )) {
HXLINE(2136)								this->gf->set_visible(false);
            							}
            						}
HXLINE(2138)						this->dad->set_alpha(lastAlpha1);
HXLINE(2139)						this->iconP2->changeIcon(this->dad->healthIcon,null());
            					}
HXLINE(2141)					this->setOnScripts(HX_("dadName",32,04,eb,ce),this->dad->curCharacter,null());
            				}
            				break;
            				case (int)2: {
HXLINE(2144)					if (::hx::IsNotNull( this->gf )) {
HXLINE(2146)						if ((this->gf->curCharacter != value2)) {
HXLINE(2148)							if (!(this->gfMap->exists(value2))) {
HXLINE(2149)								this->addCharacterToList(value2,charType);
            							}
HXLINE(2152)							Float lastAlpha2 = this->gf->alpha;
HXLINE(2153)							this->gf->set_alpha(((Float)0.00001));
HXLINE(2154)							this->gf = ( ( ::objects::Character)(this->gfMap->get(value2)) );
HXLINE(2155)							this->gf->set_alpha(lastAlpha2);
            						}
HXLINE(2157)						this->setOnScripts(HX_("gfName",0a,f4,79,1d),this->gf->curCharacter,null());
            					}
            				}
            				break;
            			}
HXLINE(2160)			this->reloadHealthBarColors();
HXLINE(2094)			goto _hx_goto_119;
            		}
            		if (  (_hx_switch_0==HX_("Change Scroll Speed",c4,2f,0b,43)) ){
HXLINE(2163)			if ((this->songSpeedType != HX_("constant",64,c1,9d,a5))) {
HXLINE(2165)				if (::hx::IsNull( flValue1->__get(0) )) {
HXLINE(2165)					flValue1[0] = 1;
            				}
HXLINE(2166)				if (::hx::IsNull( flValue2->__get(0) )) {
HXLINE(2166)					flValue2[0] = 0;
            				}
HXLINE(2168)				Float newValue = ( (Float)(::states::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
HXDLIN(2168)				 ::Dynamic defaultValue = null();
HXDLIN(2168)				defaultValue = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
HXDLIN(2168)				 ::Dynamic newValue1;
HXDLIN(2168)				if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("scrollspeed",5a,70,19,38))) {
HXLINE(2168)					newValue1 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
            				}
            				else {
HXLINE(2168)					newValue1 = defaultValue;
            				}
HXDLIN(2168)				Float newValue2 = ((newValue * ( (Float)(newValue1) )) * ( (Float)(flValue1->__get(0)) ));
HXLINE(2169)				if (::hx::IsLessEq( flValue2->__get(0),0 )) {
HXLINE(2170)					this->set_songSpeed(newValue2);
            				}
            				else {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_STACKFRAME(&_hx_pos_801e532e222627de_2175_triggerEvent)
HXLINE(2175)						_gthis->songSpeedTween = null();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(2172)					this->songSpeedTween = ::flixel::tweens::FlxTween_obj::tween(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("songSpeed",72,df,e3,b0),newValue2)),(( (Float)(flValue2->__get(0)) ) / this->playbackRate), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::linear_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            				}
            			}
HXLINE(2163)			goto _hx_goto_119;
            		}
            		if (  (_hx_switch_0==HX_("Hey!",e5,69,e4,2f)) ){
HXLINE(1977)			int value = 2;
HXLINE(1978)			::String _hx_switch_3 = ::StringTools_obj::trim(value1.toLowerCase());
            			if (  (_hx_switch_3==HX_("0",30,00,00,00)) ||  (_hx_switch_3==HX_("bf",c4,55,00,00)) ||  (_hx_switch_3==HX_("boyfriend",6a,29,b8,e6)) ){
HXLINE(1980)				value = 0;
HXDLIN(1980)				goto _hx_goto_122;
            			}
            			if (  (_hx_switch_3==HX_("1",31,00,00,00)) ||  (_hx_switch_3==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_3==HX_("girlfriend",ba,91,48,98)) ){
HXLINE(1982)				value = 1;
HXDLIN(1982)				goto _hx_goto_122;
            			}
            			_hx_goto_122:;
HXLINE(1985)			bool _hx_tmp4;
HXDLIN(1985)			if (::hx::IsNotNull( flValue2->__get(0) )) {
HXLINE(1985)				_hx_tmp4 = ::hx::IsLessEq( flValue2->__get(0),0 );
            			}
            			else {
HXLINE(1985)				_hx_tmp4 = true;
            			}
HXDLIN(1985)			if (_hx_tmp4) {
HXLINE(1985)				flValue2[0] = ((Float)0.6);
            			}
HXLINE(1987)			if ((value != 0)) {
HXLINE(1988)				if (::StringTools_obj::startsWith(this->dad->curCharacter,HX_("gf",1f,5a,00,00))) {
HXLINE(1989)					this->dad->playAnim(HX_("cheer",8d,9a,b6,45),true,null(),null());
HXLINE(1990)					this->dad->specialAnim = true;
HXLINE(1991)					this->dad->heyTimer = ( (Float)(flValue2->__get(0)) );
            				}
            				else {
HXLINE(1992)					if (::hx::IsNotNull( this->gf )) {
HXLINE(1993)						this->gf->playAnim(HX_("cheer",8d,9a,b6,45),true,null(),null());
HXLINE(1994)						this->gf->specialAnim = true;
HXLINE(1995)						this->gf->heyTimer = ( (Float)(flValue2->__get(0)) );
            					}
            				}
            			}
HXLINE(1998)			if ((value != 1)) {
HXLINE(1999)				this->boyfriend->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
HXLINE(2000)				this->boyfriend->specialAnim = true;
HXLINE(2001)				this->boyfriend->heyTimer = ( (Float)(flValue2->__get(0)) );
            			}
HXLINE(1976)			goto _hx_goto_119;
            		}
            		if (  (_hx_switch_0==HX_("Play Animation",d8,05,5f,0c)) ){
HXLINE(2019)			 ::objects::Character char1 = this->dad;
HXLINE(2020)			::String _hx_switch_4 = ::StringTools_obj::trim(value2.toLowerCase());
            			if (  (_hx_switch_4==HX_("bf",c4,55,00,00)) ||  (_hx_switch_4==HX_("boyfriend",6a,29,b8,e6)) ){
HXLINE(2022)				char1 = this->boyfriend;
HXDLIN(2022)				goto _hx_goto_123;
            			}
            			if (  (_hx_switch_4==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_4==HX_("girlfriend",ba,91,48,98)) ){
HXLINE(2024)				char1 = this->gf;
HXDLIN(2024)				goto _hx_goto_123;
            			}
            			/* default */{
HXLINE(2026)				if (::hx::IsNull( flValue2->__get(0) )) {
HXLINE(2026)					flValue2[0] = 0;
            				}
HXLINE(2027)				switch((int)(::Math_obj::round(( (Float)(flValue2->__get(0)) )))){
            					case (int)1: {
HXLINE(2028)						char1 = this->boyfriend;
            					}
            					break;
            					case (int)2: {
HXLINE(2029)						char1 = this->gf;
            					}
            					break;
            				}
            			}
            			_hx_goto_123:;
HXLINE(2033)			if (::hx::IsNotNull( char1 )) {
HXLINE(2035)				char1->playAnim(value1,true,null(),null());
HXLINE(2036)				char1->specialAnim = true;
            			}
HXLINE(2017)			goto _hx_goto_119;
            		}
            		if (  (_hx_switch_0==HX_("Play Sound",a3,a9,45,48)) ){
HXLINE(2202)			if (::hx::IsNull( flValue2->__get(0) )) {
HXLINE(2202)				flValue2[0] = 1;
            			}
HXLINE(2203)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp5 = ::flixel::FlxG_obj::sound;
HXDLIN(2203)			 ::openfl::media::Sound _hx_tmp6 = ::backend::Paths_obj::sound(value1,null());
HXDLIN(2203)			_hx_tmp5->play(_hx_tmp6,flValue2->__get(0),null(),null(),null(),null());
HXLINE(2201)			goto _hx_goto_119;
            		}
            		if (  (_hx_switch_0==HX_("Screen Shake",12,bb,51,4b)) ){
HXLINE(2077)			::Array< ::String > valuesArray = ::Array_obj< ::String >::__new(2)->init(0,value1)->init(1,value2);
HXLINE(2078)			::Array< ::Dynamic> targetsArray = ::Array_obj< ::Dynamic>::__new(2)->init(0,this->camGame)->init(1,this->camHUD);
HXLINE(2079)			{
HXLINE(2079)				int _g = 0;
HXDLIN(2079)				int _g1 = targetsArray->length;
HXDLIN(2079)				while((_g < _g1)){
HXLINE(2079)					_g = (_g + 1);
HXDLIN(2079)					int i = (_g - 1);
HXLINE(2080)					::Array< ::String > split = valuesArray->__get(i).split(HX_(",",2c,00,00,00));
HXLINE(2081)					Float duration = ( (Float)(0) );
HXLINE(2082)					Float intensity = ( (Float)(0) );
HXLINE(2083)					if (::hx::IsNotNull( split->__get(0) )) {
HXLINE(2083)						duration = ::Std_obj::parseFloat(::StringTools_obj::trim(split->__get(0)));
            					}
HXLINE(2084)					if (::hx::IsNotNull( split->__get(1) )) {
HXLINE(2084)						intensity = ::Std_obj::parseFloat(::StringTools_obj::trim(split->__get(1)));
            					}
HXLINE(2085)					if (::Math_obj::isNaN(duration)) {
HXLINE(2085)						duration = ( (Float)(0) );
            					}
HXLINE(2086)					if (::Math_obj::isNaN(intensity)) {
HXLINE(2086)						intensity = ( (Float)(0) );
            					}
HXLINE(2088)					bool _hx_tmp7;
HXDLIN(2088)					if ((duration > 0)) {
HXLINE(2088)						_hx_tmp7 = (intensity != 0);
            					}
            					else {
HXLINE(2088)						_hx_tmp7 = false;
            					}
HXDLIN(2088)					if (_hx_tmp7) {
HXLINE(2089)						targetsArray->__get(i).StaticCast<  ::flixel::FlxCamera >()->shake(intensity,duration,null(),null(),null());
            					}
            				}
            			}
HXLINE(2076)			goto _hx_goto_119;
            		}
            		if (  (_hx_switch_0==HX_("Set GF Speed",04,ff,9a,c4)) ){
HXLINE(2005)			bool _hx_tmp8;
HXDLIN(2005)			if (::hx::IsNotNull( flValue1->__get(0) )) {
HXLINE(2005)				_hx_tmp8 = ::hx::IsLess( flValue1->__get(0),1 );
            			}
            			else {
HXLINE(2005)				_hx_tmp8 = true;
            			}
HXDLIN(2005)			if (_hx_tmp8) {
HXLINE(2005)				flValue1[0] = 1;
            			}
HXLINE(2006)			this->gfSpeed = ::Math_obj::round(( (Float)(flValue1->__get(0)) ));
HXLINE(2004)			goto _hx_goto_119;
            		}
            		if (  (_hx_switch_0==HX_("Set Property",d3,50,a6,2e)) ){
HXLINE(2181)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(2183)				::Array< ::String > split1 = value1.split(HX_(".",2e,00,00,00));
HXLINE(2184)				if ((split1->length > 1)) {
HXLINE(2185)					 ::Dynamic _hx_tmp9 = ::psychlua::LuaUtils_obj::getPropertyLoop(split1,null(),null(),null());
HXDLIN(2185)					::psychlua::LuaUtils_obj::setVarInArray(_hx_tmp9,split1->__get((split1->length - 1)),value2,null());
            				}
            				else {
HXLINE(2187)					::psychlua::LuaUtils_obj::setVarInArray(::hx::ObjectPtr<OBJ_>(this),value1,value2,null());
            				}
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g2 = _hx_e;
HXLINE(2190)					{
HXLINE(2190)						null();
            					}
HXDLIN(2190)					 ::Dynamic e = _g2;
HXLINE(2191)					{
HXLINE(2192)						int len = ( (int)(( ::Dynamic(e->__Field(HX_("message",c7,35,11,9a),::hx::paccDynamic))->__Field(HX_("indexOf",c9,48,bf,e0),::hx::paccDynamic)(HX_("\n",0a,00,00,00)) + 1)) );
HXLINE(2193)						if ((len <= 0)) {
HXLINE(2193)							len = ( (int)( ::Dynamic(e->__Field(HX_("message",c7,35,11,9a),::hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
            						}
HXLINE(2195)						this->addTextToDebug((HX_("ERROR (\"Set Property\" Event) - ",41,de,a4,7e) + ::Std_obj::string( ::Dynamic(e->__Field(HX_("message",c7,35,11,9a),::hx::paccDynamic))->__Field(HX_("substr",31,ef,0a,9a),::hx::paccDynamic)(0,len))),-65536);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(2181)			goto _hx_goto_119;
            		}
            		_hx_goto_119:;
HXLINE(2206)		this->stagesFunc( ::Dynamic(new _hx_Closure_1(strumTime,flValue1,value2,eventName,value1,flValue2)));
HXLINE(2207)		this->callOnScripts(HX_("onEvent",7b,66,02,0c),::cpp::VirtualArray_obj::__new(4)->init(0,eventName)->init(1,value1)->init(2,value2)->init(3,strumTime),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC4(PlayState_obj,triggerEvent,(void))

void PlayState_obj::moveCameraSection( ::Dynamic sec){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2210_moveCameraSection)
HXLINE(2211)		if (::hx::IsNull( sec )) {
HXLINE(2211)			sec = this->curSection;
            		}
HXLINE(2212)		if (::hx::IsLess( sec,0 )) {
HXLINE(2212)			sec = 0;
            		}
HXLINE(2214)		if (::hx::IsNull(  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(( (int)(sec) )) )) {
HXLINE(2214)			return;
            		}
HXLINE(2216)		bool _hx_tmp;
HXDLIN(2216)		if (::hx::IsNotNull( this->gf )) {
HXLINE(2216)			_hx_tmp = ( (bool)( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(( (int)(sec) ))->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(2216)			_hx_tmp = false;
            		}
HXDLIN(2216)		if (_hx_tmp) {
HXLINE(2218)			 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(2218)			Float _hx_tmp2 = this->gf->getMidpoint(null())->x;
HXDLIN(2218)			_hx_tmp1->setPosition(_hx_tmp2,this->gf->getMidpoint(null())->y);
HXLINE(2219)			 ::flixel::FlxObject fh = this->camFollow;
HXDLIN(2219)			fh->set_x((fh->x + (this->gf->cameraPosition->__get(0) + this->girlfriendCameraOffset->__get(0))));
HXLINE(2220)			 ::flixel::FlxObject fh1 = this->camFollow;
HXDLIN(2220)			fh1->set_y((fh1->y + (this->gf->cameraPosition->__get(1) + this->girlfriendCameraOffset->__get(1))));
HXLINE(2221)			this->tweenCamIn();
HXLINE(2222)			this->callOnScripts(HX_("onMoveCamera",95,62,fe,df),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("gf",1f,5a,00,00)),null(),null(),null());
HXLINE(2223)			return;
            		}
HXLINE(2226)		bool isDad = ::hx::IsNotEq(  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(( (int)(sec) ))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic),true );
HXLINE(2227)		this->moveCamera(isDad);
HXLINE(2228)		 ::Dynamic _hx_tmp3;
HXDLIN(2228)		if (isDad) {
HXLINE(2228)			_hx_tmp3 = HX_("dad",47,36,4c,00);
            		}
            		else {
HXLINE(2228)			_hx_tmp3 = HX_("boyfriend",6a,29,b8,e6);
            		}
HXDLIN(2228)		this->callOnScripts(HX_("onMoveCamera",95,62,fe,df),::cpp::VirtualArray_obj::__new(1)->init(0,_hx_tmp3),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,moveCameraSection,(void))

void PlayState_obj::moveCamera(bool isDad){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2233_moveCamera)
HXDLIN(2233)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2234)		if (isDad) {
HXLINE(2236)			 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2236)			Float _hx_tmp1 = (this->dad->getMidpoint(null())->x + 150);
HXDLIN(2236)			_hx_tmp->setPosition(_hx_tmp1,(this->dad->getMidpoint(null())->y - ( (Float)(100) )));
HXLINE(2237)			 ::flixel::FlxObject fh = this->camFollow;
HXDLIN(2237)			fh->set_x((fh->x + (this->dad->cameraPosition->__get(0) + this->opponentCameraOffset->__get(0))));
HXLINE(2238)			 ::flixel::FlxObject fh1 = this->camFollow;
HXDLIN(2238)			fh1->set_y((fh1->y + (this->dad->cameraPosition->__get(1) + this->opponentCameraOffset->__get(1))));
HXLINE(2239)			this->tweenCamIn();
            		}
            		else {
HXLINE(2243)			 ::flixel::FlxObject _hx_tmp2 = this->camFollow;
HXDLIN(2243)			Float _hx_tmp3 = (this->boyfriend->getMidpoint(null())->x - ( (Float)(100) ));
HXDLIN(2243)			_hx_tmp2->setPosition(_hx_tmp3,(this->boyfriend->getMidpoint(null())->y - ( (Float)(100) )));
HXLINE(2244)			 ::flixel::FlxObject fh2 = this->camFollow;
HXDLIN(2244)			fh2->set_x((fh2->x - (this->boyfriend->cameraPosition->__get(0) - this->boyfriendCameraOffset->__get(0))));
HXLINE(2245)			 ::flixel::FlxObject fh3 = this->camFollow;
HXDLIN(2245)			fh3->set_y((fh3->y + (this->boyfriend->cameraPosition->__get(1) + this->boyfriendCameraOffset->__get(1))));
HXLINE(2247)			bool _hx_tmp4;
HXDLIN(2247)			bool _hx_tmp5;
HXDLIN(2247)			if ((this->songName == HX_("tutorial",9e,8f,b5,82))) {
HXLINE(2247)				_hx_tmp5 = ::hx::IsNull( this->cameraTwn );
            			}
            			else {
HXLINE(2247)				_hx_tmp5 = false;
            			}
HXDLIN(2247)			if (_hx_tmp5) {
HXLINE(2247)				_hx_tmp4 = (::flixel::FlxG_obj::camera->zoom != 1);
            			}
            			else {
HXLINE(2247)				_hx_tmp4 = false;
            			}
HXDLIN(2247)			if (_hx_tmp4) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween twn){
            					HX_STACKFRAME(&_hx_pos_801e532e222627de_2252_moveCamera)
HXLINE(2252)					_gthis->cameraTwn = null();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(2249)				this->cameraTwn = ::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("zoom",13,a3,f8,50),1)),((::backend::Conductor_obj::stepCrochet * ( (Float)(4) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::elasticInOut_dyn())
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,moveCamera,(void))

void PlayState_obj::tweenCamIn(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2259_tweenCamIn)
HXDLIN(2259)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2260)		bool _hx_tmp;
HXDLIN(2260)		bool _hx_tmp1;
HXDLIN(2260)		if ((this->songName == HX_("tutorial",9e,8f,b5,82))) {
HXLINE(2260)			_hx_tmp1 = ::hx::IsNull( this->cameraTwn );
            		}
            		else {
HXLINE(2260)			_hx_tmp1 = false;
            		}
HXDLIN(2260)		if (_hx_tmp1) {
HXLINE(2260)			_hx_tmp = (::flixel::FlxG_obj::camera->zoom != ((Float)1.3));
            		}
            		else {
HXLINE(2260)			_hx_tmp = false;
            		}
HXDLIN(2260)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween twn){
            				HX_STACKFRAME(&_hx_pos_801e532e222627de_2263_tweenCamIn)
HXLINE(2263)				_gthis->cameraTwn = null();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2261)			this->cameraTwn = ::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("zoom",13,a3,f8,50),((Float)1.3))),((::backend::Conductor_obj::stepCrochet * ( (Float)(4) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::elasticInOut_dyn())
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,tweenCamIn,(void))

void PlayState_obj::finishSong( ::Dynamic __o_ignoreNoteOffset){
            		 ::Dynamic ignoreNoteOffset = __o_ignoreNoteOffset;
            		if (::hx::IsNull(__o_ignoreNoteOffset)) ignoreNoteOffset = false;
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_2270_finishSong)
HXDLIN(2270)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2271)		this->updateTime = false;
HXLINE(2272)		::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE(2274)		this->vocals->set_volume(( (Float)(0) ));
HXLINE(2275)		this->vocals->pause();
HXLINE(2276)		this->opponentVocals->set_volume(( (Float)(0) ));
HXLINE(2277)		this->opponentVocals->pause();
HXLINE(2279)		bool _hx_tmp;
HXDLIN(2279)		if ((::backend::ClientPrefs_obj::data->noteOffset > 0)) {
HXLINE(2279)			_hx_tmp = ( (bool)(ignoreNoteOffset) );
            		}
            		else {
HXLINE(2279)			_hx_tmp = true;
            		}
HXDLIN(2279)		if (_hx_tmp) {
HXLINE(2280)			this->endCallback();
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_2283_finishSong)
HXLINE(2283)				_gthis->endCallback();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2282)			 ::flixel::util::FlxTimer _hx_tmp1 =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN(2282)			this->finishTimer = _hx_tmp1->start((( (Float)(::backend::ClientPrefs_obj::data->noteOffset) ) / ( (Float)(1000) )), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,finishSong,(void))

bool PlayState_obj::endSong(){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_2291_endSong)
HXDLIN(2291)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2293)		if (!(this->startingSong)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::objects::Note daNote){
            				HX_STACKFRAME(&_hx_pos_801e532e222627de_2295_endSong)
HXLINE(2295)				if ((daNote->strumTime < (_gthis->songLength - ::backend::Conductor_obj::safeZoneOffset))) {
HXLINE(2296)					_gthis->set_health((_gthis->health - (((Float)0.05) * _gthis->healthLoss)));
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2294)			this->notes->forEach( ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE(2299)			{
HXLINE(2299)				int _g = 0;
HXDLIN(2299)				::Array< ::Dynamic> _g1 = this->unspawnNotes;
HXDLIN(2299)				while((_g < _g1->length)){
HXLINE(2299)					 ::objects::Note daNote = _g1->__get(_g).StaticCast<  ::objects::Note >();
HXDLIN(2299)					_g = (_g + 1);
HXLINE(2300)					if ((daNote->strumTime < (this->songLength - ::backend::Conductor_obj::safeZoneOffset))) {
HXLINE(2301)						this->set_health((this->health - (((Float)0.05) * this->healthLoss)));
            					}
            				}
            			}
HXLINE(2305)			if (this->doDeathCheck(null())) {
HXLINE(2306)				return false;
            			}
            		}
HXLINE(2310)		this->timeBar->set_visible(false);
HXLINE(2311)		this->timeTxt->set_visible(false);
HXLINE(2312)		this->canPause = false;
HXLINE(2313)		this->endingSong = true;
HXLINE(2314)		this->camZooming = false;
HXLINE(2315)		this->inCutscene = false;
HXLINE(2316)		this->updateTime = false;
HXLINE(2318)		::states::PlayState_obj::deathCounter = 0;
HXLINE(2319)		::states::PlayState_obj::seenCutscene = false;
HXLINE(2326)		 ::Dynamic ret = this->callOnScripts(HX_("onEndSong",f1,95,27,06),null(),true,null(),null());
HXLINE(2327)		bool _hx_tmp;
HXDLIN(2327)		if (::hx::IsNotEq( ret,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(2327)			_hx_tmp = !(this->transitioning);
            		}
            		else {
HXLINE(2327)			_hx_tmp = false;
            		}
HXDLIN(2327)		if (_hx_tmp) {
HXLINE(2330)			Float percent = this->ratingPercent;
HXLINE(2331)			if (::Math_obj::isNaN(percent)) {
HXLINE(2331)				percent = ( (Float)(0) );
            			}
HXLINE(2332)			::backend::Highscore_obj::saveScore(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),this->songScore,::states::PlayState_obj::storyDifficulty,percent);
HXLINE(2334)			this->set_playbackRate(( (Float)(1) ));
HXLINE(2336)			if (::states::PlayState_obj::chartingMode) {
HXLINE(2338)				this->openChartEditor();
HXLINE(2339)				return false;
            			}
HXLINE(2342)			if (::states::PlayState_obj::isStoryMode) {
HXLINE(2344)				 ::Dynamic _hx_tmp1 = ::hx::ClassOf< ::states::PlayState >();
HXDLIN(2344)				::states::PlayState_obj::campaignScore = (::states::PlayState_obj::campaignScore + this->songScore);
HXLINE(2345)				 ::Dynamic _hx_tmp2 = ::hx::ClassOf< ::states::PlayState >();
HXDLIN(2345)				::states::PlayState_obj::campaignMisses = (::states::PlayState_obj::campaignMisses + this->songMisses);
HXLINE(2347)				::states::PlayState_obj::storyPlaylist->remove(::states::PlayState_obj::storyPlaylist->__get(0));
HXLINE(2349)				if ((::states::PlayState_obj::storyPlaylist->length <= 0)) {
HXLINE(2351)					::backend::Mods_obj::loadTopMod();
HXLINE(2352)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp3 = ::flixel::FlxG_obj::sound;
HXDLIN(2352)					::String library = null();
HXDLIN(2352)					 ::openfl::media::Sound file = ::backend::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),HX_("freakyMenu",15,c9,93,86),library);
HXDLIN(2352)					_hx_tmp3->playMusic(file,null(),null(),null());
HXLINE(2353)					::backend::DiscordClient_obj::resetClientID();
HXLINE(2355)					::backend::MusicBeatState_obj::switchState( ::states::StoryMenuState_obj::__alloc( HX_CTX ,null(),null()));
HXLINE(2358)					bool _hx_tmp4;
HXDLIN(2358)					 ::Dynamic defaultValue = null();
HXDLIN(2358)					defaultValue = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("practice",bb,00,e7,a0));
HXDLIN(2358)					 ::Dynamic _hx_tmp5;
HXDLIN(2358)					if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("practice",bb,00,e7,a0))) {
HXLINE(2358)						_hx_tmp5 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("practice",bb,00,e7,a0));
            					}
            					else {
HXLINE(2358)						_hx_tmp5 = defaultValue;
            					}
HXDLIN(2358)					if (!(( (bool)(_hx_tmp5) ))) {
HXLINE(2358)						 ::Dynamic defaultValue1 = null();
HXDLIN(2358)						defaultValue1 = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("botplay",7b,fb,a9,61));
HXDLIN(2358)						 ::Dynamic _hx_tmp6;
HXDLIN(2358)						if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("botplay",7b,fb,a9,61))) {
HXLINE(2358)							_hx_tmp6 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("botplay",7b,fb,a9,61));
            						}
            						else {
HXLINE(2358)							_hx_tmp6 = defaultValue1;
            						}
HXDLIN(2358)						_hx_tmp4 = !(( (bool)(_hx_tmp6) ));
            					}
            					else {
HXLINE(2358)						_hx_tmp4 = false;
            					}
HXDLIN(2358)					if (_hx_tmp4) {
HXLINE(2359)						::states::StoryMenuState_obj::weekCompleted->set(::backend::WeekData_obj::weeksList->__get(::states::PlayState_obj::storyWeek),true);
HXLINE(2360)						::String _hx_tmp7 = ::backend::WeekData_obj::getWeekFileName();
HXDLIN(2360)						::backend::Highscore_obj::saveWeekScore(_hx_tmp7,::states::PlayState_obj::campaignScore,::states::PlayState_obj::storyDifficulty);
HXLINE(2362)						::flixel::FlxG_obj::save->data->__SetField(HX_("weekCompleted",f7,82,ec,84),::states::StoryMenuState_obj::weekCompleted,::hx::paccDynamic);
HXLINE(2363)						::flixel::FlxG_obj::save->flush(null());
            					}
HXLINE(2365)					::states::PlayState_obj::changedDifficulty = false;
            				}
            				else {
HXLINE(2369)					 ::Dynamic num = null();
HXDLIN(2369)					if (::hx::IsNull( num )) {
HXLINE(2369)						num = ::states::PlayState_obj::storyDifficulty;
            					}
HXDLIN(2369)					::String fileSuffix = ::backend::Difficulty_obj::list->__get(( (int)(num) ));
HXDLIN(2369)					if ((fileSuffix != ::backend::Difficulty_obj::defaultDifficulty)) {
HXLINE(2369)						fileSuffix = (HX_("-",2d,00,00,00) + fileSuffix);
            					}
            					else {
HXLINE(2369)						fileSuffix = HX_("",00,00,00,00);
            					}
HXDLIN(2369)					 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2369)					 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2369)					::String path = invalidChars->split(::StringTools_obj::replace(fileSuffix,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2369)					::String difficulty = hideChars->split(path)->join(HX_("",00,00,00,00)).toLowerCase();
HXLINE(2371)					::haxe::Log_obj::trace(HX_("LOADING NEXT SONG",5e,07,d0,ca),::hx::SourceInfo(HX_("source/states/PlayState.hx",3a,21,29,28),2371,HX_("states.PlayState",31,cd,20,04),HX_("endSong",50,dd,7c,2e)));
HXLINE(2372)					 ::Dynamic _hx_tmp8 = ::haxe::Log_obj::trace;
HXDLIN(2372)					::String path1 = ::states::PlayState_obj::storyPlaylist->__get(0);
HXDLIN(2372)					 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2372)					 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2372)					::String path2 = invalidChars1->split(::StringTools_obj::replace(path1,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2372)					::String _hx_tmp9 = (hideChars1->split(path2)->join(HX_("",00,00,00,00)).toLowerCase() + difficulty);
HXDLIN(2372)					_hx_tmp8(_hx_tmp9,::hx::SourceInfo(HX_("source/states/PlayState.hx",3a,21,29,28),2372,HX_("states.PlayState",31,cd,20,04),HX_("endSong",50,dd,7c,2e)));
HXLINE(2374)					::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE(2375)					::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
HXLINE(2376)					::states::PlayState_obj::prevCamFollow = this->camFollow;
HXLINE(2378)					::states::PlayState_obj::SONG = ::backend::Song_obj::loadFromJson((::states::PlayState_obj::storyPlaylist->__get(0) + difficulty),::states::PlayState_obj::storyPlaylist->__get(0));
HXLINE(2379)					{
HXLINE(2379)						 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(2379)						_this->cleanup(_this->autoDestroy,true);
            					}
HXLINE(2381)					::backend::MusicBeatState_obj::switchState(::states::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::states::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false));
            				}
            			}
            			else {
HXLINE(2386)				::haxe::Log_obj::trace(HX_("WENT BACK TO FREEPLAY??",58,1b,be,6a),::hx::SourceInfo(HX_("source/states/PlayState.hx",3a,21,29,28),2386,HX_("states.PlayState",31,cd,20,04),HX_("endSong",50,dd,7c,2e)));
HXLINE(2387)				::backend::Mods_obj::loadTopMod();
HXLINE(2388)				::backend::DiscordClient_obj::resetClientID();
HXLINE(2390)				::backend::MusicBeatState_obj::switchState( ::states::FreeplayState_obj::__alloc( HX_CTX ,null(),null()));
HXLINE(2391)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp10 = ::flixel::FlxG_obj::sound;
HXDLIN(2391)				::String library1 = null();
HXDLIN(2391)				 ::openfl::media::Sound file1 = ::backend::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),HX_("freakyMenu",15,c9,93,86),library1);
HXDLIN(2391)				_hx_tmp10->playMusic(file1,null(),null(),null());
HXLINE(2392)				::states::PlayState_obj::changedDifficulty = false;
            			}
HXLINE(2394)			this->transitioning = true;
            		}
HXLINE(2396)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,endSong,return )

void PlayState_obj::KillNotes(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2399_KillNotes)
HXLINE(2400)		while((this->notes->length > 0)){
HXLINE(2401)			 ::objects::Note daNote = Dynamic( this->notes->members->__get(0)).StaticCast<  ::objects::Note >();
HXLINE(2402)			daNote->set_active(false);
HXLINE(2403)			daNote->set_visible(false);
HXLINE(2404)			this->invalidateNote(daNote);
            		}
HXLINE(2406)		this->unspawnNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2407)		this->eventNotes = ::Array_obj< ::Dynamic>::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,KillNotes,(void))

void PlayState_obj::cachePopUpScore(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2425_cachePopUpScore)
HXLINE(2426)		::String uiPrefix = HX_("",00,00,00,00);
HXLINE(2427)		::String uiSuffix = HX_("",00,00,00,00);
HXLINE(2428)		if ((::states::PlayState_obj::stageUI != HX_("normal",27,72,69,30))) {
HXLINE(2430)			uiPrefix = ((HX_("",00,00,00,00) + ::states::PlayState_obj::stageUI) + HX_("UI/",5b,bf,40,00));
HXLINE(2431)			if (::states::PlayState_obj::get_isPixelStage()) {
HXLINE(2431)				uiSuffix = HX_("-pixel",39,03,b3,c0);
            			}
            		}
HXLINE(2434)		{
HXLINE(2434)			int _g = 0;
HXDLIN(2434)			::Array< ::Dynamic> _g1 = this->ratingsData;
HXDLIN(2434)			while((_g < _g1->length)){
HXLINE(2434)				 ::backend::Rating rating = _g1->__get(_g).StaticCast<  ::backend::Rating >();
HXDLIN(2434)				_g = (_g + 1);
HXLINE(2435)				::backend::Paths_obj::image(((uiPrefix + rating->image) + uiSuffix),null(),null());
            			}
            		}
HXLINE(2436)		{
HXLINE(2436)			int _g2 = 0;
HXDLIN(2436)			while((_g2 < 10)){
HXLINE(2436)				_g2 = (_g2 + 1);
HXDLIN(2436)				int i = (_g2 - 1);
HXLINE(2437)				::backend::Paths_obj::image((((uiPrefix + HX_("num",46,de,53,00)) + i) + uiSuffix),null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,cachePopUpScore,(void))

void PlayState_obj::popUpScore( ::objects::Note note){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,comboSpr1, ::flixel::FlxSprite,rating) HXARGC(1)
            		void _hx_run( ::flixel::tweens::FlxTween tween){
            			HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_2581_popUpScore)
HXLINE(2582)			comboSpr1->destroy();
HXLINE(2583)			rating->destroy();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_2441_popUpScore)
HXLINE(2442)		Float noteDiff = ::Math_obj::abs(((note->strumTime - ::backend::Conductor_obj::songPosition) + ::backend::ClientPrefs_obj::data->ratingOffset));
HXLINE(2443)		this->vocals->set_volume(( (Float)(1) ));
HXLINE(2445)		bool _hx_tmp;
HXDLIN(2445)		if (!(::backend::ClientPrefs_obj::data->comboStacking)) {
HXLINE(2445)			_hx_tmp = (this->comboGroup->group->members->get_length() > 0);
            		}
            		else {
HXLINE(2445)			_hx_tmp = false;
            		}
HXDLIN(2445)		if (_hx_tmp) {
HXLINE(2446)			 ::Dynamic filter = null();
HXDLIN(2446)			 ::flixel::group::FlxTypedGroupIterator spr =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->comboGroup->group->members,filter);
HXDLIN(2446)			while(spr->hasNext()){
HXLINE(2446)				 ::flixel::FlxSprite spr1 = spr->next().StaticCast<  ::flixel::FlxSprite >();
HXLINE(2447)				spr1->destroy();
HXLINE(2448)				this->comboGroup->remove(spr1,null()).StaticCast<  ::flixel::FlxSprite >();
            			}
            		}
HXLINE(2452)		Float placement = (( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.35));
HXLINE(2453)		 ::flixel::FlxSprite rating =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(2454)		int score = 350;
HXLINE(2457)		 ::backend::Rating daRating = ::backend::Conductor_obj::judgeNote(this->ratingsData,(noteDiff / this->playbackRate));
HXLINE(2459)		 ::states::PlayState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2459)		_hx_tmp1->totalNotesHit = (_hx_tmp1->totalNotesHit + daRating->ratingMod);
HXLINE(2460)		note->ratingMod = daRating->ratingMod;
HXLINE(2461)		if (!(note->ratingDisabled)) {
HXLINE(2461)			daRating->hits++;
            		}
HXLINE(2462)		note->rating = daRating->name;
HXLINE(2463)		score = daRating->score;
HXLINE(2465)		bool _hx_tmp2;
HXDLIN(2465)		if (daRating->noteSplash) {
HXLINE(2465)			_hx_tmp2 = !(( (bool)(note->noteSplashData->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE(2465)			_hx_tmp2 = false;
            		}
HXDLIN(2465)		if (_hx_tmp2) {
HXLINE(2466)			this->spawnNoteSplashOnNote(note);
            		}
HXLINE(2468)		bool _hx_tmp3;
HXDLIN(2468)		if (!(this->practiceMode)) {
HXLINE(2468)			_hx_tmp3 = !(this->cpuControlled);
            		}
            		else {
HXLINE(2468)			_hx_tmp3 = false;
            		}
HXDLIN(2468)		if (_hx_tmp3) {
HXLINE(2469)			 ::states::PlayState _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2469)			_hx_tmp4->songScore = (_hx_tmp4->songScore + score);
HXLINE(2470)			if (!(note->ratingDisabled)) {
HXLINE(2472)				this->songHits++;
HXLINE(2473)				this->totalPlayed++;
HXLINE(2474)				this->RecalculateRating(false);
            			}
            		}
HXLINE(2478)		::String uiPrefix = HX_("",00,00,00,00);
HXLINE(2479)		::String uiSuffix = HX_("",00,00,00,00);
HXLINE(2480)		bool antialias = ::backend::ClientPrefs_obj::data->antialiasing;
HXLINE(2482)		if ((::states::PlayState_obj::stageUI != HX_("normal",27,72,69,30))) {
HXLINE(2484)			uiPrefix = ((HX_("",00,00,00,00) + ::states::PlayState_obj::stageUI) + HX_("UI/",5b,bf,40,00));
HXLINE(2485)			if (::states::PlayState_obj::get_isPixelStage()) {
HXLINE(2485)				uiSuffix = HX_("-pixel",39,03,b3,c0);
            			}
HXLINE(2486)			antialias = !(::states::PlayState_obj::get_isPixelStage());
            		}
HXLINE(2489)		 ::flixel::FlxSprite rating1 = rating;
HXDLIN(2489)		rating1->loadGraphic(::backend::Paths_obj::image(((uiPrefix + daRating->image) + uiSuffix),null(),null()),null(),null(),null(),null(),null());
HXLINE(2490)		{
HXLINE(2490)			int axes = 17;
HXDLIN(2490)			bool _hx_tmp5;
HXDLIN(2490)			if ((axes != 1)) {
HXLINE(2490)				_hx_tmp5 = (axes == 17);
            			}
            			else {
HXLINE(2490)				_hx_tmp5 = true;
            			}
HXDLIN(2490)			if (_hx_tmp5) {
HXLINE(2490)				 ::flixel::FlxSprite rating2 = rating;
HXDLIN(2490)				int _hx_tmp6 = ::flixel::FlxG_obj::width;
HXDLIN(2490)				rating2->set_x(((( (Float)(_hx_tmp6) ) - rating->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(2490)			bool _hx_tmp7;
HXDLIN(2490)			if ((axes != 16)) {
HXLINE(2490)				_hx_tmp7 = (axes == 17);
            			}
            			else {
HXLINE(2490)				_hx_tmp7 = true;
            			}
HXDLIN(2490)			if (_hx_tmp7) {
HXLINE(2490)				 ::flixel::FlxSprite rating3 = rating;
HXDLIN(2490)				int _hx_tmp8 = ::flixel::FlxG_obj::height;
HXDLIN(2490)				rating3->set_y(((( (Float)(_hx_tmp8) ) - rating->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(2491)		rating->set_x((placement - ( (Float)(40) )));
HXLINE(2492)		rating->set_y((rating->y - ( (Float)(60) )));
HXLINE(2493)		rating->acceleration->set_y(((( (Float)(550) ) * this->playbackRate) * this->playbackRate));
HXLINE(2494)		{
HXLINE(2494)			 ::flixel::math::FlxBasePoint this1 = rating->velocity;
HXDLIN(2494)			Float rating4 = rating->velocity->y;
HXDLIN(2494)			int y = ::flixel::FlxG_obj::random->_hx_int(140,175,null());
HXDLIN(2494)			this1->set_y((rating4 - (( (Float)(y) ) * this->playbackRate)));
            		}
HXLINE(2495)		{
HXLINE(2495)			 ::flixel::math::FlxBasePoint this2 = rating->velocity;
HXDLIN(2495)			Float rating5 = rating->velocity->x;
HXDLIN(2495)			int x = ::flixel::FlxG_obj::random->_hx_int(0,10,null());
HXDLIN(2495)			this2->set_x((rating5 - (( (Float)(x) ) * this->playbackRate)));
            		}
HXLINE(2496)		bool _hx_tmp9;
HXDLIN(2496)		if (!(::backend::ClientPrefs_obj::data->hideHud)) {
HXLINE(2496)			_hx_tmp9 = this->showRating;
            		}
            		else {
HXLINE(2496)			_hx_tmp9 = false;
            		}
HXDLIN(2496)		rating->set_visible(_hx_tmp9);
HXLINE(2497)		rating->set_x((rating->x + ::backend::ClientPrefs_obj::data->comboOffset->__get(0)));
HXLINE(2498)		rating->set_y((rating->y - ( (Float)(::backend::ClientPrefs_obj::data->comboOffset->__get(1)) )));
HXLINE(2499)		rating->set_antialiasing(antialias);
HXLINE(2501)		 ::flixel::FlxSprite comboSpr =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(2501)		 ::flixel::FlxSprite comboSpr1 = comboSpr->loadGraphic(::backend::Paths_obj::image(((uiPrefix + HX_("combo",4e,28,5d,4a)) + uiSuffix),null(),null()),null(),null(),null(),null(),null());
HXLINE(2502)		{
HXLINE(2502)			int axes1 = 17;
HXDLIN(2502)			bool _hx_tmp10;
HXDLIN(2502)			if ((axes1 != 1)) {
HXLINE(2502)				_hx_tmp10 = (axes1 == 17);
            			}
            			else {
HXLINE(2502)				_hx_tmp10 = true;
            			}
HXDLIN(2502)			if (_hx_tmp10) {
HXLINE(2502)				 ::flixel::FlxSprite comboSpr2 = comboSpr1;
HXDLIN(2502)				int _hx_tmp11 = ::flixel::FlxG_obj::width;
HXDLIN(2502)				comboSpr2->set_x(((( (Float)(_hx_tmp11) ) - comboSpr1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(2502)			bool _hx_tmp12;
HXDLIN(2502)			if ((axes1 != 16)) {
HXLINE(2502)				_hx_tmp12 = (axes1 == 17);
            			}
            			else {
HXLINE(2502)				_hx_tmp12 = true;
            			}
HXDLIN(2502)			if (_hx_tmp12) {
HXLINE(2502)				 ::flixel::FlxSprite comboSpr3 = comboSpr1;
HXDLIN(2502)				int _hx_tmp13 = ::flixel::FlxG_obj::height;
HXDLIN(2502)				comboSpr3->set_y(((( (Float)(_hx_tmp13) ) - comboSpr1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(2503)		comboSpr1->set_x(placement);
HXLINE(2504)		{
HXLINE(2504)			 ::flixel::math::FlxBasePoint this3 = comboSpr1->acceleration;
HXDLIN(2504)			int y1 = ::flixel::FlxG_obj::random->_hx_int(200,300,null());
HXDLIN(2504)			this3->set_y(((( (Float)(y1) ) * this->playbackRate) * this->playbackRate));
            		}
HXLINE(2505)		{
HXLINE(2505)			 ::flixel::math::FlxBasePoint this4 = comboSpr1->velocity;
HXDLIN(2505)			Float comboSpr4 = comboSpr1->velocity->y;
HXDLIN(2505)			int y2 = ::flixel::FlxG_obj::random->_hx_int(140,160,null());
HXDLIN(2505)			this4->set_y((comboSpr4 - (( (Float)(y2) ) * this->playbackRate)));
            		}
HXLINE(2506)		bool _hx_tmp14;
HXDLIN(2506)		if (!(::backend::ClientPrefs_obj::data->hideHud)) {
HXLINE(2506)			_hx_tmp14 = this->showCombo;
            		}
            		else {
HXLINE(2506)			_hx_tmp14 = false;
            		}
HXDLIN(2506)		comboSpr1->set_visible(_hx_tmp14);
HXLINE(2507)		comboSpr1->set_x((comboSpr1->x + ::backend::ClientPrefs_obj::data->comboOffset->__get(0)));
HXLINE(2508)		comboSpr1->set_y((comboSpr1->y - ( (Float)(::backend::ClientPrefs_obj::data->comboOffset->__get(1)) )));
HXLINE(2509)		comboSpr1->set_antialiasing(antialias);
HXLINE(2510)		comboSpr1->set_y((comboSpr1->y + 60));
HXLINE(2511)		{
HXLINE(2511)			 ::flixel::math::FlxBasePoint this5 = comboSpr1->velocity;
HXDLIN(2511)			Float comboSpr5 = comboSpr1->velocity->x;
HXDLIN(2511)			int x1 = ::flixel::FlxG_obj::random->_hx_int(1,10,null());
HXDLIN(2511)			this5->set_x((comboSpr5 + (( (Float)(x1) ) * this->playbackRate)));
            		}
HXLINE(2512)		this->comboGroup->add(rating).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2514)		if (!(::states::PlayState_obj::get_isPixelStage())) {
HXLINE(2516)			 ::flixel::FlxSprite rating6 = rating;
HXDLIN(2516)			rating6->setGraphicSize(::Std_obj::_hx_int((rating->get_width() * ((Float)0.7))),null());
HXLINE(2517)			 ::flixel::FlxSprite comboSpr6 = comboSpr1;
HXDLIN(2517)			comboSpr6->setGraphicSize(::Std_obj::_hx_int((comboSpr1->get_width() * ((Float)0.7))),null());
            		}
            		else {
HXLINE(2521)			 ::flixel::FlxSprite rating7 = rating;
HXDLIN(2521)			Float _hx_tmp15 = rating->get_width();
HXDLIN(2521)			rating7->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp15 * ::states::PlayState_obj::daPixelZoom) * ((Float)0.85))),null());
HXLINE(2522)			 ::flixel::FlxSprite comboSpr7 = comboSpr1;
HXDLIN(2522)			Float _hx_tmp16 = comboSpr1->get_width();
HXDLIN(2522)			comboSpr7->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp16 * ::states::PlayState_obj::daPixelZoom) * ((Float)0.85))),null());
            		}
HXLINE(2525)		comboSpr1->updateHitbox();
HXLINE(2526)		rating->updateHitbox();
HXLINE(2528)		::Array< int > seperatedScore = ::Array_obj< int >::__new(0);
HXLINE(2530)		if ((this->combo >= 1000)) {
HXLINE(2531)			seperatedScore->push(::hx::Mod(::Math_obj::floor((( (Float)(this->combo) ) / ( (Float)(1000) ))),10));
            		}
HXLINE(2533)		seperatedScore->push(::hx::Mod(::Math_obj::floor((( (Float)(this->combo) ) / ( (Float)(100) ))),10));
HXLINE(2534)		seperatedScore->push(::hx::Mod(::Math_obj::floor((( (Float)(this->combo) ) / ( (Float)(10) ))),10));
HXLINE(2535)		seperatedScore->push(::hx::Mod(this->combo,10));
HXLINE(2537)		int daLoop = 0;
HXLINE(2538)		Float xThing = ( (Float)(0) );
HXLINE(2539)		if (this->showCombo) {
HXLINE(2540)			this->comboGroup->add(comboSpr1).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE(2542)		{
HXLINE(2542)			int _g = 0;
HXDLIN(2542)			while((_g < seperatedScore->length)){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,numScore1) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween tween){
            					HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_2566_popUpScore)
HXLINE(2566)					numScore1->destroy();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(2542)				int i = seperatedScore->__get(_g);
HXDLIN(2542)				_g = (_g + 1);
HXLINE(2544)				 ::flixel::FlxSprite numScore =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(2544)				 ::flixel::FlxSprite numScore1 = numScore->loadGraphic(::backend::Paths_obj::image((((uiPrefix + HX_("num",46,de,53,00)) + ::Std_obj::_hx_int(( (Float)(i) ))) + uiSuffix),null(),null()),null(),null(),null(),null(),null());
HXLINE(2545)				{
HXLINE(2545)					int axes2 = 17;
HXDLIN(2545)					bool _hx_tmp17;
HXDLIN(2545)					if ((axes2 != 1)) {
HXLINE(2545)						_hx_tmp17 = (axes2 == 17);
            					}
            					else {
HXLINE(2545)						_hx_tmp17 = true;
            					}
HXDLIN(2545)					if (_hx_tmp17) {
HXLINE(2545)						 ::flixel::FlxSprite numScore2 = numScore1;
HXDLIN(2545)						int _hx_tmp18 = ::flixel::FlxG_obj::width;
HXDLIN(2545)						numScore2->set_x(((( (Float)(_hx_tmp18) ) - numScore1->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(2545)					bool _hx_tmp19;
HXDLIN(2545)					if ((axes2 != 16)) {
HXLINE(2545)						_hx_tmp19 = (axes2 == 17);
            					}
            					else {
HXLINE(2545)						_hx_tmp19 = true;
            					}
HXDLIN(2545)					if (_hx_tmp19) {
HXLINE(2545)						 ::flixel::FlxSprite numScore3 = numScore1;
HXDLIN(2545)						int _hx_tmp20 = ::flixel::FlxG_obj::height;
HXDLIN(2545)						numScore3->set_y(((( (Float)(_hx_tmp20) ) - numScore1->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(2546)				numScore1->set_x((((placement + (43 * daLoop)) - ( (Float)(90) )) + ::backend::ClientPrefs_obj::data->comboOffset->__get(2)));
HXLINE(2547)				numScore1->set_y((numScore1->y + (80 - ::backend::ClientPrefs_obj::data->comboOffset->__get(3))));
HXLINE(2549)				if (!(::states::PlayState_obj::get_isPixelStage())) {
HXLINE(2549)					 ::flixel::FlxSprite numScore4 = numScore1;
HXDLIN(2549)					numScore4->setGraphicSize(::Std_obj::_hx_int((numScore1->get_width() * ((Float)0.5))),null());
            				}
            				else {
HXLINE(2550)					 ::flixel::FlxSprite numScore5 = numScore1;
HXDLIN(2550)					Float _hx_tmp21 = numScore1->get_width();
HXDLIN(2550)					numScore5->setGraphicSize(::Std_obj::_hx_int((_hx_tmp21 * ::states::PlayState_obj::daPixelZoom)),null());
            				}
HXLINE(2551)				numScore1->updateHitbox();
HXLINE(2553)				{
HXLINE(2553)					 ::flixel::math::FlxBasePoint this6 = numScore1->acceleration;
HXDLIN(2553)					int y3 = ::flixel::FlxG_obj::random->_hx_int(200,300,null());
HXDLIN(2553)					this6->set_y(((( (Float)(y3) ) * this->playbackRate) * this->playbackRate));
            				}
HXLINE(2554)				{
HXLINE(2554)					 ::flixel::math::FlxBasePoint this7 = numScore1->velocity;
HXDLIN(2554)					Float numScore6 = numScore1->velocity->y;
HXDLIN(2554)					int y4 = ::flixel::FlxG_obj::random->_hx_int(140,160,null());
HXDLIN(2554)					this7->set_y((numScore6 - (( (Float)(y4) ) * this->playbackRate)));
            				}
HXLINE(2555)				{
HXLINE(2555)					 ::flixel::math::FlxBasePoint this8 = numScore1->velocity;
HXDLIN(2555)					Float x2 = ::flixel::FlxG_obj::random->_hx_float(-5,5,null());
HXDLIN(2555)					this8->set_x((x2 * this->playbackRate));
            				}
HXLINE(2556)				numScore1->set_visible(!(::backend::ClientPrefs_obj::data->hideHud));
HXLINE(2557)				numScore1->set_antialiasing(antialias);
HXLINE(2560)				if (this->showComboNum) {
HXLINE(2561)					this->comboGroup->add(numScore1).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE(2563)				::flixel::tweens::FlxTween_obj::tween(numScore1, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(((Float)0.2) / this->playbackRate), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("startDelay",c1,af,3d,f3),((::backend::Conductor_obj::crochet * ((Float)0.002)) / this->playbackRate))
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(numScore1)))));
HXLINE(2571)				daLoop = (daLoop + 1);
HXLINE(2572)				if ((numScore1->x > xThing)) {
HXLINE(2572)					xThing = numScore1->x;
            				}
            			}
            		}
HXLINE(2574)		comboSpr1->set_x((xThing + 50));
HXLINE(2575)		::flixel::tweens::FlxTween_obj::tween(rating, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(((Float)0.2) / this->playbackRate), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((::backend::Conductor_obj::crochet * ((Float)0.001)) / this->playbackRate))));
HXLINE(2579)		::flixel::tweens::FlxTween_obj::tween(comboSpr1, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(((Float)0.2) / this->playbackRate), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((::backend::Conductor_obj::crochet * ((Float)0.002)) / this->playbackRate))
            			->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(comboSpr1,rating)))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,popUpScore,(void))

void PlayState_obj::onKeyPress( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2591_onKeyPress)
HXLINE(2593)		int eventKey = event->keyCode;
HXLINE(2594)		int key = ::states::PlayState_obj::getKeyFromEvent(this->keysArray,eventKey);
HXLINE(2596)		if (!(this->get_controls()->controllerMode)) {
HXLINE(2603)			if (::flixel::FlxG_obj::keys->checkStatus(eventKey,2)) {
HXLINE(2603)				this->keyPressed(key);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,onKeyPress,(void))

void PlayState_obj::keyPressed(int key){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2608_keyPressed)
HXDLIN(2608)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2609)		bool _hx_tmp;
HXDLIN(2609)		bool _hx_tmp1;
HXDLIN(2609)		bool _hx_tmp2;
HXDLIN(2609)		bool _hx_tmp3;
HXDLIN(2609)		bool _hx_tmp4;
HXDLIN(2609)		bool _hx_tmp5;
HXDLIN(2609)		bool _hx_tmp6;
HXDLIN(2609)		if (!(this->cpuControlled)) {
HXLINE(2609)			_hx_tmp6 = this->paused;
            		}
            		else {
HXLINE(2609)			_hx_tmp6 = true;
            		}
HXDLIN(2609)		if (!(_hx_tmp6)) {
HXLINE(2609)			_hx_tmp5 = this->inCutscene;
            		}
            		else {
HXLINE(2609)			_hx_tmp5 = true;
            		}
HXDLIN(2609)		if (!(_hx_tmp5)) {
HXLINE(2609)			_hx_tmp4 = (key < 0);
            		}
            		else {
HXLINE(2609)			_hx_tmp4 = true;
            		}
HXDLIN(2609)		if (!(_hx_tmp4)) {
HXLINE(2609)			_hx_tmp3 = (key >= this->playerStrums->length);
            		}
            		else {
HXLINE(2609)			_hx_tmp3 = true;
            		}
HXDLIN(2609)		if (!(_hx_tmp3)) {
HXLINE(2609)			_hx_tmp2 = !(this->generatedMusic);
            		}
            		else {
HXLINE(2609)			_hx_tmp2 = true;
            		}
HXDLIN(2609)		if (!(_hx_tmp2)) {
HXLINE(2609)			_hx_tmp1 = this->endingSong;
            		}
            		else {
HXLINE(2609)			_hx_tmp1 = true;
            		}
HXDLIN(2609)		if (!(_hx_tmp1)) {
HXLINE(2609)			_hx_tmp = this->boyfriend->stunned;
            		}
            		else {
HXLINE(2609)			_hx_tmp = true;
            		}
HXDLIN(2609)		if (_hx_tmp) {
HXLINE(2609)			return;
            		}
HXLINE(2611)		 ::Dynamic ret = this->callOnScripts(HX_("onKeyPressPre",40,32,10,1b),::cpp::VirtualArray_obj::__new(1)->init(0,key),null(),null(),null());
HXLINE(2612)		if (::hx::IsEq( ret,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(2612)			return;
            		}
HXLINE(2615)		Float lastTime = ::backend::Conductor_obj::songPosition;
HXLINE(2616)		if ((::backend::Conductor_obj::songPosition >= 0)) {
HXLINE(2616)			::backend::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
            		}
HXLINE(2619)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(2619)		{
HXLINE(2619)			int _g1 = 0;
HXDLIN(2619)			::Array< ::Dynamic> _g2 = this->notes->members;
HXDLIN(2619)			while((_g1 < _g2->length)){
HXLINE(2619)				 ::objects::Note v = _g2->__get(_g1).StaticCast<  ::objects::Note >();
HXDLIN(2619)				_g1 = (_g1 + 1);
HXLINE(2620)				bool canHit;
HXDLIN(2620)				bool canHit1;
HXDLIN(2620)				bool canHit2;
HXDLIN(2620)				bool canHit3;
HXDLIN(2620)				bool canHit4;
HXDLIN(2620)				if (!(_gthis->strumsBlocked->__get(v->noteData))) {
HXLINE(2620)					canHit4 = v->canBeHit;
            				}
            				else {
HXLINE(2620)					canHit4 = false;
            				}
HXDLIN(2620)				if (canHit4) {
HXLINE(2620)					canHit3 = v->mustPress;
            				}
            				else {
HXLINE(2620)					canHit3 = false;
            				}
HXDLIN(2620)				if (canHit3) {
HXLINE(2620)					canHit2 = !(v->tooLate);
            				}
            				else {
HXLINE(2620)					canHit2 = false;
            				}
HXDLIN(2620)				if (canHit2) {
HXLINE(2620)					canHit1 = !(v->wasGoodHit);
            				}
            				else {
HXLINE(2620)					canHit1 = false;
            				}
HXDLIN(2620)				if (canHit1) {
HXLINE(2620)					canHit = !(v->blockHit);
            				}
            				else {
HXLINE(2620)					canHit = false;
            				}
HXLINE(2619)				bool _hx_tmp7;
HXLINE(2621)				bool _hx_tmp8;
HXDLIN(2621)				bool _hx_tmp9;
HXDLIN(2621)				if (::hx::IsNotNull( v )) {
HXLINE(2621)					_hx_tmp9 = canHit;
            				}
            				else {
HXLINE(2621)					_hx_tmp9 = false;
            				}
HXDLIN(2621)				if (_hx_tmp9) {
HXLINE(2621)					_hx_tmp8 = !(v->isSustainNote);
            				}
            				else {
HXLINE(2621)					_hx_tmp8 = false;
            				}
HXDLIN(2621)				if (_hx_tmp8) {
HXLINE(2619)					_hx_tmp7 = (v->noteData == key);
            				}
            				else {
HXLINE(2619)					_hx_tmp7 = false;
            				}
HXDLIN(2619)				if (_hx_tmp7) {
HXLINE(2619)					_g->push(v);
            				}
            			}
            		}
HXDLIN(2619)		::Array< ::Dynamic> plrInputNotes = _g;
HXLINE(2623)		plrInputNotes->sort(::states::PlayState_obj::sortHitNotes_dyn());
HXLINE(2625)		bool shouldMiss = !(::backend::ClientPrefs_obj::data->ghostTapping);
HXLINE(2627)		if ((plrInputNotes->length != 0)) {
HXLINE(2628)			 ::objects::Note funnyNote = plrInputNotes->__get(0).StaticCast<  ::objects::Note >();
HXLINE(2630)			if ((plrInputNotes->length > 1)) {
HXLINE(2631)				 ::objects::Note doubleNote = plrInputNotes->__get(1).StaticCast<  ::objects::Note >();
HXLINE(2633)				if ((doubleNote->noteData == funnyNote->noteData)) {
HXLINE(2635)					if ((::Math_obj::abs((doubleNote->strumTime - funnyNote->strumTime)) < ((Float)1.0))) {
HXLINE(2636)						this->invalidateNote(doubleNote);
            					}
            					else {
HXLINE(2637)						if ((doubleNote->strumTime < funnyNote->strumTime)) {
HXLINE(2640)							funnyNote = doubleNote;
            						}
            					}
            				}
            			}
HXLINE(2644)			this->goodNoteHit(funnyNote);
            		}
            		else {
HXLINE(2646)			if (shouldMiss) {
HXLINE(2648)				this->callOnScripts(HX_("onGhostTap",93,92,59,ab),::cpp::VirtualArray_obj::__new(1)->init(0,key),null(),null(),null());
HXLINE(2649)				this->noteMissPress(key);
            			}
            		}
HXLINE(2654)		if (!(this->keysPressed->contains(key))) {
HXLINE(2654)			this->keysPressed->push(key);
            		}
HXLINE(2657)		::backend::Conductor_obj::songPosition = lastTime;
HXLINE(2659)		 ::objects::StrumNote spr = Dynamic( this->playerStrums->members->__get(key)).StaticCast<  ::objects::StrumNote >();
HXLINE(2660)		bool _hx_tmp10;
HXDLIN(2660)		bool _hx_tmp11;
HXDLIN(2660)		if ((this->strumsBlocked->__get(key) != true)) {
HXLINE(2660)			_hx_tmp11 = ::hx::IsNotNull( spr );
            		}
            		else {
HXLINE(2660)			_hx_tmp11 = false;
            		}
HXDLIN(2660)		if (_hx_tmp11) {
HXLINE(2660)			_hx_tmp10 = (spr->animation->_curAnim->name != HX_("confirm",00,9d,39,10));
            		}
            		else {
HXLINE(2660)			_hx_tmp10 = false;
            		}
HXDLIN(2660)		if (_hx_tmp10) {
HXLINE(2662)			spr->playAnim(HX_("pressed",a2,d2,e6,39),null());
HXLINE(2663)			spr->resetAnim = ( (Float)(0) );
            		}
HXLINE(2665)		this->callOnScripts(HX_("onKeyPress",a3,cd,a8,ea),::cpp::VirtualArray_obj::__new(1)->init(0,key),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,keyPressed,(void))

void PlayState_obj::onKeyRelease( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2679_onKeyRelease)
HXLINE(2680)		int eventKey = event->keyCode;
HXLINE(2681)		int key = ::states::PlayState_obj::getKeyFromEvent(this->keysArray,eventKey);
HXLINE(2682)		bool _hx_tmp;
HXDLIN(2682)		if (!(this->get_controls()->controllerMode)) {
HXLINE(2682)			_hx_tmp = (key > -1);
            		}
            		else {
HXLINE(2682)			_hx_tmp = false;
            		}
HXDLIN(2682)		if (_hx_tmp) {
HXLINE(2682)			this->keyReleased(key);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,onKeyRelease,(void))

void PlayState_obj::keyReleased(int key){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2686_keyReleased)
HXLINE(2687)		bool _hx_tmp;
HXDLIN(2687)		bool _hx_tmp1;
HXDLIN(2687)		bool _hx_tmp2;
HXDLIN(2687)		bool _hx_tmp3;
HXDLIN(2687)		if (!(this->cpuControlled)) {
HXLINE(2687)			_hx_tmp3 = !(this->startedCountdown);
            		}
            		else {
HXLINE(2687)			_hx_tmp3 = true;
            		}
HXDLIN(2687)		if (!(_hx_tmp3)) {
HXLINE(2687)			_hx_tmp2 = this->paused;
            		}
            		else {
HXLINE(2687)			_hx_tmp2 = true;
            		}
HXDLIN(2687)		if (!(_hx_tmp2)) {
HXLINE(2687)			_hx_tmp1 = (key < 0);
            		}
            		else {
HXLINE(2687)			_hx_tmp1 = true;
            		}
HXDLIN(2687)		if (!(_hx_tmp1)) {
HXLINE(2687)			_hx_tmp = (key >= this->playerStrums->length);
            		}
            		else {
HXLINE(2687)			_hx_tmp = true;
            		}
HXDLIN(2687)		if (_hx_tmp) {
HXLINE(2687)			return;
            		}
HXLINE(2689)		 ::Dynamic ret = this->callOnScripts(HX_("onKeyReleasePre",7c,fa,aa,25),::cpp::VirtualArray_obj::__new(1)->init(0,key),null(),null(),null());
HXLINE(2690)		if (::hx::IsEq( ret,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(2690)			return;
            		}
HXLINE(2692)		 ::objects::StrumNote spr = Dynamic( this->playerStrums->members->__get(key)).StaticCast<  ::objects::StrumNote >();
HXLINE(2693)		if (::hx::IsNotNull( spr )) {
HXLINE(2695)			spr->playAnim(HX_("static",ae,dc,fb,05),null());
HXLINE(2696)			spr->resetAnim = ( (Float)(0) );
            		}
HXLINE(2698)		this->callOnScripts(HX_("onKeyRelease",e7,c7,b8,9f),::cpp::VirtualArray_obj::__new(1)->init(0,key),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,keyReleased,(void))

void PlayState_obj::keysCheck(){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_2718_keysCheck)
HXLINE(2720)		::Array< bool > holdArray = ::Array_obj< bool >::__new(0);
HXLINE(2721)		::Array< bool > pressArray = ::Array_obj< bool >::__new(0);
HXLINE(2722)		::Array< bool > releaseArray = ::Array_obj< bool >::__new(0);
HXLINE(2723)		{
HXLINE(2723)			int _g = 0;
HXDLIN(2723)			::Array< ::String > _g1 = this->keysArray;
HXDLIN(2723)			while((_g < _g1->length)){
HXLINE(2723)				::String key = _g1->__get(_g);
HXDLIN(2723)				_g = (_g + 1);
HXLINE(2725)				holdArray->push(this->get_controls()->pressed(key));
HXLINE(2726)				if (this->get_controls()->controllerMode) {
HXLINE(2728)					pressArray->push(this->get_controls()->justPressed(key));
HXLINE(2729)					releaseArray->push(this->get_controls()->justReleased(key));
            				}
            			}
            		}
HXLINE(2734)		bool _hx_tmp;
HXDLIN(2734)		if (this->get_controls()->controllerMode) {
HXLINE(2734)			_hx_tmp = pressArray->contains(true);
            		}
            		else {
HXLINE(2734)			_hx_tmp = false;
            		}
HXDLIN(2734)		if (_hx_tmp) {
HXLINE(2735)			int _g2 = 0;
HXDLIN(2735)			int _g3 = pressArray->length;
HXDLIN(2735)			while((_g2 < _g3)){
HXLINE(2735)				_g2 = (_g2 + 1);
HXDLIN(2735)				int i = (_g2 - 1);
HXLINE(2736)				bool _hx_tmp1;
HXDLIN(2736)				if (pressArray->__get(i)) {
HXLINE(2736)					_hx_tmp1 = (this->strumsBlocked->__get(i) != true);
            				}
            				else {
HXLINE(2736)					_hx_tmp1 = false;
            				}
HXDLIN(2736)				if (_hx_tmp1) {
HXLINE(2737)					this->keyPressed(i);
            				}
            			}
            		}
HXLINE(2739)		bool _hx_tmp2;
HXDLIN(2739)		bool _hx_tmp3;
HXDLIN(2739)		bool _hx_tmp4;
HXDLIN(2739)		if (this->startedCountdown) {
HXLINE(2739)			_hx_tmp4 = !(this->inCutscene);
            		}
            		else {
HXLINE(2739)			_hx_tmp4 = false;
            		}
HXDLIN(2739)		if (_hx_tmp4) {
HXLINE(2739)			_hx_tmp3 = !(this->boyfriend->stunned);
            		}
            		else {
HXLINE(2739)			_hx_tmp3 = false;
            		}
HXDLIN(2739)		if (_hx_tmp3) {
HXLINE(2739)			_hx_tmp2 = this->generatedMusic;
            		}
            		else {
HXLINE(2739)			_hx_tmp2 = false;
            		}
HXDLIN(2739)		if (_hx_tmp2) {
HXLINE(2741)			if ((this->notes->length > 0)) {
HXLINE(2742)				 ::Dynamic filter = null();
HXDLIN(2742)				 ::flixel::group::FlxTypedGroupIterator n =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->notes->members,filter);
HXDLIN(2742)				while(n->hasNext()){
HXLINE(2742)					 ::objects::Note n1 = n->next().StaticCast<  ::objects::Note >();
HXLINE(2743)					bool canHit;
HXDLIN(2743)					bool canHit1;
HXDLIN(2743)					bool canHit2;
HXDLIN(2743)					bool canHit3;
HXDLIN(2743)					bool canHit4;
HXDLIN(2743)					bool canHit5;
HXDLIN(2743)					if (::hx::IsNotNull( n1 )) {
HXLINE(2743)						canHit5 = !(this->strumsBlocked->__get(n1->noteData));
            					}
            					else {
HXLINE(2743)						canHit5 = false;
            					}
HXDLIN(2743)					if (canHit5) {
HXLINE(2743)						canHit4 = n1->canBeHit;
            					}
            					else {
HXLINE(2743)						canHit4 = false;
            					}
HXDLIN(2743)					if (canHit4) {
HXLINE(2743)						canHit3 = n1->mustPress;
            					}
            					else {
HXLINE(2743)						canHit3 = false;
            					}
HXDLIN(2743)					if (canHit3) {
HXLINE(2743)						canHit2 = !(n1->tooLate);
            					}
            					else {
HXLINE(2743)						canHit2 = false;
            					}
HXDLIN(2743)					if (canHit2) {
HXLINE(2743)						canHit1 = !(n1->wasGoodHit);
            					}
            					else {
HXLINE(2743)						canHit1 = false;
            					}
HXDLIN(2743)					if (canHit1) {
HXLINE(2743)						canHit = !(n1->blockHit);
            					}
            					else {
HXLINE(2743)						canHit = false;
            					}
HXLINE(2746)					if (this->guitarHeroSustains) {
HXLINE(2747)						bool canHit6;
HXDLIN(2747)						if (canHit) {
HXLINE(2747)							canHit6 = ::hx::IsNotNull( n1->parent );
            						}
            						else {
HXLINE(2747)							canHit6 = false;
            						}
HXDLIN(2747)						if (canHit6) {
HXLINE(2747)							canHit = n1->parent->wasGoodHit;
            						}
            						else {
HXLINE(2747)							canHit = false;
            						}
            					}
HXLINE(2749)					bool _hx_tmp5;
HXDLIN(2749)					if (canHit) {
HXLINE(2749)						_hx_tmp5 = n1->isSustainNote;
            					}
            					else {
HXLINE(2749)						_hx_tmp5 = false;
            					}
HXDLIN(2749)					if (_hx_tmp5) {
HXLINE(2750)						bool released = !(holdArray->__get(n1->noteData));
HXLINE(2752)						if (!(released)) {
HXLINE(2753)							this->goodNoteHit(n1);
            						}
            					}
            				}
            			}
HXLINE(2758)			bool _hx_tmp6;
HXDLIN(2758)			if (holdArray->contains(true)) {
HXLINE(2758)				_hx_tmp6 = this->endingSong;
            			}
            			else {
HXLINE(2758)				_hx_tmp6 = true;
            			}
HXDLIN(2758)			if (_hx_tmp6) {
HXLINE(2759)				this->playerDance();
            			}
            		}
HXLINE(2767)		bool _hx_tmp7;
HXDLIN(2767)		bool _hx_tmp8;
HXDLIN(2767)		if (!(this->get_controls()->controllerMode)) {
HXLINE(2767)			_hx_tmp8 = this->strumsBlocked->contains(true);
            		}
            		else {
HXLINE(2767)			_hx_tmp8 = true;
            		}
HXDLIN(2767)		if (_hx_tmp8) {
HXLINE(2767)			_hx_tmp7 = releaseArray->contains(true);
            		}
            		else {
HXLINE(2767)			_hx_tmp7 = false;
            		}
HXDLIN(2767)		if (_hx_tmp7) {
HXLINE(2768)			int _g4 = 0;
HXDLIN(2768)			int _g5 = releaseArray->length;
HXDLIN(2768)			while((_g4 < _g5)){
HXLINE(2768)				_g4 = (_g4 + 1);
HXDLIN(2768)				int i1 = (_g4 - 1);
HXLINE(2769)				bool _hx_tmp9;
HXDLIN(2769)				if (!(releaseArray->__get(i1))) {
HXLINE(2769)					_hx_tmp9 = (this->strumsBlocked->__get(i1) == true);
            				}
            				else {
HXLINE(2769)					_hx_tmp9 = true;
            				}
HXDLIN(2769)				if (_hx_tmp9) {
HXLINE(2770)					this->keyReleased(i1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,keysCheck,(void))

void PlayState_obj::noteMiss( ::objects::Note daNote){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,_gthis, ::objects::Note,daNote) HXARGC(1)
            		void _hx_run( ::objects::Note note){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_2776_noteMiss)
HXLINE(2776)			bool _hx_tmp;
HXDLIN(2776)			bool _hx_tmp1;
HXDLIN(2776)			bool _hx_tmp2;
HXDLIN(2776)			bool _hx_tmp3;
HXDLIN(2776)			if (::hx::IsInstanceNotEq( daNote,note )) {
HXLINE(2776)				_hx_tmp3 = daNote->mustPress;
            			}
            			else {
HXLINE(2776)				_hx_tmp3 = false;
            			}
HXDLIN(2776)			if (_hx_tmp3) {
HXLINE(2776)				_hx_tmp2 = (daNote->noteData == note->noteData);
            			}
            			else {
HXLINE(2776)				_hx_tmp2 = false;
            			}
HXDLIN(2776)			if (_hx_tmp2) {
HXLINE(2776)				_hx_tmp1 = (daNote->isSustainNote == note->isSustainNote);
            			}
            			else {
HXLINE(2776)				_hx_tmp1 = false;
            			}
HXDLIN(2776)			if (_hx_tmp1) {
HXLINE(2776)				_hx_tmp = (::Math_obj::abs((daNote->strumTime - note->strumTime)) < 1);
            			}
            			else {
HXLINE(2776)				_hx_tmp = false;
            			}
HXDLIN(2776)			if (_hx_tmp) {
HXLINE(2777)				_gthis->invalidateNote(note);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2773_noteMiss)
HXDLIN(2773)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2775)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis,daNote)),null());
HXLINE(2780)		this->noteMissCommon(daNote->noteData,daNote);
HXLINE(2781)		int result = this->notes->members->indexOf(daNote,null());
HXDLIN(2781)		 ::Dynamic result1 = this->callOnLuas(HX_("noteMiss",0e,78,8f,57),::cpp::VirtualArray_obj::__new(4)->init(0,result)->init(1,daNote->noteData)->init(2,daNote->noteType)->init(3,daNote->isSustainNote),null(),null(),null());
HXLINE(2782)		bool _hx_tmp;
HXDLIN(2782)		bool _hx_tmp1;
HXDLIN(2782)		if (::hx::IsNotEq( result1,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(2782)			_hx_tmp1 = ::hx::IsNotEq( result1,::psychlua::LuaUtils_obj::Function_StopHScript );
            		}
            		else {
HXLINE(2782)			_hx_tmp1 = false;
            		}
HXDLIN(2782)		if (_hx_tmp1) {
HXLINE(2782)			_hx_tmp = ::hx::IsNotEq( result1,::psychlua::LuaUtils_obj::Function_StopAll );
            		}
            		else {
HXLINE(2782)			_hx_tmp = false;
            		}
HXDLIN(2782)		if (_hx_tmp) {
HXLINE(2782)			this->callOnHScript(HX_("noteMiss",0e,78,8f,57),::cpp::VirtualArray_obj::__new(1)->init(0,daNote),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,noteMiss,(void))

void PlayState_obj::noteMissPress(::hx::Null< int >  __o_direction){
            		int direction = __o_direction.Default(1);
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2786_noteMissPress)
HXLINE(2787)		if (::backend::ClientPrefs_obj::data->ghostTapping) {
HXLINE(2787)			return;
            		}
HXLINE(2789)		this->noteMissCommon(direction,null());
HXLINE(2790)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(2790)		::String library = null();
HXDLIN(2790)		 ::openfl::media::Sound _hx_tmp1 = ::backend::Paths_obj::sound((HX_("missnote",ee,98,f1,e3) + ::flixel::FlxG_obj::random->_hx_int(1,3,null())),library);
HXDLIN(2790)		_hx_tmp->play(_hx_tmp1,::flixel::FlxG_obj::random->_hx_float(((Float)0.1),((Float)0.2),null()),null(),null(),null(),null());
HXLINE(2791)		this->callOnScripts(HX_("noteMissPress",95,58,12,aa),::cpp::VirtualArray_obj::__new(1)->init(0,direction),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,noteMissPress,(void))

void PlayState_obj::noteMissCommon(int direction, ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2795_noteMissCommon)
HXLINE(2797)		Float subtract = ((Float)0.05);
HXLINE(2798)		if (::hx::IsNotNull( note )) {
HXLINE(2798)			subtract = note->missHealth;
            		}
HXLINE(2801)		bool _hx_tmp;
HXDLIN(2801)		bool _hx_tmp1;
HXDLIN(2801)		if (::hx::IsNotNull( note )) {
HXLINE(2801)			_hx_tmp1 = this->guitarHeroSustains;
            		}
            		else {
HXLINE(2801)			_hx_tmp1 = false;
            		}
HXDLIN(2801)		if (_hx_tmp1) {
HXLINE(2801)			_hx_tmp = ::hx::IsNull( note->parent );
            		}
            		else {
HXLINE(2801)			_hx_tmp = false;
            		}
HXDLIN(2801)		if (_hx_tmp) {
HXLINE(2802)			if ((note->tail->length > 0)) {
HXLINE(2803)				note->set_alpha(((Float)0.35));
HXLINE(2804)				{
HXLINE(2804)					int _g = 0;
HXDLIN(2804)					::Array< ::Dynamic> _g1 = note->tail;
HXDLIN(2804)					while((_g < _g1->length)){
HXLINE(2804)						 ::objects::Note childNote = _g1->__get(_g).StaticCast<  ::objects::Note >();
HXDLIN(2804)						_g = (_g + 1);
HXLINE(2805)						childNote->set_alpha(note->alpha);
HXLINE(2806)						childNote->missed = true;
HXLINE(2807)						childNote->canBeHit = false;
HXLINE(2808)						childNote->ignoreNote = true;
HXLINE(2809)						childNote->tooLate = true;
            					}
            				}
HXLINE(2811)				note->missed = true;
HXLINE(2812)				note->canBeHit = false;
HXLINE(2816)				subtract = (subtract * ( (Float)((note->tail->length + 1)) ));
            			}
HXLINE(2820)			if (note->missed) {
HXLINE(2821)				return;
            			}
            		}
HXLINE(2823)		bool _hx_tmp2;
HXDLIN(2823)		bool _hx_tmp3;
HXDLIN(2823)		bool _hx_tmp4;
HXDLIN(2823)		if (::hx::IsNotNull( note )) {
HXLINE(2823)			_hx_tmp4 = this->guitarHeroSustains;
            		}
            		else {
HXLINE(2823)			_hx_tmp4 = false;
            		}
HXDLIN(2823)		if (_hx_tmp4) {
HXLINE(2823)			_hx_tmp3 = ::hx::IsNotNull( note->parent );
            		}
            		else {
HXLINE(2823)			_hx_tmp3 = false;
            		}
HXDLIN(2823)		if (_hx_tmp3) {
HXLINE(2823)			_hx_tmp2 = note->isSustainNote;
            		}
            		else {
HXLINE(2823)			_hx_tmp2 = false;
            		}
HXDLIN(2823)		if (_hx_tmp2) {
HXLINE(2824)			if (note->missed) {
HXLINE(2825)				return;
            			}
HXLINE(2827)			 ::objects::Note parentNote = note->parent;
HXLINE(2828)			bool _hx_tmp5;
HXDLIN(2828)			if (parentNote->wasGoodHit) {
HXLINE(2828)				_hx_tmp5 = (parentNote->tail->length > 0);
            			}
            			else {
HXLINE(2828)				_hx_tmp5 = false;
            			}
HXDLIN(2828)			if (_hx_tmp5) {
HXLINE(2829)				int _g2 = 0;
HXDLIN(2829)				::Array< ::Dynamic> _g3 = parentNote->tail;
HXDLIN(2829)				while((_g2 < _g3->length)){
HXLINE(2829)					 ::objects::Note child = _g3->__get(_g2).StaticCast<  ::objects::Note >();
HXDLIN(2829)					_g2 = (_g2 + 1);
HXDLIN(2829)					if (::hx::IsInstanceNotEq( child,note )) {
HXLINE(2830)						child->missed = true;
HXLINE(2831)						child->canBeHit = false;
HXLINE(2832)						child->ignoreNote = true;
HXLINE(2833)						child->tooLate = true;
            					}
            				}
            			}
            		}
HXLINE(2838)		if (this->instakillOnMiss) {
HXLINE(2840)			this->vocals->set_volume(( (Float)(0) ));
HXLINE(2841)			this->opponentVocals->set_volume(( (Float)(0) ));
HXLINE(2842)			this->doDeathCheck(true);
            		}
HXLINE(2845)		int lastCombo = this->combo;
HXLINE(2846)		this->combo = 0;
HXLINE(2848)		this->set_health((this->health - (subtract * this->healthLoss)));
HXLINE(2849)		if (!(this->practiceMode)) {
HXLINE(2849)			 ::states::PlayState _hx_tmp6 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2849)			_hx_tmp6->songScore = (_hx_tmp6->songScore - 10);
            		}
HXLINE(2850)		if (!(this->endingSong)) {
HXLINE(2850)			this->songMisses++;
            		}
HXLINE(2851)		this->totalPlayed++;
HXLINE(2852)		this->RecalculateRating(true);
HXLINE(2855)		 ::objects::Character _hx_char = this->boyfriend;
HXLINE(2856)		bool _hx_tmp7;
HXDLIN(2856)		bool _hx_tmp8;
HXDLIN(2856)		if (::hx::IsNotNull( note )) {
HXLINE(2856)			_hx_tmp8 = note->gfNote;
            		}
            		else {
HXLINE(2856)			_hx_tmp8 = false;
            		}
HXDLIN(2856)		if (!(_hx_tmp8)) {
HXLINE(2856)			if (::hx::IsNotNull(  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection) )) {
HXLINE(2856)				_hx_tmp7 = ( (bool)( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(2856)				_hx_tmp7 = false;
            			}
            		}
            		else {
HXLINE(2856)			_hx_tmp7 = true;
            		}
HXDLIN(2856)		if (_hx_tmp7) {
HXLINE(2856)			_hx_char = this->gf;
            		}
HXLINE(2858)		bool _hx_tmp9;
HXDLIN(2858)		bool _hx_tmp10;
HXDLIN(2858)		if (::hx::IsNotNull( _hx_char )) {
HXLINE(2858)			if (::hx::IsNotNull( note )) {
HXLINE(2858)				_hx_tmp10 = !(note->noMissAnimation);
            			}
            			else {
HXLINE(2858)				_hx_tmp10 = true;
            			}
            		}
            		else {
HXLINE(2858)			_hx_tmp10 = false;
            		}
HXDLIN(2858)		if (_hx_tmp10) {
HXLINE(2858)			_hx_tmp9 = _hx_char->hasMissAnimations;
            		}
            		else {
HXLINE(2858)			_hx_tmp9 = false;
            		}
HXDLIN(2858)		if (_hx_tmp9) {
HXLINE(2860)			::String suffix = HX_("",00,00,00,00);
HXLINE(2861)			if (::hx::IsNotNull( note )) {
HXLINE(2861)				suffix = note->animSuffix;
            			}
HXLINE(2863)			::String animToPlay = ((this->singAnimations->__get(::Std_obj::_hx_int(::Math_obj::abs(::Math_obj::min(( (Float)((this->singAnimations->length - 1)) ),( (Float)(direction) ))))) + HX_("miss",fc,52,5c,48)) + suffix);
HXLINE(2864)			_hx_char->playAnim(animToPlay,true,null(),null());
HXLINE(2866)			bool _hx_tmp11;
HXDLIN(2866)			bool _hx_tmp12;
HXDLIN(2866)			bool _hx_tmp13;
HXDLIN(2866)			if (::hx::IsInstanceNotEq( _hx_char,this->gf )) {
HXLINE(2866)				_hx_tmp13 = (lastCombo > 5);
            			}
            			else {
HXLINE(2866)				_hx_tmp13 = false;
            			}
HXDLIN(2866)			if (_hx_tmp13) {
HXLINE(2866)				_hx_tmp12 = ::hx::IsNotNull( this->gf );
            			}
            			else {
HXLINE(2866)				_hx_tmp12 = false;
            			}
HXDLIN(2866)			if (_hx_tmp12) {
HXLINE(2866)				_hx_tmp11 = this->gf->animOffsets->exists(HX_("sad",16,98,57,00));
            			}
            			else {
HXLINE(2866)				_hx_tmp11 = false;
            			}
HXDLIN(2866)			if (_hx_tmp11) {
HXLINE(2868)				this->gf->playAnim(HX_("sad",16,98,57,00),null(),null(),null());
HXLINE(2869)				this->gf->specialAnim = true;
            			}
            		}
HXLINE(2872)		this->vocals->set_volume(( (Float)(0) ));
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,noteMissCommon,(void))

void PlayState_obj::opponentNoteHit( ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2876_opponentNoteHit)
HXLINE(2877)		int result = this->notes->members->indexOf(note,null());
HXDLIN(2877)		 ::Dynamic result1 = this->callOnLuas(HX_("opponentNoteHitPre",1f,19,81,be),::cpp::VirtualArray_obj::__new(4)->init(0,result)->init(1,::Math_obj::abs(( (Float)(note->noteData) )))->init(2,note->noteType)->init(3,note->isSustainNote),null(),null(),null());
HXLINE(2878)		bool _hx_tmp;
HXDLIN(2878)		bool _hx_tmp1;
HXDLIN(2878)		if (::hx::IsNotEq( result1,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(2878)			_hx_tmp1 = ::hx::IsNotEq( result1,::psychlua::LuaUtils_obj::Function_StopHScript );
            		}
            		else {
HXLINE(2878)			_hx_tmp1 = false;
            		}
HXDLIN(2878)		if (_hx_tmp1) {
HXLINE(2878)			_hx_tmp = ::hx::IsNotEq( result1,::psychlua::LuaUtils_obj::Function_StopAll );
            		}
            		else {
HXLINE(2878)			_hx_tmp = false;
            		}
HXDLIN(2878)		if (_hx_tmp) {
HXLINE(2878)			this->callOnHScript(HX_("opponentNoteHitPre",1f,19,81,be),::cpp::VirtualArray_obj::__new(1)->init(0,note),null(),null(),null());
            		}
HXLINE(2880)		if ((this->songName != HX_("tutorial",9e,8f,b5,82))) {
HXLINE(2881)			this->camZooming = true;
            		}
HXLINE(2883)		bool _hx_tmp2;
HXDLIN(2883)		if ((note->noteType == HX_("Hey!",e5,69,e4,2f))) {
HXLINE(2883)			_hx_tmp2 = this->dad->animOffsets->exists(HX_("hey",dc,42,4f,00));
            		}
            		else {
HXLINE(2883)			_hx_tmp2 = false;
            		}
HXDLIN(2883)		if (_hx_tmp2) {
HXLINE(2884)			this->dad->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
HXLINE(2885)			this->dad->specialAnim = true;
HXLINE(2886)			this->dad->heyTimer = ((Float)0.6);
            		}
            		else {
HXLINE(2887)			if (!(note->noAnimation)) {
HXLINE(2888)				::String altAnim = note->animSuffix;
HXLINE(2890)				if (::hx::IsNotNull(  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection) )) {
HXLINE(2891)					bool _hx_tmp3;
HXDLIN(2891)					if (( (bool)( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) )) {
HXLINE(2891)						_hx_tmp3 = !(( (bool)( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic)) ));
            					}
            					else {
HXLINE(2891)						_hx_tmp3 = false;
            					}
HXDLIN(2891)					if (_hx_tmp3) {
HXLINE(2892)						altAnim = HX_("-alt",1c,93,08,1e);
            					}
            				}
HXLINE(2894)				 ::objects::Character _hx_char = this->dad;
HXLINE(2895)				::String animToPlay = (this->singAnimations->__get(::Std_obj::_hx_int(::Math_obj::abs(::Math_obj::min(( (Float)((this->singAnimations->length - 1)) ),( (Float)(note->noteData) ))))) + altAnim);
HXLINE(2896)				if (note->gfNote) {
HXLINE(2896)					_hx_char = this->gf;
            				}
HXLINE(2898)				if (::hx::IsNotNull( _hx_char )) {
HXLINE(2900)					_hx_char->playAnim(animToPlay,true,null(),null());
HXLINE(2901)					_hx_char->holdTimer = ( (Float)(0) );
            				}
            			}
            		}
HXLINE(2905)		if ((this->opponentVocals->_length <= 0)) {
HXLINE(2905)			this->vocals->set_volume(( (Float)(1) ));
            		}
HXLINE(2906)		int _hx_tmp4 = ::Std_obj::_hx_int(::Math_obj::abs(( (Float)(note->noteData) )));
HXDLIN(2906)		this->strumPlayAnim(true,_hx_tmp4,(((::backend::Conductor_obj::stepCrochet * ((Float)1.25)) / ( (Float)(1000) )) / this->playbackRate));
HXLINE(2907)		note->hitByOpponent = true;
HXLINE(2909)		int result2 = this->notes->members->indexOf(note,null());
HXDLIN(2909)		 ::Dynamic result3 = this->callOnLuas(HX_("opponentNoteHit",64,75,4c,b1),::cpp::VirtualArray_obj::__new(4)->init(0,result2)->init(1,::Math_obj::abs(( (Float)(note->noteData) )))->init(2,note->noteType)->init(3,note->isSustainNote),null(),null(),null());
HXLINE(2910)		bool _hx_tmp5;
HXDLIN(2910)		bool _hx_tmp6;
HXDLIN(2910)		if (::hx::IsNotEq( result3,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(2910)			_hx_tmp6 = ::hx::IsNotEq( result3,::psychlua::LuaUtils_obj::Function_StopHScript );
            		}
            		else {
HXLINE(2910)			_hx_tmp6 = false;
            		}
HXDLIN(2910)		if (_hx_tmp6) {
HXLINE(2910)			_hx_tmp5 = ::hx::IsNotEq( result3,::psychlua::LuaUtils_obj::Function_StopAll );
            		}
            		else {
HXLINE(2910)			_hx_tmp5 = false;
            		}
HXDLIN(2910)		if (_hx_tmp5) {
HXLINE(2910)			this->callOnHScript(HX_("opponentNoteHit",64,75,4c,b1),::cpp::VirtualArray_obj::__new(1)->init(0,note),null(),null(),null());
            		}
HXLINE(2912)		if (!(note->isSustainNote)) {
HXLINE(2912)			this->invalidateNote(note);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,opponentNoteHit,(void))

void PlayState_obj::goodNoteHit( ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2916_goodNoteHit)
HXLINE(2917)		if (note->wasGoodHit) {
HXLINE(2917)			return;
            		}
HXLINE(2918)		bool _hx_tmp;
HXDLIN(2918)		if (this->cpuControlled) {
HXLINE(2918)			_hx_tmp = note->ignoreNote;
            		}
            		else {
HXLINE(2918)			_hx_tmp = false;
            		}
HXDLIN(2918)		if (_hx_tmp) {
HXLINE(2918)			return;
            		}
HXLINE(2920)		bool isSus = note->isSustainNote;
HXLINE(2921)		int leData = ::Math_obj::round(::Math_obj::abs(( (Float)(note->noteData) )));
HXLINE(2922)		::String leType = note->noteType;
HXLINE(2924)		 ::Dynamic result = this->callOnLuas(HX_("goodNoteHitPre",bf,bc,f4,56),::cpp::VirtualArray_obj::__new(4)->init(0,this->notes->members->indexOf(note,null()))->init(1,leData)->init(2,leType)->init(3,isSus),null(),null(),null());
HXLINE(2925)		bool _hx_tmp1;
HXDLIN(2925)		bool _hx_tmp2;
HXDLIN(2925)		if (::hx::IsNotEq( result,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(2925)			_hx_tmp2 = ::hx::IsNotEq( result,::psychlua::LuaUtils_obj::Function_StopHScript );
            		}
            		else {
HXLINE(2925)			_hx_tmp2 = false;
            		}
HXDLIN(2925)		if (_hx_tmp2) {
HXLINE(2925)			_hx_tmp1 = ::hx::IsNotEq( result,::psychlua::LuaUtils_obj::Function_StopAll );
            		}
            		else {
HXLINE(2925)			_hx_tmp1 = false;
            		}
HXDLIN(2925)		if (_hx_tmp1) {
HXLINE(2925)			this->callOnHScript(HX_("goodNoteHitPre",bf,bc,f4,56),::cpp::VirtualArray_obj::__new(1)->init(0,note),null(),null(),null());
            		}
HXLINE(2927)		note->wasGoodHit = true;
HXLINE(2929)		bool _hx_tmp3;
HXDLIN(2929)		if ((::backend::ClientPrefs_obj::data->hitsoundVolume > 0)) {
HXLINE(2929)			_hx_tmp3 = !(note->hitsoundDisabled);
            		}
            		else {
HXLINE(2929)			_hx_tmp3 = false;
            		}
HXDLIN(2929)		if (_hx_tmp3) {
HXLINE(2930)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp4 = ::flixel::FlxG_obj::sound;
HXDLIN(2930)			 ::openfl::media::Sound _hx_tmp5 = ::backend::Paths_obj::sound(note->hitsound,null());
HXDLIN(2930)			_hx_tmp4->play(_hx_tmp5,::backend::ClientPrefs_obj::data->hitsoundVolume,null(),null(),null(),null());
            		}
HXLINE(2932)		if (note->hitCausesMiss) {
HXLINE(2933)			if (!(note->noMissAnimation)) {
HXLINE(2934)				if ((note->noteType == HX_("Hurt Note",a3,41,9e,fe))) {
HXLINE(2936)					if (this->boyfriend->animOffsets->exists(HX_("hurt",0f,5c,17,45))) {
HXLINE(2937)						this->boyfriend->playAnim(HX_("hurt",0f,5c,17,45),true,null(),null());
HXLINE(2938)						this->boyfriend->specialAnim = true;
            					}
            				}
            			}
HXLINE(2943)			this->noteMiss(note);
HXLINE(2944)			bool _hx_tmp6;
HXDLIN(2944)			if (!(( (bool)(note->noteSplashData->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) ))) {
HXLINE(2944)				_hx_tmp6 = !(note->isSustainNote);
            			}
            			else {
HXLINE(2944)				_hx_tmp6 = false;
            			}
HXDLIN(2944)			if (_hx_tmp6) {
HXLINE(2944)				this->spawnNoteSplashOnNote(note);
            			}
HXLINE(2945)			if (!(note->isSustainNote)) {
HXLINE(2945)				this->invalidateNote(note);
            			}
HXLINE(2946)			return;
            		}
HXLINE(2949)		if (!(note->noAnimation)) {
HXLINE(2950)			::String animToPlay = this->singAnimations->__get(::Std_obj::_hx_int(::Math_obj::abs(::Math_obj::min(( (Float)((this->singAnimations->length - 1)) ),( (Float)(note->noteData) )))));
HXLINE(2952)			 ::objects::Character _hx_char = this->boyfriend;
HXLINE(2953)			::String animCheck = HX_("hey",dc,42,4f,00);
HXLINE(2954)			if (note->gfNote) {
HXLINE(2956)				_hx_char = this->gf;
HXLINE(2957)				animCheck = HX_("cheer",8d,9a,b6,45);
            			}
HXLINE(2960)			if (::hx::IsNotNull( _hx_char )) {
HXLINE(2962)				_hx_char->playAnim((animToPlay + note->animSuffix),true,null(),null());
HXLINE(2963)				_hx_char->holdTimer = ( (Float)(0) );
HXLINE(2965)				if ((note->noteType == HX_("Hey!",e5,69,e4,2f))) {
HXLINE(2966)					if (_hx_char->animOffsets->exists(animCheck)) {
HXLINE(2967)						_hx_char->playAnim(animCheck,true,null(),null());
HXLINE(2968)						_hx_char->specialAnim = true;
HXLINE(2969)						_hx_char->heyTimer = ((Float)0.6);
            					}
            				}
            			}
            		}
HXLINE(2975)		if (!(this->cpuControlled)) {
HXLINE(2977)			 ::objects::StrumNote spr = Dynamic( this->playerStrums->members->__get(note->noteData)).StaticCast<  ::objects::StrumNote >();
HXLINE(2978)			if (::hx::IsNotNull( spr )) {
HXLINE(2978)				spr->playAnim(HX_("confirm",00,9d,39,10),true);
            			}
            		}
            		else {
HXLINE(2980)			int _hx_tmp7 = ::Std_obj::_hx_int(::Math_obj::abs(( (Float)(note->noteData) )));
HXDLIN(2980)			this->strumPlayAnim(false,_hx_tmp7,(((::backend::Conductor_obj::stepCrochet * ((Float)1.25)) / ( (Float)(1000) )) / this->playbackRate));
            		}
HXLINE(2981)		this->vocals->set_volume(( (Float)(1) ));
HXLINE(2983)		if (!(note->isSustainNote)) {
HXLINE(2985)			this->combo++;
HXLINE(2986)			if ((this->combo > 9999)) {
HXLINE(2986)				this->combo = 9999;
            			}
HXLINE(2987)			this->popUpScore(note);
            		}
HXLINE(2989)		bool gainHealth = true;
HXLINE(2990)		bool _hx_tmp8;
HXDLIN(2990)		if (this->guitarHeroSustains) {
HXLINE(2990)			_hx_tmp8 = note->isSustainNote;
            		}
            		else {
HXLINE(2990)			_hx_tmp8 = false;
            		}
HXDLIN(2990)		if (_hx_tmp8) {
HXLINE(2990)			gainHealth = false;
            		}
HXLINE(2991)		if (gainHealth) {
HXLINE(2991)			this->set_health((this->health + (note->hitHealth * this->healthGain)));
            		}
HXLINE(2993)		 ::Dynamic result1 = this->callOnLuas(HX_("goodNoteHit",c4,4d,c4,22),::cpp::VirtualArray_obj::__new(4)->init(0,this->notes->members->indexOf(note,null()))->init(1,leData)->init(2,leType)->init(3,isSus),null(),null(),null());
HXLINE(2994)		bool _hx_tmp9;
HXDLIN(2994)		bool _hx_tmp10;
HXDLIN(2994)		if (::hx::IsNotEq( result1,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(2994)			_hx_tmp10 = ::hx::IsNotEq( result1,::psychlua::LuaUtils_obj::Function_StopHScript );
            		}
            		else {
HXLINE(2994)			_hx_tmp10 = false;
            		}
HXDLIN(2994)		if (_hx_tmp10) {
HXLINE(2994)			_hx_tmp9 = ::hx::IsNotEq( result1,::psychlua::LuaUtils_obj::Function_StopAll );
            		}
            		else {
HXLINE(2994)			_hx_tmp9 = false;
            		}
HXDLIN(2994)		if (_hx_tmp9) {
HXLINE(2994)			this->callOnHScript(HX_("goodNoteHit",c4,4d,c4,22),::cpp::VirtualArray_obj::__new(1)->init(0,note),null(),null(),null());
            		}
HXLINE(2996)		if (!(note->isSustainNote)) {
HXLINE(2996)			this->invalidateNote(note);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,goodNoteHit,(void))

void PlayState_obj::invalidateNote( ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2999_invalidateNote)
HXLINE(3000)		note->kill();
HXLINE(3001)		this->notes->remove(note,true).StaticCast<  ::objects::Note >();
HXLINE(3002)		note->destroy();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,invalidateNote,(void))

void PlayState_obj::spawnNoteSplashOnNote( ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3006_spawnNoteSplashOnNote)
HXDLIN(3006)		if (::hx::IsNotNull( note )) {
HXLINE(3007)			 ::objects::StrumNote strum = Dynamic( this->playerStrums->members->__get(note->noteData)).StaticCast<  ::objects::StrumNote >();
HXLINE(3008)			if (::hx::IsNotNull( strum )) {
HXLINE(3009)				this->spawnNoteSplash(strum->x,strum->y,note->noteData,note);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,spawnNoteSplashOnNote,(void))

void PlayState_obj::spawnNoteSplash(Float x,Float y,int data, ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3013_spawnNoteSplash)
HXLINE(3014)		 ::objects::NoteSplash splash = this->grpNoteSplashes->recycle(::hx::ClassOf< ::objects::NoteSplash >(),null(),null(),null()).StaticCast<  ::objects::NoteSplash >();
HXLINE(3015)		splash->setupNoteSplash(x,y,data,note);
HXLINE(3016)		this->grpNoteSplashes->add(splash).StaticCast<  ::objects::NoteSplash >();
            	}


HX_DEFINE_DYNAMIC_FUNC4(PlayState_obj,spawnNoteSplash,(void))

void PlayState_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3019_destroy)
HXLINE(3021)		{
HXLINE(3021)			int _g = 0;
HXDLIN(3021)			::Array< ::Dynamic> _g1 = this->luaArray;
HXDLIN(3021)			while((_g < _g1->length)){
HXLINE(3021)				 ::psychlua::FunkinLua lua = _g1->__get(_g).StaticCast<  ::psychlua::FunkinLua >();
HXDLIN(3021)				_g = (_g + 1);
HXLINE(3023)				lua->call(HX_("onDestroy",9b,e5,30,fc),::cpp::VirtualArray_obj::__new(0));
HXLINE(3024)				lua->stop();
            			}
            		}
HXLINE(3026)		this->luaArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3027)		::psychlua::FunkinLua_obj::customFunctions->clear();
HXLINE(3031)		{
HXLINE(3031)			int _g2 = 0;
HXDLIN(3031)			::Array< ::Dynamic> _g3 = this->hscriptArray;
HXDLIN(3031)			while((_g2 < _g3->length)){
HXLINE(3031)				 ::psychlua::HScript script = _g3->__get(_g2).StaticCast<  ::psychlua::HScript >();
HXDLIN(3031)				_g2 = (_g2 + 1);
HXLINE(3032)				if (::hx::IsNotNull( script )) {
HXLINE(3034)					script->call(HX_("onDestroy",9b,e5,30,fc),null());
HXLINE(3035)					script->destroy();
            				}
            			}
            		}
HXLINE(3038)		while((this->hscriptArray->length > 0)){
HXLINE(3039)			this->hscriptArray->pop().StaticCast<  ::psychlua::HScript >();
            		}
HXLINE(3042)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->onKeyPress_dyn(),null());
HXLINE(3043)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->onKeyRelease_dyn(),null());
HXLINE(3044)		::flixel::FlxG_obj::animationTimeScale = ( (Float)(1) );
HXLINE(3045)		::flixel::FlxG_obj::sound->music->set_pitch(( (Float)(1) ));
HXLINE(3046)		::objects::Note_obj::globalRgbShaders = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3047)		::backend::NoteTypesConfig_obj::clearNoteTypesData();
HXLINE(3048)		::states::PlayState_obj::instance = null();
HXLINE(3049)		this->super::destroy();
            	}


void PlayState_obj::stepHit(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3054_stepHit)
HXLINE(3055)		bool _hx_tmp;
HXDLIN(3055)		if (( (bool)(::states::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(3055)			_hx_tmp = (::flixel::FlxG_obj::sound->music->_time >= -(::backend::ClientPrefs_obj::data->noteOffset));
            		}
            		else {
HXLINE(3055)			_hx_tmp = false;
            		}
HXDLIN(3055)		if (_hx_tmp) {
HXLINE(3057)			Float timeSub = (::backend::Conductor_obj::songPosition - ::backend::Conductor_obj::offset);
HXLINE(3058)			Float syncTime = (( (Float)(20) ) * this->playbackRate);
HXLINE(3059)			bool _hx_tmp1;
HXDLIN(3059)			bool _hx_tmp2;
HXDLIN(3059)			if (!((::Math_obj::abs((::flixel::FlxG_obj::sound->music->_time - timeSub)) > syncTime))) {
HXLINE(3060)				if ((this->vocals->_length > 0)) {
HXLINE(3059)					_hx_tmp2 = (::Math_obj::abs((this->vocals->_time - timeSub)) > syncTime);
            				}
            				else {
HXLINE(3059)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE(3059)				_hx_tmp2 = true;
            			}
HXDLIN(3059)			if (!(_hx_tmp2)) {
HXLINE(3061)				if ((this->opponentVocals->_length > 0)) {
HXLINE(3059)					_hx_tmp1 = (::Math_obj::abs((this->opponentVocals->_time - timeSub)) > syncTime);
            				}
            				else {
HXLINE(3059)					_hx_tmp1 = false;
            				}
            			}
            			else {
HXLINE(3059)				_hx_tmp1 = true;
            			}
HXDLIN(3059)			if (_hx_tmp1) {
HXLINE(3063)				this->resyncVocals();
            			}
            		}
HXLINE(3067)		this->super::stepHit();
HXLINE(3069)		if ((this->curStep == this->lastStepHit)) {
HXLINE(3070)			return;
            		}
HXLINE(3073)		this->lastStepHit = this->curStep;
HXLINE(3074)		this->setOnScripts(HX_("curStep",ec,58,71,b7),this->curStep,null());
HXLINE(3075)		this->callOnScripts(HX_("onStepHit",08,67,ec,58),null(),null(),null(),null());
            	}


void PlayState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3081_beatHit)
HXLINE(3082)		if ((this->lastBeatHit >= this->curBeat)) {
HXLINE(3084)			return;
            		}
HXLINE(3087)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,int,a1, ::Dynamic,_g) HXARGC(2)
            			int _hx_run( ::objects::Note a2, ::objects::Note a3){
            				HX_STACKFRAME(&_hx_pos_801e532e222627de_3088_beatHit)
HXLINE(3088)				return ( (int)(_g(a1,a2,a3)) );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(3088)			int order;
HXDLIN(3088)			if (::backend::ClientPrefs_obj::data->downScroll) {
HXLINE(3088)				order = -1;
            			}
            			else {
HXLINE(3088)				order = 1;
            			}
HXDLIN(3088)			 ::Dynamic _g = ::flixel::util::FlxSort_obj::byY_dyn();
HXDLIN(3088)			int a1 = order;
HXDLIN(3088)			 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(a1,_g));
HXDLIN(3088)			this->notes->members->sort(_hx_tmp);
            		}
HXLINE(3090)		{
HXLINE(3090)			 ::flixel::math::FlxBasePoint this1 = this->iconP1->scale;
HXDLIN(3090)			this1->set_x(((Float)1.2));
HXDLIN(3090)			this1->set_y(((Float)1.2));
            		}
HXLINE(3091)		{
HXLINE(3091)			 ::flixel::math::FlxBasePoint this2 = this->iconP2->scale;
HXDLIN(3091)			this2->set_x(((Float)1.2));
HXDLIN(3091)			this2->set_y(((Float)1.2));
            		}
HXLINE(3093)		this->iconP1->updateHitbox();
HXLINE(3094)		this->iconP2->updateHitbox();
HXLINE(3096)		this->characterBopper(this->curBeat);
HXLINE(3098)		this->super::beatHit();
HXLINE(3099)		this->lastBeatHit = this->curBeat;
HXLINE(3101)		this->setOnScripts(HX_("curBeat",16,53,29,ac),this->curBeat,null());
HXLINE(3102)		this->callOnScripts(HX_("onBeatHit",1e,a3,af,4b),null(),null(),null(),null());
            	}


void PlayState_obj::characterBopper(int beat){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3106_characterBopper)
HXLINE(3107)		bool _hx_tmp;
HXDLIN(3107)		bool _hx_tmp1;
HXDLIN(3107)		bool _hx_tmp2;
HXDLIN(3107)		if (::hx::IsNotNull( this->gf )) {
HXLINE(3107)			_hx_tmp2 = (::hx::Mod(beat,::Math_obj::round(( (Float)((this->gfSpeed * this->gf->danceEveryNumBeats)) ))) == 0);
            		}
            		else {
HXLINE(3107)			_hx_tmp2 = false;
            		}
HXDLIN(3107)		if (_hx_tmp2) {
HXLINE(3107)			 ::objects::Character _this = this->gf;
HXDLIN(3107)			::String name = HX_("",00,00,00,00);
HXDLIN(3107)			bool _hx_tmp3;
HXDLIN(3107)			if (!(_this->isAnimateAtlas)) {
HXLINE(3107)				_hx_tmp3 = ::hx::IsNull( _this->animation->_curAnim );
            			}
            			else {
HXLINE(3107)				_hx_tmp3 = ::hx::IsNull( _this->atlas->anim->get_curSymbol() );
            			}
HXDLIN(3107)			if (!(_hx_tmp3)) {
HXLINE(3107)				if (!(_this->isAnimateAtlas)) {
HXLINE(3107)					name = _this->animation->_curAnim->name;
            				}
            				else {
HXLINE(3107)					name = _this->atlas->anim->lastPlayedAnim;
            				}
            			}
HXDLIN(3107)			::String _hx_tmp4;
HXDLIN(3107)			if (::hx::IsNotNull( name )) {
HXLINE(3107)				_hx_tmp4 = name;
            			}
            			else {
HXLINE(3107)				_hx_tmp4 = HX_("",00,00,00,00);
            			}
HXDLIN(3107)			_hx_tmp1 = !(::StringTools_obj::startsWith(_hx_tmp4,HX_("sing",4f,96,53,4c)));
            		}
            		else {
HXLINE(3107)			_hx_tmp1 = false;
            		}
HXDLIN(3107)		if (_hx_tmp1) {
HXLINE(3107)			_hx_tmp = !(this->gf->stunned);
            		}
            		else {
HXLINE(3107)			_hx_tmp = false;
            		}
HXDLIN(3107)		if (_hx_tmp) {
HXLINE(3108)			this->gf->dance();
            		}
HXLINE(3109)		bool _hx_tmp5;
HXDLIN(3109)		bool _hx_tmp6;
HXDLIN(3109)		bool _hx_tmp7;
HXDLIN(3109)		if (::hx::IsNotNull( this->boyfriend )) {
HXLINE(3109)			_hx_tmp7 = (::hx::Mod(beat,this->boyfriend->danceEveryNumBeats) == 0);
            		}
            		else {
HXLINE(3109)			_hx_tmp7 = false;
            		}
HXDLIN(3109)		if (_hx_tmp7) {
HXLINE(3109)			 ::objects::Character _this1 = this->boyfriend;
HXDLIN(3109)			::String name1 = HX_("",00,00,00,00);
HXDLIN(3109)			bool _hx_tmp8;
HXDLIN(3109)			if (!(_this1->isAnimateAtlas)) {
HXLINE(3109)				_hx_tmp8 = ::hx::IsNull( _this1->animation->_curAnim );
            			}
            			else {
HXLINE(3109)				_hx_tmp8 = ::hx::IsNull( _this1->atlas->anim->get_curSymbol() );
            			}
HXDLIN(3109)			if (!(_hx_tmp8)) {
HXLINE(3109)				if (!(_this1->isAnimateAtlas)) {
HXLINE(3109)					name1 = _this1->animation->_curAnim->name;
            				}
            				else {
HXLINE(3109)					name1 = _this1->atlas->anim->lastPlayedAnim;
            				}
            			}
HXDLIN(3109)			::String _hx_tmp9;
HXDLIN(3109)			if (::hx::IsNotNull( name1 )) {
HXLINE(3109)				_hx_tmp9 = name1;
            			}
            			else {
HXLINE(3109)				_hx_tmp9 = HX_("",00,00,00,00);
            			}
HXDLIN(3109)			_hx_tmp6 = !(::StringTools_obj::startsWith(_hx_tmp9,HX_("sing",4f,96,53,4c)));
            		}
            		else {
HXLINE(3109)			_hx_tmp6 = false;
            		}
HXDLIN(3109)		if (_hx_tmp6) {
HXLINE(3109)			_hx_tmp5 = !(this->boyfriend->stunned);
            		}
            		else {
HXLINE(3109)			_hx_tmp5 = false;
            		}
HXDLIN(3109)		if (_hx_tmp5) {
HXLINE(3110)			this->boyfriend->dance();
            		}
HXLINE(3111)		bool _hx_tmp10;
HXDLIN(3111)		bool _hx_tmp11;
HXDLIN(3111)		bool _hx_tmp12;
HXDLIN(3111)		if (::hx::IsNotNull( this->dad )) {
HXLINE(3111)			_hx_tmp12 = (::hx::Mod(beat,this->dad->danceEveryNumBeats) == 0);
            		}
            		else {
HXLINE(3111)			_hx_tmp12 = false;
            		}
HXDLIN(3111)		if (_hx_tmp12) {
HXLINE(3111)			 ::objects::Character _this2 = this->dad;
HXDLIN(3111)			::String name2 = HX_("",00,00,00,00);
HXDLIN(3111)			bool _hx_tmp13;
HXDLIN(3111)			if (!(_this2->isAnimateAtlas)) {
HXLINE(3111)				_hx_tmp13 = ::hx::IsNull( _this2->animation->_curAnim );
            			}
            			else {
HXLINE(3111)				_hx_tmp13 = ::hx::IsNull( _this2->atlas->anim->get_curSymbol() );
            			}
HXDLIN(3111)			if (!(_hx_tmp13)) {
HXLINE(3111)				if (!(_this2->isAnimateAtlas)) {
HXLINE(3111)					name2 = _this2->animation->_curAnim->name;
            				}
            				else {
HXLINE(3111)					name2 = _this2->atlas->anim->lastPlayedAnim;
            				}
            			}
HXDLIN(3111)			::String _hx_tmp14;
HXDLIN(3111)			if (::hx::IsNotNull( name2 )) {
HXLINE(3111)				_hx_tmp14 = name2;
            			}
            			else {
HXLINE(3111)				_hx_tmp14 = HX_("",00,00,00,00);
            			}
HXDLIN(3111)			_hx_tmp11 = !(::StringTools_obj::startsWith(_hx_tmp14,HX_("sing",4f,96,53,4c)));
            		}
            		else {
HXLINE(3111)			_hx_tmp11 = false;
            		}
HXDLIN(3111)		if (_hx_tmp11) {
HXLINE(3111)			_hx_tmp10 = !(this->dad->stunned);
            		}
            		else {
HXLINE(3111)			_hx_tmp10 = false;
            		}
HXDLIN(3111)		if (_hx_tmp10) {
HXLINE(3112)			this->dad->dance();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,characterBopper,(void))

void PlayState_obj::playerDance(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3116_playerDance)
HXLINE(3117)		 ::objects::Character _this = this->boyfriend;
HXDLIN(3117)		::String name = HX_("",00,00,00,00);
HXDLIN(3117)		bool _hx_tmp;
HXDLIN(3117)		if (!(_this->isAnimateAtlas)) {
HXLINE(3117)			_hx_tmp = ::hx::IsNull( _this->animation->_curAnim );
            		}
            		else {
HXLINE(3117)			_hx_tmp = ::hx::IsNull( _this->atlas->anim->get_curSymbol() );
            		}
HXDLIN(3117)		if (!(_hx_tmp)) {
HXLINE(3117)			if (!(_this->isAnimateAtlas)) {
HXLINE(3117)				name = _this->animation->_curAnim->name;
            			}
            			else {
HXLINE(3117)				name = _this->atlas->anim->lastPlayedAnim;
            			}
            		}
HXDLIN(3117)		::String anim;
HXDLIN(3117)		if (::hx::IsNotNull( name )) {
HXLINE(3117)			anim = name;
            		}
            		else {
HXLINE(3117)			anim = HX_("",00,00,00,00);
            		}
HXLINE(3118)		bool _hx_tmp1;
HXDLIN(3118)		bool _hx_tmp2;
HXDLIN(3118)		if ((this->boyfriend->holdTimer > ((::backend::Conductor_obj::stepCrochet * (((Float)0.0011) / ::flixel::FlxG_obj::sound->music->_pitch)) * this->boyfriend->singDuration))) {
HXLINE(3118)			_hx_tmp2 = ::StringTools_obj::startsWith(anim,HX_("sing",4f,96,53,4c));
            		}
            		else {
HXLINE(3118)			_hx_tmp2 = false;
            		}
HXDLIN(3118)		if (_hx_tmp2) {
HXLINE(3118)			_hx_tmp1 = !(::StringTools_obj::endsWith(anim,HX_("miss",fc,52,5c,48)));
            		}
            		else {
HXLINE(3118)			_hx_tmp1 = false;
            		}
HXDLIN(3118)		if (_hx_tmp1) {
HXLINE(3119)			this->boyfriend->dance();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,playerDance,(void))

void PlayState_obj::sectionHit(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3123_sectionHit)
HXLINE(3124)		if (::hx::IsNotNull(  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection) )) {
HXLINE(3126)			bool _hx_tmp;
HXDLIN(3126)			bool _hx_tmp1;
HXDLIN(3126)			if (this->generatedMusic) {
HXLINE(3126)				_hx_tmp1 = !(this->endingSong);
            			}
            			else {
HXLINE(3126)				_hx_tmp1 = false;
            			}
HXDLIN(3126)			if (_hx_tmp1) {
HXLINE(3126)				_hx_tmp = !(this->isCameraOnForcedPos);
            			}
            			else {
HXLINE(3126)				_hx_tmp = false;
            			}
HXDLIN(3126)			if (_hx_tmp) {
HXLINE(3127)				this->moveCameraSection(null());
            			}
HXLINE(3129)			bool _hx_tmp2;
HXDLIN(3129)			bool _hx_tmp3;
HXDLIN(3129)			if (this->camZooming) {
HXLINE(3129)				_hx_tmp3 = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            			}
            			else {
HXLINE(3129)				_hx_tmp3 = false;
            			}
HXDLIN(3129)			if (_hx_tmp3) {
HXLINE(3129)				_hx_tmp2 = ::backend::ClientPrefs_obj::data->camZooms;
            			}
            			else {
HXLINE(3129)				_hx_tmp2 = false;
            			}
HXDLIN(3129)			if (_hx_tmp2) {
HXLINE(3131)				 ::flixel::FlxCamera fh = ::flixel::FlxG_obj::camera;
HXDLIN(3131)				fh->set_zoom((fh->zoom + (((Float)0.015) * this->camZoomingMult)));
HXLINE(3132)				 ::flixel::FlxCamera fh1 = this->camHUD;
HXDLIN(3132)				fh1->set_zoom((fh1->zoom + (((Float)0.03) * this->camZoomingMult)));
            			}
HXLINE(3135)			if (( (bool)( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE(3137)				::backend::Conductor_obj::set_bpm(( (Float)( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE(3138)				this->setOnScripts(HX_("curBpm",3f,61,c3,3e),::backend::Conductor_obj::bpm,null());
HXLINE(3139)				this->setOnScripts(HX_("crochet",34,d5,b5,d4),::backend::Conductor_obj::crochet,null());
HXLINE(3140)				this->setOnScripts(HX_("stepCrochet",48,d7,ff,e6),::backend::Conductor_obj::stepCrochet,null());
            			}
HXLINE(3142)			this->setOnScripts(HX_("mustHitSection",3b,5f,87,62), ::Dynamic( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)),null());
HXLINE(3143)			this->setOnScripts(HX_("altAnim",da,f3,f2,e5), ::Dynamic( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)),null());
HXLINE(3144)			this->setOnScripts(HX_("gfSection",86,e5,63,d4), ::Dynamic( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic)),null());
            		}
HXLINE(3146)		this->super::sectionHit();
HXLINE(3148)		this->setOnScripts(HX_("curSection",45,58,c1,68),this->curSection,null());
HXLINE(3149)		this->callOnScripts(HX_("onSectionHit",6d,97,11,97),null(),null(),null(),null());
            	}


bool PlayState_obj::startLuasNamed(::String luaFile){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_3154_startLuasNamed)
HXLINE(3156)		::String luaToLoad = ::backend::Paths_obj::modFolders(luaFile);
HXLINE(3157)		if (!(::sys::FileSystem_obj::exists(luaToLoad))) {
HXLINE(3158)			::String file = luaFile;
HXDLIN(3158)			if (::hx::IsNull( file )) {
HXLINE(3158)				file = HX_("",00,00,00,00);
            			}
HXDLIN(3158)			luaToLoad = (HX_("assets/shared/",1e,69,1e,47) + file);
            		}
HXLINE(3160)		if (::sys::FileSystem_obj::exists(luaToLoad)) {
HXLINE(3166)			{
HXLINE(3166)				int _g = 0;
HXDLIN(3166)				::Array< ::Dynamic> _g1 = this->luaArray;
HXDLIN(3166)				while((_g < _g1->length)){
HXLINE(3166)					 ::psychlua::FunkinLua script = _g1->__get(_g).StaticCast<  ::psychlua::FunkinLua >();
HXDLIN(3166)					_g = (_g + 1);
HXLINE(3167)					if ((script->scriptName == luaToLoad)) {
HXLINE(3167)						return false;
            					}
            				}
            			}
HXLINE(3169)			 ::psychlua::FunkinLua_obj::__alloc( HX_CTX ,luaToLoad);
HXLINE(3170)			return true;
            		}
HXLINE(3172)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,startLuasNamed,return )

bool PlayState_obj::startHScriptsNamed(::String scriptFile){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3178_startHScriptsNamed)
HXLINE(3180)		::String scriptToLoad = ::backend::Paths_obj::modFolders(scriptFile);
HXLINE(3181)		if (!(::sys::FileSystem_obj::exists(scriptToLoad))) {
HXLINE(3182)			::String file = scriptFile;
HXDLIN(3182)			if (::hx::IsNull( file )) {
HXLINE(3182)				file = HX_("",00,00,00,00);
            			}
HXDLIN(3182)			scriptToLoad = (HX_("assets/shared/",1e,69,1e,47) + file);
            		}
HXLINE(3187)		if (::sys::FileSystem_obj::exists(scriptToLoad)) {
HXLINE(3189)			if (::tea::SScript_obj::global->exists(scriptToLoad)) {
HXLINE(3189)				return false;
            			}
HXLINE(3191)			this->initHScript(scriptToLoad);
HXLINE(3192)			return true;
            		}
HXLINE(3194)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,startHScriptsNamed,return )

void PlayState_obj::initHScript(::String file){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_3199_initHScript)
HXDLIN(3199)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(3201)			 ::psychlua::HScript newScript =  ::psychlua::HScript_obj::__alloc( HX_CTX ,null(),file,null());
HXLINE(3202)			if (::hx::IsNotNull( newScript->parsingException )) {
HXLINE(3204)				this->addTextToDebug((HX_("ERROR ON LOADING: ",39,25,50,9a) + ::tea::backend::_SScriptException::SScriptException_Impl__obj::get_message(newScript->parsingException)),-65536);
HXLINE(3205)				newScript->destroy();
HXLINE(3206)				return;
            			}
HXLINE(3209)			this->hscriptArray->push(newScript);
HXLINE(3210)			if (newScript->exists(HX_("onCreate",7b,5d,bc,5b))) {
HXLINE(3212)				 ::Dynamic callValue = newScript->call(HX_("onCreate",7b,5d,bc,5b),null());
HXLINE(3213)				if (!(( (bool)(callValue->__Field(HX_("succeeded",61,56,29,fb),::hx::paccDynamic)) ))) {
HXLINE(3215)					{
HXLINE(3215)						int _g = 0;
HXDLIN(3215)						::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(callValue->__Field(HX_("exceptions",44,35,34,1d),::hx::paccDynamic)) );
HXDLIN(3215)						while((_g < _g1->length)){
HXLINE(3215)							 ::haxe::Exception e = _g1->__get(_g).StaticCast<  ::haxe::Exception >();
HXDLIN(3215)							_g = (_g + 1);
HXLINE(3217)							if (::hx::IsNotNull( e )) {
HXLINE(3219)								int len = (::tea::backend::_SScriptException::SScriptException_Impl__obj::get_message(e).indexOf(HX_("\n",0a,00,00,00),null()) + 1);
HXLINE(3220)								if ((len <= 0)) {
HXLINE(3220)									len = ::tea::backend::_SScriptException::SScriptException_Impl__obj::get_message(e).length;
            								}
HXLINE(3221)								this->addTextToDebug((((HX_("ERROR (",b0,59,de,69) + file) + HX_(": onCreate) - ",8b,f9,7e,ee)) + ::tea::backend::_SScriptException::SScriptException_Impl__obj::get_message(e).substr(0,len)),-65536);
            							}
            						}
            					}
HXLINE(3225)					newScript->destroy();
HXLINE(3226)					this->hscriptArray->remove(newScript);
HXLINE(3227)					::haxe::Log_obj::trace(((HX_("failed to initialize tea interp!!! (",f7,4e,18,13) + file) + HX_(")",29,00,00,00)),::hx::SourceInfo(HX_("source/states/PlayState.hx",3a,21,29,28),3227,HX_("states.PlayState",31,cd,20,04),HX_("initHScript",63,6f,17,19)));
            				}
            				else {
HXLINE(3229)					::haxe::Log_obj::trace((HX_("initialized tea interp successfully: ",3d,92,7d,b8) + file),::hx::SourceInfo(HX_("source/states/PlayState.hx",3a,21,29,28),3229,HX_("states.PlayState",31,cd,20,04),HX_("initHScript",63,6f,17,19)));
            				}
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g2 = _hx_e;
HXLINE(3233)				 ::haxe::Exception e1 = ::haxe::Exception_obj::caught(_g2);
HXLINE(3234)				{
HXLINE(3235)					int len1 = (e1->get_message().indexOf(HX_("\n",0a,00,00,00),null()) + 1);
HXLINE(3236)					if ((len1 <= 0)) {
HXLINE(3236)						len1 = e1->get_message().length;
            					}
HXLINE(3237)					this->addTextToDebug((HX_("ERROR - ",cb,24,b0,38) + e1->get_message().substr(0,len1)),-65536);
HXLINE(3238)					 ::psychlua::HScript newScript1 = ::hx::TCast<  ::psychlua::HScript >::cast(( ( ::tea::SScript)(::tea::SScript_obj::global->get(file)) ));
HXLINE(3239)					if (::hx::IsNotNull( newScript1 )) {
HXLINE(3241)						newScript1->destroy();
HXLINE(3242)						this->hscriptArray->remove(newScript1);
            					}
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,initHScript,(void))

 ::Dynamic PlayState_obj::callOnScripts(::String funcToCall,::cpp::VirtualArray args,::hx::Null< bool >  __o_ignoreStops,::Array< ::String > exclusions,::cpp::VirtualArray excludeValues){
            		bool ignoreStops = __o_ignoreStops.Default(false);
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3248_callOnScripts)
HXLINE(3249)		 ::Dynamic returnVal = ::psychlua::LuaUtils_obj::Function_Continue;
HXLINE(3250)		if (::hx::IsNull( args )) {
HXLINE(3250)			args = ::cpp::VirtualArray_obj::__new(0);
            		}
HXLINE(3251)		if (::hx::IsNull( exclusions )) {
HXLINE(3251)			exclusions = ::Array_obj< ::String >::__new(0);
            		}
HXLINE(3252)		if (::hx::IsNull( excludeValues )) {
HXLINE(3252)			excludeValues = ::cpp::VirtualArray_obj::__new(1)->init(0,::psychlua::LuaUtils_obj::Function_Continue);
            		}
HXLINE(3254)		 ::Dynamic result = this->callOnLuas(funcToCall,args,ignoreStops,exclusions,excludeValues);
HXLINE(3255)		bool _hx_tmp;
HXDLIN(3255)		if (::hx::IsNotNull( result )) {
HXLINE(3255)			_hx_tmp = excludeValues->contains(result);
            		}
            		else {
HXLINE(3255)			_hx_tmp = true;
            		}
HXDLIN(3255)		if (_hx_tmp) {
HXLINE(3255)			result = this->callOnHScript(funcToCall,args,ignoreStops,exclusions,excludeValues);
            		}
HXLINE(3256)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC5(PlayState_obj,callOnScripts,return )

 ::Dynamic PlayState_obj::callOnLuas(::String funcToCall,::cpp::VirtualArray args,::hx::Null< bool >  __o_ignoreStops,::Array< ::String > exclusions,::cpp::VirtualArray excludeValues){
            		bool ignoreStops = __o_ignoreStops.Default(false);
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3259_callOnLuas)
HXLINE(3260)		 ::Dynamic returnVal = ::psychlua::LuaUtils_obj::Function_Continue;
HXLINE(3262)		if (::hx::IsNull( args )) {
HXLINE(3262)			args = ::cpp::VirtualArray_obj::__new(0);
            		}
HXLINE(3263)		if (::hx::IsNull( exclusions )) {
HXLINE(3263)			exclusions = ::Array_obj< ::String >::__new(0);
            		}
HXLINE(3264)		if (::hx::IsNull( excludeValues )) {
HXLINE(3264)			excludeValues = ::cpp::VirtualArray_obj::__new(1)->init(0,::psychlua::LuaUtils_obj::Function_Continue);
            		}
HXLINE(3266)		::Array< ::Dynamic> arr = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3267)		{
HXLINE(3267)			int _g = 0;
HXDLIN(3267)			::Array< ::Dynamic> _g1 = this->luaArray;
HXDLIN(3267)			while((_g < _g1->length)){
HXLINE(3267)				 ::psychlua::FunkinLua script = _g1->__get(_g).StaticCast<  ::psychlua::FunkinLua >();
HXDLIN(3267)				_g = (_g + 1);
HXLINE(3269)				if (script->closed) {
HXLINE(3271)					arr->push(script);
HXLINE(3272)					continue;
            				}
HXLINE(3275)				if (exclusions->contains(script->scriptName)) {
HXLINE(3276)					continue;
            				}
HXLINE(3278)				 ::Dynamic myValue = script->call(funcToCall,args);
HXLINE(3279)				bool _hx_tmp;
HXDLIN(3279)				bool _hx_tmp1;
HXDLIN(3279)				bool _hx_tmp2;
HXDLIN(3279)				if (::hx::IsNotEq( myValue,::psychlua::LuaUtils_obj::Function_StopLua )) {
HXLINE(3279)					_hx_tmp2 = ::hx::IsEq( myValue,::psychlua::LuaUtils_obj::Function_StopAll );
            				}
            				else {
HXLINE(3279)					_hx_tmp2 = true;
            				}
HXDLIN(3279)				if (_hx_tmp2) {
HXLINE(3279)					_hx_tmp1 = !(excludeValues->contains(myValue));
            				}
            				else {
HXLINE(3279)					_hx_tmp1 = false;
            				}
HXDLIN(3279)				if (_hx_tmp1) {
HXLINE(3279)					_hx_tmp = !(ignoreStops);
            				}
            				else {
HXLINE(3279)					_hx_tmp = false;
            				}
HXDLIN(3279)				if (_hx_tmp) {
HXLINE(3281)					returnVal = myValue;
HXLINE(3282)					goto _hx_goto_185;
            				}
HXLINE(3285)				bool _hx_tmp3;
HXDLIN(3285)				if (::hx::IsNotNull( myValue )) {
HXLINE(3285)					_hx_tmp3 = !(excludeValues->contains(myValue));
            				}
            				else {
HXLINE(3285)					_hx_tmp3 = false;
            				}
HXDLIN(3285)				if (_hx_tmp3) {
HXLINE(3286)					returnVal = myValue;
            				}
HXLINE(3288)				if (script->closed) {
HXLINE(3288)					arr->push(script);
            				}
            			}
            			_hx_goto_185:;
            		}
HXLINE(3291)		if ((arr->length > 0)) {
HXLINE(3292)			int _g2 = 0;
HXDLIN(3292)			while((_g2 < arr->length)){
HXLINE(3292)				 ::psychlua::FunkinLua script1 = arr->__get(_g2).StaticCast<  ::psychlua::FunkinLua >();
HXDLIN(3292)				_g2 = (_g2 + 1);
HXLINE(3293)				this->luaArray->remove(script1);
            			}
            		}
HXLINE(3295)		return returnVal;
            	}


HX_DEFINE_DYNAMIC_FUNC5(PlayState_obj,callOnLuas,return )

 ::Dynamic PlayState_obj::callOnHScript(::String funcToCall,::cpp::VirtualArray args, ::Dynamic __o_ignoreStops,::Array< ::String > exclusions,::cpp::VirtualArray excludeValues){
            		 ::Dynamic ignoreStops = __o_ignoreStops;
            		if (::hx::IsNull(__o_ignoreStops)) ignoreStops = false;
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3298_callOnHScript)
HXLINE(3299)		 ::Dynamic returnVal = ::psychlua::LuaUtils_obj::Function_Continue;
HXLINE(3302)		if (::hx::IsNull( exclusions )) {
HXLINE(3302)			exclusions = ::Array_obj< ::String >::__new();
            		}
HXLINE(3303)		if (::hx::IsNull( excludeValues )) {
HXLINE(3303)			excludeValues = ::cpp::VirtualArray_obj::__new();
            		}
HXLINE(3304)		excludeValues->push(::psychlua::LuaUtils_obj::Function_Continue);
HXLINE(3306)		int len = this->hscriptArray->length;
HXLINE(3307)		if ((len < 1)) {
HXLINE(3308)			return returnVal;
            		}
HXLINE(3309)		{
HXLINE(3309)			int _g = 0;
HXDLIN(3309)			int _g1 = len;
HXDLIN(3309)			while((_g < _g1)){
HXLINE(3309)				_g = (_g + 1);
HXDLIN(3309)				int i = (_g - 1);
HXLINE(3310)				 ::psychlua::HScript script = this->hscriptArray->__get(i).StaticCast<  ::psychlua::HScript >();
HXLINE(3311)				bool _hx_tmp;
HXDLIN(3311)				bool _hx_tmp1;
HXDLIN(3311)				if (::hx::IsNotNull( script )) {
HXLINE(3311)					_hx_tmp1 = !(script->exists(funcToCall));
            				}
            				else {
HXLINE(3311)					_hx_tmp1 = true;
            				}
HXDLIN(3311)				if (!(_hx_tmp1)) {
HXLINE(3311)					_hx_tmp = exclusions->contains(script->origin);
            				}
            				else {
HXLINE(3311)					_hx_tmp = true;
            				}
HXDLIN(3311)				if (_hx_tmp) {
HXLINE(3312)					continue;
            				}
HXLINE(3314)				 ::Dynamic myValue = null();
HXLINE(3315)				{
HXLINE(3316)					 ::Dynamic callValue = script->call(funcToCall,args);
HXLINE(3317)					if (!(( (bool)(callValue->__Field(HX_("succeeded",61,56,29,fb),::hx::paccDynamic)) ))) {
HXLINE(3319)						 ::haxe::Exception e = Dynamic(  ::Dynamic(callValue->__Field(HX_("exceptions",44,35,34,1d),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::haxe::Exception >();
HXLINE(3320)						if (::hx::IsNotNull( e )) {
HXLINE(3322)							int len1 = (::tea::backend::_SScriptException::SScriptException_Impl__obj::get_message(e).indexOf(HX_("\n",0a,00,00,00),null()) + 1);
HXLINE(3323)							if ((len1 <= 0)) {
HXLINE(3323)								len1 = ::tea::backend::_SScriptException::SScriptException_Impl__obj::get_message(e).length;
            							}
HXLINE(3324)							::String _hx_tmp2 = ( (::String)(((HX_("ERROR (",b0,59,de,69) + callValue->__Field(HX_("calledFunction",b5,00,41,03),::hx::paccDynamic)) + HX_(") - ",ea,2e,32,1b))) );
HXDLIN(3324)							this->addTextToDebug((_hx_tmp2 + ::tea::backend::_SScriptException::SScriptException_Impl__obj::get_message(e).substr(0,len1)),-65536);
            						}
            					}
            					else {
HXLINE(3329)						myValue =  ::Dynamic(callValue->__Field(HX_("returnValue",a1,4c,95,3e),::hx::paccDynamic));
HXLINE(3330)						bool _hx_tmp3;
HXDLIN(3330)						bool _hx_tmp4;
HXDLIN(3330)						bool _hx_tmp5;
HXDLIN(3330)						if (::hx::IsNotEq( myValue,::psychlua::LuaUtils_obj::Function_StopHScript )) {
HXLINE(3330)							_hx_tmp5 = ::hx::IsEq( myValue,::psychlua::LuaUtils_obj::Function_StopAll );
            						}
            						else {
HXLINE(3330)							_hx_tmp5 = true;
            						}
HXDLIN(3330)						if (_hx_tmp5) {
HXLINE(3330)							_hx_tmp4 = !(excludeValues->contains(myValue));
            						}
            						else {
HXLINE(3330)							_hx_tmp4 = false;
            						}
HXDLIN(3330)						if (_hx_tmp4) {
HXLINE(3330)							_hx_tmp3 = !(( (bool)(ignoreStops) ));
            						}
            						else {
HXLINE(3330)							_hx_tmp3 = false;
            						}
HXDLIN(3330)						if (_hx_tmp3) {
HXLINE(3332)							returnVal = myValue;
HXLINE(3333)							goto _hx_goto_188;
            						}
HXLINE(3336)						bool _hx_tmp6;
HXDLIN(3336)						if (::hx::IsNotNull( myValue )) {
HXLINE(3336)							_hx_tmp6 = !(excludeValues->contains(myValue));
            						}
            						else {
HXLINE(3336)							_hx_tmp6 = false;
            						}
HXDLIN(3336)						if (_hx_tmp6) {
HXLINE(3337)							returnVal = myValue;
            						}
            					}
            				}
            			}
            			_hx_goto_188:;
            		}
HXLINE(3343)		return returnVal;
            	}


HX_DEFINE_DYNAMIC_FUNC5(PlayState_obj,callOnHScript,return )

void PlayState_obj::setOnScripts(::String variable, ::Dynamic arg,::Array< ::String > exclusions){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3346_setOnScripts)
HXLINE(3347)		if (::hx::IsNull( exclusions )) {
HXLINE(3347)			exclusions = ::Array_obj< ::String >::__new(0);
            		}
HXLINE(3348)		this->setOnLuas(variable,arg,exclusions);
HXLINE(3349)		this->setOnHScript(variable,arg,exclusions);
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,setOnScripts,(void))

void PlayState_obj::setOnLuas(::String variable, ::Dynamic arg,::Array< ::String > exclusions){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3352_setOnLuas)
HXLINE(3354)		if (::hx::IsNull( exclusions )) {
HXLINE(3354)			exclusions = ::Array_obj< ::String >::__new(0);
            		}
HXLINE(3355)		{
HXLINE(3355)			int _g = 0;
HXDLIN(3355)			::Array< ::Dynamic> _g1 = this->luaArray;
HXDLIN(3355)			while((_g < _g1->length)){
HXLINE(3355)				 ::psychlua::FunkinLua script = _g1->__get(_g).StaticCast<  ::psychlua::FunkinLua >();
HXDLIN(3355)				_g = (_g + 1);
HXLINE(3356)				if (exclusions->contains(script->scriptName)) {
HXLINE(3357)					continue;
            				}
HXLINE(3359)				script->set(variable,arg);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,setOnLuas,(void))

void PlayState_obj::setOnHScript(::String variable, ::Dynamic arg,::Array< ::String > exclusions){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3364_setOnHScript)
HXLINE(3366)		if (::hx::IsNull( exclusions )) {
HXLINE(3366)			exclusions = ::Array_obj< ::String >::__new(0);
            		}
HXLINE(3367)		{
HXLINE(3367)			int _g = 0;
HXDLIN(3367)			::Array< ::Dynamic> _g1 = this->hscriptArray;
HXDLIN(3367)			while((_g < _g1->length)){
HXLINE(3367)				 ::psychlua::HScript script = _g1->__get(_g).StaticCast<  ::psychlua::HScript >();
HXDLIN(3367)				_g = (_g + 1);
HXLINE(3368)				if (exclusions->contains(script->origin)) {
HXLINE(3369)					continue;
            				}
HXLINE(3371)				if (!(this->instancesExclude->contains(variable))) {
HXLINE(3372)					this->instancesExclude->push(variable);
            				}
HXLINE(3373)				script->set(variable,arg);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,setOnHScript,(void))

void PlayState_obj::strumPlayAnim(bool isDad,int id,Float time){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3378_strumPlayAnim)
HXLINE(3379)		 ::objects::StrumNote spr = null();
HXLINE(3380)		if (isDad) {
HXLINE(3381)			spr = Dynamic( this->opponentStrums->members->__get(id)).StaticCast<  ::objects::StrumNote >();
            		}
            		else {
HXLINE(3383)			spr = Dynamic( this->playerStrums->members->__get(id)).StaticCast<  ::objects::StrumNote >();
            		}
HXLINE(3386)		if (::hx::IsNotNull( spr )) {
HXLINE(3387)			spr->playAnim(HX_("confirm",00,9d,39,10),true);
HXLINE(3388)			spr->resetAnim = time;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,strumPlayAnim,(void))

void PlayState_obj::RecalculateRating(::hx::Null< bool >  __o_badHit){
            		bool badHit = __o_badHit.Default(false);
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3395_RecalculateRating)
HXLINE(3396)		this->setOnScripts(HX_("score",52,73,d9,78),this->songScore,null());
HXLINE(3397)		this->setOnScripts(HX_("misses",6a,62,54,56),this->songMisses,null());
HXLINE(3398)		this->setOnScripts(HX_("hits",c0,42,0e,45),this->songHits,null());
HXLINE(3399)		this->setOnScripts(HX_("combo",4e,28,5d,4a),this->combo,null());
HXLINE(3401)		 ::Dynamic ret = this->callOnScripts(HX_("onRecalculateRating",b1,37,6a,10),null(),true,null(),null());
HXLINE(3402)		if (::hx::IsNotEq( ret,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(3404)			this->ratingName = HX_("?",3f,00,00,00);
HXLINE(3405)			if ((this->totalPlayed != 0)) {
HXLINE(3408)				this->ratingPercent = ::Math_obj::min(( (Float)(1) ),::Math_obj::max(( (Float)(0) ),(this->totalNotesHit / ( (Float)(this->totalPlayed) ))));
HXLINE(3412)				this->ratingName = ( (::String)(::states::PlayState_obj::ratingStuff->__get((::states::PlayState_obj::ratingStuff->get_length() - 1))->__GetItem(0)) );
HXLINE(3413)				if ((this->ratingPercent < 1)) {
HXLINE(3414)					int _g = 0;
HXDLIN(3414)					int _g1 = (::states::PlayState_obj::ratingStuff->get_length() - 1);
HXDLIN(3414)					while((_g < _g1)){
HXLINE(3414)						_g = (_g + 1);
HXDLIN(3414)						int i = (_g - 1);
HXLINE(3415)						if (::hx::IsLess( this->ratingPercent,::states::PlayState_obj::ratingStuff->__get(i)->__GetItem(1) )) {
HXLINE(3417)							this->ratingName = ( (::String)(::states::PlayState_obj::ratingStuff->__get(i)->__GetItem(0)) );
HXLINE(3418)							goto _hx_goto_196;
            						}
            					}
            					_hx_goto_196:;
            				}
            			}
HXLINE(3421)			this->fullComboFunction();
            		}
HXLINE(3423)		this->updateScore(badHit);
HXLINE(3424)		this->setOnScripts(HX_("rating",1d,34,8a,bb),this->ratingPercent,null());
HXLINE(3425)		this->setOnScripts(HX_("ratingName",08,a5,2b,05),this->ratingName,null());
HXLINE(3426)		this->setOnScripts(HX_("ratingFC",9a,72,95,59),this->ratingFC,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,RecalculateRating,(void))

 ::flixel::addons::display::FlxRuntimeShader PlayState_obj::createRuntimeShader(::String name){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_3482_createRuntimeShader)
HXLINE(3483)		if (!(::backend::ClientPrefs_obj::data->shaders)) {
HXLINE(3483)			return  ::flixel::addons::display::FlxRuntimeShader_obj::__alloc( HX_CTX ,null(),null());
            		}
HXLINE(3486)		bool _hx_tmp;
HXDLIN(3486)		if (!(this->runtimeShaders->exists(name))) {
HXLINE(3486)			_hx_tmp = !(this->initLuaShader(name,null()));
            		}
            		else {
HXLINE(3486)			_hx_tmp = false;
            		}
HXDLIN(3486)		if (_hx_tmp) {
HXLINE(3488)			::flixel::FlxG_obj::log->advanced(((HX_("Shader ",3b,a9,d7,2c) + name) + HX_(" is missing!",d1,64,6b,b3)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE(3489)			return  ::flixel::addons::display::FlxRuntimeShader_obj::__alloc( HX_CTX ,null(),null());
            		}
HXLINE(3492)		::Array< ::String > arr = ( (::Array< ::String >)(this->runtimeShaders->get(name)) );
HXLINE(3493)		return  ::flixel::addons::display::FlxRuntimeShader_obj::__alloc( HX_CTX ,arr->__get(0),arr->__get(1));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,createRuntimeShader,return )

bool PlayState_obj::initLuaShader(::String name, ::Dynamic __o_glslVersion){
            		 ::Dynamic glslVersion = __o_glslVersion;
            		if (::hx::IsNull(__o_glslVersion)) glslVersion = 120;
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3501_initLuaShader)
HXLINE(3502)		if (!(::backend::ClientPrefs_obj::data->shaders)) {
HXLINE(3502)			return false;
            		}
HXLINE(3505)		if (this->runtimeShaders->exists(name)) {
HXLINE(3507)			::flixel::FlxG_obj::log->advanced(((HX_("Shader ",3b,a9,d7,2c) + name) + HX_(" was already initialized!",8c,8e,cf,cf)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE(3508)			return true;
            		}
HXLINE(3511)		{
HXLINE(3511)			int _g = 0;
HXDLIN(3511)			::Array< ::String > foldersToCheck = ::Array_obj< ::String >::__new(0);
HXDLIN(3511)			if (::sys::FileSystem_obj::exists((HX_("assets/shared/",1e,69,1e,47) + HX_("shaders/",c1,f6,2a,36)))) {
HXLINE(3511)				foldersToCheck->push((HX_("assets/shared/",1e,69,1e,47) + HX_("shaders/",c1,f6,2a,36)));
            			}
HXDLIN(3511)			{
HXLINE(3511)				{
HXLINE(3511)					int _g1 = 0;
HXDLIN(3511)					::Array< ::String > _g2 = ::backend::Mods_obj::globalMods;
HXDLIN(3511)					while((_g1 < _g2->length)){
HXLINE(3511)						::String mod = _g2->__get(_g1);
HXDLIN(3511)						_g1 = (_g1 + 1);
HXDLIN(3511)						::String key = ((mod + HX_("/",2f,00,00,00)) + HX_("shaders/",c1,f6,2a,36));
HXDLIN(3511)						if (::hx::IsNull( key )) {
HXLINE(3511)							key = HX_("",00,00,00,00);
            						}
HXDLIN(3511)						::String folder = (HX_("mods/",9e,2f,58,0c) + key);
HXDLIN(3511)						bool _hx_tmp;
HXDLIN(3511)						if (::sys::FileSystem_obj::exists(folder)) {
HXLINE(3511)							_hx_tmp = !(foldersToCheck->contains(folder));
            						}
            						else {
HXLINE(3511)							_hx_tmp = false;
            						}
HXDLIN(3511)						if (_hx_tmp) {
HXLINE(3511)							foldersToCheck->push(folder);
            						}
            					}
            				}
HXDLIN(3511)				::String key1 = HX_("shaders/",c1,f6,2a,36);
HXDLIN(3511)				if (::hx::IsNull( key1 )) {
HXLINE(3511)					key1 = HX_("",00,00,00,00);
            				}
HXDLIN(3511)				::String folder1 = (HX_("mods/",9e,2f,58,0c) + key1);
HXDLIN(3511)				bool _hx_tmp1;
HXDLIN(3511)				if (::sys::FileSystem_obj::exists(folder1)) {
HXLINE(3511)					_hx_tmp1 = !(foldersToCheck->contains(folder1));
            				}
            				else {
HXLINE(3511)					_hx_tmp1 = false;
            				}
HXDLIN(3511)				if (_hx_tmp1) {
HXLINE(3511)					::String key2 = HX_("shaders/",c1,f6,2a,36);
HXDLIN(3511)					if (::hx::IsNull( key2 )) {
HXLINE(3511)						key2 = HX_("",00,00,00,00);
            					}
HXDLIN(3511)					foldersToCheck->push((HX_("mods/",9e,2f,58,0c) + key2));
            				}
HXDLIN(3511)				bool _hx_tmp2;
HXDLIN(3511)				if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE(3511)					_hx_tmp2 = (::backend::Mods_obj::currentModDirectory.length > 0);
            				}
            				else {
HXLINE(3511)					_hx_tmp2 = false;
            				}
HXDLIN(3511)				if (_hx_tmp2) {
HXLINE(3511)					::String key3 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + HX_("shaders/",c1,f6,2a,36));
HXDLIN(3511)					if (::hx::IsNull( key3 )) {
HXLINE(3511)						key3 = HX_("",00,00,00,00);
            					}
HXDLIN(3511)					::String folder2 = (HX_("mods/",9e,2f,58,0c) + key3);
HXDLIN(3511)					bool _hx_tmp3;
HXDLIN(3511)					if (::sys::FileSystem_obj::exists(folder2)) {
HXLINE(3511)						_hx_tmp3 = !(foldersToCheck->contains(folder2));
            					}
            					else {
HXLINE(3511)						_hx_tmp3 = false;
            					}
HXDLIN(3511)					if (_hx_tmp3) {
HXLINE(3511)						foldersToCheck->push(folder2);
            					}
            				}
            			}
HXDLIN(3511)			::Array< ::String > _g3 = foldersToCheck;
HXDLIN(3511)			while((_g < _g3->length)){
HXLINE(3511)				::String folder3 = _g3->__get(_g);
HXDLIN(3511)				_g = (_g + 1);
HXLINE(3513)				::String frag = ((folder3 + name) + HX_(".frag",60,48,31,c0));
HXLINE(3514)				::String vert = ((folder3 + name) + HX_(".vert",df,e3,ba,ca));
HXLINE(3515)				bool found = false;
HXLINE(3516)				if (::sys::FileSystem_obj::exists(frag)) {
HXLINE(3518)					frag = ::sys::io::File_obj::getContent(frag);
HXLINE(3519)					found = true;
            				}
            				else {
HXLINE(3521)					frag = null();
            				}
HXLINE(3523)				if (::sys::FileSystem_obj::exists(vert)) {
HXLINE(3525)					vert = ::sys::io::File_obj::getContent(vert);
HXLINE(3526)					found = true;
            				}
            				else {
HXLINE(3528)					vert = null();
            				}
HXLINE(3530)				if (found) {
HXLINE(3532)					this->runtimeShaders->set(name,::Array_obj< ::String >::__new(2)->init(0,frag)->init(1,vert));
HXLINE(3534)					return true;
            				}
            			}
            		}
HXLINE(3538)		this->addTextToDebug(((HX_("Missing shader ",81,62,6c,67) + name) + HX_(" .frag AND .vert files!",d4,1e,ab,6a)),-65536);
HXLINE(3545)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,initLuaShader,return )

int PlayState_obj::STRUM_X;

int PlayState_obj::STRUM_X_MIDDLESCROLL;

::cpp::VirtualArray PlayState_obj::ratingStuff;

::String PlayState_obj::curStage;

::String PlayState_obj::stageUI;

bool PlayState_obj::get_isPixelStage(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_141_get_isPixelStage)
HXDLIN( 141)		if ((::states::PlayState_obj::stageUI != HX_("pixel",86,c6,a3,c2))) {
HXDLIN( 141)			return ::StringTools_obj::endsWith(::states::PlayState_obj::stageUI,HX_("-pixel",39,03,b3,c0));
            		}
            		else {
HXDLIN( 141)			return true;
            		}
HXDLIN( 141)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,get_isPixelStage,return )

 ::Dynamic PlayState_obj::SONG;

bool PlayState_obj::isStoryMode;

int PlayState_obj::storyWeek;

::Array< ::String > PlayState_obj::storyPlaylist;

int PlayState_obj::storyDifficulty;

 ::flixel::FlxObject PlayState_obj::prevCamFollow;

bool PlayState_obj::changedDifficulty;

bool PlayState_obj::chartingMode;

int PlayState_obj::campaignScore;

int PlayState_obj::campaignMisses;

bool PlayState_obj::seenCutscene;

int PlayState_obj::deathCounter;

Float PlayState_obj::daPixelZoom;

 ::states::PlayState PlayState_obj::instance;

Float PlayState_obj::startOnTime;

int PlayState_obj::sortByTime( ::Dynamic Obj1, ::Dynamic Obj2){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1470_sortByTime)
HXDLIN(1470)		Float Value1 = ( (Float)(Obj1->__Field(HX_("strumTime",f6,2d,21,f4),::hx::paccDynamic)) );
HXDLIN(1470)		Float Value2 = ( (Float)(Obj2->__Field(HX_("strumTime",f6,2d,21,f4),::hx::paccDynamic)) );
HXDLIN(1470)		int result = 0;
HXDLIN(1470)		if ((Value1 < Value2)) {
HXDLIN(1470)			result = -1;
            		}
            		else {
HXDLIN(1470)			if ((Value1 > Value2)) {
HXDLIN(1470)				result = 1;
            			}
            		}
HXDLIN(1470)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,sortByTime,return )

int PlayState_obj::sortHitNotes( ::objects::Note a, ::objects::Note b){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2669_sortHitNotes)
HXLINE(2670)		bool _hx_tmp;
HXDLIN(2670)		if (a->lowPriority) {
HXLINE(2670)			_hx_tmp = !(b->lowPriority);
            		}
            		else {
HXLINE(2670)			_hx_tmp = false;
            		}
HXDLIN(2670)		if (_hx_tmp) {
HXLINE(2671)			return 1;
            		}
            		else {
HXLINE(2672)			bool _hx_tmp1;
HXDLIN(2672)			if (!(a->lowPriority)) {
HXLINE(2672)				_hx_tmp1 = b->lowPriority;
            			}
            			else {
HXLINE(2672)				_hx_tmp1 = false;
            			}
HXDLIN(2672)			if (_hx_tmp1) {
HXLINE(2673)				return -1;
            			}
            		}
HXLINE(2675)		Float Value1 = a->strumTime;
HXDLIN(2675)		Float Value2 = b->strumTime;
HXDLIN(2675)		int result = 0;
HXDLIN(2675)		if ((Value1 < Value2)) {
HXLINE(2675)			result = -1;
            		}
            		else {
HXLINE(2675)			if ((Value1 > Value2)) {
HXLINE(2675)				result = 1;
            			}
            		}
HXDLIN(2675)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,sortHitNotes,return )

int PlayState_obj::getKeyFromEvent(::Array< ::String > arr,int key){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2702_getKeyFromEvent)
HXLINE(2703)		if ((key != -1)) {
HXLINE(2705)			int _g = 0;
HXDLIN(2705)			int _g1 = arr->length;
HXDLIN(2705)			while((_g < _g1)){
HXLINE(2705)				_g = (_g + 1);
HXDLIN(2705)				int i = (_g - 1);
HXLINE(2707)				::Array< int > note = ( (::Array< int >)(::backend::Controls_obj::instance->keyboardBinds->get(arr->__get(i))) );
HXLINE(2708)				{
HXLINE(2708)					int _g2 = 0;
HXDLIN(2708)					while((_g2 < note->length)){
HXLINE(2708)						int noteKey = note->__get(_g2);
HXDLIN(2708)						_g2 = (_g2 + 1);
HXLINE(2709)						if ((key == noteKey)) {
HXLINE(2710)							return i;
            						}
            					}
            				}
            			}
            		}
HXLINE(2713)		return -1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,getKeyFromEvent,return )


void PlayState_obj::__alloc_dynamic_functions(::hx::Ctx *_hx_ctx,PlayState_obj *_hx_obj) {
	if (!_hx_obj->updateIconsPosition.mPtr) _hx_obj->updateIconsPosition = new __default_updateIconsPosition(_hx_obj);
	if (!_hx_obj->updateIconsScale.mPtr) _hx_obj->updateIconsScale = new __default_updateIconsScale(_hx_obj);
	if (!_hx_obj->fullComboFunction.mPtr) _hx_obj->fullComboFunction = new __default_fullComboFunction(_hx_obj);
	if (!_hx_obj->updateScore.mPtr) _hx_obj->updateScore = new __default_updateScore(_hx_obj);
}
::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "states.PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	states::PlayState_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct(TransIn,TransOut);
	return __this;
}

PlayState_obj::PlayState_obj()
{
	updateIconsPosition = new __default_updateIconsPosition(this);
	updateIconsScale = new __default_updateIconsScale(this);
	fullComboFunction = new __default_fullComboFunction(this);
	updateScore = new __default_updateScore(this);
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(isCameraOnForcedPos,"isCameraOnForcedPos");
	HX_MARK_MEMBER_NAME(boyfriendMap,"boyfriendMap");
	HX_MARK_MEMBER_NAME(dadMap,"dadMap");
	HX_MARK_MEMBER_NAME(gfMap,"gfMap");
	HX_MARK_MEMBER_NAME(variables,"variables");
	HX_MARK_MEMBER_NAME(hscriptArray,"hscriptArray");
	HX_MARK_MEMBER_NAME(instancesExclude,"instancesExclude");
	HX_MARK_MEMBER_NAME(modchartTweens,"modchartTweens");
	HX_MARK_MEMBER_NAME(modchartSprites,"modchartSprites");
	HX_MARK_MEMBER_NAME(modchartTimers,"modchartTimers");
	HX_MARK_MEMBER_NAME(modchartSounds,"modchartSounds");
	HX_MARK_MEMBER_NAME(modchartTexts,"modchartTexts");
	HX_MARK_MEMBER_NAME(modchartSaves,"modchartSaves");
	HX_MARK_MEMBER_NAME(BF_X,"BF_X");
	HX_MARK_MEMBER_NAME(BF_Y,"BF_Y");
	HX_MARK_MEMBER_NAME(DAD_X,"DAD_X");
	HX_MARK_MEMBER_NAME(DAD_Y,"DAD_Y");
	HX_MARK_MEMBER_NAME(GF_X,"GF_X");
	HX_MARK_MEMBER_NAME(GF_Y,"GF_Y");
	HX_MARK_MEMBER_NAME(songSpeedTween,"songSpeedTween");
	HX_MARK_MEMBER_NAME(songSpeed,"songSpeed");
	HX_MARK_MEMBER_NAME(songSpeedType,"songSpeedType");
	HX_MARK_MEMBER_NAME(noteKillOffset,"noteKillOffset");
	HX_MARK_MEMBER_NAME(playbackRate,"playbackRate");
	HX_MARK_MEMBER_NAME(boyfriendGroup,"boyfriendGroup");
	HX_MARK_MEMBER_NAME(dadGroup,"dadGroup");
	HX_MARK_MEMBER_NAME(gfGroup,"gfGroup");
	HX_MARK_MEMBER_NAME(spawnTime,"spawnTime");
	HX_MARK_MEMBER_NAME(inst,"inst");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(opponentVocals,"opponentVocals");
	HX_MARK_MEMBER_NAME(dad,"dad");
	HX_MARK_MEMBER_NAME(gf,"gf");
	HX_MARK_MEMBER_NAME(boyfriend,"boyfriend");
	HX_MARK_MEMBER_NAME(notes,"notes");
	HX_MARK_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_MARK_MEMBER_NAME(eventNotes,"eventNotes");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(strumLineNotes,"strumLineNotes");
	HX_MARK_MEMBER_NAME(opponentStrums,"opponentStrums");
	HX_MARK_MEMBER_NAME(playerStrums,"playerStrums");
	HX_MARK_MEMBER_NAME(grpNoteSplashes,"grpNoteSplashes");
	HX_MARK_MEMBER_NAME(camZooming,"camZooming");
	HX_MARK_MEMBER_NAME(camZoomingMult,"camZoomingMult");
	HX_MARK_MEMBER_NAME(camZoomingDecay,"camZoomingDecay");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_MARK_MEMBER_NAME(health,"health");
	HX_MARK_MEMBER_NAME(combo,"combo");
	HX_MARK_MEMBER_NAME(healthBar,"healthBar");
	HX_MARK_MEMBER_NAME(timeBar,"timeBar");
	HX_MARK_MEMBER_NAME(songPercent,"songPercent");
	HX_MARK_MEMBER_NAME(ratingsData,"ratingsData");
	HX_MARK_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_MARK_MEMBER_NAME(endingSong,"endingSong");
	HX_MARK_MEMBER_NAME(startingSong,"startingSong");
	HX_MARK_MEMBER_NAME(updateTime,"updateTime");
	HX_MARK_MEMBER_NAME(healthGain,"healthGain");
	HX_MARK_MEMBER_NAME(healthLoss,"healthLoss");
	HX_MARK_MEMBER_NAME(guitarHeroSustains,"guitarHeroSustains");
	HX_MARK_MEMBER_NAME(instakillOnMiss,"instakillOnMiss");
	HX_MARK_MEMBER_NAME(cpuControlled,"cpuControlled");
	HX_MARK_MEMBER_NAME(practiceMode,"practiceMode");
	HX_MARK_MEMBER_NAME(botplaySine,"botplaySine");
	HX_MARK_MEMBER_NAME(botplayTxt,"botplayTxt");
	HX_MARK_MEMBER_NAME(iconP1,"iconP1");
	HX_MARK_MEMBER_NAME(iconP2,"iconP2");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(camGame,"camGame");
	HX_MARK_MEMBER_NAME(camOther,"camOther");
	HX_MARK_MEMBER_NAME(cameraSpeed,"cameraSpeed");
	HX_MARK_MEMBER_NAME(songScore,"songScore");
	HX_MARK_MEMBER_NAME(songHits,"songHits");
	HX_MARK_MEMBER_NAME(songMisses,"songMisses");
	HX_MARK_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_MARK_MEMBER_NAME(timeTxt,"timeTxt");
	HX_MARK_MEMBER_NAME(scoreTxtTween,"scoreTxtTween");
	HX_MARK_MEMBER_NAME(defaultCamZoom,"defaultCamZoom");
	HX_MARK_MEMBER_NAME(singAnimations,"singAnimations");
	HX_MARK_MEMBER_NAME(inCutscene,"inCutscene");
	HX_MARK_MEMBER_NAME(skipCountdown,"skipCountdown");
	HX_MARK_MEMBER_NAME(songLength,"songLength");
	HX_MARK_MEMBER_NAME(boyfriendCameraOffset,"boyfriendCameraOffset");
	HX_MARK_MEMBER_NAME(opponentCameraOffset,"opponentCameraOffset");
	HX_MARK_MEMBER_NAME(girlfriendCameraOffset,"girlfriendCameraOffset");
	HX_MARK_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_MARK_MEMBER_NAME(detailsText,"detailsText");
	HX_MARK_MEMBER_NAME(detailsPausedText,"detailsPausedText");
	HX_MARK_MEMBER_NAME(keysPressed,"keysPressed");
	HX_MARK_MEMBER_NAME(boyfriendIdleTime,"boyfriendIdleTime");
	HX_MARK_MEMBER_NAME(boyfriendIdled,"boyfriendIdled");
	HX_MARK_MEMBER_NAME(luaArray,"luaArray");
	HX_MARK_MEMBER_NAME(luaDebugGroup,"luaDebugGroup");
	HX_MARK_MEMBER_NAME(introSoundsSuffix,"introSoundsSuffix");
	HX_MARK_MEMBER_NAME(keysArray,"keysArray");
	HX_MARK_MEMBER_NAME(songName,"songName");
	HX_MARK_MEMBER_NAME(startCallback,"startCallback");
	HX_MARK_MEMBER_NAME(endCallback,"endCallback");
	HX_MARK_MEMBER_NAME(dialogueCount,"dialogueCount");
	HX_MARK_MEMBER_NAME(psychDialogue,"psychDialogue");
	HX_MARK_MEMBER_NAME(startTimer,"startTimer");
	HX_MARK_MEMBER_NAME(finishTimer,"finishTimer");
	HX_MARK_MEMBER_NAME(countdownReady,"countdownReady");
	HX_MARK_MEMBER_NAME(countdownSet,"countdownSet");
	HX_MARK_MEMBER_NAME(countdownGo,"countdownGo");
	HX_MARK_MEMBER_NAME(updateScore,"updateScore");
	HX_MARK_MEMBER_NAME(fullComboFunction,"fullComboFunction");
	HX_MARK_MEMBER_NAME(debugNum,"debugNum");
	HX_MARK_MEMBER_NAME(noteTypes,"noteTypes");
	HX_MARK_MEMBER_NAME(eventsPushed,"eventsPushed");
	HX_MARK_MEMBER_NAME(skipArrowStartTween,"skipArrowStartTween");
	HX_MARK_MEMBER_NAME(autoUpdateRPC,"autoUpdateRPC");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(canReset,"canReset");
	HX_MARK_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_MARK_MEMBER_NAME(canPause,"canPause");
	HX_MARK_MEMBER_NAME(freezeCamera,"freezeCamera");
	HX_MARK_MEMBER_NAME(allowDebugKeys,"allowDebugKeys");
	HX_MARK_MEMBER_NAME(updateIconsScale,"updateIconsScale");
	HX_MARK_MEMBER_NAME(updateIconsPosition,"updateIconsPosition");
	HX_MARK_MEMBER_NAME(iconsAnimations,"iconsAnimations");
	HX_MARK_MEMBER_NAME(isDead,"isDead");
	HX_MARK_MEMBER_NAME(cameraTwn,"cameraTwn");
	HX_MARK_MEMBER_NAME(transitioning,"transitioning");
	HX_MARK_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_MARK_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_MARK_MEMBER_NAME(showCombo,"showCombo");
	HX_MARK_MEMBER_NAME(showComboNum,"showComboNum");
	HX_MARK_MEMBER_NAME(showRating,"showRating");
	HX_MARK_MEMBER_NAME(comboGroup,"comboGroup");
	HX_MARK_MEMBER_NAME(uiGroup,"uiGroup");
	HX_MARK_MEMBER_NAME(noteGroup,"noteGroup");
	HX_MARK_MEMBER_NAME(strumsBlocked,"strumsBlocked");
	HX_MARK_MEMBER_NAME(lastStepHit,"lastStepHit");
	HX_MARK_MEMBER_NAME(lastBeatHit,"lastBeatHit");
	HX_MARK_MEMBER_NAME(ratingName,"ratingName");
	HX_MARK_MEMBER_NAME(ratingPercent,"ratingPercent");
	HX_MARK_MEMBER_NAME(ratingFC,"ratingFC");
	HX_MARK_MEMBER_NAME(runtimeShaders,"runtimeShaders");
	 ::backend::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(isCameraOnForcedPos,"isCameraOnForcedPos");
	HX_VISIT_MEMBER_NAME(boyfriendMap,"boyfriendMap");
	HX_VISIT_MEMBER_NAME(dadMap,"dadMap");
	HX_VISIT_MEMBER_NAME(gfMap,"gfMap");
	HX_VISIT_MEMBER_NAME(variables,"variables");
	HX_VISIT_MEMBER_NAME(hscriptArray,"hscriptArray");
	HX_VISIT_MEMBER_NAME(instancesExclude,"instancesExclude");
	HX_VISIT_MEMBER_NAME(modchartTweens,"modchartTweens");
	HX_VISIT_MEMBER_NAME(modchartSprites,"modchartSprites");
	HX_VISIT_MEMBER_NAME(modchartTimers,"modchartTimers");
	HX_VISIT_MEMBER_NAME(modchartSounds,"modchartSounds");
	HX_VISIT_MEMBER_NAME(modchartTexts,"modchartTexts");
	HX_VISIT_MEMBER_NAME(modchartSaves,"modchartSaves");
	HX_VISIT_MEMBER_NAME(BF_X,"BF_X");
	HX_VISIT_MEMBER_NAME(BF_Y,"BF_Y");
	HX_VISIT_MEMBER_NAME(DAD_X,"DAD_X");
	HX_VISIT_MEMBER_NAME(DAD_Y,"DAD_Y");
	HX_VISIT_MEMBER_NAME(GF_X,"GF_X");
	HX_VISIT_MEMBER_NAME(GF_Y,"GF_Y");
	HX_VISIT_MEMBER_NAME(songSpeedTween,"songSpeedTween");
	HX_VISIT_MEMBER_NAME(songSpeed,"songSpeed");
	HX_VISIT_MEMBER_NAME(songSpeedType,"songSpeedType");
	HX_VISIT_MEMBER_NAME(noteKillOffset,"noteKillOffset");
	HX_VISIT_MEMBER_NAME(playbackRate,"playbackRate");
	HX_VISIT_MEMBER_NAME(boyfriendGroup,"boyfriendGroup");
	HX_VISIT_MEMBER_NAME(dadGroup,"dadGroup");
	HX_VISIT_MEMBER_NAME(gfGroup,"gfGroup");
	HX_VISIT_MEMBER_NAME(spawnTime,"spawnTime");
	HX_VISIT_MEMBER_NAME(inst,"inst");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(opponentVocals,"opponentVocals");
	HX_VISIT_MEMBER_NAME(dad,"dad");
	HX_VISIT_MEMBER_NAME(gf,"gf");
	HX_VISIT_MEMBER_NAME(boyfriend,"boyfriend");
	HX_VISIT_MEMBER_NAME(notes,"notes");
	HX_VISIT_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_VISIT_MEMBER_NAME(eventNotes,"eventNotes");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(strumLineNotes,"strumLineNotes");
	HX_VISIT_MEMBER_NAME(opponentStrums,"opponentStrums");
	HX_VISIT_MEMBER_NAME(playerStrums,"playerStrums");
	HX_VISIT_MEMBER_NAME(grpNoteSplashes,"grpNoteSplashes");
	HX_VISIT_MEMBER_NAME(camZooming,"camZooming");
	HX_VISIT_MEMBER_NAME(camZoomingMult,"camZoomingMult");
	HX_VISIT_MEMBER_NAME(camZoomingDecay,"camZoomingDecay");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_VISIT_MEMBER_NAME(health,"health");
	HX_VISIT_MEMBER_NAME(combo,"combo");
	HX_VISIT_MEMBER_NAME(healthBar,"healthBar");
	HX_VISIT_MEMBER_NAME(timeBar,"timeBar");
	HX_VISIT_MEMBER_NAME(songPercent,"songPercent");
	HX_VISIT_MEMBER_NAME(ratingsData,"ratingsData");
	HX_VISIT_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_VISIT_MEMBER_NAME(endingSong,"endingSong");
	HX_VISIT_MEMBER_NAME(startingSong,"startingSong");
	HX_VISIT_MEMBER_NAME(updateTime,"updateTime");
	HX_VISIT_MEMBER_NAME(healthGain,"healthGain");
	HX_VISIT_MEMBER_NAME(healthLoss,"healthLoss");
	HX_VISIT_MEMBER_NAME(guitarHeroSustains,"guitarHeroSustains");
	HX_VISIT_MEMBER_NAME(instakillOnMiss,"instakillOnMiss");
	HX_VISIT_MEMBER_NAME(cpuControlled,"cpuControlled");
	HX_VISIT_MEMBER_NAME(practiceMode,"practiceMode");
	HX_VISIT_MEMBER_NAME(botplaySine,"botplaySine");
	HX_VISIT_MEMBER_NAME(botplayTxt,"botplayTxt");
	HX_VISIT_MEMBER_NAME(iconP1,"iconP1");
	HX_VISIT_MEMBER_NAME(iconP2,"iconP2");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(camGame,"camGame");
	HX_VISIT_MEMBER_NAME(camOther,"camOther");
	HX_VISIT_MEMBER_NAME(cameraSpeed,"cameraSpeed");
	HX_VISIT_MEMBER_NAME(songScore,"songScore");
	HX_VISIT_MEMBER_NAME(songHits,"songHits");
	HX_VISIT_MEMBER_NAME(songMisses,"songMisses");
	HX_VISIT_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_VISIT_MEMBER_NAME(timeTxt,"timeTxt");
	HX_VISIT_MEMBER_NAME(scoreTxtTween,"scoreTxtTween");
	HX_VISIT_MEMBER_NAME(defaultCamZoom,"defaultCamZoom");
	HX_VISIT_MEMBER_NAME(singAnimations,"singAnimations");
	HX_VISIT_MEMBER_NAME(inCutscene,"inCutscene");
	HX_VISIT_MEMBER_NAME(skipCountdown,"skipCountdown");
	HX_VISIT_MEMBER_NAME(songLength,"songLength");
	HX_VISIT_MEMBER_NAME(boyfriendCameraOffset,"boyfriendCameraOffset");
	HX_VISIT_MEMBER_NAME(opponentCameraOffset,"opponentCameraOffset");
	HX_VISIT_MEMBER_NAME(girlfriendCameraOffset,"girlfriendCameraOffset");
	HX_VISIT_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_VISIT_MEMBER_NAME(detailsText,"detailsText");
	HX_VISIT_MEMBER_NAME(detailsPausedText,"detailsPausedText");
	HX_VISIT_MEMBER_NAME(keysPressed,"keysPressed");
	HX_VISIT_MEMBER_NAME(boyfriendIdleTime,"boyfriendIdleTime");
	HX_VISIT_MEMBER_NAME(boyfriendIdled,"boyfriendIdled");
	HX_VISIT_MEMBER_NAME(luaArray,"luaArray");
	HX_VISIT_MEMBER_NAME(luaDebugGroup,"luaDebugGroup");
	HX_VISIT_MEMBER_NAME(introSoundsSuffix,"introSoundsSuffix");
	HX_VISIT_MEMBER_NAME(keysArray,"keysArray");
	HX_VISIT_MEMBER_NAME(songName,"songName");
	HX_VISIT_MEMBER_NAME(startCallback,"startCallback");
	HX_VISIT_MEMBER_NAME(endCallback,"endCallback");
	HX_VISIT_MEMBER_NAME(dialogueCount,"dialogueCount");
	HX_VISIT_MEMBER_NAME(psychDialogue,"psychDialogue");
	HX_VISIT_MEMBER_NAME(startTimer,"startTimer");
	HX_VISIT_MEMBER_NAME(finishTimer,"finishTimer");
	HX_VISIT_MEMBER_NAME(countdownReady,"countdownReady");
	HX_VISIT_MEMBER_NAME(countdownSet,"countdownSet");
	HX_VISIT_MEMBER_NAME(countdownGo,"countdownGo");
	HX_VISIT_MEMBER_NAME(updateScore,"updateScore");
	HX_VISIT_MEMBER_NAME(fullComboFunction,"fullComboFunction");
	HX_VISIT_MEMBER_NAME(debugNum,"debugNum");
	HX_VISIT_MEMBER_NAME(noteTypes,"noteTypes");
	HX_VISIT_MEMBER_NAME(eventsPushed,"eventsPushed");
	HX_VISIT_MEMBER_NAME(skipArrowStartTween,"skipArrowStartTween");
	HX_VISIT_MEMBER_NAME(autoUpdateRPC,"autoUpdateRPC");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(canReset,"canReset");
	HX_VISIT_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_VISIT_MEMBER_NAME(canPause,"canPause");
	HX_VISIT_MEMBER_NAME(freezeCamera,"freezeCamera");
	HX_VISIT_MEMBER_NAME(allowDebugKeys,"allowDebugKeys");
	HX_VISIT_MEMBER_NAME(updateIconsScale,"updateIconsScale");
	HX_VISIT_MEMBER_NAME(updateIconsPosition,"updateIconsPosition");
	HX_VISIT_MEMBER_NAME(iconsAnimations,"iconsAnimations");
	HX_VISIT_MEMBER_NAME(isDead,"isDead");
	HX_VISIT_MEMBER_NAME(cameraTwn,"cameraTwn");
	HX_VISIT_MEMBER_NAME(transitioning,"transitioning");
	HX_VISIT_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_VISIT_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_VISIT_MEMBER_NAME(showCombo,"showCombo");
	HX_VISIT_MEMBER_NAME(showComboNum,"showComboNum");
	HX_VISIT_MEMBER_NAME(showRating,"showRating");
	HX_VISIT_MEMBER_NAME(comboGroup,"comboGroup");
	HX_VISIT_MEMBER_NAME(uiGroup,"uiGroup");
	HX_VISIT_MEMBER_NAME(noteGroup,"noteGroup");
	HX_VISIT_MEMBER_NAME(strumsBlocked,"strumsBlocked");
	HX_VISIT_MEMBER_NAME(lastStepHit,"lastStepHit");
	HX_VISIT_MEMBER_NAME(lastBeatHit,"lastBeatHit");
	HX_VISIT_MEMBER_NAME(ratingName,"ratingName");
	HX_VISIT_MEMBER_NAME(ratingPercent,"ratingPercent");
	HX_VISIT_MEMBER_NAME(ratingFC,"ratingFC");
	HX_VISIT_MEMBER_NAME(runtimeShaders,"runtimeShaders");
	 ::backend::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { return ::hx::Val( gf ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { return ::hx::Val( dad ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"BF_X") ) { return ::hx::Val( BF_X ); }
		if (HX_FIELD_EQ(inName,"BF_Y") ) { return ::hx::Val( BF_Y ); }
		if (HX_FIELD_EQ(inName,"GF_X") ) { return ::hx::Val( GF_X ); }
		if (HX_FIELD_EQ(inName,"GF_Y") ) { return ::hx::Val( GF_Y ); }
		if (HX_FIELD_EQ(inName,"inst") ) { return ::hx::Val( inst ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"gfMap") ) { return ::hx::Val( gfMap ); }
		if (HX_FIELD_EQ(inName,"DAD_X") ) { return ::hx::Val( DAD_X ); }
		if (HX_FIELD_EQ(inName,"DAD_Y") ) { return ::hx::Val( DAD_Y ); }
		if (HX_FIELD_EQ(inName,"notes") ) { return ::hx::Val( notes ); }
		if (HX_FIELD_EQ(inName,"combo") ) { return ::hx::Val( combo ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"dadMap") ) { return ::hx::Val( dadMap ); }
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"health") ) { return ::hx::Val( health ); }
		if (HX_FIELD_EQ(inName,"iconP1") ) { return ::hx::Val( iconP1 ); }
		if (HX_FIELD_EQ(inName,"iconP2") ) { return ::hx::Val( iconP2 ); }
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return ::hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"isDead") ) { return ::hx::Val( isDead ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gfGroup") ) { return ::hx::Val( gfGroup ); }
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { return ::hx::Val( gfSpeed ); }
		if (HX_FIELD_EQ(inName,"timeBar") ) { return ::hx::Val( timeBar ); }
		if (HX_FIELD_EQ(inName,"camGame") ) { return ::hx::Val( camGame ); }
		if (HX_FIELD_EQ(inName,"timeTxt") ) { return ::hx::Val( timeTxt ); }
		if (HX_FIELD_EQ(inName,"onFocus") ) { return ::hx::Val( onFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"endSong") ) { return ::hx::Val( endSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"uiGroup") ) { return ::hx::Val( uiGroup ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dadGroup") ) { return ::hx::Val( dadGroup ); }
		if (HX_FIELD_EQ(inName,"camOther") ) { return ::hx::Val( camOther ); }
		if (HX_FIELD_EQ(inName,"songHits") ) { return ::hx::Val( songHits ); }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { return ::hx::Val( scoreTxt ); }
		if (HX_FIELD_EQ(inName,"luaArray") ) { return ::hx::Val( luaArray ); }
		if (HX_FIELD_EQ(inName,"songName") ) { return ::hx::Val( songName ); }
		if (HX_FIELD_EQ(inName,"debugNum") ) { return ::hx::Val( debugNum ); }
		if (HX_FIELD_EQ(inName,"resetRPC") ) { return ::hx::Val( resetRPC_dyn() ); }
		if (HX_FIELD_EQ(inName,"canReset") ) { return ::hx::Val( canReset ); }
		if (HX_FIELD_EQ(inName,"canPause") ) { return ::hx::Val( canPause ); }
		if (HX_FIELD_EQ(inName,"noteMiss") ) { return ::hx::Val( noteMiss_dyn() ); }
		if (HX_FIELD_EQ(inName,"ratingFC") ) { return ::hx::Val( ratingFC ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"variables") ) { return ::hx::Val( variables ); }
		if (HX_FIELD_EQ(inName,"songSpeed") ) { return ::hx::Val( songSpeed ); }
		if (HX_FIELD_EQ(inName,"spawnTime") ) { return ::hx::Val( spawnTime ); }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { return ::hx::Val( boyfriend ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"healthBar") ) { return ::hx::Val( healthBar ); }
		if (HX_FIELD_EQ(inName,"songScore") ) { return ::hx::Val( songScore ); }
		if (HX_FIELD_EQ(inName,"keysArray") ) { return ::hx::Val( keysArray ); }
		if (HX_FIELD_EQ(inName,"startSong") ) { return ::hx::Val( startSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"noteTypes") ) { return ::hx::Val( noteTypes ); }
		if (HX_FIELD_EQ(inName,"makeEvent") ) { return ::hx::Val( makeEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"cameraTwn") ) { return ::hx::Val( cameraTwn ); }
		if (HX_FIELD_EQ(inName,"KillNotes") ) { return ::hx::Val( KillNotes_dyn() ); }
		if (HX_FIELD_EQ(inName,"showCombo") ) { return ::hx::Val( showCombo ); }
		if (HX_FIELD_EQ(inName,"noteGroup") ) { return ::hx::Val( noteGroup ); }
		if (HX_FIELD_EQ(inName,"keysCheck") ) { return ::hx::Val( keysCheck_dyn() ); }
		if (HX_FIELD_EQ(inName,"setOnLuas") ) { return ::hx::Val( setOnLuas_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"eventNotes") ) { return ::hx::Val( eventNotes ); }
		if (HX_FIELD_EQ(inName,"camZooming") ) { return ::hx::Val( camZooming ); }
		if (HX_FIELD_EQ(inName,"endingSong") ) { return ::hx::Val( endingSong ); }
		if (HX_FIELD_EQ(inName,"updateTime") ) { return ::hx::Val( updateTime ); }
		if (HX_FIELD_EQ(inName,"healthGain") ) { return ::hx::Val( healthGain ); }
		if (HX_FIELD_EQ(inName,"healthLoss") ) { return ::hx::Val( healthLoss ); }
		if (HX_FIELD_EQ(inName,"botplayTxt") ) { return ::hx::Val( botplayTxt ); }
		if (HX_FIELD_EQ(inName,"songMisses") ) { return ::hx::Val( songMisses ); }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { return ::hx::Val( inCutscene ); }
		if (HX_FIELD_EQ(inName,"songLength") ) { return ::hx::Val( songLength ); }
		if (HX_FIELD_EQ(inName,"startVideo") ) { return ::hx::Val( startVideo_dyn() ); }
		if (HX_FIELD_EQ(inName,"startTimer") ) { return ::hx::Val( startTimer ); }
		if (HX_FIELD_EQ(inName,"doScoreBop") ) { return ::hx::Val( doScoreBop_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_health") ) { return ::hx::Val( set_health_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveCamera") ) { return ::hx::Val( moveCamera_dyn() ); }
		if (HX_FIELD_EQ(inName,"tweenCamIn") ) { return ::hx::Val( tweenCamIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"finishSong") ) { return ::hx::Val( finishSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"showRating") ) { return ::hx::Val( showRating ); }
		if (HX_FIELD_EQ(inName,"comboGroup") ) { return ::hx::Val( comboGroup ); }
		if (HX_FIELD_EQ(inName,"popUpScore") ) { return ::hx::Val( popUpScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKeyPress") ) { return ::hx::Val( onKeyPress_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyPressed") ) { return ::hx::Val( keyPressed_dyn() ); }
		if (HX_FIELD_EQ(inName,"sectionHit") ) { return ::hx::Val( sectionHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"callOnLuas") ) { return ::hx::Val( callOnLuas_dyn() ); }
		if (HX_FIELD_EQ(inName,"ratingName") ) { return ::hx::Val( ratingName ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"songPercent") ) { return ::hx::Val( songPercent ); }
		if (HX_FIELD_EQ(inName,"ratingsData") ) { return ::hx::Val( ratingsData ); }
		if (HX_FIELD_EQ(inName,"botplaySine") ) { return ::hx::Val( botplaySine ); }
		if (HX_FIELD_EQ(inName,"cameraSpeed") ) { return ::hx::Val( cameraSpeed ); }
		if (HX_FIELD_EQ(inName,"detailsText") ) { return ::hx::Val( detailsText ); }
		if (HX_FIELD_EQ(inName,"keysPressed") ) { return ::hx::Val( keysPressed ); }
		if (HX_FIELD_EQ(inName,"endCallback") ) { return ::hx::Val( endCallback ); }
		if (HX_FIELD_EQ(inName,"startAndEnd") ) { return ::hx::Val( startAndEnd_dyn() ); }
		if (HX_FIELD_EQ(inName,"finishTimer") ) { return ::hx::Val( finishTimer ); }
		if (HX_FIELD_EQ(inName,"countdownGo") ) { return ::hx::Val( countdownGo ); }
		if (HX_FIELD_EQ(inName,"addBehindGF") ) { return ::hx::Val( addBehindGF_dyn() ); }
		if (HX_FIELD_EQ(inName,"addBehindBF") ) { return ::hx::Val( addBehindBF_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateScore") ) { return ::hx::Val( updateScore ); }
		if (HX_FIELD_EQ(inName,"setSongTime") ) { return ::hx::Val( setSongTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"eventPushed") ) { return ::hx::Val( eventPushed_dyn() ); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return ::hx::Val( onFocusLost_dyn() ); }
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { return ::hx::Val( totalPlayed ); }
		if (HX_FIELD_EQ(inName,"keyReleased") ) { return ::hx::Val( keyReleased_dyn() ); }
		if (HX_FIELD_EQ(inName,"goodNoteHit") ) { return ::hx::Val( goodNoteHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"lastStepHit") ) { return ::hx::Val( lastStepHit ); }
		if (HX_FIELD_EQ(inName,"lastBeatHit") ) { return ::hx::Val( lastBeatHit ); }
		if (HX_FIELD_EQ(inName,"playerDance") ) { return ::hx::Val( playerDance_dyn() ); }
		if (HX_FIELD_EQ(inName,"initHScript") ) { return ::hx::Val( initHScript_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"boyfriendMap") ) { return ::hx::Val( boyfriendMap ); }
		if (HX_FIELD_EQ(inName,"hscriptArray") ) { return ::hx::Val( hscriptArray ); }
		if (HX_FIELD_EQ(inName,"playbackRate") ) { return ::hx::Val( playbackRate ); }
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { return ::hx::Val( unspawnNotes ); }
		if (HX_FIELD_EQ(inName,"playerStrums") ) { return ::hx::Val( playerStrums ); }
		if (HX_FIELD_EQ(inName,"startingSong") ) { return ::hx::Val( startingSong ); }
		if (HX_FIELD_EQ(inName,"practiceMode") ) { return ::hx::Val( practiceMode ); }
		if (HX_FIELD_EQ(inName,"getLuaObject") ) { return ::hx::Val( getLuaObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"countdownSet") ) { return ::hx::Val( countdownSet ); }
		if (HX_FIELD_EQ(inName,"addBehindDad") ) { return ::hx::Val( addBehindDad_dyn() ); }
		if (HX_FIELD_EQ(inName,"skipDialogue") ) { return ::hx::Val( skipDialogue_dyn() ); }
		if (HX_FIELD_EQ(inName,"eventsPushed") ) { return ::hx::Val( eventsPushed ); }
		if (HX_FIELD_EQ(inName,"generateSong") ) { return ::hx::Val( generateSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"openSubState") ) { return ::hx::Val( openSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"resyncVocals") ) { return ::hx::Val( resyncVocals_dyn() ); }
		if (HX_FIELD_EQ(inName,"freezeCamera") ) { return ::hx::Val( freezeCamera ); }
		if (HX_FIELD_EQ(inName,"doDeathCheck") ) { return ::hx::Val( doDeathCheck_dyn() ); }
		if (HX_FIELD_EQ(inName,"triggerEvent") ) { return ::hx::Val( triggerEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"showComboNum") ) { return ::hx::Val( showComboNum ); }
		if (HX_FIELD_EQ(inName,"onKeyRelease") ) { return ::hx::Val( onKeyRelease_dyn() ); }
		if (HX_FIELD_EQ(inName,"setOnScripts") ) { return ::hx::Val( setOnScripts_dyn() ); }
		if (HX_FIELD_EQ(inName,"setOnHScript") ) { return ::hx::Val( setOnHScript_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"modchartTexts") ) { return ::hx::Val( modchartTexts ); }
		if (HX_FIELD_EQ(inName,"modchartSaves") ) { return ::hx::Val( modchartSaves ); }
		if (HX_FIELD_EQ(inName,"songSpeedType") ) { return ::hx::Val( songSpeedType ); }
		if (HX_FIELD_EQ(inName,"cpuControlled") ) { return ::hx::Val( cpuControlled ); }
		if (HX_FIELD_EQ(inName,"scoreTxtTween") ) { return ::hx::Val( scoreTxtTween ); }
		if (HX_FIELD_EQ(inName,"skipCountdown") ) { return ::hx::Val( skipCountdown ); }
		if (HX_FIELD_EQ(inName,"luaDebugGroup") ) { return ::hx::Val( luaDebugGroup ); }
		if (HX_FIELD_EQ(inName,"startCallback") ) { return ::hx::Val( startCallback ); }
		if (HX_FIELD_EQ(inName,"set_songSpeed") ) { return ::hx::Val( set_songSpeed_dyn() ); }
		if (HX_FIELD_EQ(inName,"dialogueCount") ) { return ::hx::Val( dialogueCount ); }
		if (HX_FIELD_EQ(inName,"psychDialogue") ) { return ::hx::Val( psychDialogue ); }
		if (HX_FIELD_EQ(inName,"startDialogue") ) { return ::hx::Val( startDialogue_dyn() ); }
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return ::hx::Val( closeSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"autoUpdateRPC") ) { return ::hx::Val( autoUpdateRPC ); }
		if (HX_FIELD_EQ(inName,"openPauseMenu") ) { return ::hx::Val( openPauseMenu_dyn() ); }
		if (HX_FIELD_EQ(inName,"transitioning") ) { return ::hx::Val( transitioning ); }
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { return ::hx::Val( totalNotesHit ); }
		if (HX_FIELD_EQ(inName,"strumsBlocked") ) { return ::hx::Val( strumsBlocked ); }
		if (HX_FIELD_EQ(inName,"noteMissPress") ) { return ::hx::Val( noteMissPress_dyn() ); }
		if (HX_FIELD_EQ(inName,"callOnScripts") ) { return ::hx::Val( callOnScripts_dyn() ); }
		if (HX_FIELD_EQ(inName,"callOnHScript") ) { return ::hx::Val( callOnHScript_dyn() ); }
		if (HX_FIELD_EQ(inName,"strumPlayAnim") ) { return ::hx::Val( strumPlayAnim_dyn() ); }
		if (HX_FIELD_EQ(inName,"ratingPercent") ) { return ::hx::Val( ratingPercent ); }
		if (HX_FIELD_EQ(inName,"initLuaShader") ) { return ::hx::Val( initLuaShader_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"modchartTweens") ) { return ::hx::Val( modchartTweens ); }
		if (HX_FIELD_EQ(inName,"modchartTimers") ) { return ::hx::Val( modchartTimers ); }
		if (HX_FIELD_EQ(inName,"modchartSounds") ) { return ::hx::Val( modchartSounds ); }
		if (HX_FIELD_EQ(inName,"songSpeedTween") ) { return ::hx::Val( songSpeedTween ); }
		if (HX_FIELD_EQ(inName,"noteKillOffset") ) { return ::hx::Val( noteKillOffset ); }
		if (HX_FIELD_EQ(inName,"boyfriendGroup") ) { return ::hx::Val( boyfriendGroup ); }
		if (HX_FIELD_EQ(inName,"opponentVocals") ) { return ::hx::Val( opponentVocals ); }
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { return ::hx::Val( strumLineNotes ); }
		if (HX_FIELD_EQ(inName,"opponentStrums") ) { return ::hx::Val( opponentStrums ); }
		if (HX_FIELD_EQ(inName,"camZoomingMult") ) { return ::hx::Val( camZoomingMult ); }
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { return ::hx::Val( generatedMusic ); }
		if (HX_FIELD_EQ(inName,"defaultCamZoom") ) { return ::hx::Val( defaultCamZoom ); }
		if (HX_FIELD_EQ(inName,"singAnimations") ) { return ::hx::Val( singAnimations ); }
		if (HX_FIELD_EQ(inName,"boyfriendIdled") ) { return ::hx::Val( boyfriendIdled ); }
		if (HX_FIELD_EQ(inName,"addTextToDebug") ) { return ::hx::Val( addTextToDebug_dyn() ); }
		if (HX_FIELD_EQ(inName,"countdownReady") ) { return ::hx::Val( countdownReady ); }
		if (HX_FIELD_EQ(inName,"cacheCountdown") ) { return ::hx::Val( cacheCountdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"startCountdown") ) { return ::hx::Val( startCountdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"allowDebugKeys") ) { return ::hx::Val( allowDebugKeys ); }
		if (HX_FIELD_EQ(inName,"checkEventNote") ) { return ::hx::Val( checkEventNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"noteMissCommon") ) { return ::hx::Val( noteMissCommon_dyn() ); }
		if (HX_FIELD_EQ(inName,"invalidateNote") ) { return ::hx::Val( invalidateNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"startLuasNamed") ) { return ::hx::Val( startLuasNamed_dyn() ); }
		if (HX_FIELD_EQ(inName,"runtimeShaders") ) { return ::hx::Val( runtimeShaders ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"modchartSprites") ) { return ::hx::Val( modchartSprites ); }
		if (HX_FIELD_EQ(inName,"grpNoteSplashes") ) { return ::hx::Val( grpNoteSplashes ); }
		if (HX_FIELD_EQ(inName,"camZoomingDecay") ) { return ::hx::Val( camZoomingDecay ); }
		if (HX_FIELD_EQ(inName,"instakillOnMiss") ) { return ::hx::Val( instakillOnMiss ); }
		if (HX_FIELD_EQ(inName,"iconsAnimations") ) { return ::hx::Val( iconsAnimations ); }
		if (HX_FIELD_EQ(inName,"openChartEditor") ) { return ::hx::Val( openChartEditor_dyn() ); }
		if (HX_FIELD_EQ(inName,"cachePopUpScore") ) { return ::hx::Val( cachePopUpScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"opponentNoteHit") ) { return ::hx::Val( opponentNoteHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"spawnNoteSplash") ) { return ::hx::Val( spawnNoteSplash_dyn() ); }
		if (HX_FIELD_EQ(inName,"characterBopper") ) { return ::hx::Val( characterBopper_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"instancesExclude") ) { return ::hx::Val( instancesExclude ); }
		if (HX_FIELD_EQ(inName,"set_playbackRate") ) { return ::hx::Val( set_playbackRate_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearNotesBefore") ) { return ::hx::Val( clearNotesBefore_dyn() ); }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { return ::hx::Val( startedCountdown ); }
		if (HX_FIELD_EQ(inName,"updateIconsScale") ) { return ::hx::Val( updateIconsScale ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"detailsPausedText") ) { return ::hx::Val( detailsPausedText ); }
		if (HX_FIELD_EQ(inName,"boyfriendIdleTime") ) { return ::hx::Val( boyfriendIdleTime ); }
		if (HX_FIELD_EQ(inName,"introSoundsSuffix") ) { return ::hx::Val( introSoundsSuffix ); }
		if (HX_FIELD_EQ(inName,"startCharacterPos") ) { return ::hx::Val( startCharacterPos_dyn() ); }
		if (HX_FIELD_EQ(inName,"fullComboFunction") ) { return ::hx::Val( fullComboFunction ); }
		if (HX_FIELD_EQ(inName,"startNextDialogue") ) { return ::hx::Val( startNextDialogue_dyn() ); }
		if (HX_FIELD_EQ(inName,"eventPushedUnique") ) { return ::hx::Val( eventPushedUnique_dyn() ); }
		if (HX_FIELD_EQ(inName,"eventEarlyTrigger") ) { return ::hx::Val( eventEarlyTrigger_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveCameraSection") ) { return ::hx::Val( moveCameraSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"RecalculateRating") ) { return ::hx::Val( RecalculateRating_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"guitarHeroSustains") ) { return ::hx::Val( guitarHeroSustains ); }
		if (HX_FIELD_EQ(inName,"addCharacterToList") ) { return ::hx::Val( addCharacterToList_dyn() ); }
		if (HX_FIELD_EQ(inName,"startHScriptsNamed") ) { return ::hx::Val( startHScriptsNamed_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"isCameraOnForcedPos") ) { return ::hx::Val( isCameraOnForcedPos ); }
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { return ::hx::Val( storyDifficultyText ); }
		if (HX_FIELD_EQ(inName,"skipArrowStartTween") ) { return ::hx::Val( skipArrowStartTween ); }
		if (HX_FIELD_EQ(inName,"updateIconsPosition") ) { return ::hx::Val( updateIconsPosition ); }
		if (HX_FIELD_EQ(inName,"openCharacterEditor") ) { return ::hx::Val( openCharacterEditor_dyn() ); }
		if (HX_FIELD_EQ(inName,"createRuntimeShader") ) { return ::hx::Val( createRuntimeShader_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"opponentCameraOffset") ) { return ::hx::Val( opponentCameraOffset ); }
		if (HX_FIELD_EQ(inName,"generateStaticArrows") ) { return ::hx::Val( generateStaticArrows_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"boyfriendCameraOffset") ) { return ::hx::Val( boyfriendCameraOffset ); }
		if (HX_FIELD_EQ(inName,"reloadHealthBarColors") ) { return ::hx::Val( reloadHealthBarColors_dyn() ); }
		if (HX_FIELD_EQ(inName,"startCharacterScripts") ) { return ::hx::Val( startCharacterScripts_dyn() ); }
		if (HX_FIELD_EQ(inName,"createCountdownSprite") ) { return ::hx::Val( createCountdownSprite_dyn() ); }
		if (HX_FIELD_EQ(inName,"spawnNoteSplashOnNote") ) { return ::hx::Val( spawnNoteSplashOnNote_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"girlfriendCameraOffset") ) { return ::hx::Val( girlfriendCameraOffset ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { outValue = ( SONG ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"STRUM_X") ) { outValue = ( STRUM_X ); return true; }
		if (HX_FIELD_EQ(inName,"stageUI") ) { outValue = ( stageUI ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curStage") ) { outValue = ( curStage ); return true; }
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { outValue = ( storyWeek ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sortByTime") ) { outValue = sortByTime_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"ratingStuff") ) { outValue = ( ratingStuff ); return true; }
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { outValue = ( isStoryMode ); return true; }
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { outValue = ( daPixelZoom ); return true; }
		if (HX_FIELD_EQ(inName,"startOnTime") ) { outValue = ( startOnTime ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isPixelStage") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_isPixelStage() ); return true; } }
		if (HX_FIELD_EQ(inName,"chartingMode") ) { outValue = ( chartingMode ); return true; }
		if (HX_FIELD_EQ(inName,"seenCutscene") ) { outValue = ( seenCutscene ); return true; }
		if (HX_FIELD_EQ(inName,"deathCounter") ) { outValue = ( deathCounter ); return true; }
		if (HX_FIELD_EQ(inName,"sortHitNotes") ) { outValue = sortHitNotes_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { outValue = ( storyPlaylist ); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { outValue = ( prevCamFollow ); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { outValue = ( campaignScore ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"campaignMisses") ) { outValue = ( campaignMisses ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { outValue = ( storyDifficulty ); return true; }
		if (HX_FIELD_EQ(inName,"getKeyFromEvent") ) { outValue = getKeyFromEvent_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_isPixelStage") ) { outValue = get_isPixelStage_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"changedDifficulty") ) { outValue = ( changedDifficulty ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"STRUM_X_MIDDLESCROLL") ) { outValue = ( STRUM_X_MIDDLESCROLL ); return true; }
	}
	return false;
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { gf=inValue.Cast<  ::objects::Character >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { dad=inValue.Cast<  ::objects::Character >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"BF_X") ) { BF_X=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BF_Y") ) { BF_Y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GF_X") ) { GF_X=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GF_Y") ) { GF_Y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inst") ) { inst=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"gfMap") ) { gfMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DAD_X") ) { DAD_X=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DAD_Y") ) { DAD_Y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"notes") ) { notes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"combo") ) { combo=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"dadMap") ) { dadMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"health") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_health(inValue.Cast< Float >()) );health=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP1") ) { iconP1=inValue.Cast<  ::objects::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP2") ) { iconP2=inValue.Cast<  ::objects::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isDead") ) { isDead=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gfGroup") ) { gfGroup=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { gfSpeed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeBar") ) { timeBar=inValue.Cast<  ::objects::Bar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camGame") ) { camGame=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeTxt") ) { timeTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uiGroup") ) { uiGroup=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dadGroup") ) { dadGroup=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camOther") ) { camOther=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songHits") ) { songHits=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { scoreTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"luaArray") ) { luaArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songName") ) { songName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"debugNum") ) { debugNum=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canReset") ) { canReset=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canPause") ) { canPause=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratingFC") ) { ratingFC=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"variables") ) { variables=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songSpeed") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_songSpeed(inValue.Cast< Float >()) );songSpeed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"spawnTime") ) { spawnTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { boyfriend=inValue.Cast<  ::objects::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBar") ) { healthBar=inValue.Cast<  ::objects::Bar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songScore") ) { songScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keysArray") ) { keysArray=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteTypes") ) { noteTypes=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cameraTwn") ) { cameraTwn=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showCombo") ) { showCombo=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteGroup") ) { noteGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"eventNotes") ) { eventNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camZooming") ) { camZooming=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endingSong") ) { endingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updateTime") ) { updateTime=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthGain") ) { healthGain=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthLoss") ) { healthLoss=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"botplayTxt") ) { botplayTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songMisses") ) { songMisses=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { inCutscene=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songLength") ) { songLength=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startTimer") ) { startTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showRating") ) { showRating=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboGroup") ) { comboGroup=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratingName") ) { ratingName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"songPercent") ) { songPercent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratingsData") ) { ratingsData=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"botplaySine") ) { botplaySine=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cameraSpeed") ) { cameraSpeed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"detailsText") ) { detailsText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keysPressed") ) { keysPressed=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endCallback") ) { endCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"finishTimer") ) { finishTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"countdownGo") ) { countdownGo=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updateScore") ) { updateScore=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { totalPlayed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastStepHit") ) { lastStepHit=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastBeatHit") ) { lastBeatHit=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"boyfriendMap") ) { boyfriendMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hscriptArray") ) { hscriptArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playbackRate") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_playbackRate(inValue.Cast< Float >()) );playbackRate=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { unspawnNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playerStrums") ) { playerStrums=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startingSong") ) { startingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"practiceMode") ) { practiceMode=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"countdownSet") ) { countdownSet=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventsPushed") ) { eventsPushed=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"freezeCamera") ) { freezeCamera=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showComboNum") ) { showComboNum=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"modchartTexts") ) { modchartTexts=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"modchartSaves") ) { modchartSaves=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songSpeedType") ) { songSpeedType=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cpuControlled") ) { cpuControlled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scoreTxtTween") ) { scoreTxtTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skipCountdown") ) { skipCountdown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"luaDebugGroup") ) { luaDebugGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startCallback") ) { startCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialogueCount") ) { dialogueCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"psychDialogue") ) { psychDialogue=inValue.Cast<  ::cutscenes::DialogueBoxPsych >(); return inValue; }
		if (HX_FIELD_EQ(inName,"autoUpdateRPC") ) { autoUpdateRPC=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"transitioning") ) { transitioning=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { totalNotesHit=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumsBlocked") ) { strumsBlocked=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratingPercent") ) { ratingPercent=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"modchartTweens") ) { modchartTweens=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"modchartTimers") ) { modchartTimers=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"modchartSounds") ) { modchartSounds=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songSpeedTween") ) { songSpeedTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteKillOffset") ) { noteKillOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boyfriendGroup") ) { boyfriendGroup=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opponentVocals") ) { opponentVocals=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { strumLineNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opponentStrums") ) { opponentStrums=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camZoomingMult") ) { camZoomingMult=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { generatedMusic=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultCamZoom") ) { defaultCamZoom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"singAnimations") ) { singAnimations=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boyfriendIdled") ) { boyfriendIdled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"countdownReady") ) { countdownReady=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowDebugKeys") ) { allowDebugKeys=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"runtimeShaders") ) { runtimeShaders=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"modchartSprites") ) { modchartSprites=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpNoteSplashes") ) { grpNoteSplashes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camZoomingDecay") ) { camZoomingDecay=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"instakillOnMiss") ) { instakillOnMiss=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconsAnimations") ) { iconsAnimations=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"instancesExclude") ) { instancesExclude=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { startedCountdown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updateIconsScale") ) { updateIconsScale=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"detailsPausedText") ) { detailsPausedText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boyfriendIdleTime") ) { boyfriendIdleTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"introSoundsSuffix") ) { introSoundsSuffix=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fullComboFunction") ) { fullComboFunction=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"guitarHeroSustains") ) { guitarHeroSustains=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"isCameraOnForcedPos") ) { isCameraOnForcedPos=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { storyDifficultyText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skipArrowStartTween") ) { skipArrowStartTween=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updateIconsPosition") ) { updateIconsPosition=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"opponentCameraOffset") ) { opponentCameraOffset=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"boyfriendCameraOffset") ) { boyfriendCameraOffset=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"girlfriendCameraOffset") ) { girlfriendCameraOffset=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PlayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { SONG=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"STRUM_X") ) { STRUM_X=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"stageUI") ) { stageUI=ioValue.Cast< ::String >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curStage") ) { curStage=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::states::PlayState >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { storyWeek=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"ratingStuff") ) { ratingStuff=ioValue.Cast< ::cpp::VirtualArray >(); return true; }
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { isStoryMode=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { daPixelZoom=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"startOnTime") ) { startOnTime=ioValue.Cast< Float >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"chartingMode") ) { chartingMode=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"seenCutscene") ) { seenCutscene=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"deathCounter") ) { deathCounter=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { storyPlaylist=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { prevCamFollow=ioValue.Cast<  ::flixel::FlxObject >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { campaignScore=ioValue.Cast< int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"campaignMisses") ) { campaignMisses=ioValue.Cast< int >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { storyDifficulty=ioValue.Cast< int >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"changedDifficulty") ) { changedDifficulty=ioValue.Cast< bool >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"STRUM_X_MIDDLESCROLL") ) { STRUM_X_MIDDLESCROLL=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("isCameraOnForcedPos",ed,e7,4d,ae));
	outFields->push(HX_("boyfriendMap",52,d7,52,7c));
	outFields->push(HX_("dadMap",95,72,e2,17));
	outFields->push(HX_("gfMap",bd,45,ec,91));
	outFields->push(HX_("variables",b7,e2,62,82));
	outFields->push(HX_("hscriptArray",26,50,33,a7));
	outFields->push(HX_("instancesExclude",3c,67,47,cf));
	outFields->push(HX_("modchartTweens",a4,3b,b0,60));
	outFields->push(HX_("modchartSprites",52,dd,4d,c2));
	outFields->push(HX_("modchartTimers",0a,d5,5d,56));
	outFields->push(HX_("modchartSounds",c0,70,ba,69));
	outFields->push(HX_("modchartTexts",aa,96,8f,cd));
	outFields->push(HX_("modchartSaves",1a,96,82,37));
	outFields->push(HX_("BF_X",dd,85,d5,2b));
	outFields->push(HX_("BF_Y",de,85,d5,2b));
	outFields->push(HX_("DAD_X",00,3d,6a,52));
	outFields->push(HX_("DAD_Y",01,3d,6a,52));
	outFields->push(HX_("GF_X",f8,96,23,2f));
	outFields->push(HX_("GF_Y",f9,96,23,2f));
	outFields->push(HX_("songSpeedTween",99,fd,00,0f));
	outFields->push(HX_("songSpeed",72,df,e3,b0));
	outFields->push(HX_("songSpeedType",4c,9f,4f,95));
	outFields->push(HX_("noteKillOffset",63,b4,6d,a3));
	outFields->push(HX_("playbackRate",9b,3a,8b,c0));
	outFields->push(HX_("boyfriendGroup",75,99,09,ef));
	outFields->push(HX_("dadGroup",78,cb,28,42));
	outFields->push(HX_("gfGroup",a0,b8,ab,b0));
	outFields->push(HX_("spawnTime",e8,cf,87,ac));
	outFields->push(HX_("inst",c6,43,bb,45));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("opponentVocals",db,d1,18,64));
	outFields->push(HX_("dad",47,36,4c,00));
	outFields->push(HX_("gf",1f,5a,00,00));
	outFields->push(HX_("boyfriend",6a,29,b8,e6));
	outFields->push(HX_("notes",41,dc,ca,9f));
	outFields->push(HX_("unspawnNotes",9f,67,f2,45));
	outFields->push(HX_("eventNotes",c7,e5,25,1c));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("strumLineNotes",24,f1,48,a4));
	outFields->push(HX_("opponentStrums",87,04,01,1c));
	outFields->push(HX_("playerStrums",4b,e1,2a,0d));
	outFields->push(HX_("grpNoteSplashes",2c,f3,de,7b));
	outFields->push(HX_("camZooming",60,3b,bf,d6));
	outFields->push(HX_("camZoomingMult",70,ff,2e,c0));
	outFields->push(HX_("camZoomingDecay",ba,fb,ba,2f));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("gfSpeed",e8,9c,20,98));
	outFields->push(HX_("health",9c,28,06,fd));
	outFields->push(HX_("combo",4e,28,5d,4a));
	outFields->push(HX_("healthBar",97,8a,92,42));
	outFields->push(HX_("timeBar",c6,e3,d4,d8));
	outFields->push(HX_("songPercent",70,03,67,31));
	outFields->push(HX_("ratingsData",00,fb,a3,bb));
	outFields->push(HX_("generatedMusic",96,8a,5d,71));
	outFields->push(HX_("endingSong",5c,73,d7,67));
	outFields->push(HX_("startingSong",b5,31,61,33));
	outFields->push(HX_("updateTime",b6,b6,b1,05));
	outFields->push(HX_("healthGain",3b,c3,f4,00));
	outFields->push(HX_("healthLoss",9f,7c,4d,04));
	outFields->push(HX_("guitarHeroSustains",74,ae,d8,47));
	outFields->push(HX_("instakillOnMiss",94,43,20,66));
	outFields->push(HX_("cpuControlled",d6,1f,47,9e));
	outFields->push(HX_("practiceMode",be,79,8f,7f));
	outFields->push(HX_("botplaySine",68,97,39,87));
	outFields->push(HX_("botplayTxt",b5,49,12,88));
	outFields->push(HX_("iconP1",9a,bd,d6,45));
	outFields->push(HX_("iconP2",9b,bd,d6,45));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("camGame",a1,47,50,cf));
	outFields->push(HX_("camOther",41,4c,ae,3e));
	outFields->push(HX_("cameraSpeed",a2,8a,af,75));
	outFields->push(HX_("songScore",3d,bb,53,a8));
	outFields->push(HX_("songHits",35,a1,e6,32));
	outFields->push(HX_("songMisses",1f,08,d9,b1));
	outFields->push(HX_("scoreTxt",3e,12,c4,0e));
	outFields->push(HX_("timeTxt",63,a0,e2,d8));
	outFields->push(HX_("scoreTxtTween",4d,27,f9,cd));
	outFields->push(HX_("defaultCamZoom",01,50,2a,0b));
	outFields->push(HX_("singAnimations",1e,68,5b,a3));
	outFields->push(HX_("inCutscene",8f,21,01,56));
	outFields->push(HX_("skipCountdown",32,d2,d1,d7));
	outFields->push(HX_("songLength",9b,3a,8c,fa));
	outFields->push(HX_("boyfriendCameraOffset",a2,48,c6,c1));
	outFields->push(HX_("opponentCameraOffset",55,d9,b7,ff));
	outFields->push(HX_("girlfriendCameraOffset",f2,e8,79,8a));
	outFields->push(HX_("storyDifficultyText",5d,4b,db,c2));
	outFields->push(HX_("detailsText",8f,5e,84,21));
	outFields->push(HX_("detailsPausedText",dd,4f,70,44));
	outFields->push(HX_("keysPressed",0e,ff,53,27));
	outFields->push(HX_("boyfriendIdleTime",cb,18,1d,7c));
	outFields->push(HX_("boyfriendIdled",06,71,93,0c));
	outFields->push(HX_("luaArray",c1,48,f2,a3));
	outFields->push(HX_("luaDebugGroup",c4,37,82,dd));
	outFields->push(HX_("introSoundsSuffix",41,f3,b4,4c));
	outFields->push(HX_("keysArray",05,67,3a,17));
	outFields->push(HX_("songName",c0,d0,d7,36));
	outFields->push(HX_("dialogueCount",97,10,4a,e5));
	outFields->push(HX_("psychDialogue",73,c5,7a,86));
	outFields->push(HX_("startTimer",03,98,4c,2c));
	outFields->push(HX_("finishTimer",72,e2,3a,37));
	outFields->push(HX_("countdownReady",f2,9d,1b,12));
	outFields->push(HX_("countdownSet",71,c7,ba,2b));
	outFields->push(HX_("countdownGo",39,dd,2f,3e));
	outFields->push(HX_("debugNum",b3,39,d8,90));
	outFields->push(HX_("noteTypes",27,bb,58,58));
	outFields->push(HX_("eventsPushed",b2,b0,e9,17));
	outFields->push(HX_("skipArrowStartTween",13,8e,1f,fa));
	outFields->push(HX_("autoUpdateRPC",ed,be,35,64));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("canReset",9f,8b,5b,55));
	outFields->push(HX_("startedCountdown",30,57,28,9b));
	outFields->push(HX_("canPause",c6,18,eb,2b));
	outFields->push(HX_("freezeCamera",5c,20,14,42));
	outFields->push(HX_("allowDebugKeys",1e,68,d7,fc));
	outFields->push(HX_("iconsAnimations",69,b0,aa,40));
	outFields->push(HX_("isDead",ae,13,cd,5f));
	outFields->push(HX_("cameraTwn",e6,d3,33,3a));
	outFields->push(HX_("transitioning",6d,6a,93,94));
	outFields->push(HX_("totalPlayed",37,de,ee,fd));
	outFields->push(HX_("totalNotesHit",76,f4,57,a6));
	outFields->push(HX_("showCombo",11,8e,c1,78));
	outFields->push(HX_("showComboNum",b5,68,a3,9d));
	outFields->push(HX_("showRating",fa,d8,fe,24));
	outFields->push(HX_("comboGroup",11,20,ea,a7));
	outFields->push(HX_("uiGroup",4b,4c,ea,29));
	outFields->push(HX_("noteGroup",ed,fd,81,d7));
	outFields->push(HX_("strumsBlocked",02,35,0d,fa));
	outFields->push(HX_("lastStepHit",b1,62,ed,35));
	outFields->push(HX_("lastBeatHit",c7,9e,b0,28));
	outFields->push(HX_("ratingName",08,a5,2b,05));
	outFields->push(HX_("ratingPercent",28,0c,c7,29));
	outFields->push(HX_("ratingFC",9a,72,95,59));
	outFields->push(HX_("runtimeShaders",b6,bf,45,a4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(PlayState_obj,isCameraOnForcedPos),HX_("isCameraOnForcedPos",ed,e7,4d,ae)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,boyfriendMap),HX_("boyfriendMap",52,d7,52,7c)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,dadMap),HX_("dadMap",95,72,e2,17)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,gfMap),HX_("gfMap",bd,45,ec,91)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,variables),HX_("variables",b7,e2,62,82)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,hscriptArray),HX_("hscriptArray",26,50,33,a7)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,instancesExclude),HX_("instancesExclude",3c,67,47,cf)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,modchartTweens),HX_("modchartTweens",a4,3b,b0,60)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,modchartSprites),HX_("modchartSprites",52,dd,4d,c2)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,modchartTimers),HX_("modchartTimers",0a,d5,5d,56)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,modchartSounds),HX_("modchartSounds",c0,70,ba,69)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,modchartTexts),HX_("modchartTexts",aa,96,8f,cd)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,modchartSaves),HX_("modchartSaves",1a,96,82,37)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,BF_X),HX_("BF_X",dd,85,d5,2b)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,BF_Y),HX_("BF_Y",de,85,d5,2b)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,DAD_X),HX_("DAD_X",00,3d,6a,52)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,DAD_Y),HX_("DAD_Y",01,3d,6a,52)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,GF_X),HX_("GF_X",f8,96,23,2f)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,GF_Y),HX_("GF_Y",f9,96,23,2f)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(PlayState_obj,songSpeedTween),HX_("songSpeedTween",99,fd,00,0f)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songSpeed),HX_("songSpeed",72,df,e3,b0)},
	{::hx::fsString,(int)offsetof(PlayState_obj,songSpeedType),HX_("songSpeedType",4c,9f,4f,95)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,noteKillOffset),HX_("noteKillOffset",63,b4,6d,a3)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,playbackRate),HX_("playbackRate",9b,3a,8b,c0)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(PlayState_obj,boyfriendGroup),HX_("boyfriendGroup",75,99,09,ef)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(PlayState_obj,dadGroup),HX_("dadGroup",78,cb,28,42)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(PlayState_obj,gfGroup),HX_("gfGroup",a0,b8,ab,b0)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,spawnTime),HX_("spawnTime",e8,cf,87,ac)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(PlayState_obj,inst),HX_("inst",c6,43,bb,45)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(PlayState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(PlayState_obj,opponentVocals),HX_("opponentVocals",db,d1,18,64)},
	{::hx::fsObject /*  ::objects::Character */ ,(int)offsetof(PlayState_obj,dad),HX_("dad",47,36,4c,00)},
	{::hx::fsObject /*  ::objects::Character */ ,(int)offsetof(PlayState_obj,gf),HX_("gf",1f,5a,00,00)},
	{::hx::fsObject /*  ::objects::Character */ ,(int)offsetof(PlayState_obj,boyfriend),HX_("boyfriend",6a,29,b8,e6)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,notes),HX_("notes",41,dc,ca,9f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,unspawnNotes),HX_("unspawnNotes",9f,67,f2,45)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,eventNotes),HX_("eventNotes",c7,e5,25,1c)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(PlayState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,strumLineNotes),HX_("strumLineNotes",24,f1,48,a4)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,opponentStrums),HX_("opponentStrums",87,04,01,1c)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,playerStrums),HX_("playerStrums",4b,e1,2a,0d)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,grpNoteSplashes),HX_("grpNoteSplashes",2c,f3,de,7b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,camZooming),HX_("camZooming",60,3b,bf,d6)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,camZoomingMult),HX_("camZoomingMult",70,ff,2e,c0)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,camZoomingDecay),HX_("camZoomingDecay",ba,fb,ba,2f)},
	{::hx::fsString,(int)offsetof(PlayState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,gfSpeed),HX_("gfSpeed",e8,9c,20,98)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,health),HX_("health",9c,28,06,fd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,combo),HX_("combo",4e,28,5d,4a)},
	{::hx::fsObject /*  ::objects::Bar */ ,(int)offsetof(PlayState_obj,healthBar),HX_("healthBar",97,8a,92,42)},
	{::hx::fsObject /*  ::objects::Bar */ ,(int)offsetof(PlayState_obj,timeBar),HX_("timeBar",c6,e3,d4,d8)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songPercent),HX_("songPercent",70,03,67,31)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,ratingsData),HX_("ratingsData",00,fb,a3,bb)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,generatedMusic),HX_("generatedMusic",96,8a,5d,71)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,endingSong),HX_("endingSong",5c,73,d7,67)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startingSong),HX_("startingSong",b5,31,61,33)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,updateTime),HX_("updateTime",b6,b6,b1,05)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,healthGain),HX_("healthGain",3b,c3,f4,00)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,healthLoss),HX_("healthLoss",9f,7c,4d,04)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,guitarHeroSustains),HX_("guitarHeroSustains",74,ae,d8,47)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,instakillOnMiss),HX_("instakillOnMiss",94,43,20,66)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,cpuControlled),HX_("cpuControlled",d6,1f,47,9e)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,practiceMode),HX_("practiceMode",be,79,8f,7f)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,botplaySine),HX_("botplaySine",68,97,39,87)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,botplayTxt),HX_("botplayTxt",b5,49,12,88)},
	{::hx::fsObject /*  ::objects::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP1),HX_("iconP1",9a,bd,d6,45)},
	{::hx::fsObject /*  ::objects::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP2),HX_("iconP2",9b,bd,d6,45)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camGame),HX_("camGame",a1,47,50,cf)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camOther),HX_("camOther",41,4c,ae,3e)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,cameraSpeed),HX_("cameraSpeed",a2,8a,af,75)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songScore),HX_("songScore",3d,bb,53,a8)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songHits),HX_("songHits",35,a1,e6,32)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songMisses),HX_("songMisses",1f,08,d9,b1)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,scoreTxt),HX_("scoreTxt",3e,12,c4,0e)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,timeTxt),HX_("timeTxt",63,a0,e2,d8)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(PlayState_obj,scoreTxtTween),HX_("scoreTxtTween",4d,27,f9,cd)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,defaultCamZoom),HX_("defaultCamZoom",01,50,2a,0b)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,singAnimations),HX_("singAnimations",1e,68,5b,a3)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,inCutscene),HX_("inCutscene",8f,21,01,56)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,skipCountdown),HX_("skipCountdown",32,d2,d1,d7)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songLength),HX_("songLength",9b,3a,8c,fa)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(PlayState_obj,boyfriendCameraOffset),HX_("boyfriendCameraOffset",a2,48,c6,c1)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(PlayState_obj,opponentCameraOffset),HX_("opponentCameraOffset",55,d9,b7,ff)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(PlayState_obj,girlfriendCameraOffset),HX_("girlfriendCameraOffset",f2,e8,79,8a)},
	{::hx::fsString,(int)offsetof(PlayState_obj,storyDifficultyText),HX_("storyDifficultyText",5d,4b,db,c2)},
	{::hx::fsString,(int)offsetof(PlayState_obj,detailsText),HX_("detailsText",8f,5e,84,21)},
	{::hx::fsString,(int)offsetof(PlayState_obj,detailsPausedText),HX_("detailsPausedText",dd,4f,70,44)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(PlayState_obj,keysPressed),HX_("keysPressed",0e,ff,53,27)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,boyfriendIdleTime),HX_("boyfriendIdleTime",cb,18,1d,7c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,boyfriendIdled),HX_("boyfriendIdled",06,71,93,0c)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,luaArray),HX_("luaArray",c1,48,f2,a3)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,luaDebugGroup),HX_("luaDebugGroup",c4,37,82,dd)},
	{::hx::fsString,(int)offsetof(PlayState_obj,introSoundsSuffix),HX_("introSoundsSuffix",41,f3,b4,4c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,keysArray),HX_("keysArray",05,67,3a,17)},
	{::hx::fsString,(int)offsetof(PlayState_obj,songName),HX_("songName",c0,d0,d7,36)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PlayState_obj,startCallback),HX_("startCallback",47,fc,c1,83)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PlayState_obj,endCallback),HX_("endCallback",c0,2c,c5,36)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,dialogueCount),HX_("dialogueCount",97,10,4a,e5)},
	{::hx::fsObject /*  ::cutscenes::DialogueBoxPsych */ ,(int)offsetof(PlayState_obj,psychDialogue),HX_("psychDialogue",73,c5,7a,86)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(PlayState_obj,startTimer),HX_("startTimer",03,98,4c,2c)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(PlayState_obj,finishTimer),HX_("finishTimer",72,e2,3a,37)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,countdownReady),HX_("countdownReady",f2,9d,1b,12)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,countdownSet),HX_("countdownSet",71,c7,ba,2b)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,countdownGo),HX_("countdownGo",39,dd,2f,3e)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PlayState_obj,updateScore),HX_("updateScore",89,dc,71,5e)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PlayState_obj,fullComboFunction),HX_("fullComboFunction",77,e6,b6,d4)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,debugNum),HX_("debugNum",b3,39,d8,90)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,noteTypes),HX_("noteTypes",27,bb,58,58)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,eventsPushed),HX_("eventsPushed",b2,b0,e9,17)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,skipArrowStartTween),HX_("skipArrowStartTween",13,8e,1f,fa)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,autoUpdateRPC),HX_("autoUpdateRPC",ed,be,35,64)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,paused),HX_("paused",ae,40,84,ef)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,canReset),HX_("canReset",9f,8b,5b,55)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startedCountdown),HX_("startedCountdown",30,57,28,9b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,canPause),HX_("canPause",c6,18,eb,2b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,freezeCamera),HX_("freezeCamera",5c,20,14,42)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,allowDebugKeys),HX_("allowDebugKeys",1e,68,d7,fc)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PlayState_obj,updateIconsScale),HX_("updateIconsScale",b9,d4,f1,6d)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PlayState_obj,updateIconsPosition),HX_("updateIconsPosition",da,61,10,84)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,iconsAnimations),HX_("iconsAnimations",69,b0,aa,40)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,isDead),HX_("isDead",ae,13,cd,5f)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(PlayState_obj,cameraTwn),HX_("cameraTwn",e6,d3,33,3a)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,transitioning),HX_("transitioning",6d,6a,93,94)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,totalPlayed),HX_("totalPlayed",37,de,ee,fd)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,totalNotesHit),HX_("totalNotesHit",76,f4,57,a6)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,showCombo),HX_("showCombo",11,8e,c1,78)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,showComboNum),HX_("showComboNum",b5,68,a3,9d)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,showRating),HX_("showRating",fa,d8,fe,24)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(PlayState_obj,comboGroup),HX_("comboGroup",11,20,ea,a7)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(PlayState_obj,uiGroup),HX_("uiGroup",4b,4c,ea,29)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,noteGroup),HX_("noteGroup",ed,fd,81,d7)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(PlayState_obj,strumsBlocked),HX_("strumsBlocked",02,35,0d,fa)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lastStepHit),HX_("lastStepHit",b1,62,ed,35)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lastBeatHit),HX_("lastBeatHit",c7,9e,b0,28)},
	{::hx::fsString,(int)offsetof(PlayState_obj,ratingName),HX_("ratingName",08,a5,2b,05)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,ratingPercent),HX_("ratingPercent",28,0c,c7,29)},
	{::hx::fsString,(int)offsetof(PlayState_obj,ratingFC),HX_("ratingFC",9a,72,95,59)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,runtimeShaders),HX_("runtimeShaders",b6,bf,45,a4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &PlayState_obj::STRUM_X,HX_("STRUM_X",82,44,b5,80)},
	{::hx::fsInt,(void *) &PlayState_obj::STRUM_X_MIDDLESCROLL,HX_("STRUM_X_MIDDLESCROLL",3f,d6,d5,06)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(void *) &PlayState_obj::ratingStuff,HX_("ratingStuff",97,c9,9a,6e)},
	{::hx::fsString,(void *) &PlayState_obj::curStage,HX_("curStage",1e,65,b9,cb)},
	{::hx::fsString,(void *) &PlayState_obj::stageUI,HX_("stageUI",92,60,ca,2d)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &PlayState_obj::SONG,HX_("SONG",d5,eb,18,37)},
	{::hx::fsBool,(void *) &PlayState_obj::isStoryMode,HX_("isStoryMode",ae,68,02,07)},
	{::hx::fsInt,(void *) &PlayState_obj::storyWeek,HX_("storyWeek",89,3e,16,2f)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::storyPlaylist,HX_("storyPlaylist",67,a1,89,7c)},
	{::hx::fsInt,(void *) &PlayState_obj::storyDifficulty,HX_("storyDifficulty",90,ca,a7,d0)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(void *) &PlayState_obj::prevCamFollow,HX_("prevCamFollow",6d,99,a3,09)},
	{::hx::fsBool,(void *) &PlayState_obj::changedDifficulty,HX_("changedDifficulty",4f,3c,c6,3f)},
	{::hx::fsBool,(void *) &PlayState_obj::chartingMode,HX_("chartingMode",47,00,06,09)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignScore,HX_("campaignScore",22,22,d6,07)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignMisses,HX_("campaignMisses",9a,a9,70,e4)},
	{::hx::fsBool,(void *) &PlayState_obj::seenCutscene,HX_("seenCutscene",25,d1,95,b5)},
	{::hx::fsInt,(void *) &PlayState_obj::deathCounter,HX_("deathCounter",28,56,4b,1f)},
	{::hx::fsFloat,(void *) &PlayState_obj::daPixelZoom,HX_("daPixelZoom",7c,81,6e,df)},
	{::hx::fsObject /*  ::states::PlayState */ ,(void *) &PlayState_obj::instance,HX_("instance",95,1f,e1,59)},
	{::hx::fsFloat,(void *) &PlayState_obj::startOnTime,HX_("startOnTime",ce,32,6d,67)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("isCameraOnForcedPos",ed,e7,4d,ae),
	HX_("boyfriendMap",52,d7,52,7c),
	HX_("dadMap",95,72,e2,17),
	HX_("gfMap",bd,45,ec,91),
	HX_("variables",b7,e2,62,82),
	HX_("hscriptArray",26,50,33,a7),
	HX_("instancesExclude",3c,67,47,cf),
	HX_("modchartTweens",a4,3b,b0,60),
	HX_("modchartSprites",52,dd,4d,c2),
	HX_("modchartTimers",0a,d5,5d,56),
	HX_("modchartSounds",c0,70,ba,69),
	HX_("modchartTexts",aa,96,8f,cd),
	HX_("modchartSaves",1a,96,82,37),
	HX_("BF_X",dd,85,d5,2b),
	HX_("BF_Y",de,85,d5,2b),
	HX_("DAD_X",00,3d,6a,52),
	HX_("DAD_Y",01,3d,6a,52),
	HX_("GF_X",f8,96,23,2f),
	HX_("GF_Y",f9,96,23,2f),
	HX_("songSpeedTween",99,fd,00,0f),
	HX_("songSpeed",72,df,e3,b0),
	HX_("songSpeedType",4c,9f,4f,95),
	HX_("noteKillOffset",63,b4,6d,a3),
	HX_("playbackRate",9b,3a,8b,c0),
	HX_("boyfriendGroup",75,99,09,ef),
	HX_("dadGroup",78,cb,28,42),
	HX_("gfGroup",a0,b8,ab,b0),
	HX_("spawnTime",e8,cf,87,ac),
	HX_("inst",c6,43,bb,45),
	HX_("vocals",5e,10,51,59),
	HX_("opponentVocals",db,d1,18,64),
	HX_("dad",47,36,4c,00),
	HX_("gf",1f,5a,00,00),
	HX_("boyfriend",6a,29,b8,e6),
	HX_("notes",41,dc,ca,9f),
	HX_("unspawnNotes",9f,67,f2,45),
	HX_("eventNotes",c7,e5,25,1c),
	HX_("camFollow",e0,6e,47,22),
	HX_("strumLineNotes",24,f1,48,a4),
	HX_("opponentStrums",87,04,01,1c),
	HX_("playerStrums",4b,e1,2a,0d),
	HX_("grpNoteSplashes",2c,f3,de,7b),
	HX_("camZooming",60,3b,bf,d6),
	HX_("camZoomingMult",70,ff,2e,c0),
	HX_("camZoomingDecay",ba,fb,ba,2f),
	HX_("curSong",75,95,6d,b7),
	HX_("gfSpeed",e8,9c,20,98),
	HX_("health",9c,28,06,fd),
	HX_("combo",4e,28,5d,4a),
	HX_("healthBar",97,8a,92,42),
	HX_("timeBar",c6,e3,d4,d8),
	HX_("songPercent",70,03,67,31),
	HX_("ratingsData",00,fb,a3,bb),
	HX_("generatedMusic",96,8a,5d,71),
	HX_("endingSong",5c,73,d7,67),
	HX_("startingSong",b5,31,61,33),
	HX_("updateTime",b6,b6,b1,05),
	HX_("healthGain",3b,c3,f4,00),
	HX_("healthLoss",9f,7c,4d,04),
	HX_("guitarHeroSustains",74,ae,d8,47),
	HX_("instakillOnMiss",94,43,20,66),
	HX_("cpuControlled",d6,1f,47,9e),
	HX_("practiceMode",be,79,8f,7f),
	HX_("botplaySine",68,97,39,87),
	HX_("botplayTxt",b5,49,12,88),
	HX_("iconP1",9a,bd,d6,45),
	HX_("iconP2",9b,bd,d6,45),
	HX_("camHUD",e8,2b,76,b7),
	HX_("camGame",a1,47,50,cf),
	HX_("camOther",41,4c,ae,3e),
	HX_("cameraSpeed",a2,8a,af,75),
	HX_("songScore",3d,bb,53,a8),
	HX_("songHits",35,a1,e6,32),
	HX_("songMisses",1f,08,d9,b1),
	HX_("scoreTxt",3e,12,c4,0e),
	HX_("timeTxt",63,a0,e2,d8),
	HX_("scoreTxtTween",4d,27,f9,cd),
	HX_("defaultCamZoom",01,50,2a,0b),
	HX_("singAnimations",1e,68,5b,a3),
	HX_("inCutscene",8f,21,01,56),
	HX_("skipCountdown",32,d2,d1,d7),
	HX_("songLength",9b,3a,8c,fa),
	HX_("boyfriendCameraOffset",a2,48,c6,c1),
	HX_("opponentCameraOffset",55,d9,b7,ff),
	HX_("girlfriendCameraOffset",f2,e8,79,8a),
	HX_("storyDifficultyText",5d,4b,db,c2),
	HX_("detailsText",8f,5e,84,21),
	HX_("detailsPausedText",dd,4f,70,44),
	HX_("keysPressed",0e,ff,53,27),
	HX_("boyfriendIdleTime",cb,18,1d,7c),
	HX_("boyfriendIdled",06,71,93,0c),
	HX_("luaArray",c1,48,f2,a3),
	HX_("luaDebugGroup",c4,37,82,dd),
	HX_("introSoundsSuffix",41,f3,b4,4c),
	HX_("keysArray",05,67,3a,17),
	HX_("songName",c0,d0,d7,36),
	HX_("startCallback",47,fc,c1,83),
	HX_("endCallback",c0,2c,c5,36),
	HX_("create",fc,66,0f,7c),
	HX_("set_songSpeed",55,95,4d,b7),
	HX_("set_playbackRate",98,14,6c,1b),
	HX_("addTextToDebug",0a,a1,fa,14),
	HX_("reloadHealthBarColors",4e,b0,fa,fc),
	HX_("addCharacterToList",e1,1e,4c,45),
	HX_("startCharacterScripts",e1,b3,f6,2e),
	HX_("getLuaObject",21,03,b3,3c),
	HX_("startCharacterPos",ed,f4,a6,c5),
	HX_("startVideo",b9,ec,12,53),
	HX_("startAndEnd",46,3f,e6,d8),
	HX_("dialogueCount",97,10,4a,e5),
	HX_("psychDialogue",73,c5,7a,86),
	HX_("startDialogue",9a,8f,4f,ac),
	HX_("startTimer",03,98,4c,2c),
	HX_("finishTimer",72,e2,3a,37),
	HX_("countdownReady",f2,9d,1b,12),
	HX_("countdownSet",71,c7,ba,2b),
	HX_("countdownGo",39,dd,2f,3e),
	HX_("cacheCountdown",0f,3e,43,67),
	HX_("startCountdown",ef,1f,f0,88),
	HX_("createCountdownSprite",fa,97,3a,9e),
	HX_("addBehindGF",9a,c8,d5,d1),
	HX_("addBehindBF",3f,c4,d5,d1),
	HX_("addBehindDad",4c,8f,37,c9),
	HX_("clearNotesBefore",13,f3,9b,ac),
	HX_("updateScore",89,dc,71,5e),
	HX_("fullComboFunction",77,e6,b6,d4),
	HX_("doScoreBop",7c,78,2b,7c),
	HX_("setSongTime",44,f4,35,6b),
	HX_("startNextDialogue",ad,e4,be,ee),
	HX_("skipDialogue",b7,16,64,0f),
	HX_("startSong",57,9d,4b,05),
	HX_("debugNum",b3,39,d8,90),
	HX_("noteTypes",27,bb,58,58),
	HX_("eventsPushed",b2,b0,e9,17),
	HX_("generateSong",aa,ed,2b,1f),
	HX_("eventPushed",73,60,7a,c5),
	HX_("eventPushedUnique",e4,bf,cd,6f),
	HX_("eventEarlyTrigger",0f,d2,46,ab),
	HX_("makeEvent",4c,3f,5d,49),
	HX_("skipArrowStartTween",13,8e,1f,fa),
	HX_("generateStaticArrows",ad,44,90,42),
	HX_("openSubState",5b,66,48,37),
	HX_("closeSubState",49,18,32,04),
	HX_("onFocus",39,fe,c6,9a),
	HX_("onFocusLost",bd,e4,85,41),
	HX_("autoUpdateRPC",ed,be,35,64),
	HX_("resetRPC",56,00,dd,4f),
	HX_("resyncVocals",8c,16,ed,6a),
	HX_("paused",ae,40,84,ef),
	HX_("canReset",9f,8b,5b,55),
	HX_("startedCountdown",30,57,28,9b),
	HX_("canPause",c6,18,eb,2b),
	HX_("freezeCamera",5c,20,14,42),
	HX_("allowDebugKeys",1e,68,d7,fc),
	HX_("update",09,86,05,87),
	HX_("updateIconsScale",b9,d4,f1,6d),
	HX_("updateIconsPosition",da,61,10,84),
	HX_("iconsAnimations",69,b0,aa,40),
	HX_("set_health",d9,36,0b,f1),
	HX_("openPauseMenu",8b,0e,89,68),
	HX_("openChartEditor",81,41,b3,10),
	HX_("openCharacterEditor",8c,0d,19,93),
	HX_("isDead",ae,13,cd,5f),
	HX_("doDeathCheck",5f,34,16,ce),
	HX_("checkEventNote",44,0f,ce,5e),
	HX_("triggerEvent",c2,f7,5a,f4),
	HX_("moveCameraSection",ef,4b,d5,47),
	HX_("cameraTwn",e6,d3,33,3a),
	HX_("moveCamera",96,c0,ba,07),
	HX_("tweenCamIn",69,37,60,f8),
	HX_("finishSong",c8,b5,92,d8),
	HX_("transitioning",6d,6a,93,94),
	HX_("endSong",50,dd,7c,2e),
	HX_("KillNotes",a3,ef,fb,2e),
	HX_("totalPlayed",37,de,ee,fd),
	HX_("totalNotesHit",76,f4,57,a6),
	HX_("showCombo",11,8e,c1,78),
	HX_("showComboNum",b5,68,a3,9d),
	HX_("showRating",fa,d8,fe,24),
	HX_("comboGroup",11,20,ea,a7),
	HX_("uiGroup",4b,4c,ea,29),
	HX_("noteGroup",ed,fd,81,d7),
	HX_("cachePopUpScore",48,66,94,1e),
	HX_("popUpScore",66,a1,f2,3f),
	HX_("strumsBlocked",02,35,0d,fa),
	HX_("onKeyPress",a3,cd,a8,ea),
	HX_("keyPressed",c3,72,6e,a8),
	HX_("onKeyRelease",e7,c7,b8,9f),
	HX_("keyReleased",7c,05,0c,bf),
	HX_("keysCheck",34,92,61,37),
	HX_("noteMiss",0e,78,8f,57),
	HX_("noteMissPress",95,58,12,aa),
	HX_("noteMissCommon",d9,df,68,3e),
	HX_("opponentNoteHit",64,75,4c,b1),
	HX_("goodNoteHit",c4,4d,c4,22),
	HX_("invalidateNote",0d,37,d7,6e),
	HX_("spawnNoteSplashOnNote",e5,04,43,52),
	HX_("spawnNoteSplash",14,69,b8,ca),
	HX_("destroy",fa,2c,86,24),
	HX_("lastStepHit",b1,62,ed,35),
	HX_("stepHit",67,ae,41,81),
	HX_("lastBeatHit",c7,9e,b0,28),
	HX_("beatHit",7d,ea,04,74),
	HX_("characterBopper",43,ef,38,dc),
	HX_("playerDance",12,28,62,db),
	HX_("sectionHit",6e,f5,cd,be),
	HX_("startLuasNamed",3c,c1,7f,27),
	HX_("startHScriptsNamed",57,f5,22,8f),
	HX_("initHScript",63,6f,17,19),
	HX_("callOnScripts",2b,78,9a,06),
	HX_("callOnLuas",b8,07,76,15),
	HX_("callOnHScript",b6,7c,63,3a),
	HX_("setOnScripts",a7,74,de,28),
	HX_("setOnLuas",bc,a5,ed,49),
	HX_("setOnHScript",32,79,a7,5c),
	HX_("strumPlayAnim",8e,f4,4a,40),
	HX_("ratingName",08,a5,2b,05),
	HX_("ratingPercent",28,0c,c7,29),
	HX_("ratingFC",9a,72,95,59),
	HX_("RecalculateRating",b0,cb,cd,f8),
	HX_("runtimeShaders",b6,bf,45,a4),
	HX_("createRuntimeShader",81,55,08,17),
	HX_("initLuaShader",cd,69,3d,b0),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::STRUM_X,"STRUM_X");
	HX_MARK_MEMBER_NAME(PlayState_obj::STRUM_X_MIDDLESCROLL,"STRUM_X_MIDDLESCROLL");
	HX_MARK_MEMBER_NAME(PlayState_obj::ratingStuff,"ratingStuff");
	HX_MARK_MEMBER_NAME(PlayState_obj::curStage,"curStage");
	HX_MARK_MEMBER_NAME(PlayState_obj::stageUI,"stageUI");
	HX_MARK_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_MARK_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_MARK_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_MARK_MEMBER_NAME(PlayState_obj::changedDifficulty,"changedDifficulty");
	HX_MARK_MEMBER_NAME(PlayState_obj::chartingMode,"chartingMode");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignMisses,"campaignMisses");
	HX_MARK_MEMBER_NAME(PlayState_obj::seenCutscene,"seenCutscene");
	HX_MARK_MEMBER_NAME(PlayState_obj::deathCounter,"deathCounter");
	HX_MARK_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
	HX_MARK_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_MARK_MEMBER_NAME(PlayState_obj::startOnTime,"startOnTime");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::STRUM_X,"STRUM_X");
	HX_VISIT_MEMBER_NAME(PlayState_obj::STRUM_X_MIDDLESCROLL,"STRUM_X_MIDDLESCROLL");
	HX_VISIT_MEMBER_NAME(PlayState_obj::ratingStuff,"ratingStuff");
	HX_VISIT_MEMBER_NAME(PlayState_obj::curStage,"curStage");
	HX_VISIT_MEMBER_NAME(PlayState_obj::stageUI,"stageUI");
	HX_VISIT_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_VISIT_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_VISIT_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_VISIT_MEMBER_NAME(PlayState_obj::changedDifficulty,"changedDifficulty");
	HX_VISIT_MEMBER_NAME(PlayState_obj::chartingMode,"chartingMode");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignMisses,"campaignMisses");
	HX_VISIT_MEMBER_NAME(PlayState_obj::seenCutscene,"seenCutscene");
	HX_VISIT_MEMBER_NAME(PlayState_obj::deathCounter,"deathCounter");
	HX_VISIT_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
	HX_VISIT_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_VISIT_MEMBER_NAME(PlayState_obj::startOnTime,"startOnTime");
};

#endif

::hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_("STRUM_X",82,44,b5,80),
	HX_("STRUM_X_MIDDLESCROLL",3f,d6,d5,06),
	HX_("ratingStuff",97,c9,9a,6e),
	HX_("curStage",1e,65,b9,cb),
	HX_("stageUI",92,60,ca,2d),
	HX_("get_isPixelStage",6b,c3,b7,f9),
	HX_("SONG",d5,eb,18,37),
	HX_("isStoryMode",ae,68,02,07),
	HX_("storyWeek",89,3e,16,2f),
	HX_("storyPlaylist",67,a1,89,7c),
	HX_("storyDifficulty",90,ca,a7,d0),
	HX_("prevCamFollow",6d,99,a3,09),
	HX_("changedDifficulty",4f,3c,c6,3f),
	HX_("chartingMode",47,00,06,09),
	HX_("campaignScore",22,22,d6,07),
	HX_("campaignMisses",9a,a9,70,e4),
	HX_("seenCutscene",25,d1,95,b5),
	HX_("deathCounter",28,56,4b,1f),
	HX_("daPixelZoom",7c,81,6e,df),
	HX_("instance",95,1f,e1,59),
	HX_("startOnTime",ce,32,6d,67),
	HX_("sortByTime",82,fb,30,6f),
	HX_("sortHitNotes",6c,aa,d7,58),
	HX_("getKeyFromEvent",67,b2,00,25),
	::String(null())
};

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.PlayState",31,cd,20,04);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlayState_obj::__GetStatic;
	__mClass->mSetStaticField = &PlayState_obj::__SetStatic;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_80_boot)
HXDLIN(  80)		STRUM_X = 42;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_81_boot)
HXDLIN(  81)		STRUM_X_MIDDLESCROLL = -278;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_83_boot)
HXDLIN(  83)		ratingStuff = ::cpp::VirtualArray_obj::__new(10)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("You Suck!",d6,67,6b,07))->init(1,((Float)0.2)))->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Shit",e0,fb,2b,37))->init(1,((Float)0.4)))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Bad",a5,69,32,00))->init(1,((Float)0.5)))->init(3,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Bruh",43,fc,f6,2b))->init(1,((Float)0.6)))->init(4,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Meh",f0,c5,3a,00))->init(1,((Float)0.69)))->init(5,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Nice",bd,a7,de,33))->init(1,((Float)0.7)))->init(6,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Good",5d,c1,42,2f))->init(1,((Float)0.8)))->init(7,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Great",2d,7b,1a,2d))->init(1,((Float)0.9)))->init(8,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Sick!",83,09,f5,0f))->init(1,1))->init(9,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Perfect!!",0d,5f,8e,32))->init(1,1));
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_135_boot)
HXDLIN( 135)		curStage = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_136_boot)
HXDLIN( 136)		stageUI = HX_("normal",27,72,69,30);
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_143_boot)
HXDLIN( 143)		SONG = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_144_boot)
HXDLIN( 144)		isStoryMode = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_145_boot)
HXDLIN( 145)		storyWeek = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_146_boot)
HXDLIN( 146)		storyPlaylist = ::Array_obj< ::String >::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_147_boot)
HXDLIN( 147)		storyDifficulty = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_190_boot)
HXDLIN( 190)		changedDifficulty = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_191_boot)
HXDLIN( 191)		chartingMode = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_219_boot)
HXDLIN( 219)		campaignScore = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_220_boot)
HXDLIN( 220)		campaignMisses = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_221_boot)
HXDLIN( 221)		seenCutscene = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_222_boot)
HXDLIN( 222)		deathCounter = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_227_boot)
HXDLIN( 227)		daPixelZoom = ((Float)6);
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_923_boot)
HXDLIN( 923)		startOnTime = ((Float)0);
            	}
}

} // end namespace states
