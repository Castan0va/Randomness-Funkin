// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Conductor
#include <backend/Conductor.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_CoolUtil
#include <backend/CoolUtil.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_Rating
#include <backend/Rating.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSort
#include <flixel/util/FlxSort.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_objects_Character
#include <objects/Character.h>
#endif
#ifndef INCLUDED_objects_Note
#include <objects/Note.h>
#endif
#ifndef INCLUDED_objects_NoteSplash
#include <objects/NoteSplash.h>
#endif
#ifndef INCLUDED_objects_StrumNote
#include <objects/StrumNote.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_states_editors_ChartingState
#include <states/editors/ChartingState.h>
#endif
#ifndef INCLUDED_states_editors_EditorPlayState
#include <states/editors/EditorPlayState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9bca58946d5b3941_21_new,"states.editors.EditorPlayState","new",0xf5c7d56e,"states.editors.EditorPlayState.new","states/editors/EditorPlayState.hx",21,0x90020344)
static const ::String _hx_array_data_b041467c_1[] = {
	HX_("note_left",b4,fe,20,a5),HX_("note_down",0f,ef,de,9f),HX_("note_up",c8,67,5c,4d),HX_("note_right",8f,ec,ca,4e),
};
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_156_update,"states.editors.EditorPlayState","update",0xc9639dbb,"states.editors.EditorPlayState.update","states/editors/EditorPlayState.hx",156,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_194_update,"states.editors.EditorPlayState","update",0xc9639dbb,"states.editors.EditorPlayState.update","states/editors/EditorPlayState.hx",194,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_228_stepHit,"states.editors.EditorPlayState","stepHit",0x51385275,"states.editors.EditorPlayState.stepHit","states/editors/EditorPlayState.hx",228,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_250_beatHit,"states.editors.EditorPlayState","beatHit",0x43fb8e8b,"states.editors.EditorPlayState.beatHit","states/editors/EditorPlayState.hx",250,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_255_beatHit,"states.editors.EditorPlayState","beatHit",0x43fb8e8b,"states.editors.EditorPlayState.beatHit","states/editors/EditorPlayState.hx",255,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_262_sectionHit,"states.editors.EditorPlayState","sectionHit",0x3cd6ce20,"states.editors.EditorPlayState.sectionHit","states/editors/EditorPlayState.hx",262,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_272_destroy,"states.editors.EditorPlayState","destroy",0xf47cd108,"states.editors.EditorPlayState.destroy","states/editors/EditorPlayState.hx",272,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_280_startSong,"states.editors.EditorPlayState","startSong",0xbb3de0e5,"states.editors.EditorPlayState.startSong","states/editors/EditorPlayState.hx",280,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_300_generateSong,"states.editors.EditorPlayState","generateSong",0xd3a1d6dc,"states.editors.EditorPlayState.generateSong","states/editors/EditorPlayState.hx",300,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_452_generateStaticArrows,"states.editors.EditorPlayState","generateStaticArrows",0xdfbdafdf,"states.editors.EditorPlayState.generateStaticArrows","states/editors/EditorPlayState.hx",452,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_489_finishSong,"states.editors.EditorPlayState","finishSong",0x569b8e7a,"states.editors.EditorPlayState.finishSong","states/editors/EditorPlayState.hx",489,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_494_finishSong,"states.editors.EditorPlayState","finishSong",0x569b8e7a,"states.editors.EditorPlayState.finishSong","states/editors/EditorPlayState.hx",494,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_500_endSong,"states.editors.EditorPlayState","endSong",0xfe73815e,"states.editors.EditorPlayState.endSong","states/editors/EditorPlayState.hx",500,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_514_cachePopUpScore,"states.editors.EditorPlayState","cachePopUpScore",0x0502c856,"states.editors.EditorPlayState.cachePopUpScore","states/editors/EditorPlayState.hx",514,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_670_popUpScore,"states.editors.EditorPlayState","popUpScore",0xbdfb7a18,"states.editors.EditorPlayState.popUpScore","states/editors/EditorPlayState.hx",670,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_523_popUpScore,"states.editors.EditorPlayState","popUpScore",0xbdfb7a18,"states.editors.EditorPlayState.popUpScore","states/editors/EditorPlayState.hx",523,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_647_popUpScore,"states.editors.EditorPlayState","popUpScore",0xbdfb7a18,"states.editors.EditorPlayState.popUpScore","states/editors/EditorPlayState.hx",647,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_681_onKeyPress,"states.editors.EditorPlayState","onKeyPress",0x68b1a655,"states.editors.EditorPlayState.onKeyPress","states/editors/EditorPlayState.hx",681,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_698_keyPressed,"states.editors.EditorPlayState","keyPressed",0x26774b75,"states.editors.EditorPlayState.keyPressed","states/editors/EditorPlayState.hx",698,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_748_onKeyRelease,"states.editors.EditorPlayState","onKeyRelease",0x542eb119,"states.editors.EditorPlayState.onKeyRelease","states/editors/EditorPlayState.hx",748,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_757_keyReleased,"states.editors.EditorPlayState","keyReleased",0x88c0c88a,"states.editors.EditorPlayState.keyReleased","states/editors/EditorPlayState.hx",757,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_768_keysCheck,"states.editors.EditorPlayState","keysCheck",0xed53d5c2,"states.editors.EditorPlayState.keysCheck","states/editors/EditorPlayState.hx",768,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_816_opponentNoteHit,"states.editors.EditorPlayState","opponentNoteHit",0x97bad772,"states.editors.EditorPlayState.opponentNoteHit","states/editors/EditorPlayState.hx",816,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_832_goodNoteHit,"states.editors.EditorPlayState","goodNoteHit",0xec7910d2,"states.editors.EditorPlayState.goodNoteHit","states/editors/EditorPlayState.hx",832,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_867_noteMiss,"states.editors.EditorPlayState","noteMiss",0x7f686040,"states.editors.EditorPlayState.noteMiss","states/editors/EditorPlayState.hx",867,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_864_noteMiss,"states.editors.EditorPlayState","noteMiss",0x7f686040,"states.editors.EditorPlayState.noteMiss","states/editors/EditorPlayState.hx",864,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_912_invalidateNote,"states.editors.EditorPlayState","invalidateNote",0x9b7f50bf,"states.editors.EditorPlayState.invalidateNote","states/editors/EditorPlayState.hx",912,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_919_spawnNoteSplashOnNote,"states.editors.EditorPlayState","spawnNoteSplashOnNote",0x3cd36573,"states.editors.EditorPlayState.spawnNoteSplashOnNote","states/editors/EditorPlayState.hx",919,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_926_spawnNoteSplash,"states.editors.EditorPlayState","spawnNoteSplash",0xb126cb22,"states.editors.EditorPlayState.spawnNoteSplash","states/editors/EditorPlayState.hx",926,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_933_resyncVocals,"states.editors.EditorPlayState","resyncVocals",0x1f62ffbe,"states.editors.EditorPlayState.resyncVocals","states/editors/EditorPlayState.hx",933,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_954_RecalculateRating,"states.editors.EditorPlayState","RecalculateRating",0x21234d3e,"states.editors.EditorPlayState.RecalculateRating","states/editors/EditorPlayState.hx",954,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_963_updateScore,"states.editors.EditorPlayState","updateScore",0x28269f97,"states.editors.EditorPlayState.updateScore","states/editors/EditorPlayState.hx",963,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_974_fullComboUpdate,"states.editors.EditorPlayState","fullComboUpdate",0xf9e03db6,"states.editors.EditorPlayState.fullComboUpdate","states/editors/EditorPlayState.hx",974,0x90020344)
HX_LOCAL_STACK_FRAME(_hx_pos_9bca58946d5b3941_991_loadCharacterFile,"states.editors.EditorPlayState","loadCharacterFile",0xc8b8b64d,"states.editors.EditorPlayState.loadCharacterFile","states/editors/EditorPlayState.hx",991,0x90020344)
namespace states{
namespace editors{

void EditorPlayState_obj::__construct(Float playbackRate){
            	HX_GC_STACKFRAME(&_hx_pos_9bca58946d5b3941_21_new)
HXLINE( 248)		this->lastBeatHit = -1;
HXLINE( 226)		this->lastStepHit = -1;
HXLINE(  75)		this->guitarHeroSustains = false;
HXLINE(  71)		this->timerToStart = ((Float)0);
HXLINE(  70)		this->startPos = ((Float)0);
HXLINE(  69)		this->startOffset = ((Float)0);
HXLINE(  66)		this->showRating = true;
HXLINE(  65)		this->showComboNum = true;
HXLINE(  64)		this->showCombo = false;
HXLINE(  60)		this->totalNotesHit = ((Float)0.0);
HXLINE(  59)		this->totalPlayed = 0;
HXLINE(  57)		this->songSpeed = ((Float)1);
HXLINE(  56)		this->songLength = ((Float)0);
HXLINE(  55)		this->songMisses = 0;
HXLINE(  54)		this->songHits = 0;
HXLINE(  47)		this->keysArray = ::Array_obj< ::String >::fromData( _hx_array_data_b041467c_1,4);
HXLINE(  46)		this->lastScore = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  43)		this->combo = 0;
HXLINE(  36)		this->ratingsData = ::backend::Rating_obj::loadDefault();
HXLINE(  35)		this->unspawnNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  29)		this->playbackRate = ((Float)1);
HXLINE(  27)		this->startingSong = true;
HXLINE(  26)		this->spawnTime = ((Float)2000);
HXLINE(  25)		this->noteKillOffset = ((Float)350);
HXLINE(  24)		this->finishTimer = null();
HXLINE(  79)		super::__construct();
HXLINE(  82)		this->playbackRate = playbackRate;
HXLINE(  83)		this->startPos = ::backend::Conductor_obj::songPosition;
HXLINE(  85)		::backend::Conductor_obj::safeZoneOffset = (((::backend::ClientPrefs_obj::data->safeFrames / ( (Float)(60) )) * ( (Float)(1000) )) * playbackRate);
HXLINE(  86)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::backend::Conductor >();
HXDLIN(  86)		::backend::Conductor_obj::songPosition = (::backend::Conductor_obj::songPosition - this->startOffset);
HXLINE(  87)		this->startOffset = ::backend::Conductor_obj::crochet;
HXLINE(  88)		this->timerToStart = this->startOffset;
HXLINE(  91)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(  92)			 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(  92)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(  94)		this->cachePopUpScore();
HXLINE(  95)		this->guitarHeroSustains = ::backend::ClientPrefs_obj::data->guitarHeroSustains;
HXLINE(  96)		if ((::backend::ClientPrefs_obj::data->hitsoundVolume > 0)) {
HXLINE(  96)			::backend::Paths_obj::sound(HX_("hitsound",9c,79,fe,2c),null());
            		}
HXLINE(  99)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  99)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(::backend::Paths_obj::image(HX_("menuDesat",26,91,04,72),null(),null()),null(),null(),null(),null(),null());
HXLINE( 100)		bg1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 101)		{
HXLINE( 101)			 ::flixel::math::FlxBasePoint this1 = bg1->scrollFactor;
HXDLIN( 101)			this1->set_x(( (Float)(0) ));
HXDLIN( 101)			this1->set_y(( (Float)(0) ));
            		}
HXLINE( 102)		bg1->set_color(-15724528);
HXLINE( 103)		bg1->set_alpha(((Float)0.9));
HXLINE( 104)		this->add(bg1);
HXLINE( 107)		this->strumLineNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 108)		this->add(this->strumLineNotes);
HXLINE( 109)		this->grpNoteSplashes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 110)		this->add(this->grpNoteSplashes);
HXLINE( 112)		 ::objects::NoteSplash splash =  ::objects::NoteSplash_obj::__alloc( HX_CTX ,100,100);
HXLINE( 113)		this->grpNoteSplashes->add(splash).StaticCast<  ::objects::NoteSplash >();
HXLINE( 114)		splash->set_alpha(((Float)0.000001));
HXLINE( 116)		this->opponentStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 117)		this->playerStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 119)		this->generateStaticArrows(0);
HXLINE( 120)		this->generateStaticArrows(1);
HXLINE( 123)		this->scoreTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,(::flixel::FlxG_obj::height - 50),(::flixel::FlxG_obj::width - 20),HX_("",00,00,00,00),20,null());
HXLINE( 124)		 ::flixel::text::FlxText _hx_tmp1 = this->scoreTxt;
HXDLIN( 124)		::String file = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN( 124)		::String _hx_tmp2;
HXDLIN( 124)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 124)			_hx_tmp2 = file;
            		}
            		else {
HXLINE( 124)			_hx_tmp2 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN( 124)		_hx_tmp1->setFormat(_hx_tmp2,20,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 125)		{
HXLINE( 125)			 ::flixel::math::FlxBasePoint this2 = this->scoreTxt->scrollFactor;
HXDLIN( 125)			this2->set_x(( (Float)(0) ));
HXDLIN( 125)			this2->set_y(( (Float)(0) ));
            		}
HXLINE( 126)		this->scoreTxt->set_borderSize(((Float)1.25));
HXLINE( 127)		this->scoreTxt->set_visible(!(::backend::ClientPrefs_obj::data->hideHud));
HXLINE( 128)		this->add(this->scoreTxt);
HXLINE( 130)		this->dataTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,580,(::flixel::FlxG_obj::width - 20),HX_("Section: 0",25,1a,74,b5),20,null());
HXLINE( 131)		 ::flixel::text::FlxText _hx_tmp3 = this->dataTxt;
HXDLIN( 131)		::String file1 = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN( 131)		::String _hx_tmp4;
HXDLIN( 131)		if (::sys::FileSystem_obj::exists(file1)) {
HXLINE( 131)			_hx_tmp4 = file1;
            		}
            		else {
HXLINE( 131)			_hx_tmp4 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN( 131)		_hx_tmp3->setFormat(_hx_tmp4,20,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 132)		{
HXLINE( 132)			 ::flixel::math::FlxBasePoint this3 = this->dataTxt->scrollFactor;
HXDLIN( 132)			this3->set_x(( (Float)(0) ));
HXDLIN( 132)			this3->set_y(( (Float)(0) ));
            		}
HXLINE( 133)		this->dataTxt->set_borderSize(((Float)1.25));
HXLINE( 134)		this->add(this->dataTxt);
HXLINE( 136)		 ::flixel::text::FlxText tipText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,(::flixel::FlxG_obj::height - 24),0,HX_("Press ESC to Go Back to Chart Editor",56,a4,78,84),16,null());
HXLINE( 137)		::String file2 = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN( 137)		::String _hx_tmp5;
HXDLIN( 137)		if (::sys::FileSystem_obj::exists(file2)) {
HXLINE( 137)			_hx_tmp5 = file2;
            		}
            		else {
HXLINE( 137)			_hx_tmp5 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN( 137)		tipText->setFormat(_hx_tmp5,16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 138)		tipText->set_borderSize(( (Float)(2) ));
HXLINE( 139)		{
HXLINE( 139)			 ::flixel::math::FlxBasePoint this4 = tipText->scrollFactor;
HXDLIN( 139)			this4->set_x(( (Float)(0) ));
HXDLIN( 139)			this4->set_y(( (Float)(0) ));
            		}
HXLINE( 140)		this->add(tipText);
HXLINE( 141)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE( 143)		this->generateSong(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
HXLINE( 145)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->onKeyPress_dyn(),null(),null(),null());
HXLINE( 146)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyUp",da,b9,fe,de),this->onKeyRelease_dyn(),null(),null(),null());
HXLINE( 150)		::backend::DiscordClient_obj::changePresence(HX_("Playtesting on Chart Editor",ac,6c,73,1c),( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),null(),true,this->songLength);
HXLINE( 152)		this->RecalculateRating(null());
            	}

Dynamic EditorPlayState_obj::__CreateEmpty() { return new EditorPlayState_obj; }

void *EditorPlayState_obj::_hx_vtable = 0;

Dynamic EditorPlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EditorPlayState_obj > _hx_result = new EditorPlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool EditorPlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5661ffbf) {
		if (inClassId<=(int)0x3c0818b8) {
			if (inClassId<=(int)0x08dd198c) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x08dd198c;
			} else {
				return inClassId==(int)0x3c0818b8;
			}
		} else {
			return inClassId==(int)0x563293a6 || inClassId==(int)0x5661ffbf;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void EditorPlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_156_update)
HXDLIN( 156)		 ::states::editors::EditorPlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 157)		bool _hx_tmp;
HXDLIN( 157)		if (!(::backend::Controls_obj::instance->get_BACK())) {
HXLINE( 157)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 157)			_hx_tmp = _this->keyManager->checkStatusUnsafe(27,_this->status);
            		}
            		else {
HXLINE( 157)			_hx_tmp = true;
            		}
HXDLIN( 157)		if (_hx_tmp) {
HXLINE( 159)			this->endSong();
HXLINE( 160)			this->super::update(elapsed);
HXLINE( 161)			return;
            		}
HXLINE( 164)		if (this->startingSong) {
HXLINE( 166)			 ::states::editors::EditorPlayState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 166)			_hx_tmp1->timerToStart = (_hx_tmp1->timerToStart - (elapsed * ( (Float)(1000) )));
HXLINE( 167)			::backend::Conductor_obj::songPosition = (this->startPos - this->timerToStart);
HXLINE( 168)			if ((this->timerToStart < 0)) {
HXLINE( 168)				this->startSong();
            			}
            		}
            		else {
HXLINE( 170)			 ::Dynamic _hx_tmp2 = ::hx::ClassOf< ::backend::Conductor >();
HXDLIN( 170)			::backend::Conductor_obj::songPosition = (::backend::Conductor_obj::songPosition + ((elapsed * ( (Float)(1000) )) * this->playbackRate));
            		}
HXLINE( 172)		if (::hx::IsNotNull( this->unspawnNotes->__get(0).StaticCast<  ::objects::Note >() )) {
HXLINE( 174)			Float time = (this->spawnTime * this->playbackRate);
HXLINE( 175)			if ((this->songSpeed < 1)) {
HXLINE( 175)				time = (time / this->songSpeed);
            			}
HXLINE( 176)			if ((this->unspawnNotes->__get(0).StaticCast<  ::objects::Note >()->multSpeed < 1)) {
HXLINE( 176)				time = (time / this->unspawnNotes->__get(0).StaticCast<  ::objects::Note >()->multSpeed);
            			}
HXLINE( 178)			while(true){
HXLINE( 178)				bool _hx_tmp3;
HXDLIN( 178)				if ((this->unspawnNotes->length > 0)) {
HXLINE( 178)					_hx_tmp3 = ((this->unspawnNotes->__get(0).StaticCast<  ::objects::Note >()->strumTime - ::backend::Conductor_obj::songPosition) < time);
            				}
            				else {
HXLINE( 178)					_hx_tmp3 = false;
            				}
HXDLIN( 178)				if (!(_hx_tmp3)) {
HXLINE( 178)					goto _hx_goto_2;
            				}
HXLINE( 180)				 ::objects::Note dunceNote = this->unspawnNotes->__get(0).StaticCast<  ::objects::Note >();
HXLINE( 181)				this->notes->insert(0,dunceNote).StaticCast<  ::objects::Note >();
HXLINE( 182)				dunceNote->spawned = true;
HXLINE( 184)				int index = this->unspawnNotes->indexOf(dunceNote,null());
HXLINE( 185)				this->unspawnNotes->removeRange(index,1);
            			}
            			_hx_goto_2:;
            		}
HXLINE( 189)		this->keysCheck();
HXLINE( 190)		if ((this->notes->length > 0)) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,Float,fakeCrochet, ::states::editors::EditorPlayState,_gthis) HXARGC(1)
            			void _hx_run( ::objects::Note daNote){
            				HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_194_update)
HXLINE( 195)				 ::flixel::group::FlxTypedGroup strumGroup = _gthis->playerStrums;
HXLINE( 196)				if (!(daNote->mustPress)) {
HXLINE( 196)					strumGroup = _gthis->opponentStrums;
            				}
HXLINE( 198)				 ::objects::StrumNote strum = Dynamic( strumGroup->members->__get(daNote->noteData)).StaticCast<  ::objects::StrumNote >();
HXLINE( 199)				daNote->followStrumNote(strum,fakeCrochet,(_gthis->songSpeed / _gthis->playbackRate));
HXLINE( 201)				bool _hx_tmp;
HXDLIN( 201)				bool _hx_tmp1;
HXDLIN( 201)				bool _hx_tmp2;
HXDLIN( 201)				if (!(daNote->mustPress)) {
HXLINE( 201)					_hx_tmp2 = daNote->wasGoodHit;
            				}
            				else {
HXLINE( 201)					_hx_tmp2 = false;
            				}
HXDLIN( 201)				if (_hx_tmp2) {
HXLINE( 201)					_hx_tmp1 = !(daNote->hitByOpponent);
            				}
            				else {
HXLINE( 201)					_hx_tmp1 = false;
            				}
HXDLIN( 201)				if (_hx_tmp1) {
HXLINE( 201)					_hx_tmp = !(daNote->ignoreNote);
            				}
            				else {
HXLINE( 201)					_hx_tmp = false;
            				}
HXDLIN( 201)				if (_hx_tmp) {
HXLINE( 202)					_gthis->opponentNoteHit(daNote);
            				}
HXLINE( 204)				bool _hx_tmp3;
HXDLIN( 204)				if (daNote->isSustainNote) {
HXLINE( 204)					_hx_tmp3 = strum->sustainReduce;
            				}
            				else {
HXLINE( 204)					_hx_tmp3 = false;
            				}
HXDLIN( 204)				if (_hx_tmp3) {
HXLINE( 204)					daNote->clipToStrumNote(strum);
            				}
HXLINE( 207)				if (((::backend::Conductor_obj::songPosition - daNote->strumTime) > _gthis->noteKillOffset)) {
HXLINE( 209)					bool _hx_tmp4;
HXDLIN( 209)					bool _hx_tmp5;
HXDLIN( 209)					if (daNote->mustPress) {
HXLINE( 209)						_hx_tmp5 = !(daNote->ignoreNote);
            					}
            					else {
HXLINE( 209)						_hx_tmp5 = false;
            					}
HXDLIN( 209)					if (_hx_tmp5) {
HXLINE( 209)						if (!(daNote->tooLate)) {
HXLINE( 209)							_hx_tmp4 = !(daNote->wasGoodHit);
            						}
            						else {
HXLINE( 209)							_hx_tmp4 = true;
            						}
            					}
            					else {
HXLINE( 209)						_hx_tmp4 = false;
            					}
HXDLIN( 209)					if (_hx_tmp4) {
HXLINE( 210)						_gthis->noteMiss(daNote);
            					}
HXLINE( 212)					daNote->set_active(daNote->set_visible(false));
HXLINE( 213)					_gthis->invalidateNote(daNote);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 192)			Float fakeCrochet = ((( (Float)(60) ) / ( (Float)(::states::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) )) * ( (Float)(1000) ));
HXLINE( 193)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(fakeCrochet,_gthis)),null());
            		}
HXLINE( 218)		Float time1 = ::backend::CoolUtil_obj::floorDecimal(((::backend::Conductor_obj::songPosition - ( (Float)(::backend::ClientPrefs_obj::data->noteOffset) )) / ( (Float)(1000) )),1);
HXLINE( 219)		this->dataTxt->set_text((((((((((HX_("Time: ",13,50,66,53) + time1) + HX_(" / ",31,71,18,00)) + (this->songLength / ( (Float)(1000) ))) + HX_("\n\t\t\t\t\t\t\nSection: ",0b,06,86,2b)) + this->curSection) + HX_("\n\t\t\t\t\t\t\nBeat: ",5c,2b,4a,81)) + this->curBeat) + HX_("\n\t\t\t\t\t\t\nStep: ",b2,d2,ff,f2)) + this->curStep));
HXLINE( 223)		this->super::update(elapsed);
            	}


void EditorPlayState_obj::stepHit(){
            	HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_228_stepHit)
HXLINE( 229)		bool _hx_tmp;
HXDLIN( 229)		if (( (bool)(::states::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE( 229)			_hx_tmp = (::flixel::FlxG_obj::sound->music->_time >= -(::backend::ClientPrefs_obj::data->noteOffset));
            		}
            		else {
HXLINE( 229)			_hx_tmp = false;
            		}
HXDLIN( 229)		if (_hx_tmp) {
HXLINE( 231)			Float timeSub = (::backend::Conductor_obj::songPosition - ::backend::Conductor_obj::offset);
HXLINE( 232)			Float syncTime = (( (Float)(20) ) * this->playbackRate);
HXLINE( 233)			bool _hx_tmp1;
HXDLIN( 233)			bool _hx_tmp2;
HXDLIN( 233)			if (!((::Math_obj::abs((::flixel::FlxG_obj::sound->music->_time - timeSub)) > syncTime))) {
HXLINE( 234)				if ((this->vocals->_length > 0)) {
HXLINE( 233)					_hx_tmp2 = (::Math_obj::abs((this->vocals->_time - timeSub)) > syncTime);
            				}
            				else {
HXLINE( 233)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE( 233)				_hx_tmp2 = true;
            			}
HXDLIN( 233)			if (!(_hx_tmp2)) {
HXLINE( 235)				if ((this->opponentVocals->_length > 0)) {
HXLINE( 233)					_hx_tmp1 = (::Math_obj::abs((this->opponentVocals->_time - timeSub)) > syncTime);
            				}
            				else {
HXLINE( 233)					_hx_tmp1 = false;
            				}
            			}
            			else {
HXLINE( 233)				_hx_tmp1 = true;
            			}
HXDLIN( 233)			if (_hx_tmp1) {
HXLINE( 237)				this->resyncVocals();
            			}
            		}
HXLINE( 240)		this->super::stepHit();
HXLINE( 242)		if ((this->curStep == this->lastStepHit)) {
HXLINE( 243)			return;
            		}
HXLINE( 245)		this->lastStepHit = this->curStep;
            	}


void EditorPlayState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_250_beatHit)
HXLINE( 251)		if ((this->lastBeatHit >= this->curBeat)) {
HXLINE( 253)			return;
            		}
HXLINE( 255)		{
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,int,a1, ::Dynamic,_g) HXARGC(2)
            			int _hx_run( ::objects::Note a2, ::objects::Note a3){
            				HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_255_beatHit)
HXLINE( 255)				return ( (int)(_g(a1,a2,a3)) );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 255)			int order;
HXDLIN( 255)			if (::backend::ClientPrefs_obj::data->downScroll) {
HXLINE( 255)				order = -1;
            			}
            			else {
HXLINE( 255)				order = 1;
            			}
HXDLIN( 255)			 ::Dynamic _g = ::flixel::util::FlxSort_obj::byY_dyn();
HXDLIN( 255)			int a1 = order;
HXDLIN( 255)			 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(a1,_g));
HXDLIN( 255)			this->notes->members->sort(_hx_tmp);
            		}
HXLINE( 257)		this->super::beatHit();
HXLINE( 258)		this->lastBeatHit = this->curBeat;
            	}


void EditorPlayState_obj::sectionHit(){
            	HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_262_sectionHit)
HXLINE( 263)		if (::hx::IsNotNull(  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection) )) {
HXLINE( 265)			if (( (bool)( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE( 266)				::backend::Conductor_obj::set_bpm(( (Float)( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
            			}
            		}
HXLINE( 268)		this->super::sectionHit();
            	}


void EditorPlayState_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_272_destroy)
HXLINE( 273)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->onKeyPress_dyn(),null());
HXLINE( 274)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->onKeyRelease_dyn(),null());
HXLINE( 275)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 276)		this->super::destroy();
            	}


void EditorPlayState_obj::startSong(){
            	HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_280_startSong)
HXLINE( 281)		this->startingSong = false;
HXLINE( 283)		::flixel::FlxG_obj::sound->playMusic(this->inst->_sound,1,false,null());
HXLINE( 284)		::flixel::FlxG_obj::sound->music->set_time(this->startPos);
HXLINE( 285)		::flixel::FlxG_obj::sound->music->set_pitch(this->playbackRate);
HXLINE( 286)		::flixel::FlxG_obj::sound->music->onComplete = this->finishSong_dyn();
HXLINE( 287)		this->vocals->set_volume(( (Float)(1) ));
HXLINE( 288)		this->vocals->set_time(this->startPos);
HXLINE( 289)		this->vocals->play(null(),null(),null());
HXLINE( 290)		this->opponentVocals->set_volume(( (Float)(1) ));
HXLINE( 291)		this->opponentVocals->set_time(this->startPos);
HXLINE( 292)		this->opponentVocals->play(null(),null(),null());
HXLINE( 295)		this->songLength = ::flixel::FlxG_obj::sound->music->_length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(EditorPlayState_obj,startSong,(void))

void EditorPlayState_obj::generateSong(::String dataPath){
            	HX_GC_STACKFRAME(&_hx_pos_9bca58946d5b3941_300_generateSong)
HXLINE( 302)		this->songSpeed = ( (Float)(::states::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
HXLINE( 303)		 ::Dynamic defaultValue = null();
HXDLIN( 303)		defaultValue = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("scrolltype",47,55,ef,1f));
HXDLIN( 303)		::String songSpeedType;
HXDLIN( 303)		if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("scrolltype",47,55,ef,1f))) {
HXLINE( 303)			songSpeedType = ::backend::ClientPrefs_obj::data->gameplaySettings->get_string(HX_("scrolltype",47,55,ef,1f));
            		}
            		else {
HXLINE( 303)			songSpeedType = ( (::String)(defaultValue) );
            		}
HXLINE( 304)		::String _hx_switch_0 = songSpeedType;
            		if (  (_hx_switch_0==HX_("constant",64,c1,9d,a5)) ){
HXLINE( 309)			 ::Dynamic defaultValue1 = null();
HXDLIN( 309)			defaultValue1 = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
HXDLIN( 309)			 ::Dynamic _hx_tmp;
HXDLIN( 309)			if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("scrollspeed",5a,70,19,38))) {
HXLINE( 309)				_hx_tmp = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
            			}
            			else {
HXLINE( 309)				_hx_tmp = defaultValue1;
            			}
HXDLIN( 309)			this->songSpeed = ( (Float)(_hx_tmp) );
HXDLIN( 309)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_0==HX_("multiplicative",96,7a,3f,fa)) ){
HXLINE( 307)			Float _hx_tmp1 = ( (Float)(::states::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
HXDLIN( 307)			 ::Dynamic defaultValue2 = null();
HXDLIN( 307)			defaultValue2 = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
HXDLIN( 307)			 ::Dynamic _hx_tmp2;
HXDLIN( 307)			if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("scrollspeed",5a,70,19,38))) {
HXLINE( 307)				_hx_tmp2 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
            			}
            			else {
HXLINE( 307)				_hx_tmp2 = defaultValue2;
            			}
HXDLIN( 307)			this->songSpeed = (_hx_tmp1 * ( (Float)(_hx_tmp2) ));
HXDLIN( 307)			goto _hx_goto_11;
            		}
            		_hx_goto_11:;
HXLINE( 311)		this->noteKillOffset = ::Math_obj::max(::backend::Conductor_obj::stepCrochet,((( (Float)(350) ) / this->songSpeed) * this->playbackRate));
HXLINE( 313)		 ::Dynamic songData = ::states::PlayState_obj::SONG;
HXLINE( 314)		::backend::Conductor_obj::set_bpm(( (Float)(songData->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE( 316)		::String boyfriendVocals = ( (::String)(this->loadCharacterFile(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ))->__Field(HX_("vocals_file",3d,c5,2d,83),::hx::paccDynamic)) );
HXLINE( 317)		::String dadVocals = ( (::String)(this->loadCharacterFile(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ))->__Field(HX_("vocals_file",3d,c5,2d,83),::hx::paccDynamic)) );
HXLINE( 319)		this->vocals =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXLINE( 320)		this->opponentVocals =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXLINE( 321)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 323)			if (( (bool)(songData->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE( 325)				::String song = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN( 325)				::String postfix;
HXDLIN( 325)				bool postfix1;
HXDLIN( 325)				if (::hx::IsNotNull( boyfriendVocals )) {
HXLINE( 325)					postfix1 = (boyfriendVocals.length < 1);
            				}
            				else {
HXLINE( 325)					postfix1 = true;
            				}
HXDLIN( 325)				if (postfix1) {
HXLINE( 325)					postfix = HX_("Player",81,5f,4d,6c);
            				}
            				else {
HXLINE( 325)					postfix = boyfriendVocals;
            				}
HXDLIN( 325)				 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN( 325)				 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN( 325)				::String path = invalidChars->split(::StringTools_obj::replace(song,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN( 325)				::String songKey = ((HX_("",00,00,00,00) + hideChars->split(path)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34));
HXDLIN( 325)				if (::hx::IsNotNull( postfix )) {
HXLINE( 325)					songKey = (songKey + (HX_("-",2d,00,00,00) + postfix));
            				}
HXDLIN( 325)				 ::openfl::media::Sound voices = ::backend::Paths_obj::returnSound(null(),songKey,HX_("songs",fe,36,c7,80));
HXDLIN( 325)				 ::Dynamic playerVocals = voices;
HXLINE( 326)				 ::flixel::sound::FlxSound _hx_tmp3 = this->vocals;
HXDLIN( 326)				 ::Dynamic _hx_tmp4;
HXDLIN( 326)				if (::hx::IsNotNull( playerVocals )) {
HXLINE( 326)					_hx_tmp4 = playerVocals;
            				}
            				else {
HXLINE( 326)					::String song1 = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN( 326)					::String postfix2 = null();
HXDLIN( 326)					 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN( 326)					 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN( 326)					::String path1 = invalidChars1->split(::StringTools_obj::replace(song1,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN( 326)					::String songKey1 = ((HX_("",00,00,00,00) + hideChars1->split(path1)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34));
HXDLIN( 326)					if (::hx::IsNotNull( postfix2 )) {
HXLINE( 326)						songKey1 = (songKey1 + (HX_("-",2d,00,00,00) + postfix2));
            					}
HXDLIN( 326)					 ::openfl::media::Sound voices1 = ::backend::Paths_obj::returnSound(null(),songKey1,HX_("songs",fe,36,c7,80));
HXDLIN( 326)					_hx_tmp4 = voices1;
            				}
HXDLIN( 326)				_hx_tmp3->loadEmbedded(_hx_tmp4,null(),null(),null());
HXLINE( 328)				::String song2 = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN( 328)				::String postfix3;
HXDLIN( 328)				bool postfix4;
HXDLIN( 328)				if (::hx::IsNotNull( dadVocals )) {
HXLINE( 328)					postfix4 = (dadVocals.length < 1);
            				}
            				else {
HXLINE( 328)					postfix4 = true;
            				}
HXDLIN( 328)				if (postfix4) {
HXLINE( 328)					postfix3 = HX_("Opponent",bd,75,6a,d2);
            				}
            				else {
HXLINE( 328)					postfix3 = dadVocals;
            				}
HXDLIN( 328)				 ::EReg invalidChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN( 328)				 ::EReg hideChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN( 328)				::String path2 = invalidChars2->split(::StringTools_obj::replace(song2,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN( 328)				::String songKey2 = ((HX_("",00,00,00,00) + hideChars2->split(path2)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34));
HXDLIN( 328)				if (::hx::IsNotNull( postfix3 )) {
HXLINE( 328)					songKey2 = (songKey2 + (HX_("-",2d,00,00,00) + postfix3));
            				}
HXDLIN( 328)				 ::openfl::media::Sound voices2 = ::backend::Paths_obj::returnSound(null(),songKey2,HX_("songs",fe,36,c7,80));
HXDLIN( 328)				 ::Dynamic oppVocals = voices2;
HXLINE( 329)				if (::hx::IsNotNull( oppVocals )) {
HXLINE( 329)					this->opponentVocals->loadEmbedded(oppVocals,null(),null(),null());
            				}
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 332)				{
HXLINE( 332)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 334)		this->vocals->set_volume(( (Float)(0) ));
HXLINE( 335)		this->opponentVocals->set_volume(( (Float)(0) ));
HXLINE( 338)		this->vocals->set_pitch(this->playbackRate);
HXLINE( 339)		this->opponentVocals->set_pitch(this->playbackRate);
HXLINE( 341)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::sound::FlxSound >();
HXLINE( 342)		::flixel::FlxG_obj::sound->list->add(this->opponentVocals).StaticCast<  ::flixel::sound::FlxSound >();
HXLINE( 344)		 ::flixel::sound::FlxSound _hx_tmp5 =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXDLIN( 344)		::String song3 = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN( 344)		 ::EReg invalidChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN( 344)		 ::EReg hideChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN( 344)		::String path3 = invalidChars3->split(::StringTools_obj::replace(song3,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN( 344)		::String songKey3 = ((HX_("",00,00,00,00) + hideChars3->split(path3)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Inst",95,b3,69,40));
HXDLIN( 344)		 ::openfl::media::Sound inst = ::backend::Paths_obj::returnSound(null(),songKey3,HX_("songs",fe,36,c7,80));
HXDLIN( 344)		this->inst = _hx_tmp5->loadEmbedded(inst,null(),null(),null());
HXLINE( 345)		::flixel::FlxG_obj::sound->list->add(this->inst).StaticCast<  ::flixel::sound::FlxSound >();
HXLINE( 346)		::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE( 348)		this->notes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 349)		this->add(this->notes);
HXLINE( 351)		::Array< ::Dynamic> noteData = ( (::Array< ::Dynamic>)(songData->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXLINE( 355)		{
HXLINE( 355)			int _g1 = 0;
HXDLIN( 355)			while((_g1 < noteData->length)){
HXLINE( 355)				 ::Dynamic section = noteData->__get(_g1);
HXDLIN( 355)				_g1 = (_g1 + 1);
HXLINE( 357)				{
HXLINE( 357)					int _g2 = 0;
HXDLIN( 357)					::cpp::VirtualArray _g3 = ( (::cpp::VirtualArray)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN( 357)					while((_g2 < _g3->get_length())){
HXLINE( 357)						 ::Dynamic songNotes = _g3->__get(_g2);
HXDLIN( 357)						_g2 = (_g2 + 1);
HXLINE( 359)						Float daStrumTime = ( (Float)(songNotes->__GetItem(0)) );
HXLINE( 360)						if ((daStrumTime < this->startPos)) {
HXLINE( 360)							continue;
            						}
HXLINE( 362)						int daNoteData = ::Std_obj::_hx_int(::hx::Mod(songNotes->__GetItem(1),4));
HXLINE( 363)						bool gottaHitNote = ( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE( 365)						if (::hx::IsGreater( songNotes->__GetItem(1),3 )) {
HXLINE( 367)							gottaHitNote = !(( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            						}
HXLINE( 370)						 ::objects::Note oldNote;
HXLINE( 371)						if ((this->unspawnNotes->length > 0)) {
HXLINE( 372)							oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::objects::Note >();
            						}
            						else {
HXLINE( 374)							oldNote = null();
            						}
HXLINE( 376)						 ::objects::Note swagNote =  ::objects::Note_obj::__alloc( HX_CTX ,daStrumTime,daNoteData,oldNote,null(),null(),::hx::ObjectPtr<OBJ_>(this));
HXLINE( 377)						swagNote->mustPress = gottaHitNote;
HXLINE( 378)						swagNote->sustainLength = ( (Float)(songNotes->__GetItem(2)) );
HXLINE( 380)						swagNote->set_noteType(( (::String)(songNotes->__GetItem(3)) ));
HXLINE( 381)						if (!(::Std_obj::isOfType(songNotes->__GetItem(3),::hx::ClassOf< ::String >()))) {
HXLINE( 381)							swagNote->set_noteType(::states::editors::ChartingState_obj::noteTypeList->__get(( (int)(songNotes->__GetItem(3)) )));
            						}
HXLINE( 383)						{
HXLINE( 383)							 ::flixel::math::FlxBasePoint this1 = swagNote->scrollFactor;
HXDLIN( 383)							this1->set_x(( (Float)(0) ));
HXDLIN( 383)							this1->set_y(( (Float)(0) ));
            						}
HXLINE( 385)						this->unspawnNotes->push(swagNote);
HXLINE( 387)						Float susLength = (swagNote->sustainLength / ::backend::Conductor_obj::stepCrochet);
HXLINE( 388)						int floorSus = ::Math_obj::floor(susLength);
HXLINE( 390)						if ((floorSus > 0)) {
HXLINE( 391)							int _g4 = 0;
HXDLIN( 391)							int _g5 = (floorSus + 1);
HXDLIN( 391)							while((_g4 < _g5)){
HXLINE( 391)								_g4 = (_g4 + 1);
HXDLIN( 391)								int susNote = (_g4 - 1);
HXLINE( 393)								oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::objects::Note >();
HXLINE( 395)								 ::objects::Note sustainNote =  ::objects::Note_obj::__alloc( HX_CTX ,(daStrumTime + (::backend::Conductor_obj::stepCrochet * ( (Float)(susNote) ))),daNoteData,oldNote,true,null(),::hx::ObjectPtr<OBJ_>(this));
HXLINE( 396)								sustainNote->mustPress = gottaHitNote;
HXLINE( 398)								sustainNote->set_noteType(swagNote->noteType);
HXLINE( 399)								{
HXLINE( 399)									 ::flixel::math::FlxBasePoint this2 = sustainNote->scrollFactor;
HXDLIN( 399)									this2->set_x(( (Float)(0) ));
HXDLIN( 399)									this2->set_y(( (Float)(0) ));
            								}
HXLINE( 400)								sustainNote->parent = swagNote;
HXLINE( 401)								this->unspawnNotes->push(sustainNote);
HXLINE( 402)								swagNote->tail->push(sustainNote);
HXLINE( 404)								sustainNote->correctionOffset = (swagNote->get_height() / ( (Float)(2) ));
HXLINE( 405)								if (!(::states::PlayState_obj::get_isPixelStage())) {
HXLINE( 407)									if (oldNote->isSustainNote) {
HXLINE( 409)										oldNote->scale->set_y((oldNote->scale->y * (( (Float)(::objects::Note_obj::SUSTAIN_SIZE) ) / ( (Float)(oldNote->frameHeight) ))));
HXLINE( 410)										oldNote->scale->set_y((oldNote->scale->y / this->playbackRate));
HXLINE( 411)										oldNote->updateHitbox();
            									}
HXLINE( 414)									if (::backend::ClientPrefs_obj::data->downScroll) {
HXLINE( 415)										sustainNote->correctionOffset = ( (Float)(0) );
            									}
            								}
            								else {
HXLINE( 417)									if (oldNote->isSustainNote) {
HXLINE( 419)										oldNote->scale->set_y((oldNote->scale->y / this->playbackRate));
HXLINE( 420)										oldNote->updateHitbox();
            									}
            								}
HXLINE( 423)								if (sustainNote->mustPress) {
HXLINE( 423)									sustainNote->set_x((sustainNote->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            								}
            								else {
HXLINE( 424)									if (::backend::ClientPrefs_obj::data->middleScroll) {
HXLINE( 426)										sustainNote->set_x((sustainNote->x + 310));
HXLINE( 427)										if ((daNoteData > 1)) {
HXLINE( 428)											sustainNote->set_x((sustainNote->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 25)));
            										}
            									}
            								}
            							}
            						}
HXLINE( 433)						if (swagNote->mustPress) {
HXLINE( 435)							swagNote->set_x((swagNote->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            						}
            						else {
HXLINE( 437)							if (::backend::ClientPrefs_obj::data->middleScroll) {
HXLINE( 439)								swagNote->set_x((swagNote->x + 310));
HXLINE( 440)								if ((daNoteData > 1)) {
HXLINE( 442)									swagNote->set_x((swagNote->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 25)));
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 448)		this->unspawnNotes->sort(::states::PlayState_obj::sortByTime_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,generateSong,(void))

void EditorPlayState_obj::generateStaticArrows(int player){
            	HX_GC_STACKFRAME(&_hx_pos_9bca58946d5b3941_452_generateStaticArrows)
HXLINE( 453)		Float strumLineX;
HXDLIN( 453)		if (::backend::ClientPrefs_obj::data->middleScroll) {
HXLINE( 453)			strumLineX = ( (Float)(::states::PlayState_obj::STRUM_X_MIDDLESCROLL) );
            		}
            		else {
HXLINE( 453)			strumLineX = ( (Float)(::states::PlayState_obj::STRUM_X) );
            		}
HXLINE( 454)		Float strumLineY;
HXDLIN( 454)		if (::backend::ClientPrefs_obj::data->downScroll) {
HXLINE( 454)			strumLineY = ( (Float)((::flixel::FlxG_obj::height - 150)) );
            		}
            		else {
HXLINE( 454)			strumLineY = ( (Float)(50) );
            		}
HXLINE( 455)		{
HXLINE( 455)			int _g = 0;
HXDLIN( 455)			while((_g < 4)){
HXLINE( 455)				_g = (_g + 1);
HXDLIN( 455)				int i = (_g - 1);
HXLINE( 458)				Float targetAlpha = ( (Float)(1) );
HXLINE( 459)				if ((player < 1)) {
HXLINE( 461)					if (!(::backend::ClientPrefs_obj::data->opponentStrums)) {
HXLINE( 461)						targetAlpha = ( (Float)(0) );
            					}
            					else {
HXLINE( 462)						if (::backend::ClientPrefs_obj::data->middleScroll) {
HXLINE( 462)							targetAlpha = ((Float)0.35);
            						}
            					}
            				}
HXLINE( 465)				 ::objects::StrumNote babyArrow =  ::objects::StrumNote_obj::__alloc( HX_CTX ,strumLineX,strumLineY,i,player);
HXLINE( 466)				babyArrow->downScroll = ::backend::ClientPrefs_obj::data->downScroll;
HXLINE( 467)				babyArrow->set_alpha(targetAlpha);
HXLINE( 469)				if ((player == 1)) {
HXLINE( 470)					this->playerStrums->add(babyArrow).StaticCast<  ::objects::StrumNote >();
            				}
            				else {
HXLINE( 473)					if (::backend::ClientPrefs_obj::data->middleScroll) {
HXLINE( 475)						babyArrow->set_x((babyArrow->x + 310));
HXLINE( 476)						if ((i > 1)) {
HXLINE( 477)							babyArrow->set_x((babyArrow->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 25)));
            						}
            					}
HXLINE( 480)					this->opponentStrums->add(babyArrow).StaticCast<  ::objects::StrumNote >();
            				}
HXLINE( 483)				this->strumLineNotes->add(babyArrow).StaticCast<  ::objects::StrumNote >();
HXLINE( 484)				babyArrow->postAddedToGroup();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,generateStaticArrows,(void))

void EditorPlayState_obj::finishSong(){
            	HX_GC_STACKFRAME(&_hx_pos_9bca58946d5b3941_489_finishSong)
HXDLIN( 489)		 ::states::editors::EditorPlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 490)		if ((::backend::ClientPrefs_obj::data->noteOffset <= 0)) {
HXLINE( 491)			this->endSong();
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::EditorPlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_9bca58946d5b3941_494_finishSong)
HXLINE( 494)				_gthis->endSong();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 493)			 ::flixel::util::FlxTimer _hx_tmp =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN( 493)			this->finishTimer = _hx_tmp->start((( (Float)(::backend::ClientPrefs_obj::data->noteOffset) ) / ( (Float)(1000) )), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(EditorPlayState_obj,finishSong,(void))

void EditorPlayState_obj::endSong(){
            	HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_500_endSong)
HXLINE( 501)		this->vocals->pause();
HXLINE( 502)		this->vocals->destroy();
HXLINE( 503)		this->opponentVocals->pause();
HXLINE( 504)		this->opponentVocals->destroy();
HXLINE( 505)		if (::hx::IsNotNull( this->finishTimer )) {
HXLINE( 507)			this->finishTimer->cancel();
HXLINE( 508)			this->finishTimer->destroy();
            		}
HXLINE( 510)		this->close();
            	}


HX_DEFINE_DYNAMIC_FUNC0(EditorPlayState_obj,endSong,(void))

void EditorPlayState_obj::cachePopUpScore(){
            	HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_514_cachePopUpScore)
HXLINE( 515)		{
HXLINE( 515)			int _g = 0;
HXDLIN( 515)			::Array< ::Dynamic> _g1 = this->ratingsData;
HXDLIN( 515)			while((_g < _g1->length)){
HXLINE( 515)				 ::backend::Rating rating = _g1->__get(_g).StaticCast<  ::backend::Rating >();
HXDLIN( 515)				_g = (_g + 1);
HXLINE( 516)				::backend::Paths_obj::image(rating->image,null(),null());
            			}
            		}
HXLINE( 518)		{
HXLINE( 518)			int _g2 = 0;
HXDLIN( 518)			while((_g2 < 10)){
HXLINE( 518)				_g2 = (_g2 + 1);
HXDLIN( 518)				int i = (_g2 - 1);
HXLINE( 519)				::backend::Paths_obj::image((HX_("num",46,de,53,00) + i),null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(EditorPlayState_obj,cachePopUpScore,(void))

void EditorPlayState_obj::popUpScore( ::objects::Note note){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_1, ::flixel::text::FlxText,coolText, ::flixel::FlxSprite,comboSpr1, ::flixel::FlxSprite,rating) HXARGC(1)
            		void _hx_run( ::flixel::tweens::FlxTween tween){
            			HX_GC_STACKFRAME(&_hx_pos_9bca58946d5b3941_670_popUpScore)
HXLINE( 671)			coolText->destroy();
HXLINE( 672)			comboSpr1->destroy();
HXLINE( 674)			rating->destroy();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_9bca58946d5b3941_523_popUpScore)
HXLINE( 524)		Float noteDiff = ::Math_obj::abs(((note->strumTime - ::backend::Conductor_obj::songPosition) + ::backend::ClientPrefs_obj::data->ratingOffset));
HXLINE( 527)		this->vocals->set_volume(( (Float)(1) ));
HXLINE( 528)		::String placement = ::Std_obj::string(this->combo);
HXLINE( 530)		 ::flixel::text::FlxText coolText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,placement,32,null());
HXLINE( 531)		{
HXLINE( 531)			int axes = 17;
HXDLIN( 531)			bool _hx_tmp;
HXDLIN( 531)			if ((axes != 1)) {
HXLINE( 531)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE( 531)				_hx_tmp = true;
            			}
HXDLIN( 531)			if (_hx_tmp) {
HXLINE( 531)				 ::flixel::text::FlxText coolText1 = coolText;
HXDLIN( 531)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 531)				coolText1->set_x(((( (Float)(_hx_tmp1) ) - coolText->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 531)			bool _hx_tmp2;
HXDLIN( 531)			if ((axes != 16)) {
HXLINE( 531)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE( 531)				_hx_tmp2 = true;
            			}
HXDLIN( 531)			if (_hx_tmp2) {
HXLINE( 531)				 ::flixel::text::FlxText coolText2 = coolText;
HXDLIN( 531)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN( 531)				coolText2->set_y(((( (Float)(_hx_tmp3) ) - coolText->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 532)		coolText->set_x((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.35)));
HXLINE( 534)		 ::flixel::FlxSprite rating =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 535)		int score = 350;
HXLINE( 538)		 ::backend::Rating daRating = ::backend::Conductor_obj::judgeNote(this->ratingsData,(noteDiff / this->playbackRate));
HXLINE( 540)		 ::states::editors::EditorPlayState _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 540)		_hx_tmp4->totalNotesHit = (_hx_tmp4->totalNotesHit + daRating->ratingMod);
HXLINE( 541)		note->ratingMod = daRating->ratingMod;
HXLINE( 542)		if (!(note->ratingDisabled)) {
HXLINE( 542)			daRating->hits++;
            		}
HXLINE( 543)		note->rating = daRating->name;
HXLINE( 544)		score = daRating->score;
HXLINE( 546)		bool _hx_tmp5;
HXDLIN( 546)		if (daRating->noteSplash) {
HXLINE( 546)			_hx_tmp5 = !(( (bool)(note->noteSplashData->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 546)			_hx_tmp5 = false;
            		}
HXDLIN( 546)		if (_hx_tmp5) {
HXLINE( 547)			this->spawnNoteSplashOnNote(note);
            		}
HXLINE( 549)		if (!(note->ratingDisabled)) {
HXLINE( 551)			this->songHits++;
HXLINE( 552)			this->totalPlayed++;
HXLINE( 553)			this->RecalculateRating(false);
            		}
HXLINE( 556)		::String pixelShitPart1 = HX_("",00,00,00,00);
HXLINE( 557)		::String pixelShitPart2 = HX_("",00,00,00,00);
HXLINE( 559)		 ::flixel::FlxSprite rating1 = rating;
HXDLIN( 559)		rating1->loadGraphic(::backend::Paths_obj::image(((pixelShitPart1 + daRating->image) + pixelShitPart2),null(),null()),null(),null(),null(),null(),null());
HXLINE( 560)		{
HXLINE( 560)			int axes1 = 17;
HXDLIN( 560)			bool _hx_tmp6;
HXDLIN( 560)			if ((axes1 != 1)) {
HXLINE( 560)				_hx_tmp6 = (axes1 == 17);
            			}
            			else {
HXLINE( 560)				_hx_tmp6 = true;
            			}
HXDLIN( 560)			if (_hx_tmp6) {
HXLINE( 560)				 ::flixel::FlxSprite rating2 = rating;
HXDLIN( 560)				int _hx_tmp7 = ::flixel::FlxG_obj::width;
HXDLIN( 560)				rating2->set_x(((( (Float)(_hx_tmp7) ) - rating->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 560)			bool _hx_tmp8;
HXDLIN( 560)			if ((axes1 != 16)) {
HXLINE( 560)				_hx_tmp8 = (axes1 == 17);
            			}
            			else {
HXLINE( 560)				_hx_tmp8 = true;
            			}
HXDLIN( 560)			if (_hx_tmp8) {
HXLINE( 560)				 ::flixel::FlxSprite rating3 = rating;
HXDLIN( 560)				int _hx_tmp9 = ::flixel::FlxG_obj::height;
HXDLIN( 560)				rating3->set_y(((( (Float)(_hx_tmp9) ) - rating->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 561)		rating->set_x((coolText->x - ( (Float)(40) )));
HXLINE( 562)		rating->set_y((rating->y - ( (Float)(60) )));
HXLINE( 563)		rating->acceleration->set_y(((( (Float)(550) ) * this->playbackRate) * this->playbackRate));
HXLINE( 564)		{
HXLINE( 564)			 ::flixel::math::FlxBasePoint this1 = rating->velocity;
HXDLIN( 564)			Float rating4 = rating->velocity->y;
HXDLIN( 564)			int y = ::flixel::FlxG_obj::random->_hx_int(140,175,null());
HXDLIN( 564)			this1->set_y((rating4 - (( (Float)(y) ) * this->playbackRate)));
            		}
HXLINE( 565)		{
HXLINE( 565)			 ::flixel::math::FlxBasePoint this2 = rating->velocity;
HXDLIN( 565)			Float rating5 = rating->velocity->x;
HXDLIN( 565)			int x = ::flixel::FlxG_obj::random->_hx_int(0,10,null());
HXDLIN( 565)			this2->set_x((rating5 - (( (Float)(x) ) * this->playbackRate)));
            		}
HXLINE( 566)		bool _hx_tmp10;
HXDLIN( 566)		if (!(::backend::ClientPrefs_obj::data->hideHud)) {
HXLINE( 566)			_hx_tmp10 = this->showRating;
            		}
            		else {
HXLINE( 566)			_hx_tmp10 = false;
            		}
HXDLIN( 566)		rating->set_visible(_hx_tmp10);
HXLINE( 567)		rating->set_x((rating->x + ::backend::ClientPrefs_obj::data->comboOffset->__get(0)));
HXLINE( 568)		rating->set_y((rating->y - ( (Float)(::backend::ClientPrefs_obj::data->comboOffset->__get(1)) )));
HXLINE( 570)		 ::flixel::FlxSprite comboSpr =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 570)		 ::flixel::FlxSprite comboSpr1 = comboSpr->loadGraphic(::backend::Paths_obj::image(((pixelShitPart1 + HX_("combo",4e,28,5d,4a)) + pixelShitPart2),null(),null()),null(),null(),null(),null(),null());
HXLINE( 571)		{
HXLINE( 571)			int axes2 = 17;
HXDLIN( 571)			bool _hx_tmp11;
HXDLIN( 571)			if ((axes2 != 1)) {
HXLINE( 571)				_hx_tmp11 = (axes2 == 17);
            			}
            			else {
HXLINE( 571)				_hx_tmp11 = true;
            			}
HXDLIN( 571)			if (_hx_tmp11) {
HXLINE( 571)				 ::flixel::FlxSprite comboSpr2 = comboSpr1;
HXDLIN( 571)				int _hx_tmp12 = ::flixel::FlxG_obj::width;
HXDLIN( 571)				comboSpr2->set_x(((( (Float)(_hx_tmp12) ) - comboSpr1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 571)			bool _hx_tmp13;
HXDLIN( 571)			if ((axes2 != 16)) {
HXLINE( 571)				_hx_tmp13 = (axes2 == 17);
            			}
            			else {
HXLINE( 571)				_hx_tmp13 = true;
            			}
HXDLIN( 571)			if (_hx_tmp13) {
HXLINE( 571)				 ::flixel::FlxSprite comboSpr3 = comboSpr1;
HXDLIN( 571)				int _hx_tmp14 = ::flixel::FlxG_obj::height;
HXDLIN( 571)				comboSpr3->set_y(((( (Float)(_hx_tmp14) ) - comboSpr1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 572)		comboSpr1->set_x(coolText->x);
HXLINE( 573)		{
HXLINE( 573)			 ::flixel::math::FlxBasePoint this3 = comboSpr1->acceleration;
HXDLIN( 573)			int y1 = ::flixel::FlxG_obj::random->_hx_int(200,300,null());
HXDLIN( 573)			this3->set_y(((( (Float)(y1) ) * this->playbackRate) * this->playbackRate));
            		}
HXLINE( 574)		{
HXLINE( 574)			 ::flixel::math::FlxBasePoint this4 = comboSpr1->velocity;
HXDLIN( 574)			Float comboSpr4 = comboSpr1->velocity->y;
HXDLIN( 574)			int y2 = ::flixel::FlxG_obj::random->_hx_int(140,160,null());
HXDLIN( 574)			this4->set_y((comboSpr4 - (( (Float)(y2) ) * this->playbackRate)));
            		}
HXLINE( 575)		bool _hx_tmp15;
HXDLIN( 575)		if (!(::backend::ClientPrefs_obj::data->hideHud)) {
HXLINE( 575)			_hx_tmp15 = this->showCombo;
            		}
            		else {
HXLINE( 575)			_hx_tmp15 = false;
            		}
HXDLIN( 575)		comboSpr1->set_visible(_hx_tmp15);
HXLINE( 576)		comboSpr1->set_x((comboSpr1->x + ::backend::ClientPrefs_obj::data->comboOffset->__get(0)));
HXLINE( 577)		comboSpr1->set_y((comboSpr1->y - ( (Float)(::backend::ClientPrefs_obj::data->comboOffset->__get(1)) )));
HXLINE( 578)		comboSpr1->set_y((comboSpr1->y + 60));
HXLINE( 579)		{
HXLINE( 579)			 ::flixel::math::FlxBasePoint this5 = comboSpr1->velocity;
HXDLIN( 579)			Float comboSpr5 = comboSpr1->velocity->x;
HXDLIN( 579)			int x1 = ::flixel::FlxG_obj::random->_hx_int(1,10,null());
HXDLIN( 579)			this5->set_x((comboSpr5 + (( (Float)(x1) ) * this->playbackRate)));
            		}
HXLINE( 581)		int _hx_tmp16 = this->members->indexOf(this->strumLineNotes,null());
HXDLIN( 581)		this->insert(_hx_tmp16,rating);
HXLINE( 583)		if (!(::backend::ClientPrefs_obj::data->comboStacking)) {
HXLINE( 585)			if (::hx::IsNotNull( this->lastRating )) {
HXLINE( 585)				this->lastRating->kill();
            			}
HXLINE( 586)			this->lastRating = rating;
            		}
HXLINE( 589)		 ::flixel::FlxSprite rating6 = rating;
HXDLIN( 589)		rating6->setGraphicSize(::Std_obj::_hx_int((rating->get_width() * ((Float)0.7))),null());
HXLINE( 590)		rating->updateHitbox();
HXLINE( 591)		 ::flixel::FlxSprite comboSpr6 = comboSpr1;
HXDLIN( 591)		comboSpr6->setGraphicSize(::Std_obj::_hx_int((comboSpr1->get_width() * ((Float)0.7))),null());
HXLINE( 592)		comboSpr1->updateHitbox();
HXLINE( 594)		::Array< int > seperatedScore = ::Array_obj< int >::__new(0);
HXLINE( 596)		if ((this->combo >= 1000)) {
HXLINE( 597)			seperatedScore->push(::hx::Mod(::Math_obj::floor((( (Float)(this->combo) ) / ( (Float)(1000) ))),10));
            		}
HXLINE( 599)		seperatedScore->push(::hx::Mod(::Math_obj::floor((( (Float)(this->combo) ) / ( (Float)(100) ))),10));
HXLINE( 600)		seperatedScore->push(::hx::Mod(::Math_obj::floor((( (Float)(this->combo) ) / ( (Float)(10) ))),10));
HXLINE( 601)		seperatedScore->push(::hx::Mod(this->combo,10));
HXLINE( 603)		int daLoop = 0;
HXLINE( 604)		Float xThing = ( (Float)(0) );
HXLINE( 605)		if (this->showCombo) {
HXLINE( 607)			int _hx_tmp17 = this->members->indexOf(this->strumLineNotes,null());
HXDLIN( 607)			this->insert(_hx_tmp17,comboSpr1);
            		}
HXLINE( 609)		if (!(::backend::ClientPrefs_obj::data->comboStacking)) {
HXLINE( 611)			if (::hx::IsNotNull( this->lastCombo )) {
HXLINE( 611)				this->lastCombo->kill();
            			}
HXLINE( 612)			this->lastCombo = comboSpr1;
            		}
HXLINE( 614)		if (::hx::IsNotNull( this->lastScore )) {
HXLINE( 616)			while((this->lastScore->length > 0)){
HXLINE( 618)				this->lastScore->__get(0).StaticCast<  ::flixel::FlxSprite >()->kill();
HXLINE( 619)				this->lastScore->remove(this->lastScore->__get(0).StaticCast<  ::flixel::FlxSprite >());
            			}
            		}
HXLINE( 622)		{
HXLINE( 622)			int _g = 0;
HXDLIN( 622)			while((_g < seperatedScore->length)){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,numScore1) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween tween){
            					HX_GC_STACKFRAME(&_hx_pos_9bca58946d5b3941_647_popUpScore)
HXLINE( 647)					numScore1->destroy();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 622)				int i = seperatedScore->__get(_g);
HXDLIN( 622)				_g = (_g + 1);
HXLINE( 624)				 ::flixel::FlxSprite numScore =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 624)				 ::flixel::FlxSprite numScore1 = numScore->loadGraphic(::backend::Paths_obj::image((((pixelShitPart1 + HX_("num",46,de,53,00)) + ::Std_obj::_hx_int(( (Float)(i) ))) + pixelShitPart2),null(),null()),null(),null(),null(),null(),null());
HXLINE( 625)				{
HXLINE( 625)					int axes3 = 17;
HXDLIN( 625)					bool _hx_tmp18;
HXDLIN( 625)					if ((axes3 != 1)) {
HXLINE( 625)						_hx_tmp18 = (axes3 == 17);
            					}
            					else {
HXLINE( 625)						_hx_tmp18 = true;
            					}
HXDLIN( 625)					if (_hx_tmp18) {
HXLINE( 625)						 ::flixel::FlxSprite numScore2 = numScore1;
HXDLIN( 625)						int _hx_tmp19 = ::flixel::FlxG_obj::width;
HXDLIN( 625)						numScore2->set_x(((( (Float)(_hx_tmp19) ) - numScore1->get_width()) / ( (Float)(2) )));
            					}
HXDLIN( 625)					bool _hx_tmp20;
HXDLIN( 625)					if ((axes3 != 16)) {
HXLINE( 625)						_hx_tmp20 = (axes3 == 17);
            					}
            					else {
HXLINE( 625)						_hx_tmp20 = true;
            					}
HXDLIN( 625)					if (_hx_tmp20) {
HXLINE( 625)						 ::flixel::FlxSprite numScore3 = numScore1;
HXDLIN( 625)						int _hx_tmp21 = ::flixel::FlxG_obj::height;
HXDLIN( 625)						numScore3->set_y(((( (Float)(_hx_tmp21) ) - numScore1->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE( 626)				numScore1->set_x((((coolText->x + (43 * daLoop)) - ( (Float)(90) )) + ::backend::ClientPrefs_obj::data->comboOffset->__get(2)));
HXLINE( 627)				numScore1->set_y((numScore1->y + (80 - ::backend::ClientPrefs_obj::data->comboOffset->__get(3))));
HXLINE( 629)				if (!(::backend::ClientPrefs_obj::data->comboStacking)) {
HXLINE( 630)					this->lastScore->push(numScore1);
            				}
HXLINE( 632)				 ::flixel::FlxSprite numScore4 = numScore1;
HXDLIN( 632)				numScore4->setGraphicSize(::Std_obj::_hx_int((numScore1->get_width() * ((Float)0.5))),null());
HXLINE( 633)				numScore1->updateHitbox();
HXLINE( 635)				{
HXLINE( 635)					 ::flixel::math::FlxBasePoint this6 = numScore1->acceleration;
HXDLIN( 635)					int y3 = ::flixel::FlxG_obj::random->_hx_int(200,300,null());
HXDLIN( 635)					this6->set_y(((( (Float)(y3) ) * this->playbackRate) * this->playbackRate));
            				}
HXLINE( 636)				{
HXLINE( 636)					 ::flixel::math::FlxBasePoint this7 = numScore1->velocity;
HXDLIN( 636)					Float numScore5 = numScore1->velocity->y;
HXDLIN( 636)					int y4 = ::flixel::FlxG_obj::random->_hx_int(140,160,null());
HXDLIN( 636)					this7->set_y((numScore5 - (( (Float)(y4) ) * this->playbackRate)));
            				}
HXLINE( 637)				{
HXLINE( 637)					 ::flixel::math::FlxBasePoint this8 = numScore1->velocity;
HXDLIN( 637)					Float x2 = ::flixel::FlxG_obj::random->_hx_float(-5,5,null());
HXDLIN( 637)					this8->set_x((x2 * this->playbackRate));
            				}
HXLINE( 638)				numScore1->set_visible(!(::backend::ClientPrefs_obj::data->hideHud));
HXLINE( 641)				if (this->showComboNum) {
HXLINE( 642)					int _hx_tmp22 = this->members->indexOf(this->strumLineNotes,null());
HXDLIN( 642)					this->insert(_hx_tmp22,numScore1);
            				}
HXLINE( 644)				::flixel::tweens::FlxTween_obj::tween(numScore1, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(((Float)0.2) / this->playbackRate), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("startDelay",c1,af,3d,f3),((::backend::Conductor_obj::crochet * ((Float)0.002)) / this->playbackRate))
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(numScore1)))));
HXLINE( 652)				daLoop = (daLoop + 1);
HXLINE( 653)				if ((numScore1->x > xThing)) {
HXLINE( 653)					xThing = numScore1->x;
            				}
            			}
            		}
HXLINE( 655)		comboSpr1->set_x((xThing + 50));
HXLINE( 661)		 ::flixel::text::FlxText coolText3 = coolText;
HXDLIN( 661)		coolText3->set_text(::Std_obj::string(seperatedScore));
HXLINE( 664)		::flixel::tweens::FlxTween_obj::tween(rating, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(((Float)0.2) / this->playbackRate), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((::backend::Conductor_obj::crochet * ((Float)0.001)) / this->playbackRate))));
HXLINE( 668)		::flixel::tweens::FlxTween_obj::tween(comboSpr1, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(((Float)0.2) / this->playbackRate), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((::backend::Conductor_obj::crochet * ((Float)0.002)) / this->playbackRate))
            			->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(coolText,comboSpr1,rating)))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,popUpScore,(void))

void EditorPlayState_obj::onKeyPress( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_681_onKeyPress)
HXLINE( 682)		int eventKey = event->keyCode;
HXLINE( 683)		int key = ::states::PlayState_obj::getKeyFromEvent(this->keysArray,eventKey);
HXLINE( 686)		if (!(::backend::Controls_obj::instance->controllerMode)) {
HXLINE( 693)			if (::flixel::FlxG_obj::keys->checkStatus(eventKey,2)) {
HXLINE( 693)				this->keyPressed(key);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,onKeyPress,(void))

void EditorPlayState_obj::keyPressed(int key){
            	HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_698_keyPressed)
HXLINE( 699)		if ((key < 0)) {
HXLINE( 699)			return;
            		}
HXLINE( 702)		Float lastTime = ::backend::Conductor_obj::songPosition;
HXLINE( 703)		if ((::backend::Conductor_obj::songPosition >= 0)) {
HXLINE( 703)			::backend::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
            		}
HXLINE( 706)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 706)		{
HXLINE( 706)			int _g1 = 0;
HXDLIN( 706)			::Array< ::Dynamic> _g2 = this->notes->members;
HXDLIN( 706)			while((_g1 < _g2->length)){
HXLINE( 706)				 ::objects::Note v = _g2->__get(_g1).StaticCast<  ::objects::Note >();
HXDLIN( 706)				_g1 = (_g1 + 1);
HXLINE( 707)				bool _hx_tmp;
HXDLIN( 707)				bool _hx_tmp1;
HXDLIN( 707)				bool _hx_tmp2;
HXDLIN( 707)				bool _hx_tmp3;
HXDLIN( 707)				bool _hx_tmp4;
HXDLIN( 707)				bool _hx_tmp5;
HXDLIN( 707)				bool _hx_tmp6;
HXDLIN( 707)				if (::hx::IsNotNull( v )) {
HXLINE( 707)					_hx_tmp6 = v->canBeHit;
            				}
            				else {
HXLINE( 707)					_hx_tmp6 = false;
            				}
HXDLIN( 707)				if (_hx_tmp6) {
HXLINE( 707)					_hx_tmp5 = v->mustPress;
            				}
            				else {
HXLINE( 707)					_hx_tmp5 = false;
            				}
HXDLIN( 707)				if (_hx_tmp5) {
HXLINE( 707)					_hx_tmp4 = !(v->tooLate);
            				}
            				else {
HXLINE( 707)					_hx_tmp4 = false;
            				}
HXDLIN( 707)				if (_hx_tmp4) {
HXLINE( 707)					_hx_tmp3 = !(v->wasGoodHit);
            				}
            				else {
HXLINE( 707)					_hx_tmp3 = false;
            				}
HXDLIN( 707)				if (_hx_tmp3) {
HXLINE( 707)					_hx_tmp2 = !(v->blockHit);
            				}
            				else {
HXLINE( 707)					_hx_tmp2 = false;
            				}
HXDLIN( 707)				if (_hx_tmp2) {
HXLINE( 707)					_hx_tmp1 = !(v->isSustainNote);
            				}
            				else {
HXLINE( 707)					_hx_tmp1 = false;
            				}
HXDLIN( 707)				if (_hx_tmp1) {
HXLINE( 707)					_hx_tmp = (v->noteData == key);
            				}
            				else {
HXLINE( 707)					_hx_tmp = false;
            				}
HXLINE( 706)				if (_hx_tmp) {
HXLINE( 706)					_g->push(v);
            				}
            			}
            		}
HXDLIN( 706)		::Array< ::Dynamic> plrInputNotes = _g;
HXLINE( 710)		plrInputNotes->sort(::states::PlayState_obj::sortHitNotes_dyn());
HXLINE( 712)		bool shouldMiss = !(::backend::ClientPrefs_obj::data->ghostTapping);
HXLINE( 714)		if ((plrInputNotes->length != 0)) {
HXLINE( 715)			 ::objects::Note funnyNote = plrInputNotes->__get(0).StaticCast<  ::objects::Note >();
HXLINE( 718)			if ((plrInputNotes->length > 1)) {
HXLINE( 719)				 ::objects::Note doubleNote = plrInputNotes->__get(1).StaticCast<  ::objects::Note >();
HXLINE( 721)				if ((doubleNote->noteData == funnyNote->noteData)) {
HXLINE( 723)					if ((::Math_obj::abs((doubleNote->strumTime - funnyNote->strumTime)) < ((Float)1.0))) {
HXLINE( 724)						this->invalidateNote(doubleNote);
            					}
            					else {
HXLINE( 725)						if ((doubleNote->strumTime < funnyNote->strumTime)) {
HXLINE( 728)							funnyNote = doubleNote;
            						}
            					}
            				}
            			}
HXLINE( 733)			this->goodNoteHit(funnyNote);
            		}
HXLINE( 737)		::backend::Conductor_obj::songPosition = lastTime;
HXLINE( 739)		 ::objects::StrumNote spr = Dynamic( this->playerStrums->members->__get(key)).StaticCast<  ::objects::StrumNote >();
HXLINE( 740)		bool _hx_tmp7;
HXDLIN( 740)		if (::hx::IsNotNull( spr )) {
HXLINE( 740)			_hx_tmp7 = (spr->animation->_curAnim->name != HX_("confirm",00,9d,39,10));
            		}
            		else {
HXLINE( 740)			_hx_tmp7 = false;
            		}
HXDLIN( 740)		if (_hx_tmp7) {
HXLINE( 742)			spr->playAnim(HX_("pressed",a2,d2,e6,39),null());
HXLINE( 743)			spr->resetAnim = ( (Float)(0) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,keyPressed,(void))

void EditorPlayState_obj::onKeyRelease( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_748_onKeyRelease)
HXLINE( 749)		int eventKey = event->keyCode;
HXLINE( 750)		int key = ::states::PlayState_obj::getKeyFromEvent(this->keysArray,eventKey);
HXLINE( 753)		bool _hx_tmp;
HXDLIN( 753)		if (!(::backend::Controls_obj::instance->controllerMode)) {
HXLINE( 753)			_hx_tmp = (key > -1);
            		}
            		else {
HXLINE( 753)			_hx_tmp = false;
            		}
HXDLIN( 753)		if (_hx_tmp) {
HXLINE( 753)			this->keyReleased(key);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,onKeyRelease,(void))

void EditorPlayState_obj::keyReleased(int key){
            	HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_757_keyReleased)
HXLINE( 758)		 ::objects::StrumNote spr = Dynamic( this->playerStrums->members->__get(key)).StaticCast<  ::objects::StrumNote >();
HXLINE( 759)		if (::hx::IsNotNull( spr )) {
HXLINE( 761)			spr->playAnim(HX_("static",ae,dc,fb,05),null());
HXLINE( 762)			spr->resetAnim = ( (Float)(0) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,keyReleased,(void))

void EditorPlayState_obj::keysCheck(){
            	HX_GC_STACKFRAME(&_hx_pos_9bca58946d5b3941_768_keysCheck)
HXLINE( 770)		::Array< bool > holdArray = ::Array_obj< bool >::__new(0);
HXLINE( 771)		::Array< bool > pressArray = ::Array_obj< bool >::__new(0);
HXLINE( 772)		::Array< bool > releaseArray = ::Array_obj< bool >::__new(0);
HXLINE( 773)		{
HXLINE( 773)			int _g = 0;
HXDLIN( 773)			::Array< ::String > _g1 = this->keysArray;
HXDLIN( 773)			while((_g < _g1->length)){
HXLINE( 773)				::String key = _g1->__get(_g);
HXDLIN( 773)				_g = (_g + 1);
HXLINE( 775)				holdArray->push(::backend::Controls_obj::instance->pressed(key));
HXLINE( 776)				if (::backend::Controls_obj::instance->controllerMode) {
HXLINE( 778)					pressArray->push(::backend::Controls_obj::instance->justPressed(key));
HXLINE( 779)					releaseArray->push(::backend::Controls_obj::instance->justReleased(key));
            				}
            			}
            		}
HXLINE( 784)		bool _hx_tmp;
HXDLIN( 784)		if (::backend::Controls_obj::instance->controllerMode) {
HXLINE( 784)			_hx_tmp = pressArray->contains(true);
            		}
            		else {
HXLINE( 784)			_hx_tmp = false;
            		}
HXDLIN( 784)		if (_hx_tmp) {
HXLINE( 785)			int _g2 = 0;
HXDLIN( 785)			int _g3 = pressArray->length;
HXDLIN( 785)			while((_g2 < _g3)){
HXLINE( 785)				_g2 = (_g2 + 1);
HXDLIN( 785)				int i = (_g2 - 1);
HXLINE( 786)				if (pressArray->__get(i)) {
HXLINE( 787)					this->keyPressed(i);
            				}
            			}
            		}
HXLINE( 790)		if ((this->notes->length > 0)) {
HXLINE( 791)			 ::Dynamic filter = null();
HXDLIN( 791)			 ::flixel::group::FlxTypedGroupIterator n =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->notes->members,filter);
HXDLIN( 791)			while(n->hasNext()){
HXLINE( 791)				 ::objects::Note n1 = n->next().StaticCast<  ::objects::Note >();
HXLINE( 792)				bool canHit;
HXDLIN( 792)				bool canHit1;
HXDLIN( 792)				bool canHit2;
HXDLIN( 792)				bool canHit3;
HXDLIN( 792)				bool canHit4;
HXDLIN( 792)				if (::hx::IsNotNull( n1 )) {
HXLINE( 792)					canHit4 = n1->canBeHit;
            				}
            				else {
HXLINE( 792)					canHit4 = false;
            				}
HXDLIN( 792)				if (canHit4) {
HXLINE( 792)					canHit3 = n1->mustPress;
            				}
            				else {
HXLINE( 792)					canHit3 = false;
            				}
HXDLIN( 792)				if (canHit3) {
HXLINE( 792)					canHit2 = !(n1->tooLate);
            				}
            				else {
HXLINE( 792)					canHit2 = false;
            				}
HXDLIN( 792)				if (canHit2) {
HXLINE( 792)					canHit1 = !(n1->wasGoodHit);
            				}
            				else {
HXLINE( 792)					canHit1 = false;
            				}
HXDLIN( 792)				if (canHit1) {
HXLINE( 792)					canHit = !(n1->blockHit);
            				}
            				else {
HXLINE( 792)					canHit = false;
            				}
HXLINE( 795)				if (this->guitarHeroSustains) {
HXLINE( 796)					bool canHit5;
HXDLIN( 796)					if (canHit) {
HXLINE( 796)						canHit5 = ::hx::IsNotNull( n1->parent );
            					}
            					else {
HXLINE( 796)						canHit5 = false;
            					}
HXDLIN( 796)					if (canHit5) {
HXLINE( 796)						canHit = n1->parent->wasGoodHit;
            					}
            					else {
HXLINE( 796)						canHit = false;
            					}
            				}
HXLINE( 798)				bool _hx_tmp1;
HXDLIN( 798)				if (canHit) {
HXLINE( 798)					_hx_tmp1 = n1->isSustainNote;
            				}
            				else {
HXLINE( 798)					_hx_tmp1 = false;
            				}
HXDLIN( 798)				if (_hx_tmp1) {
HXLINE( 799)					bool released = !(holdArray->__get(n1->noteData));
HXLINE( 801)					if (!(released)) {
HXLINE( 802)						this->goodNoteHit(n1);
            					}
            				}
            			}
            		}
HXLINE( 808)		bool _hx_tmp2;
HXDLIN( 808)		if (::backend::Controls_obj::instance->controllerMode) {
HXLINE( 808)			_hx_tmp2 = releaseArray->contains(true);
            		}
            		else {
HXLINE( 808)			_hx_tmp2 = false;
            		}
HXDLIN( 808)		if (_hx_tmp2) {
HXLINE( 809)			int _g4 = 0;
HXDLIN( 809)			int _g5 = releaseArray->length;
HXDLIN( 809)			while((_g4 < _g5)){
HXLINE( 809)				_g4 = (_g4 + 1);
HXDLIN( 809)				int i1 = (_g4 - 1);
HXLINE( 810)				if (releaseArray->__get(i1)) {
HXLINE( 811)					this->keyReleased(i1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(EditorPlayState_obj,keysCheck,(void))

void EditorPlayState_obj::opponentNoteHit( ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_816_opponentNoteHit)
HXLINE( 817)		bool _hx_tmp;
HXDLIN( 817)		if (( (bool)(::states::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE( 817)			_hx_tmp = (this->opponentVocals->_length <= 0);
            		}
            		else {
HXLINE( 817)			_hx_tmp = false;
            		}
HXDLIN( 817)		if (_hx_tmp) {
HXLINE( 818)			this->vocals->set_volume(( (Float)(1) ));
            		}
HXLINE( 820)		 ::objects::StrumNote strum = Dynamic( this->opponentStrums->members->__get(::Std_obj::_hx_int(::Math_obj::abs(( (Float)(note->noteData) ))))).StaticCast<  ::objects::StrumNote >();
HXLINE( 821)		if (::hx::IsNotNull( strum )) {
HXLINE( 822)			strum->playAnim(HX_("confirm",00,9d,39,10),true);
HXLINE( 823)			strum->resetAnim = (((::backend::Conductor_obj::stepCrochet * ((Float)1.25)) / ( (Float)(1000) )) / this->playbackRate);
            		}
HXLINE( 825)		note->hitByOpponent = true;
HXLINE( 827)		if (!(note->isSustainNote)) {
HXLINE( 828)			this->invalidateNote(note);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,opponentNoteHit,(void))

void EditorPlayState_obj::goodNoteHit( ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_832_goodNoteHit)
HXLINE( 833)		if (note->wasGoodHit) {
HXLINE( 833)			return;
            		}
HXLINE( 835)		note->wasGoodHit = true;
HXLINE( 836)		bool _hx_tmp;
HXDLIN( 836)		if ((::backend::ClientPrefs_obj::data->hitsoundVolume > 0)) {
HXLINE( 836)			_hx_tmp = !(note->hitsoundDisabled);
            		}
            		else {
HXLINE( 836)			_hx_tmp = false;
            		}
HXDLIN( 836)		if (_hx_tmp) {
HXLINE( 837)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 837)			 ::openfl::media::Sound _hx_tmp2 = ::backend::Paths_obj::sound(HX_("hitsound",9c,79,fe,2c),null());
HXDLIN( 837)			_hx_tmp1->play(_hx_tmp2,::backend::ClientPrefs_obj::data->hitsoundVolume,null(),null(),null(),null());
            		}
HXLINE( 839)		if (note->hitCausesMiss) {
HXLINE( 840)			this->noteMiss(note);
HXLINE( 841)			bool _hx_tmp3;
HXDLIN( 841)			if (!(( (bool)(note->noteSplashData->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) ))) {
HXLINE( 841)				_hx_tmp3 = !(note->isSustainNote);
            			}
            			else {
HXLINE( 841)				_hx_tmp3 = false;
            			}
HXDLIN( 841)			if (_hx_tmp3) {
HXLINE( 842)				this->spawnNoteSplashOnNote(note);
            			}
HXLINE( 844)			if (!(note->isSustainNote)) {
HXLINE( 845)				this->invalidateNote(note);
            			}
HXLINE( 846)			return;
            		}
HXLINE( 849)		if (!(note->isSustainNote)) {
HXLINE( 851)			this->combo++;
HXLINE( 852)			if ((this->combo > 9999)) {
HXLINE( 852)				this->combo = 9999;
            			}
HXLINE( 853)			this->popUpScore(note);
            		}
HXLINE( 856)		 ::objects::StrumNote spr = Dynamic( this->playerStrums->members->__get(note->noteData)).StaticCast<  ::objects::StrumNote >();
HXLINE( 857)		if (::hx::IsNotNull( spr )) {
HXLINE( 857)			spr->playAnim(HX_("confirm",00,9d,39,10),true);
            		}
HXLINE( 858)		this->vocals->set_volume(( (Float)(1) ));
HXLINE( 860)		if (!(note->isSustainNote)) {
HXLINE( 861)			this->invalidateNote(note);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,goodNoteHit,(void))

void EditorPlayState_obj::noteMiss( ::objects::Note daNote){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::states::editors::EditorPlayState,_gthis, ::objects::Note,daNote) HXARGC(1)
            		void _hx_run( ::objects::Note note){
            			HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_867_noteMiss)
HXLINE( 867)			bool _hx_tmp;
HXDLIN( 867)			bool _hx_tmp1;
HXDLIN( 867)			bool _hx_tmp2;
HXDLIN( 867)			bool _hx_tmp3;
HXDLIN( 867)			if (::hx::IsInstanceNotEq( daNote,note )) {
HXLINE( 867)				_hx_tmp3 = daNote->mustPress;
            			}
            			else {
HXLINE( 867)				_hx_tmp3 = false;
            			}
HXDLIN( 867)			if (_hx_tmp3) {
HXLINE( 867)				_hx_tmp2 = (daNote->noteData == note->noteData);
            			}
            			else {
HXLINE( 867)				_hx_tmp2 = false;
            			}
HXDLIN( 867)			if (_hx_tmp2) {
HXLINE( 867)				_hx_tmp1 = (daNote->isSustainNote == note->isSustainNote);
            			}
            			else {
HXLINE( 867)				_hx_tmp1 = false;
            			}
HXDLIN( 867)			if (_hx_tmp1) {
HXLINE( 867)				_hx_tmp = (::Math_obj::abs((daNote->strumTime - note->strumTime)) < 1);
            			}
            			else {
HXLINE( 867)				_hx_tmp = false;
            			}
HXDLIN( 867)			if (_hx_tmp) {
HXLINE( 868)				_gthis->invalidateNote(daNote);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_864_noteMiss)
HXDLIN( 864)		 ::states::editors::EditorPlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 866)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis,daNote)),null());
HXLINE( 871)		bool _hx_tmp;
HXDLIN( 871)		bool _hx_tmp1;
HXDLIN( 871)		if (::hx::IsNotNull( daNote )) {
HXLINE( 871)			_hx_tmp1 = this->guitarHeroSustains;
            		}
            		else {
HXLINE( 871)			_hx_tmp1 = false;
            		}
HXDLIN( 871)		if (_hx_tmp1) {
HXLINE( 871)			_hx_tmp = ::hx::IsNull( daNote->parent );
            		}
            		else {
HXLINE( 871)			_hx_tmp = false;
            		}
HXDLIN( 871)		if (_hx_tmp) {
HXLINE( 872)			if ((daNote->tail->length > 0)) {
HXLINE( 873)				daNote->set_alpha(((Float)0.35));
HXLINE( 874)				{
HXLINE( 874)					int _g = 0;
HXDLIN( 874)					::Array< ::Dynamic> _g1 = daNote->tail;
HXDLIN( 874)					while((_g < _g1->length)){
HXLINE( 874)						 ::objects::Note childNote = _g1->__get(_g).StaticCast<  ::objects::Note >();
HXDLIN( 874)						_g = (_g + 1);
HXLINE( 875)						childNote->set_alpha(daNote->alpha);
HXLINE( 876)						childNote->missed = true;
HXLINE( 877)						childNote->canBeHit = false;
HXLINE( 878)						childNote->ignoreNote = true;
HXLINE( 879)						childNote->tooLate = true;
            					}
            				}
HXLINE( 881)				daNote->missed = true;
HXLINE( 882)				daNote->canBeHit = false;
            			}
HXLINE( 885)			if (daNote->missed) {
HXLINE( 886)				return;
            			}
            		}
HXLINE( 889)		bool _hx_tmp2;
HXDLIN( 889)		bool _hx_tmp3;
HXDLIN( 889)		bool _hx_tmp4;
HXDLIN( 889)		if (::hx::IsNotNull( daNote )) {
HXLINE( 889)			_hx_tmp4 = this->guitarHeroSustains;
            		}
            		else {
HXLINE( 889)			_hx_tmp4 = false;
            		}
HXDLIN( 889)		if (_hx_tmp4) {
HXLINE( 889)			_hx_tmp3 = ::hx::IsNotNull( daNote->parent );
            		}
            		else {
HXLINE( 889)			_hx_tmp3 = false;
            		}
HXDLIN( 889)		if (_hx_tmp3) {
HXLINE( 889)			_hx_tmp2 = daNote->isSustainNote;
            		}
            		else {
HXLINE( 889)			_hx_tmp2 = false;
            		}
HXDLIN( 889)		if (_hx_tmp2) {
HXLINE( 890)			if (daNote->missed) {
HXLINE( 891)				return;
            			}
HXLINE( 893)			 ::objects::Note parentNote = daNote->parent;
HXLINE( 894)			bool _hx_tmp5;
HXDLIN( 894)			if (parentNote->wasGoodHit) {
HXLINE( 894)				_hx_tmp5 = (parentNote->tail->length > 0);
            			}
            			else {
HXLINE( 894)				_hx_tmp5 = false;
            			}
HXDLIN( 894)			if (_hx_tmp5) {
HXLINE( 895)				int _g2 = 0;
HXDLIN( 895)				::Array< ::Dynamic> _g3 = parentNote->tail;
HXDLIN( 895)				while((_g2 < _g3->length)){
HXLINE( 895)					 ::objects::Note child = _g3->__get(_g2).StaticCast<  ::objects::Note >();
HXDLIN( 895)					_g2 = (_g2 + 1);
HXDLIN( 895)					if (::hx::IsInstanceNotEq( child,daNote )) {
HXLINE( 896)						child->missed = true;
HXLINE( 897)						child->canBeHit = false;
HXLINE( 898)						child->ignoreNote = true;
HXLINE( 899)						child->tooLate = true;
            					}
            				}
            			}
            		}
HXLINE( 905)		this->songMisses++;
HXLINE( 906)		this->totalPlayed++;
HXLINE( 907)		this->RecalculateRating(true);
HXLINE( 908)		this->vocals->set_volume(( (Float)(0) ));
HXLINE( 909)		this->combo = 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,noteMiss,(void))

void EditorPlayState_obj::invalidateNote( ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_912_invalidateNote)
HXLINE( 913)		note->kill();
HXLINE( 914)		this->notes->remove(note,true).StaticCast<  ::objects::Note >();
HXLINE( 915)		note->destroy();
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,invalidateNote,(void))

void EditorPlayState_obj::spawnNoteSplashOnNote( ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_919_spawnNoteSplashOnNote)
HXDLIN( 919)		if (::hx::IsNotNull( note )) {
HXLINE( 920)			 ::objects::StrumNote strum = Dynamic( this->playerStrums->members->__get(note->noteData)).StaticCast<  ::objects::StrumNote >();
HXLINE( 921)			if (::hx::IsNotNull( strum )) {
HXLINE( 922)				this->spawnNoteSplash(strum->x,strum->y,note->noteData,note);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,spawnNoteSplashOnNote,(void))

void EditorPlayState_obj::spawnNoteSplash(Float x,Float y,int data, ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_926_spawnNoteSplash)
HXLINE( 927)		 ::objects::NoteSplash splash = this->grpNoteSplashes->recycle(::hx::ClassOf< ::objects::NoteSplash >(),null(),null(),null()).StaticCast<  ::objects::NoteSplash >();
HXLINE( 928)		splash->setupNoteSplash(x,y,data,note);
HXLINE( 929)		this->grpNoteSplashes->add(splash).StaticCast<  ::objects::NoteSplash >();
            	}


HX_DEFINE_DYNAMIC_FUNC4(EditorPlayState_obj,spawnNoteSplash,(void))

void EditorPlayState_obj::resyncVocals(){
            	HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_933_resyncVocals)
HXLINE( 934)		if (::hx::IsNotNull( this->finishTimer )) {
HXLINE( 934)			return;
            		}
HXLINE( 936)		::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE( 937)		::flixel::FlxG_obj::sound->music->set_pitch(this->playbackRate);
HXLINE( 938)		::backend::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE( 939)		if ((::backend::Conductor_obj::songPosition <= this->vocals->_length)) {
HXLINE( 941)			this->vocals->set_time(::backend::Conductor_obj::songPosition);
HXLINE( 942)			this->vocals->set_pitch(this->playbackRate);
            		}
HXLINE( 945)		if ((::backend::Conductor_obj::songPosition <= this->opponentVocals->_length)) {
HXLINE( 947)			this->opponentVocals->set_time(::backend::Conductor_obj::songPosition);
HXLINE( 948)			this->opponentVocals->set_pitch(this->playbackRate);
            		}
HXLINE( 950)		this->vocals->play(null(),null(),null());
HXLINE( 951)		this->opponentVocals->play(null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(EditorPlayState_obj,resyncVocals,(void))

void EditorPlayState_obj::RecalculateRating(::hx::Null< bool >  __o_badHit){
            		bool badHit = __o_badHit.Default(false);
            	HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_954_RecalculateRating)
HXLINE( 955)		if ((this->totalPlayed != 0)) {
HXLINE( 956)			this->ratingPercent = ::Math_obj::min(( (Float)(1) ),::Math_obj::max(( (Float)(0) ),(this->totalNotesHit / ( (Float)(this->totalPlayed) ))));
            		}
HXLINE( 958)		this->fullComboUpdate();
HXLINE( 959)		this->updateScore(badHit);
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,RecalculateRating,(void))

void EditorPlayState_obj::updateScore(::hx::Null< bool >  __o_miss){
            		bool miss = __o_miss.Default(false);
            	HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_963_updateScore)
HXLINE( 964)		::String str = HX_("?",3f,00,00,00);
HXLINE( 965)		if ((this->totalPlayed != 0)) {
HXLINE( 967)			Float percent = ::backend::CoolUtil_obj::floorDecimal((this->ratingPercent * ( (Float)(100) )),2);
HXLINE( 968)			str = (((HX_("",00,00,00,00) + percent) + HX_("% - ",6e,54,8d,18)) + this->ratingFC);
            		}
HXLINE( 970)		this->scoreTxt->set_text((((((HX_("Hits: ",86,19,c9,8b) + this->songHits) + HX_(" | Misses: ",f4,d7,bf,55)) + this->songMisses) + HX_(" | Rating: ",67,bc,53,d1)) + str));
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,updateScore,(void))

void EditorPlayState_obj::fullComboUpdate(){
            	HX_STACKFRAME(&_hx_pos_9bca58946d5b3941_974_fullComboUpdate)
HXLINE( 975)		int sicks = this->ratingsData->__get(0).StaticCast<  ::backend::Rating >()->hits;
HXLINE( 976)		int goods = this->ratingsData->__get(1).StaticCast<  ::backend::Rating >()->hits;
HXLINE( 977)		int bads = this->ratingsData->__get(2).StaticCast<  ::backend::Rating >()->hits;
HXLINE( 978)		int shits = this->ratingsData->__get(3).StaticCast<  ::backend::Rating >()->hits;
HXLINE( 980)		this->ratingFC = HX_("Clear",6d,e1,88,db);
HXLINE( 981)		if ((this->songMisses < 1)) {
HXLINE( 983)			bool _hx_tmp;
HXDLIN( 983)			if ((bads <= 0)) {
HXLINE( 983)				_hx_tmp = (shits > 0);
            			}
            			else {
HXLINE( 983)				_hx_tmp = true;
            			}
HXDLIN( 983)			if (_hx_tmp) {
HXLINE( 983)				this->ratingFC = HX_("FC",3d,3d,00,00);
            			}
            			else {
HXLINE( 984)				if ((goods > 0)) {
HXLINE( 984)					this->ratingFC = HX_("GFC",44,1d,36,00);
            				}
            				else {
HXLINE( 985)					if ((sicks > 0)) {
HXLINE( 985)						this->ratingFC = HX_("SFC",50,38,3f,00);
            					}
            				}
            			}
            		}
            		else {
HXLINE( 987)			if ((this->songMisses < 10)) {
HXLINE( 988)				this->ratingFC = HX_("SDCB",70,89,10,37);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(EditorPlayState_obj,fullComboUpdate,(void))

 ::Dynamic EditorPlayState_obj::loadCharacterFile(::String _hx_char){
            	HX_GC_STACKFRAME(&_hx_pos_9bca58946d5b3941_991_loadCharacterFile)
HXLINE( 992)		::String characterPath = ((HX_("characters/",45,3c,bf,be) + _hx_char) + HX_(".json",56,f1,d6,c2));
HXLINE( 994)		::String path = ::backend::Paths_obj::modFolders(characterPath);
HXLINE( 995)		if (!(::sys::FileSystem_obj::exists(path))) {
HXLINE( 996)			::String file = characterPath;
HXDLIN( 996)			if (::hx::IsNull( file )) {
HXLINE( 996)				file = HX_("",00,00,00,00);
            			}
HXDLIN( 996)			path = (HX_("assets/shared/",1e,69,1e,47) + file);
            		}
HXLINE( 999)		if (!(::sys::FileSystem_obj::exists(path))) {
HXLINE(1005)			::String file1 = ((HX_("characters/",45,3c,bf,be) + ::objects::Character_obj::DEFAULT_CHARACTER) + HX_(".json",56,f1,d6,c2));
HXDLIN(1005)			if (::hx::IsNull( file1 )) {
HXLINE(1005)				file1 = HX_("",00,00,00,00);
            			}
HXDLIN(1005)			path = (HX_("assets/shared/",1e,69,1e,47) + file1);
            		}
HXLINE(1009)		::String rawJson = ::sys::io::File_obj::getContent(path);
HXLINE(1013)		return  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,rawJson)->doParse();
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,loadCharacterFile,return )


::hx::ObjectPtr< EditorPlayState_obj > EditorPlayState_obj::__new(Float playbackRate) {
	::hx::ObjectPtr< EditorPlayState_obj > __this = new EditorPlayState_obj();
	__this->__construct(playbackRate);
	return __this;
}

::hx::ObjectPtr< EditorPlayState_obj > EditorPlayState_obj::__alloc(::hx::Ctx *_hx_ctx,Float playbackRate) {
	EditorPlayState_obj *__this = (EditorPlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EditorPlayState_obj), true, "states.editors.EditorPlayState"));
	*(void **)__this = EditorPlayState_obj::_hx_vtable;
	__this->__construct(playbackRate);
	return __this;
}

EditorPlayState_obj::EditorPlayState_obj()
{
}

void EditorPlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EditorPlayState);
	HX_MARK_MEMBER_NAME(finishTimer,"finishTimer");
	HX_MARK_MEMBER_NAME(noteKillOffset,"noteKillOffset");
	HX_MARK_MEMBER_NAME(spawnTime,"spawnTime");
	HX_MARK_MEMBER_NAME(startingSong,"startingSong");
	HX_MARK_MEMBER_NAME(playbackRate,"playbackRate");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(opponentVocals,"opponentVocals");
	HX_MARK_MEMBER_NAME(inst,"inst");
	HX_MARK_MEMBER_NAME(notes,"notes");
	HX_MARK_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_MARK_MEMBER_NAME(ratingsData,"ratingsData");
	HX_MARK_MEMBER_NAME(strumLineNotes,"strumLineNotes");
	HX_MARK_MEMBER_NAME(opponentStrums,"opponentStrums");
	HX_MARK_MEMBER_NAME(playerStrums,"playerStrums");
	HX_MARK_MEMBER_NAME(grpNoteSplashes,"grpNoteSplashes");
	HX_MARK_MEMBER_NAME(combo,"combo");
	HX_MARK_MEMBER_NAME(lastRating,"lastRating");
	HX_MARK_MEMBER_NAME(lastCombo,"lastCombo");
	HX_MARK_MEMBER_NAME(lastScore,"lastScore");
	HX_MARK_MEMBER_NAME(keysArray,"keysArray");
	HX_MARK_MEMBER_NAME(songHits,"songHits");
	HX_MARK_MEMBER_NAME(songMisses,"songMisses");
	HX_MARK_MEMBER_NAME(songLength,"songLength");
	HX_MARK_MEMBER_NAME(songSpeed,"songSpeed");
	HX_MARK_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_MARK_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_MARK_MEMBER_NAME(ratingPercent,"ratingPercent");
	HX_MARK_MEMBER_NAME(ratingFC,"ratingFC");
	HX_MARK_MEMBER_NAME(showCombo,"showCombo");
	HX_MARK_MEMBER_NAME(showComboNum,"showComboNum");
	HX_MARK_MEMBER_NAME(showRating,"showRating");
	HX_MARK_MEMBER_NAME(startOffset,"startOffset");
	HX_MARK_MEMBER_NAME(startPos,"startPos");
	HX_MARK_MEMBER_NAME(timerToStart,"timerToStart");
	HX_MARK_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_MARK_MEMBER_NAME(dataTxt,"dataTxt");
	HX_MARK_MEMBER_NAME(guitarHeroSustains,"guitarHeroSustains");
	HX_MARK_MEMBER_NAME(lastStepHit,"lastStepHit");
	HX_MARK_MEMBER_NAME(lastBeatHit,"lastBeatHit");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void EditorPlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(finishTimer,"finishTimer");
	HX_VISIT_MEMBER_NAME(noteKillOffset,"noteKillOffset");
	HX_VISIT_MEMBER_NAME(spawnTime,"spawnTime");
	HX_VISIT_MEMBER_NAME(startingSong,"startingSong");
	HX_VISIT_MEMBER_NAME(playbackRate,"playbackRate");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(opponentVocals,"opponentVocals");
	HX_VISIT_MEMBER_NAME(inst,"inst");
	HX_VISIT_MEMBER_NAME(notes,"notes");
	HX_VISIT_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_VISIT_MEMBER_NAME(ratingsData,"ratingsData");
	HX_VISIT_MEMBER_NAME(strumLineNotes,"strumLineNotes");
	HX_VISIT_MEMBER_NAME(opponentStrums,"opponentStrums");
	HX_VISIT_MEMBER_NAME(playerStrums,"playerStrums");
	HX_VISIT_MEMBER_NAME(grpNoteSplashes,"grpNoteSplashes");
	HX_VISIT_MEMBER_NAME(combo,"combo");
	HX_VISIT_MEMBER_NAME(lastRating,"lastRating");
	HX_VISIT_MEMBER_NAME(lastCombo,"lastCombo");
	HX_VISIT_MEMBER_NAME(lastScore,"lastScore");
	HX_VISIT_MEMBER_NAME(keysArray,"keysArray");
	HX_VISIT_MEMBER_NAME(songHits,"songHits");
	HX_VISIT_MEMBER_NAME(songMisses,"songMisses");
	HX_VISIT_MEMBER_NAME(songLength,"songLength");
	HX_VISIT_MEMBER_NAME(songSpeed,"songSpeed");
	HX_VISIT_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_VISIT_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_VISIT_MEMBER_NAME(ratingPercent,"ratingPercent");
	HX_VISIT_MEMBER_NAME(ratingFC,"ratingFC");
	HX_VISIT_MEMBER_NAME(showCombo,"showCombo");
	HX_VISIT_MEMBER_NAME(showComboNum,"showComboNum");
	HX_VISIT_MEMBER_NAME(showRating,"showRating");
	HX_VISIT_MEMBER_NAME(startOffset,"startOffset");
	HX_VISIT_MEMBER_NAME(startPos,"startPos");
	HX_VISIT_MEMBER_NAME(timerToStart,"timerToStart");
	HX_VISIT_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_VISIT_MEMBER_NAME(dataTxt,"dataTxt");
	HX_VISIT_MEMBER_NAME(guitarHeroSustains,"guitarHeroSustains");
	HX_VISIT_MEMBER_NAME(lastStepHit,"lastStepHit");
	HX_VISIT_MEMBER_NAME(lastBeatHit,"lastBeatHit");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val EditorPlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"inst") ) { return ::hx::Val( inst ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { return ::hx::Val( notes ); }
		if (HX_FIELD_EQ(inName,"combo") ) { return ::hx::Val( combo ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dataTxt") ) { return ::hx::Val( dataTxt ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"endSong") ) { return ::hx::Val( endSong_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"songHits") ) { return ::hx::Val( songHits ); }
		if (HX_FIELD_EQ(inName,"ratingFC") ) { return ::hx::Val( ratingFC ); }
		if (HX_FIELD_EQ(inName,"startPos") ) { return ::hx::Val( startPos ); }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { return ::hx::Val( scoreTxt ); }
		if (HX_FIELD_EQ(inName,"noteMiss") ) { return ::hx::Val( noteMiss_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"spawnTime") ) { return ::hx::Val( spawnTime ); }
		if (HX_FIELD_EQ(inName,"lastCombo") ) { return ::hx::Val( lastCombo ); }
		if (HX_FIELD_EQ(inName,"lastScore") ) { return ::hx::Val( lastScore ); }
		if (HX_FIELD_EQ(inName,"keysArray") ) { return ::hx::Val( keysArray ); }
		if (HX_FIELD_EQ(inName,"songSpeed") ) { return ::hx::Val( songSpeed ); }
		if (HX_FIELD_EQ(inName,"showCombo") ) { return ::hx::Val( showCombo ); }
		if (HX_FIELD_EQ(inName,"startSong") ) { return ::hx::Val( startSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"keysCheck") ) { return ::hx::Val( keysCheck_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastRating") ) { return ::hx::Val( lastRating ); }
		if (HX_FIELD_EQ(inName,"songMisses") ) { return ::hx::Val( songMisses ); }
		if (HX_FIELD_EQ(inName,"songLength") ) { return ::hx::Val( songLength ); }
		if (HX_FIELD_EQ(inName,"showRating") ) { return ::hx::Val( showRating ); }
		if (HX_FIELD_EQ(inName,"sectionHit") ) { return ::hx::Val( sectionHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"finishSong") ) { return ::hx::Val( finishSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"popUpScore") ) { return ::hx::Val( popUpScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKeyPress") ) { return ::hx::Val( onKeyPress_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyPressed") ) { return ::hx::Val( keyPressed_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"finishTimer") ) { return ::hx::Val( finishTimer ); }
		if (HX_FIELD_EQ(inName,"ratingsData") ) { return ::hx::Val( ratingsData ); }
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { return ::hx::Val( totalPlayed ); }
		if (HX_FIELD_EQ(inName,"startOffset") ) { return ::hx::Val( startOffset ); }
		if (HX_FIELD_EQ(inName,"lastStepHit") ) { return ::hx::Val( lastStepHit ); }
		if (HX_FIELD_EQ(inName,"lastBeatHit") ) { return ::hx::Val( lastBeatHit ); }
		if (HX_FIELD_EQ(inName,"keyReleased") ) { return ::hx::Val( keyReleased_dyn() ); }
		if (HX_FIELD_EQ(inName,"goodNoteHit") ) { return ::hx::Val( goodNoteHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateScore") ) { return ::hx::Val( updateScore_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"startingSong") ) { return ::hx::Val( startingSong ); }
		if (HX_FIELD_EQ(inName,"playbackRate") ) { return ::hx::Val( playbackRate ); }
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { return ::hx::Val( unspawnNotes ); }
		if (HX_FIELD_EQ(inName,"playerStrums") ) { return ::hx::Val( playerStrums ); }
		if (HX_FIELD_EQ(inName,"showComboNum") ) { return ::hx::Val( showComboNum ); }
		if (HX_FIELD_EQ(inName,"timerToStart") ) { return ::hx::Val( timerToStart ); }
		if (HX_FIELD_EQ(inName,"generateSong") ) { return ::hx::Val( generateSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKeyRelease") ) { return ::hx::Val( onKeyRelease_dyn() ); }
		if (HX_FIELD_EQ(inName,"resyncVocals") ) { return ::hx::Val( resyncVocals_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { return ::hx::Val( totalNotesHit ); }
		if (HX_FIELD_EQ(inName,"ratingPercent") ) { return ::hx::Val( ratingPercent ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"noteKillOffset") ) { return ::hx::Val( noteKillOffset ); }
		if (HX_FIELD_EQ(inName,"opponentVocals") ) { return ::hx::Val( opponentVocals ); }
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { return ::hx::Val( strumLineNotes ); }
		if (HX_FIELD_EQ(inName,"opponentStrums") ) { return ::hx::Val( opponentStrums ); }
		if (HX_FIELD_EQ(inName,"invalidateNote") ) { return ::hx::Val( invalidateNote_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"grpNoteSplashes") ) { return ::hx::Val( grpNoteSplashes ); }
		if (HX_FIELD_EQ(inName,"cachePopUpScore") ) { return ::hx::Val( cachePopUpScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"opponentNoteHit") ) { return ::hx::Val( opponentNoteHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"spawnNoteSplash") ) { return ::hx::Val( spawnNoteSplash_dyn() ); }
		if (HX_FIELD_EQ(inName,"fullComboUpdate") ) { return ::hx::Val( fullComboUpdate_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"RecalculateRating") ) { return ::hx::Val( RecalculateRating_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadCharacterFile") ) { return ::hx::Val( loadCharacterFile_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"guitarHeroSustains") ) { return ::hx::Val( guitarHeroSustains ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"generateStaticArrows") ) { return ::hx::Val( generateStaticArrows_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"spawnNoteSplashOnNote") ) { return ::hx::Val( spawnNoteSplashOnNote_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val EditorPlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"inst") ) { inst=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { notes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"combo") ) { combo=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dataTxt") ) { dataTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"songHits") ) { songHits=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratingFC") ) { ratingFC=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startPos") ) { startPos=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { scoreTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"spawnTime") ) { spawnTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastCombo") ) { lastCombo=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastScore") ) { lastScore=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keysArray") ) { keysArray=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songSpeed") ) { songSpeed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showCombo") ) { showCombo=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastRating") ) { lastRating=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songMisses") ) { songMisses=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songLength") ) { songLength=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showRating") ) { showRating=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"finishTimer") ) { finishTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratingsData") ) { ratingsData=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { totalPlayed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startOffset") ) { startOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastStepHit") ) { lastStepHit=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastBeatHit") ) { lastBeatHit=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"startingSong") ) { startingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playbackRate") ) { playbackRate=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { unspawnNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playerStrums") ) { playerStrums=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showComboNum") ) { showComboNum=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timerToStart") ) { timerToStart=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { totalNotesHit=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratingPercent") ) { ratingPercent=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"noteKillOffset") ) { noteKillOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opponentVocals") ) { opponentVocals=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { strumLineNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opponentStrums") ) { opponentStrums=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"grpNoteSplashes") ) { grpNoteSplashes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"guitarHeroSustains") ) { guitarHeroSustains=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EditorPlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("finishTimer",72,e2,3a,37));
	outFields->push(HX_("noteKillOffset",63,b4,6d,a3));
	outFields->push(HX_("spawnTime",e8,cf,87,ac));
	outFields->push(HX_("startingSong",b5,31,61,33));
	outFields->push(HX_("playbackRate",9b,3a,8b,c0));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("opponentVocals",db,d1,18,64));
	outFields->push(HX_("inst",c6,43,bb,45));
	outFields->push(HX_("notes",41,dc,ca,9f));
	outFields->push(HX_("unspawnNotes",9f,67,f2,45));
	outFields->push(HX_("ratingsData",00,fb,a3,bb));
	outFields->push(HX_("strumLineNotes",24,f1,48,a4));
	outFields->push(HX_("opponentStrums",87,04,01,1c));
	outFields->push(HX_("playerStrums",4b,e1,2a,0d));
	outFields->push(HX_("grpNoteSplashes",2c,f3,de,7b));
	outFields->push(HX_("combo",4e,28,5d,4a));
	outFields->push(HX_("lastRating",13,17,65,86));
	outFields->push(HX_("lastCombo",18,56,0a,97));
	outFields->push(HX_("lastScore",1c,a1,86,c5));
	outFields->push(HX_("keysArray",05,67,3a,17));
	outFields->push(HX_("songHits",35,a1,e6,32));
	outFields->push(HX_("songMisses",1f,08,d9,b1));
	outFields->push(HX_("songLength",9b,3a,8c,fa));
	outFields->push(HX_("songSpeed",72,df,e3,b0));
	outFields->push(HX_("totalPlayed",37,de,ee,fd));
	outFields->push(HX_("totalNotesHit",76,f4,57,a6));
	outFields->push(HX_("ratingPercent",28,0c,c7,29));
	outFields->push(HX_("ratingFC",9a,72,95,59));
	outFields->push(HX_("showCombo",11,8e,c1,78));
	outFields->push(HX_("showComboNum",b5,68,a3,9d));
	outFields->push(HX_("showRating",fa,d8,fe,24));
	outFields->push(HX_("startOffset",95,f5,25,d8));
	outFields->push(HX_("startPos",52,0a,99,42));
	outFields->push(HX_("timerToStart",a2,db,42,55));
	outFields->push(HX_("scoreTxt",3e,12,c4,0e));
	outFields->push(HX_("dataTxt",66,86,d9,11));
	outFields->push(HX_("guitarHeroSustains",74,ae,d8,47));
	outFields->push(HX_("lastStepHit",b1,62,ed,35));
	outFields->push(HX_("lastBeatHit",c7,9e,b0,28));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo EditorPlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(EditorPlayState_obj,finishTimer),HX_("finishTimer",72,e2,3a,37)},
	{::hx::fsFloat,(int)offsetof(EditorPlayState_obj,noteKillOffset),HX_("noteKillOffset",63,b4,6d,a3)},
	{::hx::fsFloat,(int)offsetof(EditorPlayState_obj,spawnTime),HX_("spawnTime",e8,cf,87,ac)},
	{::hx::fsBool,(int)offsetof(EditorPlayState_obj,startingSong),HX_("startingSong",b5,31,61,33)},
	{::hx::fsFloat,(int)offsetof(EditorPlayState_obj,playbackRate),HX_("playbackRate",9b,3a,8b,c0)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(EditorPlayState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(EditorPlayState_obj,opponentVocals),HX_("opponentVocals",db,d1,18,64)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(EditorPlayState_obj,inst),HX_("inst",c6,43,bb,45)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(EditorPlayState_obj,notes),HX_("notes",41,dc,ca,9f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(EditorPlayState_obj,unspawnNotes),HX_("unspawnNotes",9f,67,f2,45)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(EditorPlayState_obj,ratingsData),HX_("ratingsData",00,fb,a3,bb)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(EditorPlayState_obj,strumLineNotes),HX_("strumLineNotes",24,f1,48,a4)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(EditorPlayState_obj,opponentStrums),HX_("opponentStrums",87,04,01,1c)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(EditorPlayState_obj,playerStrums),HX_("playerStrums",4b,e1,2a,0d)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(EditorPlayState_obj,grpNoteSplashes),HX_("grpNoteSplashes",2c,f3,de,7b)},
	{::hx::fsInt,(int)offsetof(EditorPlayState_obj,combo),HX_("combo",4e,28,5d,4a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(EditorPlayState_obj,lastRating),HX_("lastRating",13,17,65,86)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(EditorPlayState_obj,lastCombo),HX_("lastCombo",18,56,0a,97)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(EditorPlayState_obj,lastScore),HX_("lastScore",1c,a1,86,c5)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(EditorPlayState_obj,keysArray),HX_("keysArray",05,67,3a,17)},
	{::hx::fsInt,(int)offsetof(EditorPlayState_obj,songHits),HX_("songHits",35,a1,e6,32)},
	{::hx::fsInt,(int)offsetof(EditorPlayState_obj,songMisses),HX_("songMisses",1f,08,d9,b1)},
	{::hx::fsFloat,(int)offsetof(EditorPlayState_obj,songLength),HX_("songLength",9b,3a,8c,fa)},
	{::hx::fsFloat,(int)offsetof(EditorPlayState_obj,songSpeed),HX_("songSpeed",72,df,e3,b0)},
	{::hx::fsInt,(int)offsetof(EditorPlayState_obj,totalPlayed),HX_("totalPlayed",37,de,ee,fd)},
	{::hx::fsFloat,(int)offsetof(EditorPlayState_obj,totalNotesHit),HX_("totalNotesHit",76,f4,57,a6)},
	{::hx::fsFloat,(int)offsetof(EditorPlayState_obj,ratingPercent),HX_("ratingPercent",28,0c,c7,29)},
	{::hx::fsString,(int)offsetof(EditorPlayState_obj,ratingFC),HX_("ratingFC",9a,72,95,59)},
	{::hx::fsBool,(int)offsetof(EditorPlayState_obj,showCombo),HX_("showCombo",11,8e,c1,78)},
	{::hx::fsBool,(int)offsetof(EditorPlayState_obj,showComboNum),HX_("showComboNum",b5,68,a3,9d)},
	{::hx::fsBool,(int)offsetof(EditorPlayState_obj,showRating),HX_("showRating",fa,d8,fe,24)},
	{::hx::fsFloat,(int)offsetof(EditorPlayState_obj,startOffset),HX_("startOffset",95,f5,25,d8)},
	{::hx::fsFloat,(int)offsetof(EditorPlayState_obj,startPos),HX_("startPos",52,0a,99,42)},
	{::hx::fsFloat,(int)offsetof(EditorPlayState_obj,timerToStart),HX_("timerToStart",a2,db,42,55)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(EditorPlayState_obj,scoreTxt),HX_("scoreTxt",3e,12,c4,0e)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(EditorPlayState_obj,dataTxt),HX_("dataTxt",66,86,d9,11)},
	{::hx::fsBool,(int)offsetof(EditorPlayState_obj,guitarHeroSustains),HX_("guitarHeroSustains",74,ae,d8,47)},
	{::hx::fsInt,(int)offsetof(EditorPlayState_obj,lastStepHit),HX_("lastStepHit",b1,62,ed,35)},
	{::hx::fsInt,(int)offsetof(EditorPlayState_obj,lastBeatHit),HX_("lastBeatHit",c7,9e,b0,28)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *EditorPlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String EditorPlayState_obj_sMemberFields[] = {
	HX_("finishTimer",72,e2,3a,37),
	HX_("noteKillOffset",63,b4,6d,a3),
	HX_("spawnTime",e8,cf,87,ac),
	HX_("startingSong",b5,31,61,33),
	HX_("playbackRate",9b,3a,8b,c0),
	HX_("vocals",5e,10,51,59),
	HX_("opponentVocals",db,d1,18,64),
	HX_("inst",c6,43,bb,45),
	HX_("notes",41,dc,ca,9f),
	HX_("unspawnNotes",9f,67,f2,45),
	HX_("ratingsData",00,fb,a3,bb),
	HX_("strumLineNotes",24,f1,48,a4),
	HX_("opponentStrums",87,04,01,1c),
	HX_("playerStrums",4b,e1,2a,0d),
	HX_("grpNoteSplashes",2c,f3,de,7b),
	HX_("combo",4e,28,5d,4a),
	HX_("lastRating",13,17,65,86),
	HX_("lastCombo",18,56,0a,97),
	HX_("lastScore",1c,a1,86,c5),
	HX_("keysArray",05,67,3a,17),
	HX_("songHits",35,a1,e6,32),
	HX_("songMisses",1f,08,d9,b1),
	HX_("songLength",9b,3a,8c,fa),
	HX_("songSpeed",72,df,e3,b0),
	HX_("totalPlayed",37,de,ee,fd),
	HX_("totalNotesHit",76,f4,57,a6),
	HX_("ratingPercent",28,0c,c7,29),
	HX_("ratingFC",9a,72,95,59),
	HX_("showCombo",11,8e,c1,78),
	HX_("showComboNum",b5,68,a3,9d),
	HX_("showRating",fa,d8,fe,24),
	HX_("startOffset",95,f5,25,d8),
	HX_("startPos",52,0a,99,42),
	HX_("timerToStart",a2,db,42,55),
	HX_("scoreTxt",3e,12,c4,0e),
	HX_("dataTxt",66,86,d9,11),
	HX_("guitarHeroSustains",74,ae,d8,47),
	HX_("update",09,86,05,87),
	HX_("lastStepHit",b1,62,ed,35),
	HX_("stepHit",67,ae,41,81),
	HX_("lastBeatHit",c7,9e,b0,28),
	HX_("beatHit",7d,ea,04,74),
	HX_("sectionHit",6e,f5,cd,be),
	HX_("destroy",fa,2c,86,24),
	HX_("startSong",57,9d,4b,05),
	HX_("generateSong",aa,ed,2b,1f),
	HX_("generateStaticArrows",ad,44,90,42),
	HX_("finishSong",c8,b5,92,d8),
	HX_("endSong",50,dd,7c,2e),
	HX_("cachePopUpScore",48,66,94,1e),
	HX_("popUpScore",66,a1,f2,3f),
	HX_("onKeyPress",a3,cd,a8,ea),
	HX_("keyPressed",c3,72,6e,a8),
	HX_("onKeyRelease",e7,c7,b8,9f),
	HX_("keyReleased",7c,05,0c,bf),
	HX_("keysCheck",34,92,61,37),
	HX_("opponentNoteHit",64,75,4c,b1),
	HX_("goodNoteHit",c4,4d,c4,22),
	HX_("noteMiss",0e,78,8f,57),
	HX_("invalidateNote",0d,37,d7,6e),
	HX_("spawnNoteSplashOnNote",e5,04,43,52),
	HX_("spawnNoteSplash",14,69,b8,ca),
	HX_("resyncVocals",8c,16,ed,6a),
	HX_("RecalculateRating",b0,cb,cd,f8),
	HX_("updateScore",89,dc,71,5e),
	HX_("fullComboUpdate",a8,db,71,13),
	HX_("loadCharacterFile",bf,34,63,a0),
	::String(null()) };

::hx::Class EditorPlayState_obj::__mClass;

void EditorPlayState_obj::__register()
{
	EditorPlayState_obj _hx_dummy;
	EditorPlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.editors.EditorPlayState",7c,46,41,b0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EditorPlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EditorPlayState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EditorPlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EditorPlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
} // end namespace editors
