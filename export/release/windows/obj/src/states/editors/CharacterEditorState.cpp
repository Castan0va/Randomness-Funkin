// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_PsychCamera
#include <backend/PsychCamera.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxSlider
#include <flixel/addons/ui/FlxSlider.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxTypedUIGroup
#include <flixel/addons/ui/FlxTypedUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICheckBox
#include <flixel/addons/ui/FlxUICheckBox.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownHeader
#include <flixel/addons/ui/FlxUIDropDownHeader.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownMenu
#include <flixel/addons/ui/FlxUIDropDownMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUINumericStepper
#include <flixel/addons/ui/FlxUINumericStepper.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISlider
#include <flixel/addons/ui/FlxUISlider.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_StrNameLabel
#include <flixel/addons/ui/StrNameLabel.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFireTongue
#include <flixel/addons/ui/interfaces/IFireTongue.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteContainer
#include <flixel/group/FlxTypedSpriteContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_GraphicCursorCross
#include <flixel/system/debug/interaction/tools/GraphicCursorCross.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_flxanimate_FlxAnimate
#include <flxanimate/FlxAnimate.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxAnim
#include <flxanimate/animate/FlxAnim.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxSymbol
#include <flxanimate/animate/FlxSymbol.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_objects_BGSprite
#include <objects/BGSprite.h>
#endif
#ifndef INCLUDED_objects_Bar
#include <objects/Bar.h>
#endif
#ifndef INCLUDED_objects_Character
#include <objects/Character.h>
#endif
#ifndef INCLUDED_objects_HealthIcon
#include <objects/HealthIcon.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_net_FileReference
#include <openfl/net/FileReference.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_states_editors_CharacterEditorState
#include <states/editors/CharacterEditorState.h>
#endif
#ifndef INCLUDED_states_editors_MasterEditorMenu
#include <states/editors/MasterEditorMenu.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8fcf73527616c70a_23_new,"states.editors.CharacterEditorState","new",0x3d735681,"states.editors.CharacterEditorState.new","states/editors/CharacterEditorState.hx",23,0x7f042b4d)
static const Float _hx_array_data_788c020f_1[] = {
	(Float)0,(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_68_create,"states.editors.CharacterEditorState","create",0xa4b7ab7b,"states.editors.CharacterEditorState.create","states/editors/CharacterEditorState.hx",68,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_164_addHelpScreen,"states.editors.CharacterEditorState","addHelpScreen",0x13150bef,"states.editors.CharacterEditorState.addHelpScreen","states/editors/CharacterEditorState.hx",164,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_216_addCharacter,"states.editors.CharacterEditorState","addCharacter",0xac7f2b07,"states.editors.CharacterEditorState.addCharacter","states/editors/CharacterEditorState.hx",216,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_243_makeUIMenu,"states.editors.CharacterEditorState","makeUIMenu",0x5101c680,"states.editors.CharacterEditorState.makeUIMenu","states/editors/CharacterEditorState.hx",243,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_287_addGhostUI,"states.editors.CharacterEditorState","addGhostUI",0xe99ea741,"states.editors.CharacterEditorState.addGhostUI","states/editors/CharacterEditorState.hx",287,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_357_addGhostUI,"states.editors.CharacterEditorState","addGhostUI",0xe99ea741,"states.editors.CharacterEditorState.addGhostUI","states/editors/CharacterEditorState.hx",357,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_373_addGhostUI,"states.editors.CharacterEditorState","addGhostUI",0xe99ea741,"states.editors.CharacterEditorState.addGhostUI","states/editors/CharacterEditorState.hx",373,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_282_addGhostUI,"states.editors.CharacterEditorState","addGhostUI",0xe99ea741,"states.editors.CharacterEditorState.addGhostUI","states/editors/CharacterEditorState.hx",282,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_396_addSettingsUI,"states.editors.CharacterEditorState","addSettingsUI",0xe03928d9,"states.editors.CharacterEditorState.addSettingsUI","states/editors/CharacterEditorState.hx",396,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_404_addSettingsUI,"states.editors.CharacterEditorState","addSettingsUI",0xe03928d9,"states.editors.CharacterEditorState.addSettingsUI","states/editors/CharacterEditorState.hx",404,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_412_addSettingsUI,"states.editors.CharacterEditorState","addSettingsUI",0xe03928d9,"states.editors.CharacterEditorState.addSettingsUI","states/editors/CharacterEditorState.hx",412,0x7f042b4d)
static const int _hx_array_data_788c020f_20[] = {
	(int)0,(int)0,
};
static const int _hx_array_data_788c020f_21[] = {
	(int)0,(int)0,
};
static const int _hx_array_data_788c020f_22[] = {
	(int)0,(int)0,
};
static const int _hx_array_data_788c020f_23[] = {
	(int)0,(int)0,
};
static const int _hx_array_data_788c020f_24[] = {
	(int)0,(int)0,
};
static const Float _hx_array_data_788c020f_25[] = {
	(Float)0,(Float)0,
};
static const int _hx_array_data_788c020f_26[] = {
	(int)161,(int)161,(int)161,
};
static const Float _hx_array_data_788c020f_27[] = {
	(Float)0,(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_449_addSettingsUI,"states.editors.CharacterEditorState","addSettingsUI",0xe03928d9,"states.editors.CharacterEditorState.addSettingsUI","states/editors/CharacterEditorState.hx",449,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_389_addSettingsUI,"states.editors.CharacterEditorState","addSettingsUI",0xe03928d9,"states.editors.CharacterEditorState.addSettingsUI","states/editors/CharacterEditorState.hx",389,0x7f042b4d)
static const ::String _hx_array_data_788c020f_30[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_503_addAnimationsUI,"states.editors.CharacterEditorState","addAnimationsUI",0xdfb6f865,"states.editors.CharacterEditorState.addAnimationsUI","states/editors/CharacterEditorState.hx",503,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_515_addAnimationsUI,"states.editors.CharacterEditorState","addAnimationsUI",0xdfb6f865,"states.editors.CharacterEditorState.addAnimationsUI","states/editors/CharacterEditorState.hx",515,0x7f042b4d)
static const int _hx_array_data_788c020f_46[] = {
	(int)0,(int)0,
};
static const int _hx_array_data_788c020f_47[] = {
	(int)0,(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_555_addAnimationsUI,"states.editors.CharacterEditorState","addAnimationsUI",0xdfb6f865,"states.editors.CharacterEditorState.addAnimationsUI","states/editors/CharacterEditorState.hx",555,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_492_addAnimationsUI,"states.editors.CharacterEditorState","addAnimationsUI",0xdfb6f865,"states.editors.CharacterEditorState.addAnimationsUI","states/editors/CharacterEditorState.hx",492,0x7f042b4d)
static const ::String _hx_array_data_788c020f_50[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_622_addCharacterUI,"states.editors.CharacterEditorState","addCharacterUI",0x2ae5851b,"states.editors.CharacterEditorState.addCharacterUI","states/editors/CharacterEditorState.hx",622,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_632_addCharacterUI,"states.editors.CharacterEditorState","addCharacterUI",0x2ae5851b,"states.editors.CharacterEditorState.addCharacterUI","states/editors/CharacterEditorState.hx",632,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_651_addCharacterUI,"states.editors.CharacterEditorState","addCharacterUI",0x2ae5851b,"states.editors.CharacterEditorState.addCharacterUI","states/editors/CharacterEditorState.hx",651,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_658_addCharacterUI,"states.editors.CharacterEditorState","addCharacterUI",0x2ae5851b,"states.editors.CharacterEditorState.addCharacterUI","states/editors/CharacterEditorState.hx",658,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_673_addCharacterUI,"states.editors.CharacterEditorState","addCharacterUI",0x2ae5851b,"states.editors.CharacterEditorState.addCharacterUI","states/editors/CharacterEditorState.hx",673,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_616_addCharacterUI,"states.editors.CharacterEditorState","addCharacterUI",0x2ae5851b,"states.editors.CharacterEditorState.addCharacterUI","states/editors/CharacterEditorState.hx",616,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_708_getEvent,"states.editors.CharacterEditorState","getEvent",0xac3d79e3,"states.editors.CharacterEditorState.getEvent","states/editors/CharacterEditorState.hx",708,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_777_reloadCharacterImage,"states.editors.CharacterEditorState","reloadCharacterImage",0xc82104ea,"states.editors.CharacterEditorState.reloadCharacterImage","states/editors/CharacterEditorState.hx",777,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_820_reloadCharacterOptions,"states.editors.CharacterEditorState","reloadCharacterOptions",0xf4a5daad,"states.editors.CharacterEditorState.reloadCharacterOptions","states/editors/CharacterEditorState.hx",820,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_845_update,"states.editors.CharacterEditorState","update",0xafadca88,"states.editors.CharacterEditorState.update","states/editors/CharacterEditorState.hx",845,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_1047_loadBG,"states.editors.CharacterEditorState","loadBG",0x81176dea,"states.editors.CharacterEditorState.loadBG","states/editors/CharacterEditorState.hx",1047,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_1071_updatePointerPos,"states.editors.CharacterEditorState","updatePointerPos",0x9708f17f,"states.editors.CharacterEditorState.updatePointerPos","states/editors/CharacterEditorState.hx",1071,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_1094_updateHealthBar,"states.editors.CharacterEditorState","updateHealthBar",0x413e0eef,"states.editors.CharacterEditorState.updateHealthBar","states/editors/CharacterEditorState.hx",1094,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_1106_updatePresence,"states.editors.CharacterEditorState","updatePresence",0x7250a0e3,"states.editors.CharacterEditorState.updatePresence","states/editors/CharacterEditorState.hx",1106,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_1111_reloadAnimList,"states.editors.CharacterEditorState","reloadAnimList",0x40e19707,"states.editors.CharacterEditorState.reloadAnimList","states/editors/CharacterEditorState.hx",1111,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_1140_updateTextColors,"states.editors.CharacterEditorState","updateTextColors",0xd4df8ee5,"states.editors.CharacterEditorState.updateTextColors","states/editors/CharacterEditorState.hx",1140,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_1151_updateCharacterPositions,"states.editors.CharacterEditorState","updateCharacterPositions",0x6745eb69,"states.editors.CharacterEditorState.updateCharacterPositions","states/editors/CharacterEditorState.hx",1151,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_1161_predictCharacterIsNotPlayer,"states.editors.CharacterEditorState","predictCharacterIsNotPlayer",0x59a5913b,"states.editors.CharacterEditorState.predictCharacterIsNotPlayer","states/editors/CharacterEditorState.hx",1161,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_1166_addAnimation,"states.editors.CharacterEditorState","addAnimation",0xb5e23e62,"states.editors.CharacterEditorState.addAnimation","states/editors/CharacterEditorState.hx",1166,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_1188_newAnim,"states.editors.CharacterEditorState","newAnim",0x5ad1dd32,"states.editors.CharacterEditorState.newAnim","states/editors/CharacterEditorState.hx",1188,0x7f042b4d)
static const int _hx_array_data_788c020f_81[] = {
	(int)0,(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_1199_reloadCharacterDropDown,"states.editors.CharacterEditorState","reloadCharacterDropDown",0xe6135e02,"states.editors.CharacterEditorState.reloadCharacterDropDown","states/editors/CharacterEditorState.hx",1199,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_1216_reloadAnimationDropDown,"states.editors.CharacterEditorState","reloadAnimationDropDown",0x7111c45d,"states.editors.CharacterEditorState.reloadAnimationDropDown","states/editors/CharacterEditorState.hx",1216,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_1227_onSaveComplete,"states.editors.CharacterEditorState","onSaveComplete",0x928f0854,"states.editors.CharacterEditorState.onSaveComplete","states/editors/CharacterEditorState.hx",1227,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_1240_onSaveCancel,"states.editors.CharacterEditorState","onSaveCancel",0x448a4855,"states.editors.CharacterEditorState.onSaveCancel","states/editors/CharacterEditorState.hx",1240,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_1252_onSaveError,"states.editors.CharacterEditorState","onSaveError",0xa64dc54d,"states.editors.CharacterEditorState.onSaveError","states/editors/CharacterEditorState.hx",1252,0x7f042b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_8fcf73527616c70a_1261_saveCharacter,"states.editors.CharacterEditorState","saveCharacter",0xe93b3a0d,"states.editors.CharacterEditorState.saveCharacter","states/editors/CharacterEditorState.hx",1261,0x7f042b4d)
namespace states{
namespace editors{

void CharacterEditorState_obj::__construct(::String _hx_char,::hx::Null< bool >  __o_goToPlayState){
            		bool goToPlayState = __o_goToPlayState.Default(true);
            	HX_STACKFRAME(&_hx_pos_8fcf73527616c70a_23_new)
HXLINE(1198)		this->characterList = ::Array_obj< ::String >::__new(0);
HXLINE(1045)		this->assetFolder = HX_("week1",bd,95,be,c7);
HXLINE( 843)		this->undoOffsets = null();
HXLINE( 842)		this->holdingFrameElapsed = ((Float)0);
HXLINE( 841)		this->holdingFrameTime = ((Float)0);
HXLINE( 840)		this->holdingArrowsElapsed = ((Float)0);
HXLINE( 839)		this->holdingArrowsTime = ((Float)0);
HXLINE( 280)		this->ghostAlpha = ((Float)0.6);
HXLINE(  50)		this->curAnim = 0;
HXLINE(  48)		this->anims = null();
HXLINE(  46)		this->_goToPlayState = true;
HXLINE(  45)		this->_char = null();
HXLINE(  44)		this->copiedOffset = ::Array_obj< Float >::fromData( _hx_array_data_788c020f_1,2);
HXLINE(  34)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  34)		point->_inPool = false;
HXDLIN(  34)		 ::flixel::math::FlxBasePoint point1 = point;
HXDLIN(  34)		point1->_weak = true;
HXDLIN(  34)		this->bfPosition = point1;
HXLINE(  33)		 ::flixel::math::FlxBasePoint point2 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  33)		point2->_inPool = false;
HXDLIN(  33)		 ::flixel::math::FlxBasePoint point11 = point2;
HXDLIN(  33)		point11->_weak = true;
HXDLIN(  33)		this->dadPosition = point11;
HXLINE(  30)		this->isAnimateSprite = false;
HXLINE(  60)		this->_char = _hx_char;
HXLINE(  61)		this->_goToPlayState = goToPlayState;
HXLINE(  62)		if (::hx::IsNull( this->_char )) {
HXLINE(  62)			this->_char = ::objects::Character_obj::DEFAULT_CHARACTER;
            		}
HXLINE(  64)		super::__construct(null(),null());
            	}

Dynamic CharacterEditorState_obj::__CreateEmpty() { return new CharacterEditorState_obj; }

void *CharacterEditorState_obj::_hx_vtable = 0;

Dynamic CharacterEditorState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CharacterEditorState_obj > _hx_result = new CharacterEditorState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CharacterEditorState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x53aaab8a) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x1f7e1d37) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x1f7e1d37;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x53aaab8a;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			if (inClassId<=(int)0x62817b24) {
				return inClassId==(int)0x563293a6 || inClassId==(int)0x62817b24;
			} else {
				return inClassId==(int)0x7c795c9f;
			}
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void CharacterEditorState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_68_create)
HXLINE(  69)		if (::backend::ClientPrefs_obj::data->cacheOnGPU) {
HXLINE(  69)			::backend::Paths_obj::clearStoredMemory();
            		}
HXLINE(  71)		{
HXLINE(  71)			 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(  71)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(  72)		this->camEditor = this->initPsychCamera();
HXLINE(  74)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  75)		{
HXLINE(  75)			 ::flixel::FlxCamera _hx_tmp = this->camHUD;
HXDLIN(  75)			_hx_tmp->bgColor = (_hx_tmp->bgColor & 16777215);
HXDLIN(  75)			 ::flixel::FlxCamera _hx_tmp1 = this->camHUD;
HXDLIN(  75)			_hx_tmp1->bgColor = (_hx_tmp1->bgColor | 0);
            		}
HXLINE(  76)		::flixel::FlxG_obj::cameras->add(this->camHUD,false).StaticCast<  ::flixel::FlxCamera >();
HXLINE(  78)		{
HXLINE(  78)			::String lastLoaded = ::backend::Paths_obj::currentLevel;
HXDLIN(  78)			::backend::Paths_obj::currentLevel = this->assetFolder;
HXDLIN(  78)			 ::objects::BGSprite bg =  ::objects::BGSprite_obj::__alloc( HX_CTX ,HX_("stageback",e5,7b,3b,06),-600,-200,((Float)0.9),((Float)0.9),null(),null());
HXDLIN(  78)			this->add(bg);
HXDLIN(  78)			 ::objects::BGSprite stageFront =  ::objects::BGSprite_obj::__alloc( HX_CTX ,HX_("stagefront",2b,fd,b0,c6),-650,600,((Float)0.9),((Float)0.9),null(),null());
HXDLIN(  78)			stageFront->setGraphicSize(::Std_obj::_hx_int((stageFront->get_width() * ((Float)1.1))),null());
HXDLIN(  78)			stageFront->updateHitbox();
HXDLIN(  78)			this->add(stageFront);
HXDLIN(  78)			{
HXLINE(  78)				 ::flixel::math::FlxBasePoint this1 = this->dadPosition;
HXDLIN(  78)				this1->set_x(( (Float)(100) ));
HXDLIN(  78)				this1->set_y(( (Float)(100) ));
            			}
HXDLIN(  78)			{
HXLINE(  78)				 ::flixel::math::FlxBasePoint this2 = this->bfPosition;
HXDLIN(  78)				this2->set_x(( (Float)(770) ));
HXDLIN(  78)				this2->set_y(( (Float)(100) ));
            			}
HXDLIN(  78)			::backend::Paths_obj::currentLevel = lastLoaded;
            		}
HXLINE(  80)		this->animsTxtGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  81)		this->silhouettes =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  82)		this->add(this->silhouettes);
HXLINE(  84)		 ::flixel::FlxSprite dad =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,this->dadPosition->x,this->dadPosition->y,null());
HXDLIN(  84)		 ::flixel::FlxSprite dad1 = dad->loadGraphic(::backend::Paths_obj::image(HX_("editors/silhouetteDad",66,2e,37,60),null(),null()),null(),null(),null(),null(),null());
HXLINE(  85)		dad1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  86)		dad1->set_active(false);
HXLINE(  87)		{
HXLINE(  87)			 ::flixel::math::FlxBasePoint this3 = dad1->offset;
HXDLIN(  87)			this3->set_x(( (Float)(-4) ));
HXDLIN(  87)			this3->set_y(( (Float)(1) ));
            		}
HXLINE(  88)		this->silhouettes->add(dad1).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  90)		 ::flixel::FlxSprite boyfriend =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,this->bfPosition->x,(this->bfPosition->y + 350),null());
HXDLIN(  90)		 ::flixel::FlxSprite boyfriend1 = boyfriend->loadGraphic(::backend::Paths_obj::image(HX_("editors/silhouetteBF",65,06,d0,b5),null(),null()),null(),null(),null(),null(),null());
HXLINE(  91)		boyfriend1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  92)		boyfriend1->set_active(false);
HXLINE(  93)		{
HXLINE(  93)			 ::flixel::math::FlxBasePoint this4 = boyfriend1->offset;
HXDLIN(  93)			this4->set_x(( (Float)(-6) ));
HXDLIN(  93)			this4->set_y(( (Float)(2) ));
            		}
HXLINE(  94)		this->silhouettes->add(boyfriend1).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  96)		this->silhouettes->set_alpha(((Float)0.25));
HXLINE(  98)		this->ghost =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  99)		this->ghost->set_visible(false);
HXLINE( 100)		this->ghost->set_alpha(this->ghostAlpha);
HXLINE( 101)		this->add(this->ghost);
HXLINE( 103)		this->addCharacter(null());
HXLINE( 105)		 ::flixel::FlxSprite _hx_tmp2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 105)		this->cameraFollowPointer = _hx_tmp2->loadGraphic(::flixel::graphics::FlxGraphic_obj::fromClass(::hx::ClassOf< ::flixel::_hx_system::debug::interaction::tools::GraphicCursorCross >(),null(),null(),null()),null(),null(),null(),null(),null());
HXLINE( 106)		this->cameraFollowPointer->setGraphicSize(40,40);
HXLINE( 107)		this->cameraFollowPointer->updateHitbox();
HXLINE( 108)		this->add(this->cameraFollowPointer);
HXLINE( 110)		this->healthBar =  ::objects::Bar_obj::__alloc( HX_CTX ,( (Float)(30) ),( (Float)((::flixel::FlxG_obj::height - 75)) ),null(),null(),null(),null());
HXLINE( 111)		{
HXLINE( 111)			 ::flixel::math::FlxBasePoint this5 = this->healthBar->scrollFactor;
HXDLIN( 111)			this5->set_x(( (Float)(0) ));
HXDLIN( 111)			this5->set_y(( (Float)(0) ));
            		}
HXLINE( 112)		this->add(this->healthBar);
HXLINE( 113)		this->healthBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 115)		this->healthIcon =  ::objects::HealthIcon_obj::__alloc( HX_CTX ,this->character->healthIcon,false,false);
HXLINE( 116)		this->healthIcon->set_y(( (Float)((::flixel::FlxG_obj::height - 150)) ));
HXLINE( 117)		this->add(this->healthIcon);
HXLINE( 118)		this->healthIcon->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 120)		this->animsTxtGroup->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 121)		this->add(this->animsTxtGroup);
HXLINE( 123)		 ::flixel::text::FlxText tipText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 300),(::flixel::FlxG_obj::height - 24),300,HX_("Press F1 for Help",b0,ec,b9,d4),16,null());
HXLINE( 124)		tipText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 125)		tipText->setFormat(null(),16,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_FAST_dyn(),-16777216,null());
HXLINE( 126)		tipText->set_borderColor(-16777216);
HXLINE( 127)		{
HXLINE( 127)			 ::flixel::math::FlxBasePoint this6 = tipText->scrollFactor;
HXDLIN( 127)			this6->set_x(( (Float)(0) ));
HXDLIN( 127)			this6->set_y(( (Float)(0) ));
            		}
HXLINE( 128)		tipText->set_borderSize(( (Float)(1) ));
HXLINE( 129)		tipText->set_active(false);
HXLINE( 130)		this->add(tipText);
HXLINE( 132)		this->cameraZoomText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,50,200,HX_("Zoom: 1x",00,b8,43,6e),null(),null());
HXLINE( 133)		this->cameraZoomText->setFormat(null(),16,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_FAST_dyn(),-16777216,null());
HXLINE( 134)		{
HXLINE( 134)			 ::flixel::math::FlxBasePoint this7 = this->cameraZoomText->scrollFactor;
HXDLIN( 134)			this7->set_x(( (Float)(0) ));
HXDLIN( 134)			this7->set_y(( (Float)(0) ));
            		}
HXLINE( 135)		this->cameraZoomText->set_borderSize(( (Float)(1) ));
HXLINE( 136)		{
HXLINE( 136)			 ::flixel::text::FlxText _this1 = this->cameraZoomText;
HXDLIN( 136)			int axes = 1;
HXDLIN( 136)			bool _hx_tmp3;
HXDLIN( 136)			if ((axes != 1)) {
HXLINE( 136)				_hx_tmp3 = (axes == 17);
            			}
            			else {
HXLINE( 136)				_hx_tmp3 = true;
            			}
HXDLIN( 136)			if (_hx_tmp3) {
HXLINE( 136)				int _hx_tmp4 = ::flixel::FlxG_obj::width;
HXDLIN( 136)				_this1->set_x(((( (Float)(_hx_tmp4) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 136)			bool _hx_tmp5;
HXDLIN( 136)			if ((axes != 16)) {
HXLINE( 136)				_hx_tmp5 = (axes == 17);
            			}
            			else {
HXLINE( 136)				_hx_tmp5 = true;
            			}
HXDLIN( 136)			if (_hx_tmp5) {
HXLINE( 136)				int _hx_tmp6 = ::flixel::FlxG_obj::height;
HXDLIN( 136)				_this1->set_y(((( (Float)(_hx_tmp6) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 137)		this->cameraZoomText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 138)		this->add(this->cameraZoomText);
HXLINE( 140)		this->frameAdvanceText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,75,350,HX_("",00,00,00,00),null(),null());
HXLINE( 141)		this->frameAdvanceText->setFormat(null(),16,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_FAST_dyn(),-16777216,null());
HXLINE( 142)		{
HXLINE( 142)			 ::flixel::math::FlxBasePoint this8 = this->frameAdvanceText->scrollFactor;
HXDLIN( 142)			this8->set_x(( (Float)(0) ));
HXDLIN( 142)			this8->set_y(( (Float)(0) ));
            		}
HXLINE( 143)		this->frameAdvanceText->set_borderSize(( (Float)(1) ));
HXLINE( 144)		{
HXLINE( 144)			 ::flixel::text::FlxText _this2 = this->frameAdvanceText;
HXDLIN( 144)			int axes1 = 1;
HXDLIN( 144)			bool _hx_tmp7;
HXDLIN( 144)			if ((axes1 != 1)) {
HXLINE( 144)				_hx_tmp7 = (axes1 == 17);
            			}
            			else {
HXLINE( 144)				_hx_tmp7 = true;
            			}
HXDLIN( 144)			if (_hx_tmp7) {
HXLINE( 144)				int _hx_tmp8 = ::flixel::FlxG_obj::width;
HXDLIN( 144)				_this2->set_x(((( (Float)(_hx_tmp8) ) - _this2->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 144)			bool _hx_tmp9;
HXDLIN( 144)			if ((axes1 != 16)) {
HXLINE( 144)				_hx_tmp9 = (axes1 == 17);
            			}
            			else {
HXLINE( 144)				_hx_tmp9 = true;
            			}
HXDLIN( 144)			if (_hx_tmp9) {
HXLINE( 144)				int _hx_tmp10 = ::flixel::FlxG_obj::height;
HXDLIN( 144)				_this2->set_y(((( (Float)(_hx_tmp10) ) - _this2->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 145)		this->frameAdvanceText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 146)		this->add(this->frameAdvanceText);
HXLINE( 148)		this->addHelpScreen();
HXLINE( 149)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 150)		::flixel::FlxG_obj::camera->set_zoom(( (Float)(1) ));
HXLINE( 152)		this->makeUIMenu();
HXLINE( 154)		{
HXLINE( 154)			Float offX = ( (Float)(0) );
HXDLIN( 154)			Float offY = ( (Float)(0) );
HXDLIN( 154)			if (!(this->character->isPlayer)) {
HXLINE( 154)				Float offX1 = (this->character->getMidpoint(null())->x + 150);
HXDLIN( 154)				offX = (offX1 + this->character->cameraPosition->__get(0));
HXDLIN( 154)				Float offY1 = (this->character->getMidpoint(null())->y - ( (Float)(100) ));
HXDLIN( 154)				offY = (offY1 + this->character->cameraPosition->__get(1));
            			}
            			else {
HXLINE( 154)				Float offX2 = (this->character->getMidpoint(null())->x - ( (Float)(100) ));
HXDLIN( 154)				offX = (offX2 - this->character->cameraPosition->__get(0));
HXDLIN( 154)				Float offY2 = (this->character->getMidpoint(null())->y - ( (Float)(100) ));
HXDLIN( 154)				offY = (offY2 + this->character->cameraPosition->__get(1));
            			}
HXDLIN( 154)			this->cameraFollowPointer->setPosition(offX,offY);
HXDLIN( 154)			{
HXLINE( 154)				{
HXLINE( 154)					 ::flixel::math::FlxBasePoint this9 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN( 154)					Float x = this->cameraFollowPointer->getMidpoint(null())->x;
HXDLIN( 154)					this9->set_x((x - (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            				}
HXDLIN( 154)				{
HXLINE( 154)					 ::flixel::math::FlxBasePoint this10 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN( 154)					Float y = this->cameraFollowPointer->getMidpoint(null())->y;
HXDLIN( 154)					this10->set_y((y - (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) ))));
            				}
            			}
            		}
HXLINE( 155)		{
HXLINE( 155)			this->healthColorStepperR->set_value(( (Float)(this->character->healthColorArray->__get(0)) ));
HXDLIN( 155)			this->healthColorStepperG->set_value(( (Float)(this->character->healthColorArray->__get(1)) ));
HXDLIN( 155)			this->healthColorStepperB->set_value(( (Float)(this->character->healthColorArray->__get(2)) ));
HXDLIN( 155)			 ::flixel::FlxSprite _hx_tmp11 = this->healthBar->leftBar;
HXDLIN( 155)			 ::flixel::FlxSprite _hx_tmp12 = this->healthBar->rightBar;
HXDLIN( 155)			int Red = this->character->healthColorArray->__get(0);
HXDLIN( 155)			int Green = this->character->healthColorArray->__get(1);
HXDLIN( 155)			int Blue = this->character->healthColorArray->__get(2);
HXDLIN( 155)			int Alpha = 255;
HXDLIN( 155)			int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 155)			{
HXLINE( 155)				color = (color & -16711681);
HXDLIN( 155)				int color1;
HXDLIN( 155)				if ((Red > 255)) {
HXLINE( 155)					color1 = 255;
            				}
            				else {
HXLINE( 155)					if ((Red < 0)) {
HXLINE( 155)						color1 = 0;
            					}
            					else {
HXLINE( 155)						color1 = Red;
            					}
            				}
HXDLIN( 155)				color = (color | (color1 << 16));
            			}
HXDLIN( 155)			{
HXLINE( 155)				color = (color & -65281);
HXDLIN( 155)				int color2;
HXDLIN( 155)				if ((Green > 255)) {
HXLINE( 155)					color2 = 255;
            				}
            				else {
HXLINE( 155)					if ((Green < 0)) {
HXLINE( 155)						color2 = 0;
            					}
            					else {
HXLINE( 155)						color2 = Green;
            					}
            				}
HXDLIN( 155)				color = (color | (color2 << 8));
            			}
HXDLIN( 155)			{
HXLINE( 155)				color = (color & -256);
HXDLIN( 155)				int color3;
HXDLIN( 155)				if ((Blue > 255)) {
HXLINE( 155)					color3 = 255;
            				}
            				else {
HXLINE( 155)					if ((Blue < 0)) {
HXLINE( 155)						color3 = 0;
            					}
            					else {
HXLINE( 155)						color3 = Blue;
            					}
            				}
HXDLIN( 155)				color = (color | color3);
            			}
HXDLIN( 155)			{
HXLINE( 155)				color = (color & 16777215);
HXDLIN( 155)				int color4;
HXDLIN( 155)				if ((Alpha > 255)) {
HXLINE( 155)					color4 = 255;
            				}
            				else {
HXLINE( 155)					if ((Alpha < 0)) {
HXLINE( 155)						color4 = 0;
            					}
            					else {
HXLINE( 155)						color4 = Alpha;
            					}
            				}
HXDLIN( 155)				color = (color | (color4 << 24));
            			}
HXDLIN( 155)			_hx_tmp11->set_color(_hx_tmp12->set_color(color));
HXDLIN( 155)			this->healthIcon->changeIcon(this->character->healthIcon,false);
HXDLIN( 155)			::String _hx_tmp13 = (HX_("Character: ",6f,a2,f1,a2) + this->_char);
HXDLIN( 155)			::backend::DiscordClient_obj::changePresence(HX_("Character Editor",84,45,58,b1),_hx_tmp13,this->healthIcon->getCharacter(),null(),null());
            		}
HXLINE( 156)		this->character->finishAnimation();
HXLINE( 158)		if (::backend::ClientPrefs_obj::data->cacheOnGPU) {
HXLINE( 158)			::backend::Paths_obj::clearUnusedMemory();
            		}
HXLINE( 160)		this->super::create();
            	}


void CharacterEditorState_obj::addHelpScreen(){
            	HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_164_addHelpScreen)
HXLINE( 165)		::String str = HX_("CAMERA\n\t\t\nE/Q - Camera Zoom In/Out\n\t\t\nJ/K/L/I - Move Camera\n\t\t\nR - Reset Camera Zoom\n\t\t\n\n\t\t\nCHARACTER\n\t\t\nCtrl + R - Reset Current Offset\n\t\t\nCtrl + C - Copy Current Offset\n\t\t\nCtrl + V - Paste Copied Offset on Current Animation\n\t\t\nCtrl + Z - Undo Last Paste or Reset\n\t\t\nW/S - Previous/Next Animation\n\t\t\nSpace - Replay Animation\n\t\t\nArrow Keys/Mouse & Right Click - Move Offset\n\t\t\nA/D - Frame Advance (Back/Forward)\n\t\t\n\n\t\t\nOTHER\n\t\t\nF12 - Toggle Silhouettes\n\t\t\nHold Shift - Move Offsets 10x faster and Camera 4x faster\n\t\t\nHold Control - Move camera 4x slower",91,e4,07,ca);
HXLINE( 185)		this->helpBg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-16777216,null(),null());
HXLINE( 186)		{
HXLINE( 186)			 ::flixel::math::FlxBasePoint this1 = this->helpBg->scale;
HXDLIN( 186)			Float y = ( (Float)(::flixel::FlxG_obj::height) );
HXDLIN( 186)			this1->set_x(( (Float)(::flixel::FlxG_obj::width) ));
HXDLIN( 186)			this1->set_y(y);
            		}
HXLINE( 187)		this->helpBg->updateHitbox();
HXLINE( 188)		this->helpBg->set_alpha(((Float)0.6));
HXLINE( 189)		this->helpBg->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 190)		 ::flixel::FlxSprite _hx_tmp = this->helpBg;
HXDLIN( 190)		_hx_tmp->set_active(this->helpBg->set_visible(false));
HXLINE( 191)		this->add(this->helpBg);
HXLINE( 193)		::Array< ::String > arr = str.split(HX_("\n",0a,00,00,00));
HXLINE( 194)		this->helpTexts =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 195)		this->helpTexts->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 196)		{
HXLINE( 196)			int _g = 0;
HXDLIN( 196)			int _g1 = arr->length;
HXDLIN( 196)			while((_g < _g1)){
HXLINE( 196)				_g = (_g + 1);
HXDLIN( 196)				int i = (_g - 1);
HXLINE( 198)				if ((arr->__get(i).length < 2)) {
HXLINE( 198)					continue;
            				}
HXLINE( 200)				 ::flixel::text::FlxText helpText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,600,arr->__get(i),16,null());
HXLINE( 201)				helpText->setFormat(null(),16,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_FAST_dyn(),-16777216,null());
HXLINE( 202)				helpText->set_borderColor(-16777216);
HXLINE( 203)				{
HXLINE( 203)					 ::flixel::math::FlxBasePoint this2 = helpText->scrollFactor;
HXDLIN( 203)					this2->set_x(( (Float)(0) ));
HXDLIN( 203)					this2->set_y(( (Float)(0) ));
            				}
HXLINE( 204)				helpText->set_borderSize(( (Float)(1) ));
HXLINE( 205)				{
HXLINE( 205)					int axes = 17;
HXDLIN( 205)					bool _hx_tmp1;
HXDLIN( 205)					if ((axes != 1)) {
HXLINE( 205)						_hx_tmp1 = (axes == 17);
            					}
            					else {
HXLINE( 205)						_hx_tmp1 = true;
            					}
HXDLIN( 205)					if (_hx_tmp1) {
HXLINE( 205)						int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN( 205)						helpText->set_x(((( (Float)(_hx_tmp2) ) - helpText->get_width()) / ( (Float)(2) )));
            					}
HXDLIN( 205)					bool _hx_tmp3;
HXDLIN( 205)					if ((axes != 16)) {
HXLINE( 205)						_hx_tmp3 = (axes == 17);
            					}
            					else {
HXLINE( 205)						_hx_tmp3 = true;
            					}
HXDLIN( 205)					if (_hx_tmp3) {
HXLINE( 205)						int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN( 205)						helpText->set_y(((( (Float)(_hx_tmp4) ) - helpText->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE( 206)				this->add(helpText);
HXLINE( 207)				helpText->set_y((helpText->y + ((( (Float)(i) ) - (( (Float)(arr->length) ) / ( (Float)(2) ))) * ( (Float)(16) ))));
HXLINE( 208)				helpText->set_active(false);
HXLINE( 209)				this->helpTexts->add(helpText).StaticCast<  ::flixel::FlxSprite >();
            			}
            		}
HXLINE( 211)		 ::flixel::group::FlxTypedSpriteGroup _hx_tmp5 = this->helpTexts;
HXDLIN( 211)		_hx_tmp5->set_active(this->helpTexts->set_visible(false));
HXLINE( 212)		this->add(this->helpTexts);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,addHelpScreen,(void))

void CharacterEditorState_obj::addCharacter(::hx::Null< bool >  __o_reload){
            		bool reload = __o_reload.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_216_addCharacter)
HXLINE( 217)		int pos = -1;
HXLINE( 218)		if (::hx::IsNotNull( this->character )) {
HXLINE( 220)			pos = this->members->indexOf(this->character,null());
HXLINE( 221)			this->remove(this->character,null());
HXLINE( 222)			this->character->destroy();
            		}
HXLINE( 225)		bool isPlayer;
HXDLIN( 225)		if (reload) {
HXLINE( 225)			isPlayer = this->character->isPlayer;
            		}
            		else {
HXLINE( 225)			::String name = this->_char;
HXDLIN( 225)			bool isPlayer1;
HXDLIN( 225)			bool isPlayer2;
HXDLIN( 225)			bool isPlayer3;
HXDLIN( 225)			bool isPlayer4;
HXDLIN( 225)			bool isPlayer5;
HXDLIN( 225)			bool isPlayer6;
HXDLIN( 225)			bool isPlayer7;
HXDLIN( 225)			if ((name != HX_("bf",c4,55,00,00))) {
HXLINE( 225)				isPlayer7 = !(::StringTools_obj::startsWith(name,HX_("bf-",e9,b5,4a,00)));
            			}
            			else {
HXLINE( 225)				isPlayer7 = false;
            			}
HXDLIN( 225)			if (isPlayer7) {
HXLINE( 225)				isPlayer6 = !(::StringTools_obj::endsWith(name,HX_("-player",4e,cb,fe,86)));
            			}
            			else {
HXLINE( 225)				isPlayer6 = false;
            			}
HXDLIN( 225)			if (isPlayer6) {
HXLINE( 225)				isPlayer5 = !(::StringTools_obj::endsWith(name,HX_("-dead",51,69,6e,2b)));
            			}
            			else {
HXLINE( 225)				isPlayer5 = false;
            			}
HXDLIN( 225)			if (!(isPlayer5)) {
HXLINE( 225)				isPlayer4 = ::StringTools_obj::endsWith(name,HX_("-opponent",ca,2e,28,0d));
            			}
            			else {
HXLINE( 225)				isPlayer4 = true;
            			}
HXDLIN( 225)			if (!(isPlayer4)) {
HXLINE( 225)				isPlayer3 = ::StringTools_obj::startsWith(name,HX_("gf-",2e,81,4e,00));
            			}
            			else {
HXLINE( 225)				isPlayer3 = true;
            			}
HXDLIN( 225)			if (!(isPlayer3)) {
HXLINE( 225)				isPlayer2 = ::StringTools_obj::endsWith(name,HX_("-gf",8c,7f,22,00));
            			}
            			else {
HXLINE( 225)				isPlayer2 = true;
            			}
HXDLIN( 225)			if (!(isPlayer2)) {
HXLINE( 225)				isPlayer1 = (name == HX_("gf",1f,5a,00,00));
            			}
            			else {
HXLINE( 225)				isPlayer1 = true;
            			}
HXDLIN( 225)			isPlayer = !(isPlayer1);
            		}
HXLINE( 226)		this->character =  ::objects::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),this->_char,isPlayer);
HXLINE( 227)		bool _hx_tmp;
HXDLIN( 227)		bool _hx_tmp1;
HXDLIN( 227)		if (!(reload)) {
HXLINE( 227)			_hx_tmp1 = ::hx::IsNotNull( this->character->editorIsPlayer );
            		}
            		else {
HXLINE( 227)			_hx_tmp1 = false;
            		}
HXDLIN( 227)		if (_hx_tmp1) {
HXLINE( 227)			_hx_tmp = ::hx::IsNotEq( isPlayer,this->character->editorIsPlayer );
            		}
            		else {
HXLINE( 227)			_hx_tmp = false;
            		}
HXDLIN( 227)		if (_hx_tmp) {
HXLINE( 229)			this->character->isPlayer = !(this->character->isPlayer);
HXLINE( 230)			this->character->set_flipX((this->character->originalFlipX != this->character->isPlayer));
HXLINE( 231)			if (::hx::IsNotNull( this->check_player )) {
HXLINE( 231)				this->check_player->set_checked(this->character->isPlayer);
            			}
            		}
HXLINE( 233)		this->character->debugMode = true;
HXLINE( 235)		if ((pos > -1)) {
HXLINE( 235)			this->insert(pos,this->character);
            		}
            		else {
HXLINE( 236)			this->add(this->character);
            		}
HXLINE( 237)		{
HXLINE( 237)			bool _hx_tmp2;
HXDLIN( 237)			bool _hx_tmp3;
HXDLIN( 237)			if (::hx::IsNotNull( this->character )) {
HXLINE( 237)				_hx_tmp3 = !(this->character->isPlayer);
            			}
            			else {
HXLINE( 237)				_hx_tmp3 = false;
            			}
HXDLIN( 237)			if (!(_hx_tmp3)) {
HXLINE( 237)				if (::hx::IsNull( this->character )) {
HXLINE( 237)					::String name1 = this->_char;
HXDLIN( 237)					bool _hx_tmp4;
HXDLIN( 237)					bool _hx_tmp5;
HXDLIN( 237)					bool _hx_tmp6;
HXDLIN( 237)					bool _hx_tmp7;
HXDLIN( 237)					bool _hx_tmp8;
HXDLIN( 237)					bool _hx_tmp9;
HXDLIN( 237)					if ((name1 != HX_("bf",c4,55,00,00))) {
HXLINE( 237)						_hx_tmp9 = !(::StringTools_obj::startsWith(name1,HX_("bf-",e9,b5,4a,00)));
            					}
            					else {
HXLINE( 237)						_hx_tmp9 = false;
            					}
HXDLIN( 237)					if (_hx_tmp9) {
HXLINE( 237)						_hx_tmp8 = !(::StringTools_obj::endsWith(name1,HX_("-player",4e,cb,fe,86)));
            					}
            					else {
HXLINE( 237)						_hx_tmp8 = false;
            					}
HXDLIN( 237)					if (_hx_tmp8) {
HXLINE( 237)						_hx_tmp7 = !(::StringTools_obj::endsWith(name1,HX_("-dead",51,69,6e,2b)));
            					}
            					else {
HXLINE( 237)						_hx_tmp7 = false;
            					}
HXDLIN( 237)					if (!(_hx_tmp7)) {
HXLINE( 237)						_hx_tmp6 = ::StringTools_obj::endsWith(name1,HX_("-opponent",ca,2e,28,0d));
            					}
            					else {
HXLINE( 237)						_hx_tmp6 = true;
            					}
HXDLIN( 237)					if (!(_hx_tmp6)) {
HXLINE( 237)						_hx_tmp5 = ::StringTools_obj::startsWith(name1,HX_("gf-",2e,81,4e,00));
            					}
            					else {
HXLINE( 237)						_hx_tmp5 = true;
            					}
HXDLIN( 237)					if (!(_hx_tmp5)) {
HXLINE( 237)						_hx_tmp4 = ::StringTools_obj::endsWith(name1,HX_("-gf",8c,7f,22,00));
            					}
            					else {
HXLINE( 237)						_hx_tmp4 = true;
            					}
HXDLIN( 237)					if (!(_hx_tmp4)) {
HXLINE( 237)						_hx_tmp2 = (name1 == HX_("gf",1f,5a,00,00));
            					}
            					else {
HXLINE( 237)						_hx_tmp2 = true;
            					}
            				}
            				else {
HXLINE( 237)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE( 237)				_hx_tmp2 = true;
            			}
HXDLIN( 237)			if (_hx_tmp2) {
HXLINE( 237)				this->character->setPosition(this->dadPosition->x,this->dadPosition->y);
            			}
            			else {
HXLINE( 237)				this->character->setPosition(this->bfPosition->x,this->bfPosition->y);
            			}
HXDLIN( 237)			 ::objects::Character fh = this->character;
HXDLIN( 237)			fh->set_x((fh->x + this->character->positionArray->__get(0)));
HXDLIN( 237)			 ::objects::Character fh1 = this->character;
HXDLIN( 237)			fh1->set_y((fh1->y + this->character->positionArray->__get(1)));
            		}
HXLINE( 238)		{
HXLINE( 238)			this->anims = this->character->animationsArray;
HXDLIN( 238)			if ((this->anims->length > 0)) {
HXLINE( 238)				this->character->playAnim(( (::String)(this->anims->__get(0)->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),true,null(),null());
            			}
HXDLIN( 238)			this->curAnim = 0;
HXDLIN( 238)			{
HXLINE( 238)				 ::Dynamic filter = null();
HXDLIN( 238)				 ::flixel::group::FlxTypedGroupIterator text =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->animsTxtGroup->members,filter);
HXDLIN( 238)				while(text->hasNext()){
HXLINE( 238)					 ::flixel::text::FlxText text1 = text->next().StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 238)					text1->kill();
            				}
            			}
HXDLIN( 238)			int daLoop = 0;
HXDLIN( 238)			{
HXLINE( 238)				int _g = 0;
HXDLIN( 238)				::Array< ::Dynamic> _g1 = this->anims;
HXDLIN( 238)				while((_g < _g1->length)){
HXLINE( 238)					 ::Dynamic anim = _g1->__get(_g);
HXDLIN( 238)					_g = (_g + 1);
HXDLIN( 238)					 ::flixel::text::FlxText text2 = this->animsTxtGroup->recycle(::hx::ClassOf< ::flixel::text::FlxText >(),null(),null(),null()).StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 238)					text2->set_x(( (Float)(10) ));
HXDLIN( 238)					text2->set_y(( (Float)((32 + (20 * daLoop))) ));
HXDLIN( 238)					text2->set_fieldWidth(( (Float)(400) ));
HXDLIN( 238)					text2->set_fieldHeight(( (Float)(20) ));
HXDLIN( 238)					::String _hx_tmp10 = ( (::String)((anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic) + HX_(": ",a6,32,00,00))) );
HXDLIN( 238)					text2->set_text((_hx_tmp10 + ::Std_obj::string( ::Dynamic(anim->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic)))));
HXDLIN( 238)					text2->setFormat(null(),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_FAST_dyn(),-16777216,null());
HXDLIN( 238)					{
HXLINE( 238)						 ::flixel::math::FlxBasePoint this1 = text2->scrollFactor;
HXDLIN( 238)						this1->set_x(( (Float)(0) ));
HXDLIN( 238)						this1->set_y(( (Float)(0) ));
            					}
HXDLIN( 238)					text2->set_borderSize(( (Float)(1) ));
HXDLIN( 238)					this->animsTxtGroup->add(text2).StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 238)					daLoop = (daLoop + 1);
            				}
            			}
HXDLIN( 238)			{
HXLINE( 238)				int daLoop1 = 0;
HXDLIN( 238)				{
HXLINE( 238)					 ::Dynamic filter1 = null();
HXDLIN( 238)					 ::flixel::group::FlxTypedGroupIterator text3 =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->animsTxtGroup->members,filter1);
HXDLIN( 238)					while(text3->hasNext()){
HXLINE( 238)						 ::flixel::text::FlxText text4 = text3->next().StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 238)						text4->set_color(-1);
HXDLIN( 238)						if ((daLoop1 == this->curAnim)) {
HXLINE( 238)							text4->set_color(-16711936);
            						}
HXDLIN( 238)						daLoop1 = (daLoop1 + 1);
            					}
            				}
            			}
HXDLIN( 238)			if (::hx::IsNotNull( this->animationDropDown )) {
HXLINE( 238)				this->reloadAnimationDropDown();
            			}
            		}
HXLINE( 239)		bool _hx_tmp11;
HXDLIN( 239)		if (::hx::IsNotNull( this->healthBar )) {
HXLINE( 239)			_hx_tmp11 = ::hx::IsNotNull( this->healthIcon );
            		}
            		else {
HXLINE( 239)			_hx_tmp11 = false;
            		}
HXDLIN( 239)		if (_hx_tmp11) {
HXLINE( 239)			this->healthColorStepperR->set_value(( (Float)(this->character->healthColorArray->__get(0)) ));
HXDLIN( 239)			this->healthColorStepperG->set_value(( (Float)(this->character->healthColorArray->__get(1)) ));
HXDLIN( 239)			this->healthColorStepperB->set_value(( (Float)(this->character->healthColorArray->__get(2)) ));
HXDLIN( 239)			 ::flixel::FlxSprite _hx_tmp12 = this->healthBar->leftBar;
HXDLIN( 239)			 ::flixel::FlxSprite _hx_tmp13 = this->healthBar->rightBar;
HXDLIN( 239)			int Red = this->character->healthColorArray->__get(0);
HXDLIN( 239)			int Green = this->character->healthColorArray->__get(1);
HXDLIN( 239)			int Blue = this->character->healthColorArray->__get(2);
HXDLIN( 239)			int Alpha = 255;
HXDLIN( 239)			int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 239)			{
HXLINE( 239)				color = (color & -16711681);
HXDLIN( 239)				int color1;
HXDLIN( 239)				if ((Red > 255)) {
HXLINE( 239)					color1 = 255;
            				}
            				else {
HXLINE( 239)					if ((Red < 0)) {
HXLINE( 239)						color1 = 0;
            					}
            					else {
HXLINE( 239)						color1 = Red;
            					}
            				}
HXDLIN( 239)				color = (color | (color1 << 16));
            			}
HXDLIN( 239)			{
HXLINE( 239)				color = (color & -65281);
HXDLIN( 239)				int color2;
HXDLIN( 239)				if ((Green > 255)) {
HXLINE( 239)					color2 = 255;
            				}
            				else {
HXLINE( 239)					if ((Green < 0)) {
HXLINE( 239)						color2 = 0;
            					}
            					else {
HXLINE( 239)						color2 = Green;
            					}
            				}
HXDLIN( 239)				color = (color | (color2 << 8));
            			}
HXDLIN( 239)			{
HXLINE( 239)				color = (color & -256);
HXDLIN( 239)				int color3;
HXDLIN( 239)				if ((Blue > 255)) {
HXLINE( 239)					color3 = 255;
            				}
            				else {
HXLINE( 239)					if ((Blue < 0)) {
HXLINE( 239)						color3 = 0;
            					}
            					else {
HXLINE( 239)						color3 = Blue;
            					}
            				}
HXDLIN( 239)				color = (color | color3);
            			}
HXDLIN( 239)			{
HXLINE( 239)				color = (color & 16777215);
HXDLIN( 239)				int color4;
HXDLIN( 239)				if ((Alpha > 255)) {
HXLINE( 239)					color4 = 255;
            				}
            				else {
HXLINE( 239)					if ((Alpha < 0)) {
HXLINE( 239)						color4 = 0;
            					}
            					else {
HXLINE( 239)						color4 = Alpha;
            					}
            				}
HXDLIN( 239)				color = (color | (color4 << 24));
            			}
HXDLIN( 239)			_hx_tmp12->set_color(_hx_tmp13->set_color(color));
HXDLIN( 239)			this->healthIcon->changeIcon(this->character->healthIcon,false);
HXDLIN( 239)			::String _hx_tmp14 = (HX_("Character: ",6f,a2,f1,a2) + this->_char);
HXDLIN( 239)			::backend::DiscordClient_obj::changePresence(HX_("Character Editor",84,45,58,b1),_hx_tmp14,this->healthIcon->getCharacter(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CharacterEditorState_obj,addCharacter,(void))

void CharacterEditorState_obj::makeUIMenu(){
            	HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_243_makeUIMenu)
HXLINE( 244)		::Array< ::Dynamic> tabs = ::Array_obj< ::Dynamic>::__new(2)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Ghost",2f,ff,85,26))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Ghost",2f,ff,85,26))))->init(1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Settings",03,39,ef,64))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Settings",03,39,ef,64))));
HXLINE( 249)		this->UI_box =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),tabs,null(),true,null(),null());
HXLINE( 250)		this->UI_box->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 252)		this->UI_box->resize(( (Float)(250) ),( (Float)(120) ));
HXLINE( 253)		this->UI_box->set_x(( (Float)((::flixel::FlxG_obj::width - 275)) ));
HXLINE( 254)		this->UI_box->set_y(( (Float)(25) ));
HXLINE( 255)		{
HXLINE( 255)			 ::flixel::math::FlxBasePoint this1 = this->UI_box->scrollFactor;
HXDLIN( 255)			this1->set_x(( (Float)(0) ));
HXDLIN( 255)			this1->set_y(( (Float)(0) ));
            		}
HXLINE( 257)		::Array< ::Dynamic> tabs1 = ::Array_obj< ::Dynamic>::__new(2)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Character",89,bb,a4,e3))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Character",89,bb,a4,e3))))->init(1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Animations",0f,39,cd,79))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Animations",0f,39,cd,79))));
HXLINE( 261)		this->UI_characterbox =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),tabs1,null(),true,null(),null());
HXLINE( 262)		this->UI_characterbox->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 264)		this->UI_characterbox->resize(( (Float)(350) ),( (Float)(280) ));
HXLINE( 265)		this->UI_characterbox->set_x((this->UI_box->x - ( (Float)(100) )));
HXLINE( 266)		 ::flixel::addons::ui::FlxUITabMenu _hx_tmp = this->UI_characterbox;
HXDLIN( 266)		Float _hx_tmp1 = this->UI_box->y;
HXDLIN( 266)		_hx_tmp->set_y((_hx_tmp1 + this->UI_box->get_height()));
HXLINE( 267)		{
HXLINE( 267)			 ::flixel::math::FlxBasePoint this2 = this->UI_characterbox->scrollFactor;
HXDLIN( 267)			this2->set_x(( (Float)(0) ));
HXDLIN( 267)			this2->set_y(( (Float)(0) ));
            		}
HXLINE( 268)		this->add(this->UI_characterbox);
HXLINE( 269)		this->add(this->UI_box);
HXLINE( 271)		this->addGhostUI();
HXLINE( 272)		this->addSettingsUI();
HXLINE( 273)		this->addAnimationsUI();
HXLINE( 274)		this->addCharacterUI();
HXLINE( 276)		this->UI_box->set_selected_tab_id(HX_("Settings",03,39,ef,64));
HXLINE( 277)		this->UI_characterbox->set_selected_tab_id(HX_("Character",89,bb,a4,e3));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,makeUIMenu,(void))

void CharacterEditorState_obj::addGhostUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::CharacterEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_287_addGhostUI)
HXLINE( 288)			 ::Dynamic anim = _gthis->anims->__get(_gthis->curAnim);
HXLINE( 289)			 ::objects::Character _this = _gthis->character;
HXDLIN( 289)			bool makeGhostButton;
HXDLIN( 289)			if (!(_this->isAnimateAtlas)) {
HXLINE( 289)				makeGhostButton = ::hx::IsNull( _this->animation->_curAnim );
            			}
            			else {
HXLINE( 289)				makeGhostButton = ::hx::IsNull( _this->atlas->anim->get_curSymbol() );
            			}
HXDLIN( 289)			if (!(makeGhostButton)) {
HXLINE( 291)				 ::Dynamic myAnim = _gthis->anims->__get(_gthis->curAnim);
HXLINE( 292)				if (!(_gthis->character->isAnimateAtlas)) {
HXLINE( 294)					_gthis->ghost->loadGraphic(_gthis->character->graphic,null(),null(),null(),null(),null());
HXLINE( 295)					_gthis->ghost->frames->frames = _gthis->character->frames->frames;
HXLINE( 296)					_gthis->ghost->animation->copyFrom(_gthis->character->animation);
HXLINE( 297)					_gthis->ghost->animation->play(_gthis->character->animation->_curAnim->name,true,false,_gthis->character->animation->_curAnim->curFrame);
HXLINE( 298)					{
HXLINE( 298)						 ::flixel::animation::FlxAnimationController _this1 = _gthis->ghost->animation;
HXDLIN( 298)						if (::hx::IsNotNull( _this1->_curAnim )) {
HXLINE( 298)							_this1->_curAnim->pause();
            						}
            					}
            				}
            				else {
HXLINE( 300)					if (::hx::IsNotNull( myAnim )) {
HXLINE( 302)						if (::hx::IsNull( _gthis->animateGhost )) {
HXLINE( 304)							_gthis->animateGhost =  ::flxanimate::FlxAnimate_obj::__alloc( HX_CTX ,_gthis->ghost->x,_gthis->ghost->y,null(),null());
HXLINE( 305)							_gthis->animateGhost->showPivot = false;
HXLINE( 306)							 ::states::editors::CharacterEditorState _gthis1 = _gthis;
HXDLIN( 306)							int makeGhostButton1 = _gthis->members->indexOf(_gthis->ghost,null());
HXDLIN( 306)							_gthis1->insert(makeGhostButton1,_gthis->animateGhost).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 307)							_gthis->animateGhost->set_active(false);
            						}
HXLINE( 310)						bool makeGhostButton2;
HXDLIN( 310)						if (::hx::IsNotNull( _gthis->animateGhost )) {
HXLINE( 310)							makeGhostButton2 = (_gthis->animateGhostImage != _gthis->character->imageFile);
            						}
            						else {
HXLINE( 310)							makeGhostButton2 = true;
            						}
HXDLIN( 310)						if (makeGhostButton2) {
HXLINE( 311)							::backend::Paths_obj::loadAnimateAtlas(_gthis->animateGhost,_gthis->character->imageFile,null(),null());
            						}
HXLINE( 313)						bool makeGhostButton3;
HXDLIN( 313)						if (::hx::IsNotNull( myAnim->__Field(HX_("indices",27,47,54,e3),::hx::paccDynamic) )) {
HXLINE( 313)							makeGhostButton3 = (( (::Array< int >)(myAnim->__Field(HX_("indices",27,47,54,e3),::hx::paccDynamic)) )->length > 0);
            						}
            						else {
HXLINE( 313)							makeGhostButton3 = false;
            						}
HXDLIN( 313)						if (makeGhostButton3) {
HXLINE( 314)							_gthis->animateGhost->anim->addBySymbolIndices(HX_("anim",11,86,71,40),( (::String)(myAnim->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ),( (::Array< int >)(myAnim->__Field(HX_("indices",27,47,54,e3),::hx::paccDynamic)) ),0,false,null(),null());
            						}
            						else {
HXLINE( 316)							_gthis->animateGhost->anim->addBySymbol(HX_("anim",11,86,71,40),( (::String)(myAnim->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ),0,false,null(),null());
            						}
HXLINE( 318)						 ::flxanimate::animate::FlxAnim _gthis2 = _gthis->animateGhost->anim;
HXDLIN( 318)						_gthis2->play(HX_("anim",11,86,71,40),true,false,_gthis->character->atlas->anim->get_curFrame());
HXLINE( 319)						_gthis->animateGhost->anim->pause();
HXLINE( 321)						_gthis->animateGhostImage = _gthis->character->imageFile;
            					}
            				}
HXLINE( 324)				 ::flixel::FlxSprite spr;
HXDLIN( 324)				if (!(_gthis->character->isAnimateAtlas)) {
HXLINE( 324)					spr = _gthis->ghost;
            				}
            				else {
HXLINE( 324)					spr = _gthis->animateGhost;
            				}
HXLINE( 325)				if (::hx::IsNotNull( spr )) {
HXLINE( 327)					spr->setPosition(_gthis->character->x,_gthis->character->y);
HXLINE( 328)					spr->set_antialiasing(_gthis->character->antialiasing);
HXLINE( 329)					spr->set_flipX(_gthis->character->flipX);
HXLINE( 330)					spr->set_alpha(_gthis->ghostAlpha);
HXLINE( 332)					{
HXLINE( 332)						 ::flixel::math::FlxBasePoint this1 = spr->scale;
HXDLIN( 332)						Float y = _gthis->character->scale->y;
HXDLIN( 332)						this1->set_x(_gthis->character->scale->x);
HXDLIN( 332)						this1->set_y(y);
            					}
HXLINE( 333)					spr->updateHitbox();
HXLINE( 335)					{
HXLINE( 335)						 ::flixel::math::FlxBasePoint this2 = spr->offset;
HXDLIN( 335)						Float y1 = _gthis->character->offset->y;
HXDLIN( 335)						this2->set_x(_gthis->character->offset->x);
HXDLIN( 335)						this2->set_y(y1);
            					}
HXLINE( 336)					spr->set_visible(true);
HXLINE( 338)					 ::flixel::FlxSprite otherSpr;
HXDLIN( 338)					if (::hx::IsInstanceEq( spr,_gthis->animateGhost )) {
HXLINE( 338)						otherSpr = _gthis->ghost;
            					}
            					else {
HXLINE( 338)						otherSpr = _gthis->animateGhost;
            					}
HXLINE( 339)					if (::hx::IsNotNull( otherSpr )) {
HXLINE( 339)						otherSpr->set_visible(false);
            					}
            				}
HXLINE( 343)				::haxe::Log_obj::trace(HX_("created ghost image",92,c5,27,90),::hx::SourceInfo(HX_("source/states/editors/CharacterEditorState.hx",41,39,ad,0d),343,HX_("states.editors.CharacterEditorState",0f,02,8c,78),HX_("addGhostUI",42,b7,a0,ed)));
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::states::editors::CharacterEditorState,_gthis, ::flixel::addons::ui::FlxUICheckBox,highlightGhost2) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_357_addGhostUI)
HXLINE( 358)			int value;
HXDLIN( 358)			if (highlightGhost2->checked) {
HXLINE( 358)				value = 125;
            			}
            			else {
HXLINE( 358)				value = 0;
            			}
HXLINE( 359)			_gthis->ghost->colorTransform->redOffset = ( (Float)(value) );
HXLINE( 360)			_gthis->ghost->colorTransform->greenOffset = ( (Float)(value) );
HXLINE( 361)			_gthis->ghost->colorTransform->blueOffset = ( (Float)(value) );
HXLINE( 362)			if (::hx::IsNotNull( _gthis->animateGhost )) {
HXLINE( 364)				_gthis->animateGhost->colorTransform->redOffset = ( (Float)(value) );
HXLINE( 365)				_gthis->animateGhost->colorTransform->greenOffset = ( (Float)(value) );
HXLINE( 366)				_gthis->animateGhost->colorTransform->blueOffset = ( (Float)(value) );
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::editors::CharacterEditorState,_gthis) HXARGC(1)
            		void _hx_run(Float relativePos){
            			HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_373_addGhostUI)
HXLINE( 374)			_gthis->ghost->set_alpha(_gthis->ghostAlpha);
HXLINE( 375)			if (::hx::IsNotNull( _gthis->animateGhost )) {
HXLINE( 375)				_gthis->animateGhost->set_alpha(_gthis->ghostAlpha);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_282_addGhostUI)
HXDLIN( 282)		 ::states::editors::CharacterEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 283)		 ::flixel::addons::ui::FlxUI tab_group =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 284)		tab_group->name = HX_("Ghost",2f,ff,85,26);
HXLINE( 287)		 ::flixel::ui::FlxButton makeGhostButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,25,15,HX_("Make Ghost",9d,ef,dd,05), ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE( 355)		Float highlightGhost = (20 + makeGhostButton->x);
HXDLIN( 355)		Float highlightGhost1 = (highlightGhost + makeGhostButton->get_width());
HXDLIN( 355)		 ::flixel::addons::ui::FlxUICheckBox highlightGhost2 =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,highlightGhost1,makeGhostButton->y,null(),null(),HX_("Highlight Ghost",23,88,be,a7),100,null(),null());
HXLINE( 356)		highlightGhost2->callback =  ::Dynamic(new _hx_Closure_1(_gthis,highlightGhost2));
HXLINE( 370)		 ::flixel::addons::ui::FlxUISlider ghostAlphaSlider =  ::flixel::addons::ui::FlxUISlider_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),HX_("ghostAlpha",8f,a9,36,a1),10,(makeGhostButton->y + 25),0,1,210,null(),5,-1,-16777216);
HXLINE( 371)		ghostAlphaSlider->nameLabel->set_text(HX_("Opacity:",2f,70,fe,e6));
HXLINE( 372)		ghostAlphaSlider->decimals = 2;
HXLINE( 373)		ghostAlphaSlider->callback =  ::Dynamic(new _hx_Closure_2(_gthis));
HXLINE( 377)		ghostAlphaSlider->value = this->ghostAlpha;
HXLINE( 379)		tab_group->add(makeGhostButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 381)		tab_group->add(highlightGhost2).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 382)		tab_group->add(ghostAlphaSlider).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 383)		this->UI_box->addGroup(tab_group);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,addGhostUI,(void))

void CharacterEditorState_obj::addSettingsUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::CharacterEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_396_addSettingsUI)
HXLINE( 397)			_gthis->character->isPlayer = !(_gthis->character->isPlayer);
HXLINE( 398)			_gthis->character->set_flipX(!(_gthis->character->flipX));
HXLINE( 399)			{
HXLINE( 399)				bool _hx_tmp;
HXDLIN( 399)				bool _hx_tmp1;
HXDLIN( 399)				if (::hx::IsNotNull( _gthis->character )) {
HXLINE( 399)					_hx_tmp1 = !(_gthis->character->isPlayer);
            				}
            				else {
HXLINE( 399)					_hx_tmp1 = false;
            				}
HXDLIN( 399)				if (!(_hx_tmp1)) {
HXLINE( 399)					if (::hx::IsNull( _gthis->character )) {
HXLINE( 399)						::String name = _gthis->_char;
HXDLIN( 399)						bool _hx_tmp2;
HXDLIN( 399)						bool _hx_tmp3;
HXDLIN( 399)						bool _hx_tmp4;
HXDLIN( 399)						bool _hx_tmp5;
HXDLIN( 399)						bool _hx_tmp6;
HXDLIN( 399)						bool _hx_tmp7;
HXDLIN( 399)						if ((name != HX_("bf",c4,55,00,00))) {
HXLINE( 399)							_hx_tmp7 = !(::StringTools_obj::startsWith(name,HX_("bf-",e9,b5,4a,00)));
            						}
            						else {
HXLINE( 399)							_hx_tmp7 = false;
            						}
HXDLIN( 399)						if (_hx_tmp7) {
HXLINE( 399)							_hx_tmp6 = !(::StringTools_obj::endsWith(name,HX_("-player",4e,cb,fe,86)));
            						}
            						else {
HXLINE( 399)							_hx_tmp6 = false;
            						}
HXDLIN( 399)						if (_hx_tmp6) {
HXLINE( 399)							_hx_tmp5 = !(::StringTools_obj::endsWith(name,HX_("-dead",51,69,6e,2b)));
            						}
            						else {
HXLINE( 399)							_hx_tmp5 = false;
            						}
HXDLIN( 399)						if (!(_hx_tmp5)) {
HXLINE( 399)							_hx_tmp4 = ::StringTools_obj::endsWith(name,HX_("-opponent",ca,2e,28,0d));
            						}
            						else {
HXLINE( 399)							_hx_tmp4 = true;
            						}
HXDLIN( 399)						if (!(_hx_tmp4)) {
HXLINE( 399)							_hx_tmp3 = ::StringTools_obj::startsWith(name,HX_("gf-",2e,81,4e,00));
            						}
            						else {
HXLINE( 399)							_hx_tmp3 = true;
            						}
HXDLIN( 399)						if (!(_hx_tmp3)) {
HXLINE( 399)							_hx_tmp2 = ::StringTools_obj::endsWith(name,HX_("-gf",8c,7f,22,00));
            						}
            						else {
HXLINE( 399)							_hx_tmp2 = true;
            						}
HXDLIN( 399)						if (!(_hx_tmp2)) {
HXLINE( 399)							_hx_tmp = (name == HX_("gf",1f,5a,00,00));
            						}
            						else {
HXLINE( 399)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE( 399)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 399)					_hx_tmp = true;
            				}
HXDLIN( 399)				if (_hx_tmp) {
HXLINE( 399)					_gthis->character->setPosition(_gthis->dadPosition->x,_gthis->dadPosition->y);
            				}
            				else {
HXLINE( 399)					_gthis->character->setPosition(_gthis->bfPosition->x,_gthis->bfPosition->y);
            				}
HXDLIN( 399)				 ::objects::Character fh = _gthis->character;
HXDLIN( 399)				fh->set_x((fh->x + _gthis->character->positionArray->__get(0)));
HXDLIN( 399)				 ::objects::Character fh1 = _gthis->character;
HXDLIN( 399)				fh1->set_y((fh1->y + _gthis->character->positionArray->__get(1)));
            			}
HXLINE( 400)			{
HXLINE( 400)				 ::Dynamic snap = false;
HXDLIN( 400)				if (::hx::IsNull( snap )) {
HXLINE( 400)					snap = true;
            				}
HXDLIN( 400)				Float offX = ( (Float)(0) );
HXDLIN( 400)				Float offY = ( (Float)(0) );
HXDLIN( 400)				if (!(_gthis->character->isPlayer)) {
HXLINE( 400)					Float offX1 = (_gthis->character->getMidpoint(null())->x + 150);
HXDLIN( 400)					offX = (offX1 + _gthis->character->cameraPosition->__get(0));
HXDLIN( 400)					Float offY1 = (_gthis->character->getMidpoint(null())->y - ( (Float)(100) ));
HXDLIN( 400)					offY = (offY1 + _gthis->character->cameraPosition->__get(1));
            				}
            				else {
HXLINE( 400)					Float offX2 = (_gthis->character->getMidpoint(null())->x - ( (Float)(100) ));
HXDLIN( 400)					offX = (offX2 - _gthis->character->cameraPosition->__get(0));
HXDLIN( 400)					Float offY2 = (_gthis->character->getMidpoint(null())->y - ( (Float)(100) ));
HXDLIN( 400)					offY = (offY2 + _gthis->character->cameraPosition->__get(1));
            				}
HXDLIN( 400)				_gthis->cameraFollowPointer->setPosition(offX,offY);
HXDLIN( 400)				if (( (bool)(snap) )) {
HXLINE( 400)					{
HXLINE( 400)						 ::flixel::math::FlxBasePoint this1 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN( 400)						Float x = _gthis->cameraFollowPointer->getMidpoint(null())->x;
HXDLIN( 400)						this1->set_x((x - (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            					}
HXDLIN( 400)					{
HXLINE( 400)						 ::flixel::math::FlxBasePoint this2 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN( 400)						Float y = _gthis->cameraFollowPointer->getMidpoint(null())->y;
HXDLIN( 400)						this2->set_y((y - (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) ))));
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::CharacterEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_404_addSettingsUI)
HXLINE( 405)			_gthis->addCharacter(true);
HXLINE( 406)			{
HXLINE( 406)				Float offX = ( (Float)(0) );
HXDLIN( 406)				Float offY = ( (Float)(0) );
HXDLIN( 406)				if (!(_gthis->character->isPlayer)) {
HXLINE( 406)					Float offX1 = (_gthis->character->getMidpoint(null())->x + 150);
HXDLIN( 406)					offX = (offX1 + _gthis->character->cameraPosition->__get(0));
HXDLIN( 406)					Float offY1 = (_gthis->character->getMidpoint(null())->y - ( (Float)(100) ));
HXDLIN( 406)					offY = (offY1 + _gthis->character->cameraPosition->__get(1));
            				}
            				else {
HXLINE( 406)					Float offX2 = (_gthis->character->getMidpoint(null())->x - ( (Float)(100) ));
HXDLIN( 406)					offX = (offX2 - _gthis->character->cameraPosition->__get(0));
HXDLIN( 406)					Float offY2 = (_gthis->character->getMidpoint(null())->y - ( (Float)(100) ));
HXDLIN( 406)					offY = (offY2 + _gthis->character->cameraPosition->__get(1));
            				}
HXDLIN( 406)				_gthis->cameraFollowPointer->setPosition(offX,offY);
HXDLIN( 406)				{
HXLINE( 406)					{
HXLINE( 406)						 ::flixel::math::FlxBasePoint this1 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN( 406)						Float x = _gthis->cameraFollowPointer->getMidpoint(null())->x;
HXDLIN( 406)						this1->set_x((x - (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            					}
HXDLIN( 406)					{
HXLINE( 406)						 ::flixel::math::FlxBasePoint this2 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN( 406)						Float y = _gthis->cameraFollowPointer->getMidpoint(null())->y;
HXDLIN( 406)						this2->set_y((y - (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) ))));
            					}
            				}
            			}
HXLINE( 407)			_gthis->reloadCharacterOptions();
HXLINE( 408)			_gthis->reloadCharacterDropDown();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::editors::CharacterEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_412_addSettingsUI)
HXLINE( 413)			 ::Dynamic _template =  ::Dynamic(::hx::Anon_obj::Create(11)
            				->setFixed(0,HX_("animations",ef,34,1c,83),::Array_obj< ::Dynamic>::__new(5)->init(0, ::Dynamic(::hx::Anon_obj::Create(6)
            					->setFixed(0,HX_("offsets",80,09,65,d7),::Array_obj< int >::fromData( _hx_array_data_788c020f_20,2))
            					->setFixed(1,HX_("indices",27,47,54,e3),::Array_obj< int >::__new(0))
            					->setFixed(2,HX_("fps",e9,c7,4d,00),24)
            					->setFixed(3,HX_("anim",11,86,71,40),HX_("idle",14,a7,b3,45))
            					->setFixed(4,HX_("loop",64,a6,b7,47),false)
            					->setFixed(5,HX_("name",4b,72,ff,48),HX_("BF idle dance",03,fa,cc,7f))))->init(1, ::Dynamic(::hx::Anon_obj::Create(6)
            					->setFixed(0,HX_("offsets",80,09,65,d7),::Array_obj< int >::fromData( _hx_array_data_788c020f_21,2))
            					->setFixed(1,HX_("indices",27,47,54,e3),::Array_obj< int >::__new(0))
            					->setFixed(2,HX_("fps",e9,c7,4d,00),24)
            					->setFixed(3,HX_("anim",11,86,71,40),HX_("singLEFT",d6,39,ef,3b))
            					->setFixed(4,HX_("loop",64,a6,b7,47),false)
            					->setFixed(5,HX_("name",4b,72,ff,48),HX_("BF NOTE LEFT0",77,e0,7c,76))))->init(2, ::Dynamic(::hx::Anon_obj::Create(6)
            					->setFixed(0,HX_("offsets",80,09,65,d7),::Array_obj< int >::fromData( _hx_array_data_788c020f_22,2))
            					->setFixed(1,HX_("indices",27,47,54,e3),::Array_obj< int >::__new(0))
            					->setFixed(2,HX_("fps",e9,c7,4d,00),24)
            					->setFixed(3,HX_("anim",11,86,71,40),HX_("singDOWN",31,2a,ad,36))
            					->setFixed(4,HX_("loop",64,a6,b7,47),false)
            					->setFixed(5,HX_("name",4b,72,ff,48),HX_("BF NOTE DOWN0",bc,3f,f1,e1))))->init(3, ::Dynamic(::hx::Anon_obj::Create(6)
            					->setFixed(0,HX_("offsets",80,09,65,d7),::Array_obj< int >::fromData( _hx_array_data_788c020f_23,2))
            					->setFixed(1,HX_("indices",27,47,54,e3),::Array_obj< int >::__new(0))
            					->setFixed(2,HX_("fps",e9,c7,4d,00),24)
            					->setFixed(3,HX_("anim",11,86,71,40),HX_("singUP",6a,52,21,b9))
            					->setFixed(4,HX_("loop",64,a6,b7,47),false)
            					->setFixed(5,HX_("name",4b,72,ff,48),HX_("BF NOTE UP0",23,e8,67,d4))))->init(4, ::Dynamic(::hx::Anon_obj::Create(6)
            					->setFixed(0,HX_("offsets",80,09,65,d7),::Array_obj< int >::fromData( _hx_array_data_788c020f_24,2))
            					->setFixed(1,HX_("indices",27,47,54,e3),::Array_obj< int >::__new(0))
            					->setFixed(2,HX_("fps",e9,c7,4d,00),24)
            					->setFixed(3,HX_("anim",11,86,71,40),HX_("singRIGHT",0d,6f,70,ac))
            					->setFixed(4,HX_("loop",64,a6,b7,47),false)
            					->setFixed(5,HX_("name",4b,72,ff,48),HX_("BF NOTE RIGHT0",06,3f,26,eb)))))
            				->setFixed(1,HX_("vocals_file",3d,c5,2d,83),null())
            				->setFixed(2,HX_("no_antialiasing",f2,74,67,98),false)
            				->setFixed(3,HX_("image",5b,1f,69,bd),HX_("characters/BOYFRIEND",65,2c,9c,1b))
            				->setFixed(4,HX_("position",a9,a0,fa,ca),::Array_obj< Float >::fromData( _hx_array_data_788c020f_25,2))
            				->setFixed(5,HX_("healthicon",15,8e,6f,17),HX_("face",9d,b4,b5,43))
            				->setFixed(6,HX_("flip_x",26,2b,6a,3d),false)
            				->setFixed(7,HX_("healthbar_colors",78,d9,40,40),::Array_obj< int >::fromData( _hx_array_data_788c020f_26,3))
            				->setFixed(8,HX_("camera_position",c3,d4,4a,56),::Array_obj< Float >::fromData( _hx_array_data_788c020f_27,2))
            				->setFixed(9,HX_("sing_duration",84,ae,a8,66),( (Float)(4) ))
            				->setFixed(10,HX_("scale",8a,ce,ce,78),( (Float)(1) )));
HXLINE( 434)			_gthis->character->loadCharacterFile(_template);
HXLINE( 435)			_gthis->character->set_color(-1);
HXLINE( 436)			_gthis->character->set_alpha(( (Float)(1) ));
HXLINE( 437)			{
HXLINE( 437)				_gthis->anims = _gthis->character->animationsArray;
HXDLIN( 437)				if ((_gthis->anims->length > 0)) {
HXLINE( 437)					_gthis->character->playAnim(( (::String)(_gthis->anims->__get(0)->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),true,null(),null());
            				}
HXDLIN( 437)				_gthis->curAnim = 0;
HXDLIN( 437)				{
HXLINE( 437)					 ::Dynamic filter = null();
HXDLIN( 437)					 ::flixel::group::FlxTypedGroupIterator text =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,_gthis->animsTxtGroup->members,filter);
HXDLIN( 437)					while(text->hasNext()){
HXLINE( 437)						 ::flixel::text::FlxText text1 = text->next().StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 437)						text1->kill();
            					}
            				}
HXDLIN( 437)				int daLoop = 0;
HXDLIN( 437)				{
HXLINE( 437)					int _g = 0;
HXDLIN( 437)					::Array< ::Dynamic> _g1 = _gthis->anims;
HXDLIN( 437)					while((_g < _g1->length)){
HXLINE( 437)						 ::Dynamic anim = _g1->__get(_g);
HXDLIN( 437)						_g = (_g + 1);
HXDLIN( 437)						 ::flixel::text::FlxText text2 = _gthis->animsTxtGroup->recycle(::hx::ClassOf< ::flixel::text::FlxText >(),null(),null(),null()).StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 437)						text2->set_x(( (Float)(10) ));
HXDLIN( 437)						text2->set_y(( (Float)((32 + (20 * daLoop))) ));
HXDLIN( 437)						text2->set_fieldWidth(( (Float)(400) ));
HXDLIN( 437)						text2->set_fieldHeight(( (Float)(20) ));
HXDLIN( 437)						::String templateCharacter = ( (::String)((anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic) + HX_(": ",a6,32,00,00))) );
HXDLIN( 437)						text2->set_text((templateCharacter + ::Std_obj::string( ::Dynamic(anim->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic)))));
HXDLIN( 437)						text2->setFormat(null(),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_FAST_dyn(),-16777216,null());
HXDLIN( 437)						{
HXLINE( 437)							 ::flixel::math::FlxBasePoint this1 = text2->scrollFactor;
HXDLIN( 437)							this1->set_x(( (Float)(0) ));
HXDLIN( 437)							this1->set_y(( (Float)(0) ));
            						}
HXDLIN( 437)						text2->set_borderSize(( (Float)(1) ));
HXDLIN( 437)						_gthis->animsTxtGroup->add(text2).StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 437)						daLoop = (daLoop + 1);
            					}
            				}
HXDLIN( 437)				{
HXLINE( 437)					int daLoop1 = 0;
HXDLIN( 437)					{
HXLINE( 437)						 ::Dynamic filter1 = null();
HXDLIN( 437)						 ::flixel::group::FlxTypedGroupIterator text3 =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,_gthis->animsTxtGroup->members,filter1);
HXDLIN( 437)						while(text3->hasNext()){
HXLINE( 437)							 ::flixel::text::FlxText text4 = text3->next().StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 437)							text4->set_color(-1);
HXDLIN( 437)							if ((daLoop1 == _gthis->curAnim)) {
HXLINE( 437)								text4->set_color(-16711936);
            							}
HXDLIN( 437)							daLoop1 = (daLoop1 + 1);
            						}
            					}
            				}
HXDLIN( 437)				if (::hx::IsNotNull( _gthis->animationDropDown )) {
HXLINE( 437)					_gthis->reloadAnimationDropDown();
            				}
            			}
HXLINE( 438)			_gthis->reloadCharacterOptions();
HXLINE( 439)			{
HXLINE( 439)				bool templateCharacter1;
HXDLIN( 439)				bool templateCharacter2;
HXDLIN( 439)				if (::hx::IsNotNull( _gthis->character )) {
HXLINE( 439)					templateCharacter2 = !(_gthis->character->isPlayer);
            				}
            				else {
HXLINE( 439)					templateCharacter2 = false;
            				}
HXDLIN( 439)				if (!(templateCharacter2)) {
HXLINE( 439)					if (::hx::IsNull( _gthis->character )) {
HXLINE( 439)						::String name = _gthis->_char;
HXDLIN( 439)						bool templateCharacter3;
HXDLIN( 439)						bool templateCharacter4;
HXDLIN( 439)						bool templateCharacter5;
HXDLIN( 439)						bool templateCharacter6;
HXDLIN( 439)						bool templateCharacter7;
HXDLIN( 439)						bool templateCharacter8;
HXDLIN( 439)						if ((name != HX_("bf",c4,55,00,00))) {
HXLINE( 439)							templateCharacter8 = !(::StringTools_obj::startsWith(name,HX_("bf-",e9,b5,4a,00)));
            						}
            						else {
HXLINE( 439)							templateCharacter8 = false;
            						}
HXDLIN( 439)						if (templateCharacter8) {
HXLINE( 439)							templateCharacter7 = !(::StringTools_obj::endsWith(name,HX_("-player",4e,cb,fe,86)));
            						}
            						else {
HXLINE( 439)							templateCharacter7 = false;
            						}
HXDLIN( 439)						if (templateCharacter7) {
HXLINE( 439)							templateCharacter6 = !(::StringTools_obj::endsWith(name,HX_("-dead",51,69,6e,2b)));
            						}
            						else {
HXLINE( 439)							templateCharacter6 = false;
            						}
HXDLIN( 439)						if (!(templateCharacter6)) {
HXLINE( 439)							templateCharacter5 = ::StringTools_obj::endsWith(name,HX_("-opponent",ca,2e,28,0d));
            						}
            						else {
HXLINE( 439)							templateCharacter5 = true;
            						}
HXDLIN( 439)						if (!(templateCharacter5)) {
HXLINE( 439)							templateCharacter4 = ::StringTools_obj::startsWith(name,HX_("gf-",2e,81,4e,00));
            						}
            						else {
HXLINE( 439)							templateCharacter4 = true;
            						}
HXDLIN( 439)						if (!(templateCharacter4)) {
HXLINE( 439)							templateCharacter3 = ::StringTools_obj::endsWith(name,HX_("-gf",8c,7f,22,00));
            						}
            						else {
HXLINE( 439)							templateCharacter3 = true;
            						}
HXDLIN( 439)						if (!(templateCharacter3)) {
HXLINE( 439)							templateCharacter1 = (name == HX_("gf",1f,5a,00,00));
            						}
            						else {
HXLINE( 439)							templateCharacter1 = true;
            						}
            					}
            					else {
HXLINE( 439)						templateCharacter1 = false;
            					}
            				}
            				else {
HXLINE( 439)					templateCharacter1 = true;
            				}
HXDLIN( 439)				if (templateCharacter1) {
HXLINE( 439)					_gthis->character->setPosition(_gthis->dadPosition->x,_gthis->dadPosition->y);
            				}
            				else {
HXLINE( 439)					_gthis->character->setPosition(_gthis->bfPosition->x,_gthis->bfPosition->y);
            				}
HXDLIN( 439)				 ::objects::Character fh = _gthis->character;
HXDLIN( 439)				fh->set_x((fh->x + _gthis->character->positionArray->__get(0)));
HXDLIN( 439)				 ::objects::Character fh1 = _gthis->character;
HXDLIN( 439)				fh1->set_y((fh1->y + _gthis->character->positionArray->__get(1)));
            			}
HXLINE( 440)			{
HXLINE( 440)				Float offX = ( (Float)(0) );
HXDLIN( 440)				Float offY = ( (Float)(0) );
HXDLIN( 440)				if (!(_gthis->character->isPlayer)) {
HXLINE( 440)					Float offX1 = (_gthis->character->getMidpoint(null())->x + 150);
HXDLIN( 440)					offX = (offX1 + _gthis->character->cameraPosition->__get(0));
HXDLIN( 440)					Float offY1 = (_gthis->character->getMidpoint(null())->y - ( (Float)(100) ));
HXDLIN( 440)					offY = (offY1 + _gthis->character->cameraPosition->__get(1));
            				}
            				else {
HXLINE( 440)					Float offX2 = (_gthis->character->getMidpoint(null())->x - ( (Float)(100) ));
HXDLIN( 440)					offX = (offX2 - _gthis->character->cameraPosition->__get(0));
HXDLIN( 440)					Float offY2 = (_gthis->character->getMidpoint(null())->y - ( (Float)(100) ));
HXDLIN( 440)					offY = (offY2 + _gthis->character->cameraPosition->__get(1));
            				}
HXDLIN( 440)				_gthis->cameraFollowPointer->setPosition(offX,offY);
HXDLIN( 440)				{
HXLINE( 440)					{
HXLINE( 440)						 ::flixel::math::FlxBasePoint this2 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN( 440)						Float x = _gthis->cameraFollowPointer->getMidpoint(null())->x;
HXDLIN( 440)						this2->set_x((x - (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            					}
HXDLIN( 440)					{
HXLINE( 440)						 ::flixel::math::FlxBasePoint this3 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN( 440)						Float y = _gthis->cameraFollowPointer->getMidpoint(null())->y;
HXDLIN( 440)						this3->set_y((y - (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) ))));
            					}
            				}
            			}
HXLINE( 441)			_gthis->reloadCharacterDropDown();
HXLINE( 442)			{
HXLINE( 442)				_gthis->healthColorStepperR->set_value(( (Float)(_gthis->character->healthColorArray->__get(0)) ));
HXDLIN( 442)				_gthis->healthColorStepperG->set_value(( (Float)(_gthis->character->healthColorArray->__get(1)) ));
HXDLIN( 442)				_gthis->healthColorStepperB->set_value(( (Float)(_gthis->character->healthColorArray->__get(2)) ));
HXDLIN( 442)				 ::flixel::FlxSprite _gthis1 = _gthis->healthBar->leftBar;
HXDLIN( 442)				 ::flixel::FlxSprite _gthis2 = _gthis->healthBar->rightBar;
HXDLIN( 442)				int Red = _gthis->character->healthColorArray->__get(0);
HXDLIN( 442)				int Green = _gthis->character->healthColorArray->__get(1);
HXDLIN( 442)				int Blue = _gthis->character->healthColorArray->__get(2);
HXDLIN( 442)				int Alpha = 255;
HXDLIN( 442)				int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 442)				{
HXLINE( 442)					color = (color & -16711681);
HXDLIN( 442)					int color1;
HXDLIN( 442)					if ((Red > 255)) {
HXLINE( 442)						color1 = 255;
            					}
            					else {
HXLINE( 442)						if ((Red < 0)) {
HXLINE( 442)							color1 = 0;
            						}
            						else {
HXLINE( 442)							color1 = Red;
            						}
            					}
HXDLIN( 442)					color = (color | (color1 << 16));
            				}
HXDLIN( 442)				{
HXLINE( 442)					color = (color & -65281);
HXDLIN( 442)					int color2;
HXDLIN( 442)					if ((Green > 255)) {
HXLINE( 442)						color2 = 255;
            					}
            					else {
HXLINE( 442)						if ((Green < 0)) {
HXLINE( 442)							color2 = 0;
            						}
            						else {
HXLINE( 442)							color2 = Green;
            						}
            					}
HXDLIN( 442)					color = (color | (color2 << 8));
            				}
HXDLIN( 442)				{
HXLINE( 442)					color = (color & -256);
HXDLIN( 442)					int color3;
HXDLIN( 442)					if ((Blue > 255)) {
HXLINE( 442)						color3 = 255;
            					}
            					else {
HXLINE( 442)						if ((Blue < 0)) {
HXLINE( 442)							color3 = 0;
            						}
            						else {
HXLINE( 442)							color3 = Blue;
            						}
            					}
HXDLIN( 442)					color = (color | color3);
            				}
HXDLIN( 442)				{
HXLINE( 442)					color = (color & 16777215);
HXDLIN( 442)					int color4;
HXDLIN( 442)					if ((Alpha > 255)) {
HXLINE( 442)						color4 = 255;
            					}
            					else {
HXLINE( 442)						if ((Alpha < 0)) {
HXLINE( 442)							color4 = 0;
            						}
            						else {
HXLINE( 442)							color4 = Alpha;
            						}
            					}
HXDLIN( 442)					color = (color | (color4 << 24));
            				}
HXDLIN( 442)				_gthis1->set_color(_gthis2->set_color(color));
HXDLIN( 442)				_gthis->healthIcon->changeIcon(_gthis->character->healthIcon,false);
HXDLIN( 442)				::String templateCharacter9 = (HX_("Character: ",6f,a2,f1,a2) + _gthis->_char);
HXDLIN( 442)				::backend::DiscordClient_obj::changePresence(HX_("Character Editor",84,45,58,b1),templateCharacter9,_gthis->healthIcon->getCharacter(),null(),null());
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::states::editors::CharacterEditorState,_gthis) HXARGC(1)
            		void _hx_run(::String index){
            			HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_449_addSettingsUI)
HXLINE( 450)			::String intended = _gthis->characterList->__get(( (int)(::Std_obj::parseInt(index)) ));
HXLINE( 451)			bool _hx_tmp;
HXDLIN( 451)			if (::hx::IsNotNull( intended )) {
HXLINE( 451)				_hx_tmp = (intended.length < 1);
            			}
            			else {
HXLINE( 451)				_hx_tmp = true;
            			}
HXDLIN( 451)			if (_hx_tmp) {
HXLINE( 451)				return;
            			}
HXLINE( 453)			::String characterPath = ((HX_("characters/",45,3c,bf,be) + intended) + HX_(".json",56,f1,d6,c2));
HXLINE( 454)			::String path = ::backend::Paths_obj::getPath(characterPath,HX_("TEXT",ad,94,ba,37),null(),true);
HXLINE( 456)			if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 461)				_gthis->_char = intended;
HXLINE( 462)				_gthis->check_player->set_checked(_gthis->character->isPlayer);
HXLINE( 463)				_gthis->addCharacter(null());
HXLINE( 464)				_gthis->reloadCharacterOptions();
HXLINE( 465)				_gthis->reloadCharacterDropDown();
HXLINE( 466)				{
HXLINE( 466)					Float offX = ( (Float)(0) );
HXDLIN( 466)					Float offY = ( (Float)(0) );
HXDLIN( 466)					if (!(_gthis->character->isPlayer)) {
HXLINE( 466)						Float offX1 = (_gthis->character->getMidpoint(null())->x + 150);
HXDLIN( 466)						offX = (offX1 + _gthis->character->cameraPosition->__get(0));
HXDLIN( 466)						Float offY1 = (_gthis->character->getMidpoint(null())->y - ( (Float)(100) ));
HXDLIN( 466)						offY = (offY1 + _gthis->character->cameraPosition->__get(1));
            					}
            					else {
HXLINE( 466)						Float offX2 = (_gthis->character->getMidpoint(null())->x - ( (Float)(100) ));
HXDLIN( 466)						offX = (offX2 - _gthis->character->cameraPosition->__get(0));
HXDLIN( 466)						Float offY2 = (_gthis->character->getMidpoint(null())->y - ( (Float)(100) ));
HXDLIN( 466)						offY = (offY2 + _gthis->character->cameraPosition->__get(1));
            					}
HXDLIN( 466)					_gthis->cameraFollowPointer->setPosition(offX,offY);
HXDLIN( 466)					{
HXLINE( 466)						{
HXLINE( 466)							 ::flixel::math::FlxBasePoint this1 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN( 466)							Float x = _gthis->cameraFollowPointer->getMidpoint(null())->x;
HXDLIN( 466)							this1->set_x((x - (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            						}
HXDLIN( 466)						{
HXLINE( 466)							 ::flixel::math::FlxBasePoint this2 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN( 466)							Float y = _gthis->cameraFollowPointer->getMidpoint(null())->y;
HXDLIN( 466)							this2->set_y((y - (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) ))));
            						}
            					}
            				}
            			}
            			else {
HXLINE( 470)				_gthis->reloadCharacterDropDown();
HXLINE( 471)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 471)				_hx_tmp1->play(::backend::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_389_addSettingsUI)
HXDLIN( 389)		 ::states::editors::CharacterEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 390)		 ::flixel::addons::ui::FlxUI tab_group =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 391)		tab_group->name = HX_("Settings",03,39,ef,64);
HXLINE( 393)		this->check_player =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,60,null(),null(),HX_("Playable Character",97,3e,18,db),100,null(),null());
HXLINE( 394)		this->check_player->set_checked(this->character->isPlayer);
HXLINE( 395)		this->check_player->callback =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE( 403)		 ::flixel::ui::FlxButton reloadCharacter =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,140,20,HX_("Reload Char",fd,9c,14,46), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE( 411)		 ::flixel::ui::FlxButton templateCharacter =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,140,50,HX_("Load Template",74,05,aa,0c), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE( 444)		templateCharacter->set_color(-65536);
HXLINE( 445)		templateCharacter->label->set_color(-1);
HXLINE( 448)		this->charDropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,30,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(::Array_obj< ::String >::fromData( _hx_array_data_788c020f_30,1),true), ::Dynamic(new _hx_Closure_3(_gthis)),null(),null(),null(),null());
HXLINE( 474)		this->reloadCharacterDropDown();
HXLINE( 475)		this->charDropDown->set_selectedLabel(this->_char);
HXLINE( 477)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->charDropDown->x,(this->charDropDown->y - ( (Float)(18) )),0,HX_("Character:",91,5c,7f,4c),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 478)		tab_group->add(this->check_player).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 479)		tab_group->add(reloadCharacter).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 480)		tab_group->add(templateCharacter).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 481)		tab_group->add(this->charDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 482)		this->UI_box->addGroup(tab_group);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,addSettingsUI,(void))

void CharacterEditorState_obj::addAnimationsUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::CharacterEditorState,_gthis) HXARGC(1)
            		void _hx_run(::String pressed){
            			HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_503_addAnimationsUI)
HXLINE( 504)			int selectedAnimation = ( (int)(::Std_obj::parseInt(pressed)) );
HXLINE( 505)			 ::Dynamic anim = _gthis->character->animationsArray->__get(selectedAnimation);
HXLINE( 506)			_gthis->animationInputText->set_text(( (::String)(anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ));
HXLINE( 507)			_gthis->animationNameInputText->set_text(( (::String)(anim->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ));
HXLINE( 508)			_gthis->animationLoopCheckBox->set_checked(( (bool)(anim->__Field(HX_("loop",64,a6,b7,47),::hx::paccDynamic)) ));
HXLINE( 509)			_gthis->animationFramerate->set_value(( (Float)(anim->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ));
HXLINE( 511)			::String indicesStr = ( (::Array< int >)(anim->__Field(HX_("indices",27,47,54,e3),::hx::paccDynamic)) )->toString();
HXLINE( 512)			 ::flixel::addons::ui::FlxUIInputText _gthis1 = _gthis->animationIndicesInputText;
HXDLIN( 512)			_gthis1->set_text(indicesStr.substr(1,(indicesStr.length - 2)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::CharacterEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_515_addAnimationsUI)
HXLINE( 516)			::Array< int > indices = ::Array_obj< int >::__new(0);
HXLINE( 517)			::Array< ::String > indicesStr = ::StringTools_obj::trim(_gthis->animationIndicesInputText->text).split(HX_(",",2c,00,00,00));
HXLINE( 518)			if ((indicesStr->length > 1)) {
HXLINE( 519)				int _g = 0;
HXDLIN( 519)				int _g1 = indicesStr->length;
HXDLIN( 519)				while((_g < _g1)){
HXLINE( 519)					_g = (_g + 1);
HXDLIN( 519)					int i = (_g - 1);
HXLINE( 520)					int index = ( (int)(::Std_obj::parseInt(indicesStr->__get(i))) );
HXLINE( 521)					bool addUpdateButton;
HXDLIN( 521)					bool addUpdateButton1;
HXDLIN( 521)					bool addUpdateButton2;
HXDLIN( 521)					if (::hx::IsNotNull( indicesStr->__get(i) )) {
HXLINE( 521)						addUpdateButton2 = (indicesStr->__get(i) != HX_("",00,00,00,00));
            					}
            					else {
HXLINE( 521)						addUpdateButton2 = false;
            					}
HXDLIN( 521)					if (addUpdateButton2) {
HXLINE( 521)						addUpdateButton1 = !(::Math_obj::isNaN(( (Float)(index) )));
            					}
            					else {
HXLINE( 521)						addUpdateButton1 = false;
            					}
HXDLIN( 521)					if (addUpdateButton1) {
HXLINE( 521)						addUpdateButton = (index > -1);
            					}
            					else {
HXLINE( 521)						addUpdateButton = false;
            					}
HXDLIN( 521)					if (addUpdateButton) {
HXLINE( 522)						indices->push(index);
            					}
            				}
            			}
HXLINE( 527)			::String lastAnim;
HXDLIN( 527)			if (::hx::IsNotNull( _gthis->character->animationsArray->__get(_gthis->curAnim) )) {
HXLINE( 527)				lastAnim = ( (::String)(_gthis->character->animationsArray->__get(_gthis->curAnim)->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) );
            			}
            			else {
HXLINE( 527)				lastAnim = HX_("",00,00,00,00);
            			}
HXLINE( 528)			::Array< int > lastOffsets = ::Array_obj< int >::fromData( _hx_array_data_788c020f_46,2);
HXLINE( 529)			{
HXLINE( 529)				int _g2 = 0;
HXDLIN( 529)				::Array< ::Dynamic> _g3 = _gthis->character->animationsArray;
HXDLIN( 529)				while((_g2 < _g3->length)){
HXLINE( 529)					 ::Dynamic anim = _g3->__get(_g2);
HXDLIN( 529)					_g2 = (_g2 + 1);
HXLINE( 530)					if (::hx::IsEq( _gthis->animationInputText->text,anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic) )) {
HXLINE( 531)						lastOffsets = ( (::Array< int >)(anim->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic)) );
HXLINE( 532)						if (_gthis->character->animOffsets->exists(_gthis->animationInputText->text)) {
HXLINE( 534)							if (!(_gthis->character->isAnimateAtlas)) {
HXLINE( 534)								_gthis->character->animation->remove(_gthis->animationInputText->text);
            							}
            							else {
HXLINE( 535)								_gthis->character->atlas->anim->animsMap->remove(_gthis->animationInputText->text);
            							}
            						}
HXLINE( 537)						_gthis->character->animationsArray->remove(anim);
            					}
            				}
            			}
HXLINE( 540)			 ::Dynamic addedAnim =  ::Dynamic(::hx::Anon_obj::Create(6)
            				->setFixed(0,HX_("offsets",80,09,65,d7),::Array_obj< int >::fromData( _hx_array_data_788c020f_47,2))
            				->setFixed(1,HX_("indices",27,47,54,e3),::Array_obj< int >::__new(0))
            				->setFixed(2,HX_("fps",e9,c7,4d,00),24)
            				->setFixed(3,HX_("anim",11,86,71,40),_gthis->animationInputText->text)
            				->setFixed(4,HX_("loop",64,a6,b7,47),false)
            				->setFixed(5,HX_("name",4b,72,ff,48),_gthis->animationNameInputText->text));
HXLINE( 541)			addedAnim->__SetField(HX_("fps",e9,c7,4d,00),::Math_obj::round(_gthis->animationFramerate->value),::hx::paccDynamic);
HXLINE( 542)			addedAnim->__SetField(HX_("loop",64,a6,b7,47),_gthis->animationLoopCheckBox->checked,::hx::paccDynamic);
HXLINE( 543)			addedAnim->__SetField(HX_("indices",27,47,54,e3),indices,::hx::paccDynamic);
HXLINE( 544)			addedAnim->__SetField(HX_("offsets",80,09,65,d7),lastOffsets,::hx::paccDynamic);
HXLINE( 545)			_gthis->addAnimation(( (::String)(addedAnim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),( (::String)(addedAnim->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ),( (Float)(addedAnim->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ),( (bool)(addedAnim->__Field(HX_("loop",64,a6,b7,47),::hx::paccDynamic)) ),( (::Array< int >)(addedAnim->__Field(HX_("indices",27,47,54,e3),::hx::paccDynamic)) ));
HXLINE( 546)			_gthis->character->animationsArray->push(addedAnim);
HXLINE( 548)			{
HXLINE( 548)				_gthis->anims = _gthis->character->animationsArray;
HXDLIN( 548)				if ((_gthis->anims->length > 0)) {
HXLINE( 548)					_gthis->character->playAnim(( (::String)(_gthis->anims->__get(0)->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),true,null(),null());
            				}
HXDLIN( 548)				_gthis->curAnim = 0;
HXDLIN( 548)				{
HXLINE( 548)					 ::Dynamic filter = null();
HXDLIN( 548)					 ::flixel::group::FlxTypedGroupIterator text =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,_gthis->animsTxtGroup->members,filter);
HXDLIN( 548)					while(text->hasNext()){
HXLINE( 548)						 ::flixel::text::FlxText text1 = text->next().StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 548)						text1->kill();
            					}
            				}
HXDLIN( 548)				int daLoop = 0;
HXDLIN( 548)				{
HXLINE( 548)					int _g4 = 0;
HXDLIN( 548)					::Array< ::Dynamic> _g5 = _gthis->anims;
HXDLIN( 548)					while((_g4 < _g5->length)){
HXLINE( 548)						 ::Dynamic anim1 = _g5->__get(_g4);
HXDLIN( 548)						_g4 = (_g4 + 1);
HXDLIN( 548)						 ::flixel::text::FlxText text2 = _gthis->animsTxtGroup->recycle(::hx::ClassOf< ::flixel::text::FlxText >(),null(),null(),null()).StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 548)						text2->set_x(( (Float)(10) ));
HXDLIN( 548)						text2->set_y(( (Float)((32 + (20 * daLoop))) ));
HXDLIN( 548)						text2->set_fieldWidth(( (Float)(400) ));
HXDLIN( 548)						text2->set_fieldHeight(( (Float)(20) ));
HXDLIN( 548)						::String addUpdateButton3 = ( (::String)((anim1->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic) + HX_(": ",a6,32,00,00))) );
HXDLIN( 548)						text2->set_text((addUpdateButton3 + ::Std_obj::string( ::Dynamic(anim1->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic)))));
HXDLIN( 548)						text2->setFormat(null(),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_FAST_dyn(),-16777216,null());
HXDLIN( 548)						{
HXLINE( 548)							 ::flixel::math::FlxBasePoint this1 = text2->scrollFactor;
HXDLIN( 548)							this1->set_x(( (Float)(0) ));
HXDLIN( 548)							this1->set_y(( (Float)(0) ));
            						}
HXDLIN( 548)						text2->set_borderSize(( (Float)(1) ));
HXDLIN( 548)						_gthis->animsTxtGroup->add(text2).StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 548)						daLoop = (daLoop + 1);
            					}
            				}
HXDLIN( 548)				{
HXLINE( 548)					int daLoop1 = 0;
HXDLIN( 548)					{
HXLINE( 548)						 ::Dynamic filter1 = null();
HXDLIN( 548)						 ::flixel::group::FlxTypedGroupIterator text3 =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,_gthis->animsTxtGroup->members,filter1);
HXDLIN( 548)						while(text3->hasNext()){
HXLINE( 548)							 ::flixel::text::FlxText text4 = text3->next().StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 548)							text4->set_color(-1);
HXDLIN( 548)							if ((daLoop1 == _gthis->curAnim)) {
HXLINE( 548)								text4->set_color(-16711936);
            							}
HXDLIN( 548)							daLoop1 = (daLoop1 + 1);
            						}
            					}
            				}
HXDLIN( 548)				if (::hx::IsNotNull( _gthis->animationDropDown )) {
HXLINE( 548)					_gthis->reloadAnimationDropDown();
            				}
            			}
HXLINE( 549)			Float addUpdateButton4 = ::Math_obj::max(( (Float)(0) ),( (Float)(_gthis->character->animationsArray->indexOf(addedAnim,null())) ));
HXDLIN( 549)			_gthis->curAnim = ::Std_obj::_hx_int(addUpdateButton4);
HXLINE( 550)			_gthis->character->playAnim(( (::String)(addedAnim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),true,null(),null());
HXLINE( 551)			::haxe::Log_obj::trace((HX_("Added/Updated animation: ",f6,52,6a,23) + _gthis->animationInputText->text),::hx::SourceInfo(HX_("source/states/editors/CharacterEditorState.hx",41,39,ad,0d),551,HX_("states.editors.CharacterEditorState",0f,02,8c,78),HX_("addAnimationsUI",c4,44,96,30)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::editors::CharacterEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_555_addAnimationsUI)
HXLINE( 555)			int _g = 0;
HXDLIN( 555)			::Array< ::Dynamic> _g1 = _gthis->character->animationsArray;
HXDLIN( 555)			while((_g < _g1->length)){
HXLINE( 555)				 ::Dynamic anim = _g1->__get(_g);
HXDLIN( 555)				_g = (_g + 1);
HXLINE( 556)				if (::hx::IsEq( _gthis->animationInputText->text,anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic) )) {
HXLINE( 558)					bool resetAnim = false;
HXLINE( 559)					::String anim1 = ( (::String)(anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) );
HXDLIN( 559)					 ::objects::Character _this = _gthis->character;
HXDLIN( 559)					::String name = HX_("",00,00,00,00);
HXDLIN( 559)					bool removeButton;
HXDLIN( 559)					if (!(_this->isAnimateAtlas)) {
HXLINE( 559)						removeButton = ::hx::IsNull( _this->animation->_curAnim );
            					}
            					else {
HXLINE( 559)						removeButton = ::hx::IsNull( _this->atlas->anim->get_curSymbol() );
            					}
HXDLIN( 559)					if (!(removeButton)) {
HXLINE( 559)						if (!(_this->isAnimateAtlas)) {
HXLINE( 559)							name = _this->animation->_curAnim->name;
            						}
            						else {
HXLINE( 559)							name = _this->atlas->anim->lastPlayedAnim;
            						}
            					}
HXDLIN( 559)					::String removeButton1;
HXDLIN( 559)					if (::hx::IsNotNull( name )) {
HXLINE( 559)						removeButton1 = name;
            					}
            					else {
HXLINE( 559)						removeButton1 = HX_("",00,00,00,00);
            					}
HXDLIN( 559)					if ((anim1 == removeButton1)) {
HXLINE( 559)						resetAnim = true;
            					}
HXLINE( 560)					if (_gthis->character->animOffsets->exists(( (::String)(anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ))) {
HXLINE( 562)						if (!(_gthis->character->isAnimateAtlas)) {
HXLINE( 562)							_gthis->character->animation->remove(( (::String)(anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ));
            						}
            						else {
HXLINE( 563)							_gthis->character->atlas->anim->animsMap->remove(( (::String)(anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ));
            						}
HXLINE( 564)						_gthis->character->animOffsets->remove(( (::String)(anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ));
HXLINE( 565)						_gthis->character->animationsArray->remove(anim);
            					}
HXLINE( 568)					bool removeButton2;
HXDLIN( 568)					if (resetAnim) {
HXLINE( 568)						removeButton2 = (_gthis->character->animationsArray->length > 0);
            					}
            					else {
HXLINE( 568)						removeButton2 = false;
            					}
HXDLIN( 568)					if (removeButton2) {
HXLINE( 569)						_gthis->curAnim = ::flixel::math::FlxMath_obj::wrap(_gthis->curAnim,0,(_gthis->anims->length - 1));
HXLINE( 570)						_gthis->character->playAnim(( (::String)(_gthis->anims->__get(_gthis->curAnim)->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),true,null(),null());
HXLINE( 571)						{
HXLINE( 571)							int daLoop = 0;
HXDLIN( 571)							{
HXLINE( 571)								 ::Dynamic filter = null();
HXDLIN( 571)								 ::flixel::group::FlxTypedGroupIterator text =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,_gthis->animsTxtGroup->members,filter);
HXDLIN( 571)								while(text->hasNext()){
HXLINE( 571)									 ::flixel::text::FlxText text1 = text->next().StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 571)									text1->set_color(-1);
HXDLIN( 571)									if ((daLoop == _gthis->curAnim)) {
HXLINE( 571)										text1->set_color(-16711936);
            									}
HXDLIN( 571)									daLoop = (daLoop + 1);
            								}
            							}
            						}
            					}
HXLINE( 573)					{
HXLINE( 573)						_gthis->anims = _gthis->character->animationsArray;
HXDLIN( 573)						if ((_gthis->anims->length > 0)) {
HXLINE( 573)							_gthis->character->playAnim(( (::String)(_gthis->anims->__get(0)->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),true,null(),null());
            						}
HXDLIN( 573)						_gthis->curAnim = 0;
HXDLIN( 573)						{
HXLINE( 573)							 ::Dynamic filter1 = null();
HXDLIN( 573)							 ::flixel::group::FlxTypedGroupIterator text2 =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,_gthis->animsTxtGroup->members,filter1);
HXDLIN( 573)							while(text2->hasNext()){
HXLINE( 573)								 ::flixel::text::FlxText text3 = text2->next().StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 573)								text3->kill();
            							}
            						}
HXDLIN( 573)						int daLoop1 = 0;
HXDLIN( 573)						{
HXLINE( 573)							int _g2 = 0;
HXDLIN( 573)							::Array< ::Dynamic> _g3 = _gthis->anims;
HXDLIN( 573)							while((_g2 < _g3->length)){
HXLINE( 573)								 ::Dynamic anim2 = _g3->__get(_g2);
HXDLIN( 573)								_g2 = (_g2 + 1);
HXDLIN( 573)								 ::flixel::text::FlxText text4 = _gthis->animsTxtGroup->recycle(::hx::ClassOf< ::flixel::text::FlxText >(),null(),null(),null()).StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 573)								text4->set_x(( (Float)(10) ));
HXDLIN( 573)								text4->set_y(( (Float)((32 + (20 * daLoop1))) ));
HXDLIN( 573)								text4->set_fieldWidth(( (Float)(400) ));
HXDLIN( 573)								text4->set_fieldHeight(( (Float)(20) ));
HXDLIN( 573)								::String removeButton3 = ( (::String)((anim2->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic) + HX_(": ",a6,32,00,00))) );
HXDLIN( 573)								text4->set_text((removeButton3 + ::Std_obj::string( ::Dynamic(anim2->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic)))));
HXDLIN( 573)								text4->setFormat(null(),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_FAST_dyn(),-16777216,null());
HXDLIN( 573)								{
HXLINE( 573)									 ::flixel::math::FlxBasePoint this1 = text4->scrollFactor;
HXDLIN( 573)									this1->set_x(( (Float)(0) ));
HXDLIN( 573)									this1->set_y(( (Float)(0) ));
            								}
HXDLIN( 573)								text4->set_borderSize(( (Float)(1) ));
HXDLIN( 573)								_gthis->animsTxtGroup->add(text4).StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 573)								daLoop1 = (daLoop1 + 1);
            							}
            						}
HXDLIN( 573)						{
HXLINE( 573)							int daLoop2 = 0;
HXDLIN( 573)							{
HXLINE( 573)								 ::Dynamic filter2 = null();
HXDLIN( 573)								 ::flixel::group::FlxTypedGroupIterator text5 =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,_gthis->animsTxtGroup->members,filter2);
HXDLIN( 573)								while(text5->hasNext()){
HXLINE( 573)									 ::flixel::text::FlxText text6 = text5->next().StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 573)									text6->set_color(-1);
HXDLIN( 573)									if ((daLoop2 == _gthis->curAnim)) {
HXLINE( 573)										text6->set_color(-16711936);
            									}
HXDLIN( 573)									daLoop2 = (daLoop2 + 1);
            								}
            							}
            						}
HXDLIN( 573)						if (::hx::IsNotNull( _gthis->animationDropDown )) {
HXLINE( 573)							_gthis->reloadAnimationDropDown();
            						}
            					}
HXLINE( 574)					::haxe::Log_obj::trace((HX_("Removed animation: ",0a,26,5e,26) + _gthis->animationInputText->text),::hx::SourceInfo(HX_("source/states/editors/CharacterEditorState.hx",41,39,ad,0d),574,HX_("states.editors.CharacterEditorState",0f,02,8c,78),HX_("addAnimationsUI",c4,44,96,30)));
HXLINE( 575)					goto _hx_goto_36;
            				}
            			}
            			_hx_goto_36:;
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_492_addAnimationsUI)
HXDLIN( 492)		 ::states::editors::CharacterEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 493)		 ::flixel::addons::ui::FlxUI tab_group =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 494)		tab_group->name = HX_("Animations",0f,39,cd,79);
HXLINE( 497)		this->animationInputText =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,15,85,80,HX_("",00,00,00,00),8,null(),null(),null());
HXLINE( 498)		this->animationNameInputText =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,this->animationInputText->x,(this->animationInputText->y + 35),150,HX_("",00,00,00,00),8,null(),null(),null());
HXLINE( 499)		this->animationIndicesInputText =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,this->animationNameInputText->x,(this->animationNameInputText->y + 40),250,HX_("",00,00,00,00),8,null(),null(),null());
HXLINE( 500)		this->animationFramerate =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,(this->animationInputText->x + 170),this->animationInputText->y,1,24,0,240,0,null(),null(),null(),null(),null());
HXLINE( 501)		this->animationLoopCheckBox =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,(this->animationNameInputText->x + 170),(this->animationNameInputText->y - ( (Float)(1) )),null(),null(),HX_("Should it Loop?",b3,ec,08,ad),100,null(),null());
HXLINE( 503)		Float _hx_tmp = (this->animationInputText->y - ( (Float)(55) ));
HXDLIN( 503)		this->animationDropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,15,_hx_tmp,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(::Array_obj< ::String >::fromData( _hx_array_data_788c020f_50,1),true), ::Dynamic(new _hx_Closure_0(_gthis)),null(),null(),null(),null());
HXLINE( 515)		 ::flixel::ui::FlxButton addUpdateButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,70,(this->animationIndicesInputText->y + 60),HX_("Add/Update",b7,cf,f4,ee), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE( 554)		 ::flixel::ui::FlxButton removeButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,180,(this->animationIndicesInputText->y + 60),HX_("Remove",64,10,1d,39), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE( 578)		{
HXLINE( 578)			this->anims = this->character->animationsArray;
HXDLIN( 578)			if ((this->anims->length > 0)) {
HXLINE( 578)				this->character->playAnim(( (::String)(this->anims->__get(0)->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),true,null(),null());
            			}
HXDLIN( 578)			this->curAnim = 0;
HXDLIN( 578)			{
HXLINE( 578)				 ::Dynamic filter = null();
HXDLIN( 578)				 ::flixel::group::FlxTypedGroupIterator text =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->animsTxtGroup->members,filter);
HXDLIN( 578)				while(text->hasNext()){
HXLINE( 578)					 ::flixel::text::FlxText text1 = text->next().StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 578)					text1->kill();
            				}
            			}
HXDLIN( 578)			int daLoop = 0;
HXDLIN( 578)			{
HXLINE( 578)				int _g = 0;
HXDLIN( 578)				::Array< ::Dynamic> _g1 = this->anims;
HXDLIN( 578)				while((_g < _g1->length)){
HXLINE( 578)					 ::Dynamic anim = _g1->__get(_g);
HXDLIN( 578)					_g = (_g + 1);
HXDLIN( 578)					 ::flixel::text::FlxText text2 = this->animsTxtGroup->recycle(::hx::ClassOf< ::flixel::text::FlxText >(),null(),null(),null()).StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 578)					text2->set_x(( (Float)(10) ));
HXDLIN( 578)					text2->set_y(( (Float)((32 + (20 * daLoop))) ));
HXDLIN( 578)					text2->set_fieldWidth(( (Float)(400) ));
HXDLIN( 578)					text2->set_fieldHeight(( (Float)(20) ));
HXDLIN( 578)					::String _hx_tmp1 = ( (::String)((anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic) + HX_(": ",a6,32,00,00))) );
HXDLIN( 578)					text2->set_text((_hx_tmp1 + ::Std_obj::string( ::Dynamic(anim->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic)))));
HXDLIN( 578)					text2->setFormat(null(),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_FAST_dyn(),-16777216,null());
HXDLIN( 578)					{
HXLINE( 578)						 ::flixel::math::FlxBasePoint this1 = text2->scrollFactor;
HXDLIN( 578)						this1->set_x(( (Float)(0) ));
HXDLIN( 578)						this1->set_y(( (Float)(0) ));
            					}
HXDLIN( 578)					text2->set_borderSize(( (Float)(1) ));
HXDLIN( 578)					this->animsTxtGroup->add(text2).StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 578)					daLoop = (daLoop + 1);
            				}
            			}
HXDLIN( 578)			{
HXLINE( 578)				int daLoop1 = 0;
HXDLIN( 578)				{
HXLINE( 578)					 ::Dynamic filter1 = null();
HXDLIN( 578)					 ::flixel::group::FlxTypedGroupIterator text3 =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->animsTxtGroup->members,filter1);
HXDLIN( 578)					while(text3->hasNext()){
HXLINE( 578)						 ::flixel::text::FlxText text4 = text3->next().StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 578)						text4->set_color(-1);
HXDLIN( 578)						if ((daLoop1 == this->curAnim)) {
HXLINE( 578)							text4->set_color(-16711936);
            						}
HXDLIN( 578)						daLoop1 = (daLoop1 + 1);
            					}
            				}
            			}
HXDLIN( 578)			if (::hx::IsNotNull( this->animationDropDown )) {
HXLINE( 578)				this->reloadAnimationDropDown();
            			}
            		}
HXLINE( 579)		::String _hx_tmp2;
HXDLIN( 579)		if (::hx::IsNotNull( this->anims->__get(0) )) {
HXLINE( 579)			_hx_tmp2 = ( (::String)(this->anims->__get(0)->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 579)			_hx_tmp2 = HX_("",00,00,00,00);
            		}
HXDLIN( 579)		this->animationDropDown->set_selectedLabel(_hx_tmp2);
HXLINE( 581)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->animationDropDown->x,(this->animationDropDown->y - ( (Float)(18) )),0,HX_("Animations:",4b,b4,c4,19),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 582)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->animationInputText->x,(this->animationInputText->y - ( (Float)(18) )),0,HX_("Animation name:",53,2d,e4,9c),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 583)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->animationFramerate->x,(this->animationFramerate->y - ( (Float)(18) )),0,HX_("Framerate:",2d,fa,cd,2a),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 584)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->animationNameInputText->x,(this->animationNameInputText->y - ( (Float)(18) )),0,HX_("Animation Symbol Name/Tag:",38,f8,f7,f4),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 585)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->animationIndicesInputText->x,(this->animationIndicesInputText->y - ( (Float)(18) )),0,HX_("ADVANCED - Animation Indices:",60,cb,cb,a8),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 587)		tab_group->add(this->animationInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 588)		tab_group->add(this->animationNameInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 589)		tab_group->add(this->animationIndicesInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 590)		tab_group->add(this->animationFramerate).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 591)		tab_group->add(this->animationLoopCheckBox).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 592)		tab_group->add(addUpdateButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 593)		tab_group->add(removeButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 594)		tab_group->add(this->animationDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 595)		this->UI_characterbox->addGroup(tab_group);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,addAnimationsUI,(void))

void CharacterEditorState_obj::addCharacterUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::CharacterEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_622_addCharacterUI)
HXLINE( 623)			 ::objects::Character _this = _gthis->character;
HXDLIN( 623)			::String name = HX_("",00,00,00,00);
HXDLIN( 623)			bool reloadImage;
HXDLIN( 623)			if (!(_this->isAnimateAtlas)) {
HXLINE( 623)				reloadImage = ::hx::IsNull( _this->animation->_curAnim );
            			}
            			else {
HXLINE( 623)				reloadImage = ::hx::IsNull( _this->atlas->anim->get_curSymbol() );
            			}
HXDLIN( 623)			if (!(reloadImage)) {
HXLINE( 623)				if (!(_this->isAnimateAtlas)) {
HXLINE( 623)					name = _this->animation->_curAnim->name;
            				}
            				else {
HXLINE( 623)					name = _this->atlas->anim->lastPlayedAnim;
            				}
            			}
HXDLIN( 623)			::String lastAnim;
HXDLIN( 623)			if (::hx::IsNotNull( name )) {
HXLINE( 623)				lastAnim = name;
            			}
            			else {
HXLINE( 623)				lastAnim = HX_("",00,00,00,00);
            			}
HXLINE( 624)			_gthis->character->imageFile = _gthis->imageInputText->text;
HXLINE( 625)			_gthis->reloadCharacterImage();
HXLINE( 626)			 ::objects::Character _this1 = _gthis->character;
HXDLIN( 626)			bool reloadImage1;
HXDLIN( 626)			if (!(_this1->isAnimateAtlas)) {
HXLINE( 626)				reloadImage1 = ::hx::IsNull( _this1->animation->_curAnim );
            			}
            			else {
HXLINE( 626)				reloadImage1 = ::hx::IsNull( _this1->atlas->anim->get_curSymbol() );
            			}
HXDLIN( 626)			if (!(reloadImage1)) {
HXLINE( 627)				_gthis->character->playAnim(lastAnim,true,null(),null());
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::CharacterEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_632_addCharacterUI)
HXLINE( 633)			 ::flixel::FlxSprite sprite = _gthis->healthIcon;
HXDLIN( 633)			 ::haxe::ds::IntMap countByColor =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXDLIN( 633)			{
HXLINE( 633)				int _g = 0;
HXDLIN( 633)				int _g1 = sprite->frameWidth;
HXDLIN( 633)				while((_g < _g1)){
HXLINE( 633)					_g = (_g + 1);
HXDLIN( 633)					int col = (_g - 1);
HXDLIN( 633)					{
HXLINE( 633)						int _g2 = 0;
HXDLIN( 633)						int _g3 = sprite->frameHeight;
HXDLIN( 633)						while((_g2 < _g3)){
HXLINE( 633)							_g2 = (_g2 + 1);
HXDLIN( 633)							int row = (_g2 - 1);
HXDLIN( 633)							int colorOfThisPixel = sprite->get_pixels()->getPixel32(col,row);
HXDLIN( 633)							if ((colorOfThisPixel != 0)) {
HXLINE( 633)								if (countByColor->exists(colorOfThisPixel)) {
HXLINE( 633)									int v = (countByColor->get(colorOfThisPixel) + 1);
HXDLIN( 633)									countByColor->set(colorOfThisPixel,v);
            								}
            								else {
HXLINE( 633)									if (::hx::IsNotEq( countByColor->get(colorOfThisPixel),-13520687 )) {
HXLINE( 633)										countByColor->set(colorOfThisPixel,1);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 633)			int maxCount = 0;
HXDLIN( 633)			int maxKey = 0;
HXDLIN( 633)			countByColor->set(-16777216,0);
HXDLIN( 633)			{
HXLINE( 633)				 ::Dynamic key = countByColor->keys();
HXDLIN( 633)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 633)					int key1 = ( (int)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 633)					if (::hx::IsGreaterEq( countByColor->get(key1),maxCount )) {
HXLINE( 633)						maxCount = ( (int)(countByColor->get(key1)) );
HXDLIN( 633)						maxKey = key1;
            					}
            				}
            			}
HXDLIN( 633)			countByColor =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXDLIN( 633)			int coolColor = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(maxKey);
HXLINE( 634)			_gthis->character->healthColorArray[0] = ((coolColor >> 16) & 255);
HXLINE( 635)			_gthis->character->healthColorArray[1] = ((coolColor >> 8) & 255);
HXLINE( 636)			_gthis->character->healthColorArray[2] = (coolColor & 255);
HXLINE( 637)			{
HXLINE( 637)				_gthis->healthColorStepperR->set_value(( (Float)(_gthis->character->healthColorArray->__get(0)) ));
HXDLIN( 637)				_gthis->healthColorStepperG->set_value(( (Float)(_gthis->character->healthColorArray->__get(1)) ));
HXDLIN( 637)				_gthis->healthColorStepperB->set_value(( (Float)(_gthis->character->healthColorArray->__get(2)) ));
HXDLIN( 637)				 ::flixel::FlxSprite _gthis1 = _gthis->healthBar->leftBar;
HXDLIN( 637)				 ::flixel::FlxSprite _gthis2 = _gthis->healthBar->rightBar;
HXDLIN( 637)				int Red = _gthis->character->healthColorArray->__get(0);
HXDLIN( 637)				int Green = _gthis->character->healthColorArray->__get(1);
HXDLIN( 637)				int Blue = _gthis->character->healthColorArray->__get(2);
HXDLIN( 637)				int Alpha = 255;
HXDLIN( 637)				int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 637)				{
HXLINE( 637)					color = (color & -16711681);
HXDLIN( 637)					int color1;
HXDLIN( 637)					if ((Red > 255)) {
HXLINE( 637)						color1 = 255;
            					}
            					else {
HXLINE( 637)						if ((Red < 0)) {
HXLINE( 637)							color1 = 0;
            						}
            						else {
HXLINE( 637)							color1 = Red;
            						}
            					}
HXDLIN( 637)					color = (color | (color1 << 16));
            				}
HXDLIN( 637)				{
HXLINE( 637)					color = (color & -65281);
HXDLIN( 637)					int color2;
HXDLIN( 637)					if ((Green > 255)) {
HXLINE( 637)						color2 = 255;
            					}
            					else {
HXLINE( 637)						if ((Green < 0)) {
HXLINE( 637)							color2 = 0;
            						}
            						else {
HXLINE( 637)							color2 = Green;
            						}
            					}
HXDLIN( 637)					color = (color | (color2 << 8));
            				}
HXDLIN( 637)				{
HXLINE( 637)					color = (color & -256);
HXDLIN( 637)					int color3;
HXDLIN( 637)					if ((Blue > 255)) {
HXLINE( 637)						color3 = 255;
            					}
            					else {
HXLINE( 637)						if ((Blue < 0)) {
HXLINE( 637)							color3 = 0;
            						}
            						else {
HXLINE( 637)							color3 = Blue;
            						}
            					}
HXDLIN( 637)					color = (color | color3);
            				}
HXDLIN( 637)				{
HXLINE( 637)					color = (color & 16777215);
HXDLIN( 637)					int color4;
HXDLIN( 637)					if ((Alpha > 255)) {
HXLINE( 637)						color4 = 255;
            					}
            					else {
HXLINE( 637)						if ((Alpha < 0)) {
HXLINE( 637)							color4 = 0;
            						}
            						else {
HXLINE( 637)							color4 = Alpha;
            						}
            					}
HXDLIN( 637)					color = (color | (color4 << 24));
            				}
HXDLIN( 637)				_gthis1->set_color(_gthis2->set_color(color));
HXDLIN( 637)				_gthis->healthIcon->changeIcon(_gthis->character->healthIcon,false);
HXDLIN( 637)				::String decideIconColor = (HX_("Character: ",6f,a2,f1,a2) + _gthis->_char);
HXDLIN( 637)				::backend::DiscordClient_obj::changePresence(HX_("Character Editor",84,45,58,b1),decideIconColor,_gthis->healthIcon->getCharacter(),null(),null());
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::editors::CharacterEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_651_addCharacterUI)
HXLINE( 652)			_gthis->character->originalFlipX = !(_gthis->character->originalFlipX);
HXLINE( 653)			_gthis->character->set_flipX((_gthis->character->originalFlipX != _gthis->character->isPlayer));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::states::editors::CharacterEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_658_addCharacterUI)
HXLINE( 659)			_gthis->character->set_antialiasing(false);
HXLINE( 660)			bool _hx_tmp;
HXDLIN( 660)			if (!(_gthis->noAntialiasingCheckBox->checked)) {
HXLINE( 660)				_hx_tmp = ::backend::ClientPrefs_obj::data->antialiasing;
            			}
            			else {
HXLINE( 660)				_hx_tmp = false;
            			}
HXDLIN( 660)			if (_hx_tmp) {
HXLINE( 661)				_gthis->character->set_antialiasing(true);
            			}
HXLINE( 663)			_gthis->character->noAntialiasing = _gthis->noAntialiasingCheckBox->checked;
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::states::editors::CharacterEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_673_addCharacterUI)
HXLINE( 673)			_gthis->saveCharacter();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_616_addCharacterUI)
HXDLIN( 616)		 ::states::editors::CharacterEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 617)		 ::flixel::addons::ui::FlxUI tab_group =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 618)		tab_group->name = HX_("Character",89,bb,a4,e3);
HXLINE( 620)		this->imageInputText =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,15,30,200,this->character->imageFile,8,null(),null(),null());
HXLINE( 621)		 ::flixel::ui::FlxButton reloadImage =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(this->imageInputText->x + 210),(this->imageInputText->y - ( (Float)(3) )),HX_("Reload Image",54,43,aa,83), ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE( 631)		 ::flixel::ui::FlxButton decideIconColor =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadImage->x,(reloadImage->y + 30),HX_("Get Icon Color",e6,70,34,26), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE( 640)		Float _hx_tmp = (this->imageInputText->y + 35);
HXDLIN( 640)		this->healthIconInputText =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,15,_hx_tmp,75,this->healthIcon->getCharacter(),8,null(),null(),null());
HXLINE( 642)		::String _hx_tmp1;
HXDLIN( 642)		if (::hx::IsNotNull( this->character->vocalsFile )) {
HXLINE( 642)			_hx_tmp1 = this->character->vocalsFile;
            		}
            		else {
HXLINE( 642)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXDLIN( 642)		this->vocalsInputText =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,15,(this->healthIconInputText->y + 35),75,_hx_tmp1,8,null(),null(),null());
HXLINE( 644)		this->singDurationStepper =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,15,(this->vocalsInputText->y + 45),((Float)0.1),4,0,999,1,null(),null(),null(),null(),null());
HXLINE( 646)		this->scaleStepper =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,15,(this->singDurationStepper->y + 40),((Float)0.1),1,((Float)0.05),10,1,null(),null(),null(),null(),null());
HXLINE( 648)		this->flipXCheckBox =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,(this->singDurationStepper->x + 80),this->singDurationStepper->y,null(),null(),HX_("Flip X",45,68,fe,71),50,null(),null());
HXLINE( 649)		this->flipXCheckBox->set_checked(this->character->flipX);
HXLINE( 650)		if (this->character->isPlayer) {
HXLINE( 650)			this->flipXCheckBox->set_checked(!(this->flipXCheckBox->checked));
            		}
HXLINE( 651)		this->flipXCheckBox->callback =  ::Dynamic(new _hx_Closure_2(_gthis));
HXLINE( 656)		this->noAntialiasingCheckBox =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,this->flipXCheckBox->x,(this->flipXCheckBox->y + 40),null(),null(),HX_("No Antialiasing",33,e6,a6,96),80,null(),null());
HXLINE( 657)		this->noAntialiasingCheckBox->set_checked(this->character->noAntialiasing);
HXLINE( 658)		this->noAntialiasingCheckBox->callback =  ::Dynamic(new _hx_Closure_3(_gthis));
HXLINE( 666)		this->positionXStepper =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,(this->flipXCheckBox->x + 110),this->flipXCheckBox->y,10,this->character->positionArray->__get(0),-9000,9000,0,null(),null(),null(),null(),null());
HXLINE( 667)		this->positionYStepper =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,(this->positionXStepper->x + 60),this->positionXStepper->y,10,this->character->positionArray->__get(1),-9000,9000,0,null(),null(),null(),null(),null());
HXLINE( 669)		this->positionCameraXStepper =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,this->positionXStepper->x,(this->positionXStepper->y + 40),10,this->character->cameraPosition->__get(0),-9000,9000,0,null(),null(),null(),null(),null());
HXLINE( 670)		this->positionCameraYStepper =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,this->positionYStepper->x,(this->positionYStepper->y + 40),10,this->character->cameraPosition->__get(1),-9000,9000,0,null(),null(),null(),null(),null());
HXLINE( 672)		 ::flixel::ui::FlxButton saveCharacterButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadImage->x,(this->noAntialiasingCheckBox->y + 40),HX_("Save Character",06,25,12,9f), ::Dynamic(new _hx_Closure_4(_gthis)));
HXLINE( 676)		this->healthColorStepperR =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,this->singDurationStepper->x,saveCharacterButton->y,20,this->character->healthColorArray->__get(0),0,255,0,null(),null(),null(),null(),null());
HXLINE( 677)		this->healthColorStepperG =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,(this->singDurationStepper->x + 65),saveCharacterButton->y,20,this->character->healthColorArray->__get(1),0,255,0,null(),null(),null(),null(),null());
HXLINE( 678)		this->healthColorStepperB =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,(this->singDurationStepper->x + 130),saveCharacterButton->y,20,this->character->healthColorArray->__get(2),0,255,0,null(),null(),null(),null(),null());
HXLINE( 680)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,15,(this->imageInputText->y - ( (Float)(18) )),0,HX_("Image file name:",b0,6b,31,2a),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 681)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,15,(this->healthIconInputText->y - ( (Float)(18) )),0,HX_("Health icon name:",8c,30,c4,ea),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 682)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,15,(this->vocalsInputText->y - ( (Float)(18) )),0,HX_("Vocals File Postfix:",27,4c,e5,30),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 683)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,15,(this->singDurationStepper->y - ( (Float)(18) )),0,HX_("Sing Animation length:",67,31,1f,74),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 684)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,15,(this->scaleStepper->y - ( (Float)(18) )),0,HX_("Scale:",90,5e,ba,70),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 685)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->positionXStepper->x,(this->positionXStepper->y - ( (Float)(18) )),0,HX_("Character X/Y:",4f,22,5b,94),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 686)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->positionCameraXStepper->x,(this->positionCameraXStepper->y - ( (Float)(18) )),0,HX_("Camera X/Y:",93,69,6c,ec),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 687)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->healthColorStepperR->x,(this->healthColorStepperR->y - ( (Float)(18) )),0,HX_("Health bar R/G/B:",6e,07,20,a9),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 688)		tab_group->add(this->imageInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 689)		tab_group->add(reloadImage).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 690)		tab_group->add(decideIconColor).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 691)		tab_group->add(this->healthIconInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 692)		tab_group->add(this->vocalsInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 693)		tab_group->add(this->singDurationStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 694)		tab_group->add(this->scaleStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 695)		tab_group->add(this->flipXCheckBox).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 696)		tab_group->add(this->noAntialiasingCheckBox).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 697)		tab_group->add(this->positionXStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 698)		tab_group->add(this->positionYStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 699)		tab_group->add(this->positionCameraXStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 700)		tab_group->add(this->positionCameraYStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 701)		tab_group->add(this->healthColorStepperR).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 702)		tab_group->add(this->healthColorStepperG).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 703)		tab_group->add(this->healthColorStepperB).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 704)		tab_group->add(saveCharacterButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 705)		this->UI_characterbox->addGroup(tab_group);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,addCharacterUI,(void))

void CharacterEditorState_obj::getEvent(::String id, ::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_8fcf73527616c70a_708_getEvent)
HXLINE( 709)		bool _hx_tmp;
HXDLIN( 709)		if ((id != HX_("change_input_text",f1,11,47,68))) {
HXLINE( 709)			_hx_tmp = (id != HX_("change_numeric_stepper",50,0a,cc,bb));
            		}
            		else {
HXLINE( 709)			_hx_tmp = false;
            		}
HXDLIN( 709)		if (_hx_tmp) {
HXLINE( 709)			return;
            		}
HXLINE( 711)		if (::Std_obj::isOfType(sender,::hx::ClassOf< ::flixel::addons::ui::FlxUIInputText >())) {
HXLINE( 713)			if (::hx::IsInstanceEq( sender,this->healthIconInputText )) {
HXLINE( 714)				::String lastIcon = this->healthIcon->getCharacter();
HXLINE( 715)				this->healthIcon->changeIcon(this->healthIconInputText->text,false);
HXLINE( 716)				this->character->healthIcon = this->healthIconInputText->text;
HXLINE( 717)				if ((lastIcon != this->healthIcon->getCharacter())) {
HXLINE( 717)					::String _hx_tmp1 = (HX_("Character: ",6f,a2,f1,a2) + this->_char);
HXDLIN( 717)					::backend::DiscordClient_obj::changePresence(HX_("Character Editor",84,45,58,b1),_hx_tmp1,this->healthIcon->getCharacter(),null(),null());
            				}
            			}
            			else {
HXLINE( 719)				if (::hx::IsInstanceEq( sender,this->vocalsInputText )) {
HXLINE( 720)					this->character->vocalsFile = this->vocalsInputText->text;
            				}
            				else {
HXLINE( 721)					if (::hx::IsInstanceEq( sender,this->imageInputText )) {
HXLINE( 722)						this->character->imageFile = this->imageInputText->text;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 724)			if (::Std_obj::isOfType(sender,::hx::ClassOf< ::flixel::addons::ui::FlxUINumericStepper >())) {
HXLINE( 726)				if (::hx::IsInstanceEq( sender,this->scaleStepper )) {
HXLINE( 728)					this->reloadCharacterImage();
HXLINE( 729)					this->character->jsonScale = ( (Float)(sender->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXLINE( 730)					{
HXLINE( 730)						 ::flixel::math::FlxBasePoint this1 = this->character->scale;
HXDLIN( 730)						Float y = this->character->jsonScale;
HXDLIN( 730)						this1->set_x(this->character->jsonScale);
HXDLIN( 730)						this1->set_y(y);
            					}
HXLINE( 731)					this->character->updateHitbox();
HXLINE( 732)					{
HXLINE( 732)						 ::Dynamic snap = false;
HXDLIN( 732)						if (::hx::IsNull( snap )) {
HXLINE( 732)							snap = true;
            						}
HXDLIN( 732)						Float offX = ( (Float)(0) );
HXDLIN( 732)						Float offY = ( (Float)(0) );
HXDLIN( 732)						if (!(this->character->isPlayer)) {
HXLINE( 732)							Float offX1 = (this->character->getMidpoint(null())->x + 150);
HXDLIN( 732)							offX = (offX1 + this->character->cameraPosition->__get(0));
HXDLIN( 732)							Float offY1 = (this->character->getMidpoint(null())->y - ( (Float)(100) ));
HXDLIN( 732)							offY = (offY1 + this->character->cameraPosition->__get(1));
            						}
            						else {
HXLINE( 732)							Float offX2 = (this->character->getMidpoint(null())->x - ( (Float)(100) ));
HXDLIN( 732)							offX = (offX2 - this->character->cameraPosition->__get(0));
HXDLIN( 732)							Float offY2 = (this->character->getMidpoint(null())->y - ( (Float)(100) ));
HXDLIN( 732)							offY = (offY2 + this->character->cameraPosition->__get(1));
            						}
HXDLIN( 732)						this->cameraFollowPointer->setPosition(offX,offY);
HXDLIN( 732)						if (( (bool)(snap) )) {
HXLINE( 732)							{
HXLINE( 732)								 ::flixel::math::FlxBasePoint this2 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN( 732)								Float x = this->cameraFollowPointer->getMidpoint(null())->x;
HXDLIN( 732)								this2->set_x((x - (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            							}
HXDLIN( 732)							{
HXLINE( 732)								 ::flixel::math::FlxBasePoint this3 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN( 732)								Float y1 = this->cameraFollowPointer->getMidpoint(null())->y;
HXDLIN( 732)								this3->set_y((y1 - (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) ))));
            							}
            						}
            					}
            				}
            				else {
HXLINE( 734)					if (::hx::IsInstanceEq( sender,this->positionXStepper )) {
HXLINE( 736)						this->character->positionArray[0] = this->positionXStepper->value;
HXLINE( 737)						{
HXLINE( 737)							bool _hx_tmp2;
HXDLIN( 737)							bool _hx_tmp3;
HXDLIN( 737)							if (::hx::IsNotNull( this->character )) {
HXLINE( 737)								_hx_tmp3 = !(this->character->isPlayer);
            							}
            							else {
HXLINE( 737)								_hx_tmp3 = false;
            							}
HXDLIN( 737)							if (!(_hx_tmp3)) {
HXLINE( 737)								if (::hx::IsNull( this->character )) {
HXLINE( 737)									::String name = this->_char;
HXDLIN( 737)									bool _hx_tmp4;
HXDLIN( 737)									bool _hx_tmp5;
HXDLIN( 737)									bool _hx_tmp6;
HXDLIN( 737)									bool _hx_tmp7;
HXDLIN( 737)									bool _hx_tmp8;
HXDLIN( 737)									bool _hx_tmp9;
HXDLIN( 737)									if ((name != HX_("bf",c4,55,00,00))) {
HXLINE( 737)										_hx_tmp9 = !(::StringTools_obj::startsWith(name,HX_("bf-",e9,b5,4a,00)));
            									}
            									else {
HXLINE( 737)										_hx_tmp9 = false;
            									}
HXDLIN( 737)									if (_hx_tmp9) {
HXLINE( 737)										_hx_tmp8 = !(::StringTools_obj::endsWith(name,HX_("-player",4e,cb,fe,86)));
            									}
            									else {
HXLINE( 737)										_hx_tmp8 = false;
            									}
HXDLIN( 737)									if (_hx_tmp8) {
HXLINE( 737)										_hx_tmp7 = !(::StringTools_obj::endsWith(name,HX_("-dead",51,69,6e,2b)));
            									}
            									else {
HXLINE( 737)										_hx_tmp7 = false;
            									}
HXDLIN( 737)									if (!(_hx_tmp7)) {
HXLINE( 737)										_hx_tmp6 = ::StringTools_obj::endsWith(name,HX_("-opponent",ca,2e,28,0d));
            									}
            									else {
HXLINE( 737)										_hx_tmp6 = true;
            									}
HXDLIN( 737)									if (!(_hx_tmp6)) {
HXLINE( 737)										_hx_tmp5 = ::StringTools_obj::startsWith(name,HX_("gf-",2e,81,4e,00));
            									}
            									else {
HXLINE( 737)										_hx_tmp5 = true;
            									}
HXDLIN( 737)									if (!(_hx_tmp5)) {
HXLINE( 737)										_hx_tmp4 = ::StringTools_obj::endsWith(name,HX_("-gf",8c,7f,22,00));
            									}
            									else {
HXLINE( 737)										_hx_tmp4 = true;
            									}
HXDLIN( 737)									if (!(_hx_tmp4)) {
HXLINE( 737)										_hx_tmp2 = (name == HX_("gf",1f,5a,00,00));
            									}
            									else {
HXLINE( 737)										_hx_tmp2 = true;
            									}
            								}
            								else {
HXLINE( 737)									_hx_tmp2 = false;
            								}
            							}
            							else {
HXLINE( 737)								_hx_tmp2 = true;
            							}
HXDLIN( 737)							if (_hx_tmp2) {
HXLINE( 737)								this->character->setPosition(this->dadPosition->x,this->dadPosition->y);
            							}
            							else {
HXLINE( 737)								this->character->setPosition(this->bfPosition->x,this->bfPosition->y);
            							}
HXDLIN( 737)							 ::objects::Character fh = this->character;
HXDLIN( 737)							fh->set_x((fh->x + this->character->positionArray->__get(0)));
HXDLIN( 737)							 ::objects::Character fh1 = this->character;
HXDLIN( 737)							fh1->set_y((fh1->y + this->character->positionArray->__get(1)));
            						}
            					}
            					else {
HXLINE( 739)						if (::hx::IsInstanceEq( sender,this->positionYStepper )) {
HXLINE( 741)							this->character->positionArray[1] = this->positionYStepper->value;
HXLINE( 742)							{
HXLINE( 742)								bool _hx_tmp10;
HXDLIN( 742)								bool _hx_tmp11;
HXDLIN( 742)								if (::hx::IsNotNull( this->character )) {
HXLINE( 742)									_hx_tmp11 = !(this->character->isPlayer);
            								}
            								else {
HXLINE( 742)									_hx_tmp11 = false;
            								}
HXDLIN( 742)								if (!(_hx_tmp11)) {
HXLINE( 742)									if (::hx::IsNull( this->character )) {
HXLINE( 742)										::String name1 = this->_char;
HXDLIN( 742)										bool _hx_tmp12;
HXDLIN( 742)										bool _hx_tmp13;
HXDLIN( 742)										bool _hx_tmp14;
HXDLIN( 742)										bool _hx_tmp15;
HXDLIN( 742)										bool _hx_tmp16;
HXDLIN( 742)										bool _hx_tmp17;
HXDLIN( 742)										if ((name1 != HX_("bf",c4,55,00,00))) {
HXLINE( 742)											_hx_tmp17 = !(::StringTools_obj::startsWith(name1,HX_("bf-",e9,b5,4a,00)));
            										}
            										else {
HXLINE( 742)											_hx_tmp17 = false;
            										}
HXDLIN( 742)										if (_hx_tmp17) {
HXLINE( 742)											_hx_tmp16 = !(::StringTools_obj::endsWith(name1,HX_("-player",4e,cb,fe,86)));
            										}
            										else {
HXLINE( 742)											_hx_tmp16 = false;
            										}
HXDLIN( 742)										if (_hx_tmp16) {
HXLINE( 742)											_hx_tmp15 = !(::StringTools_obj::endsWith(name1,HX_("-dead",51,69,6e,2b)));
            										}
            										else {
HXLINE( 742)											_hx_tmp15 = false;
            										}
HXDLIN( 742)										if (!(_hx_tmp15)) {
HXLINE( 742)											_hx_tmp14 = ::StringTools_obj::endsWith(name1,HX_("-opponent",ca,2e,28,0d));
            										}
            										else {
HXLINE( 742)											_hx_tmp14 = true;
            										}
HXDLIN( 742)										if (!(_hx_tmp14)) {
HXLINE( 742)											_hx_tmp13 = ::StringTools_obj::startsWith(name1,HX_("gf-",2e,81,4e,00));
            										}
            										else {
HXLINE( 742)											_hx_tmp13 = true;
            										}
HXDLIN( 742)										if (!(_hx_tmp13)) {
HXLINE( 742)											_hx_tmp12 = ::StringTools_obj::endsWith(name1,HX_("-gf",8c,7f,22,00));
            										}
            										else {
HXLINE( 742)											_hx_tmp12 = true;
            										}
HXDLIN( 742)										if (!(_hx_tmp12)) {
HXLINE( 742)											_hx_tmp10 = (name1 == HX_("gf",1f,5a,00,00));
            										}
            										else {
HXLINE( 742)											_hx_tmp10 = true;
            										}
            									}
            									else {
HXLINE( 742)										_hx_tmp10 = false;
            									}
            								}
            								else {
HXLINE( 742)									_hx_tmp10 = true;
            								}
HXDLIN( 742)								if (_hx_tmp10) {
HXLINE( 742)									this->character->setPosition(this->dadPosition->x,this->dadPosition->y);
            								}
            								else {
HXLINE( 742)									this->character->setPosition(this->bfPosition->x,this->bfPosition->y);
            								}
HXDLIN( 742)								 ::objects::Character fh2 = this->character;
HXDLIN( 742)								fh2->set_x((fh2->x + this->character->positionArray->__get(0)));
HXDLIN( 742)								 ::objects::Character fh3 = this->character;
HXDLIN( 742)								fh3->set_y((fh3->y + this->character->positionArray->__get(1)));
            							}
            						}
            						else {
HXLINE( 744)							if (::hx::IsInstanceEq( sender,this->singDurationStepper )) {
HXLINE( 746)								this->character->singDuration = this->singDurationStepper->value;
            							}
            							else {
HXLINE( 748)								if (::hx::IsInstanceEq( sender,this->positionCameraXStepper )) {
HXLINE( 750)									this->character->cameraPosition[0] = this->positionCameraXStepper->value;
HXLINE( 751)									{
HXLINE( 751)										Float offX3 = ( (Float)(0) );
HXDLIN( 751)										Float offY3 = ( (Float)(0) );
HXDLIN( 751)										if (!(this->character->isPlayer)) {
HXLINE( 751)											Float offX4 = (this->character->getMidpoint(null())->x + 150);
HXDLIN( 751)											offX3 = (offX4 + this->character->cameraPosition->__get(0));
HXDLIN( 751)											Float offY4 = (this->character->getMidpoint(null())->y - ( (Float)(100) ));
HXDLIN( 751)											offY3 = (offY4 + this->character->cameraPosition->__get(1));
            										}
            										else {
HXLINE( 751)											Float offX5 = (this->character->getMidpoint(null())->x - ( (Float)(100) ));
HXDLIN( 751)											offX3 = (offX5 - this->character->cameraPosition->__get(0));
HXDLIN( 751)											Float offY5 = (this->character->getMidpoint(null())->y - ( (Float)(100) ));
HXDLIN( 751)											offY3 = (offY5 + this->character->cameraPosition->__get(1));
            										}
HXDLIN( 751)										this->cameraFollowPointer->setPosition(offX3,offY3);
HXDLIN( 751)										{
HXLINE( 751)											{
HXLINE( 751)												 ::flixel::math::FlxBasePoint this4 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN( 751)												Float x1 = this->cameraFollowPointer->getMidpoint(null())->x;
HXDLIN( 751)												this4->set_x((x1 - (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            											}
HXDLIN( 751)											{
HXLINE( 751)												 ::flixel::math::FlxBasePoint this5 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN( 751)												Float y2 = this->cameraFollowPointer->getMidpoint(null())->y;
HXDLIN( 751)												this5->set_y((y2 - (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) ))));
            											}
            										}
            									}
            								}
            								else {
HXLINE( 753)									if (::hx::IsInstanceEq( sender,this->positionCameraYStepper )) {
HXLINE( 755)										this->character->cameraPosition[1] = this->positionCameraYStepper->value;
HXLINE( 756)										{
HXLINE( 756)											Float offX6 = ( (Float)(0) );
HXDLIN( 756)											Float offY6 = ( (Float)(0) );
HXDLIN( 756)											if (!(this->character->isPlayer)) {
HXLINE( 756)												Float offX7 = (this->character->getMidpoint(null())->x + 150);
HXDLIN( 756)												offX6 = (offX7 + this->character->cameraPosition->__get(0));
HXDLIN( 756)												Float offY7 = (this->character->getMidpoint(null())->y - ( (Float)(100) ));
HXDLIN( 756)												offY6 = (offY7 + this->character->cameraPosition->__get(1));
            											}
            											else {
HXLINE( 756)												Float offX8 = (this->character->getMidpoint(null())->x - ( (Float)(100) ));
HXDLIN( 756)												offX6 = (offX8 - this->character->cameraPosition->__get(0));
HXDLIN( 756)												Float offY8 = (this->character->getMidpoint(null())->y - ( (Float)(100) ));
HXDLIN( 756)												offY6 = (offY8 + this->character->cameraPosition->__get(1));
            											}
HXDLIN( 756)											this->cameraFollowPointer->setPosition(offX6,offY6);
HXDLIN( 756)											{
HXLINE( 756)												{
HXLINE( 756)													 ::flixel::math::FlxBasePoint this6 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN( 756)													Float x2 = this->cameraFollowPointer->getMidpoint(null())->x;
HXDLIN( 756)													this6->set_x((x2 - (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            												}
HXDLIN( 756)												{
HXLINE( 756)													 ::flixel::math::FlxBasePoint this7 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN( 756)													Float y3 = this->cameraFollowPointer->getMidpoint(null())->y;
HXDLIN( 756)													this7->set_y((y3 - (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) ))));
            												}
            											}
            										}
            									}
            									else {
HXLINE( 758)										if (::hx::IsInstanceEq( sender,this->healthColorStepperR )) {
HXLINE( 760)											this->character->healthColorArray[0] = ::Math_obj::round(this->healthColorStepperR->value);
HXLINE( 761)											{
HXLINE( 761)												this->healthColorStepperR->set_value(( (Float)(this->character->healthColorArray->__get(0)) ));
HXDLIN( 761)												this->healthColorStepperG->set_value(( (Float)(this->character->healthColorArray->__get(1)) ));
HXDLIN( 761)												this->healthColorStepperB->set_value(( (Float)(this->character->healthColorArray->__get(2)) ));
HXDLIN( 761)												 ::flixel::FlxSprite _hx_tmp18 = this->healthBar->leftBar;
HXDLIN( 761)												 ::flixel::FlxSprite _hx_tmp19 = this->healthBar->rightBar;
HXDLIN( 761)												int Red = this->character->healthColorArray->__get(0);
HXDLIN( 761)												int Green = this->character->healthColorArray->__get(1);
HXDLIN( 761)												int Blue = this->character->healthColorArray->__get(2);
HXDLIN( 761)												int Alpha = 255;
HXDLIN( 761)												int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 761)												{
HXLINE( 761)													color = (color & -16711681);
HXDLIN( 761)													int color1;
HXDLIN( 761)													if ((Red > 255)) {
HXLINE( 761)														color1 = 255;
            													}
            													else {
HXLINE( 761)														if ((Red < 0)) {
HXLINE( 761)															color1 = 0;
            														}
            														else {
HXLINE( 761)															color1 = Red;
            														}
            													}
HXDLIN( 761)													color = (color | (color1 << 16));
            												}
HXDLIN( 761)												{
HXLINE( 761)													color = (color & -65281);
HXDLIN( 761)													int color2;
HXDLIN( 761)													if ((Green > 255)) {
HXLINE( 761)														color2 = 255;
            													}
            													else {
HXLINE( 761)														if ((Green < 0)) {
HXLINE( 761)															color2 = 0;
            														}
            														else {
HXLINE( 761)															color2 = Green;
            														}
            													}
HXDLIN( 761)													color = (color | (color2 << 8));
            												}
HXDLIN( 761)												{
HXLINE( 761)													color = (color & -256);
HXDLIN( 761)													int color3;
HXDLIN( 761)													if ((Blue > 255)) {
HXLINE( 761)														color3 = 255;
            													}
            													else {
HXLINE( 761)														if ((Blue < 0)) {
HXLINE( 761)															color3 = 0;
            														}
            														else {
HXLINE( 761)															color3 = Blue;
            														}
            													}
HXDLIN( 761)													color = (color | color3);
            												}
HXDLIN( 761)												{
HXLINE( 761)													color = (color & 16777215);
HXDLIN( 761)													int color4;
HXDLIN( 761)													if ((Alpha > 255)) {
HXLINE( 761)														color4 = 255;
            													}
            													else {
HXLINE( 761)														if ((Alpha < 0)) {
HXLINE( 761)															color4 = 0;
            														}
            														else {
HXLINE( 761)															color4 = Alpha;
            														}
            													}
HXDLIN( 761)													color = (color | (color4 << 24));
            												}
HXDLIN( 761)												_hx_tmp18->set_color(_hx_tmp19->set_color(color));
HXDLIN( 761)												this->healthIcon->changeIcon(this->character->healthIcon,false);
HXDLIN( 761)												::String _hx_tmp20 = (HX_("Character: ",6f,a2,f1,a2) + this->_char);
HXDLIN( 761)												::backend::DiscordClient_obj::changePresence(HX_("Character Editor",84,45,58,b1),_hx_tmp20,this->healthIcon->getCharacter(),null(),null());
            											}
            										}
            										else {
HXLINE( 763)											if (::hx::IsInstanceEq( sender,this->healthColorStepperG )) {
HXLINE( 765)												this->character->healthColorArray[1] = ::Math_obj::round(this->healthColorStepperG->value);
HXLINE( 766)												{
HXLINE( 766)													this->healthColorStepperR->set_value(( (Float)(this->character->healthColorArray->__get(0)) ));
HXDLIN( 766)													this->healthColorStepperG->set_value(( (Float)(this->character->healthColorArray->__get(1)) ));
HXDLIN( 766)													this->healthColorStepperB->set_value(( (Float)(this->character->healthColorArray->__get(2)) ));
HXDLIN( 766)													 ::flixel::FlxSprite _hx_tmp21 = this->healthBar->leftBar;
HXDLIN( 766)													 ::flixel::FlxSprite _hx_tmp22 = this->healthBar->rightBar;
HXDLIN( 766)													int Red1 = this->character->healthColorArray->__get(0);
HXDLIN( 766)													int Green1 = this->character->healthColorArray->__get(1);
HXDLIN( 766)													int Blue1 = this->character->healthColorArray->__get(2);
HXDLIN( 766)													int Alpha1 = 255;
HXDLIN( 766)													int color5 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 766)													{
HXLINE( 766)														color5 = (color5 & -16711681);
HXDLIN( 766)														int color6;
HXDLIN( 766)														if ((Red1 > 255)) {
HXLINE( 766)															color6 = 255;
            														}
            														else {
HXLINE( 766)															if ((Red1 < 0)) {
HXLINE( 766)																color6 = 0;
            															}
            															else {
HXLINE( 766)																color6 = Red1;
            															}
            														}
HXDLIN( 766)														color5 = (color5 | (color6 << 16));
            													}
HXDLIN( 766)													{
HXLINE( 766)														color5 = (color5 & -65281);
HXDLIN( 766)														int color7;
HXDLIN( 766)														if ((Green1 > 255)) {
HXLINE( 766)															color7 = 255;
            														}
            														else {
HXLINE( 766)															if ((Green1 < 0)) {
HXLINE( 766)																color7 = 0;
            															}
            															else {
HXLINE( 766)																color7 = Green1;
            															}
            														}
HXDLIN( 766)														color5 = (color5 | (color7 << 8));
            													}
HXDLIN( 766)													{
HXLINE( 766)														color5 = (color5 & -256);
HXDLIN( 766)														int color8;
HXDLIN( 766)														if ((Blue1 > 255)) {
HXLINE( 766)															color8 = 255;
            														}
            														else {
HXLINE( 766)															if ((Blue1 < 0)) {
HXLINE( 766)																color8 = 0;
            															}
            															else {
HXLINE( 766)																color8 = Blue1;
            															}
            														}
HXDLIN( 766)														color5 = (color5 | color8);
            													}
HXDLIN( 766)													{
HXLINE( 766)														color5 = (color5 & 16777215);
HXDLIN( 766)														int color9;
HXDLIN( 766)														if ((Alpha1 > 255)) {
HXLINE( 766)															color9 = 255;
            														}
            														else {
HXLINE( 766)															if ((Alpha1 < 0)) {
HXLINE( 766)																color9 = 0;
            															}
            															else {
HXLINE( 766)																color9 = Alpha1;
            															}
            														}
HXDLIN( 766)														color5 = (color5 | (color9 << 24));
            													}
HXDLIN( 766)													_hx_tmp21->set_color(_hx_tmp22->set_color(color5));
HXDLIN( 766)													this->healthIcon->changeIcon(this->character->healthIcon,false);
HXDLIN( 766)													::String _hx_tmp23 = (HX_("Character: ",6f,a2,f1,a2) + this->_char);
HXDLIN( 766)													::backend::DiscordClient_obj::changePresence(HX_("Character Editor",84,45,58,b1),_hx_tmp23,this->healthIcon->getCharacter(),null(),null());
            												}
            											}
            											else {
HXLINE( 768)												if (::hx::IsInstanceEq( sender,this->healthColorStepperB )) {
HXLINE( 770)													this->character->healthColorArray[2] = ::Math_obj::round(this->healthColorStepperB->value);
HXLINE( 771)													{
HXLINE( 771)														this->healthColorStepperR->set_value(( (Float)(this->character->healthColorArray->__get(0)) ));
HXDLIN( 771)														this->healthColorStepperG->set_value(( (Float)(this->character->healthColorArray->__get(1)) ));
HXDLIN( 771)														this->healthColorStepperB->set_value(( (Float)(this->character->healthColorArray->__get(2)) ));
HXDLIN( 771)														 ::flixel::FlxSprite _hx_tmp24 = this->healthBar->leftBar;
HXDLIN( 771)														 ::flixel::FlxSprite _hx_tmp25 = this->healthBar->rightBar;
HXDLIN( 771)														int Red2 = this->character->healthColorArray->__get(0);
HXDLIN( 771)														int Green2 = this->character->healthColorArray->__get(1);
HXDLIN( 771)														int Blue2 = this->character->healthColorArray->__get(2);
HXDLIN( 771)														int Alpha2 = 255;
HXDLIN( 771)														int color10 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 771)														{
HXLINE( 771)															color10 = (color10 & -16711681);
HXDLIN( 771)															int color11;
HXDLIN( 771)															if ((Red2 > 255)) {
HXLINE( 771)																color11 = 255;
            															}
            															else {
HXLINE( 771)																if ((Red2 < 0)) {
HXLINE( 771)																	color11 = 0;
            																}
            																else {
HXLINE( 771)																	color11 = Red2;
            																}
            															}
HXDLIN( 771)															color10 = (color10 | (color11 << 16));
            														}
HXDLIN( 771)														{
HXLINE( 771)															color10 = (color10 & -65281);
HXDLIN( 771)															int color12;
HXDLIN( 771)															if ((Green2 > 255)) {
HXLINE( 771)																color12 = 255;
            															}
            															else {
HXLINE( 771)																if ((Green2 < 0)) {
HXLINE( 771)																	color12 = 0;
            																}
            																else {
HXLINE( 771)																	color12 = Green2;
            																}
            															}
HXDLIN( 771)															color10 = (color10 | (color12 << 8));
            														}
HXDLIN( 771)														{
HXLINE( 771)															color10 = (color10 & -256);
HXDLIN( 771)															int color13;
HXDLIN( 771)															if ((Blue2 > 255)) {
HXLINE( 771)																color13 = 255;
            															}
            															else {
HXLINE( 771)																if ((Blue2 < 0)) {
HXLINE( 771)																	color13 = 0;
            																}
            																else {
HXLINE( 771)																	color13 = Blue2;
            																}
            															}
HXDLIN( 771)															color10 = (color10 | color13);
            														}
HXDLIN( 771)														{
HXLINE( 771)															color10 = (color10 & 16777215);
HXDLIN( 771)															int color14;
HXDLIN( 771)															if ((Alpha2 > 255)) {
HXLINE( 771)																color14 = 255;
            															}
            															else {
HXLINE( 771)																if ((Alpha2 < 0)) {
HXLINE( 771)																	color14 = 0;
            																}
            																else {
HXLINE( 771)																	color14 = Alpha2;
            																}
            															}
HXDLIN( 771)															color10 = (color10 | (color14 << 24));
            														}
HXDLIN( 771)														_hx_tmp24->set_color(_hx_tmp25->set_color(color10));
HXDLIN( 771)														this->healthIcon->changeIcon(this->character->healthIcon,false);
HXDLIN( 771)														::String _hx_tmp26 = (HX_("Character: ",6f,a2,f1,a2) + this->_char);
HXDLIN( 771)														::backend::DiscordClient_obj::changePresence(HX_("Character Editor",84,45,58,b1),_hx_tmp26,this->healthIcon->getCharacter(),null(),null());
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}


void CharacterEditorState_obj::reloadCharacterImage(){
            	HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_777_reloadCharacterImage)
HXLINE( 778)		 ::objects::Character _this = this->character;
HXDLIN( 778)		::String name = HX_("",00,00,00,00);
HXDLIN( 778)		bool _hx_tmp;
HXDLIN( 778)		if (!(_this->isAnimateAtlas)) {
HXLINE( 778)			_hx_tmp = ::hx::IsNull( _this->animation->_curAnim );
            		}
            		else {
HXLINE( 778)			_hx_tmp = ::hx::IsNull( _this->atlas->anim->get_curSymbol() );
            		}
HXDLIN( 778)		if (!(_hx_tmp)) {
HXLINE( 778)			if (!(_this->isAnimateAtlas)) {
HXLINE( 778)				name = _this->animation->_curAnim->name;
            			}
            			else {
HXLINE( 778)				name = _this->atlas->anim->lastPlayedAnim;
            			}
            		}
HXDLIN( 778)		::String lastAnim;
HXDLIN( 778)		if (::hx::IsNotNull( name )) {
HXLINE( 778)			lastAnim = name;
            		}
            		else {
HXLINE( 778)			lastAnim = HX_("",00,00,00,00);
            		}
HXLINE( 779)		::Array< ::Dynamic> anims = this->character->animationsArray->copy();
HXLINE( 781)		this->character->destroyAtlas();
HXLINE( 782)		this->character->isAnimateAtlas = false;
HXLINE( 783)		this->character->set_color(-1);
HXLINE( 784)		this->character->set_alpha(( (Float)(1) ));
HXLINE( 786)		if (::backend::Paths_obj::fileExists(((HX_("images/",77,50,74,c1) + this->character->imageFile) + HX_("/Animation.json",61,fc,54,44)),HX_("TEXT",ad,94,ba,37),null(),null())) {
HXLINE( 788)			this->character->atlas =  ::flxanimate::FlxAnimate_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 789)			this->character->atlas->showPivot = false;
HXLINE( 790)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 792)				::backend::Paths_obj::loadAnimateAtlas(this->character->atlas,this->character->imageFile,null(),null());
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE( 794)					{
HXLINE( 794)						null();
            					}
HXDLIN( 794)					 ::Dynamic e = _g;
HXLINE( 796)					{
HXLINE( 796)						 ::flixel::_hx_system::frontEnds::LogFrontEnd _this1 = ::flixel::FlxG_obj::log;
HXDLIN( 796)						::String data = ((HX_("Could not load atlas ",63,89,13,d5) + this->character->imageFile) + HX_(": ",a6,32,00,00));
HXDLIN( 796)						 ::Dynamic data1 = (data + ::Std_obj::string(e));
HXDLIN( 796)						_this1->advanced(data1,::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 798)			this->character->isAnimateAtlas = true;
            		}
            		else {
HXLINE( 800)			if (::backend::Paths_obj::fileExists(((HX_("images/",77,50,74,c1) + this->character->imageFile) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),null(),null())) {
HXLINE( 800)				 ::objects::Character _hx_tmp1 = this->character;
HXDLIN( 800)				::String key = this->character->imageFile;
HXDLIN( 800)				::String library = null();
HXDLIN( 800)				 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(key,library,true);
HXDLIN( 800)				bool txtExists = false;
HXDLIN( 800)				::String txt = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".txt",02,3f,c0,1e)));
HXDLIN( 800)				if (::sys::FileSystem_obj::exists(txt)) {
HXLINE( 800)					txtExists = true;
            				}
HXDLIN( 800)				::String _hx_tmp2;
HXDLIN( 800)				if (txtExists) {
HXLINE( 800)					_hx_tmp2 = ::sys::io::File_obj::getContent(txt);
            				}
            				else {
HXLINE( 800)					_hx_tmp2 = ::backend::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".txt",02,3f,c0,1e)),null(),library,null());
            				}
HXDLIN( 800)				_hx_tmp1->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSpriteSheetPacker(imageLoaded,_hx_tmp2));
            			}
            			else {
HXLINE( 801)				if (::backend::Paths_obj::fileExists(((HX_("images/",77,50,74,c1) + this->character->imageFile) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),null(),null())) {
HXLINE( 801)					 ::objects::Character _hx_tmp3 = this->character;
HXDLIN( 801)					::String key1 = this->character->imageFile;
HXDLIN( 801)					::String library1 = null();
HXDLIN( 801)					 ::flixel::graphics::FlxGraphic imageLoaded1 = ::backend::Paths_obj::image(key1,library1,true);
HXDLIN( 801)					bool jsonExists = false;
HXDLIN( 801)					::String json = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key1) + HX_(".json",56,f1,d6,c2)));
HXDLIN( 801)					if (::sys::FileSystem_obj::exists(json)) {
HXLINE( 801)						jsonExists = true;
            					}
HXDLIN( 801)					 ::Dynamic _hx_tmp4;
HXDLIN( 801)					if (jsonExists) {
HXLINE( 801)						_hx_tmp4 = ::sys::io::File_obj::getContent(json);
            					}
            					else {
HXLINE( 801)						_hx_tmp4 = ::backend::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key1) + HX_(".json",56,f1,d6,c2)),null(),library1,null());
            					}
HXDLIN( 801)					_hx_tmp3->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromTexturePackerJson(imageLoaded1,_hx_tmp4,null()));
            				}
            				else {
HXLINE( 802)					 ::objects::Character _hx_tmp5 = this->character;
HXDLIN( 802)					::String key2 = this->character->imageFile;
HXDLIN( 802)					::String library2 = null();
HXDLIN( 802)					 ::flixel::graphics::FlxGraphic imageLoaded2 = ::backend::Paths_obj::image(key2,library2,true);
HXDLIN( 802)					bool xmlExists = false;
HXDLIN( 802)					::String xml = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key2) + HX_(".xml",69,3e,c3,1e)));
HXDLIN( 802)					if (::sys::FileSystem_obj::exists(xml)) {
HXLINE( 802)						xmlExists = true;
            					}
HXDLIN( 802)					 ::Dynamic _hx_tmp6;
HXDLIN( 802)					if (xmlExists) {
HXLINE( 802)						_hx_tmp6 = ::sys::io::File_obj::getContent(xml);
            					}
            					else {
HXLINE( 802)						_hx_tmp6 = ::backend::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key2) + HX_(".xml",69,3e,c3,1e)),null(),library2,null());
            					}
HXDLIN( 802)					_hx_tmp5->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded2,_hx_tmp6));
            				}
            			}
            		}
HXLINE( 804)		{
HXLINE( 804)			int _g1 = 0;
HXDLIN( 804)			while((_g1 < anims->length)){
HXLINE( 804)				 ::Dynamic anim = anims->__get(_g1);
HXDLIN( 804)				_g1 = (_g1 + 1);
HXLINE( 805)				::String animAnim = ( (::String)((HX_("",00,00,00,00) + anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic))) );
HXLINE( 806)				::String animName = ( (::String)((HX_("",00,00,00,00) + anim->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic))) );
HXLINE( 807)				int animFps = ( (int)(anim->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) );
HXLINE( 808)				bool animLoop = ( (bool)(anim->__Field(HX_("loop",64,a6,b7,47),::hx::paccDynamic)) );
HXLINE( 809)				::Array< int > animIndices = ( (::Array< int >)(anim->__Field(HX_("indices",27,47,54,e3),::hx::paccDynamic)) );
HXLINE( 810)				this->addAnimation(animAnim,animName,( (Float)(animFps) ),animLoop,animIndices);
            			}
            		}
HXLINE( 813)		if ((anims->length > 0)) {
HXLINE( 815)			if ((lastAnim != HX_("",00,00,00,00))) {
HXLINE( 815)				this->character->playAnim(lastAnim,true,null(),null());
            			}
            			else {
HXLINE( 816)				this->character->dance();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,reloadCharacterImage,(void))

void CharacterEditorState_obj::reloadCharacterOptions(){
            	HX_STACKFRAME(&_hx_pos_8fcf73527616c70a_820_reloadCharacterOptions)
HXLINE( 821)		if (::hx::IsNull( this->UI_characterbox )) {
HXLINE( 821)			return;
            		}
HXLINE( 823)		this->check_player->set_checked(this->character->isPlayer);
HXLINE( 824)		this->imageInputText->set_text(this->character->imageFile);
HXLINE( 825)		this->healthIconInputText->set_text(this->character->healthIcon);
HXLINE( 826)		::String _hx_tmp;
HXDLIN( 826)		if (::hx::IsNotNull( this->character->vocalsFile )) {
HXLINE( 826)			_hx_tmp = this->character->vocalsFile;
            		}
            		else {
HXLINE( 826)			_hx_tmp = HX_("",00,00,00,00);
            		}
HXDLIN( 826)		this->vocalsInputText->set_text(_hx_tmp);
HXLINE( 827)		this->singDurationStepper->set_value(this->character->singDuration);
HXLINE( 828)		this->scaleStepper->set_value(this->character->jsonScale);
HXLINE( 829)		this->flipXCheckBox->set_checked(this->character->originalFlipX);
HXLINE( 830)		this->noAntialiasingCheckBox->set_checked(this->character->noAntialiasing);
HXLINE( 831)		this->positionXStepper->set_value(this->character->positionArray->__get(0));
HXLINE( 832)		this->positionYStepper->set_value(this->character->positionArray->__get(1));
HXLINE( 833)		this->positionCameraXStepper->set_value(this->character->cameraPosition->__get(0));
HXLINE( 834)		this->positionCameraYStepper->set_value(this->character->cameraPosition->__get(1));
HXLINE( 835)		this->reloadAnimationDropDown();
HXLINE( 836)		{
HXLINE( 836)			this->healthColorStepperR->set_value(( (Float)(this->character->healthColorArray->__get(0)) ));
HXDLIN( 836)			this->healthColorStepperG->set_value(( (Float)(this->character->healthColorArray->__get(1)) ));
HXDLIN( 836)			this->healthColorStepperB->set_value(( (Float)(this->character->healthColorArray->__get(2)) ));
HXDLIN( 836)			 ::flixel::FlxSprite _hx_tmp1 = this->healthBar->leftBar;
HXDLIN( 836)			 ::flixel::FlxSprite _hx_tmp2 = this->healthBar->rightBar;
HXDLIN( 836)			int Red = this->character->healthColorArray->__get(0);
HXDLIN( 836)			int Green = this->character->healthColorArray->__get(1);
HXDLIN( 836)			int Blue = this->character->healthColorArray->__get(2);
HXDLIN( 836)			int Alpha = 255;
HXDLIN( 836)			int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 836)			{
HXLINE( 836)				color = (color & -16711681);
HXDLIN( 836)				int color1;
HXDLIN( 836)				if ((Red > 255)) {
HXLINE( 836)					color1 = 255;
            				}
            				else {
HXLINE( 836)					if ((Red < 0)) {
HXLINE( 836)						color1 = 0;
            					}
            					else {
HXLINE( 836)						color1 = Red;
            					}
            				}
HXDLIN( 836)				color = (color | (color1 << 16));
            			}
HXDLIN( 836)			{
HXLINE( 836)				color = (color & -65281);
HXDLIN( 836)				int color2;
HXDLIN( 836)				if ((Green > 255)) {
HXLINE( 836)					color2 = 255;
            				}
            				else {
HXLINE( 836)					if ((Green < 0)) {
HXLINE( 836)						color2 = 0;
            					}
            					else {
HXLINE( 836)						color2 = Green;
            					}
            				}
HXDLIN( 836)				color = (color | (color2 << 8));
            			}
HXDLIN( 836)			{
HXLINE( 836)				color = (color & -256);
HXDLIN( 836)				int color3;
HXDLIN( 836)				if ((Blue > 255)) {
HXLINE( 836)					color3 = 255;
            				}
            				else {
HXLINE( 836)					if ((Blue < 0)) {
HXLINE( 836)						color3 = 0;
            					}
            					else {
HXLINE( 836)						color3 = Blue;
            					}
            				}
HXDLIN( 836)				color = (color | color3);
            			}
HXDLIN( 836)			{
HXLINE( 836)				color = (color & 16777215);
HXDLIN( 836)				int color4;
HXDLIN( 836)				if ((Alpha > 255)) {
HXLINE( 836)					color4 = 255;
            				}
            				else {
HXLINE( 836)					if ((Alpha < 0)) {
HXLINE( 836)						color4 = 0;
            					}
            					else {
HXLINE( 836)						color4 = Alpha;
            					}
            				}
HXDLIN( 836)				color = (color | (color4 << 24));
            			}
HXDLIN( 836)			_hx_tmp1->set_color(_hx_tmp2->set_color(color));
HXDLIN( 836)			this->healthIcon->changeIcon(this->character->healthIcon,false);
HXDLIN( 836)			::String _hx_tmp3 = (HX_("Character: ",6f,a2,f1,a2) + this->_char);
HXDLIN( 836)			::backend::DiscordClient_obj::changePresence(HX_("Character Editor",84,45,58,b1),_hx_tmp3,this->healthIcon->getCharacter(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,reloadCharacterOptions,(void))

void CharacterEditorState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_845_update)
HXLINE( 846)		this->super::update(elapsed);
HXLINE( 848)		bool _hx_tmp;
HXDLIN( 848)		bool _hx_tmp1;
HXDLIN( 848)		bool _hx_tmp2;
HXDLIN( 848)		bool _hx_tmp3;
HXDLIN( 848)		bool _hx_tmp4;
HXDLIN( 848)		if (!(this->animationInputText->hasFocus)) {
HXLINE( 848)			_hx_tmp4 = this->animationNameInputText->hasFocus;
            		}
            		else {
HXLINE( 848)			_hx_tmp4 = true;
            		}
HXDLIN( 848)		if (!(_hx_tmp4)) {
HXLINE( 848)			_hx_tmp3 = this->animationIndicesInputText->hasFocus;
            		}
            		else {
HXLINE( 848)			_hx_tmp3 = true;
            		}
HXDLIN( 848)		if (!(_hx_tmp3)) {
HXLINE( 848)			_hx_tmp2 = this->imageInputText->hasFocus;
            		}
            		else {
HXLINE( 848)			_hx_tmp2 = true;
            		}
HXDLIN( 848)		if (!(_hx_tmp2)) {
HXLINE( 848)			_hx_tmp1 = this->healthIconInputText->hasFocus;
            		}
            		else {
HXLINE( 848)			_hx_tmp1 = true;
            		}
HXDLIN( 848)		if (!(_hx_tmp1)) {
HXLINE( 848)			_hx_tmp = this->vocalsInputText->hasFocus;
            		}
            		else {
HXLINE( 848)			_hx_tmp = true;
            		}
HXDLIN( 848)		if (_hx_tmp) {
HXLINE( 850)			::backend::ClientPrefs_obj::toggleVolumeKeys(false);
HXLINE( 851)			return;
            		}
HXLINE( 853)		::backend::ClientPrefs_obj::toggleVolumeKeys(true);
HXLINE( 855)		Float shiftMult = ( (Float)(1) );
HXLINE( 856)		Float ctrlMult = ( (Float)(1) );
HXLINE( 857)		Float shiftMultBig = ( (Float)(1) );
HXLINE( 858)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 858)		if (_this->keyManager->checkStatusUnsafe(16,_this->status)) {
HXLINE( 860)			shiftMult = ( (Float)(4) );
HXLINE( 861)			shiftMultBig = ( (Float)(10) );
            		}
HXLINE( 863)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 863)		if (_this1->keyManager->checkStatusUnsafe(17,_this1->status)) {
HXLINE( 863)			ctrlMult = ((Float)0.25);
            		}
HXLINE( 866)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 866)		if (_this2->keyManager->checkStatusUnsafe(74,_this2->status)) {
HXLINE( 866)			 ::flixel::FlxCamera fh = ::flixel::FlxG_obj::camera;
HXDLIN( 866)			fh->scroll->set_x((fh->scroll->x - (((elapsed * ( (Float)(500) )) * shiftMult) * ctrlMult)));
            		}
HXLINE( 867)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 867)		if (_this3->keyManager->checkStatusUnsafe(75,_this3->status)) {
HXLINE( 867)			 ::flixel::FlxCamera fh1 = ::flixel::FlxG_obj::camera;
HXDLIN( 867)			fh1->scroll->set_y((fh1->scroll->y + (((elapsed * ( (Float)(500) )) * shiftMult) * ctrlMult)));
            		}
HXLINE( 868)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 868)		if (_this4->keyManager->checkStatusUnsafe(76,_this4->status)) {
HXLINE( 868)			 ::flixel::FlxCamera fh2 = ::flixel::FlxG_obj::camera;
HXDLIN( 868)			fh2->scroll->set_x((fh2->scroll->x + (((elapsed * ( (Float)(500) )) * shiftMult) * ctrlMult)));
            		}
HXLINE( 869)		 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 869)		if (_this5->keyManager->checkStatusUnsafe(73,_this5->status)) {
HXLINE( 869)			 ::flixel::FlxCamera fh3 = ::flixel::FlxG_obj::camera;
HXDLIN( 869)			fh3->scroll->set_y((fh3->scroll->y - (((elapsed * ( (Float)(500) )) * shiftMult) * ctrlMult)));
            		}
HXLINE( 871)		Float lastZoom = ::flixel::FlxG_obj::camera->zoom;
HXLINE( 872)		bool _hx_tmp5;
HXDLIN( 872)		 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 872)		if (_this6->keyManager->checkStatusUnsafe(82,_this6->status)) {
HXLINE( 872)			 ::flixel::input::keyboard::FlxKeyList _this7 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 872)			_hx_tmp5 = !(_this7->keyManager->checkStatusUnsafe(17,_this7->status));
            		}
            		else {
HXLINE( 872)			_hx_tmp5 = false;
            		}
HXDLIN( 872)		if (_hx_tmp5) {
HXLINE( 872)			::flixel::FlxG_obj::camera->set_zoom(( (Float)(1) ));
            		}
            		else {
HXLINE( 873)			bool _hx_tmp6;
HXDLIN( 873)			 ::flixel::input::keyboard::FlxKeyList _this8 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 873)			if (_this8->keyManager->checkStatusUnsafe(69,_this8->status)) {
HXLINE( 873)				_hx_tmp6 = (::flixel::FlxG_obj::camera->zoom < 3);
            			}
            			else {
HXLINE( 873)				_hx_tmp6 = false;
            			}
HXDLIN( 873)			if (_hx_tmp6) {
HXLINE( 874)				 ::flixel::FlxCamera fh4 = ::flixel::FlxG_obj::camera;
HXDLIN( 874)				fh4->set_zoom((fh4->zoom + (((elapsed * ::flixel::FlxG_obj::camera->zoom) * shiftMult) * ctrlMult)));
HXLINE( 875)				if ((::flixel::FlxG_obj::camera->zoom > 3)) {
HXLINE( 875)					::flixel::FlxG_obj::camera->set_zoom(( (Float)(3) ));
            				}
            			}
            			else {
HXLINE( 877)				bool _hx_tmp7;
HXDLIN( 877)				 ::flixel::input::keyboard::FlxKeyList _this9 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 877)				if (_this9->keyManager->checkStatusUnsafe(81,_this9->status)) {
HXLINE( 877)					_hx_tmp7 = (::flixel::FlxG_obj::camera->zoom > ((Float)0.1));
            				}
            				else {
HXLINE( 877)					_hx_tmp7 = false;
            				}
HXDLIN( 877)				if (_hx_tmp7) {
HXLINE( 878)					 ::flixel::FlxCamera fh5 = ::flixel::FlxG_obj::camera;
HXDLIN( 878)					fh5->set_zoom((fh5->zoom - (((elapsed * ::flixel::FlxG_obj::camera->zoom) * shiftMult) * ctrlMult)));
HXLINE( 879)					if ((::flixel::FlxG_obj::camera->zoom < ((Float)0.1))) {
HXLINE( 879)						::flixel::FlxG_obj::camera->set_zoom(((Float)0.1));
            					}
            				}
            			}
            		}
HXLINE( 882)		if ((lastZoom != ::flixel::FlxG_obj::camera->zoom)) {
HXLINE( 882)			 ::flixel::text::FlxText _hx_tmp8 = this->cameraZoomText;
HXDLIN( 882)			_hx_tmp8->set_text(((HX_("Zoom: ",99,74,4a,2f) + ::flixel::math::FlxMath_obj::roundDecimal(::flixel::FlxG_obj::camera->zoom,2)) + HX_("x",78,00,00,00)));
            		}
HXLINE( 885)		bool changedAnim = false;
HXLINE( 886)		if ((this->anims->length > 1)) {
HXLINE( 888)			bool _hx_tmp9;
HXDLIN( 888)			 ::flixel::input::keyboard::FlxKeyList _this10 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 888)			if (_this10->keyManager->checkStatusUnsafe(87,_this10->status)) {
HXLINE( 888)				changedAnim = true;
HXDLIN( 888)				_hx_tmp9 = changedAnim;
            			}
            			else {
HXLINE( 888)				_hx_tmp9 = false;
            			}
HXDLIN( 888)			if (_hx_tmp9) {
HXLINE( 888)				this->curAnim--;
            			}
            			else {
HXLINE( 889)				bool _hx_tmp10;
HXDLIN( 889)				 ::flixel::input::keyboard::FlxKeyList _this11 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 889)				if (_this11->keyManager->checkStatusUnsafe(83,_this11->status)) {
HXLINE( 889)					changedAnim = true;
HXDLIN( 889)					_hx_tmp10 = changedAnim;
            				}
            				else {
HXLINE( 889)					_hx_tmp10 = false;
            				}
HXDLIN( 889)				if (_hx_tmp10) {
HXLINE( 889)					this->curAnim++;
            				}
            			}
HXLINE( 891)			if (changedAnim) {
HXLINE( 893)				this->undoOffsets = null();
HXLINE( 894)				this->curAnim = ::flixel::math::FlxMath_obj::wrap(this->curAnim,0,(this->anims->length - 1));
HXLINE( 895)				this->character->playAnim(( (::String)(this->anims->__get(this->curAnim)->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),true,null(),null());
HXLINE( 896)				{
HXLINE( 896)					int daLoop = 0;
HXDLIN( 896)					{
HXLINE( 896)						 ::Dynamic filter = null();
HXDLIN( 896)						 ::flixel::group::FlxTypedGroupIterator text =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->animsTxtGroup->members,filter);
HXDLIN( 896)						while(text->hasNext()){
HXLINE( 896)							 ::flixel::text::FlxText text1 = text->next().StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 896)							text1->set_color(-1);
HXDLIN( 896)							if ((daLoop == this->curAnim)) {
HXLINE( 896)								text1->set_color(-16711936);
            							}
HXDLIN( 896)							daLoop = (daLoop + 1);
            						}
            					}
            				}
            			}
            		}
HXLINE( 900)		bool changedOffset = false;
HXLINE( 901)		 ::flixel::input::keyboard::FlxKeyList _this12 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 901)		bool moveKeysP = _this12->keyManager->checkStatusUnsafe(37,_this12->status);
HXDLIN( 901)		 ::flixel::input::keyboard::FlxKeyList _this13 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 901)		bool moveKeysP1 = _this13->keyManager->checkStatusUnsafe(39,_this13->status);
HXDLIN( 901)		 ::flixel::input::keyboard::FlxKeyList _this14 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 901)		bool moveKeysP2 = _this14->keyManager->checkStatusUnsafe(38,_this14->status);
HXDLIN( 901)		 ::flixel::input::keyboard::FlxKeyList _this15 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 901)		::Array< bool > moveKeysP3 = ::Array_obj< bool >::__new(4)->init(0,moveKeysP)->init(1,moveKeysP1)->init(2,moveKeysP2)->init(3,_this15->keyManager->checkStatusUnsafe(40,_this15->status));
HXLINE( 902)		 ::flixel::input::keyboard::FlxKeyList _this16 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 902)		bool moveKeys = _this16->keyManager->checkStatusUnsafe(37,_this16->status);
HXDLIN( 902)		 ::flixel::input::keyboard::FlxKeyList _this17 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 902)		bool moveKeys1 = _this17->keyManager->checkStatusUnsafe(39,_this17->status);
HXDLIN( 902)		 ::flixel::input::keyboard::FlxKeyList _this18 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 902)		bool moveKeys2 = _this18->keyManager->checkStatusUnsafe(38,_this18->status);
HXDLIN( 902)		 ::flixel::input::keyboard::FlxKeyList _this19 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 902)		::Array< bool > moveKeys3 = ::Array_obj< bool >::__new(4)->init(0,moveKeys)->init(1,moveKeys1)->init(2,moveKeys2)->init(3,_this19->keyManager->checkStatusUnsafe(40,_this19->status));
HXLINE( 903)		if (moveKeysP3->contains(true)) {
HXLINE( 905)			 ::objects::Character fh6 = this->character;
HXDLIN( 905)			{
HXLINE( 905)				int x;
HXDLIN( 905)				if (moveKeysP3->__get(0)) {
HXLINE( 905)					x = 1;
            				}
            				else {
HXLINE( 905)					x = 0;
            				}
HXDLIN( 905)				int x1;
HXDLIN( 905)				if (moveKeysP3->__get(1)) {
HXLINE( 905)					x1 = 1;
            				}
            				else {
HXLINE( 905)					x1 = 0;
            				}
HXDLIN( 905)				fh6->offset->set_x((fh6->offset->x + (( (Float)((x - x1)) ) * shiftMultBig)));
            			}
HXLINE( 906)			 ::objects::Character fh7 = this->character;
HXDLIN( 906)			{
HXLINE( 906)				int y;
HXDLIN( 906)				if (moveKeysP3->__get(2)) {
HXLINE( 906)					y = 1;
            				}
            				else {
HXLINE( 906)					y = 0;
            				}
HXDLIN( 906)				int y1;
HXDLIN( 906)				if (moveKeysP3->__get(3)) {
HXLINE( 906)					y1 = 1;
            				}
            				else {
HXLINE( 906)					y1 = 0;
            				}
HXDLIN( 906)				fh7->offset->set_y((fh7->offset->y + (( (Float)((y - y1)) ) * shiftMultBig)));
            			}
HXLINE( 907)			changedOffset = true;
            		}
HXLINE( 910)		if (moveKeys3->contains(true)) {
HXLINE( 912)			 ::states::editors::CharacterEditorState _hx_tmp11 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 912)			_hx_tmp11->holdingArrowsTime = (_hx_tmp11->holdingArrowsTime + elapsed);
HXLINE( 913)			if ((this->holdingArrowsTime > ((Float)0.6))) {
HXLINE( 915)				 ::states::editors::CharacterEditorState _hx_tmp12 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 915)				_hx_tmp12->holdingArrowsElapsed = (_hx_tmp12->holdingArrowsElapsed + elapsed);
HXLINE( 916)				while((this->holdingArrowsElapsed > ((Float)0.016666666666666666))){
HXLINE( 918)					 ::objects::Character fh8 = this->character;
HXDLIN( 918)					{
HXLINE( 918)						int x2;
HXDLIN( 918)						if (moveKeys3->__get(0)) {
HXLINE( 918)							x2 = 1;
            						}
            						else {
HXLINE( 918)							x2 = 0;
            						}
HXDLIN( 918)						int x3;
HXDLIN( 918)						if (moveKeys3->__get(1)) {
HXLINE( 918)							x3 = 1;
            						}
            						else {
HXLINE( 918)							x3 = 0;
            						}
HXDLIN( 918)						fh8->offset->set_x((fh8->offset->x + (( (Float)((x2 - x3)) ) * shiftMultBig)));
            					}
HXLINE( 919)					 ::objects::Character fh9 = this->character;
HXDLIN( 919)					{
HXLINE( 919)						int y2;
HXDLIN( 919)						if (moveKeys3->__get(2)) {
HXLINE( 919)							y2 = 1;
            						}
            						else {
HXLINE( 919)							y2 = 0;
            						}
HXDLIN( 919)						int y3;
HXDLIN( 919)						if (moveKeys3->__get(3)) {
HXLINE( 919)							y3 = 1;
            						}
            						else {
HXLINE( 919)							y3 = 0;
            						}
HXDLIN( 919)						fh9->offset->set_y((fh9->offset->y + (( (Float)((y2 - y3)) ) * shiftMultBig)));
            					}
HXLINE( 920)					 ::states::editors::CharacterEditorState _hx_tmp13 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 920)					_hx_tmp13->holdingArrowsElapsed = (_hx_tmp13->holdingArrowsElapsed - ((Float)0.016666666666666666));
HXLINE( 921)					changedOffset = true;
            				}
            			}
            		}
            		else {
HXLINE( 925)			this->holdingArrowsTime = ( (Float)(0) );
            		}
HXLINE( 927)		bool _hx_tmp14;
HXDLIN( 927)		 ::flixel::input::mouse::FlxMouseButton _this20 = ::flixel::FlxG_obj::mouse->_rightButton;
HXDLIN( 927)		bool _hx_tmp15;
HXDLIN( 927)		if ((_this20->current != 1)) {
HXLINE( 927)			_hx_tmp15 = (_this20->current == 2);
            		}
            		else {
HXLINE( 927)			_hx_tmp15 = true;
            		}
HXDLIN( 927)		if (_hx_tmp15) {
HXLINE( 927)			 ::flixel::input::mouse::FlxMouse _this21 = ::flixel::FlxG_obj::mouse;
HXDLIN( 927)			if (((_this21->screenX - _this21->_prevScreenX) == 0)) {
HXLINE( 927)				 ::flixel::input::mouse::FlxMouse _this22 = ::flixel::FlxG_obj::mouse;
HXDLIN( 927)				_hx_tmp14 = ((_this22->screenY - _this22->_prevScreenY) != 0);
            			}
            			else {
HXLINE( 927)				_hx_tmp14 = true;
            			}
            		}
            		else {
HXLINE( 927)			_hx_tmp14 = false;
            		}
HXDLIN( 927)		if (_hx_tmp14) {
HXLINE( 929)			 ::objects::Character fh10 = this->character;
HXDLIN( 929)			{
HXLINE( 929)				 ::flixel::input::mouse::FlxMouse _this23 = ::flixel::FlxG_obj::mouse;
HXDLIN( 929)				fh10->offset->set_x((fh10->offset->x - ( (Float)((_this23->screenX - _this23->_prevScreenX)) )));
            			}
HXLINE( 930)			 ::objects::Character fh11 = this->character;
HXDLIN( 930)			{
HXLINE( 930)				 ::flixel::input::mouse::FlxMouse _this24 = ::flixel::FlxG_obj::mouse;
HXDLIN( 930)				fh11->offset->set_y((fh11->offset->y - ( (Float)((_this24->screenY - _this24->_prevScreenY)) )));
            			}
HXLINE( 931)			changedOffset = true;
            		}
HXLINE( 934)		 ::flixel::input::keyboard::FlxKeyList _this25 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 934)		if (_this25->keyManager->checkStatusUnsafe(17,_this25->status)) {
HXLINE( 936)			 ::flixel::input::keyboard::FlxKeyList _this26 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 936)			if (_this26->keyManager->checkStatusUnsafe(67,_this26->status)) {
HXLINE( 938)				this->copiedOffset[0] = this->character->offset->x;
HXLINE( 939)				this->copiedOffset[1] = this->character->offset->y;
HXLINE( 940)				changedOffset = true;
            			}
            			else {
HXLINE( 942)				 ::flixel::input::keyboard::FlxKeyList _this27 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 942)				if (_this27->keyManager->checkStatusUnsafe(86,_this27->status)) {
HXLINE( 944)					this->undoOffsets = ::Array_obj< Float >::__new(2)->init(0,this->character->offset->x)->init(1,this->character->offset->y);
HXLINE( 945)					this->character->offset->set_x(this->copiedOffset->__get(0));
HXLINE( 946)					this->character->offset->set_y(this->copiedOffset->__get(1));
HXLINE( 947)					changedOffset = true;
            				}
            				else {
HXLINE( 949)					 ::flixel::input::keyboard::FlxKeyList _this28 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 949)					if (_this28->keyManager->checkStatusUnsafe(82,_this28->status)) {
HXLINE( 951)						this->undoOffsets = ::Array_obj< Float >::__new(2)->init(0,this->character->offset->x)->init(1,this->character->offset->y);
HXLINE( 952)						{
HXLINE( 952)							 ::flixel::math::FlxBasePoint this1 = this->character->offset;
HXDLIN( 952)							this1->set_x(( (Float)(0) ));
HXDLIN( 952)							this1->set_y(( (Float)(0) ));
            						}
HXLINE( 953)						changedOffset = true;
            					}
            					else {
HXLINE( 955)						bool _hx_tmp16;
HXDLIN( 955)						 ::flixel::input::keyboard::FlxKeyList _this29 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 955)						if (_this29->keyManager->checkStatusUnsafe(90,_this29->status)) {
HXLINE( 955)							_hx_tmp16 = ::hx::IsNotNull( this->undoOffsets );
            						}
            						else {
HXLINE( 955)							_hx_tmp16 = false;
            						}
HXDLIN( 955)						if (_hx_tmp16) {
HXLINE( 957)							this->character->offset->set_x(this->undoOffsets->__get(0));
HXLINE( 958)							this->character->offset->set_y(this->undoOffsets->__get(1));
HXLINE( 959)							changedOffset = true;
            						}
            					}
            				}
            			}
            		}
HXLINE( 963)		 ::Dynamic anim = this->anims->__get(this->curAnim);
HXLINE( 964)		bool _hx_tmp17;
HXDLIN( 964)		bool _hx_tmp18;
HXDLIN( 964)		if (changedOffset) {
HXLINE( 964)			_hx_tmp18 = ::hx::IsNotNull( anim );
            		}
            		else {
HXLINE( 964)			_hx_tmp18 = false;
            		}
HXDLIN( 964)		if (_hx_tmp18) {
HXLINE( 964)			_hx_tmp17 = ::hx::IsNotNull( anim->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic) );
            		}
            		else {
HXLINE( 964)			_hx_tmp17 = false;
            		}
HXDLIN( 964)		if (_hx_tmp17) {
HXLINE( 966)			 ::Dynamic(anim->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic))->__SetItem(0,::Std_obj::_hx_int(this->character->offset->x));
HXLINE( 967)			 ::Dynamic(anim->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic))->__SetItem(1,::Std_obj::_hx_int(this->character->offset->y));
HXLINE( 969)			 ::flixel::text::FlxText myText = Dynamic( this->animsTxtGroup->members->__get(this->curAnim)).StaticCast<  ::flixel::text::FlxText >();
HXLINE( 970)			::String _hx_tmp19 = ( (::String)((anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic) + HX_(": ",a6,32,00,00))) );
HXDLIN( 970)			myText->set_text((_hx_tmp19 + ::Std_obj::string( ::Dynamic(anim->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic)))));
HXLINE( 971)			this->character->addOffset(( (::String)(anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),this->character->offset->x,this->character->offset->y);
            		}
HXLINE( 974)		::String txt = HX_("ERROR: No Animation Found",f5,a5,8a,62);
HXLINE( 975)		int clr = -65536;
HXLINE( 976)		 ::objects::Character _this30 = this->character;
HXDLIN( 976)		bool _hx_tmp20;
HXDLIN( 976)		if (!(_this30->isAnimateAtlas)) {
HXLINE( 976)			_hx_tmp20 = ::hx::IsNull( _this30->animation->_curAnim );
            		}
            		else {
HXLINE( 976)			_hx_tmp20 = ::hx::IsNull( _this30->atlas->anim->get_curSymbol() );
            		}
HXDLIN( 976)		if (!(_hx_tmp20)) {
HXLINE( 978)			bool _hx_tmp21;
HXDLIN( 978)			 ::flixel::input::keyboard::FlxKeyList _this31 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 978)			if (!(_this31->keyManager->checkStatusUnsafe(65,_this31->status))) {
HXLINE( 978)				 ::flixel::input::keyboard::FlxKeyList _this32 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 978)				_hx_tmp21 = _this32->keyManager->checkStatusUnsafe(68,_this32->status);
            			}
            			else {
HXLINE( 978)				_hx_tmp21 = true;
            			}
HXDLIN( 978)			if (_hx_tmp21) {
HXLINE( 980)				 ::states::editors::CharacterEditorState _hx_tmp22 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 980)				_hx_tmp22->holdingFrameTime = (_hx_tmp22->holdingFrameTime + elapsed);
HXLINE( 981)				if ((this->holdingFrameTime > ((Float)0.5))) {
HXLINE( 981)					 ::states::editors::CharacterEditorState _hx_tmp23 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 981)					_hx_tmp23->holdingFrameElapsed = (_hx_tmp23->holdingFrameElapsed + elapsed);
            				}
            			}
            			else {
HXLINE( 983)				this->holdingFrameTime = ( (Float)(0) );
            			}
HXLINE( 985)			 ::flixel::input::keyboard::FlxKeyList _this33 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 985)			if (_this33->keyManager->checkStatusUnsafe(32,_this33->status)) {
HXLINE( 986)				 ::objects::Character _hx_tmp24 = this->character;
HXDLIN( 986)				 ::objects::Character _this34 = this->character;
HXDLIN( 986)				::String name = HX_("",00,00,00,00);
HXDLIN( 986)				bool _hx_tmp25;
HXDLIN( 986)				if (!(_this34->isAnimateAtlas)) {
HXLINE( 986)					_hx_tmp25 = ::hx::IsNull( _this34->animation->_curAnim );
            				}
            				else {
HXLINE( 986)					_hx_tmp25 = ::hx::IsNull( _this34->atlas->anim->get_curSymbol() );
            				}
HXDLIN( 986)				if (!(_hx_tmp25)) {
HXLINE( 986)					if (!(_this34->isAnimateAtlas)) {
HXLINE( 986)						name = _this34->animation->_curAnim->name;
            					}
            					else {
HXLINE( 986)						name = _this34->atlas->anim->lastPlayedAnim;
            					}
            				}
HXDLIN( 986)				::String _hx_tmp26;
HXDLIN( 986)				if (::hx::IsNotNull( name )) {
HXLINE( 986)					_hx_tmp26 = name;
            				}
            				else {
HXLINE( 986)					_hx_tmp26 = HX_("",00,00,00,00);
            				}
HXDLIN( 986)				_hx_tmp24->playAnim(_hx_tmp26,true,null(),null());
            			}
HXLINE( 988)			int frames = 0;
HXLINE( 989)			int length = 0;
HXLINE( 990)			if (!(this->character->isAnimateAtlas)) {
HXLINE( 992)				frames = this->character->animation->_curAnim->curFrame;
HXLINE( 993)				length = this->character->animation->_curAnim->frames->length;
            			}
            			else {
HXLINE( 997)				frames = this->character->atlas->anim->get_curFrame();
HXLINE( 998)				length = this->character->atlas->anim->get_length();
            			}
HXLINE(1001)			bool _hx_tmp27;
HXDLIN(1001)			bool _hx_tmp28;
HXDLIN(1001)			 ::flixel::input::keyboard::FlxKeyList _this35 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1001)			if (!(_this35->keyManager->checkStatusUnsafe(65,_this35->status))) {
HXLINE(1001)				 ::flixel::input::keyboard::FlxKeyList _this36 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1001)				_hx_tmp28 = _this36->keyManager->checkStatusUnsafe(68,_this36->status);
            			}
            			else {
HXLINE(1001)				_hx_tmp28 = true;
            			}
HXDLIN(1001)			if (!(_hx_tmp28)) {
HXLINE(1001)				_hx_tmp27 = (this->holdingFrameTime > ((Float)0.5));
            			}
            			else {
HXLINE(1001)				_hx_tmp27 = true;
            			}
HXDLIN(1001)			if (_hx_tmp27) {
HXLINE(1003)				bool isLeft = false;
HXLINE(1004)				bool _hx_tmp29;
HXDLIN(1004)				bool _hx_tmp30;
HXDLIN(1004)				if ((this->holdingFrameTime > ((Float)0.5))) {
HXLINE(1004)					 ::flixel::input::keyboard::FlxKeyList _this37 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1004)					_hx_tmp30 = _this37->keyManager->checkStatusUnsafe(65,_this37->status);
            				}
            				else {
HXLINE(1004)					_hx_tmp30 = false;
            				}
HXDLIN(1004)				if (!(_hx_tmp30)) {
HXLINE(1004)					 ::flixel::input::keyboard::FlxKeyList _this38 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1004)					_hx_tmp29 = _this38->keyManager->checkStatusUnsafe(65,_this38->status);
            				}
            				else {
HXLINE(1004)					_hx_tmp29 = true;
            				}
HXDLIN(1004)				if (_hx_tmp29) {
HXLINE(1004)					isLeft = true;
            				}
HXLINE(1005)				this->character->set_animPaused(true);
HXLINE(1007)				bool _hx_tmp31;
HXDLIN(1007)				if (!((this->holdingFrameTime <= ((Float)0.5)))) {
HXLINE(1007)					_hx_tmp31 = (this->holdingFrameElapsed > ((Float)0.1));
            				}
            				else {
HXLINE(1007)					_hx_tmp31 = true;
            				}
HXDLIN(1007)				if (_hx_tmp31) {
HXLINE(1009)					Float frames1;
HXDLIN(1009)					if (isLeft) {
HXLINE(1009)						frames1 = -(shiftMult);
            					}
            					else {
HXLINE(1009)						frames1 = shiftMult;
            					}
HXDLIN(1009)					frames = ::flixel::math::FlxMath_obj::wrap((frames + ::Std_obj::_hx_int(frames1)),0,(length - 1));
HXLINE(1010)					if (!(this->character->isAnimateAtlas)) {
HXLINE(1010)						this->character->animation->_curAnim->set_curFrame(frames);
            					}
            					else {
HXLINE(1011)						this->character->atlas->anim->set_curFrame(frames);
            					}
HXLINE(1012)					 ::states::editors::CharacterEditorState _hx_tmp32 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1012)					_hx_tmp32->holdingFrameElapsed = (_hx_tmp32->holdingFrameElapsed - ((Float)0.1));
            				}
            			}
HXLINE(1016)			txt = ((((HX_("Frames: ( ",e4,49,2d,a4) + frames) + HX_(" / ",31,71,18,00)) + (length - 1)) + HX_(" )",09,1c,00,00));
HXLINE(1018)			clr = -1;
            		}
HXLINE(1020)		if ((txt != this->frameAdvanceText->text)) {
HXLINE(1020)			this->frameAdvanceText->set_text(txt);
            		}
HXLINE(1021)		this->frameAdvanceText->set_color(clr);
HXLINE(1024)		 ::flixel::input::keyboard::FlxKeyList _this39 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1024)		if (_this39->keyManager->checkStatusUnsafe(123,_this39->status)) {
HXLINE(1025)			this->silhouettes->set_visible(!(this->silhouettes->visible));
            		}
HXLINE(1027)		bool _hx_tmp33;
HXDLIN(1027)		 ::flixel::input::keyboard::FlxKeyList _this40 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1027)		if (!(_this40->keyManager->checkStatusUnsafe(112,_this40->status))) {
HXLINE(1027)			if (this->helpBg->visible) {
HXLINE(1027)				 ::flixel::input::keyboard::FlxKeyList _this41 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1027)				_hx_tmp33 = _this41->keyManager->checkStatusUnsafe(27,_this41->status);
            			}
            			else {
HXLINE(1027)				_hx_tmp33 = false;
            			}
            		}
            		else {
HXLINE(1027)			_hx_tmp33 = true;
            		}
HXDLIN(1027)		if (_hx_tmp33) {
HXLINE(1029)			this->helpBg->set_visible(!(this->helpBg->visible));
HXLINE(1030)			this->helpTexts->set_visible(this->helpBg->visible);
            		}
            		else {
HXLINE(1032)			 ::flixel::input::keyboard::FlxKeyList _this42 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1032)			if (_this42->keyManager->checkStatusUnsafe(27,_this42->status)) {
HXLINE(1034)				::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE(1035)				if (!(this->_goToPlayState)) {
HXLINE(1037)					::backend::MusicBeatState_obj::switchState( ::states::editors::MasterEditorMenu_obj::__alloc( HX_CTX ,null(),null()));
HXLINE(1038)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp34 = ::flixel::FlxG_obj::sound;
HXDLIN(1038)					::String library = null();
HXDLIN(1038)					 ::openfl::media::Sound file = ::backend::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),HX_("freakyMenu",15,c9,93,86),library);
HXDLIN(1038)					_hx_tmp34->playMusic(file,null(),null(),null());
            				}
            				else {
HXLINE(1040)					::backend::MusicBeatState_obj::switchState( ::states::PlayState_obj::__alloc( HX_CTX ,null(),null()));
            				}
HXLINE(1041)				return;
            			}
            		}
            	}


void CharacterEditorState_obj::loadBG(){
            	HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_1047_loadBG)
HXLINE(1048)		::String lastLoaded = ::backend::Paths_obj::currentLevel;
HXLINE(1049)		::backend::Paths_obj::currentLevel = this->assetFolder;
HXLINE(1054)		 ::objects::BGSprite bg =  ::objects::BGSprite_obj::__alloc( HX_CTX ,HX_("stageback",e5,7b,3b,06),-600,-200,((Float)0.9),((Float)0.9),null(),null());
HXLINE(1055)		this->add(bg);
HXLINE(1057)		 ::objects::BGSprite stageFront =  ::objects::BGSprite_obj::__alloc( HX_CTX ,HX_("stagefront",2b,fd,b0,c6),-650,600,((Float)0.9),((Float)0.9),null(),null());
HXLINE(1058)		stageFront->setGraphicSize(::Std_obj::_hx_int((stageFront->get_width() * ((Float)1.1))),null());
HXLINE(1059)		stageFront->updateHitbox();
HXLINE(1060)		this->add(stageFront);
HXLINE(1062)		{
HXLINE(1062)			 ::flixel::math::FlxBasePoint this1 = this->dadPosition;
HXDLIN(1062)			this1->set_x(( (Float)(100) ));
HXDLIN(1062)			this1->set_y(( (Float)(100) ));
            		}
HXLINE(1063)		{
HXLINE(1063)			 ::flixel::math::FlxBasePoint this2 = this->bfPosition;
HXDLIN(1063)			this2->set_x(( (Float)(770) ));
HXDLIN(1063)			this2->set_y(( (Float)(100) ));
            		}
HXLINE(1066)		::backend::Paths_obj::currentLevel = lastLoaded;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,loadBG,(void))

void CharacterEditorState_obj::updatePointerPos( ::Dynamic __o_snap){
            		 ::Dynamic snap = __o_snap;
            		if (::hx::IsNull(__o_snap)) snap = true;
            	HX_STACKFRAME(&_hx_pos_8fcf73527616c70a_1071_updatePointerPos)
HXLINE(1072)		Float offX = ( (Float)(0) );
HXLINE(1073)		Float offY = ( (Float)(0) );
HXLINE(1074)		if (!(this->character->isPlayer)) {
HXLINE(1076)			Float offX1 = (this->character->getMidpoint(null())->x + 150);
HXDLIN(1076)			offX = (offX1 + this->character->cameraPosition->__get(0));
HXLINE(1077)			Float offY1 = (this->character->getMidpoint(null())->y - ( (Float)(100) ));
HXDLIN(1077)			offY = (offY1 + this->character->cameraPosition->__get(1));
            		}
            		else {
HXLINE(1081)			Float offX2 = (this->character->getMidpoint(null())->x - ( (Float)(100) ));
HXDLIN(1081)			offX = (offX2 - this->character->cameraPosition->__get(0));
HXLINE(1082)			Float offY2 = (this->character->getMidpoint(null())->y - ( (Float)(100) ));
HXDLIN(1082)			offY = (offY2 + this->character->cameraPosition->__get(1));
            		}
HXLINE(1084)		this->cameraFollowPointer->setPosition(offX,offY);
HXLINE(1086)		if (( (bool)(snap) )) {
HXLINE(1088)			{
HXLINE(1088)				 ::flixel::math::FlxBasePoint this1 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN(1088)				Float x = this->cameraFollowPointer->getMidpoint(null())->x;
HXDLIN(1088)				this1->set_x((x - (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            			}
HXLINE(1089)			{
HXLINE(1089)				 ::flixel::math::FlxBasePoint this2 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN(1089)				Float y = this->cameraFollowPointer->getMidpoint(null())->y;
HXDLIN(1089)				this2->set_y((y - (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) ))));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CharacterEditorState_obj,updatePointerPos,(void))

void CharacterEditorState_obj::updateHealthBar(){
            	HX_STACKFRAME(&_hx_pos_8fcf73527616c70a_1094_updateHealthBar)
HXLINE(1095)		this->healthColorStepperR->set_value(( (Float)(this->character->healthColorArray->__get(0)) ));
HXLINE(1096)		this->healthColorStepperG->set_value(( (Float)(this->character->healthColorArray->__get(1)) ));
HXLINE(1097)		this->healthColorStepperB->set_value(( (Float)(this->character->healthColorArray->__get(2)) ));
HXLINE(1098)		 ::flixel::FlxSprite _hx_tmp = this->healthBar->leftBar;
HXDLIN(1098)		 ::flixel::FlxSprite _hx_tmp1 = this->healthBar->rightBar;
HXDLIN(1098)		int Red = this->character->healthColorArray->__get(0);
HXDLIN(1098)		int Green = this->character->healthColorArray->__get(1);
HXDLIN(1098)		int Blue = this->character->healthColorArray->__get(2);
HXDLIN(1098)		int Alpha = 255;
HXDLIN(1098)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(1098)		{
HXLINE(1098)			color = (color & -16711681);
HXDLIN(1098)			int color1;
HXDLIN(1098)			if ((Red > 255)) {
HXLINE(1098)				color1 = 255;
            			}
            			else {
HXLINE(1098)				if ((Red < 0)) {
HXLINE(1098)					color1 = 0;
            				}
            				else {
HXLINE(1098)					color1 = Red;
            				}
            			}
HXDLIN(1098)			color = (color | (color1 << 16));
            		}
HXDLIN(1098)		{
HXLINE(1098)			color = (color & -65281);
HXDLIN(1098)			int color2;
HXDLIN(1098)			if ((Green > 255)) {
HXLINE(1098)				color2 = 255;
            			}
            			else {
HXLINE(1098)				if ((Green < 0)) {
HXLINE(1098)					color2 = 0;
            				}
            				else {
HXLINE(1098)					color2 = Green;
            				}
            			}
HXDLIN(1098)			color = (color | (color2 << 8));
            		}
HXDLIN(1098)		{
HXLINE(1098)			color = (color & -256);
HXDLIN(1098)			int color3;
HXDLIN(1098)			if ((Blue > 255)) {
HXLINE(1098)				color3 = 255;
            			}
            			else {
HXLINE(1098)				if ((Blue < 0)) {
HXLINE(1098)					color3 = 0;
            				}
            				else {
HXLINE(1098)					color3 = Blue;
            				}
            			}
HXDLIN(1098)			color = (color | color3);
            		}
HXDLIN(1098)		{
HXLINE(1098)			color = (color & 16777215);
HXDLIN(1098)			int color4;
HXDLIN(1098)			if ((Alpha > 255)) {
HXLINE(1098)				color4 = 255;
            			}
            			else {
HXLINE(1098)				if ((Alpha < 0)) {
HXLINE(1098)					color4 = 0;
            				}
            				else {
HXLINE(1098)					color4 = Alpha;
            				}
            			}
HXDLIN(1098)			color = (color | (color4 << 24));
            		}
HXDLIN(1098)		_hx_tmp->set_color(_hx_tmp1->set_color(color));
HXLINE(1099)		this->healthIcon->changeIcon(this->character->healthIcon,false);
HXLINE(1100)		::String _hx_tmp2 = (HX_("Character: ",6f,a2,f1,a2) + this->_char);
HXDLIN(1100)		::backend::DiscordClient_obj::changePresence(HX_("Character Editor",84,45,58,b1),_hx_tmp2,this->healthIcon->getCharacter(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,updateHealthBar,(void))

void CharacterEditorState_obj::updatePresence(){
            	HX_STACKFRAME(&_hx_pos_8fcf73527616c70a_1106_updatePresence)
HXDLIN(1106)		::String _hx_tmp = (HX_("Character: ",6f,a2,f1,a2) + this->_char);
HXDLIN(1106)		::backend::DiscordClient_obj::changePresence(HX_("Character Editor",84,45,58,b1),_hx_tmp,this->healthIcon->getCharacter(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,updatePresence,(void))

void CharacterEditorState_obj::reloadAnimList(){
            	HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_1111_reloadAnimList)
HXLINE(1112)		this->anims = this->character->animationsArray;
HXLINE(1113)		if ((this->anims->length > 0)) {
HXLINE(1113)			this->character->playAnim(( (::String)(this->anims->__get(0)->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),true,null(),null());
            		}
HXLINE(1114)		this->curAnim = 0;
HXLINE(1116)		{
HXLINE(1116)			 ::Dynamic filter = null();
HXDLIN(1116)			 ::flixel::group::FlxTypedGroupIterator text =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->animsTxtGroup->members,filter);
HXDLIN(1116)			while(text->hasNext()){
HXLINE(1116)				 ::flixel::text::FlxText text1 = text->next().StaticCast<  ::flixel::text::FlxText >();
HXLINE(1117)				text1->kill();
            			}
            		}
HXLINE(1119)		int daLoop = 0;
HXLINE(1120)		{
HXLINE(1120)			int _g = 0;
HXDLIN(1120)			::Array< ::Dynamic> _g1 = this->anims;
HXDLIN(1120)			while((_g < _g1->length)){
HXLINE(1120)				 ::Dynamic anim = _g1->__get(_g);
HXDLIN(1120)				_g = (_g + 1);
HXLINE(1122)				 ::flixel::text::FlxText text2 = this->animsTxtGroup->recycle(::hx::ClassOf< ::flixel::text::FlxText >(),null(),null(),null()).StaticCast<  ::flixel::text::FlxText >();
HXLINE(1123)				text2->set_x(( (Float)(10) ));
HXLINE(1124)				text2->set_y(( (Float)((32 + (20 * daLoop))) ));
HXLINE(1125)				text2->set_fieldWidth(( (Float)(400) ));
HXLINE(1126)				text2->set_fieldHeight(( (Float)(20) ));
HXLINE(1127)				::String _hx_tmp = ( (::String)((anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic) + HX_(": ",a6,32,00,00))) );
HXDLIN(1127)				text2->set_text((_hx_tmp + ::Std_obj::string( ::Dynamic(anim->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic)))));
HXLINE(1128)				text2->setFormat(null(),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_FAST_dyn(),-16777216,null());
HXLINE(1129)				{
HXLINE(1129)					 ::flixel::math::FlxBasePoint this1 = text2->scrollFactor;
HXDLIN(1129)					this1->set_x(( (Float)(0) ));
HXDLIN(1129)					this1->set_y(( (Float)(0) ));
            				}
HXLINE(1130)				text2->set_borderSize(( (Float)(1) ));
HXLINE(1131)				this->animsTxtGroup->add(text2).StaticCast<  ::flixel::text::FlxText >();
HXLINE(1133)				daLoop = (daLoop + 1);
            			}
            		}
HXLINE(1135)		{
HXLINE(1135)			int daLoop1 = 0;
HXDLIN(1135)			{
HXLINE(1135)				 ::Dynamic filter1 = null();
HXDLIN(1135)				 ::flixel::group::FlxTypedGroupIterator text3 =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->animsTxtGroup->members,filter1);
HXDLIN(1135)				while(text3->hasNext()){
HXLINE(1135)					 ::flixel::text::FlxText text4 = text3->next().StaticCast<  ::flixel::text::FlxText >();
HXDLIN(1135)					text4->set_color(-1);
HXDLIN(1135)					if ((daLoop1 == this->curAnim)) {
HXLINE(1135)						text4->set_color(-16711936);
            					}
HXDLIN(1135)					daLoop1 = (daLoop1 + 1);
            				}
            			}
            		}
HXLINE(1136)		if (::hx::IsNotNull( this->animationDropDown )) {
HXLINE(1136)			this->reloadAnimationDropDown();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,reloadAnimList,(void))

void CharacterEditorState_obj::updateTextColors(){
            	HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_1140_updateTextColors)
HXLINE(1141)		int daLoop = 0;
HXLINE(1142)		{
HXLINE(1142)			 ::Dynamic filter = null();
HXDLIN(1142)			 ::flixel::group::FlxTypedGroupIterator text =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->animsTxtGroup->members,filter);
HXDLIN(1142)			while(text->hasNext()){
HXLINE(1142)				 ::flixel::text::FlxText text1 = text->next().StaticCast<  ::flixel::text::FlxText >();
HXLINE(1144)				text1->set_color(-1);
HXLINE(1145)				if ((daLoop == this->curAnim)) {
HXLINE(1145)					text1->set_color(-16711936);
            				}
HXLINE(1146)				daLoop = (daLoop + 1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,updateTextColors,(void))

void CharacterEditorState_obj::updateCharacterPositions(){
            	HX_STACKFRAME(&_hx_pos_8fcf73527616c70a_1151_updateCharacterPositions)
HXLINE(1152)		bool _hx_tmp;
HXDLIN(1152)		bool _hx_tmp1;
HXDLIN(1152)		if (::hx::IsNotNull( this->character )) {
HXLINE(1152)			_hx_tmp1 = !(this->character->isPlayer);
            		}
            		else {
HXLINE(1152)			_hx_tmp1 = false;
            		}
HXDLIN(1152)		if (!(_hx_tmp1)) {
HXLINE(1152)			if (::hx::IsNull( this->character )) {
HXLINE(1152)				::String name = this->_char;
HXDLIN(1152)				bool _hx_tmp2;
HXDLIN(1152)				bool _hx_tmp3;
HXDLIN(1152)				bool _hx_tmp4;
HXDLIN(1152)				bool _hx_tmp5;
HXDLIN(1152)				bool _hx_tmp6;
HXDLIN(1152)				bool _hx_tmp7;
HXDLIN(1152)				if ((name != HX_("bf",c4,55,00,00))) {
HXLINE(1152)					_hx_tmp7 = !(::StringTools_obj::startsWith(name,HX_("bf-",e9,b5,4a,00)));
            				}
            				else {
HXLINE(1152)					_hx_tmp7 = false;
            				}
HXDLIN(1152)				if (_hx_tmp7) {
HXLINE(1152)					_hx_tmp6 = !(::StringTools_obj::endsWith(name,HX_("-player",4e,cb,fe,86)));
            				}
            				else {
HXLINE(1152)					_hx_tmp6 = false;
            				}
HXDLIN(1152)				if (_hx_tmp6) {
HXLINE(1152)					_hx_tmp5 = !(::StringTools_obj::endsWith(name,HX_("-dead",51,69,6e,2b)));
            				}
            				else {
HXLINE(1152)					_hx_tmp5 = false;
            				}
HXDLIN(1152)				if (!(_hx_tmp5)) {
HXLINE(1152)					_hx_tmp4 = ::StringTools_obj::endsWith(name,HX_("-opponent",ca,2e,28,0d));
            				}
            				else {
HXLINE(1152)					_hx_tmp4 = true;
            				}
HXDLIN(1152)				if (!(_hx_tmp4)) {
HXLINE(1152)					_hx_tmp3 = ::StringTools_obj::startsWith(name,HX_("gf-",2e,81,4e,00));
            				}
            				else {
HXLINE(1152)					_hx_tmp3 = true;
            				}
HXDLIN(1152)				if (!(_hx_tmp3)) {
HXLINE(1152)					_hx_tmp2 = ::StringTools_obj::endsWith(name,HX_("-gf",8c,7f,22,00));
            				}
            				else {
HXLINE(1152)					_hx_tmp2 = true;
            				}
HXDLIN(1152)				if (!(_hx_tmp2)) {
HXLINE(1152)					_hx_tmp = (name == HX_("gf",1f,5a,00,00));
            				}
            				else {
HXLINE(1152)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(1152)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1152)			_hx_tmp = true;
            		}
HXDLIN(1152)		if (_hx_tmp) {
HXLINE(1152)			this->character->setPosition(this->dadPosition->x,this->dadPosition->y);
            		}
            		else {
HXLINE(1153)			this->character->setPosition(this->bfPosition->x,this->bfPosition->y);
            		}
HXLINE(1155)		 ::objects::Character fh = this->character;
HXDLIN(1155)		fh->set_x((fh->x + this->character->positionArray->__get(0)));
HXLINE(1156)		 ::objects::Character fh1 = this->character;
HXDLIN(1156)		fh1->set_y((fh1->y + this->character->positionArray->__get(1)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,updateCharacterPositions,(void))

bool CharacterEditorState_obj::predictCharacterIsNotPlayer(::String name){
            	HX_STACKFRAME(&_hx_pos_8fcf73527616c70a_1161_predictCharacterIsNotPlayer)
HXDLIN(1161)		bool _hx_tmp;
HXDLIN(1161)		bool _hx_tmp1;
HXDLIN(1161)		bool _hx_tmp2;
HXDLIN(1161)		bool _hx_tmp3;
HXDLIN(1161)		bool _hx_tmp4;
HXDLIN(1161)		bool _hx_tmp5;
HXDLIN(1161)		if ((name != HX_("bf",c4,55,00,00))) {
HXDLIN(1161)			_hx_tmp5 = !(::StringTools_obj::startsWith(name,HX_("bf-",e9,b5,4a,00)));
            		}
            		else {
HXDLIN(1161)			_hx_tmp5 = false;
            		}
HXDLIN(1161)		if (_hx_tmp5) {
HXDLIN(1161)			_hx_tmp4 = !(::StringTools_obj::endsWith(name,HX_("-player",4e,cb,fe,86)));
            		}
            		else {
HXDLIN(1161)			_hx_tmp4 = false;
            		}
HXDLIN(1161)		if (_hx_tmp4) {
HXDLIN(1161)			_hx_tmp3 = !(::StringTools_obj::endsWith(name,HX_("-dead",51,69,6e,2b)));
            		}
            		else {
HXDLIN(1161)			_hx_tmp3 = false;
            		}
HXDLIN(1161)		if (!(_hx_tmp3)) {
HXDLIN(1161)			_hx_tmp2 = ::StringTools_obj::endsWith(name,HX_("-opponent",ca,2e,28,0d));
            		}
            		else {
HXDLIN(1161)			_hx_tmp2 = true;
            		}
HXDLIN(1161)		if (!(_hx_tmp2)) {
HXDLIN(1161)			_hx_tmp1 = ::StringTools_obj::startsWith(name,HX_("gf-",2e,81,4e,00));
            		}
            		else {
HXDLIN(1161)			_hx_tmp1 = true;
            		}
HXDLIN(1161)		if (!(_hx_tmp1)) {
HXDLIN(1161)			_hx_tmp = ::StringTools_obj::endsWith(name,HX_("-gf",8c,7f,22,00));
            		}
            		else {
HXDLIN(1161)			_hx_tmp = true;
            		}
HXDLIN(1161)		if (!(_hx_tmp)) {
HXLINE(1162)			return (name == HX_("gf",1f,5a,00,00));
            		}
            		else {
HXDLIN(1161)			return true;
            		}
HXDLIN(1161)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(CharacterEditorState_obj,predictCharacterIsNotPlayer,return )

void CharacterEditorState_obj::addAnimation(::String anim,::String name,Float fps,bool loop,::Array< int > indices){
            	HX_STACKFRAME(&_hx_pos_8fcf73527616c70a_1166_addAnimation)
HXLINE(1167)		if (!(this->character->isAnimateAtlas)) {
HXLINE(1169)			bool _hx_tmp;
HXDLIN(1169)			if (::hx::IsNotNull( indices )) {
HXLINE(1169)				_hx_tmp = (indices->length > 0);
            			}
            			else {
HXLINE(1169)				_hx_tmp = false;
            			}
HXDLIN(1169)			if (_hx_tmp) {
HXLINE(1170)				this->character->animation->addByIndices(anim,name,indices,HX_("",00,00,00,00),fps,loop,null(),null());
            			}
            			else {
HXLINE(1172)				this->character->animation->addByPrefix(anim,name,fps,loop,null(),null());
            			}
            		}
            		else {
HXLINE(1176)			bool _hx_tmp1;
HXDLIN(1176)			if (::hx::IsNotNull( indices )) {
HXLINE(1176)				_hx_tmp1 = (indices->length > 0);
            			}
            			else {
HXLINE(1176)				_hx_tmp1 = false;
            			}
HXDLIN(1176)			if (_hx_tmp1) {
HXLINE(1177)				this->character->atlas->anim->addBySymbolIndices(anim,name,indices,fps,loop,null(),null());
            			}
            			else {
HXLINE(1179)				this->character->atlas->anim->addBySymbol(anim,name,fps,loop,null(),null());
            			}
            		}
HXLINE(1182)		if (!(this->character->animOffsets->exists(anim))) {
HXLINE(1183)			this->character->addOffset(anim,0,0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(CharacterEditorState_obj,addAnimation,(void))

 ::Dynamic CharacterEditorState_obj::newAnim(::String anim,::String name){
            	HX_STACKFRAME(&_hx_pos_8fcf73527616c70a_1188_newAnim)
HXDLIN(1188)		return  ::Dynamic(::hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("offsets",80,09,65,d7),::Array_obj< int >::fromData( _hx_array_data_788c020f_81,2))
            			->setFixed(1,HX_("indices",27,47,54,e3),::Array_obj< int >::__new(0))
            			->setFixed(2,HX_("fps",e9,c7,4d,00),24)
            			->setFixed(3,HX_("anim",11,86,71,40),anim)
            			->setFixed(4,HX_("loop",64,a6,b7,47),false)
            			->setFixed(5,HX_("name",4b,72,ff,48),name));
            	}


HX_DEFINE_DYNAMIC_FUNC2(CharacterEditorState_obj,newAnim,return )

void CharacterEditorState_obj::reloadCharacterDropDown(){
            	HX_STACKFRAME(&_hx_pos_8fcf73527616c70a_1199_reloadCharacterDropDown)
HXLINE(1200)		::String defaultDirectory = HX_("assets/shared/",1e,69,1e,47);
HXDLIN(1200)		bool allowDuplicates = false;
HXDLIN(1200)		if (::hx::IsNull( defaultDirectory )) {
HXLINE(1200)			defaultDirectory = HX_("assets/shared/",1e,69,1e,47);
            		}
HXDLIN(1200)		defaultDirectory = ::StringTools_obj::trim(defaultDirectory);
HXDLIN(1200)		if (!(::StringTools_obj::endsWith(defaultDirectory,HX_("/",2f,00,00,00)))) {
HXLINE(1200)			defaultDirectory = (defaultDirectory + HX_("/",2f,00,00,00));
            		}
HXDLIN(1200)		if (!(::StringTools_obj::startsWith(defaultDirectory,HX_("assets/",4c,2a,dc,36)))) {
HXLINE(1200)			defaultDirectory = (HX_("assets/",4c,2a,dc,36) + defaultDirectory);
            		}
HXDLIN(1200)		::Array< ::String > mergedList = ::Array_obj< ::String >::__new(0);
HXDLIN(1200)		::Array< ::String > foldersToCheck = ::Array_obj< ::String >::__new(0);
HXDLIN(1200)		if (::sys::FileSystem_obj::exists((defaultDirectory + HX_("data/characterList.txt",c4,ce,ff,de)))) {
HXLINE(1200)			foldersToCheck->push((defaultDirectory + HX_("data/characterList.txt",c4,ce,ff,de)));
            		}
HXDLIN(1200)		{
HXLINE(1200)			{
HXLINE(1200)				int _g = 0;
HXDLIN(1200)				::Array< ::String > _g1 = ::backend::Mods_obj::globalMods;
HXDLIN(1200)				while((_g < _g1->length)){
HXLINE(1200)					::String mod = _g1->__get(_g);
HXDLIN(1200)					_g = (_g + 1);
HXDLIN(1200)					::String key = ((mod + HX_("/",2f,00,00,00)) + HX_("data/characterList.txt",c4,ce,ff,de));
HXDLIN(1200)					if (::hx::IsNull( key )) {
HXLINE(1200)						key = HX_("",00,00,00,00);
            					}
HXDLIN(1200)					::String folder = (HX_("mods/",9e,2f,58,0c) + key);
HXDLIN(1200)					bool _hx_tmp;
HXDLIN(1200)					if (::sys::FileSystem_obj::exists(folder)) {
HXLINE(1200)						_hx_tmp = !(foldersToCheck->contains(folder));
            					}
            					else {
HXLINE(1200)						_hx_tmp = false;
            					}
HXDLIN(1200)					if (_hx_tmp) {
HXLINE(1200)						foldersToCheck->push(folder);
            					}
            				}
            			}
HXDLIN(1200)			::String key1 = HX_("data/characterList.txt",c4,ce,ff,de);
HXDLIN(1200)			if (::hx::IsNull( key1 )) {
HXLINE(1200)				key1 = HX_("",00,00,00,00);
            			}
HXDLIN(1200)			::String folder1 = (HX_("mods/",9e,2f,58,0c) + key1);
HXDLIN(1200)			bool _hx_tmp1;
HXDLIN(1200)			if (::sys::FileSystem_obj::exists(folder1)) {
HXLINE(1200)				_hx_tmp1 = !(foldersToCheck->contains(folder1));
            			}
            			else {
HXLINE(1200)				_hx_tmp1 = false;
            			}
HXDLIN(1200)			if (_hx_tmp1) {
HXLINE(1200)				::String key2 = HX_("data/characterList.txt",c4,ce,ff,de);
HXDLIN(1200)				if (::hx::IsNull( key2 )) {
HXLINE(1200)					key2 = HX_("",00,00,00,00);
            				}
HXDLIN(1200)				foldersToCheck->push((HX_("mods/",9e,2f,58,0c) + key2));
            			}
HXDLIN(1200)			bool _hx_tmp2;
HXDLIN(1200)			if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE(1200)				_hx_tmp2 = (::backend::Mods_obj::currentModDirectory.length > 0);
            			}
            			else {
HXLINE(1200)				_hx_tmp2 = false;
            			}
HXDLIN(1200)			if (_hx_tmp2) {
HXLINE(1200)				::String key3 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + HX_("data/characterList.txt",c4,ce,ff,de));
HXDLIN(1200)				if (::hx::IsNull( key3 )) {
HXLINE(1200)					key3 = HX_("",00,00,00,00);
            				}
HXDLIN(1200)				::String folder2 = (HX_("mods/",9e,2f,58,0c) + key3);
HXDLIN(1200)				bool _hx_tmp3;
HXDLIN(1200)				if (::sys::FileSystem_obj::exists(folder2)) {
HXLINE(1200)					_hx_tmp3 = !(foldersToCheck->contains(folder2));
            				}
            				else {
HXLINE(1200)					_hx_tmp3 = false;
            				}
HXDLIN(1200)				if (_hx_tmp3) {
HXLINE(1200)					foldersToCheck->push(folder2);
            				}
            			}
            		}
HXDLIN(1200)		::Array< ::String > paths = foldersToCheck;
HXDLIN(1200)		::String defaultPath = (defaultDirectory + HX_("data/characterList.txt",c4,ce,ff,de));
HXDLIN(1200)		if (paths->contains(defaultPath)) {
HXLINE(1200)			paths->remove(defaultPath);
HXDLIN(1200)			paths->insert(0,defaultPath);
            		}
HXDLIN(1200)		{
HXLINE(1200)			int _g2 = 0;
HXDLIN(1200)			while((_g2 < paths->length)){
HXLINE(1200)				::String file = paths->__get(_g2);
HXDLIN(1200)				_g2 = (_g2 + 1);
HXDLIN(1200)				::String path = file;
HXDLIN(1200)				::String daList = null();
HXDLIN(1200)				::Array< ::String > formatted = path.split(HX_(":",3a,00,00,00));
HXDLIN(1200)				path = formatted->__get((formatted->length - 1));
HXDLIN(1200)				if (::sys::FileSystem_obj::exists(path)) {
HXLINE(1200)					daList = ::sys::io::File_obj::getContent(path);
            				}
HXDLIN(1200)				::Array< ::String > list;
HXDLIN(1200)				if (::hx::IsNotNull( daList )) {
HXLINE(1200)					::Array< ::String > daList1 = ::Array_obj< ::String >::__new(0);
HXDLIN(1200)					daList1 = ::StringTools_obj::trim(daList).split(HX_("\n",0a,00,00,00));
HXDLIN(1200)					{
HXLINE(1200)						int _g3 = 0;
HXDLIN(1200)						int _g4 = daList1->length;
HXDLIN(1200)						while((_g3 < _g4)){
HXLINE(1200)							_g3 = (_g3 + 1);
HXDLIN(1200)							int i = (_g3 - 1);
HXDLIN(1200)							daList1[i] = ::StringTools_obj::trim(daList1->__get(i));
            						}
            					}
HXDLIN(1200)					list = daList1;
            				}
            				else {
HXLINE(1200)					list = ::Array_obj< ::String >::__new(0);
            				}
HXDLIN(1200)				{
HXLINE(1200)					int _g5 = 0;
HXDLIN(1200)					while((_g5 < list->length)){
HXLINE(1200)						::String value = list->__get(_g5);
HXDLIN(1200)						_g5 = (_g5 + 1);
HXDLIN(1200)						bool _hx_tmp4;
HXDLIN(1200)						bool _hx_tmp5;
HXDLIN(1200)						if (!(allowDuplicates)) {
HXLINE(1200)							_hx_tmp5 = !(mergedList->contains(value));
            						}
            						else {
HXLINE(1200)							_hx_tmp5 = true;
            						}
HXDLIN(1200)						if (_hx_tmp5) {
HXLINE(1200)							_hx_tmp4 = (value.length > 0);
            						}
            						else {
HXLINE(1200)							_hx_tmp4 = false;
            						}
HXDLIN(1200)						if (_hx_tmp4) {
HXLINE(1200)							mergedList->push(value);
            						}
            					}
            				}
            			}
            		}
HXDLIN(1200)		this->characterList = mergedList;
HXLINE(1201)		::Array< ::String > foldersToCheck1 = ::Array_obj< ::String >::__new(0);
HXDLIN(1201)		if (::sys::FileSystem_obj::exists((HX_("assets/shared/",1e,69,1e,47) + HX_("characters/",45,3c,bf,be)))) {
HXLINE(1201)			foldersToCheck1->push((HX_("assets/shared/",1e,69,1e,47) + HX_("characters/",45,3c,bf,be)));
            		}
HXDLIN(1201)		{
HXLINE(1201)			{
HXLINE(1201)				int _g6 = 0;
HXDLIN(1201)				::Array< ::String > _g7 = ::backend::Mods_obj::globalMods;
HXDLIN(1201)				while((_g6 < _g7->length)){
HXLINE(1201)					::String mod1 = _g7->__get(_g6);
HXDLIN(1201)					_g6 = (_g6 + 1);
HXDLIN(1201)					::String key4 = ((mod1 + HX_("/",2f,00,00,00)) + HX_("characters/",45,3c,bf,be));
HXDLIN(1201)					if (::hx::IsNull( key4 )) {
HXLINE(1201)						key4 = HX_("",00,00,00,00);
            					}
HXDLIN(1201)					::String folder3 = (HX_("mods/",9e,2f,58,0c) + key4);
HXDLIN(1201)					bool _hx_tmp6;
HXDLIN(1201)					if (::sys::FileSystem_obj::exists(folder3)) {
HXLINE(1201)						_hx_tmp6 = !(foldersToCheck1->contains(folder3));
            					}
            					else {
HXLINE(1201)						_hx_tmp6 = false;
            					}
HXDLIN(1201)					if (_hx_tmp6) {
HXLINE(1201)						foldersToCheck1->push(folder3);
            					}
            				}
            			}
HXDLIN(1201)			::String key5 = HX_("characters/",45,3c,bf,be);
HXDLIN(1201)			if (::hx::IsNull( key5 )) {
HXLINE(1201)				key5 = HX_("",00,00,00,00);
            			}
HXDLIN(1201)			::String folder4 = (HX_("mods/",9e,2f,58,0c) + key5);
HXDLIN(1201)			bool _hx_tmp7;
HXDLIN(1201)			if (::sys::FileSystem_obj::exists(folder4)) {
HXLINE(1201)				_hx_tmp7 = !(foldersToCheck1->contains(folder4));
            			}
            			else {
HXLINE(1201)				_hx_tmp7 = false;
            			}
HXDLIN(1201)			if (_hx_tmp7) {
HXLINE(1201)				::String key6 = HX_("characters/",45,3c,bf,be);
HXDLIN(1201)				if (::hx::IsNull( key6 )) {
HXLINE(1201)					key6 = HX_("",00,00,00,00);
            				}
HXDLIN(1201)				foldersToCheck1->push((HX_("mods/",9e,2f,58,0c) + key6));
            			}
HXDLIN(1201)			bool _hx_tmp8;
HXDLIN(1201)			if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE(1201)				_hx_tmp8 = (::backend::Mods_obj::currentModDirectory.length > 0);
            			}
            			else {
HXLINE(1201)				_hx_tmp8 = false;
            			}
HXDLIN(1201)			if (_hx_tmp8) {
HXLINE(1201)				::String key7 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + HX_("characters/",45,3c,bf,be));
HXDLIN(1201)				if (::hx::IsNull( key7 )) {
HXLINE(1201)					key7 = HX_("",00,00,00,00);
            				}
HXDLIN(1201)				::String folder5 = (HX_("mods/",9e,2f,58,0c) + key7);
HXDLIN(1201)				bool _hx_tmp9;
HXDLIN(1201)				if (::sys::FileSystem_obj::exists(folder5)) {
HXLINE(1201)					_hx_tmp9 = !(foldersToCheck1->contains(folder5));
            				}
            				else {
HXLINE(1201)					_hx_tmp9 = false;
            				}
HXDLIN(1201)				if (_hx_tmp9) {
HXLINE(1201)					foldersToCheck1->push(folder5);
            				}
            			}
            		}
HXDLIN(1201)		::Array< ::String > foldersToCheck2 = foldersToCheck1;
HXLINE(1202)		{
HXLINE(1202)			int _g8 = 0;
HXDLIN(1202)			while((_g8 < foldersToCheck2->length)){
HXLINE(1202)				::String folder6 = foldersToCheck2->__get(_g8);
HXDLIN(1202)				_g8 = (_g8 + 1);
HXLINE(1203)				{
HXLINE(1203)					int _g9 = 0;
HXDLIN(1203)					::Array< ::String > _g10 = ::sys::FileSystem_obj::readDirectory(folder6);
HXDLIN(1203)					while((_g9 < _g10->length)){
HXLINE(1203)						::String file1 = _g10->__get(_g9);
HXDLIN(1203)						_g9 = (_g9 + 1);
HXLINE(1204)						if (::StringTools_obj::endsWith(file1.toLowerCase(),HX_(".json",56,f1,d6,c2))) {
HXLINE(1206)							::String charToCheck = file1.substr(0,(file1.length - 5));
HXLINE(1207)							if (!(this->characterList->contains(charToCheck))) {
HXLINE(1208)								this->characterList->push(charToCheck);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1211)		if ((this->characterList->length < 1)) {
HXLINE(1211)			this->characterList->push(HX_("",00,00,00,00));
            		}
HXLINE(1212)		 ::flixel::addons::ui::FlxUIDropDownMenu _hx_tmp10 = this->charDropDown;
HXDLIN(1212)		_hx_tmp10->setData(::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(this->characterList,true));
HXLINE(1213)		this->charDropDown->set_selectedLabel(this->_char);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,reloadCharacterDropDown,(void))

void CharacterEditorState_obj::reloadAnimationDropDown(){
            	HX_STACKFRAME(&_hx_pos_8fcf73527616c70a_1216_reloadAnimationDropDown)
HXLINE(1217)		::Array< ::String > animList = ::Array_obj< ::String >::__new(0);
HXLINE(1218)		{
HXLINE(1218)			int _g = 0;
HXDLIN(1218)			::Array< ::Dynamic> _g1 = this->anims;
HXDLIN(1218)			while((_g < _g1->length)){
HXLINE(1218)				 ::Dynamic anim = _g1->__get(_g);
HXDLIN(1218)				_g = (_g + 1);
HXDLIN(1218)				animList->push( ::Dynamic(anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)));
            			}
            		}
HXLINE(1219)		if ((animList->length < 1)) {
HXLINE(1219)			animList->push(HX_("NO ANIMATIONS",6e,22,ac,1b));
            		}
HXLINE(1221)		 ::flixel::addons::ui::FlxUIDropDownMenu _hx_tmp = this->animationDropDown;
HXDLIN(1221)		_hx_tmp->setData(::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(animList,true));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,reloadAnimationDropDown,(void))

void CharacterEditorState_obj::onSaveComplete( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_8fcf73527616c70a_1227_onSaveComplete)
HXLINE(1228)		if (::hx::IsNull( this->_file )) {
HXLINE(1228)			return;
            		}
HXLINE(1229)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(1230)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(1231)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(1232)		this->_file = null();
HXLINE(1233)		::flixel::FlxG_obj::log->advanced(HX_("Successfully saved file.",c0,0d,09,f4),::flixel::_hx_system::debug::log::LogStyle_obj::NOTICE,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(CharacterEditorState_obj,onSaveComplete,(void))

void CharacterEditorState_obj::onSaveCancel( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_8fcf73527616c70a_1240_onSaveCancel)
HXLINE(1241)		if (::hx::IsNull( this->_file )) {
HXLINE(1241)			return;
            		}
HXLINE(1242)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(1243)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(1244)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(1245)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(CharacterEditorState_obj,onSaveCancel,(void))

void CharacterEditorState_obj::onSaveError( ::openfl::events::IOErrorEvent _){
            	HX_STACKFRAME(&_hx_pos_8fcf73527616c70a_1252_onSaveError)
HXLINE(1253)		if (::hx::IsNull( this->_file )) {
HXLINE(1253)			return;
            		}
HXLINE(1254)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(1255)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(1256)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(1257)		this->_file = null();
HXLINE(1258)		::flixel::FlxG_obj::log->advanced(HX_("Problem saving file",41,4c,cd,8e),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CharacterEditorState_obj,onSaveError,(void))

void CharacterEditorState_obj::saveCharacter(){
            	HX_GC_STACKFRAME(&_hx_pos_8fcf73527616c70a_1261_saveCharacter)
HXLINE(1262)		if (::hx::IsNotNull( this->_file )) {
HXLINE(1262)			return;
            		}
HXLINE(1264)		 ::Dynamic json =  ::Dynamic(::hx::Anon_obj::Create(12)
            			->setFixed(0,HX_("animations",ef,34,1c,83),this->character->animationsArray)
            			->setFixed(1,HX_("vocals_file",3d,c5,2d,83),this->character->vocalsFile)
            			->setFixed(2,HX_("no_antialiasing",f2,74,67,98),this->character->noAntialiasing)
            			->setFixed(3,HX_("image",5b,1f,69,bd),this->character->imageFile)
            			->setFixed(4,HX_("position",a9,a0,fa,ca),this->character->positionArray)
            			->setFixed(5,HX_("healthicon",15,8e,6f,17),this->character->healthIcon)
            			->setFixed(6,HX_("flip_x",26,2b,6a,3d),this->character->originalFlipX)
            			->setFixed(7,HX_("healthbar_colors",78,d9,40,40),this->character->healthColorArray)
            			->setFixed(8,HX_("camera_position",c3,d4,4a,56),this->character->cameraPosition)
            			->setFixed(9,HX_("sing_duration",84,ae,a8,66),this->character->singDuration)
            			->setFixed(10,HX_("scale",8a,ce,ce,78),this->character->jsonScale)
            			->setFixed(11,HX_("_editor_isPlayer",7e,61,dd,7d),this->character->isPlayer));
HXLINE(1281)		 ::Dynamic replacer = null();
HXDLIN(1281)		::String data = ::haxe::format::JsonPrinter_obj::print(json,replacer,HX_("\t",09,00,00,00));
HXLINE(1283)		if ((data.length > 0)) {
HXLINE(1285)			this->_file =  ::openfl::net::FileReference_obj::__alloc( HX_CTX );
HXLINE(1286)			this->_file->addEventListener(HX_("select",fc,1a,33,6a),this->onSaveComplete_dyn(),null(),null(),null());
HXLINE(1287)			this->_file->addEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null(),null(),null());
HXLINE(1288)			this->_file->addEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null(),null(),null());
HXLINE(1289)			this->_file->save(data,((HX_("",00,00,00,00) + this->_char) + HX_(".json",56,f1,d6,c2)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,saveCharacter,(void))


::hx::ObjectPtr< CharacterEditorState_obj > CharacterEditorState_obj::__new(::String _hx_char,::hx::Null< bool >  __o_goToPlayState) {
	::hx::ObjectPtr< CharacterEditorState_obj > __this = new CharacterEditorState_obj();
	__this->__construct(_hx_char,__o_goToPlayState);
	return __this;
}

::hx::ObjectPtr< CharacterEditorState_obj > CharacterEditorState_obj::__alloc(::hx::Ctx *_hx_ctx,::String _hx_char,::hx::Null< bool >  __o_goToPlayState) {
	CharacterEditorState_obj *__this = (CharacterEditorState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CharacterEditorState_obj), true, "states.editors.CharacterEditorState"));
	*(void **)__this = CharacterEditorState_obj::_hx_vtable;
	__this->__construct(_hx_char,__o_goToPlayState);
	return __this;
}

CharacterEditorState_obj::CharacterEditorState_obj()
{
}

void CharacterEditorState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CharacterEditorState);
	HX_MARK_MEMBER_NAME(character,"character");
	HX_MARK_MEMBER_NAME(ghost,"ghost");
	HX_MARK_MEMBER_NAME(animateGhost,"animateGhost");
	HX_MARK_MEMBER_NAME(animateGhostImage,"animateGhostImage");
	HX_MARK_MEMBER_NAME(cameraFollowPointer,"cameraFollowPointer");
	HX_MARK_MEMBER_NAME(isAnimateSprite,"isAnimateSprite");
	HX_MARK_MEMBER_NAME(silhouettes,"silhouettes");
	HX_MARK_MEMBER_NAME(dadPosition,"dadPosition");
	HX_MARK_MEMBER_NAME(bfPosition,"bfPosition");
	HX_MARK_MEMBER_NAME(helpBg,"helpBg");
	HX_MARK_MEMBER_NAME(helpTexts,"helpTexts");
	HX_MARK_MEMBER_NAME(cameraZoomText,"cameraZoomText");
	HX_MARK_MEMBER_NAME(frameAdvanceText,"frameAdvanceText");
	HX_MARK_MEMBER_NAME(healthBar,"healthBar");
	HX_MARK_MEMBER_NAME(healthIcon,"healthIcon");
	HX_MARK_MEMBER_NAME(copiedOffset,"copiedOffset");
	HX_MARK_MEMBER_NAME(_char,"_char");
	HX_MARK_MEMBER_NAME(_goToPlayState,"_goToPlayState");
	HX_MARK_MEMBER_NAME(anims,"anims");
	HX_MARK_MEMBER_NAME(animsTxtGroup,"animsTxtGroup");
	HX_MARK_MEMBER_NAME(curAnim,"curAnim");
	HX_MARK_MEMBER_NAME(camEditor,"camEditor");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(UI_box,"UI_box");
	HX_MARK_MEMBER_NAME(UI_characterbox,"UI_characterbox");
	HX_MARK_MEMBER_NAME(ghostAlpha,"ghostAlpha");
	HX_MARK_MEMBER_NAME(check_player,"check_player");
	HX_MARK_MEMBER_NAME(charDropDown,"charDropDown");
	HX_MARK_MEMBER_NAME(animationDropDown,"animationDropDown");
	HX_MARK_MEMBER_NAME(animationInputText,"animationInputText");
	HX_MARK_MEMBER_NAME(animationNameInputText,"animationNameInputText");
	HX_MARK_MEMBER_NAME(animationIndicesInputText,"animationIndicesInputText");
	HX_MARK_MEMBER_NAME(animationFramerate,"animationFramerate");
	HX_MARK_MEMBER_NAME(animationLoopCheckBox,"animationLoopCheckBox");
	HX_MARK_MEMBER_NAME(imageInputText,"imageInputText");
	HX_MARK_MEMBER_NAME(healthIconInputText,"healthIconInputText");
	HX_MARK_MEMBER_NAME(vocalsInputText,"vocalsInputText");
	HX_MARK_MEMBER_NAME(singDurationStepper,"singDurationStepper");
	HX_MARK_MEMBER_NAME(scaleStepper,"scaleStepper");
	HX_MARK_MEMBER_NAME(positionXStepper,"positionXStepper");
	HX_MARK_MEMBER_NAME(positionYStepper,"positionYStepper");
	HX_MARK_MEMBER_NAME(positionCameraXStepper,"positionCameraXStepper");
	HX_MARK_MEMBER_NAME(positionCameraYStepper,"positionCameraYStepper");
	HX_MARK_MEMBER_NAME(flipXCheckBox,"flipXCheckBox");
	HX_MARK_MEMBER_NAME(noAntialiasingCheckBox,"noAntialiasingCheckBox");
	HX_MARK_MEMBER_NAME(healthColorStepperR,"healthColorStepperR");
	HX_MARK_MEMBER_NAME(healthColorStepperG,"healthColorStepperG");
	HX_MARK_MEMBER_NAME(healthColorStepperB,"healthColorStepperB");
	HX_MARK_MEMBER_NAME(holdingArrowsTime,"holdingArrowsTime");
	HX_MARK_MEMBER_NAME(holdingArrowsElapsed,"holdingArrowsElapsed");
	HX_MARK_MEMBER_NAME(holdingFrameTime,"holdingFrameTime");
	HX_MARK_MEMBER_NAME(holdingFrameElapsed,"holdingFrameElapsed");
	HX_MARK_MEMBER_NAME(undoOffsets,"undoOffsets");
	HX_MARK_MEMBER_NAME(assetFolder,"assetFolder");
	HX_MARK_MEMBER_NAME(characterList,"characterList");
	HX_MARK_MEMBER_NAME(_file,"_file");
	 ::backend::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CharacterEditorState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(character,"character");
	HX_VISIT_MEMBER_NAME(ghost,"ghost");
	HX_VISIT_MEMBER_NAME(animateGhost,"animateGhost");
	HX_VISIT_MEMBER_NAME(animateGhostImage,"animateGhostImage");
	HX_VISIT_MEMBER_NAME(cameraFollowPointer,"cameraFollowPointer");
	HX_VISIT_MEMBER_NAME(isAnimateSprite,"isAnimateSprite");
	HX_VISIT_MEMBER_NAME(silhouettes,"silhouettes");
	HX_VISIT_MEMBER_NAME(dadPosition,"dadPosition");
	HX_VISIT_MEMBER_NAME(bfPosition,"bfPosition");
	HX_VISIT_MEMBER_NAME(helpBg,"helpBg");
	HX_VISIT_MEMBER_NAME(helpTexts,"helpTexts");
	HX_VISIT_MEMBER_NAME(cameraZoomText,"cameraZoomText");
	HX_VISIT_MEMBER_NAME(frameAdvanceText,"frameAdvanceText");
	HX_VISIT_MEMBER_NAME(healthBar,"healthBar");
	HX_VISIT_MEMBER_NAME(healthIcon,"healthIcon");
	HX_VISIT_MEMBER_NAME(copiedOffset,"copiedOffset");
	HX_VISIT_MEMBER_NAME(_char,"_char");
	HX_VISIT_MEMBER_NAME(_goToPlayState,"_goToPlayState");
	HX_VISIT_MEMBER_NAME(anims,"anims");
	HX_VISIT_MEMBER_NAME(animsTxtGroup,"animsTxtGroup");
	HX_VISIT_MEMBER_NAME(curAnim,"curAnim");
	HX_VISIT_MEMBER_NAME(camEditor,"camEditor");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(UI_box,"UI_box");
	HX_VISIT_MEMBER_NAME(UI_characterbox,"UI_characterbox");
	HX_VISIT_MEMBER_NAME(ghostAlpha,"ghostAlpha");
	HX_VISIT_MEMBER_NAME(check_player,"check_player");
	HX_VISIT_MEMBER_NAME(charDropDown,"charDropDown");
	HX_VISIT_MEMBER_NAME(animationDropDown,"animationDropDown");
	HX_VISIT_MEMBER_NAME(animationInputText,"animationInputText");
	HX_VISIT_MEMBER_NAME(animationNameInputText,"animationNameInputText");
	HX_VISIT_MEMBER_NAME(animationIndicesInputText,"animationIndicesInputText");
	HX_VISIT_MEMBER_NAME(animationFramerate,"animationFramerate");
	HX_VISIT_MEMBER_NAME(animationLoopCheckBox,"animationLoopCheckBox");
	HX_VISIT_MEMBER_NAME(imageInputText,"imageInputText");
	HX_VISIT_MEMBER_NAME(healthIconInputText,"healthIconInputText");
	HX_VISIT_MEMBER_NAME(vocalsInputText,"vocalsInputText");
	HX_VISIT_MEMBER_NAME(singDurationStepper,"singDurationStepper");
	HX_VISIT_MEMBER_NAME(scaleStepper,"scaleStepper");
	HX_VISIT_MEMBER_NAME(positionXStepper,"positionXStepper");
	HX_VISIT_MEMBER_NAME(positionYStepper,"positionYStepper");
	HX_VISIT_MEMBER_NAME(positionCameraXStepper,"positionCameraXStepper");
	HX_VISIT_MEMBER_NAME(positionCameraYStepper,"positionCameraYStepper");
	HX_VISIT_MEMBER_NAME(flipXCheckBox,"flipXCheckBox");
	HX_VISIT_MEMBER_NAME(noAntialiasingCheckBox,"noAntialiasingCheckBox");
	HX_VISIT_MEMBER_NAME(healthColorStepperR,"healthColorStepperR");
	HX_VISIT_MEMBER_NAME(healthColorStepperG,"healthColorStepperG");
	HX_VISIT_MEMBER_NAME(healthColorStepperB,"healthColorStepperB");
	HX_VISIT_MEMBER_NAME(holdingArrowsTime,"holdingArrowsTime");
	HX_VISIT_MEMBER_NAME(holdingArrowsElapsed,"holdingArrowsElapsed");
	HX_VISIT_MEMBER_NAME(holdingFrameTime,"holdingFrameTime");
	HX_VISIT_MEMBER_NAME(holdingFrameElapsed,"holdingFrameElapsed");
	HX_VISIT_MEMBER_NAME(undoOffsets,"undoOffsets");
	HX_VISIT_MEMBER_NAME(assetFolder,"assetFolder");
	HX_VISIT_MEMBER_NAME(characterList,"characterList");
	HX_VISIT_MEMBER_NAME(_file,"_file");
	 ::backend::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CharacterEditorState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"ghost") ) { return ::hx::Val( ghost ); }
		if (HX_FIELD_EQ(inName,"_char") ) { return ::hx::Val( _char ); }
		if (HX_FIELD_EQ(inName,"anims") ) { return ::hx::Val( anims ); }
		if (HX_FIELD_EQ(inName,"_file") ) { return ::hx::Val( _file ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"helpBg") ) { return ::hx::Val( helpBg ); }
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"UI_box") ) { return ::hx::Val( UI_box ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadBG") ) { return ::hx::Val( loadBG_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curAnim") ) { return ::hx::Val( curAnim ); }
		if (HX_FIELD_EQ(inName,"newAnim") ) { return ::hx::Val( newAnim_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getEvent") ) { return ::hx::Val( getEvent_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"character") ) { return ::hx::Val( character ); }
		if (HX_FIELD_EQ(inName,"helpTexts") ) { return ::hx::Val( helpTexts ); }
		if (HX_FIELD_EQ(inName,"healthBar") ) { return ::hx::Val( healthBar ); }
		if (HX_FIELD_EQ(inName,"camEditor") ) { return ::hx::Val( camEditor ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bfPosition") ) { return ::hx::Val( bfPosition ); }
		if (HX_FIELD_EQ(inName,"healthIcon") ) { return ::hx::Val( healthIcon ); }
		if (HX_FIELD_EQ(inName,"makeUIMenu") ) { return ::hx::Val( makeUIMenu_dyn() ); }
		if (HX_FIELD_EQ(inName,"ghostAlpha") ) { return ::hx::Val( ghostAlpha ); }
		if (HX_FIELD_EQ(inName,"addGhostUI") ) { return ::hx::Val( addGhostUI_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"silhouettes") ) { return ::hx::Val( silhouettes ); }
		if (HX_FIELD_EQ(inName,"dadPosition") ) { return ::hx::Val( dadPosition ); }
		if (HX_FIELD_EQ(inName,"undoOffsets") ) { return ::hx::Val( undoOffsets ); }
		if (HX_FIELD_EQ(inName,"assetFolder") ) { return ::hx::Val( assetFolder ); }
		if (HX_FIELD_EQ(inName,"onSaveError") ) { return ::hx::Val( onSaveError_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"animateGhost") ) { return ::hx::Val( animateGhost ); }
		if (HX_FIELD_EQ(inName,"copiedOffset") ) { return ::hx::Val( copiedOffset ); }
		if (HX_FIELD_EQ(inName,"addCharacter") ) { return ::hx::Val( addCharacter_dyn() ); }
		if (HX_FIELD_EQ(inName,"check_player") ) { return ::hx::Val( check_player ); }
		if (HX_FIELD_EQ(inName,"charDropDown") ) { return ::hx::Val( charDropDown ); }
		if (HX_FIELD_EQ(inName,"scaleStepper") ) { return ::hx::Val( scaleStepper ); }
		if (HX_FIELD_EQ(inName,"addAnimation") ) { return ::hx::Val( addAnimation_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveCancel") ) { return ::hx::Val( onSaveCancel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"animsTxtGroup") ) { return ::hx::Val( animsTxtGroup ); }
		if (HX_FIELD_EQ(inName,"addHelpScreen") ) { return ::hx::Val( addHelpScreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"addSettingsUI") ) { return ::hx::Val( addSettingsUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"flipXCheckBox") ) { return ::hx::Val( flipXCheckBox ); }
		if (HX_FIELD_EQ(inName,"characterList") ) { return ::hx::Val( characterList ); }
		if (HX_FIELD_EQ(inName,"saveCharacter") ) { return ::hx::Val( saveCharacter_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"cameraZoomText") ) { return ::hx::Val( cameraZoomText ); }
		if (HX_FIELD_EQ(inName,"_goToPlayState") ) { return ::hx::Val( _goToPlayState ); }
		if (HX_FIELD_EQ(inName,"imageInputText") ) { return ::hx::Val( imageInputText ); }
		if (HX_FIELD_EQ(inName,"addCharacterUI") ) { return ::hx::Val( addCharacterUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"updatePresence") ) { return ::hx::Val( updatePresence_dyn() ); }
		if (HX_FIELD_EQ(inName,"reloadAnimList") ) { return ::hx::Val( reloadAnimList_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveComplete") ) { return ::hx::Val( onSaveComplete_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"isAnimateSprite") ) { return ::hx::Val( isAnimateSprite ); }
		if (HX_FIELD_EQ(inName,"UI_characterbox") ) { return ::hx::Val( UI_characterbox ); }
		if (HX_FIELD_EQ(inName,"addAnimationsUI") ) { return ::hx::Val( addAnimationsUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"vocalsInputText") ) { return ::hx::Val( vocalsInputText ); }
		if (HX_FIELD_EQ(inName,"updateHealthBar") ) { return ::hx::Val( updateHealthBar_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"frameAdvanceText") ) { return ::hx::Val( frameAdvanceText ); }
		if (HX_FIELD_EQ(inName,"positionXStepper") ) { return ::hx::Val( positionXStepper ); }
		if (HX_FIELD_EQ(inName,"positionYStepper") ) { return ::hx::Val( positionYStepper ); }
		if (HX_FIELD_EQ(inName,"holdingFrameTime") ) { return ::hx::Val( holdingFrameTime ); }
		if (HX_FIELD_EQ(inName,"updatePointerPos") ) { return ::hx::Val( updatePointerPos_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateTextColors") ) { return ::hx::Val( updateTextColors_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"animateGhostImage") ) { return ::hx::Val( animateGhostImage ); }
		if (HX_FIELD_EQ(inName,"animationDropDown") ) { return ::hx::Val( animationDropDown ); }
		if (HX_FIELD_EQ(inName,"holdingArrowsTime") ) { return ::hx::Val( holdingArrowsTime ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"animationInputText") ) { return ::hx::Val( animationInputText ); }
		if (HX_FIELD_EQ(inName,"animationFramerate") ) { return ::hx::Val( animationFramerate ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"cameraFollowPointer") ) { return ::hx::Val( cameraFollowPointer ); }
		if (HX_FIELD_EQ(inName,"healthIconInputText") ) { return ::hx::Val( healthIconInputText ); }
		if (HX_FIELD_EQ(inName,"singDurationStepper") ) { return ::hx::Val( singDurationStepper ); }
		if (HX_FIELD_EQ(inName,"healthColorStepperR") ) { return ::hx::Val( healthColorStepperR ); }
		if (HX_FIELD_EQ(inName,"healthColorStepperG") ) { return ::hx::Val( healthColorStepperG ); }
		if (HX_FIELD_EQ(inName,"healthColorStepperB") ) { return ::hx::Val( healthColorStepperB ); }
		if (HX_FIELD_EQ(inName,"holdingFrameElapsed") ) { return ::hx::Val( holdingFrameElapsed ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"reloadCharacterImage") ) { return ::hx::Val( reloadCharacterImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"holdingArrowsElapsed") ) { return ::hx::Val( holdingArrowsElapsed ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"animationLoopCheckBox") ) { return ::hx::Val( animationLoopCheckBox ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"animationNameInputText") ) { return ::hx::Val( animationNameInputText ); }
		if (HX_FIELD_EQ(inName,"positionCameraXStepper") ) { return ::hx::Val( positionCameraXStepper ); }
		if (HX_FIELD_EQ(inName,"positionCameraYStepper") ) { return ::hx::Val( positionCameraYStepper ); }
		if (HX_FIELD_EQ(inName,"noAntialiasingCheckBox") ) { return ::hx::Val( noAntialiasingCheckBox ); }
		if (HX_FIELD_EQ(inName,"reloadCharacterOptions") ) { return ::hx::Val( reloadCharacterOptions_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"reloadCharacterDropDown") ) { return ::hx::Val( reloadCharacterDropDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"reloadAnimationDropDown") ) { return ::hx::Val( reloadAnimationDropDown_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"updateCharacterPositions") ) { return ::hx::Val( updateCharacterPositions_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"animationIndicesInputText") ) { return ::hx::Val( animationIndicesInputText ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"predictCharacterIsNotPlayer") ) { return ::hx::Val( predictCharacterIsNotPlayer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CharacterEditorState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"ghost") ) { ghost=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_char") ) { _char=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"anims") ) { anims=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_file") ) { _file=inValue.Cast<  ::openfl::net::FileReference >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"helpBg") ) { helpBg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UI_box") ) { UI_box=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curAnim") ) { curAnim=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"character") ) { character=inValue.Cast<  ::objects::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"helpTexts") ) { helpTexts=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBar") ) { healthBar=inValue.Cast<  ::objects::Bar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camEditor") ) { camEditor=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bfPosition") ) { bfPosition=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthIcon") ) { healthIcon=inValue.Cast<  ::objects::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ghostAlpha") ) { ghostAlpha=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"silhouettes") ) { silhouettes=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dadPosition") ) { dadPosition=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"undoOffsets") ) { undoOffsets=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"assetFolder") ) { assetFolder=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"animateGhost") ) { animateGhost=inValue.Cast<  ::flxanimate::FlxAnimate >(); return inValue; }
		if (HX_FIELD_EQ(inName,"copiedOffset") ) { copiedOffset=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_player") ) { check_player=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"charDropDown") ) { charDropDown=inValue.Cast<  ::flixel::addons::ui::FlxUIDropDownMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scaleStepper") ) { scaleStepper=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"animsTxtGroup") ) { animsTxtGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flipXCheckBox") ) { flipXCheckBox=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"characterList") ) { characterList=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"cameraZoomText") ) { cameraZoomText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_goToPlayState") ) { _goToPlayState=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"imageInputText") ) { imageInputText=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"isAnimateSprite") ) { isAnimateSprite=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UI_characterbox") ) { UI_characterbox=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vocalsInputText") ) { vocalsInputText=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"frameAdvanceText") ) { frameAdvanceText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"positionXStepper") ) { positionXStepper=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"positionYStepper") ) { positionYStepper=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holdingFrameTime") ) { holdingFrameTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"animateGhostImage") ) { animateGhostImage=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animationDropDown") ) { animationDropDown=inValue.Cast<  ::flixel::addons::ui::FlxUIDropDownMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holdingArrowsTime") ) { holdingArrowsTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"animationInputText") ) { animationInputText=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animationFramerate") ) { animationFramerate=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"cameraFollowPointer") ) { cameraFollowPointer=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthIconInputText") ) { healthIconInputText=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"singDurationStepper") ) { singDurationStepper=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthColorStepperR") ) { healthColorStepperR=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthColorStepperG") ) { healthColorStepperG=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthColorStepperB") ) { healthColorStepperB=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holdingFrameElapsed") ) { holdingFrameElapsed=inValue.Cast< Float >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"holdingArrowsElapsed") ) { holdingArrowsElapsed=inValue.Cast< Float >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"animationLoopCheckBox") ) { animationLoopCheckBox=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"animationNameInputText") ) { animationNameInputText=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"positionCameraXStepper") ) { positionCameraXStepper=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"positionCameraYStepper") ) { positionCameraYStepper=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noAntialiasingCheckBox") ) { noAntialiasingCheckBox=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"animationIndicesInputText") ) { animationIndicesInputText=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CharacterEditorState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("character",a9,db,d1,41));
	outFields->push(HX_("ghost",4f,8f,58,93));
	outFields->push(HX_("animateGhost",ee,fc,d7,04));
	outFields->push(HX_("animateGhostImage",8d,f3,3c,78));
	outFields->push(HX_("cameraFollowPointer",67,dd,eb,9c));
	outFields->push(HX_("isAnimateSprite",3c,a3,97,78));
	outFields->push(HX_("silhouettes",9b,6b,d9,40));
	outFields->push(HX_("dadPosition",10,b2,12,3e));
	outFields->push(HX_("bfPosition",8d,16,5e,4d));
	outFields->push(HX_("helpBg",e6,5e,4e,04));
	outFields->push(HX_("helpTexts",a5,ec,c6,36));
	outFields->push(HX_("cameraZoomText",25,d1,82,9b));
	outFields->push(HX_("frameAdvanceText",22,cf,32,ac));
	outFields->push(HX_("healthBar",97,8a,92,42));
	outFields->push(HX_("healthIcon",35,ba,48,02));
	outFields->push(HX_("copiedOffset",f7,dd,2d,57));
	outFields->push(HX_("_char",b5,7a,d0,f4));
	outFields->push(HX_("_goToPlayState",7b,a5,cc,c0));
	outFields->push(HX_("anims",42,c9,e3,22));
	outFields->push(HX_("animsTxtGroup",11,f6,b6,fc));
	outFields->push(HX_("curAnim",b1,f7,86,ab));
	outFields->push(HX_("camEditor",1c,1f,8e,64));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("UI_box",60,07,ac,43));
	outFields->push(HX_("UI_characterbox",0d,36,f0,05));
	outFields->push(HX_("ghostAlpha",8f,a9,36,a1));
	outFields->push(HX_("check_player",38,8d,65,c6));
	outFields->push(HX_("charDropDown",27,81,d5,54));
	outFields->push(HX_("animationDropDown",55,ef,bb,0d));
	outFields->push(HX_("animationInputText",33,7a,56,eb));
	outFields->push(HX_("animationNameInputText",68,24,12,3c));
	outFields->push(HX_("animationIndicesInputText",d4,98,c7,74));
	outFields->push(HX_("animationFramerate",e9,d5,7d,25));
	outFields->push(HX_("animationLoopCheckBox",cb,a1,1d,ab));
	outFields->push(HX_("imageInputText",fc,06,6b,e2));
	outFields->push(HX_("healthIconInputText",e2,40,32,15));
	outFields->push(HX_("vocalsInputText",99,5d,5c,6d));
	outFields->push(HX_("singDurationStepper",8e,52,ae,5a));
	outFields->push(HX_("scaleStepper",a7,a3,a9,18));
	outFields->push(HX_("positionXStepper",42,59,01,70));
	outFields->push(HX_("positionYStepper",61,cb,33,a9));
	outFields->push(HX_("positionCameraXStepper",c7,05,a8,a8));
	outFields->push(HX_("positionCameraYStepper",e6,77,da,e1));
	outFields->push(HX_("flipXCheckBox",4e,0e,ce,8c));
	outFields->push(HX_("noAntialiasingCheckBox",18,44,c1,1d));
	outFields->push(HX_("healthColorStepperR",68,28,37,8b));
	outFields->push(HX_("healthColorStepperG",5d,28,37,8b));
	outFields->push(HX_("healthColorStepperB",58,28,37,8b));
	outFields->push(HX_("holdingArrowsTime",9a,f6,8d,72));
	outFields->push(HX_("holdingArrowsElapsed",cf,c3,f8,c5));
	outFields->push(HX_("holdingFrameTime",57,dd,57,76));
	outFields->push(HX_("holdingFrameElapsed",32,f1,cf,09));
	outFields->push(HX_("undoOffsets",bc,37,89,5d));
	outFields->push(HX_("assetFolder",be,68,f2,8e));
	outFields->push(HX_("characterList",a7,ac,9f,40));
	outFields->push(HX_("_file",5b,ea,cc,f6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CharacterEditorState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::objects::Character */ ,(int)offsetof(CharacterEditorState_obj,character),HX_("character",a9,db,d1,41)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CharacterEditorState_obj,ghost),HX_("ghost",4f,8f,58,93)},
	{::hx::fsObject /*  ::flxanimate::FlxAnimate */ ,(int)offsetof(CharacterEditorState_obj,animateGhost),HX_("animateGhost",ee,fc,d7,04)},
	{::hx::fsString,(int)offsetof(CharacterEditorState_obj,animateGhostImage),HX_("animateGhostImage",8d,f3,3c,78)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CharacterEditorState_obj,cameraFollowPointer),HX_("cameraFollowPointer",67,dd,eb,9c)},
	{::hx::fsBool,(int)offsetof(CharacterEditorState_obj,isAnimateSprite),HX_("isAnimateSprite",3c,a3,97,78)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(CharacterEditorState_obj,silhouettes),HX_("silhouettes",9b,6b,d9,40)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(CharacterEditorState_obj,dadPosition),HX_("dadPosition",10,b2,12,3e)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(CharacterEditorState_obj,bfPosition),HX_("bfPosition",8d,16,5e,4d)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CharacterEditorState_obj,helpBg),HX_("helpBg",e6,5e,4e,04)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(CharacterEditorState_obj,helpTexts),HX_("helpTexts",a5,ec,c6,36)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CharacterEditorState_obj,cameraZoomText),HX_("cameraZoomText",25,d1,82,9b)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CharacterEditorState_obj,frameAdvanceText),HX_("frameAdvanceText",22,cf,32,ac)},
	{::hx::fsObject /*  ::objects::Bar */ ,(int)offsetof(CharacterEditorState_obj,healthBar),HX_("healthBar",97,8a,92,42)},
	{::hx::fsObject /*  ::objects::HealthIcon */ ,(int)offsetof(CharacterEditorState_obj,healthIcon),HX_("healthIcon",35,ba,48,02)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(CharacterEditorState_obj,copiedOffset),HX_("copiedOffset",f7,dd,2d,57)},
	{::hx::fsString,(int)offsetof(CharacterEditorState_obj,_char),HX_("_char",b5,7a,d0,f4)},
	{::hx::fsBool,(int)offsetof(CharacterEditorState_obj,_goToPlayState),HX_("_goToPlayState",7b,a5,cc,c0)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(CharacterEditorState_obj,anims),HX_("anims",42,c9,e3,22)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(CharacterEditorState_obj,animsTxtGroup),HX_("animsTxtGroup",11,f6,b6,fc)},
	{::hx::fsInt,(int)offsetof(CharacterEditorState_obj,curAnim),HX_("curAnim",b1,f7,86,ab)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(CharacterEditorState_obj,camEditor),HX_("camEditor",1c,1f,8e,64)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(CharacterEditorState_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(CharacterEditorState_obj,UI_box),HX_("UI_box",60,07,ac,43)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(CharacterEditorState_obj,UI_characterbox),HX_("UI_characterbox",0d,36,f0,05)},
	{::hx::fsFloat,(int)offsetof(CharacterEditorState_obj,ghostAlpha),HX_("ghostAlpha",8f,a9,36,a1)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(CharacterEditorState_obj,check_player),HX_("check_player",38,8d,65,c6)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIDropDownMenu */ ,(int)offsetof(CharacterEditorState_obj,charDropDown),HX_("charDropDown",27,81,d5,54)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIDropDownMenu */ ,(int)offsetof(CharacterEditorState_obj,animationDropDown),HX_("animationDropDown",55,ef,bb,0d)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(CharacterEditorState_obj,animationInputText),HX_("animationInputText",33,7a,56,eb)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(CharacterEditorState_obj,animationNameInputText),HX_("animationNameInputText",68,24,12,3c)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(CharacterEditorState_obj,animationIndicesInputText),HX_("animationIndicesInputText",d4,98,c7,74)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(CharacterEditorState_obj,animationFramerate),HX_("animationFramerate",e9,d5,7d,25)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(CharacterEditorState_obj,animationLoopCheckBox),HX_("animationLoopCheckBox",cb,a1,1d,ab)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(CharacterEditorState_obj,imageInputText),HX_("imageInputText",fc,06,6b,e2)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(CharacterEditorState_obj,healthIconInputText),HX_("healthIconInputText",e2,40,32,15)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(CharacterEditorState_obj,vocalsInputText),HX_("vocalsInputText",99,5d,5c,6d)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(CharacterEditorState_obj,singDurationStepper),HX_("singDurationStepper",8e,52,ae,5a)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(CharacterEditorState_obj,scaleStepper),HX_("scaleStepper",a7,a3,a9,18)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(CharacterEditorState_obj,positionXStepper),HX_("positionXStepper",42,59,01,70)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(CharacterEditorState_obj,positionYStepper),HX_("positionYStepper",61,cb,33,a9)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(CharacterEditorState_obj,positionCameraXStepper),HX_("positionCameraXStepper",c7,05,a8,a8)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(CharacterEditorState_obj,positionCameraYStepper),HX_("positionCameraYStepper",e6,77,da,e1)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(CharacterEditorState_obj,flipXCheckBox),HX_("flipXCheckBox",4e,0e,ce,8c)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(CharacterEditorState_obj,noAntialiasingCheckBox),HX_("noAntialiasingCheckBox",18,44,c1,1d)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(CharacterEditorState_obj,healthColorStepperR),HX_("healthColorStepperR",68,28,37,8b)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(CharacterEditorState_obj,healthColorStepperG),HX_("healthColorStepperG",5d,28,37,8b)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(CharacterEditorState_obj,healthColorStepperB),HX_("healthColorStepperB",58,28,37,8b)},
	{::hx::fsFloat,(int)offsetof(CharacterEditorState_obj,holdingArrowsTime),HX_("holdingArrowsTime",9a,f6,8d,72)},
	{::hx::fsFloat,(int)offsetof(CharacterEditorState_obj,holdingArrowsElapsed),HX_("holdingArrowsElapsed",cf,c3,f8,c5)},
	{::hx::fsFloat,(int)offsetof(CharacterEditorState_obj,holdingFrameTime),HX_("holdingFrameTime",57,dd,57,76)},
	{::hx::fsFloat,(int)offsetof(CharacterEditorState_obj,holdingFrameElapsed),HX_("holdingFrameElapsed",32,f1,cf,09)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(CharacterEditorState_obj,undoOffsets),HX_("undoOffsets",bc,37,89,5d)},
	{::hx::fsString,(int)offsetof(CharacterEditorState_obj,assetFolder),HX_("assetFolder",be,68,f2,8e)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(CharacterEditorState_obj,characterList),HX_("characterList",a7,ac,9f,40)},
	{::hx::fsObject /*  ::openfl::net::FileReference */ ,(int)offsetof(CharacterEditorState_obj,_file),HX_("_file",5b,ea,cc,f6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CharacterEditorState_obj_sStaticStorageInfo = 0;
#endif

static ::String CharacterEditorState_obj_sMemberFields[] = {
	HX_("character",a9,db,d1,41),
	HX_("ghost",4f,8f,58,93),
	HX_("animateGhost",ee,fc,d7,04),
	HX_("animateGhostImage",8d,f3,3c,78),
	HX_("cameraFollowPointer",67,dd,eb,9c),
	HX_("isAnimateSprite",3c,a3,97,78),
	HX_("silhouettes",9b,6b,d9,40),
	HX_("dadPosition",10,b2,12,3e),
	HX_("bfPosition",8d,16,5e,4d),
	HX_("helpBg",e6,5e,4e,04),
	HX_("helpTexts",a5,ec,c6,36),
	HX_("cameraZoomText",25,d1,82,9b),
	HX_("frameAdvanceText",22,cf,32,ac),
	HX_("healthBar",97,8a,92,42),
	HX_("healthIcon",35,ba,48,02),
	HX_("copiedOffset",f7,dd,2d,57),
	HX_("_char",b5,7a,d0,f4),
	HX_("_goToPlayState",7b,a5,cc,c0),
	HX_("anims",42,c9,e3,22),
	HX_("animsTxtGroup",11,f6,b6,fc),
	HX_("curAnim",b1,f7,86,ab),
	HX_("camEditor",1c,1f,8e,64),
	HX_("camHUD",e8,2b,76,b7),
	HX_("UI_box",60,07,ac,43),
	HX_("UI_characterbox",0d,36,f0,05),
	HX_("create",fc,66,0f,7c),
	HX_("addHelpScreen",8e,32,66,90),
	HX_("addCharacter",48,fd,25,41),
	HX_("makeUIMenu",81,d6,03,55),
	HX_("ghostAlpha",8f,a9,36,a1),
	HX_("addGhostUI",42,b7,a0,ed),
	HX_("check_player",38,8d,65,c6),
	HX_("charDropDown",27,81,d5,54),
	HX_("addSettingsUI",78,4f,8a,5d),
	HX_("animationDropDown",55,ef,bb,0d),
	HX_("animationInputText",33,7a,56,eb),
	HX_("animationNameInputText",68,24,12,3c),
	HX_("animationIndicesInputText",d4,98,c7,74),
	HX_("animationFramerate",e9,d5,7d,25),
	HX_("animationLoopCheckBox",cb,a1,1d,ab),
	HX_("addAnimationsUI",c4,44,96,30),
	HX_("imageInputText",fc,06,6b,e2),
	HX_("healthIconInputText",e2,40,32,15),
	HX_("vocalsInputText",99,5d,5c,6d),
	HX_("singDurationStepper",8e,52,ae,5a),
	HX_("scaleStepper",a7,a3,a9,18),
	HX_("positionXStepper",42,59,01,70),
	HX_("positionYStepper",61,cb,33,a9),
	HX_("positionCameraXStepper",c7,05,a8,a8),
	HX_("positionCameraYStepper",e6,77,da,e1),
	HX_("flipXCheckBox",4e,0e,ce,8c),
	HX_("noAntialiasingCheckBox",18,44,c1,1d),
	HX_("healthColorStepperR",68,28,37,8b),
	HX_("healthColorStepperG",5d,28,37,8b),
	HX_("healthColorStepperB",58,28,37,8b),
	HX_("addCharacterUI",9c,29,96,54),
	HX_("getEvent",a4,d7,9b,d5),
	HX_("reloadCharacterImage",2b,80,35,0a),
	HX_("reloadCharacterOptions",2e,68,40,41),
	HX_("holdingArrowsTime",9a,f6,8d,72),
	HX_("holdingArrowsElapsed",cf,c3,f8,c5),
	HX_("holdingFrameTime",57,dd,57,76),
	HX_("holdingFrameElapsed",32,f1,cf,09),
	HX_("undoOffsets",bc,37,89,5d),
	HX_("update",09,86,05,87),
	HX_("assetFolder",be,68,f2,8e),
	HX_("loadBG",6b,29,6f,58),
	HX_("updatePointerPos",40,78,8c,09),
	HX_("updateHealthBar",4e,5b,1d,92),
	HX_("updatePresence",64,45,01,9c),
	HX_("reloadAnimList",88,3b,92,6a),
	HX_("updateTextColors",a6,15,63,47),
	HX_("updateCharacterPositions",2a,9b,bf,f9),
	HX_("predictCharacterIsNotPlayer",1a,70,b5,04),
	HX_("addAnimation",a3,10,89,4a),
	HX_("newAnim",91,32,3e,f0),
	HX_("characterList",a7,ac,9f,40),
	HX_("reloadCharacterDropDown",61,a1,b4,a0),
	HX_("reloadAnimationDropDown",bc,07,b3,2b),
	HX_("_file",5b,ea,cc,f6),
	HX_("onSaveComplete",d5,ac,3f,bc),
	HX_("onSaveCancel",96,1a,31,d9),
	HX_("onSaveError",2c,b6,19,24),
	HX_("saveCharacter",ac,60,8c,66),
	::String(null()) };

::hx::Class CharacterEditorState_obj::__mClass;

void CharacterEditorState_obj::__register()
{
	CharacterEditorState_obj _hx_dummy;
	CharacterEditorState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.editors.CharacterEditorState",0f,02,8c,78);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CharacterEditorState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CharacterEditorState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CharacterEditorState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CharacterEditorState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
} // end namespace editors
