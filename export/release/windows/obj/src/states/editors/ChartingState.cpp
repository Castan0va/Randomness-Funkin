// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Conductor
#include <backend/Conductor.h>
#endif
#ifndef INCLUDED_backend_Difficulty
#include <backend/Difficulty.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_NoteTypesConfig
#include <backend/NoteTypesConfig.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_PsychCamera
#include <backend/PsychCamera.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_backend_Song
#include <backend/Song.h>
#endif
#ifndef INCLUDED_backend_StageData
#include <backend/StageData.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxGridOverlay
#include <flixel/addons/display/FlxGridOverlay.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxSlider
#include <flixel/addons/ui/FlxSlider.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxTypedUIGroup
#include <flixel/addons/ui/FlxTypedUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICheckBox
#include <flixel/addons/ui/FlxUICheckBox.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownHeader
#include <flixel/addons/ui/FlxUIDropDownHeader.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownMenu
#include <flixel/addons/ui/FlxUIDropDownMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUINumericStepper
#include <flixel/addons/ui/FlxUINumericStepper.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISlider
#include <flixel/addons/ui/FlxUISlider.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_StrNameLabel
#include <flixel/addons/ui/StrNameLabel.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFireTongue
#include <flixel/addons/ui/interfaces/IFireTongue.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteContainer
#include <flixel/group/FlxTypedSpriteContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_lime_media_AudioBuffer
#include <lime/media/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_objects_AttachedSprite
#include <objects/AttachedSprite.h>
#endif
#ifndef INCLUDED_objects_Character
#include <objects/Character.h>
#endif
#ifndef INCLUDED_objects_HealthIcon
#include <objects/HealthIcon.h>
#endif
#ifndef INCLUDED_objects_Note
#include <objects/Note.h>
#endif
#ifndef INCLUDED_objects_StrumNote
#include <objects/StrumNote.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundTransform
#include <openfl/media/SoundTransform.h>
#endif
#ifndef INCLUDED_openfl_net_FileReference
#include <openfl/net/FileReference.h>
#endif
#ifndef INCLUDED_shaders_RGBPalette
#include <shaders/RGBPalette.h>
#endif
#ifndef INCLUDED_shaders_RGBShaderReference
#include <shaders/RGBShaderReference.h>
#endif
#ifndef INCLUDED_states_LoadingState
#include <states/LoadingState.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_states_editors_AttachedFlxText
#include <states/editors/AttachedFlxText.h>
#endif
#ifndef INCLUDED_states_editors_ChartingState
#include <states/editors/ChartingState.h>
#endif
#ifndef INCLUDED_states_editors_EditorPlayState
#include <states/editors/EditorPlayState.h>
#endif
#ifndef INCLUDED_states_editors_MasterEditorMenu
#include <states/editors/MasterEditorMenu.h>
#endif
#ifndef INCLUDED_substates_Prompt
#include <substates/Prompt.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_27e1ce861cc941c0_49_new,"states.editors.ChartingState","new",0x459b218b,"states.editors.ChartingState.new","states/editors/ChartingState.hx",49,0x0f29a547)
static const Float _hx_array_data_f85b0019_1[] = {
	(Float)0,
};
static const Float _hx_array_data_f85b0019_2[] = {
	(Float)0,
};
static const Float _hx_array_data_f85b0019_3[] = {
	(Float)0,
};
static const Float _hx_array_data_f85b0019_4[] = {
	(Float)0,
};
static const int _hx_array_data_f85b0019_5[] = {
	(int)4,(int)8,(int)12,(int)16,(int)20,(int)24,(int)32,(int)48,(int)64,(int)96,(int)192,
};
static const Float _hx_array_data_f85b0019_6[] = {
	0.25,0.5,(Float)1,(Float)2,(Float)3,(Float)4,(Float)6,(Float)8,(Float)12,(Float)16,(Float)24,
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_192_create,"states.editors.ChartingState","create",0x23dce2b1,"states.editors.ChartingState.create","states/editors/ChartingState.hx",192,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_405_addSongUI,"states.editors.ChartingState","addSongUI",0x20e205d5,"states.editors.ChartingState.addSongUI","states/editors/ChartingState.hx",405,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_411_addSongUI,"states.editors.ChartingState","addSongUI",0x20e205d5,"states.editors.ChartingState.addSongUI","states/editors/ChartingState.hx",411,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_415_addSongUI,"states.editors.ChartingState","addSongUI",0x20e205d5,"states.editors.ChartingState.addSongUI","states/editors/ChartingState.hx",415,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_425_addSongUI,"states.editors.ChartingState","addSongUI",0x20e205d5,"states.editors.ChartingState.addSongUI","states/editors/ChartingState.hx",425,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_424_addSongUI,"states.editors.ChartingState","addSongUI",0x20e205d5,"states.editors.ChartingState.addSongUI","states/editors/ChartingState.hx",424,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_431_addSongUI,"states.editors.ChartingState","addSongUI",0x20e205d5,"states.editors.ChartingState.addSongUI","states/editors/ChartingState.hx",431,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_437_addSongUI,"states.editors.ChartingState","addSongUI",0x20e205d5,"states.editors.ChartingState.addSongUI","states/editors/ChartingState.hx",437,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_456_addSongUI,"states.editors.ChartingState","addSongUI",0x20e205d5,"states.editors.ChartingState.addSongUI","states/editors/ChartingState.hx",456,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_461_addSongUI,"states.editors.ChartingState","addSongUI",0x20e205d5,"states.editors.ChartingState.addSongUI","states/editors/ChartingState.hx",461,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_468_addSongUI,"states.editors.ChartingState","addSongUI",0x20e205d5,"states.editors.ChartingState.addSongUI","states/editors/ChartingState.hx",468,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_523_addSongUI,"states.editors.ChartingState","addSongUI",0x20e205d5,"states.editors.ChartingState.addSongUI","states/editors/ChartingState.hx",523,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_532_addSongUI,"states.editors.ChartingState","addSongUI",0x20e205d5,"states.editors.ChartingState.addSongUI","states/editors/ChartingState.hx",532,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_541_addSongUI,"states.editors.ChartingState","addSongUI",0x20e205d5,"states.editors.ChartingState.addSongUI","states/editors/ChartingState.hx",541,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_587_addSongUI,"states.editors.ChartingState","addSongUI",0x20e205d5,"states.editors.ChartingState.addSongUI","states/editors/ChartingState.hx",587,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_396_addSongUI,"states.editors.ChartingState","addSongUI",0x20e205d5,"states.editors.ChartingState.addSongUI","states/editors/ChartingState.hx",396,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_673_addSectionUI,"states.editors.ChartingState","addSectionUI",0xbdee268d,"states.editors.ChartingState.addSectionUI","states/editors/ChartingState.hx",673,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_701_addSectionUI,"states.editors.ChartingState","addSectionUI",0xbdee268d,"states.editors.ChartingState.addSectionUI","states/editors/ChartingState.hx",701,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_744_addSectionUI,"states.editors.ChartingState","addSectionUI",0xbdee268d,"states.editors.ChartingState.addSectionUI","states/editors/ChartingState.hx",744,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_776_addSectionUI,"states.editors.ChartingState","addSectionUI",0xbdee268d,"states.editors.ChartingState.addSectionUI","states/editors/ChartingState.hx",776,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_788_addSectionUI,"states.editors.ChartingState","addSectionUI",0xbdee268d,"states.editors.ChartingState.addSectionUI","states/editors/ChartingState.hx",788,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_828_addSectionUI,"states.editors.ChartingState","addSectionUI",0xbdee268d,"states.editors.ChartingState.addSectionUI","states/editors/ChartingState.hx",828,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_851_addSectionUI,"states.editors.ChartingState","addSectionUI",0xbdee268d,"states.editors.ChartingState.addSectionUI","states/editors/ChartingState.hx",851,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_635_addSectionUI,"states.editors.ChartingState","addSectionUI",0xbdee268d,"states.editors.ChartingState.addSectionUI","states/editors/ChartingState.hx",635,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_946_addNoteUI,"states.editors.ChartingState","addNoteUI",0x250efb32,"states.editors.ChartingState.addNoteUI","states/editors/ChartingState.hx",946,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_899_addNoteUI,"states.editors.ChartingState","addNoteUI",0x250efb32,"states.editors.ChartingState.addNoteUI","states/editors/ChartingState.hx",899,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1012_addEventsUI,"states.editors.ChartingState","addEventsUI",0x27587d19,"states.editors.ChartingState.addEventsUI","states/editors/ChartingState.hx",1012,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1038_addEventsUI,"states.editors.ChartingState","addEventsUI",0x27587d19,"states.editors.ChartingState.addEventsUI","states/editors/ChartingState.hx",1038,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1069_addEventsUI,"states.editors.ChartingState","addEventsUI",0x27587d19,"states.editors.ChartingState.addEventsUI","states/editors/ChartingState.hx",1069,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1088_addEventsUI,"states.editors.ChartingState","addEventsUI",0x27587d19,"states.editors.ChartingState.addEventsUI","states/editors/ChartingState.hx",1088,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1098_addEventsUI,"states.editors.ChartingState","addEventsUI",0x27587d19,"states.editors.ChartingState.addEventsUI","states/editors/ChartingState.hx",1098,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_969_addEventsUI,"states.editors.ChartingState","addEventsUI",0x27587d19,"states.editors.ChartingState.addEventsUI","states/editors/ChartingState.hx",969,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1119_changeEventSelected,"states.editors.ChartingState","changeEventSelected",0xbc698830,"states.editors.ChartingState.changeEventSelected","states/editors/ChartingState.hx",1119,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1137_setAllLabelsOffset,"states.editors.ChartingState","setAllLabelsOffset",0x98ef3966,"states.editors.ChartingState.setAllLabelsOffset","states/editors/ChartingState.hx",1137,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1167_addChartingUI,"states.editors.ChartingState","addChartingUI",0x12a3b084,"states.editors.ChartingState.addChartingUI","states/editors/ChartingState.hx",1167,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1179_addChartingUI,"states.editors.ChartingState","addChartingUI",0x12a3b084,"states.editors.ChartingState.addChartingUI","states/editors/ChartingState.hx",1179,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1191_addChartingUI,"states.editors.ChartingState","addChartingUI",0x12a3b084,"states.editors.ChartingState.addChartingUI","states/editors/ChartingState.hx",1191,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1204_addChartingUI,"states.editors.ChartingState","addChartingUI",0x12a3b084,"states.editors.ChartingState.addChartingUI","states/editors/ChartingState.hx",1204,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1216_addChartingUI,"states.editors.ChartingState","addChartingUI",0x12a3b084,"states.editors.ChartingState.addChartingUI","states/editors/ChartingState.hx",1216,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1226_addChartingUI,"states.editors.ChartingState","addChartingUI",0x12a3b084,"states.editors.ChartingState.addChartingUI","states/editors/ChartingState.hx",1226,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1237_addChartingUI,"states.editors.ChartingState","addChartingUI",0x12a3b084,"states.editors.ChartingState.addChartingUI","states/editors/ChartingState.hx",1237,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1245_addChartingUI,"states.editors.ChartingState","addChartingUI",0x12a3b084,"states.editors.ChartingState.addChartingUI","states/editors/ChartingState.hx",1245,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1255_addChartingUI,"states.editors.ChartingState","addChartingUI",0x12a3b084,"states.editors.ChartingState.addChartingUI","states/editors/ChartingState.hx",1255,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1265_addChartingUI,"states.editors.ChartingState","addChartingUI",0x12a3b084,"states.editors.ChartingState.addChartingUI","states/editors/ChartingState.hx",1265,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1273_addChartingUI,"states.editors.ChartingState","addChartingUI",0x12a3b084,"states.editors.ChartingState.addChartingUI","states/editors/ChartingState.hx",1273,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1281_addChartingUI,"states.editors.ChartingState","addChartingUI",0x12a3b084,"states.editors.ChartingState.addChartingUI","states/editors/ChartingState.hx",1281,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1294_addChartingUI,"states.editors.ChartingState","addChartingUI",0x12a3b084,"states.editors.ChartingState.addChartingUI","states/editors/ChartingState.hx",1294,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1151_addChartingUI,"states.editors.ChartingState","addChartingUI",0x12a3b084,"states.editors.ChartingState.addChartingUI","states/editors/ChartingState.hx",1151,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1377_addDataUI,"states.editors.ChartingState","addDataUI",0x15de376a,"states.editors.ChartingState.addDataUI","states/editors/ChartingState.hx",1377,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1390_addDataUI,"states.editors.ChartingState","addDataUI",0x15de376a,"states.editors.ChartingState.addDataUI","states/editors/ChartingState.hx",1390,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1356_addDataUI,"states.editors.ChartingState","addDataUI",0x15de376a,"states.editors.ChartingState.addDataUI","states/editors/ChartingState.hx",1356,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1418_loadSong,"states.editors.ChartingState","loadSong",0x0fe38810,"states.editors.ChartingState.loadSong","states/editors/ChartingState.hx",1418,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1474_closeSubState,"states.editors.ChartingState","closeSubState",0x4d84ad34,"states.editors.ChartingState.closeSubState","states/editors/ChartingState.hx",1474,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1514_generateSong,"states.editors.ChartingState","generateSong",0x55749f1f,"states.editors.ChartingState.generateSong","states/editors/ChartingState.hx",1514,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1507_generateSong,"states.editors.ChartingState","generateSong",0x55749f1f,"states.editors.ChartingState.generateSong","states/editors/ChartingState.hx",1507,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1535_generateUI,"states.editors.ChartingState","generateUI",0xe18e9afe,"states.editors.ChartingState.generateUI","states/editors/ChartingState.hx",1535,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1548_getEvent,"states.editors.ChartingState","getEvent",0x28876a99,"states.editors.ChartingState.getEvent","states/editors/ChartingState.hx",1548,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1675_sectionStartTime,"states.editors.ChartingState","sectionStartTime",0x8ab6cadf,"states.editors.ChartingState.sectionStartTime","states/editors/ChartingState.hx",1675,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2160_update,"states.editors.ChartingState","update",0x2ed301be,"states.editors.ChartingState.update","states/editors/ChartingState.hx",2160,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1695_update,"states.editors.ChartingState","update",0x2ed301be,"states.editors.ChartingState.update","states/editors/ChartingState.hx",1695,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1758_update,"states.editors.ChartingState","update",0x2ed301be,"states.editors.ChartingState.update","states/editors/ChartingState.hx",1758,0x0f29a547)
static const bool _hx_array_data_f85b0019_125[] = {
	0,0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2217_pauseAndSetVocalsTime,"states.editors.ChartingState","pauseAndSetVocalsTime",0x05e15f77,"states.editors.ChartingState.pauseAndSetVocalsTime","states/editors/ChartingState.hx",2217,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2231_updateZoom,"states.editors.ChartingState","updateZoom",0x9cdb87f1,"states.editors.ChartingState.updateZoom","states/editors/ChartingState.hx",2231,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2240_destroy,"states.editors.ChartingState","destroy",0x5084efa5,"states.editors.ChartingState.destroy","states/editors/ChartingState.hx",2240,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2249_reloadGridLayer,"states.editors.ChartingState","reloadGridLayer",0x402a8c3d,"states.editors.ChartingState.reloadGridLayer","states/editors/ChartingState.hx",2249,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2316_strumLineUpdateY,"states.editors.ChartingState","strumLineUpdateY",0x927e25c8,"states.editors.ChartingState.strumLineUpdateY","states/editors/ChartingState.hx",2316,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2323_updateWaveform,"states.editors.ChartingState","updateWaveform",0x0584435b,"states.editors.ChartingState.updateWaveform","states/editors/ChartingState.hx",2323,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2399_waveformData,"states.editors.ChartingState","waveformData",0xcc9dcdbc,"states.editors.ChartingState.waveformData","states/editors/ChartingState.hx",2399,0x0f29a547)
static const Float _hx_array_data_f85b0019_137[] = {
	(Float)0,
};
static const Float _hx_array_data_f85b0019_138[] = {
	(Float)0,
};
static const Float _hx_array_data_f85b0019_139[] = {
	(Float)0,
};
static const Float _hx_array_data_f85b0019_140[] = {
	(Float)0,
};
static const Float _hx_array_data_f85b0019_141[] = {
	(Float)0,
};
static const Float _hx_array_data_f85b0019_142[] = {
	(Float)0,
};
static const Float _hx_array_data_f85b0019_143[] = {
	(Float)0,
};
static const Float _hx_array_data_f85b0019_144[] = {
	(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2513_changeNoteSustain,"states.editors.ChartingState","changeNoteSustain",0x339751ac,"states.editors.ChartingState.changeNoteSustain","states/editors/ChartingState.hx",2513,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2528_recalculateSteps,"states.editors.ChartingState","recalculateSteps",0xe64b6b49,"states.editors.ChartingState.recalculateSteps","states/editors/ChartingState.hx",2528,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2547_resetSection,"states.editors.ChartingState","resetSection",0x05fefd4b,"states.editors.ChartingState.resetSection","states/editors/ChartingState.hx",2547,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2569_changeSection,"states.editors.ChartingState","changeSection",0x07ff3f40,"states.editors.ChartingState.changeSection","states/editors/ChartingState.hx",2569,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2607_updateSectionUI,"states.editors.ChartingState","updateSectionUI",0x0aae09db,"states.editors.ChartingState.updateSectionUI","states/editors/ChartingState.hx",2607,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2629_updateJsonData,"states.editors.ChartingState","updateJsonData",0x560ea450,"states.editors.ChartingState.updateJsonData","states/editors/ChartingState.hx",2629,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2639_updateHeads,"states.editors.ChartingState","updateHeads",0x3f5e30b5,"states.editors.ChartingState.updateHeads","states/editors/ChartingState.hx",2639,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2654_loadCharacterFile,"states.editors.ChartingState","loadCharacterFile",0x97ba1b2a,"states.editors.ChartingState.loadCharacterFile","states/editors/ChartingState.hx",2654,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2683_updateNoteUI,"states.editors.ChartingState","updateNoteUI",0x67c21b24,"states.editors.ChartingState.updateNoteUI","states/editors/ChartingState.hx",2683,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2709_updateGrid,"states.editors.ChartingState","updateGrid",0x904ebba4,"states.editors.ChartingState.updateGrid","states/editors/ChartingState.hx",2709,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2711_updateGrid,"states.editors.ChartingState","updateGrid",0x904ebba4,"states.editors.ChartingState.updateGrid","states/editors/ChartingState.hx",2711,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2713_updateGrid,"states.editors.ChartingState","updateGrid",0x904ebba4,"states.editors.ChartingState.updateGrid","states/editors/ChartingState.hx",2713,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2715_updateGrid,"states.editors.ChartingState","updateGrid",0x904ebba4,"states.editors.ChartingState.updateGrid","states/editors/ChartingState.hx",2715,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2717_updateGrid,"states.editors.ChartingState","updateGrid",0x904ebba4,"states.editors.ChartingState.updateGrid","states/editors/ChartingState.hx",2717,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2708_updateGrid,"states.editors.ChartingState","updateGrid",0x904ebba4,"states.editors.ChartingState.updateGrid","states/editors/ChartingState.hx",2708,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2817_setupNoteData,"states.editors.ChartingState","setupNoteData",0x4b08bfc4,"states.editors.ChartingState.setupNoteData","states/editors/ChartingState.hx",2817,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2867_getEventName,"states.editors.ChartingState","getEventName",0x3dabc984,"states.editors.ChartingState.getEventName","states/editors/ChartingState.hx",2867,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2879_setupSusNote,"states.editors.ChartingState","setupSusNote",0xd55b2e9b,"states.editors.ChartingState.setupSusNote","states/editors/ChartingState.hx",2879,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2890_addSection,"states.editors.ChartingState","addSection",0x58902bf9,"states.editors.ChartingState.addSection","states/editors/ChartingState.hx",2890,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2905_selectNote,"states.editors.ChartingState","selectNote",0x4ad38743,"states.editors.ChartingState.selectNote","states/editors/ChartingState.hx",2905,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2939_deleteNote,"states.editors.ChartingState","deleteNote",0x2f84eff2,"states.editors.ChartingState.deleteNote","states/editors/ChartingState.hx",2939,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2977_doANoteThing,"states.editors.ChartingState","doANoteThing",0x875226db,"states.editors.ChartingState.doANoteThing","states/editors/ChartingState.hx",2977,0x0f29a547)
static const bool _hx_array_data_f85b0019_179[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2983_doANoteThing,"states.editors.ChartingState","doANoteThing",0x875226db,"states.editors.ChartingState.doANoteThing","states/editors/ChartingState.hx",2983,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2997_clearSong,"states.editors.ChartingState","clearSong",0xfb4e0f6d,"states.editors.ChartingState.clearSong","states/editors/ChartingState.hx",2997,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3007_addNote,"states.editors.ChartingState","addNote",0xb1461d5e,"states.editors.ChartingState.addNote","states/editors/ChartingState.hx",3007,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3051_redo,"states.editors.ChartingState","redo",0xa4c70273,"states.editors.ChartingState.redo","states/editors/ChartingState.hx",3051,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3058_undo,"states.editors.ChartingState","undo",0xa6c97a99,"states.editors.ChartingState.undo","states/editors/ChartingState.hx",3058,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3065_getStrumTime,"states.editors.ChartingState","getStrumTime",0x39c07bf5,"states.editors.ChartingState.getStrumTime","states/editors/ChartingState.hx",3065,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3072_getYfromStrum,"states.editors.ChartingState","getYfromStrum",0xc198e107,"states.editors.ChartingState.getYfromStrum","states/editors/ChartingState.hx",3072,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3079_getYfromStrumNotes,"states.editors.ChartingState","getYfromStrumNotes",0xc30f51ba,"states.editors.ChartingState.getYfromStrumNotes","states/editors/ChartingState.hx",3079,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3085_getNotes,"states.editors.ChartingState","getNotes",0x528d7ec0,"states.editors.ChartingState.getNotes","states/editors/ChartingState.hx",3085,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3099_loadJson,"states.editors.ChartingState","loadJson",0x09f3a663,"states.editors.ChartingState.loadJson","states/editors/ChartingState.hx",3099,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3132_loadJson,"states.editors.ChartingState","loadJson",0x09f3a663,"states.editors.ChartingState.loadJson","states/editors/ChartingState.hx",3132,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3141_autosaveSong,"states.editors.ChartingState","autosaveSong",0x9df4d596,"states.editors.ChartingState.autosaveSong","states/editors/ChartingState.hx",3141,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3148_clearEvents,"states.editors.ChartingState","clearEvents",0x5f6450b1,"states.editors.ChartingState.clearEvents","states/editors/ChartingState.hx",3148,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3154_saveLevel,"states.editors.ChartingState","saveLevel",0x3c452072,"states.editors.ChartingState.saveLevel","states/editors/ChartingState.hx",3154,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3174_sortByTime,"states.editors.ChartingState","sortByTime",0x025ef5b7,"states.editors.ChartingState.sortByTime","states/editors/ChartingState.hx",3174,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3178_saveEvents,"states.editors.ChartingState","saveEvents",0x7251d46b,"states.editors.ChartingState.saveEvents","states/editors/ChartingState.hx",3178,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3200_onSaveComplete,"states.editors.ChartingState","onSaveComplete",0x9b2f658a,"states.editors.ChartingState.onSaveComplete","states/editors/ChartingState.hx",3200,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3212_onSaveCancel,"states.editors.ChartingState","onSaveCancel",0x0f79cc0b,"states.editors.ChartingState.onSaveCancel","states/editors/ChartingState.hx",3212,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3223_onSaveError,"states.editors.ChartingState","onSaveError",0x5926aa57,"states.editors.ChartingState.onSaveError","states/editors/ChartingState.hx",3223,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3232_getSectionBeats,"states.editors.ChartingState","getSectionBeats",0x64ea8d79,"states.editors.ChartingState.getSectionBeats","states/editors/ChartingState.hx",3232,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_52_boot,"states.editors.ChartingState","boot",0x9a3b38a7,"states.editors.ChartingState.boot","states/editors/ChartingState.hx",52,0x0f29a547)
static const ::String _hx_array_data_f85b0019_203[] = {
	HX_("",00,00,00,00),HX_("Alt Animation",0d,81,c1,cd),HX_("Hey!",e5,69,e4,2f),HX_("Hurt Note",a3,41,9e,fe),HX_("GF Sing",10,84,6e,29),HX_("No Animation",65,b2,1a,df),
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_89_boot,"states.editors.ChartingState","boot",0x9a3b38a7,"states.editors.ChartingState.boot","states/editors/ChartingState.hx",89,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_94_boot,"states.editors.ChartingState","boot",0x9a3b38a7,"states.editors.ChartingState.boot","states/editors/ChartingState.hx",94,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_95_boot,"states.editors.ChartingState","boot",0x9a3b38a7,"states.editors.ChartingState.boot","states/editors/ChartingState.hx",95,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_96_boot,"states.editors.ChartingState","boot",0x9a3b38a7,"states.editors.ChartingState.boot","states/editors/ChartingState.hx",96,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_110_boot,"states.editors.ChartingState","boot",0x9a3b38a7,"states.editors.ChartingState.boot","states/editors/ChartingState.hx",110,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_171_boot,"states.editors.ChartingState","boot",0x9a3b38a7,"states.editors.ChartingState.boot","states/editors/ChartingState.hx",171,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_172_boot,"states.editors.ChartingState","boot",0x9a3b38a7,"states.editors.ChartingState.boot","states/editors/ChartingState.hx",172,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_189_boot,"states.editors.ChartingState","boot",0x9a3b38a7,"states.editors.ChartingState.boot","states/editors/ChartingState.hx",189,0x0f29a547)
namespace states{
namespace editors{

void ChartingState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_49_new)
HXLINE(2653)		this->characterFailed = false;
HXLINE(2620)		this->characterData =  ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("vocalsP1",bf,a9,fc,1b),null())
            			->setFixed(1,HX_("vocalsP2",c0,a9,fc,1b),null())
            			->setFixed(2,HX_("iconP1",9a,bd,d6,45),null())
            			->setFixed(3,HX_("iconP2",9b,bd,d6,45),null()));
HXLINE(2322)		this->lastWaveformHeight = 0;
HXLINE(2320)		this->wavData = ::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_1,1))->init(1,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_2,1)))->init(1,::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_3,1))->init(1,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_4,1)));
HXLINE(2319)		this->waveformPrinted = true;
HXLINE(2248)		this->columns = 9;
HXLINE(2247)		this->lastSecBeatsNext = ((Float)0);
HXLINE(2246)		this->lastSecBeats = ((Float)0);
HXLINE(1693)		this->colorSine = ((Float)0);
HXLINE(1672)		this->updatedSection = false;
HXLINE(1472)		this->playtestingOnComplete = null();
HXLINE(1471)		this->playtestingTime = ((Float)0);
HXLINE(1470)		this->playtesting = false;
HXLINE( 896)		this->currentType = 0;
HXLINE( 631)		this->sectionToCopy = 0;
HXLINE( 389)		this->playSoundDad = null();
HXLINE( 388)		this->playSoundBf = null();
HXLINE( 387)		this->check_warnings = null();
HXLINE( 386)		this->check_vortex = null();
HXLINE( 385)		this->check_mute_vocals_opponent = null();
HXLINE( 384)		this->check_mute_vocals = null();
HXLINE( 383)		this->check_mute_inst = null();
HXLINE( 190)		this->mouseQuant = false;
HXLINE( 188)		this->text = HX_("",00,00,00,00);
HXLINE( 174)		this->quantizations = ::Array_obj< int >::fromData( _hx_array_data_f85b0019_5,11);
HXLINE( 166)		this->blockPressWhileScrolling = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 165)		this->blockPressWhileTypingOnStepper = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 164)		this->blockPressWhileTypingOn = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 162)		this->curZoom = 2;
HXLINE( 149)		this->zoomList = ::Array_obj< Float >::fromData( _hx_array_data_f85b0019_6,11);
HXLINE( 138)		this->opponentVocals = null();
HXLINE( 137)		this->vocals = null();
HXLINE( 135)		this->playbackSpeed = ((Float)1);
HXLINE( 133)		this->curSelectedNote = null();
HXLINE( 128)		this->curRedoIndex = 0;
HXLINE( 127)		this->curUndoIndex = 0;
HXLINE( 126)		this->curEventSelected = 0;
HXLINE( 125)		this->daquantspot = 0;
HXLINE( 111)		this->CAM_OFFSET = 360;
HXLINE( 105)		this->amountSteps = 0;
HXLINE( 104)		this->curSong = HX_("Test",72,f4,d2,37);
HXLINE(  65)		this->eventStuff = ::cpp::VirtualArray_obj::__new(17)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("",00,00,00,00))->init(1,HX_("Nothing. Yep, that's right.",66,d5,5d,e8)))->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Dadbattle Spotlight",b3,45,78,e2))->init(1,HX_("Used in Dad Battle,\nValue 1: 0/1 = ON/OFF,\n2 = Target Dad\n3 = Target BF",b1,92,1b,cf)))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Hey!",e5,69,e4,2f))->init(1,HX_("Plays the \"Hey!\" animation from Bopeebo,\nValue 1: BF = Only Boyfriend, GF = Only Girlfriend,\nSomething else = Both.\nValue 2: Custom animation duration,\nleave it blank for 0.6s",c7,a4,11,db)))->init(3,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Set GF Speed",04,ff,9a,c4))->init(1,HX_("Sets GF head bopping speed,\nValue 1: 1 = Normal speed,\n2 = 1/2 speed, 4 = 1/4 speed etc.\nUsed on Fresh during the beatbox parts.\n\nWarning: Value must be integer!",bd,c7,5a,eb)))->init(4,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Philly Glow",85,3a,5e,92))->init(1,HX_("Exclusive to Week 3\nValue 1: 0/1/2 = OFF/ON/Reset Gradient\n \nNo, i won't add it to other weeks.",50,27,39,4c)))->init(5,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Kill Henchmen",e2,fc,7b,01))->init(1,HX_("For Mom's songs, don't use this please, i love them :(",80,c5,4b,54)))->init(6,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Add Camera Zoom",cf,55,a6,44))->init(1,HX_("Used on MILF on that one \"hard\" part\nValue 1: Camera zoom add (Default: 0.015)\nValue 2: UI zoom add (Default: 0.03)\nLeave the values blank if you want to use Default.",ce,dd,83,e8)))->init(7,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("BG Freaks Expression",4d,76,b1,17))->init(1,HX_("Should be used only in \"school\" Stage!",dd,fb,c9,a2)))->init(8,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Trigger BG Ghouls",e1,1f,5c,88))->init(1,HX_("Should be used only in \"schoolEvil\" Stage!",91,8c,94,81)))->init(9,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Play Animation",d8,05,5f,0c))->init(1,HX_("Plays an animation on a Character,\nonce the animation is completed,\nthe animation changes to Idle\n\nValue 1: Animation to play.\nValue 2: Character (Dad, BF, GF)",59,cd,71,43)))->init(10,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Camera Follow Pos",e0,d4,b1,c4))->init(1,HX_("Value 1: X\nValue 2: Y\n\nThe camera won't change the follow point\nafter using this, for getting it back\nto normal, leave both values blank.",c6,8e,5e,fa)))->init(11,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Alt Idle Animation",2f,00,fa,18))->init(1,HX_("Sets a specified suffix after the idle animation name.\nYou can use this to trigger 'idle-alt' if you set\nValue 2 to -alt\n\nValue 1: Character to set (Dad, BF or GF)\nValue 2: New suffix (Leave it blank to disable)",30,0a,94,7b)))->init(12,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Screen Shake",12,bb,51,4b))->init(1,HX_("Value 1: Camera shake\nValue 2: HUD shake\n\nEvery value works as the following example: \"1, 0.05\".\nThe first number (1) is the duration.\nThe second number (0.05) is the intensity.",ac,9a,68,86)))->init(13,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Change Character",f9,50,ef,9c))->init(1,HX_("Value 1: Character to change (Dad, BF, GF)\nValue 2: New character's name",aa,d4,06,6a)))->init(14,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Change Scroll Speed",c4,2f,0b,43))->init(1,HX_("Value 1: Scroll Speed Multiplier (1 is default)\nValue 2: Time it takes to change fully in seconds.",f2,9a,e0,c3)))->init(15,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Set Property",d3,50,a6,2e))->init(1,HX_("Value 1: Variable name\nValue 2: New value",8b,51,61,60)))->init(16,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Play Sound",a3,a9,45,48))->init(1,HX_("Value 1: Sound file name\nValue 2: Volume (Default: 1), ranges from 0 to 1",64,df,bc,a5)));
HXLINE(  63)		this->redos = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  62)		this->undos = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  61)		this->curNoteTypes = ::Array_obj< ::String >::__new(0);
HXLINE(  60)		this->ignoreWarnings = false;
HXLINE(  49)		super::__construct(TransIn,TransOut);
            	}

Dynamic ChartingState_obj::__CreateEmpty() { return new ChartingState_obj; }

void *ChartingState_obj::_hx_vtable = 0;

Dynamic ChartingState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ChartingState_obj > _hx_result = new ChartingState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ChartingState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x53aaab8a) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x4f752055 || inClassId==(int)0x53aaab8a;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			if (inClassId<=(int)0x62817b24) {
				return inClassId==(int)0x563293a6 || inClassId==(int)0x62817b24;
			} else {
				return inClassId==(int)0x7c795c9f;
			}
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void ChartingState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_192_create)
HXLINE( 193)		if (::hx::IsNotNull( ::states::PlayState_obj::SONG )) {
HXLINE( 194)			this->_song = ::states::PlayState_obj::SONG;
            		}
            		else {
HXLINE( 197)			::backend::Difficulty_obj::list = ::backend::Difficulty_obj::defaultList->copy();
HXLINE( 198)			this->_song =  ::Dynamic(::hx::Anon_obj::Create(10)
            				->setFixed(0,HX_("speed",87,97,69,81),( (Float)(1) ))
            				->setFixed(1,HX_("stage",be,6a,0b,84),HX_("stage",be,6a,0b,84))
            				->setFixed(2,HX_("player1",b0,09,15,8a),HX_("bf",c4,55,00,00))
            				->setFixed(3,HX_("player2",b1,09,15,8a),HX_("dad",47,36,4c,00))
            				->setFixed(4,HX_("events",19,4f,6a,96),::cpp::VirtualArray_obj::__new(0))
            				->setFixed(5,HX_("notes",41,dc,ca,9f),::Array_obj< ::Dynamic>::__new(0))
            				->setFixed(6,HX_("gfVersion",b9,c6,7d,f3),HX_("gf",1f,5a,00,00))
            				->setFixed(7,HX_("bpm",df,be,4a,00),((Float)150.0))
            				->setFixed(8,HX_("needsVoices",be,05,e9,0d),true)
            				->setFixed(9,HX_("song",d5,23,58,4c),HX_("Test",72,f4,d2,37)));
HXLINE( 210)			this->addSection(null());
HXLINE( 211)			::states::PlayState_obj::SONG = this->_song;
            		}
HXLINE( 218)		::backend::DiscordClient_obj::changePresence(HX_("Chart Editor",ef,b4,29,e9),::StringTools_obj::replace(( (::String)(this->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_("-",2d,00,00,00),HX_(" ",20,00,00,00)),null(),null(),null());
HXLINE( 221)		::states::editors::ChartingState_obj::vortex = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("chart_vortex",ef,94,b7,4f),::hx::paccDynamic)) );
HXLINE( 222)		this->ignoreWarnings = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ignoreWarnings",c9,0d,e8,46),::hx::paccDynamic)) );
HXLINE( 223)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 223)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(::backend::Paths_obj::image(HX_("menuDesat",26,91,04,72),null(),null()),null(),null(),null(),null(),null());
HXLINE( 224)		bg1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 225)		{
HXLINE( 225)			 ::flixel::math::FlxBasePoint this1 = bg1->scrollFactor;
HXDLIN( 225)			this1->set_x(( (Float)(0) ));
HXDLIN( 225)			this1->set_y(( (Float)(0) ));
            		}
HXLINE( 226)		bg1->set_color(-14540254);
HXLINE( 227)		this->add(bg1);
HXLINE( 229)		this->gridLayer =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 230)		this->add(this->gridLayer);
HXLINE( 232)		this->waveformSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,::states::editors::ChartingState_obj::GRID_SIZE,0,null())->makeGraphic(1,1,16777215,null(),null());
HXLINE( 233)		this->add(this->waveformSprite);
HXLINE( 235)		 ::flixel::FlxSprite eventIcon =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(-(::states::editors::ChartingState_obj::GRID_SIZE) - 5),-90,null());
HXDLIN( 235)		 ::flixel::FlxSprite eventIcon1 = eventIcon->loadGraphic(::backend::Paths_obj::image(HX_("eventArrow",4f,83,ea,a1),null(),null()),null(),null(),null(),null(),null());
HXLINE( 236)		eventIcon1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 237)		this->leftIcon =  ::objects::HealthIcon_obj::__alloc( HX_CTX ,HX_("bf",c4,55,00,00),null(),null());
HXLINE( 238)		this->rightIcon =  ::objects::HealthIcon_obj::__alloc( HX_CTX ,HX_("dad",47,36,4c,00),null(),null());
HXLINE( 239)		{
HXLINE( 239)			 ::flixel::math::FlxBasePoint this2 = eventIcon1->scrollFactor;
HXDLIN( 239)			this2->set_x(( (Float)(1) ));
HXDLIN( 239)			this2->set_y(( (Float)(1) ));
            		}
HXLINE( 240)		{
HXLINE( 240)			 ::flixel::math::FlxBasePoint this3 = this->leftIcon->scrollFactor;
HXDLIN( 240)			this3->set_x(( (Float)(1) ));
HXDLIN( 240)			this3->set_y(( (Float)(1) ));
            		}
HXLINE( 241)		{
HXLINE( 241)			 ::flixel::math::FlxBasePoint this4 = this->rightIcon->scrollFactor;
HXDLIN( 241)			this4->set_x(( (Float)(1) ));
HXDLIN( 241)			this4->set_y(( (Float)(1) ));
            		}
HXLINE( 243)		eventIcon1->setGraphicSize(30,30);
HXLINE( 244)		this->leftIcon->setGraphicSize(0,45);
HXLINE( 245)		this->rightIcon->setGraphicSize(0,45);
HXLINE( 247)		this->add(eventIcon1);
HXLINE( 248)		this->add(this->leftIcon);
HXLINE( 249)		this->add(this->rightIcon);
HXLINE( 251)		this->leftIcon->setPosition((::states::editors::ChartingState_obj::GRID_SIZE + 10),-100);
HXLINE( 252)		this->rightIcon->setPosition((( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ) * ((Float)5.2)),-100);
HXLINE( 254)		this->curRenderedSustains =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 255)		this->curRenderedNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 256)		this->curRenderedNoteType =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 258)		this->nextRenderedSustains =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 259)		this->nextRenderedNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 261)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 268)		this->updateJsonData();
HXLINE( 269)		::String path = ( (::String)(this->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN( 269)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN( 269)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN( 269)		::String path1 = invalidChars->split(::StringTools_obj::replace(path,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN( 269)		this->currentSongName = hideChars->split(path1)->join(HX_("",00,00,00,00)).toLowerCase();
HXLINE( 270)		this->loadSong();
HXLINE( 271)		this->reloadGridLayer();
HXLINE( 272)		::backend::Conductor_obj::set_bpm(( (Float)(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE( 273)		::backend::Conductor_obj::mapBPMChanges(this->_song);
HXLINE( 274)		if ((::states::editors::ChartingState_obj::curSec >= ( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length)) {
HXLINE( 274)			::states::editors::ChartingState_obj::curSec = (( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length - 1);
            		}
HXLINE( 276)		this->bpmTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,1000,50,0,HX_("",00,00,00,00),16,null());
HXLINE( 277)		{
HXLINE( 277)			 ::flixel::math::FlxBasePoint this5 = this->bpmTxt->scrollFactor;
HXDLIN( 277)			this5->set_x(( (Float)(0) ));
HXDLIN( 277)			this5->set_y(( (Float)(0) ));
            		}
HXLINE( 278)		this->add(this->bpmTxt);
HXLINE( 280)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,50,null());
HXDLIN( 280)		this->strumLine = _hx_tmp->makeGraphic(::Std_obj::_hx_int(( (Float)((::states::editors::ChartingState_obj::GRID_SIZE * 9)) )),4,null(),null(),null());
HXLINE( 281)		this->add(this->strumLine);
HXLINE( 283)		this->quant =  ::objects::AttachedSprite_obj::__alloc( HX_CTX ,HX_("chart_quant",22,5d,bc,8b),HX_("chart_quant",22,5d,bc,8b),null(),null());
HXLINE( 284)		this->quant->animation->addByPrefix(HX_("q",71,00,00,00),HX_("chart_quant",22,5d,bc,8b),0,false,null(),null());
HXLINE( 285)		this->quant->animation->play(HX_("q",71,00,00,00),true,false,0);
HXLINE( 286)		this->quant->sprTracker = this->strumLine;
HXLINE( 287)		this->quant->xAdd = ( (Float)(-32) );
HXLINE( 288)		this->quant->yAdd = ( (Float)(8) );
HXLINE( 289)		this->add(this->quant);
HXLINE( 291)		this->strumLineNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 292)		{
HXLINE( 292)			int _g = 0;
HXDLIN( 292)			while((_g < 8)){
HXLINE( 292)				_g = (_g + 1);
HXDLIN( 292)				int i = (_g - 1);
HXLINE( 293)				 ::objects::StrumNote note =  ::objects::StrumNote_obj::__alloc( HX_CTX ,( (Float)((::states::editors::ChartingState_obj::GRID_SIZE * (i + 1))) ),this->strumLine->y,::hx::Mod(i,4),0);
HXLINE( 294)				note->setGraphicSize(::states::editors::ChartingState_obj::GRID_SIZE,::states::editors::ChartingState_obj::GRID_SIZE);
HXLINE( 295)				note->updateHitbox();
HXLINE( 296)				note->playAnim(HX_("static",ae,dc,fb,05),true);
HXLINE( 297)				this->strumLineNotes->add(note).StaticCast<  ::objects::StrumNote >();
HXLINE( 298)				{
HXLINE( 298)					 ::flixel::math::FlxBasePoint this6 = note->scrollFactor;
HXDLIN( 298)					this6->set_x(( (Float)(1) ));
HXDLIN( 298)					this6->set_y(( (Float)(1) ));
            				}
            			}
            		}
HXLINE( 300)		this->add(this->strumLineNotes);
HXLINE( 302)		this->camPos =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE( 303)		this->camPos->setPosition((this->strumLine->x + this->CAM_OFFSET),this->strumLine->y);
HXLINE( 305)		this->dummyArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::states::editors::ChartingState_obj::GRID_SIZE,::states::editors::ChartingState_obj::GRID_SIZE,null(),null(),null());
HXLINE( 306)		this->dummyArrow->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 307)		this->add(this->dummyArrow);
HXLINE( 309)		::Array< ::Dynamic> tabs = ::Array_obj< ::Dynamic>::__new(6)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Song",f5,4f,31,37))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Song",f5,4f,31,37))))->init(1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Section",c5,2d,29,2b))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Section",c5,2d,29,2b))))->init(2, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Note",12,44,e3,33))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Note",12,44,e3,33))))->init(3, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Events",39,c3,fe,ca))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Events",39,c3,fe,ca))))->init(4, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Charting",e4,0a,35,96))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Charting",e4,0a,35,96))))->init(5, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Data",4a,82,3c,2d))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Data",4a,82,3c,2d))));
HXLINE( 318)		this->UI_box =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),tabs,null(),true,null(),null());
HXLINE( 320)		this->UI_box->resize(( (Float)(300) ),( (Float)(400) ));
HXLINE( 321)		this->UI_box->set_x((640 + (( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ) / ( (Float)(2) ))));
HXLINE( 322)		this->UI_box->set_y(( (Float)(25) ));
HXLINE( 323)		{
HXLINE( 323)			 ::flixel::math::FlxBasePoint this7 = this->UI_box->scrollFactor;
HXDLIN( 323)			this7->set_x(( (Float)(0) ));
HXDLIN( 323)			this7->set_y(( (Float)(0) ));
            		}
HXLINE( 325)		this->text = ((HX_("W/S or Mouse Wheel - Change Conductor's strum time\n\t\t\nA/D - Go to the previous/next section\n\t\t\nLeft/Right - Change Snap\n\t\t\nUp/Down - Change Conductor's Strum Time with Snapping",7e,f9,d9,c7) + HX_("\nLeft Bracket / Right Bracket - Change Song Playback Rate (SHIFT to go Faster)\n\t\t\nALT + Left Bracket / Right Bracket - Reset Song Playback Rate",8c,90,9b,dc)) + HX_("\nHold Shift to move 4x faster\n\t\t\nHold Control and click on an arrow to select it\n\t\t\nZ/X - Zoom in/out\n\t\t\n\n\t\t\nEsc - Test your chart inside Chart Editor\n\t\t\nEnter - Play your chart\n\t\t\nQ/E - Decrease/Increase Note Sustain Length\n\t\t\nSpace - Stop/Resume song",03,f2,06,8b));
HXLINE( 343)		::Array< ::String > tipTextArray = this->text.split(HX_("\n",0a,00,00,00));
HXLINE( 344)		{
HXLINE( 344)			int _g1 = 0;
HXDLIN( 344)			int _g2 = tipTextArray->length;
HXDLIN( 344)			while((_g1 < _g2)){
HXLINE( 344)				_g1 = (_g1 + 1);
HXDLIN( 344)				int i1 = (_g1 - 1);
HXLINE( 345)				Float tipText = this->UI_box->x;
HXDLIN( 345)				Float tipText1 = this->UI_box->y;
HXDLIN( 345)				Float tipText2 = ((tipText1 + this->UI_box->get_height()) + 8);
HXDLIN( 345)				 ::flixel::text::FlxText tipText3 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,tipText,tipText2,0,tipTextArray->__get(i1),16,null());
HXLINE( 346)				tipText3->set_y((tipText3->y + (i1 * 12)));
HXLINE( 347)				::String file = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN( 347)				::String _hx_tmp1;
HXDLIN( 347)				if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 347)					_hx_tmp1 = file;
            				}
            				else {
HXLINE( 347)					_hx_tmp1 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            				}
HXDLIN( 347)				tipText3->setFormat(_hx_tmp1,14,-1,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE( 349)				{
HXLINE( 349)					 ::flixel::math::FlxBasePoint this8 = tipText3->scrollFactor;
HXDLIN( 349)					this8->set_x(( (Float)(0) ));
HXDLIN( 349)					this8->set_y(( (Float)(0) ));
            				}
HXLINE( 350)				this->add(tipText3);
            			}
            		}
HXLINE( 352)		this->add(this->UI_box);
HXLINE( 354)		this->addSongUI();
HXLINE( 355)		this->addSectionUI();
HXLINE( 356)		this->addNoteUI();
HXLINE( 357)		this->addEventsUI();
HXLINE( 358)		this->addChartingUI();
HXLINE( 359)		this->addDataUI();
HXLINE( 360)		this->updateHeads();
HXLINE( 361)		this->updateWaveform();
HXLINE( 364)		this->add(this->curRenderedSustains);
HXLINE( 365)		this->add(this->curRenderedNotes);
HXLINE( 366)		this->add(this->curRenderedNoteType);
HXLINE( 367)		this->add(this->nextRenderedSustains);
HXLINE( 368)		this->add(this->nextRenderedNotes);
HXLINE( 370)		if ((::states::editors::ChartingState_obj::lastSong != this->currentSongName)) {
HXLINE( 371)			this->changeSection(null(),null());
            		}
HXLINE( 373)		::states::editors::ChartingState_obj::lastSong = this->currentSongName;
HXLINE( 375)		this->zoomTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,10,0,HX_("Zoom: 1 / 1",58,47,d8,02),16,null());
HXLINE( 376)		{
HXLINE( 376)			 ::flixel::math::FlxBasePoint this9 = this->zoomTxt->scrollFactor;
HXDLIN( 376)			this9->set_x(( (Float)(0) ));
HXDLIN( 376)			this9->set_y(( (Float)(0) ));
            		}
HXLINE( 377)		this->add(this->zoomTxt);
HXLINE( 379)		this->updateGrid();
HXLINE( 380)		this->super::create();
            	}


void ChartingState_obj::addSongUI(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::states::editors::ChartingState,_gthis, ::flixel::addons::ui::FlxUICheckBox,check_voices) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_405_addSongUI)
HXLINE( 405)			_gthis->_song->__SetField(HX_("needsVoices",be,05,e9,0d),check_voices->checked,::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_411_addSongUI)
HXLINE( 411)			_gthis->saveLevel();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_415_addSongUI)
HXLINE( 416)			::String path = _gthis->UI_songTitle->text;
HXDLIN( 416)			 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN( 416)			 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN( 416)			::String path1 = invalidChars->split(::StringTools_obj::replace(path,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN( 416)			::String reloadSong = hideChars->split(path1)->join(HX_("",00,00,00,00)).toLowerCase();
HXDLIN( 416)			_gthis->currentSongName = reloadSong;
HXLINE( 417)			_gthis->updateJsonData();
HXLINE( 418)			_gthis->loadSong();
HXLINE( 419)			_gthis->updateWaveform();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::states::editors::ChartingState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_425_addSongUI)
HXLINE( 425)				 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN( 425)				_gthis1->loadJson(( (::String)(_gthis->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase());
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_424_addSongUI)
HXLINE( 424)			 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN( 424)			_gthis1->openSubState( ::substates::Prompt_obj::__alloc( HX_CTX ,HX_("This action will clear current progress.\n\nProceed?",52,45,0c,9c),0, ::Dynamic(new _hx_Closure_3(_gthis)),null(),_gthis->ignoreWarnings,null(),null()));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_5) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_431_addSongUI)
HXLINE( 432)			::states::PlayState_obj::SONG = ::backend::Song_obj::parseJSONshit(( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("autosave",2c,4e,9a,44),::hx::paccDynamic)) ));
HXLINE( 433)			::backend::MusicBeatState_obj::resetState();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_437_addSongUI)
HXLINE( 439)			::String path = ( (::String)(_gthis->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN( 439)			 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN( 439)			 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN( 439)			::String path1 = invalidChars->split(::StringTools_obj::replace(path,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN( 439)			::String songName = hideChars->split(path1)->join(HX_("",00,00,00,00)).toLowerCase();
HXLINE( 440)			::String library = null();
HXDLIN( 440)			::String file = ::backend::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + (songName + HX_("/events",88,1c,db,38))) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library,null());
HXLINE( 442)			bool loadEventJson;
HXDLIN( 442)			if (!(::sys::FileSystem_obj::exists(::backend::Paths_obj::modFolders(((HX_("data/",c5,0e,88,d4) + (songName + HX_("/events",88,1c,db,38))) + HX_(".json",56,f1,d6,c2)))))) {
HXLINE( 442)				loadEventJson = ::sys::FileSystem_obj::exists(file);
            			}
            			else {
HXLINE( 442)				loadEventJson = true;
            			}
HXDLIN( 442)			if (loadEventJson) {
HXLINE( 447)				_gthis->clearEvents();
HXLINE( 448)				 ::Dynamic events = ::backend::Song_obj::loadFromJson(HX_("events",19,4f,6a,96),songName);
HXLINE( 449)				_gthis->_song->__SetField(HX_("events",19,4f,6a,96),events->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 450)				_gthis->changeSection(::states::editors::ChartingState_obj::curSec,null());
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_456_addSongUI)
HXLINE( 456)			_gthis->saveEvents();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_461_addSongUI)
HXLINE( 461)			 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN( 461)			_gthis1->openSubState( ::substates::Prompt_obj::__alloc( HX_CTX ,HX_("This action will clear current progress.\n\nProceed?",52,45,0c,9c),0,_gthis->clearEvents_dyn(),null(),_gthis->ignoreWarnings,null(),null()));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_10, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_9, ::states::editors::ChartingState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_468_addSongUI)
HXLINE( 468)				{
HXLINE( 468)					int _g = 0;
HXDLIN( 468)					int _g1 = ( (::Array< ::Dynamic>)(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN( 468)					while((_g < _g1)){
HXLINE( 468)						_g = (_g + 1);
HXDLIN( 468)						int sec = (_g - 1);
HXLINE( 469)						 ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(sec)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::cpp::VirtualArray_obj::__new(0),::hx::paccDynamic);
            					}
            				}
HXLINE( 471)				_gthis->updateGrid();
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_468_addSongUI)
HXLINE( 468)			 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN( 468)			_gthis1->openSubState( ::substates::Prompt_obj::__alloc( HX_CTX ,HX_("This action will clear current progress.\n\nProceed?",52,45,0c,9c),0, ::Dynamic(new _hx_Closure_9(_gthis)),null(),_gthis->ignoreWarnings,null(),null()));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_11, ::states::editors::ChartingState,_gthis,::Array< ::String >,characters) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_523_addSongUI)
HXLINE( 524)			::Array< ::String > characters1 = characters;
HXDLIN( 524)			 ::Dynamic player1DropDown = ::Std_obj::parseInt(character);
HXDLIN( 524)			_gthis->_song->__SetField(HX_("player1",b0,09,15,8a),characters1->__get(( (int)(player1DropDown) )),::hx::paccDynamic);
HXLINE( 525)			_gthis->updateJsonData();
HXLINE( 526)			_gthis->updateHeads();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_12, ::states::editors::ChartingState,_gthis,::Array< ::String >,characters) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_532_addSongUI)
HXLINE( 533)			::Array< ::String > characters1 = characters;
HXDLIN( 533)			 ::Dynamic gfVersionDropDown = ::Std_obj::parseInt(character);
HXDLIN( 533)			_gthis->_song->__SetField(HX_("gfVersion",b9,c6,7d,f3),characters1->__get(( (int)(gfVersionDropDown) )),::hx::paccDynamic);
HXLINE( 534)			_gthis->updateJsonData();
HXLINE( 535)			_gthis->updateHeads();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_13, ::states::editors::ChartingState,_gthis,::Array< ::String >,characters) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_541_addSongUI)
HXLINE( 542)			::Array< ::String > characters1 = characters;
HXDLIN( 542)			 ::Dynamic player2DropDown = ::Std_obj::parseInt(character);
HXDLIN( 542)			_gthis->_song->__SetField(HX_("player2",b1,09,15,8a),characters1->__get(( (int)(player2DropDown) )),::hx::paccDynamic);
HXLINE( 543)			_gthis->updateJsonData();
HXLINE( 544)			_gthis->updateHeads();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_14,::Array< ::String >,stages, ::states::editors::ChartingState,_gthis) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_587_addSongUI)
HXLINE( 587)			::Array< ::String > stages1 = stages;
HXDLIN( 587)			 ::Dynamic _hx_tmp = ::Std_obj::parseInt(character);
HXDLIN( 587)			_gthis->_song->__SetField(HX_("stage",be,6a,0b,84),stages1->__get(( (int)(_hx_tmp) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_396_addSongUI)
HXDLIN( 396)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 397)		this->UI_songTitle =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,10,10,70,( (::String)(this->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),8,null(),null(),null());
HXLINE( 398)		this->blockPressWhileTypingOn->push(this->UI_songTitle);
HXLINE( 400)		 ::flixel::addons::ui::FlxUICheckBox check_voices =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,25,null(),null(),HX_("Has voice track",b7,2b,b0,eb),100,null(),null());
HXLINE( 401)		check_voices->set_checked(( (bool)(this->_song->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) ));
HXLINE( 403)		check_voices->callback =  ::Dynamic(new _hx_Closure_0(_gthis,check_voices));
HXLINE( 409)		 ::flixel::ui::FlxButton saveButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,110,8,HX_("Save",5d,b7,26,37), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE( 414)		 ::flixel::ui::FlxButton reloadSong =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(saveButton->x + 90),saveButton->y,HX_("Reload Audio",cf,9c,c1,ed), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE( 422)		 ::flixel::ui::FlxButton reloadSongJson =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSong->x,(saveButton->y + 30),HX_("Reload JSON",2f,1c,a5,4a), ::Dynamic(new _hx_Closure_4(_gthis)));
HXLINE( 430)		 ::flixel::ui::FlxButton loadAutosaveBtn =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSongJson->x,(reloadSongJson->y + 30),HX_("Load Autosave",66,6b,fc,a4), ::Dynamic(new _hx_Closure_5()));
HXLINE( 436)		 ::flixel::ui::FlxButton loadEventJson =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,loadAutosaveBtn->x,(loadAutosaveBtn->y + 30),HX_("Load Events",d3,c9,2c,e5), ::Dynamic(new _hx_Closure_6(_gthis)));
HXLINE( 454)		 ::flixel::ui::FlxButton saveEvents =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,110,reloadSongJson->y,HX_("Save Events",9c,39,2f,6e), ::Dynamic(new _hx_Closure_7(_gthis)));
HXLINE( 459)		 ::flixel::ui::FlxButton clear_events =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,320,310,HX_("Clear events",6c,fd,58,9f), ::Dynamic(new _hx_Closure_8(_gthis)));
HXLINE( 463)		clear_events->set_color(-65536);
HXLINE( 464)		clear_events->label->set_color(-1);
HXLINE( 466)		 ::flixel::ui::FlxButton clear_notes =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,320,(clear_events->y + 30),HX_("Clear notes",4e,99,c1,ae), ::Dynamic(new _hx_Closure_10(_gthis)));
HXLINE( 475)		clear_notes->set_color(-65536);
HXLINE( 476)		clear_notes->label->set_color(-1);
HXLINE( 478)		 ::flixel::addons::ui::FlxUINumericStepper stepperBPM =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,70,1,1,1,400,3,null(),null(),null(),null(),null());
HXLINE( 479)		stepperBPM->set_value(::backend::Conductor_obj::bpm);
HXLINE( 480)		stepperBPM->name = HX_("song_bpm",35,36,15,42);
HXLINE( 481)		this->blockPressWhileTypingOnStepper->push(stepperBPM);
HXLINE( 483)		 ::flixel::addons::ui::FlxUINumericStepper stepperSpeed =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,(stepperBPM->y + 35),((Float)0.1),1,((Float)0.1),10,2,null(),null(),null(),null(),null());
HXLINE( 484)		stepperSpeed->set_value(( (Float)(this->_song->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ));
HXLINE( 485)		stepperSpeed->name = HX_("song_speed",5d,10,41,a4);
HXLINE( 486)		this->blockPressWhileTypingOnStepper->push(stepperSpeed);
HXLINE( 488)		::String key = HX_("characters/",45,3c,bf,be);
HXDLIN( 488)		if (::hx::IsNull( key )) {
HXLINE( 488)			key = HX_("",00,00,00,00);
            		}
HXDLIN( 488)		::String key1 = (::backend::Mods_obj::currentModDirectory + HX_("/characters/",76,5c,e4,d0));
HXDLIN( 488)		if (::hx::IsNull( key1 )) {
HXLINE( 488)			key1 = HX_("",00,00,00,00);
            		}
HXDLIN( 488)		::String file = HX_("characters/",45,3c,bf,be);
HXDLIN( 488)		if (::hx::IsNull( file )) {
HXLINE( 488)			file = HX_("",00,00,00,00);
            		}
HXDLIN( 488)		::Array< ::String > directories = ::Array_obj< ::String >::__new(3)->init(0,(HX_("mods/",9e,2f,58,0c) + key))->init(1,(HX_("mods/",9e,2f,58,0c) + key1))->init(2,(HX_("assets/shared/",1e,69,1e,47) + file));
HXLINE( 489)		{
HXLINE( 489)			int _g = 0;
HXDLIN( 489)			::Array< ::String > _g1 = ::backend::Mods_obj::globalMods;
HXDLIN( 489)			while((_g < _g1->length)){
HXLINE( 489)				::String mod = _g1->__get(_g);
HXDLIN( 489)				_g = (_g + 1);
HXLINE( 490)				::String key2 = (mod + HX_("/characters/",76,5c,e4,d0));
HXDLIN( 490)				if (::hx::IsNull( key2 )) {
HXLINE( 490)					key2 = HX_("",00,00,00,00);
            				}
HXDLIN( 490)				directories->push((HX_("mods/",9e,2f,58,0c) + key2));
            			}
            		}
HXLINE( 495)		::Array< ::String > tempArray = ::Array_obj< ::String >::__new(0);
HXLINE( 496)		::String defaultDirectory = HX_("assets/shared/",1e,69,1e,47);
HXDLIN( 496)		bool allowDuplicates = false;
HXDLIN( 496)		if (::hx::IsNull( defaultDirectory )) {
HXLINE( 496)			defaultDirectory = HX_("assets/shared/",1e,69,1e,47);
            		}
HXDLIN( 496)		defaultDirectory = ::StringTools_obj::trim(defaultDirectory);
HXDLIN( 496)		if (!(::StringTools_obj::endsWith(defaultDirectory,HX_("/",2f,00,00,00)))) {
HXLINE( 496)			defaultDirectory = (defaultDirectory + HX_("/",2f,00,00,00));
            		}
HXDLIN( 496)		if (!(::StringTools_obj::startsWith(defaultDirectory,HX_("assets/",4c,2a,dc,36)))) {
HXLINE( 496)			defaultDirectory = (HX_("assets/",4c,2a,dc,36) + defaultDirectory);
            		}
HXDLIN( 496)		::Array< ::String > mergedList = ::Array_obj< ::String >::__new(0);
HXDLIN( 496)		::Array< ::String > foldersToCheck = ::Array_obj< ::String >::__new(0);
HXDLIN( 496)		if (::sys::FileSystem_obj::exists((defaultDirectory + HX_("data/characterList.txt",c4,ce,ff,de)))) {
HXLINE( 496)			foldersToCheck->push((defaultDirectory + HX_("data/characterList.txt",c4,ce,ff,de)));
            		}
HXDLIN( 496)		{
HXLINE( 496)			{
HXLINE( 496)				int _g2 = 0;
HXDLIN( 496)				::Array< ::String > _g3 = ::backend::Mods_obj::globalMods;
HXDLIN( 496)				while((_g2 < _g3->length)){
HXLINE( 496)					::String mod1 = _g3->__get(_g2);
HXDLIN( 496)					_g2 = (_g2 + 1);
HXDLIN( 496)					::String key3 = ((mod1 + HX_("/",2f,00,00,00)) + HX_("data/characterList.txt",c4,ce,ff,de));
HXDLIN( 496)					if (::hx::IsNull( key3 )) {
HXLINE( 496)						key3 = HX_("",00,00,00,00);
            					}
HXDLIN( 496)					::String folder = (HX_("mods/",9e,2f,58,0c) + key3);
HXDLIN( 496)					bool _hx_tmp;
HXDLIN( 496)					if (::sys::FileSystem_obj::exists(folder)) {
HXLINE( 496)						_hx_tmp = !(foldersToCheck->contains(folder));
            					}
            					else {
HXLINE( 496)						_hx_tmp = false;
            					}
HXDLIN( 496)					if (_hx_tmp) {
HXLINE( 496)						foldersToCheck->push(folder);
            					}
            				}
            			}
HXDLIN( 496)			::String key4 = HX_("data/characterList.txt",c4,ce,ff,de);
HXDLIN( 496)			if (::hx::IsNull( key4 )) {
HXLINE( 496)				key4 = HX_("",00,00,00,00);
            			}
HXDLIN( 496)			::String folder1 = (HX_("mods/",9e,2f,58,0c) + key4);
HXDLIN( 496)			bool _hx_tmp1;
HXDLIN( 496)			if (::sys::FileSystem_obj::exists(folder1)) {
HXLINE( 496)				_hx_tmp1 = !(foldersToCheck->contains(folder1));
            			}
            			else {
HXLINE( 496)				_hx_tmp1 = false;
            			}
HXDLIN( 496)			if (_hx_tmp1) {
HXLINE( 496)				::String key5 = HX_("data/characterList.txt",c4,ce,ff,de);
HXDLIN( 496)				if (::hx::IsNull( key5 )) {
HXLINE( 496)					key5 = HX_("",00,00,00,00);
            				}
HXDLIN( 496)				foldersToCheck->push((HX_("mods/",9e,2f,58,0c) + key5));
            			}
HXDLIN( 496)			bool _hx_tmp2;
HXDLIN( 496)			if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE( 496)				_hx_tmp2 = (::backend::Mods_obj::currentModDirectory.length > 0);
            			}
            			else {
HXLINE( 496)				_hx_tmp2 = false;
            			}
HXDLIN( 496)			if (_hx_tmp2) {
HXLINE( 496)				::String key6 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + HX_("data/characterList.txt",c4,ce,ff,de));
HXDLIN( 496)				if (::hx::IsNull( key6 )) {
HXLINE( 496)					key6 = HX_("",00,00,00,00);
            				}
HXDLIN( 496)				::String folder2 = (HX_("mods/",9e,2f,58,0c) + key6);
HXDLIN( 496)				bool _hx_tmp3;
HXDLIN( 496)				if (::sys::FileSystem_obj::exists(folder2)) {
HXLINE( 496)					_hx_tmp3 = !(foldersToCheck->contains(folder2));
            				}
            				else {
HXLINE( 496)					_hx_tmp3 = false;
            				}
HXDLIN( 496)				if (_hx_tmp3) {
HXLINE( 496)					foldersToCheck->push(folder2);
            				}
            			}
            		}
HXDLIN( 496)		::Array< ::String > paths = foldersToCheck;
HXDLIN( 496)		::String defaultPath = (defaultDirectory + HX_("data/characterList.txt",c4,ce,ff,de));
HXDLIN( 496)		if (paths->contains(defaultPath)) {
HXLINE( 496)			paths->remove(defaultPath);
HXDLIN( 496)			paths->insert(0,defaultPath);
            		}
HXDLIN( 496)		{
HXLINE( 496)			int _g4 = 0;
HXDLIN( 496)			while((_g4 < paths->length)){
HXLINE( 496)				::String file1 = paths->__get(_g4);
HXDLIN( 496)				_g4 = (_g4 + 1);
HXDLIN( 496)				::String path = file1;
HXDLIN( 496)				::String daList = null();
HXDLIN( 496)				::Array< ::String > formatted = path.split(HX_(":",3a,00,00,00));
HXDLIN( 496)				path = formatted->__get((formatted->length - 1));
HXDLIN( 496)				if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 496)					daList = ::sys::io::File_obj::getContent(path);
            				}
HXDLIN( 496)				::Array< ::String > list;
HXDLIN( 496)				if (::hx::IsNotNull( daList )) {
HXLINE( 496)					::Array< ::String > daList1 = ::Array_obj< ::String >::__new(0);
HXDLIN( 496)					daList1 = ::StringTools_obj::trim(daList).split(HX_("\n",0a,00,00,00));
HXDLIN( 496)					{
HXLINE( 496)						int _g5 = 0;
HXDLIN( 496)						int _g6 = daList1->length;
HXDLIN( 496)						while((_g5 < _g6)){
HXLINE( 496)							_g5 = (_g5 + 1);
HXDLIN( 496)							int i = (_g5 - 1);
HXDLIN( 496)							daList1[i] = ::StringTools_obj::trim(daList1->__get(i));
            						}
            					}
HXDLIN( 496)					list = daList1;
            				}
            				else {
HXLINE( 496)					list = ::Array_obj< ::String >::__new(0);
            				}
HXDLIN( 496)				{
HXLINE( 496)					int _g7 = 0;
HXDLIN( 496)					while((_g7 < list->length)){
HXLINE( 496)						::String value = list->__get(_g7);
HXDLIN( 496)						_g7 = (_g7 + 1);
HXDLIN( 496)						bool _hx_tmp4;
HXDLIN( 496)						bool _hx_tmp5;
HXDLIN( 496)						if (!(allowDuplicates)) {
HXLINE( 496)							_hx_tmp5 = !(mergedList->contains(value));
            						}
            						else {
HXLINE( 496)							_hx_tmp5 = true;
            						}
HXDLIN( 496)						if (_hx_tmp5) {
HXLINE( 496)							_hx_tmp4 = (value.length > 0);
            						}
            						else {
HXLINE( 496)							_hx_tmp4 = false;
            						}
HXDLIN( 496)						if (_hx_tmp4) {
HXLINE( 496)							mergedList->push(value);
            						}
            					}
            				}
            			}
            		}
HXDLIN( 496)		::Array< ::String > characters = mergedList;
HXLINE( 497)		{
HXLINE( 497)			int _g8 = 0;
HXDLIN( 497)			while((_g8 < characters->length)){
HXLINE( 497)				::String character = characters->__get(_g8);
HXDLIN( 497)				_g8 = (_g8 + 1);
HXLINE( 499)				if ((::StringTools_obj::trim(character).length > 0)) {
HXLINE( 500)					tempArray->push(character);
            				}
            			}
            		}
HXLINE( 504)		{
HXLINE( 504)			int _g9 = 0;
HXDLIN( 504)			int _g10 = directories->length;
HXDLIN( 504)			while((_g9 < _g10)){
HXLINE( 504)				_g9 = (_g9 + 1);
HXDLIN( 504)				int i1 = (_g9 - 1);
HXLINE( 505)				::String directory = directories->__get(i1);
HXLINE( 506)				if (::sys::FileSystem_obj::exists(directory)) {
HXLINE( 507)					int _g11 = 0;
HXDLIN( 507)					::Array< ::String > _g12 = ::sys::FileSystem_obj::readDirectory(directory);
HXDLIN( 507)					while((_g11 < _g12->length)){
HXLINE( 507)						::String file2 = _g12->__get(_g11);
HXDLIN( 507)						_g11 = (_g11 + 1);
HXLINE( 508)						::String path1 = ::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,directory)->init(1,file2));
HXLINE( 509)						bool _hx_tmp6;
HXDLIN( 509)						if (!(::sys::FileSystem_obj::isDirectory(path1))) {
HXLINE( 509)							_hx_tmp6 = ::StringTools_obj::endsWith(file2,HX_(".json",56,f1,d6,c2));
            						}
            						else {
HXLINE( 509)							_hx_tmp6 = false;
            						}
HXDLIN( 509)						if (_hx_tmp6) {
HXLINE( 510)							::String charToCheck = file2.substr(0,(file2.length - 5));
HXLINE( 511)							bool _hx_tmp7;
HXDLIN( 511)							bool _hx_tmp8;
HXDLIN( 511)							if ((::StringTools_obj::trim(charToCheck).length > 0)) {
HXLINE( 511)								_hx_tmp8 = !(::StringTools_obj::endsWith(charToCheck,HX_("-dead",51,69,6e,2b)));
            							}
            							else {
HXLINE( 511)								_hx_tmp8 = false;
            							}
HXDLIN( 511)							if (_hx_tmp8) {
HXLINE( 511)								_hx_tmp7 = !(tempArray->contains(charToCheck));
            							}
            							else {
HXLINE( 511)								_hx_tmp7 = false;
            							}
HXDLIN( 511)							if (_hx_tmp7) {
HXLINE( 512)								tempArray->push(charToCheck);
HXLINE( 513)								characters->push(charToCheck);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 520)		tempArray = ::Array_obj< ::String >::__new(0);
HXLINE( 522)		Float player1DropDown = (stepperSpeed->y + 45);
HXDLIN( 522)		 ::flixel::addons::ui::FlxUIDropDownMenu player1DropDown1 =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,player1DropDown,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(characters,true), ::Dynamic(new _hx_Closure_11(_gthis,characters)),null(),null(),null(),null());
HXLINE( 528)		player1DropDown1->set_selectedLabel(( (::String)(this->_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 529)		this->blockPressWhileScrolling->push(player1DropDown1);
HXLINE( 531)		Float player1DropDown2 = player1DropDown1->x;
HXDLIN( 531)		Float gfVersionDropDown = (player1DropDown1->y + 40);
HXDLIN( 531)		 ::flixel::addons::ui::FlxUIDropDownMenu gfVersionDropDown1 =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,player1DropDown2,gfVersionDropDown,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(characters,true), ::Dynamic(new _hx_Closure_12(_gthis,characters)),null(),null(),null(),null());
HXLINE( 537)		gfVersionDropDown1->set_selectedLabel(( (::String)(this->_song->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) ));
HXLINE( 538)		this->blockPressWhileScrolling->push(gfVersionDropDown1);
HXLINE( 540)		Float player1DropDown3 = player1DropDown1->x;
HXDLIN( 540)		Float player2DropDown = (gfVersionDropDown1->y + 40);
HXDLIN( 540)		 ::flixel::addons::ui::FlxUIDropDownMenu player2DropDown1 =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,player1DropDown3,player2DropDown,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(characters,true), ::Dynamic(new _hx_Closure_13(_gthis,characters)),null(),null(),null(),null());
HXLINE( 546)		player2DropDown1->set_selectedLabel(( (::String)(this->_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 547)		this->blockPressWhileScrolling->push(player2DropDown1);
HXLINE( 550)		::String key7 = HX_("stages/",9a,7a,ca,2d);
HXDLIN( 550)		if (::hx::IsNull( key7 )) {
HXLINE( 550)			key7 = HX_("",00,00,00,00);
            		}
HXDLIN( 550)		::String key8 = (::backend::Mods_obj::currentModDirectory + HX_("/stages/",4b,6e,0d,ae));
HXDLIN( 550)		if (::hx::IsNull( key8 )) {
HXLINE( 550)			key8 = HX_("",00,00,00,00);
            		}
HXDLIN( 550)		::String file3 = HX_("stages/",9a,7a,ca,2d);
HXDLIN( 550)		if (::hx::IsNull( file3 )) {
HXLINE( 550)			file3 = HX_("",00,00,00,00);
            		}
HXDLIN( 550)		::Array< ::String > directories1 = ::Array_obj< ::String >::__new(3)->init(0,(HX_("mods/",9e,2f,58,0c) + key7))->init(1,(HX_("mods/",9e,2f,58,0c) + key8))->init(2,(HX_("assets/shared/",1e,69,1e,47) + file3));
HXLINE( 551)		{
HXLINE( 551)			int _g13 = 0;
HXDLIN( 551)			::Array< ::String > _g14 = ::backend::Mods_obj::globalMods;
HXDLIN( 551)			while((_g13 < _g14->length)){
HXLINE( 551)				::String mod2 = _g14->__get(_g13);
HXDLIN( 551)				_g13 = (_g13 + 1);
HXLINE( 552)				::String key9 = (mod2 + HX_("/stages/",4b,6e,0d,ae));
HXDLIN( 552)				if (::hx::IsNull( key9 )) {
HXLINE( 552)					key9 = HX_("",00,00,00,00);
            				}
HXDLIN( 552)				directories1->push((HX_("mods/",9e,2f,58,0c) + key9));
            			}
            		}
HXLINE( 557)		::String defaultDirectory1 = HX_("assets/shared/",1e,69,1e,47);
HXDLIN( 557)		bool allowDuplicates1 = false;
HXDLIN( 557)		if (::hx::IsNull( defaultDirectory1 )) {
HXLINE( 557)			defaultDirectory1 = HX_("assets/shared/",1e,69,1e,47);
            		}
HXDLIN( 557)		defaultDirectory1 = ::StringTools_obj::trim(defaultDirectory1);
HXDLIN( 557)		if (!(::StringTools_obj::endsWith(defaultDirectory1,HX_("/",2f,00,00,00)))) {
HXLINE( 557)			defaultDirectory1 = (defaultDirectory1 + HX_("/",2f,00,00,00));
            		}
HXDLIN( 557)		if (!(::StringTools_obj::startsWith(defaultDirectory1,HX_("assets/",4c,2a,dc,36)))) {
HXLINE( 557)			defaultDirectory1 = (HX_("assets/",4c,2a,dc,36) + defaultDirectory1);
            		}
HXDLIN( 557)		::Array< ::String > mergedList1 = ::Array_obj< ::String >::__new(0);
HXDLIN( 557)		::Array< ::String > foldersToCheck1 = ::Array_obj< ::String >::__new(0);
HXDLIN( 557)		if (::sys::FileSystem_obj::exists((defaultDirectory1 + HX_("data/stageList.txt",59,51,a7,b9)))) {
HXLINE( 557)			foldersToCheck1->push((defaultDirectory1 + HX_("data/stageList.txt",59,51,a7,b9)));
            		}
HXDLIN( 557)		{
HXLINE( 557)			{
HXLINE( 557)				int _g15 = 0;
HXDLIN( 557)				::Array< ::String > _g16 = ::backend::Mods_obj::globalMods;
HXDLIN( 557)				while((_g15 < _g16->length)){
HXLINE( 557)					::String mod3 = _g16->__get(_g15);
HXDLIN( 557)					_g15 = (_g15 + 1);
HXDLIN( 557)					::String key10 = ((mod3 + HX_("/",2f,00,00,00)) + HX_("data/stageList.txt",59,51,a7,b9));
HXDLIN( 557)					if (::hx::IsNull( key10 )) {
HXLINE( 557)						key10 = HX_("",00,00,00,00);
            					}
HXDLIN( 557)					::String folder3 = (HX_("mods/",9e,2f,58,0c) + key10);
HXDLIN( 557)					bool _hx_tmp9;
HXDLIN( 557)					if (::sys::FileSystem_obj::exists(folder3)) {
HXLINE( 557)						_hx_tmp9 = !(foldersToCheck1->contains(folder3));
            					}
            					else {
HXLINE( 557)						_hx_tmp9 = false;
            					}
HXDLIN( 557)					if (_hx_tmp9) {
HXLINE( 557)						foldersToCheck1->push(folder3);
            					}
            				}
            			}
HXDLIN( 557)			::String key11 = HX_("data/stageList.txt",59,51,a7,b9);
HXDLIN( 557)			if (::hx::IsNull( key11 )) {
HXLINE( 557)				key11 = HX_("",00,00,00,00);
            			}
HXDLIN( 557)			::String folder4 = (HX_("mods/",9e,2f,58,0c) + key11);
HXDLIN( 557)			bool _hx_tmp10;
HXDLIN( 557)			if (::sys::FileSystem_obj::exists(folder4)) {
HXLINE( 557)				_hx_tmp10 = !(foldersToCheck1->contains(folder4));
            			}
            			else {
HXLINE( 557)				_hx_tmp10 = false;
            			}
HXDLIN( 557)			if (_hx_tmp10) {
HXLINE( 557)				::String key12 = HX_("data/stageList.txt",59,51,a7,b9);
HXDLIN( 557)				if (::hx::IsNull( key12 )) {
HXLINE( 557)					key12 = HX_("",00,00,00,00);
            				}
HXDLIN( 557)				foldersToCheck1->push((HX_("mods/",9e,2f,58,0c) + key12));
            			}
HXDLIN( 557)			bool _hx_tmp11;
HXDLIN( 557)			if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE( 557)				_hx_tmp11 = (::backend::Mods_obj::currentModDirectory.length > 0);
            			}
            			else {
HXLINE( 557)				_hx_tmp11 = false;
            			}
HXDLIN( 557)			if (_hx_tmp11) {
HXLINE( 557)				::String key13 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + HX_("data/stageList.txt",59,51,a7,b9));
HXDLIN( 557)				if (::hx::IsNull( key13 )) {
HXLINE( 557)					key13 = HX_("",00,00,00,00);
            				}
HXDLIN( 557)				::String folder5 = (HX_("mods/",9e,2f,58,0c) + key13);
HXDLIN( 557)				bool _hx_tmp12;
HXDLIN( 557)				if (::sys::FileSystem_obj::exists(folder5)) {
HXLINE( 557)					_hx_tmp12 = !(foldersToCheck1->contains(folder5));
            				}
            				else {
HXLINE( 557)					_hx_tmp12 = false;
            				}
HXDLIN( 557)				if (_hx_tmp12) {
HXLINE( 557)					foldersToCheck1->push(folder5);
            				}
            			}
            		}
HXDLIN( 557)		::Array< ::String > paths1 = foldersToCheck1;
HXDLIN( 557)		::String defaultPath1 = (defaultDirectory1 + HX_("data/stageList.txt",59,51,a7,b9));
HXDLIN( 557)		if (paths1->contains(defaultPath1)) {
HXLINE( 557)			paths1->remove(defaultPath1);
HXDLIN( 557)			paths1->insert(0,defaultPath1);
            		}
HXDLIN( 557)		{
HXLINE( 557)			int _g17 = 0;
HXDLIN( 557)			while((_g17 < paths1->length)){
HXLINE( 557)				::String file4 = paths1->__get(_g17);
HXDLIN( 557)				_g17 = (_g17 + 1);
HXDLIN( 557)				::String path2 = file4;
HXDLIN( 557)				::String daList2 = null();
HXDLIN( 557)				::Array< ::String > formatted1 = path2.split(HX_(":",3a,00,00,00));
HXDLIN( 557)				path2 = formatted1->__get((formatted1->length - 1));
HXDLIN( 557)				if (::sys::FileSystem_obj::exists(path2)) {
HXLINE( 557)					daList2 = ::sys::io::File_obj::getContent(path2);
            				}
HXDLIN( 557)				::Array< ::String > list1;
HXDLIN( 557)				if (::hx::IsNotNull( daList2 )) {
HXLINE( 557)					::Array< ::String > daList3 = ::Array_obj< ::String >::__new(0);
HXDLIN( 557)					daList3 = ::StringTools_obj::trim(daList2).split(HX_("\n",0a,00,00,00));
HXDLIN( 557)					{
HXLINE( 557)						int _g18 = 0;
HXDLIN( 557)						int _g19 = daList3->length;
HXDLIN( 557)						while((_g18 < _g19)){
HXLINE( 557)							_g18 = (_g18 + 1);
HXDLIN( 557)							int i2 = (_g18 - 1);
HXDLIN( 557)							daList3[i2] = ::StringTools_obj::trim(daList3->__get(i2));
            						}
            					}
HXDLIN( 557)					list1 = daList3;
            				}
            				else {
HXLINE( 557)					list1 = ::Array_obj< ::String >::__new(0);
            				}
HXDLIN( 557)				{
HXLINE( 557)					int _g20 = 0;
HXDLIN( 557)					while((_g20 < list1->length)){
HXLINE( 557)						::String value1 = list1->__get(_g20);
HXDLIN( 557)						_g20 = (_g20 + 1);
HXDLIN( 557)						bool _hx_tmp13;
HXDLIN( 557)						bool _hx_tmp14;
HXDLIN( 557)						if (!(allowDuplicates1)) {
HXLINE( 557)							_hx_tmp14 = !(mergedList1->contains(value1));
            						}
            						else {
HXLINE( 557)							_hx_tmp14 = true;
            						}
HXDLIN( 557)						if (_hx_tmp14) {
HXLINE( 557)							_hx_tmp13 = (value1.length > 0);
            						}
            						else {
HXLINE( 557)							_hx_tmp13 = false;
            						}
HXDLIN( 557)						if (_hx_tmp13) {
HXLINE( 557)							mergedList1->push(value1);
            						}
            					}
            				}
            			}
            		}
HXDLIN( 557)		::Array< ::String > stageFile = mergedList1;
HXLINE( 558)		::Array< ::String > stages = ::Array_obj< ::String >::__new(0);
HXLINE( 559)		{
HXLINE( 559)			int _g21 = 0;
HXDLIN( 559)			while((_g21 < stageFile->length)){
HXLINE( 559)				::String stage = stageFile->__get(_g21);
HXDLIN( 559)				_g21 = (_g21 + 1);
HXLINE( 560)				if ((::StringTools_obj::trim(stage).length > 0)) {
HXLINE( 561)					stages->push(stage);
            				}
HXLINE( 563)				tempArray->push(stage);
            			}
            		}
HXLINE( 566)		{
HXLINE( 566)			int _g22 = 0;
HXDLIN( 566)			int _g23 = directories1->length;
HXDLIN( 566)			while((_g22 < _g23)){
HXLINE( 566)				_g22 = (_g22 + 1);
HXDLIN( 566)				int i3 = (_g22 - 1);
HXLINE( 567)				::String directory1 = directories1->__get(i3);
HXLINE( 568)				if (::sys::FileSystem_obj::exists(directory1)) {
HXLINE( 569)					int _g24 = 0;
HXDLIN( 569)					::Array< ::String > _g25 = ::sys::FileSystem_obj::readDirectory(directory1);
HXDLIN( 569)					while((_g24 < _g25->length)){
HXLINE( 569)						::String file5 = _g25->__get(_g24);
HXDLIN( 569)						_g24 = (_g24 + 1);
HXLINE( 570)						::String path3 = ::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,directory1)->init(1,file5));
HXLINE( 571)						bool _hx_tmp15;
HXDLIN( 571)						if (!(::sys::FileSystem_obj::isDirectory(path3))) {
HXLINE( 571)							_hx_tmp15 = ::StringTools_obj::endsWith(file5,HX_(".json",56,f1,d6,c2));
            						}
            						else {
HXLINE( 571)							_hx_tmp15 = false;
            						}
HXDLIN( 571)						if (_hx_tmp15) {
HXLINE( 572)							::String stageToCheck = file5.substr(0,(file5.length - 5));
HXLINE( 573)							bool _hx_tmp16;
HXDLIN( 573)							if ((::StringTools_obj::trim(stageToCheck).length > 0)) {
HXLINE( 573)								_hx_tmp16 = !(tempArray->contains(stageToCheck));
            							}
            							else {
HXLINE( 573)								_hx_tmp16 = false;
            							}
HXDLIN( 573)							if (_hx_tmp16) {
HXLINE( 574)								tempArray->push(stageToCheck);
HXLINE( 575)								stages->push(stageToCheck);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 583)		if ((stages->length < 1)) {
HXLINE( 583)			stages->push(HX_("stage",be,6a,0b,84));
            		}
HXLINE( 585)		Float _hx_tmp17 = (player1DropDown1->x + 140);
HXDLIN( 585)		Float player1DropDown4 = player1DropDown1->y;
HXDLIN( 585)		this->stageDropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,_hx_tmp17,player1DropDown4,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(stages,true), ::Dynamic(new _hx_Closure_14(stages,_gthis)),null(),null(),null(),null());
HXLINE( 589)		this->stageDropDown->set_selectedLabel(( (::String)(this->_song->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) ));
HXLINE( 590)		this->blockPressWhileScrolling->push(this->stageDropDown);
HXLINE( 592)		 ::flixel::addons::ui::FlxUI tab_group_song =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 593)		tab_group_song->name = HX_("Song",f5,4f,31,37);
HXLINE( 594)		tab_group_song->add(this->UI_songTitle).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 596)		tab_group_song->add(check_voices).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 597)		tab_group_song->add(clear_events).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 598)		tab_group_song->add(clear_notes).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 599)		tab_group_song->add(saveButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 600)		tab_group_song->add(saveEvents).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 601)		tab_group_song->add(reloadSong).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 602)		tab_group_song->add(reloadSongJson).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 603)		tab_group_song->add(loadAutosaveBtn).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 604)		tab_group_song->add(loadEventJson).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 605)		tab_group_song->add(stepperBPM).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 606)		tab_group_song->add(stepperSpeed).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 607)		tab_group_song->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,stepperBPM->x,(stepperBPM->y - ( (Float)(15) )),0,HX_("Song BPM:",a6,54,cf,d6),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 608)		tab_group_song->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(stepperBPM->x + 100),(stepperBPM->y - ( (Float)(15) )),0,HX_("Song Offset:",fc,41,a6,7b),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 609)		tab_group_song->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,stepperSpeed->x,(stepperSpeed->y - ( (Float)(15) )),0,HX_("Song Speed:",be,13,ac,f1),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 610)		tab_group_song->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,player2DropDown1->x,(player2DropDown1->y - ( (Float)(15) )),0,HX_("Opponent:",dd,8f,bc,4a),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 611)		tab_group_song->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,gfVersionDropDown1->x,(gfVersionDropDown1->y - ( (Float)(15) )),0,HX_("Girlfriend:",20,89,69,8b),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 612)		tab_group_song->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,player1DropDown1->x,(player1DropDown1->y - ( (Float)(15) )),0,HX_("Boyfriend:",b0,17,1d,f1),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 613)		tab_group_song->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->stageDropDown->x,(this->stageDropDown->y - ( (Float)(15) )),0,HX_("Stage:",dc,6f,86,3a),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 614)		tab_group_song->add(player2DropDown1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 615)		tab_group_song->add(gfVersionDropDown1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 616)		tab_group_song->add(player1DropDown1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 617)		tab_group_song->add(this->stageDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 619)		this->UI_box->addGroup(tab_group_song);
HXLINE( 621)		this->initPsychCamera()->follow(this->camPos,::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn(),999);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addSongUI,(void))

void ChartingState_obj::addSectionUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_673_addSectionUI)
HXLINE( 674)			_gthis->notesCopied = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 675)			_gthis->sectionToCopy = ::states::editors::ChartingState_obj::curSec;
HXLINE( 676)			{
HXLINE( 676)				int _g = 0;
HXDLIN( 676)				int _g1 = ( (::cpp::VirtualArray)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->get_length();
HXDLIN( 676)				while((_g < _g1)){
HXLINE( 676)					_g = (_g + 1);
HXDLIN( 676)					int i = (_g - 1);
HXLINE( 678)					::cpp::VirtualArray note = ( (::cpp::VirtualArray)( ::Dynamic( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(i)) );
HXLINE( 679)					_gthis->notesCopied->push(note);
            				}
            			}
HXLINE( 682)			Float startThing = _gthis->sectionStartTime(null());
HXLINE( 683)			Float endThing = _gthis->sectionStartTime(1);
HXLINE( 684)			{
HXLINE( 684)				int _g2 = 0;
HXDLIN( 684)				::cpp::VirtualArray _g3 = ( (::cpp::VirtualArray)(_gthis->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) );
HXDLIN( 684)				while((_g2 < _g3->get_length())){
HXLINE( 684)					 ::Dynamic event = _g3->__get(_g2);
HXDLIN( 684)					_g2 = (_g2 + 1);
HXLINE( 686)					Float strumTime = ( (Float)(event->__GetItem(0)) );
HXLINE( 687)					bool copyButton;
HXDLIN( 687)					if (::hx::IsGreater( endThing,event->__GetItem(0) )) {
HXLINE( 687)						copyButton = ::hx::IsGreaterEq( event->__GetItem(0),startThing );
            					}
            					else {
HXLINE( 687)						copyButton = false;
            					}
HXDLIN( 687)					if (copyButton) {
HXLINE( 689)						::cpp::VirtualArray copiedEventArray = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 690)						{
HXLINE( 690)							int _g4 = 0;
HXDLIN( 690)							int _g5 = ( (int)(event->__GetItem(1)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN( 690)							while((_g4 < _g5)){
HXLINE( 690)								_g4 = (_g4 + 1);
HXDLIN( 690)								int i1 = (_g4 - 1);
HXLINE( 692)								::cpp::VirtualArray eventToPush = ( (::cpp::VirtualArray)(event->__GetItem(1)->__GetItem(i1)) );
HXLINE( 693)								copiedEventArray->push(::cpp::VirtualArray_obj::__new(3)->init(0,eventToPush->__get(0))->init(1,eventToPush->__get(1))->init(2,eventToPush->__get(2)));
            							}
            						}
HXLINE( 695)						_gthis->notesCopied->push(::cpp::VirtualArray_obj::__new(3)->init(0,strumTime)->init(1,-1)->init(2,copiedEventArray));
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_1, ::states::editors::ChartingState,_gthis,::Array< ::Dynamic>,check_eventsSec,::Array< ::Dynamic>,check_notesSec) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_701_addSectionUI)
HXLINE( 702)			bool pasteButton;
HXDLIN( 702)			if (::hx::IsNotNull( _gthis->notesCopied )) {
HXLINE( 702)				pasteButton = (_gthis->notesCopied->get_length() < 1);
            			}
            			else {
HXLINE( 702)				pasteButton = true;
            			}
HXDLIN( 702)			if (pasteButton) {
HXLINE( 704)				return;
            			}
HXLINE( 707)			Float addToTime = ::backend::Conductor_obj::stepCrochet;
HXDLIN( 707)			Float addToTime1 = (( (Float)(_gthis->getSectionBeats(null())) ) * ( (Float)(4) ));
HXDLIN( 707)			Float addToTime2 = (addToTime * (addToTime1 * ( (Float)((::states::editors::ChartingState_obj::curSec - _gthis->sectionToCopy)) )));
HXLINE( 710)			{
HXLINE( 710)				int _g = 0;
HXDLIN( 710)				::cpp::VirtualArray _g1 = _gthis->notesCopied;
HXDLIN( 710)				while((_g < _g1->get_length())){
HXLINE( 710)					 ::Dynamic note = _g1->__get(_g);
HXDLIN( 710)					_g = (_g + 1);
HXLINE( 712)					::cpp::VirtualArray copiedNote = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 713)					Float newStrumTime = (note->__GetItem(0) + addToTime2);
HXLINE( 714)					if (::hx::IsLess( note->__GetItem(1),0 )) {
HXLINE( 716)						if (check_eventsSec->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->checked) {
HXLINE( 718)							::cpp::VirtualArray copiedEventArray = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 719)							{
HXLINE( 719)								int _g2 = 0;
HXDLIN( 719)								int _g3 = ( (int)(note->__GetItem(2)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN( 719)								while((_g2 < _g3)){
HXLINE( 719)									_g2 = (_g2 + 1);
HXDLIN( 719)									int i = (_g2 - 1);
HXLINE( 721)									::cpp::VirtualArray eventToPush = ( (::cpp::VirtualArray)(note->__GetItem(2)->__GetItem(i)) );
HXLINE( 722)									copiedEventArray->push(::cpp::VirtualArray_obj::__new(3)->init(0,eventToPush->__get(0))->init(1,eventToPush->__get(1))->init(2,eventToPush->__get(2)));
            								}
            							}
HXLINE( 724)							( (::cpp::VirtualArray)(_gthis->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) )->push(::cpp::VirtualArray_obj::__new(2)->init(0,newStrumTime)->init(1,copiedEventArray));
            						}
            					}
            					else {
HXLINE( 729)						if (check_notesSec->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->checked) {
HXLINE( 731)							if (::hx::IsNotNull( note->__GetItem(4) )) {
HXLINE( 732)								copiedNote = ::cpp::VirtualArray_obj::__new(5)->init(0,newStrumTime)->init(1,note->__GetItem(1))->init(2,note->__GetItem(2))->init(3,note->__GetItem(3))->init(4,note->__GetItem(4));
            							}
            							else {
HXLINE( 734)								copiedNote = ::cpp::VirtualArray_obj::__new(4)->init(0,newStrumTime)->init(1,note->__GetItem(1))->init(2,note->__GetItem(2))->init(3,note->__GetItem(3));
            							}
HXLINE( 736)							( (::cpp::VirtualArray)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(copiedNote);
            						}
            					}
            				}
            			}
HXLINE( 740)			_gthis->updateGrid();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_2, ::states::editors::ChartingState,_gthis,::Array< ::Dynamic>,check_eventsSec,::Array< ::Dynamic>,check_notesSec) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_744_addSectionUI)
HXLINE( 745)			if (check_notesSec->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->checked) {
HXLINE( 747)				 ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::cpp::VirtualArray_obj::__new(0),::hx::paccDynamic);
            			}
HXLINE( 750)			if (check_eventsSec->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->checked) {
HXLINE( 752)				int i = (( (::cpp::VirtualArray)(_gthis->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) )->get_length() - 1);
HXLINE( 753)				Float startThing = _gthis->sectionStartTime(null());
HXLINE( 754)				Float endThing = _gthis->sectionStartTime(1);
HXLINE( 755)				while((i > -1)){
HXLINE( 756)					::cpp::VirtualArray event = ( (::cpp::VirtualArray)( ::Dynamic(_gthis->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic))->__GetItem(i)) );
HXLINE( 757)					bool clearSectionButton;
HXDLIN( 757)					bool clearSectionButton1;
HXDLIN( 757)					if (::hx::IsNotNull( event )) {
HXLINE( 757)						clearSectionButton1 = ::hx::IsGreater( endThing,event->__get(0) );
            					}
            					else {
HXLINE( 757)						clearSectionButton1 = false;
            					}
HXDLIN( 757)					if (clearSectionButton1) {
HXLINE( 757)						clearSectionButton = ::hx::IsGreaterEq( event->__get(0),startThing );
            					}
            					else {
HXLINE( 757)						clearSectionButton = false;
            					}
HXDLIN( 757)					if (clearSectionButton) {
HXLINE( 759)						( (::cpp::VirtualArray)(_gthis->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) )->remove(event);
            					}
HXLINE( 761)					i = (i - 1);
            				}
            			}
HXLINE( 764)			_gthis->updateGrid();
HXLINE( 765)			_gthis->updateNoteUI();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_776_addSectionUI)
HXLINE( 777)			{
HXLINE( 777)				int _g = 0;
HXDLIN( 777)				int _g1 = ( (::cpp::VirtualArray)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->get_length();
HXDLIN( 777)				while((_g < _g1)){
HXLINE( 777)					_g = (_g + 1);
HXDLIN( 777)					int i = (_g - 1);
HXLINE( 779)					::cpp::VirtualArray note = ( (::cpp::VirtualArray)( ::Dynamic( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(i)) );
HXLINE( 780)					note->set(1,::hx::Mod((note->__get(1) + 4),8));
HXLINE( 781)					 ::Dynamic( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__SetItem(i,note);
            				}
            			}
HXLINE( 783)			_gthis->updateGrid();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_4, ::states::editors::ChartingState,_gthis,::Array< ::Dynamic>,stepperCopy) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_788_addSectionUI)
HXLINE( 789)			int value = ::Std_obj::_hx_int(stepperCopy->__get(0).StaticCast<  ::flixel::addons::ui::FlxUINumericStepper >()->value);
HXLINE( 790)			if ((value == 0)) {
HXLINE( 790)				return;
            			}
HXLINE( 792)			int a = ::states::editors::ChartingState_obj::curSec;
HXDLIN( 792)			int daSec;
HXDLIN( 792)			if ((a > value)) {
HXLINE( 792)				daSec = a;
            			}
            			else {
HXLINE( 792)				daSec = value;
            			}
HXLINE( 794)			{
HXLINE( 794)				int _g = 0;
HXDLIN( 794)				::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((daSec - value))->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN( 794)				while((_g < _g1->get_length())){
HXLINE( 794)					 ::Dynamic note = _g1->__get(_g);
HXDLIN( 794)					_g = (_g + 1);
HXLINE( 796)					Float note1 = ( (Float)(note->__GetItem(0)) );
HXDLIN( 796)					Float strum = ::backend::Conductor_obj::stepCrochet;
HXDLIN( 796)					Float strum1 = (note1 + (strum * ((( (Float)(_gthis->getSectionBeats(daSec)) ) * ( (Float)(4) )) * ( (Float)(value) ))));
HXLINE( 798)					::cpp::VirtualArray copiedNote = ::cpp::VirtualArray_obj::__new(4)->init(0,strum1)->init(1,note->__GetItem(1))->init(2,note->__GetItem(2))->init(3,note->__GetItem(3));
HXLINE( 799)					( (::cpp::VirtualArray)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(copiedNote);
            				}
            			}
HXLINE( 802)			Float startThing = _gthis->sectionStartTime(-(value));
HXLINE( 803)			Float endThing = _gthis->sectionStartTime((-(value) + 1));
HXLINE( 804)			{
HXLINE( 804)				int _g2 = 0;
HXDLIN( 804)				::cpp::VirtualArray _g3 = ( (::cpp::VirtualArray)(_gthis->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) );
HXDLIN( 804)				while((_g2 < _g3->get_length())){
HXLINE( 804)					 ::Dynamic event = _g3->__get(_g2);
HXDLIN( 804)					_g2 = (_g2 + 1);
HXLINE( 806)					Float strumTime = ( (Float)(event->__GetItem(0)) );
HXLINE( 807)					bool copyLastButton;
HXDLIN( 807)					if (::hx::IsGreater( endThing,event->__GetItem(0) )) {
HXLINE( 807)						copyLastButton = ::hx::IsGreaterEq( event->__GetItem(0),startThing );
            					}
            					else {
HXLINE( 807)						copyLastButton = false;
            					}
HXDLIN( 807)					if (copyLastButton) {
HXLINE( 809)						Float strumTime1 = ::backend::Conductor_obj::stepCrochet;
HXDLIN( 809)						strumTime = (strumTime + (strumTime1 * ((( (Float)(_gthis->getSectionBeats(daSec)) ) * ( (Float)(4) )) * ( (Float)(value) ))));
HXLINE( 810)						::cpp::VirtualArray copiedEventArray = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 811)						{
HXLINE( 811)							int _g4 = 0;
HXDLIN( 811)							int _g5 = ( (int)(event->__GetItem(1)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN( 811)							while((_g4 < _g5)){
HXLINE( 811)								_g4 = (_g4 + 1);
HXDLIN( 811)								int i = (_g4 - 1);
HXLINE( 813)								::cpp::VirtualArray eventToPush = ( (::cpp::VirtualArray)(event->__GetItem(1)->__GetItem(i)) );
HXLINE( 814)								copiedEventArray->push(::cpp::VirtualArray_obj::__new(3)->init(0,eventToPush->__get(0))->init(1,eventToPush->__get(1))->init(2,eventToPush->__get(2)));
            							}
            						}
HXLINE( 816)						( (::cpp::VirtualArray)(_gthis->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) )->push(::cpp::VirtualArray_obj::__new(2)->init(0,strumTime)->init(1,copiedEventArray));
            					}
            				}
            			}
HXLINE( 819)			_gthis->updateGrid();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_828_addSectionUI)
HXLINE( 829)			::Array< ::Dynamic> duetNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 830)			{
HXLINE( 830)				int _g = 0;
HXDLIN( 830)				::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN( 830)				while((_g < _g1->get_length())){
HXLINE( 830)					 ::Dynamic note = _g1->__get(_g);
HXDLIN( 830)					_g = (_g + 1);
HXLINE( 832)					int boob = ( (int)(note->__GetItem(1)) );
HXLINE( 833)					if ((boob > 3)) {
HXLINE( 834)						boob = (boob - 4);
            					}
            					else {
HXLINE( 836)						boob = (boob + 4);
            					}
HXLINE( 839)					::cpp::VirtualArray copiedNote = ::cpp::VirtualArray_obj::__new(4)->init(0,note->__GetItem(0))->init(1,boob)->init(2,note->__GetItem(2))->init(3,note->__GetItem(3));
HXLINE( 840)					duetNotes->push(copiedNote);
            				}
            			}
HXLINE( 843)			{
HXLINE( 843)				int _g2 = 0;
HXDLIN( 843)				while((_g2 < duetNotes->length)){
HXLINE( 843)					::cpp::VirtualArray i = ::cpp::VirtualArray( duetNotes->__get(_g2));
HXDLIN( 843)					_g2 = (_g2 + 1);
HXLINE( 844)					( (::cpp::VirtualArray)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(i);
            				}
            			}
HXLINE( 848)			_gthis->updateGrid();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_851_addSectionUI)
HXLINE( 852)			::Array< ::Dynamic> duetNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 853)			{
HXLINE( 853)				int _g = 0;
HXDLIN( 853)				::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN( 853)				while((_g < _g1->get_length())){
HXLINE( 853)					 ::Dynamic note = _g1->__get(_g);
HXDLIN( 853)					_g = (_g + 1);
HXLINE( 855)					Float boob = ::hx::Mod(note->__GetItem(1),4);
HXLINE( 856)					boob = (( (Float)(3) ) - boob);
HXLINE( 857)					if (::hx::IsGreater( note->__GetItem(1),3 )) {
HXLINE( 857)						boob = (boob + 4);
            					}
HXLINE( 859)					note->__SetItem(1,boob);
HXLINE( 860)					 ::Dynamic copiedNote_0 = note->__GetItem(0);
HXDLIN( 860)					 ::Dynamic copiedNote_1 = boob;
HXDLIN( 860)					 ::Dynamic copiedNote_2 = note->__GetItem(2);
HXDLIN( 860)					 ::Dynamic copiedNote_3 = note->__GetItem(3);
            				}
            			}
HXLINE( 864)			{
HXLINE( 864)				int _g2 = 0;
HXDLIN( 864)				while((_g2 < duetNotes->length)){
HXLINE( 864)					::cpp::VirtualArray i = ::cpp::VirtualArray( duetNotes->__get(_g2));
HXDLIN( 864)					_g2 = (_g2 + 1);
            				}
            			}
HXLINE( 869)			_gthis->updateGrid();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_635_addSectionUI)
HXDLIN( 635)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 636)		 ::flixel::addons::ui::FlxUI tab_group_section =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 637)		tab_group_section->name = HX_("Section",c5,2d,29,2b);
HXLINE( 639)		this->check_mustHitSection =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,15,null(),null(),HX_("Must hit section",a1,02,f0,99),100,null(),null());
HXLINE( 640)		this->check_mustHitSection->name = HX_("check_mustHit",13,36,be,48);
HXLINE( 641)		this->check_mustHitSection->set_checked(( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE( 643)		this->check_gfSection =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,(this->check_mustHitSection->y + 22),null(),null(),HX_("GF section",e4,3e,d0,86),100,null(),null());
HXLINE( 644)		this->check_gfSection->name = HX_("check_gf",76,84,f3,ac);
HXLINE( 645)		this->check_gfSection->set_checked(( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic)) ));
HXLINE( 648)		this->check_altAnim =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,(this->check_gfSection->x + 120),this->check_gfSection->y,null(),null(),HX_("Alt Animation",0d,81,c1,cd),100,null(),null());
HXLINE( 649)		this->check_altAnim->set_checked(( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) ));
HXLINE( 651)		this->stepperBeats =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,100,1,4,1,7,2,null(),null(),null(),null(),null());
HXLINE( 652)		 ::flixel::addons::ui::FlxUINumericStepper _hx_tmp = this->stepperBeats;
HXDLIN( 652)		_hx_tmp->set_value(( (Float)(this->getSectionBeats(null())) ));
HXLINE( 653)		this->stepperBeats->name = HX_("section_beats",23,ad,15,1a);
HXLINE( 654)		this->blockPressWhileTypingOnStepper->push(this->stepperBeats);
HXLINE( 655)		this->check_altAnim->name = HX_("check_altAnim",23,ee,53,2e);
HXLINE( 657)		this->check_changeBPM =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,(this->stepperBeats->y + 30),null(),null(),HX_("Change BPM",2f,3c,7a,fb),100,null(),null());
HXLINE( 658)		this->check_changeBPM->set_checked(( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) ));
HXLINE( 659)		this->check_changeBPM->name = HX_("check_changeBPM",d8,2d,43,fc);
HXLINE( 661)		this->stepperSectionBPM =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,(this->check_changeBPM->y + 20),1,::backend::Conductor_obj::bpm,0,999,1,null(),null(),null(),null(),null());
HXLINE( 662)		if (this->check_changeBPM->checked) {
HXLINE( 663)			this->stepperSectionBPM->set_value(( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 665)			this->stepperSectionBPM->set_value(::backend::Conductor_obj::bpm);
            		}
HXLINE( 667)		this->stepperSectionBPM->name = HX_("section_bpm",45,60,97,44);
HXLINE( 668)		this->blockPressWhileTypingOnStepper->push(this->stepperSectionBPM);
HXLINE( 670)		::Array< ::Dynamic> check_eventsSec = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 671)		::Array< ::Dynamic> check_notesSec = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 672)		 ::flixel::ui::FlxButton copyButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,190,HX_("Copy Section",7a,b6,b0,3b), ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE( 700)		 ::flixel::ui::FlxButton pasteButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(copyButton->x + 100),copyButton->y,HX_("Paste Section",d8,1f,0e,46), ::Dynamic(new _hx_Closure_1(_gthis,check_eventsSec,check_notesSec)));
HXLINE( 743)		 ::flixel::ui::FlxButton clearSectionButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(pasteButton->x + 100),pasteButton->y,HX_("Clear",6d,e1,88,db), ::Dynamic(new _hx_Closure_2(_gthis,check_eventsSec,check_notesSec)));
HXLINE( 767)		clearSectionButton->set_color(-65536);
HXLINE( 768)		clearSectionButton->label->set_color(-1);
HXLINE( 770)		check_notesSec[0] =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,(clearSectionButton->y + 25),null(),null(),HX_("Notes",21,4c,f8,32),100,null(),null());
HXLINE( 771)		check_notesSec->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->set_checked(true);
HXLINE( 772)		check_eventsSec[0] =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,(check_notesSec->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->x + 100),check_notesSec->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->y,null(),null(),HX_("Events",39,c3,fe,ca),100,null(),null());
HXLINE( 773)		check_eventsSec->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->set_checked(true);
HXLINE( 775)		 ::flixel::ui::FlxButton swapSection =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,(check_notesSec->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->y + 40),HX_("Swap section",78,0b,70,e2), ::Dynamic(new _hx_Closure_3(_gthis)));
HXLINE( 786)		::Array< ::Dynamic> stepperCopy = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 787)		 ::flixel::ui::FlxButton copyLastButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,(swapSection->y + 30),HX_("Copy last section",46,61,ca,99), ::Dynamic(new _hx_Closure_4(_gthis,stepperCopy)));
HXLINE( 821)		copyLastButton->setGraphicSize(80,30);
HXLINE( 822)		copyLastButton->updateHitbox();
HXLINE( 824)		stepperCopy[0] =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,(copyLastButton->x + 100),copyLastButton->y,1,1,-999,999,0,null(),null(),null(),null(),null());
HXLINE( 825)		this->blockPressWhileTypingOnStepper->push(stepperCopy->__get(0).StaticCast<  ::flixel::addons::ui::FlxUINumericStepper >());
HXLINE( 827)		 ::flixel::ui::FlxButton duetButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,(copyLastButton->y + 45),HX_("Duet Notes",61,82,21,e3), ::Dynamic(new _hx_Closure_5(_gthis)));
HXLINE( 850)		 ::flixel::ui::FlxButton mirrorButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(duetButton->x + 100),duetButton->y,HX_("Mirror Notes",a0,4f,4a,82), ::Dynamic(new _hx_Closure_6(_gthis)));
HXLINE( 872)		tab_group_section->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->stepperBeats->x,(this->stepperBeats->y - ( (Float)(15) )),0,HX_("Beats per Section:",5b,32,db,c2),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 873)		tab_group_section->add(this->stepperBeats).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 874)		tab_group_section->add(this->stepperSectionBPM).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 875)		tab_group_section->add(this->check_mustHitSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 876)		tab_group_section->add(this->check_gfSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 877)		tab_group_section->add(this->check_altAnim).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 878)		tab_group_section->add(this->check_changeBPM).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 879)		tab_group_section->add(copyButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 880)		tab_group_section->add(pasteButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 881)		tab_group_section->add(clearSectionButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 882)		tab_group_section->add(check_notesSec->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 883)		tab_group_section->add(check_eventsSec->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 884)		tab_group_section->add(swapSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 885)		tab_group_section->add(stepperCopy->__get(0).StaticCast<  ::flixel::addons::ui::FlxUINumericStepper >()).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 886)		tab_group_section->add(copyLastButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 887)		tab_group_section->add(duetButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 888)		tab_group_section->add(mirrorButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 890)		this->UI_box->addGroup(tab_group_section);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addSectionUI,(void))

void ChartingState_obj::addNoteUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::ChartingState,_gthis) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_946_addNoteUI)
HXLINE( 947)			_gthis->currentType = ( (int)(::Std_obj::parseInt(character)) );
HXLINE( 948)			bool _hx_tmp;
HXDLIN( 948)			if (::hx::IsNotNull( _gthis->curSelectedNote )) {
HXLINE( 948)				_hx_tmp = ::hx::IsGreater( _gthis->curSelectedNote->__get(1),-1 );
            			}
            			else {
HXLINE( 948)				_hx_tmp = false;
            			}
HXDLIN( 948)			if (_hx_tmp) {
HXLINE( 949)				_gthis->curSelectedNote->set(3,_gthis->curNoteTypes->__get(_gthis->currentType));
HXLINE( 950)				_gthis->updateGrid();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_899_addNoteUI)
HXDLIN( 899)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 900)		 ::flixel::addons::ui::FlxUI tab_group_note =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 901)		tab_group_note->name = HX_("Note",12,44,e3,33);
HXLINE( 903)		this->stepperSusLength =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,25,(::backend::Conductor_obj::stepCrochet / ( (Float)(2) )),0,0,(::backend::Conductor_obj::stepCrochet * ( (Float)(64) )),null(),null(),null(),null(),null(),null());
HXLINE( 904)		this->stepperSusLength->set_value(( (Float)(0) ));
HXLINE( 905)		this->stepperSusLength->name = HX_("note_susLength",8a,6b,51,4b);
HXLINE( 906)		this->blockPressWhileTypingOnStepper->push(this->stepperSusLength);
HXLINE( 908)		this->strumTimeInputText =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,10,65,180,HX_("0",30,00,00,00),null(),null(),null(),null());
HXLINE( 909)		tab_group_note->add(this->strumTimeInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 910)		this->blockPressWhileTypingOn->push(this->strumTimeInputText);
HXLINE( 912)		int key = 0;
HXLINE( 913)		while((key < ::states::editors::ChartingState_obj::noteTypeList->length)){
HXLINE( 914)			this->curNoteTypes->push(::states::editors::ChartingState_obj::noteTypeList->__get(key));
HXLINE( 915)			key = (key + 1);
            		}
HXLINE( 919)		::Array< ::String > foldersToCheck = ::Array_obj< ::String >::__new(0);
HXDLIN( 919)		if (::sys::FileSystem_obj::exists((HX_("assets/shared/",1e,69,1e,47) + HX_("custom_notetypes/",16,04,18,a1)))) {
HXLINE( 919)			foldersToCheck->push((HX_("assets/shared/",1e,69,1e,47) + HX_("custom_notetypes/",16,04,18,a1)));
            		}
HXDLIN( 919)		{
HXLINE( 919)			{
HXLINE( 919)				int _g = 0;
HXDLIN( 919)				::Array< ::String > _g1 = ::backend::Mods_obj::globalMods;
HXDLIN( 919)				while((_g < _g1->length)){
HXLINE( 919)					::String mod = _g1->__get(_g);
HXDLIN( 919)					_g = (_g + 1);
HXDLIN( 919)					::String key1 = ((mod + HX_("/",2f,00,00,00)) + HX_("custom_notetypes/",16,04,18,a1));
HXDLIN( 919)					if (::hx::IsNull( key1 )) {
HXLINE( 919)						key1 = HX_("",00,00,00,00);
            					}
HXDLIN( 919)					::String folder = (HX_("mods/",9e,2f,58,0c) + key1);
HXDLIN( 919)					bool _hx_tmp;
HXDLIN( 919)					if (::sys::FileSystem_obj::exists(folder)) {
HXLINE( 919)						_hx_tmp = !(foldersToCheck->contains(folder));
            					}
            					else {
HXLINE( 919)						_hx_tmp = false;
            					}
HXDLIN( 919)					if (_hx_tmp) {
HXLINE( 919)						foldersToCheck->push(folder);
            					}
            				}
            			}
HXDLIN( 919)			::String key2 = HX_("custom_notetypes/",16,04,18,a1);
HXDLIN( 919)			if (::hx::IsNull( key2 )) {
HXLINE( 919)				key2 = HX_("",00,00,00,00);
            			}
HXDLIN( 919)			::String folder1 = (HX_("mods/",9e,2f,58,0c) + key2);
HXDLIN( 919)			bool _hx_tmp1;
HXDLIN( 919)			if (::sys::FileSystem_obj::exists(folder1)) {
HXLINE( 919)				_hx_tmp1 = !(foldersToCheck->contains(folder1));
            			}
            			else {
HXLINE( 919)				_hx_tmp1 = false;
            			}
HXDLIN( 919)			if (_hx_tmp1) {
HXLINE( 919)				::String key3 = HX_("custom_notetypes/",16,04,18,a1);
HXDLIN( 919)				if (::hx::IsNull( key3 )) {
HXLINE( 919)					key3 = HX_("",00,00,00,00);
            				}
HXDLIN( 919)				foldersToCheck->push((HX_("mods/",9e,2f,58,0c) + key3));
            			}
HXDLIN( 919)			bool _hx_tmp2;
HXDLIN( 919)			if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE( 919)				_hx_tmp2 = (::backend::Mods_obj::currentModDirectory.length > 0);
            			}
            			else {
HXLINE( 919)				_hx_tmp2 = false;
            			}
HXDLIN( 919)			if (_hx_tmp2) {
HXLINE( 919)				::String key4 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + HX_("custom_notetypes/",16,04,18,a1));
HXDLIN( 919)				if (::hx::IsNull( key4 )) {
HXLINE( 919)					key4 = HX_("",00,00,00,00);
            				}
HXDLIN( 919)				::String folder2 = (HX_("mods/",9e,2f,58,0c) + key4);
HXDLIN( 919)				bool _hx_tmp3;
HXDLIN( 919)				if (::sys::FileSystem_obj::exists(folder2)) {
HXLINE( 919)					_hx_tmp3 = !(foldersToCheck->contains(folder2));
            				}
            				else {
HXLINE( 919)					_hx_tmp3 = false;
            				}
HXDLIN( 919)				if (_hx_tmp3) {
HXLINE( 919)					foldersToCheck->push(folder2);
            				}
            			}
            		}
HXDLIN( 919)		::Array< ::String > foldersToCheck1 = foldersToCheck;
HXLINE( 920)		{
HXLINE( 920)			int _g2 = 0;
HXDLIN( 920)			while((_g2 < foldersToCheck1->length)){
HXLINE( 920)				::String folder3 = foldersToCheck1->__get(_g2);
HXDLIN( 920)				_g2 = (_g2 + 1);
HXLINE( 921)				{
HXLINE( 921)					int _g3 = 0;
HXDLIN( 921)					::Array< ::String > _g4 = ::sys::FileSystem_obj::readDirectory(folder3);
HXDLIN( 921)					while((_g3 < _g4->length)){
HXLINE( 921)						::String file = _g4->__get(_g3);
HXDLIN( 921)						_g3 = (_g3 + 1);
HXLINE( 923)						::String fileName = ::StringTools_obj::trim(file.toLowerCase());
HXLINE( 924)						int wordLen = 4;
HXLINE( 925)						bool _hx_tmp4;
HXDLIN( 925)						bool _hx_tmp5;
HXDLIN( 925)						bool _hx_tmp6;
HXDLIN( 925)						if (!(::StringTools_obj::endsWith(fileName,HX_(".lua",4a,2a,ba,1e)))) {
HXLINE( 926)							if (::StringTools_obj::endsWith(fileName,HX_(".hx",be,42,23,00))) {
HXLINE( 926)								wordLen = 3;
HXLINE( 925)								_hx_tmp6 = (wordLen == 3);
            							}
            							else {
HXLINE( 925)								_hx_tmp6 = false;
            							}
            						}
            						else {
HXLINE( 925)							_hx_tmp6 = true;
            						}
HXDLIN( 925)						if (!(_hx_tmp6)) {
HXLINE( 925)							_hx_tmp5 = ::StringTools_obj::endsWith(fileName,HX_(".txt",02,3f,c0,1e));
            						}
            						else {
HXLINE( 925)							_hx_tmp5 = true;
            						}
HXDLIN( 925)						if (_hx_tmp5) {
HXLINE( 925)							_hx_tmp4 = (fileName != HX_("readme.txt",30,9a,06,a0));
            						}
            						else {
HXLINE( 925)							_hx_tmp4 = false;
            						}
HXDLIN( 925)						if (_hx_tmp4) {
HXLINE( 929)							::String fileToCheck = file.substr(0,(file.length - wordLen));
HXLINE( 930)							if (!(this->curNoteTypes->contains(fileToCheck))) {
HXLINE( 932)								this->curNoteTypes->push(fileToCheck);
HXLINE( 933)								key = (key + 1);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 940)		::Array< ::String > displayNameList = this->curNoteTypes->copy();
HXLINE( 941)		{
HXLINE( 941)			int _g5 = 1;
HXDLIN( 941)			int _g6 = displayNameList->length;
HXDLIN( 941)			while((_g5 < _g6)){
HXLINE( 941)				_g5 = (_g5 + 1);
HXDLIN( 941)				int i = (_g5 - 1);
HXLINE( 942)				displayNameList[i] = ((i + HX_(". ",32,28,00,00)) + displayNameList->__get(i));
            			}
            		}
HXLINE( 945)		this->noteTypeDropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,105,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(displayNameList,true), ::Dynamic(new _hx_Closure_0(_gthis)),null(),null(),null(),null());
HXLINE( 953)		this->blockPressWhileScrolling->push(this->noteTypeDropDown);
HXLINE( 955)		tab_group_note->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,10,0,HX_("Sustain length:",f7,d7,77,6b),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 956)		tab_group_note->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,50,0,HX_("Strum time (in miliseconds):",28,c6,f8,8e),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 957)		tab_group_note->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,90,0,HX_("Note type:",b2,99,67,46),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 958)		tab_group_note->add(this->stepperSusLength).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 959)		tab_group_note->add(this->strumTimeInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 960)		tab_group_note->add(this->noteTypeDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 962)		this->UI_box->addGroup(tab_group_note);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addNoteUI,(void))

void ChartingState_obj::addEventsUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::ChartingState,_gthis) HXARGC(1)
            		void _hx_run(::String pressed){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1012_addEventsUI)
HXLINE(1013)			int selectedEvent = ( (int)(::Std_obj::parseInt(pressed)) );
HXLINE(1014)			_gthis->descText->set_text(( (::String)(_gthis->eventStuff->__get(selectedEvent)->__GetItem(1)) ));
HXLINE(1015)			bool _hx_tmp;
HXDLIN(1015)			if (::hx::IsNotNull( _gthis->curSelectedNote )) {
HXLINE(1015)				_hx_tmp = ::hx::IsNotNull( _gthis->eventStuff );
            			}
            			else {
HXLINE(1015)				_hx_tmp = false;
            			}
HXDLIN(1015)			if (_hx_tmp) {
HXLINE(1016)				bool _hx_tmp1;
HXDLIN(1016)				if (::hx::IsNotNull( _gthis->curSelectedNote )) {
HXLINE(1016)					_hx_tmp1 = ::hx::IsNull( _gthis->curSelectedNote->__get(2) );
            				}
            				else {
HXLINE(1016)					_hx_tmp1 = false;
            				}
HXDLIN(1016)				if (_hx_tmp1) {
HXLINE(1017)					_gthis->curSelectedNote->__get(1)->__GetItem(_gthis->curEventSelected)->__SetItem(0,_gthis->eventStuff->__get(selectedEvent)->__GetItem(0));
            				}
HXLINE(1020)				_gthis->updateGrid();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1038_addEventsUI)
HXLINE(1038)			bool removeButton;
HXDLIN(1038)			if (::hx::IsNotNull( _gthis->curSelectedNote )) {
HXLINE(1038)				removeButton = ::hx::IsNull( _gthis->curSelectedNote->__get(2) );
            			}
            			else {
HXLINE(1038)				removeButton = false;
            			}
HXDLIN(1038)			if (removeButton) {
HXLINE(1040)				if (::hx::IsLess( _gthis->curSelectedNote->__get(1)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),2 )) {
HXLINE(1042)					( (::cpp::VirtualArray)(_gthis->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) )->remove(_gthis->curSelectedNote);
HXLINE(1043)					_gthis->curSelectedNote = null();
            				}
            				else {
HXLINE(1047)					_gthis->curSelectedNote->__get(1)->__Field(HX_("remove",44,9c,88,04),::hx::paccDynamic)(_gthis->curSelectedNote->__get(1)->__GetItem(_gthis->curEventSelected));
            				}
HXLINE(1050)				::cpp::VirtualArray eventsGroup;
HXLINE(1051)				--_gthis->curEventSelected;
HXLINE(1052)				if ((_gthis->curEventSelected < 0)) {
HXLINE(1052)					_gthis->curEventSelected = 0;
            				}
            				else {
HXLINE(1053)					bool removeButton1;
HXDLIN(1053)					if (::hx::IsNotNull( _gthis->curSelectedNote )) {
HXLINE(1053)						eventsGroup = ( (::cpp::VirtualArray)(_gthis->curSelectedNote->__get(1)) );
HXDLIN(1053)						removeButton1 = (_gthis->curEventSelected >= eventsGroup->get_length());
            					}
            					else {
HXLINE(1053)						removeButton1 = false;
            					}
HXDLIN(1053)					if (removeButton1) {
HXLINE(1053)						_gthis->curEventSelected = (eventsGroup->get_length() - 1);
            					}
            				}
HXLINE(1055)				_gthis->changeEventSelected(null());
HXLINE(1056)				_gthis->updateGrid();
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1069_addEventsUI)
HXLINE(1069)			bool addButton;
HXDLIN(1069)			if (::hx::IsNotNull( _gthis->curSelectedNote )) {
HXLINE(1069)				addButton = ::hx::IsNull( _gthis->curSelectedNote->__get(2) );
            			}
            			else {
HXLINE(1069)				addButton = false;
            			}
HXDLIN(1069)			if (addButton) {
HXLINE(1071)				::cpp::VirtualArray eventsGroup = ( (::cpp::VirtualArray)(_gthis->curSelectedNote->__get(1)) );
HXLINE(1072)				eventsGroup->push(::cpp::VirtualArray_obj::__new(3)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00))->init(2,HX_("",00,00,00,00)));
HXLINE(1074)				_gthis->changeEventSelected(1);
HXLINE(1075)				_gthis->updateGrid();
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1088_addEventsUI)
HXLINE(1088)			_gthis->changeEventSelected(-1);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1098_addEventsUI)
HXLINE(1098)			_gthis->changeEventSelected(1);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_969_addEventsUI)
HXDLIN( 969)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 970)		 ::flixel::addons::ui::FlxUI tab_group_event =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 971)		tab_group_event->name = HX_("Events",39,c3,fe,ca);
HXLINE( 974)		 ::haxe::ds::StringMap eventPushedMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 975)		::Array< ::String > directories = ::Array_obj< ::String >::__new(0);
HXLINE( 978)		::String key = HX_("custom_events/",28,61,2e,89);
HXDLIN( 978)		if (::hx::IsNull( key )) {
HXLINE( 978)			key = HX_("",00,00,00,00);
            		}
HXDLIN( 978)		directories->push((HX_("mods/",9e,2f,58,0c) + key));
HXLINE( 979)		::String key1 = (::backend::Mods_obj::currentModDirectory + HX_("/custom_events/",97,b5,60,e3));
HXDLIN( 979)		if (::hx::IsNull( key1 )) {
HXLINE( 979)			key1 = HX_("",00,00,00,00);
            		}
HXDLIN( 979)		directories->push((HX_("mods/",9e,2f,58,0c) + key1));
HXLINE( 980)		{
HXLINE( 980)			int _g = 0;
HXDLIN( 980)			::Array< ::String > _g1 = ::backend::Mods_obj::globalMods;
HXDLIN( 980)			while((_g < _g1->length)){
HXLINE( 980)				::String mod = _g1->__get(_g);
HXDLIN( 980)				_g = (_g + 1);
HXLINE( 981)				::String key2 = (mod + HX_("/custom_events/",97,b5,60,e3));
HXDLIN( 981)				if (::hx::IsNull( key2 )) {
HXLINE( 981)					key2 = HX_("",00,00,00,00);
            				}
HXDLIN( 981)				directories->push((HX_("mods/",9e,2f,58,0c) + key2));
            			}
            		}
HXLINE( 984)		{
HXLINE( 984)			int _g2 = 0;
HXDLIN( 984)			int _g3 = directories->length;
HXDLIN( 984)			while((_g2 < _g3)){
HXLINE( 984)				_g2 = (_g2 + 1);
HXDLIN( 984)				int i = (_g2 - 1);
HXLINE( 985)				::String directory = directories->__get(i);
HXLINE( 986)				if (::sys::FileSystem_obj::exists(directory)) {
HXLINE( 987)					int _g4 = 0;
HXDLIN( 987)					::Array< ::String > _g5 = ::sys::FileSystem_obj::readDirectory(directory);
HXDLIN( 987)					while((_g4 < _g5->length)){
HXLINE( 987)						::String file = _g5->__get(_g4);
HXDLIN( 987)						_g4 = (_g4 + 1);
HXLINE( 988)						::String path = ::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,directory)->init(1,file));
HXLINE( 989)						bool _hx_tmp;
HXDLIN( 989)						bool _hx_tmp1;
HXDLIN( 989)						if (!(::sys::FileSystem_obj::isDirectory(path))) {
HXLINE( 989)							_hx_tmp1 = (file != HX_("readme.txt",30,9a,06,a0));
            						}
            						else {
HXLINE( 989)							_hx_tmp1 = false;
            						}
HXDLIN( 989)						if (_hx_tmp1) {
HXLINE( 989)							_hx_tmp = ::StringTools_obj::endsWith(file,HX_(".txt",02,3f,c0,1e));
            						}
            						else {
HXLINE( 989)							_hx_tmp = false;
            						}
HXDLIN( 989)						if (_hx_tmp) {
HXLINE( 990)							::String fileToCheck = file.substr(0,(file.length - 4));
HXLINE( 991)							if (!(eventPushedMap->exists(fileToCheck))) {
HXLINE( 992)								eventPushedMap->set(fileToCheck,true);
HXLINE( 993)								::cpp::VirtualArray _hx_tmp2 = this->eventStuff;
HXDLIN( 993)								_hx_tmp2->push(::cpp::VirtualArray_obj::__new(2)->init(0,fileToCheck)->init(1,::sys::io::File_obj::getContent(path)));
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 999)		eventPushedMap->clear();
HXLINE(1000)		eventPushedMap = null();
HXLINE(1003)		this->descText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,200,0,( (::String)(this->eventStuff->__get(0)->__GetItem(0)) ),null(),null());
HXLINE(1005)		::Array< ::String > leEvents = ::Array_obj< ::String >::__new(0);
HXLINE(1006)		{
HXLINE(1006)			int _g6 = 0;
HXDLIN(1006)			int _g7 = this->eventStuff->get_length();
HXDLIN(1006)			while((_g6 < _g7)){
HXLINE(1006)				_g6 = (_g6 + 1);
HXDLIN(1006)				int i1 = (_g6 - 1);
HXLINE(1007)				leEvents->push(this->eventStuff->__get(i1)->__GetItem(0));
            			}
            		}
HXLINE(1010)		 ::flixel::text::FlxText text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,30,0,HX_("Event:",00,c3,fe,ca),null(),null());
HXLINE(1011)		tab_group_event->add(text).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1012)		this->eventDropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,20,50,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(leEvents,true), ::Dynamic(new _hx_Closure_0(_gthis)),null(),null(),null(),null());
HXLINE(1023)		this->blockPressWhileScrolling->push(this->eventDropDown);
HXLINE(1025)		 ::flixel::text::FlxText text1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,90,0,HX_("Value 1:",58,2c,dc,c7),null(),null());
HXLINE(1026)		tab_group_event->add(text1).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1027)		this->value1InputText =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,20,110,100,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE(1028)		this->blockPressWhileTypingOn->push(this->value1InputText);
HXLINE(1030)		 ::flixel::text::FlxText text2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,130,0,HX_("Value 2:",37,2d,dc,c7),null(),null());
HXLINE(1031)		tab_group_event->add(text2).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1032)		this->value2InputText =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,20,150,100,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE(1033)		this->blockPressWhileTypingOn->push(this->value2InputText);
HXLINE(1036)		Float removeButton = this->eventDropDown->x;
HXDLIN(1036)		Float removeButton1 = ((removeButton + this->eventDropDown->get_width()) + 10);
HXDLIN(1036)		 ::flixel::ui::FlxButton removeButton2 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,removeButton1,this->eventDropDown->y,HX_("-",2d,00,00,00), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE(1059)		int _hx_tmp3 = ::Std_obj::_hx_int(removeButton2->get_height());
HXDLIN(1059)		removeButton2->setGraphicSize(_hx_tmp3,::Std_obj::_hx_int(removeButton2->get_height()));
HXLINE(1060)		removeButton2->updateHitbox();
HXLINE(1061)		removeButton2->set_color(-65536);
HXLINE(1062)		removeButton2->label->set_color(-1);
HXLINE(1063)		removeButton2->label->set_size(12);
HXLINE(1064)		this->setAllLabelsOffset(removeButton2,( (Float)(-30) ),( (Float)(0) ));
HXLINE(1065)		tab_group_event->add(removeButton2).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1067)		Float removeButton3 = removeButton2->x;
HXDLIN(1067)		Float addButton = ((removeButton3 + removeButton2->get_width()) + 10);
HXDLIN(1067)		 ::flixel::ui::FlxButton addButton1 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,addButton,removeButton2->y,HX_("+",2b,00,00,00), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE(1078)		int _hx_tmp4 = ::Std_obj::_hx_int(removeButton2->get_width());
HXDLIN(1078)		addButton1->setGraphicSize(_hx_tmp4,::Std_obj::_hx_int(removeButton2->get_height()));
HXLINE(1079)		addButton1->updateHitbox();
HXLINE(1080)		addButton1->set_color(-16744448);
HXLINE(1081)		addButton1->label->set_color(-1);
HXLINE(1082)		addButton1->label->set_size(12);
HXLINE(1083)		this->setAllLabelsOffset(addButton1,( (Float)(-30) ),( (Float)(0) ));
HXLINE(1084)		tab_group_event->add(addButton1).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1086)		Float addButton2 = addButton1->x;
HXDLIN(1086)		Float moveLeftButton = ((addButton2 + addButton1->get_width()) + 20);
HXDLIN(1086)		 ::flixel::ui::FlxButton moveLeftButton1 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,moveLeftButton,addButton1->y,HX_("<",3c,00,00,00), ::Dynamic(new _hx_Closure_3(_gthis)));
HXLINE(1090)		int _hx_tmp5 = ::Std_obj::_hx_int(addButton1->get_width());
HXDLIN(1090)		moveLeftButton1->setGraphicSize(_hx_tmp5,::Std_obj::_hx_int(addButton1->get_height()));
HXLINE(1091)		moveLeftButton1->updateHitbox();
HXLINE(1092)		moveLeftButton1->label->set_size(12);
HXLINE(1093)		this->setAllLabelsOffset(moveLeftButton1,( (Float)(-30) ),( (Float)(0) ));
HXLINE(1094)		tab_group_event->add(moveLeftButton1).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1096)		Float moveLeftButton2 = moveLeftButton1->x;
HXDLIN(1096)		Float moveRightButton = ((moveLeftButton2 + moveLeftButton1->get_width()) + 10);
HXDLIN(1096)		 ::flixel::ui::FlxButton moveRightButton1 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,moveRightButton,moveLeftButton1->y,HX_(">",3e,00,00,00), ::Dynamic(new _hx_Closure_4(_gthis)));
HXLINE(1100)		int _hx_tmp6 = ::Std_obj::_hx_int(moveLeftButton1->get_width());
HXDLIN(1100)		moveRightButton1->setGraphicSize(_hx_tmp6,::Std_obj::_hx_int(moveLeftButton1->get_height()));
HXLINE(1101)		moveRightButton1->updateHitbox();
HXLINE(1102)		moveRightButton1->label->set_size(12);
HXLINE(1103)		this->setAllLabelsOffset(moveRightButton1,( (Float)(-30) ),( (Float)(0) ));
HXLINE(1104)		tab_group_event->add(moveRightButton1).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1106)		Float _hx_tmp7 = (addButton1->x - ( (Float)(100) ));
HXDLIN(1106)		Float addButton3 = addButton1->y;
HXDLIN(1106)		Float _hx_tmp8 = ((addButton3 + addButton1->get_height()) + 6);
HXDLIN(1106)		this->selectedEventText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp7,_hx_tmp8,((moveRightButton1->x - addButton1->x) + 186),HX_("Selected Event: None",d3,12,9e,40),null(),null());
HXLINE(1107)		this->selectedEventText->set_alignment(HX_("center",d5,25,db,05));
HXLINE(1108)		tab_group_event->add(this->selectedEventText).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1110)		tab_group_event->add(this->descText).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1111)		tab_group_event->add(this->value1InputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1112)		tab_group_event->add(this->value2InputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1113)		tab_group_event->add(this->eventDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1115)		this->UI_box->addGroup(tab_group_event);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addEventsUI,(void))

void ChartingState_obj::changeEventSelected(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1119_changeEventSelected)
HXLINE(1120)		bool _hx_tmp;
HXDLIN(1120)		if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(1120)			_hx_tmp = ::hx::IsNull( this->curSelectedNote->__get(2) );
            		}
            		else {
HXLINE(1120)			_hx_tmp = false;
            		}
HXDLIN(1120)		if (_hx_tmp) {
HXLINE(1122)			 ::states::editors::ChartingState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1122)			_hx_tmp1->curEventSelected = (_hx_tmp1->curEventSelected + change);
HXLINE(1123)			if ((this->curEventSelected < 0)) {
HXLINE(1123)				this->curEventSelected = (::Std_obj::_hx_int(( (Float)(this->curSelectedNote->__get(1)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) )) - 1);
            			}
            			else {
HXLINE(1124)				if (::hx::IsGreaterEq( this->curEventSelected,this->curSelectedNote->__get(1)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic) )) {
HXLINE(1124)					this->curEventSelected = 0;
            				}
            			}
HXLINE(1125)			 ::flixel::text::FlxText _hx_tmp2 = this->selectedEventText;
HXDLIN(1125)			::String _hx_tmp3 = ((HX_("Selected Event: ",7b,7a,ac,11) + (this->curEventSelected + 1)) + HX_(" / ",31,71,18,00));
HXDLIN(1125)			_hx_tmp2->set_text((_hx_tmp3 + ::Std_obj::string( ::Dynamic(this->curSelectedNote->__get(1)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)))));
            		}
            		else {
HXLINE(1129)			this->curEventSelected = 0;
HXLINE(1130)			this->selectedEventText->set_text(HX_("Selected Event: None",d3,12,9e,40));
            		}
HXLINE(1132)		this->updateNoteUI();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,changeEventSelected,(void))

void ChartingState_obj::setAllLabelsOffset( ::flixel::ui::FlxButton button,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1137_setAllLabelsOffset)
HXDLIN(1137)		int _g = 0;
HXDLIN(1137)		::Array< ::Dynamic> _g1 = button->labelOffsets;
HXDLIN(1137)		while((_g < _g1->length)){
HXDLIN(1137)			 ::flixel::math::FlxBasePoint point = _g1->__get(_g).StaticCast<  ::flixel::math::FlxBasePoint >();
HXDLIN(1137)			_g = (_g + 1);
HXLINE(1139)			{
HXLINE(1139)				point->set_x(x);
HXDLIN(1139)				point->set_y(y);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(ChartingState_obj,setAllLabelsOffset,(void))

void ChartingState_obj::addChartingUI(){
            		HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_0, ::states::editors::ChartingState,_gthis,::Array< ::Dynamic>,waveformUseOppVoices,::Array< ::Dynamic>,waveformUseVoices,::Array< ::Dynamic>,waveformUseInstrumental) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1167_addChartingUI)
HXLINE(1168)			waveformUseVoices->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->set_checked(false);
HXLINE(1169)			waveformUseOppVoices->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->set_checked(false);
HXLINE(1170)			::flixel::FlxG_obj::save->data->__SetField(HX_("chart_waveformVoices",5f,f3,ae,5f),false,::hx::paccDynamic);
HXLINE(1171)			::flixel::FlxG_obj::save->data->__SetField(HX_("chart_waveformOppVoices",f2,75,72,1f),false,::hx::paccDynamic);
HXLINE(1172)			::flixel::FlxG_obj::save->data->__SetField(HX_("chart_waveformInst",24,cd,a4,d3),waveformUseInstrumental->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->checked,::hx::paccDynamic);
HXLINE(1173)			_gthis->updateWaveform();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_1, ::states::editors::ChartingState,_gthis,::Array< ::Dynamic>,waveformUseOppVoices,::Array< ::Dynamic>,waveformUseVoices,::Array< ::Dynamic>,waveformUseInstrumental) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1179_addChartingUI)
HXLINE(1180)			waveformUseInstrumental->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->set_checked(false);
HXLINE(1181)			waveformUseOppVoices->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->set_checked(false);
HXLINE(1182)			::flixel::FlxG_obj::save->data->__SetField(HX_("chart_waveformInst",24,cd,a4,d3),false,::hx::paccDynamic);
HXLINE(1183)			::flixel::FlxG_obj::save->data->__SetField(HX_("chart_waveformOppVoices",f2,75,72,1f),false,::hx::paccDynamic);
HXLINE(1184)			::flixel::FlxG_obj::save->data->__SetField(HX_("chart_waveformVoices",5f,f3,ae,5f),waveformUseVoices->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->checked,::hx::paccDynamic);
HXLINE(1185)			_gthis->updateWaveform();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_2, ::states::editors::ChartingState,_gthis,::Array< ::Dynamic>,waveformUseOppVoices,::Array< ::Dynamic>,waveformUseVoices,::Array< ::Dynamic>,waveformUseInstrumental) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1191_addChartingUI)
HXLINE(1192)			waveformUseInstrumental->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->set_checked(false);
HXLINE(1193)			waveformUseVoices->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->set_checked(false);
HXLINE(1194)			::flixel::FlxG_obj::save->data->__SetField(HX_("chart_waveformInst",24,cd,a4,d3),false,::hx::paccDynamic);
HXLINE(1195)			::flixel::FlxG_obj::save->data->__SetField(HX_("chart_waveformVoices",5f,f3,ae,5f),false,::hx::paccDynamic);
HXLINE(1196)			::flixel::FlxG_obj::save->data->__SetField(HX_("chart_waveformOppVoices",f2,75,72,1f),waveformUseOppVoices->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->checked,::hx::paccDynamic);
HXLINE(1197)			_gthis->updateWaveform();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1204_addChartingUI)
HXLINE(1205)			Float vol = _gthis->instVolume->value;
HXLINE(1206)			if (_gthis->check_mute_inst->checked) {
HXLINE(1207)				vol = ( (Float)(0) );
            			}
HXLINE(1209)			::flixel::FlxG_obj::sound->music->set_volume(vol);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1216_addChartingUI)
HXLINE(1217)			::flixel::FlxG_obj::save->data->__SetField(HX_("mouseScrollingQuant",53,5c,93,0b),_gthis->mouseScrollingQuant->checked,::hx::paccDynamic);
HXLINE(1218)			_gthis->mouseQuant = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("mouseScrollingQuant",53,5c,93,0b),::hx::paccDynamic)) );
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1226_addChartingUI)
HXLINE(1227)			::flixel::FlxG_obj::save->data->__SetField(HX_("chart_vortex",ef,94,b7,4f),_gthis->check_vortex->checked,::hx::paccDynamic);
HXLINE(1228)			::states::editors::ChartingState_obj::vortex = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("chart_vortex",ef,94,b7,4f),::hx::paccDynamic)) );
HXLINE(1229)			_gthis->reloadGridLayer();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1237_addChartingUI)
HXLINE(1238)			::flixel::FlxG_obj::save->data->__SetField(HX_("ignoreWarnings",c9,0d,e8,46),_gthis->check_warnings->checked,::hx::paccDynamic);
HXLINE(1239)			_gthis->ignoreWarnings = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ignoreWarnings",c9,0d,e8,46),::hx::paccDynamic)) );
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1245_addChartingUI)
HXLINE(1246)			Float vol = _gthis->voicesVolume->value;
HXLINE(1247)			if (_gthis->check_mute_vocals->checked) {
HXLINE(1248)				vol = ( (Float)(0) );
            			}
HXLINE(1250)			if (::hx::IsNotNull( _gthis->vocals )) {
HXLINE(1250)				_gthis->vocals->set_volume(vol);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1255_addChartingUI)
HXLINE(1256)			Float vol = _gthis->voicesOppVolume->value;
HXLINE(1257)			if (_gthis->check_mute_vocals_opponent->checked) {
HXLINE(1258)				vol = ( (Float)(0) );
            			}
HXLINE(1260)			if (::hx::IsNotNull( _gthis->opponentVocals )) {
HXLINE(1260)				_gthis->opponentVocals->set_volume(vol);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_9, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1265_addChartingUI)
HXLINE(1265)			::flixel::FlxG_obj::save->data->__SetField(HX_("chart_playSoundBf",be,58,a4,b0),_gthis->playSoundBf->checked,::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_10, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1273_addChartingUI)
HXLINE(1273)			::flixel::FlxG_obj::save->data->__SetField(HX_("chart_playSoundDad",0d,ce,2a,df),_gthis->playSoundDad->checked,::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_11, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1281_addChartingUI)
HXLINE(1281)			::flixel::FlxG_obj::save->data->__SetField(HX_("chart_metronome",51,3d,f0,29),_gthis->metronome->checked,::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_12, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1294_addChartingUI)
HXLINE(1294)			::flixel::FlxG_obj::save->data->__SetField(HX_("chart_noAutoScroll",be,4b,8a,04),_gthis->disableAutoScrolling->checked,::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1151_addChartingUI)
HXDLIN(1151)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1152)		 ::flixel::addons::ui::FlxUI tab_group_chart =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE(1153)		tab_group_chart->name = HX_("Charting",e4,0a,35,96);
HXLINE(1156)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("chart_waveformInst",24,cd,a4,d3),::hx::paccDynamic) )) {
HXLINE(1156)			::flixel::FlxG_obj::save->data->__SetField(HX_("chart_waveformInst",24,cd,a4,d3),false,::hx::paccDynamic);
            		}
HXLINE(1157)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("chart_waveformVoices",5f,f3,ae,5f),::hx::paccDynamic) )) {
HXLINE(1157)			::flixel::FlxG_obj::save->data->__SetField(HX_("chart_waveformVoices",5f,f3,ae,5f),false,::hx::paccDynamic);
            		}
HXLINE(1158)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("chart_waveformOppVoices",f2,75,72,1f),::hx::paccDynamic) )) {
HXLINE(1158)			::flixel::FlxG_obj::save->data->__SetField(HX_("chart_waveformOppVoices",f2,75,72,1f),false,::hx::paccDynamic);
            		}
HXLINE(1160)		::Array< ::Dynamic> waveformUseInstrumental = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE(1161)		::Array< ::Dynamic> waveformUseVoices = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE(1162)		::Array< ::Dynamic> waveformUseOppVoices = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE(1164)		waveformUseInstrumental[0] =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,90,null(),null(),HX_("Waveform\n(Instrumental)",5c,61,41,0e),85,null(),null());
HXLINE(1165)		waveformUseInstrumental->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->set_checked(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("chart_waveformInst",24,cd,a4,d3),::hx::paccDynamic)) ));
HXLINE(1166)		waveformUseInstrumental->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->callback =  ::Dynamic(new _hx_Closure_0(_gthis,waveformUseOppVoices,waveformUseVoices,waveformUseInstrumental));
HXLINE(1176)		waveformUseVoices[0] =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,(waveformUseInstrumental->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->x + 100),waveformUseInstrumental->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->y,null(),null(),HX_("Waveform\n(Main Vocals)",5f,fd,6e,d6),85,null(),null());
HXLINE(1177)		bool _hx_tmp;
HXDLIN(1177)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("chart_waveformVoices",5f,f3,ae,5f),::hx::paccDynamic)) )) {
HXLINE(1177)			_hx_tmp = !(waveformUseInstrumental->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->checked);
            		}
            		else {
HXLINE(1177)			_hx_tmp = false;
            		}
HXDLIN(1177)		waveformUseVoices->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->set_checked(_hx_tmp);
HXLINE(1178)		waveformUseVoices->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->callback =  ::Dynamic(new _hx_Closure_1(_gthis,waveformUseOppVoices,waveformUseVoices,waveformUseInstrumental));
HXLINE(1188)		waveformUseOppVoices[0] =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,(waveformUseInstrumental->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->x + 200),waveformUseInstrumental->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->y,null(),null(),HX_("Waveform\n(Opp. Vocals)",45,28,a5,6c),85,null(),null());
HXLINE(1189)		bool _hx_tmp1;
HXDLIN(1189)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("chart_waveformOppVoices",f2,75,72,1f),::hx::paccDynamic)) )) {
HXLINE(1189)			_hx_tmp1 = !(waveformUseVoices->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->checked);
            		}
            		else {
HXLINE(1189)			_hx_tmp1 = false;
            		}
HXDLIN(1189)		waveformUseOppVoices->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->set_checked(_hx_tmp1);
HXLINE(1190)		waveformUseOppVoices->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->callback =  ::Dynamic(new _hx_Closure_2(_gthis,waveformUseOppVoices,waveformUseVoices,waveformUseInstrumental));
HXLINE(1201)		this->check_mute_inst =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,280,null(),null(),HX_("Mute Instrumental (in editor)",a2,93,a5,ab),100,null(),null());
HXLINE(1202)		this->check_mute_inst->set_checked(false);
HXLINE(1203)		this->check_mute_inst->callback =  ::Dynamic(new _hx_Closure_3(_gthis));
HXLINE(1211)		this->mouseScrollingQuant =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,190,null(),null(),HX_("Mouse Scrolling Quantization",07,68,1a,56),100,null(),null());
HXLINE(1212)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("mouseScrollingQuant",53,5c,93,0b),::hx::paccDynamic) )) {
HXLINE(1212)			::flixel::FlxG_obj::save->data->__SetField(HX_("mouseScrollingQuant",53,5c,93,0b),false,::hx::paccDynamic);
            		}
HXLINE(1213)		this->mouseScrollingQuant->set_checked(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("mouseScrollingQuant",53,5c,93,0b),::hx::paccDynamic)) ));
HXLINE(1215)		this->mouseScrollingQuant->callback =  ::Dynamic(new _hx_Closure_4(_gthis));
HXLINE(1221)		this->check_vortex =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,160,null(),null(),HX_("Vortex Editor (BETA)",f2,b1,1b,a6),100,null(),null());
HXLINE(1222)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("chart_vortex",ef,94,b7,4f),::hx::paccDynamic) )) {
HXLINE(1222)			::flixel::FlxG_obj::save->data->__SetField(HX_("chart_vortex",ef,94,b7,4f),false,::hx::paccDynamic);
            		}
HXLINE(1223)		this->check_vortex->set_checked(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("chart_vortex",ef,94,b7,4f),::hx::paccDynamic)) ));
HXLINE(1225)		this->check_vortex->callback =  ::Dynamic(new _hx_Closure_5(_gthis));
HXLINE(1232)		this->check_warnings =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,120,null(),null(),HX_("Ignore Progress Warnings",fc,3a,c1,0a),100,null(),null());
HXLINE(1233)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("ignoreWarnings",c9,0d,e8,46),::hx::paccDynamic) )) {
HXLINE(1233)			::flixel::FlxG_obj::save->data->__SetField(HX_("ignoreWarnings",c9,0d,e8,46),false,::hx::paccDynamic);
            		}
HXLINE(1234)		this->check_warnings->set_checked(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ignoreWarnings",c9,0d,e8,46),::hx::paccDynamic)) ));
HXLINE(1236)		this->check_warnings->callback =  ::Dynamic(new _hx_Closure_6(_gthis));
HXLINE(1242)		this->check_mute_vocals =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,this->check_mute_inst->x,(this->check_mute_inst->y + 30),null(),null(),HX_("Mute Main Vocals (in editor)",67,63,58,a7),100,null(),null());
HXLINE(1243)		this->check_mute_vocals->set_checked(false);
HXLINE(1244)		this->check_mute_vocals->callback =  ::Dynamic(new _hx_Closure_7(_gthis));
HXLINE(1252)		this->check_mute_vocals_opponent =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,(this->check_mute_vocals->x + 120),this->check_mute_vocals->y,null(),null(),HX_("Mute Opp. Vocals (in editor)",41,f6,da,6a),100,null(),null());
HXLINE(1253)		this->check_mute_vocals_opponent->set_checked(false);
HXLINE(1254)		this->check_mute_vocals_opponent->callback =  ::Dynamic(new _hx_Closure_8(_gthis));
HXLINE(1263)		this->playSoundBf =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,this->check_mute_inst->x,(this->check_mute_vocals->y + 30),null(),null(),HX_("Play Sound (Boyfriend notes)",49,43,a0,7b),100,null(), ::Dynamic(new _hx_Closure_9(_gthis)));
HXLINE(1268)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("chart_playSoundBf",be,58,a4,b0),::hx::paccDynamic) )) {
HXLINE(1268)			::flixel::FlxG_obj::save->data->__SetField(HX_("chart_playSoundBf",be,58,a4,b0),false,::hx::paccDynamic);
            		}
HXLINE(1269)		this->playSoundBf->set_checked(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("chart_playSoundBf",be,58,a4,b0),::hx::paccDynamic)) ));
HXLINE(1271)		this->playSoundDad =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,(this->check_mute_inst->x + 120),this->playSoundBf->y,null(),null(),HX_("Play Sound (Opponent notes)",c0,1c,0f,a2),100,null(), ::Dynamic(new _hx_Closure_10(_gthis)));
HXLINE(1276)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("chart_playSoundDad",0d,ce,2a,df),::hx::paccDynamic) )) {
HXLINE(1276)			::flixel::FlxG_obj::save->data->__SetField(HX_("chart_playSoundDad",0d,ce,2a,df),false,::hx::paccDynamic);
            		}
HXLINE(1277)		this->playSoundDad->set_checked(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("chart_playSoundDad",0d,ce,2a,df),::hx::paccDynamic)) ));
HXLINE(1279)		this->metronome =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,15,null(),null(),HX_("Metronome Enabled",53,d5,75,16),100,null(), ::Dynamic(new _hx_Closure_11(_gthis)));
HXLINE(1284)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("chart_metronome",51,3d,f0,29),::hx::paccDynamic) )) {
HXLINE(1284)			::flixel::FlxG_obj::save->data->__SetField(HX_("chart_metronome",51,3d,f0,29),false,::hx::paccDynamic);
            		}
HXLINE(1285)		this->metronome->set_checked(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("chart_metronome",51,3d,f0,29),::hx::paccDynamic)) ));
HXLINE(1287)		this->metronomeStepper =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,15,55,5,this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic),1,1500,1,null(),null(),null(),null(),null());
HXLINE(1288)		this->metronomeOffsetStepper =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,(this->metronomeStepper->x + 100),this->metronomeStepper->y,25,0,0,1000,1,null(),null(),null(),null(),null());
HXLINE(1289)		this->blockPressWhileTypingOnStepper->push(this->metronomeStepper);
HXLINE(1290)		this->blockPressWhileTypingOnStepper->push(this->metronomeOffsetStepper);
HXLINE(1292)		this->disableAutoScrolling =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,(this->metronome->x + 120),this->metronome->y,null(),null(),HX_("Disable Autoscroll (Not Recommended)",17,aa,77,62),120,null(), ::Dynamic(new _hx_Closure_12(_gthis)));
HXLINE(1297)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("chart_noAutoScroll",be,4b,8a,04),::hx::paccDynamic) )) {
HXLINE(1297)			::flixel::FlxG_obj::save->data->__SetField(HX_("chart_noAutoScroll",be,4b,8a,04),false,::hx::paccDynamic);
            		}
HXLINE(1298)		this->disableAutoScrolling->set_checked(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("chart_noAutoScroll",be,4b,8a,04),::hx::paccDynamic)) ));
HXLINE(1300)		this->instVolume =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,this->metronomeStepper->x,250,((Float)0.1),1,0,1,1,null(),null(),null(),null(),null());
HXLINE(1301)		this->instVolume->set_value(::flixel::FlxG_obj::sound->music->_volume);
HXLINE(1302)		this->instVolume->name = HX_("inst_volume",73,9c,51,f6);
HXLINE(1303)		this->blockPressWhileTypingOnStepper->push(this->instVolume);
HXLINE(1305)		this->voicesVolume =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,(this->instVolume->x + 100),this->instVolume->y,((Float)0.1),1,0,1,1,null(),null(),null(),null(),null());
HXLINE(1306)		this->voicesVolume->set_value(this->vocals->_volume);
HXLINE(1307)		this->voicesVolume->name = HX_("voices_volume",18,a7,72,99);
HXLINE(1308)		this->blockPressWhileTypingOnStepper->push(this->voicesVolume);
HXLINE(1310)		this->voicesOppVolume =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,(this->instVolume->x + 200),this->instVolume->y,((Float)0.1),1,0,1,1,null(),null(),null(),null(),null());
HXLINE(1311)		this->voicesOppVolume->set_value(this->vocals->_volume);
HXLINE(1312)		this->voicesOppVolume->name = HX_("voices_opp_volume",68,07,be,7c);
HXLINE(1313)		this->blockPressWhileTypingOnStepper->push(this->voicesOppVolume);
HXLINE(1316)		this->sliderRate =  ::flixel::addons::ui::FlxUISlider_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),HX_("playbackSpeed",6c,73,8d,56),120,120,((Float)0.5),3,150,null(),5,-1,-16777216);
HXLINE(1317)		this->sliderRate->nameLabel->set_text(HX_("Playback Rate",05,cb,36,2d));
HXLINE(1318)		tab_group_chart->add(this->sliderRate).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1321)		tab_group_chart->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->metronomeStepper->x,(this->metronomeStepper->y - ( (Float)(15) )),0,HX_("BPM:",9b,0c,dd,2b),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1322)		tab_group_chart->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->metronomeOffsetStepper->x,(this->metronomeOffsetStepper->y - ( (Float)(15) )),0,HX_("Offset (ms):",d2,bc,46,87),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1323)		tab_group_chart->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->instVolume->x,(this->instVolume->y - ( (Float)(15) )),0,HX_("Inst Volume",f4,6e,50,d3),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1324)		tab_group_chart->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->voicesVolume->x,(this->voicesVolume->y - ( (Float)(15) )),0,HX_("Main Vocals",65,25,63,78),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1325)		tab_group_chart->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->voicesOppVolume->x,(this->voicesOppVolume->y - ( (Float)(15) )),0,HX_("Opp. Vocals",3f,59,7a,36),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1326)		tab_group_chart->add(this->metronome).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1327)		tab_group_chart->add(this->disableAutoScrolling).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1328)		tab_group_chart->add(this->metronomeStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1329)		tab_group_chart->add(this->metronomeOffsetStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1331)		tab_group_chart->add(waveformUseInstrumental->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1332)		tab_group_chart->add(waveformUseVoices->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1333)		tab_group_chart->add(waveformUseOppVoices->__get(0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1335)		tab_group_chart->add(this->instVolume).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1336)		tab_group_chart->add(this->voicesVolume).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1337)		tab_group_chart->add(this->voicesOppVolume).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1338)		tab_group_chart->add(this->check_mute_inst).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1339)		tab_group_chart->add(this->check_mute_vocals).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1340)		tab_group_chart->add(this->check_mute_vocals_opponent).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1341)		tab_group_chart->add(this->check_vortex).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1342)		tab_group_chart->add(this->mouseScrollingQuant).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1343)		tab_group_chart->add(this->check_warnings).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1344)		tab_group_chart->add(this->playSoundBf).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1345)		tab_group_chart->add(this->playSoundDad).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1346)		this->UI_box->addGroup(tab_group_chart);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addChartingUI,(void))

void ChartingState_obj::addDataUI(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::states::editors::ChartingState,_gthis, ::flixel::addons::ui::FlxUICheckBox,check_disableNoteRGB) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1377_addDataUI)
HXLINE(1378)			_gthis->_song->__SetField(HX_("disableNoteRGB",33,ad,d1,4a),check_disableNoteRGB->checked,::hx::paccDynamic);
HXLINE(1379)			_gthis->updateGrid();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1390_addDataUI)
HXLINE(1391)			_gthis->_song->__SetField(HX_("arrowSkin",e6,d4,f8,07),_gthis->noteSkinInputText->text,::hx::paccDynamic);
HXLINE(1392)			_gthis->updateGrid();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1356_addDataUI)
HXDLIN(1356)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1357)		 ::flixel::addons::ui::FlxUI tab_group_data =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE(1358)		tab_group_data->name = HX_("Data",4a,82,3c,2d);
HXLINE(1361)		::String _hx_tmp;
HXDLIN(1361)		if (::hx::IsNotNull( this->_song->__Field(HX_("gameOverChar",5c,48,07,65),::hx::paccDynamic) )) {
HXLINE(1361)			_hx_tmp = ( (::String)(this->_song->__Field(HX_("gameOverChar",5c,48,07,65),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(1361)			_hx_tmp = HX_("",00,00,00,00);
            		}
HXDLIN(1361)		this->gameOverCharacterInputText =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,10,25,150,_hx_tmp,8,null(),null(),null());
HXLINE(1362)		this->blockPressWhileTypingOn->push(this->gameOverCharacterInputText);
HXLINE(1364)		::String _hx_tmp1;
HXDLIN(1364)		if (::hx::IsNotNull( this->_song->__Field(HX_("gameOverSound",89,f8,70,3c),::hx::paccDynamic) )) {
HXLINE(1364)			_hx_tmp1 = ( (::String)(this->_song->__Field(HX_("gameOverSound",89,f8,70,3c),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(1364)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXDLIN(1364)		this->gameOverSoundInputText =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,10,(this->gameOverCharacterInputText->y + 35),150,_hx_tmp1,8,null(),null(),null());
HXLINE(1365)		this->blockPressWhileTypingOn->push(this->gameOverSoundInputText);
HXLINE(1367)		::String _hx_tmp2;
HXDLIN(1367)		if (::hx::IsNotNull( this->_song->__Field(HX_("gameOverLoop",ea,8f,ff,6a),::hx::paccDynamic) )) {
HXLINE(1367)			_hx_tmp2 = ( (::String)(this->_song->__Field(HX_("gameOverLoop",ea,8f,ff,6a),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(1367)			_hx_tmp2 = HX_("",00,00,00,00);
            		}
HXDLIN(1367)		this->gameOverLoopInputText =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,10,(this->gameOverSoundInputText->y + 35),150,_hx_tmp2,8,null(),null(),null());
HXLINE(1368)		this->blockPressWhileTypingOn->push(this->gameOverLoopInputText);
HXLINE(1370)		::String _hx_tmp3;
HXDLIN(1370)		if (::hx::IsNotNull( this->_song->__Field(HX_("gameOverEnd",15,2d,a9,8d),::hx::paccDynamic) )) {
HXLINE(1370)			_hx_tmp3 = ( (::String)(this->_song->__Field(HX_("gameOverEnd",15,2d,a9,8d),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(1370)			_hx_tmp3 = HX_("",00,00,00,00);
            		}
HXDLIN(1370)		this->gameOverEndInputText =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,10,(this->gameOverLoopInputText->y + 35),150,_hx_tmp3,8,null(),null(),null());
HXLINE(1371)		this->blockPressWhileTypingOn->push(this->gameOverEndInputText);
HXLINE(1374)		 ::flixel::addons::ui::FlxUICheckBox check_disableNoteRGB =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,170,null(),null(),HX_("Disable Note RGB",37,15,e8,bd),100,null(),null());
HXLINE(1375)		check_disableNoteRGB->set_checked(::hx::IsEq( this->_song->__Field(HX_("disableNoteRGB",33,ad,d1,4a),::hx::paccDynamic),true ));
HXLINE(1376)		check_disableNoteRGB->callback =  ::Dynamic(new _hx_Closure_0(_gthis,check_disableNoteRGB));
HXLINE(1384)		::String _hx_tmp4;
HXDLIN(1384)		if (::hx::IsNotNull( this->_song->__Field(HX_("arrowSkin",e6,d4,f8,07),::hx::paccDynamic) )) {
HXLINE(1384)			_hx_tmp4 = ( (::String)(this->_song->__Field(HX_("arrowSkin",e6,d4,f8,07),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(1384)			_hx_tmp4 = HX_("",00,00,00,00);
            		}
HXDLIN(1384)		this->noteSkinInputText =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,10,280,150,_hx_tmp4,8,null(),null(),null());
HXLINE(1385)		this->blockPressWhileTypingOn->push(this->noteSkinInputText);
HXLINE(1387)		::String _hx_tmp5;
HXDLIN(1387)		if (::hx::IsNotNull( this->_song->__Field(HX_("splashSkin",84,03,e1,a1),::hx::paccDynamic) )) {
HXLINE(1387)			_hx_tmp5 = ( (::String)(this->_song->__Field(HX_("splashSkin",84,03,e1,a1),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(1387)			_hx_tmp5 = HX_("",00,00,00,00);
            		}
HXDLIN(1387)		this->noteSplashesInputText =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,this->noteSkinInputText->x,(this->noteSkinInputText->y + 35),150,_hx_tmp5,8,null(),null(),null());
HXLINE(1388)		this->blockPressWhileTypingOn->push(this->noteSplashesInputText);
HXLINE(1390)		 ::flixel::ui::FlxButton reloadNotesButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(this->noteSplashesInputText->x + 5),(this->noteSplashesInputText->y + 20),HX_("Change Notes",91,69,0f,79), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE(1396)		tab_group_data->add(this->gameOverCharacterInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1397)		tab_group_data->add(this->gameOverSoundInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1398)		tab_group_data->add(this->gameOverLoopInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1399)		tab_group_data->add(this->gameOverEndInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1401)		tab_group_data->add(check_disableNoteRGB).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1403)		tab_group_data->add(reloadNotesButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1404)		tab_group_data->add(this->noteSkinInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1405)		tab_group_data->add(this->noteSplashesInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1407)		tab_group_data->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->gameOverCharacterInputText->x,(this->gameOverCharacterInputText->y - ( (Float)(15) )),0,HX_("Game Over Character Name:",ba,07,9b,81),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1408)		tab_group_data->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->gameOverSoundInputText->x,(this->gameOverSoundInputText->y - ( (Float)(15) )),0,HX_("Game Over Death Sound (sounds/):",ef,4c,81,a0),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1409)		tab_group_data->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->gameOverLoopInputText->x,(this->gameOverLoopInputText->y - ( (Float)(15) )),0,HX_("Game Over Loop Music (music/):",2a,9e,ea,94),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1410)		tab_group_data->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->gameOverEndInputText->x,(this->gameOverEndInputText->y - ( (Float)(15) )),0,HX_("Game Over Retry Music (music/):",f2,03,9c,22),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1412)		tab_group_data->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->noteSkinInputText->x,(this->noteSkinInputText->y - ( (Float)(15) )),0,HX_("Note Texture:",ed,7c,7e,a2),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1413)		tab_group_data->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->noteSplashesInputText->x,(this->noteSplashesInputText->y - ( (Float)(15) )),0,HX_("Note Splashes Texture:",5c,83,7f,23),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1414)		this->UI_box->addGroup(tab_group_data);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addDataUI,(void))

void ChartingState_obj::loadSong(){
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1418_loadSong)
HXLINE(1419)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1420)			 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1420)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(1422)		if (::hx::IsNotNull( this->vocals )) {
HXLINE(1424)			{
HXLINE(1424)				 ::flixel::sound::FlxSound _this1 = this->vocals;
HXDLIN(1424)				_this1->cleanup(_this1->autoDestroy,true);
            			}
HXLINE(1425)			this->vocals->destroy();
            		}
HXLINE(1427)		if (::hx::IsNotNull( this->opponentVocals )) {
HXLINE(1429)			{
HXLINE(1429)				 ::flixel::sound::FlxSound _this2 = this->opponentVocals;
HXDLIN(1429)				_this2->cleanup(_this2->autoDestroy,true);
            			}
HXLINE(1430)			this->opponentVocals->destroy();
            		}
HXLINE(1433)		this->vocals =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXLINE(1434)		this->opponentVocals =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXLINE(1436)		{
HXLINE(1437)			::String song = this->currentSongName;
HXDLIN(1437)			::String postfix;
HXDLIN(1437)			bool postfix1;
HXDLIN(1437)			if (::hx::IsNotNull( this->characterData->__Field(HX_("vocalsP1",bf,a9,fc,1b),::hx::paccDynamic) )) {
HXLINE(1437)				postfix1 = ::hx::IsLess(  ::Dynamic(this->characterData->__Field(HX_("vocalsP1",bf,a9,fc,1b),::hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),1 );
            			}
            			else {
HXLINE(1437)				postfix1 = true;
            			}
HXDLIN(1437)			if (postfix1) {
HXLINE(1437)				postfix = HX_("Player",81,5f,4d,6c);
            			}
            			else {
HXLINE(1437)				postfix = ( (::String)(this->characterData->__Field(HX_("vocalsP1",bf,a9,fc,1b),::hx::paccDynamic)) );
            			}
HXDLIN(1437)			 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(1437)			 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(1437)			::String path = invalidChars->split(::StringTools_obj::replace(song,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(1437)			::String songKey = ((HX_("",00,00,00,00) + hideChars->split(path)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34));
HXDLIN(1437)			if (::hx::IsNotNull( postfix )) {
HXLINE(1437)				songKey = (songKey + (HX_("-",2d,00,00,00) + postfix));
            			}
HXDLIN(1437)			 ::openfl::media::Sound voices = ::backend::Paths_obj::returnSound(null(),songKey,HX_("songs",fe,36,c7,80));
HXDLIN(1437)			 ::Dynamic playerVocals = voices;
HXLINE(1438)			 ::flixel::sound::FlxSound _hx_tmp = this->vocals;
HXDLIN(1438)			 ::Dynamic _hx_tmp1;
HXDLIN(1438)			if (::hx::IsNotNull( playerVocals )) {
HXLINE(1438)				_hx_tmp1 = playerVocals;
            			}
            			else {
HXLINE(1438)				::String song1 = this->currentSongName;
HXDLIN(1438)				::String postfix2 = null();
HXDLIN(1438)				 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(1438)				 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(1438)				::String path1 = invalidChars1->split(::StringTools_obj::replace(song1,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(1438)				::String songKey1 = ((HX_("",00,00,00,00) + hideChars1->split(path1)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34));
HXDLIN(1438)				if (::hx::IsNotNull( postfix2 )) {
HXLINE(1438)					songKey1 = (songKey1 + (HX_("-",2d,00,00,00) + postfix2));
            				}
HXDLIN(1438)				 ::openfl::media::Sound voices1 = ::backend::Paths_obj::returnSound(null(),songKey1,HX_("songs",fe,36,c7,80));
HXDLIN(1438)				_hx_tmp1 = voices1;
            			}
HXDLIN(1438)			_hx_tmp->loadEmbedded(_hx_tmp1,null(),null(),null());
            		}
HXLINE(1440)		this->vocals->autoDestroy = false;
HXLINE(1441)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::sound::FlxSound >();
HXLINE(1443)		this->opponentVocals =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXLINE(1445)		{
HXLINE(1446)			::String song2 = this->currentSongName;
HXDLIN(1446)			::String postfix3;
HXDLIN(1446)			bool postfix4;
HXDLIN(1446)			if (::hx::IsNotNull( this->characterData->__Field(HX_("vocalsP2",c0,a9,fc,1b),::hx::paccDynamic) )) {
HXLINE(1446)				postfix4 = ::hx::IsLess(  ::Dynamic(this->characterData->__Field(HX_("vocalsP2",c0,a9,fc,1b),::hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),1 );
            			}
            			else {
HXLINE(1446)				postfix4 = true;
            			}
HXDLIN(1446)			if (postfix4) {
HXLINE(1446)				postfix3 = HX_("Opponent",bd,75,6a,d2);
            			}
            			else {
HXLINE(1446)				postfix3 = ( (::String)(this->characterData->__Field(HX_("vocalsP2",c0,a9,fc,1b),::hx::paccDynamic)) );
            			}
HXDLIN(1446)			 ::EReg invalidChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(1446)			 ::EReg hideChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(1446)			::String path2 = invalidChars2->split(::StringTools_obj::replace(song2,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(1446)			::String songKey2 = ((HX_("",00,00,00,00) + hideChars2->split(path2)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34));
HXDLIN(1446)			if (::hx::IsNotNull( postfix3 )) {
HXLINE(1446)				songKey2 = (songKey2 + (HX_("-",2d,00,00,00) + postfix3));
            			}
HXDLIN(1446)			 ::openfl::media::Sound voices2 = ::backend::Paths_obj::returnSound(null(),songKey2,HX_("songs",fe,36,c7,80));
HXDLIN(1446)			 ::Dynamic oppVocals = voices2;
HXLINE(1447)			if (::hx::IsNotNull( oppVocals )) {
HXLINE(1447)				this->opponentVocals->loadEmbedded(oppVocals,null(),null(),null());
            			}
            		}
HXLINE(1449)		this->opponentVocals->autoDestroy = false;
HXLINE(1450)		::flixel::FlxG_obj::sound->list->add(this->opponentVocals).StaticCast<  ::flixel::sound::FlxSound >();
HXLINE(1452)		this->generateSong();
HXLINE(1453)		::flixel::FlxG_obj::sound->music->pause();
HXLINE(1454)		::backend::Conductor_obj::songPosition = this->sectionStartTime(null());
HXLINE(1455)		::flixel::FlxG_obj::sound->music->set_time(::backend::Conductor_obj::songPosition);
HXLINE(1457)		Float curTime = ( (Float)(0) );
HXLINE(1459)		if ((( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length <= 1)) {
HXLINE(1461)			::haxe::Log_obj::trace(HX_("first load ever!!",48,32,5f,4b),::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),1461,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("loadSong",1b,f5,f7,bc)));
HXLINE(1462)			while((curTime < ::flixel::FlxG_obj::sound->music->_length)){
HXLINE(1464)				this->addSection(null());
HXLINE(1465)				curTime = (curTime + ((( (Float)(60) ) / ( (Float)(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) )) * ( (Float)(4000) )));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,loadSong,(void))

void ChartingState_obj::closeSubState(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1474_closeSubState)
HXLINE(1475)		if (this->playtesting) {
HXLINE(1477)			::flixel::FlxG_obj::sound->music->pause();
HXLINE(1478)			::flixel::FlxG_obj::sound->music->set_time(this->playtestingTime);
HXLINE(1479)			::flixel::FlxG_obj::sound->music->onComplete = this->playtestingOnComplete;
HXLINE(1480)			if (::hx::IsNotNull( this->instVolume )) {
HXLINE(1480)				::flixel::FlxG_obj::sound->music->set_volume(this->instVolume->value);
            			}
HXLINE(1481)			bool _hx_tmp;
HXDLIN(1481)			if (::hx::IsNotNull( this->check_mute_inst )) {
HXLINE(1481)				_hx_tmp = this->check_mute_inst->checked;
            			}
            			else {
HXLINE(1481)				_hx_tmp = false;
            			}
HXDLIN(1481)			if (_hx_tmp) {
HXLINE(1481)				::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
            			}
HXLINE(1483)			if (::hx::IsNotNull( this->vocals )) {
HXLINE(1485)				this->vocals->pause();
HXLINE(1486)				this->vocals->set_time(this->playtestingTime);
HXLINE(1487)				if (::hx::IsNotNull( this->voicesVolume )) {
HXLINE(1487)					this->vocals->set_volume(this->voicesVolume->value);
            				}
HXLINE(1488)				bool _hx_tmp1;
HXDLIN(1488)				if (::hx::IsNotNull( this->check_mute_vocals )) {
HXLINE(1488)					_hx_tmp1 = this->check_mute_vocals->checked;
            				}
            				else {
HXLINE(1488)					_hx_tmp1 = false;
            				}
HXDLIN(1488)				if (_hx_tmp1) {
HXLINE(1488)					this->vocals->set_volume(( (Float)(0) ));
            				}
            			}
HXLINE(1491)			if (::hx::IsNotNull( this->opponentVocals )) {
HXLINE(1493)				this->opponentVocals->pause();
HXLINE(1494)				this->opponentVocals->set_time(this->playtestingTime);
HXLINE(1495)				if (::hx::IsNotNull( this->voicesOppVolume )) {
HXLINE(1495)					this->opponentVocals->set_volume(this->voicesOppVolume->value);
            				}
HXLINE(1496)				bool _hx_tmp2;
HXDLIN(1496)				if (::hx::IsNotNull( this->check_mute_vocals_opponent )) {
HXLINE(1496)					_hx_tmp2 = this->check_mute_vocals_opponent->checked;
            				}
            				else {
HXLINE(1496)					_hx_tmp2 = false;
            				}
HXDLIN(1496)				if (_hx_tmp2) {
HXLINE(1496)					this->opponentVocals->set_volume(( (Float)(0) ));
            				}
            			}
HXLINE(1501)			::backend::DiscordClient_obj::changePresence(HX_("Chart Editor",ef,b4,29,e9),::StringTools_obj::replace(( (::String)(this->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_("-",2d,00,00,00),HX_(" ",20,00,00,00)),null(),null(),null());
            		}
HXLINE(1504)		this->super::closeSubState();
            	}


void ChartingState_obj::generateSong(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1514_generateSong)
HXLINE(1515)			::flixel::FlxG_obj::sound->music->pause();
HXLINE(1516)			::backend::Conductor_obj::songPosition = ( (Float)(0) );
HXLINE(1517)			if (::hx::IsNotNull( _gthis->vocals )) {
HXLINE(1518)				_gthis->vocals->pause();
HXLINE(1519)				_gthis->vocals->set_time(( (Float)(0) ));
            			}
HXLINE(1521)			if (::hx::IsNotNull( _gthis->opponentVocals )) {
HXLINE(1522)				_gthis->opponentVocals->pause();
HXLINE(1523)				_gthis->opponentVocals->set_time(( (Float)(0) ));
            			}
HXLINE(1525)			_gthis->changeSection(null(),null());
HXLINE(1526)			::states::editors::ChartingState_obj::curSec = 0;
HXLINE(1527)			_gthis->updateGrid();
HXLINE(1528)			_gthis->updateSectionUI();
HXLINE(1529)			if (::hx::IsNotNull( _gthis->vocals )) {
HXLINE(1529)				_gthis->vocals->play(null(),null(),null());
            			}
HXLINE(1530)			if (::hx::IsNotNull( _gthis->opponentVocals )) {
HXLINE(1530)				_gthis->opponentVocals->play(null(),null(),null());
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1507_generateSong)
HXDLIN(1507)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1508)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1508)		::String song = this->currentSongName;
HXDLIN(1508)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(1508)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(1508)		::String path = invalidChars->split(::StringTools_obj::replace(song,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(1508)		::String songKey = ((HX_("",00,00,00,00) + hideChars->split(path)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Inst",95,b3,69,40));
HXDLIN(1508)		 ::openfl::media::Sound inst = ::backend::Paths_obj::returnSound(null(),songKey,HX_("songs",fe,36,c7,80));
HXDLIN(1508)		_hx_tmp->playMusic(inst,((Float)0.6),null(),null());
HXLINE(1509)		::flixel::FlxG_obj::sound->music->autoDestroy = false;
HXLINE(1510)		if (::hx::IsNotNull( this->instVolume )) {
HXLINE(1510)			::flixel::FlxG_obj::sound->music->set_volume(this->instVolume->value);
            		}
HXLINE(1511)		bool _hx_tmp1;
HXDLIN(1511)		if (::hx::IsNotNull( this->check_mute_inst )) {
HXLINE(1511)			_hx_tmp1 = this->check_mute_inst->checked;
            		}
            		else {
HXLINE(1511)			_hx_tmp1 = false;
            		}
HXDLIN(1511)		if (_hx_tmp1) {
HXLINE(1511)			::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
            		}
HXLINE(1513)		::flixel::FlxG_obj::sound->music->onComplete =  ::Dynamic(new _hx_Closure_0(_gthis));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,generateSong,(void))

void ChartingState_obj::generateUI(){
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1535_generateUI)
HXLINE(1536)		while((this->bullshitUI->members->get_length() > 0)){
HXLINE(1538)			this->bullshitUI->remove(Dynamic( this->bullshitUI->members->__get(0)).StaticCast<  ::flixel::FlxBasic >(),true).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE(1542)		 ::flixel::text::FlxText title =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->UI_box->x + 20),(this->UI_box->y + 20),0,null(),null(),null());
HXLINE(1543)		this->bullshitUI->add(title).StaticCast<  ::flixel::FlxBasic >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,generateUI,(void))

void ChartingState_obj::getEvent(::String id, ::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1548_getEvent)
HXDLIN(1548)		if ((id == HX_("click_check_box",dd,c1,1e,a8))) {
HXLINE(1550)			 ::flixel::addons::ui::FlxUICheckBox check = ( ( ::flixel::addons::ui::FlxUICheckBox)(sender) );
HXLINE(1551)			::String label = check->getLabel()->text;
HXLINE(1552)			::String _hx_switch_0 = label;
            			if (  (_hx_switch_0==HX_("Alt Animation",0d,81,c1,cd)) ){
HXLINE(1570)				 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__SetField(HX_("altAnim",da,f3,f2,e5),check->checked,::hx::paccDynamic);
HXDLIN(1570)				goto _hx_goto_109;
            			}
            			if (  (_hx_switch_0==HX_("Change BPM",2f,3c,7a,fb)) ){
HXLINE(1567)				 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__SetField(HX_("changeBPM",4f,4f,f8,1d),check->checked,::hx::paccDynamic);
HXLINE(1568)				::flixel::FlxG_obj::log->advanced(HX_("changed bpm shit",4d,09,04,76),::flixel::_hx_system::debug::log::LogStyle_obj::NORMAL,null());
HXLINE(1566)				goto _hx_goto_109;
            			}
            			if (  (_hx_switch_0==HX_("GF section",e4,3e,d0,86)) ){
HXLINE(1561)				 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__SetField(HX_("gfSection",86,e5,63,d4),check->checked,::hx::paccDynamic);
HXLINE(1563)				this->updateGrid();
HXLINE(1564)				this->updateHeads();
HXLINE(1560)				goto _hx_goto_109;
            			}
            			if (  (_hx_switch_0==HX_("Must hit section",a1,02,f0,99)) ){
HXLINE(1555)				 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__SetField(HX_("mustHitSection",3b,5f,87,62),check->checked,::hx::paccDynamic);
HXLINE(1557)				this->updateGrid();
HXLINE(1558)				this->updateHeads();
HXLINE(1554)				goto _hx_goto_109;
            			}
            			_hx_goto_109:;
            		}
            		else {
HXLINE(1573)			bool _hx_tmp;
HXDLIN(1573)			if ((id == HX_("change_numeric_stepper",50,0a,cc,bb))) {
HXLINE(1573)				_hx_tmp = ::Std_obj::isOfType(sender,::hx::ClassOf< ::flixel::addons::ui::FlxUINumericStepper >());
            			}
            			else {
HXLINE(1573)				_hx_tmp = false;
            			}
HXDLIN(1573)			if (_hx_tmp) {
HXLINE(1575)				 ::flixel::addons::ui::FlxUINumericStepper nums = ( ( ::flixel::addons::ui::FlxUINumericStepper)(sender) );
HXLINE(1576)				::String wname = nums->name;
HXLINE(1578)				::String _hx_switch_1 = wname;
            				if (  (_hx_switch_1==HX_("inst_volume",73,9c,51,f6)) ){
HXLINE(1605)					::flixel::FlxG_obj::sound->music->set_volume(nums->value);
HXLINE(1606)					if (this->check_mute_inst->checked) {
HXLINE(1606)						::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
            					}
HXLINE(1604)					goto _hx_goto_110;
            				}
            				if (  (_hx_switch_1==HX_("note_susLength",8a,6b,51,4b)) ){
HXLINE(1595)					bool _hx_tmp1;
HXDLIN(1595)					if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(1595)						_hx_tmp1 = ::hx::IsNotNull( this->curSelectedNote->__get(2) );
            					}
            					else {
HXLINE(1595)						_hx_tmp1 = false;
            					}
HXDLIN(1595)					if (_hx_tmp1) {
HXLINE(1596)						this->curSelectedNote->set(2,nums->value);
HXLINE(1597)						this->updateGrid();
            					}
HXLINE(1595)					goto _hx_goto_110;
            				}
            				if (  (_hx_switch_1==HX_("section_beats",23,ad,15,1a)) ){
HXLINE(1581)					 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__SetField(HX_("sectionBeats",18,52,2e,0f),nums->value,::hx::paccDynamic);
HXLINE(1582)					this->reloadGridLayer();
HXLINE(1580)					goto _hx_goto_110;
            				}
            				if (  (_hx_switch_1==HX_("section_bpm",45,60,97,44)) ){
HXLINE(1601)					 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__SetField(HX_("bpm",df,be,4a,00),nums->value,::hx::paccDynamic);
HXLINE(1602)					this->updateGrid();
HXLINE(1600)					goto _hx_goto_110;
            				}
            				if (  (_hx_switch_1==HX_("song_bpm",35,36,15,42)) ){
HXLINE(1588)					this->_song->__SetField(HX_("bpm",df,be,4a,00),nums->value,::hx::paccDynamic);
HXLINE(1589)					::backend::Conductor_obj::mapBPMChanges(this->_song);
HXLINE(1590)					::backend::Conductor_obj::set_bpm(nums->value);
HXLINE(1591)					this->stepperSusLength->stepSize = ( (Float)(::Math_obj::ceil((::backend::Conductor_obj::stepCrochet / ( (Float)(2) )))) );
HXLINE(1592)					this->updateGrid();
HXLINE(1587)					goto _hx_goto_110;
            				}
            				if (  (_hx_switch_1==HX_("song_speed",5d,10,41,a4)) ){
HXLINE(1585)					this->_song->__SetField(HX_("speed",87,97,69,81),nums->value,::hx::paccDynamic);
HXDLIN(1585)					goto _hx_goto_110;
            				}
            				if (  (_hx_switch_1==HX_("voices_opp_volume",68,07,be,7c)) ){
HXLINE(1613)					this->opponentVocals->set_volume(nums->value);
HXLINE(1614)					if (this->check_mute_vocals_opponent->checked) {
HXLINE(1614)						this->opponentVocals->set_volume(( (Float)(0) ));
            					}
HXLINE(1612)					goto _hx_goto_110;
            				}
            				if (  (_hx_switch_1==HX_("voices_volume",18,a7,72,99)) ){
HXLINE(1609)					this->vocals->set_volume(nums->value);
HXLINE(1610)					if (this->check_mute_vocals->checked) {
HXLINE(1610)						this->vocals->set_volume(( (Float)(0) ));
            					}
HXLINE(1608)					goto _hx_goto_110;
            				}
            				_hx_goto_110:;
            			}
            			else {
HXLINE(1617)				bool _hx_tmp2;
HXDLIN(1617)				if ((id == HX_("change_input_text",f1,11,47,68))) {
HXLINE(1617)					_hx_tmp2 = ::Std_obj::isOfType(sender,::hx::ClassOf< ::flixel::addons::ui::FlxUIInputText >());
            				}
            				else {
HXLINE(1617)					_hx_tmp2 = false;
            				}
HXDLIN(1617)				if (_hx_tmp2) {
HXLINE(1618)					if (::hx::IsInstanceEq( sender,this->noteSplashesInputText )) {
HXLINE(1619)						this->_song->__SetField(HX_("splashSkin",84,03,e1,a1),this->noteSplashesInputText->text,::hx::paccDynamic);
            					}
            					else {
HXLINE(1621)						if (::hx::IsInstanceEq( sender,this->noteSkinInputText )) {
HXLINE(1622)							this->_song->__SetField(HX_("arrowSkin",e6,d4,f8,07),this->noteSkinInputText->text,::hx::paccDynamic);
            						}
            						else {
HXLINE(1624)							if (::hx::IsInstanceEq( sender,this->gameOverCharacterInputText )) {
HXLINE(1625)								this->_song->__SetField(HX_("gameOverChar",5c,48,07,65),this->gameOverCharacterInputText->text,::hx::paccDynamic);
            							}
            							else {
HXLINE(1627)								if (::hx::IsInstanceEq( sender,this->gameOverSoundInputText )) {
HXLINE(1628)									this->_song->__SetField(HX_("gameOverSound",89,f8,70,3c),this->gameOverSoundInputText->text,::hx::paccDynamic);
            								}
            								else {
HXLINE(1630)									if (::hx::IsInstanceEq( sender,this->gameOverLoopInputText )) {
HXLINE(1631)										this->_song->__SetField(HX_("gameOverLoop",ea,8f,ff,6a),this->gameOverLoopInputText->text,::hx::paccDynamic);
            									}
            									else {
HXLINE(1633)										if (::hx::IsInstanceEq( sender,this->gameOverEndInputText )) {
HXLINE(1634)											this->_song->__SetField(HX_("gameOverEnd",15,2d,a9,8d),this->gameOverEndInputText->text,::hx::paccDynamic);
            										}
            										else {
HXLINE(1636)											if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(1638)												if (::hx::IsInstanceEq( sender,this->value1InputText )) {
HXLINE(1639)													if (::hx::IsNotNull( this->curSelectedNote->__get(1)->__GetItem(this->curEventSelected) )) {
HXLINE(1641)														this->curSelectedNote->__get(1)->__GetItem(this->curEventSelected)->__SetItem(1,this->value1InputText->text);
HXLINE(1642)														this->updateGrid();
            													}
            												}
            												else {
HXLINE(1645)													if (::hx::IsInstanceEq( sender,this->value2InputText )) {
HXLINE(1646)														if (::hx::IsNotNull( this->curSelectedNote->__get(1)->__GetItem(this->curEventSelected) )) {
HXLINE(1648)															this->curSelectedNote->__get(1)->__GetItem(this->curEventSelected)->__SetItem(2,this->value2InputText->text);
HXLINE(1649)															this->updateGrid();
            														}
            													}
            													else {
HXLINE(1652)														if (::hx::IsInstanceEq( sender,this->strumTimeInputText )) {
HXLINE(1653)															Float value = ::Std_obj::parseFloat(this->strumTimeInputText->text);
HXLINE(1654)															if (::Math_obj::isNaN(value)) {
HXLINE(1654)																value = ( (Float)(0) );
            															}
HXLINE(1655)															this->curSelectedNote->set(0,value);
HXLINE(1656)															this->updateGrid();
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE(1660)					bool _hx_tmp3;
HXDLIN(1660)					if ((id == HX_("change_slider",50,54,ff,71))) {
HXLINE(1660)						_hx_tmp3 = ::Std_obj::isOfType(sender,::hx::ClassOf< ::flixel::addons::ui::FlxUISlider >());
            					}
            					else {
HXLINE(1660)						_hx_tmp3 = false;
            					}
HXDLIN(1660)					if (_hx_tmp3) {
HXLINE(1662)						if (::hx::IsEq( sender,HX_("playbackSpeed",6c,73,8d,56) )) {
HXLINE(1665)							this->playbackSpeed = ( (Float)(::Std_obj::_hx_int(this->sliderRate->value)) );
            						}
            					}
            				}
            			}
            		}
            	}


Float ChartingState_obj::sectionStartTime(::hx::Null< int >  __o_add){
            		int add = __o_add.Default(0);
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1675_sectionStartTime)
HXLINE(1676)		Float daBPM = ( (Float)(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE(1677)		Float daPos = ( (Float)(0) );
HXLINE(1678)		{
HXLINE(1678)			int _g = 0;
HXDLIN(1678)			int _g1 = (::states::editors::ChartingState_obj::curSec + add);
HXDLIN(1678)			while((_g < _g1)){
HXLINE(1678)				_g = (_g + 1);
HXDLIN(1678)				int i = (_g - 1);
HXLINE(1680)				if (::hx::IsNotNull(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i) )) {
HXLINE(1682)					if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE(1684)						daBPM = ( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            					}
HXLINE(1686)					daPos = (daPos + (( (Float)(this->getSectionBeats(i)) ) * (( (Float)(60000) ) / daBPM)));
            				}
            			}
            		}
HXLINE(1689)		return daPos;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,sectionStartTime,return )

void ChartingState_obj::update(Float elapsed){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_1, ::states::editors::ChartingState,_gthis,::Array< bool >,playedSound,Float,elapsed) HXARGC(1)
            		void _hx_run( ::objects::Note note){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2160_update)
HXLINE(2161)			note->set_alpha(( (Float)(1) ));
HXLINE(2162)			if (::hx::IsNotNull( _gthis->curSelectedNote )) {
HXLINE(2163)				int noteDataToCheck = note->noteData;
HXLINE(2164)				bool _hx_tmp;
HXDLIN(2164)				if ((noteDataToCheck > -1)) {
HXLINE(2164)					_hx_tmp = ::hx::IsNotEq( note->mustPress, ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic) );
            				}
            				else {
HXLINE(2164)					_hx_tmp = false;
            				}
HXDLIN(2164)				if (_hx_tmp) {
HXLINE(2164)					noteDataToCheck = (noteDataToCheck + 4);
            				}
HXLINE(2166)				bool _hx_tmp1;
HXDLIN(2166)				if (::hx::IsEq( _gthis->curSelectedNote->__get(0),note->strumTime )) {
HXLINE(2166)					bool _hx_tmp2;
HXDLIN(2166)					if (::hx::IsNull( _gthis->curSelectedNote->__get(2) )) {
HXLINE(2166)						_hx_tmp2 = (noteDataToCheck < 0);
            					}
            					else {
HXLINE(2166)						_hx_tmp2 = false;
            					}
HXDLIN(2166)					if (!(_hx_tmp2)) {
HXLINE(2166)						if (::hx::IsNotNull( _gthis->curSelectedNote->__get(2) )) {
HXLINE(2166)							_hx_tmp1 = ::hx::IsEq( _gthis->curSelectedNote->__get(1),noteDataToCheck );
            						}
            						else {
HXLINE(2166)							_hx_tmp1 = false;
            						}
            					}
            					else {
HXLINE(2166)						_hx_tmp1 = true;
            					}
            				}
            				else {
HXLINE(2166)					_hx_tmp1 = false;
            				}
HXDLIN(2166)				if (_hx_tmp1) {
HXLINE(2168)					 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(2168)					_gthis1->colorSine = (_gthis1->colorSine + elapsed);
HXLINE(2169)					Float colorVal = (((Float)0.7) + (::Math_obj::sin((::Math_obj::PI * _gthis->colorSine)) * ((Float)0.3)));
HXLINE(2170)					int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(2170)					{
HXLINE(2170)						int Value = ::Math_obj::round((colorVal * ( (Float)(255) )));
HXDLIN(2170)						color = (color & -16711681);
HXDLIN(2170)						int color1;
HXDLIN(2170)						if ((Value > 255)) {
HXLINE(2170)							color1 = 255;
            						}
            						else {
HXLINE(2170)							if ((Value < 0)) {
HXLINE(2170)								color1 = 0;
            							}
            							else {
HXLINE(2170)								color1 = Value;
            							}
            						}
HXDLIN(2170)						color = (color | (color1 << 16));
            					}
HXDLIN(2170)					{
HXLINE(2170)						int Value1 = ::Math_obj::round((colorVal * ( (Float)(255) )));
HXDLIN(2170)						color = (color & -65281);
HXDLIN(2170)						int color2;
HXDLIN(2170)						if ((Value1 > 255)) {
HXLINE(2170)							color2 = 255;
            						}
            						else {
HXLINE(2170)							if ((Value1 < 0)) {
HXLINE(2170)								color2 = 0;
            							}
            							else {
HXLINE(2170)								color2 = Value1;
            							}
            						}
HXDLIN(2170)						color = (color | (color2 << 8));
            					}
HXDLIN(2170)					{
HXLINE(2170)						int Value2 = ::Math_obj::round((colorVal * ( (Float)(255) )));
HXDLIN(2170)						color = (color & -256);
HXDLIN(2170)						int color3;
HXDLIN(2170)						if ((Value2 > 255)) {
HXLINE(2170)							color3 = 255;
            						}
            						else {
HXLINE(2170)							if ((Value2 < 0)) {
HXLINE(2170)								color3 = 0;
            							}
            							else {
HXLINE(2170)								color3 = Value2;
            							}
            						}
HXDLIN(2170)						color = (color | color3);
            					}
HXDLIN(2170)					{
HXLINE(2170)						int Value3 = ::Math_obj::round(((Float)254.745));
HXDLIN(2170)						color = (color & 16777215);
HXDLIN(2170)						int color4;
HXDLIN(2170)						if ((Value3 > 255)) {
HXLINE(2170)							color4 = 255;
            						}
            						else {
HXLINE(2170)							if ((Value3 < 0)) {
HXLINE(2170)								color4 = 0;
            							}
            							else {
HXLINE(2170)								color4 = Value3;
            							}
            						}
HXDLIN(2170)						color = (color | (color4 << 24));
            					}
HXDLIN(2170)					note->set_color(color);
            				}
            			}
HXLINE(2174)			if ((note->strumTime <= ::backend::Conductor_obj::songPosition)) {
HXLINE(2175)				note->set_alpha(((Float)0.4));
HXLINE(2176)				bool _hx_tmp3;
HXDLIN(2176)				bool _hx_tmp4;
HXDLIN(2176)				if ((note->strumTime > _gthis->lastConductorPos)) {
HXLINE(2176)					_hx_tmp4 = ::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel );
            				}
            				else {
HXLINE(2176)					_hx_tmp4 = false;
            				}
HXDLIN(2176)				if (_hx_tmp4) {
HXLINE(2176)					_hx_tmp3 = (note->noteData > -1);
            				}
            				else {
HXLINE(2176)					_hx_tmp3 = false;
            				}
HXDLIN(2176)				if (_hx_tmp3) {
HXLINE(2177)					int data = ::hx::Mod(note->noteData,4);
HXLINE(2178)					int noteDataToCheck1 = note->noteData;
HXLINE(2179)					bool _hx_tmp5;
HXDLIN(2179)					if ((noteDataToCheck1 > -1)) {
HXLINE(2179)						_hx_tmp5 = ::hx::IsNotEq( note->mustPress, ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic) );
            					}
            					else {
HXLINE(2179)						_hx_tmp5 = false;
            					}
HXDLIN(2179)					if (_hx_tmp5) {
HXLINE(2179)						noteDataToCheck1 = (noteDataToCheck1 + 4);
            					}
HXLINE(2180)					Dynamic( _gthis->strumLineNotes->members->__get(noteDataToCheck1)).StaticCast<  ::objects::StrumNote >()->playAnim(HX_("confirm",00,9d,39,10),true);
HXLINE(2181)					Dynamic( _gthis->strumLineNotes->members->__get(noteDataToCheck1)).StaticCast<  ::objects::StrumNote >()->resetAnim = (((note->sustainLength / ( (Float)(1000) )) + ((Float)0.15)) / _gthis->playbackSpeed);
HXLINE(2182)					if (!(playedSound->__get(data))) {
HXLINE(2183)						bool _hx_tmp6;
HXDLIN(2183)						if (note->hitsoundChartEditor) {
HXLINE(2183)							bool _hx_tmp7;
HXDLIN(2183)							if (_gthis->playSoundBf->checked) {
HXLINE(2183)								_hx_tmp7 = note->mustPress;
            							}
            							else {
HXLINE(2183)								_hx_tmp7 = false;
            							}
HXDLIN(2183)							if (!(_hx_tmp7)) {
HXLINE(2183)								if (_gthis->playSoundDad->checked) {
HXLINE(2183)									_hx_tmp6 = !(note->mustPress);
            								}
            								else {
HXLINE(2183)									_hx_tmp6 = false;
            								}
            							}
            							else {
HXLINE(2183)								_hx_tmp6 = true;
            							}
            						}
            						else {
HXLINE(2183)							_hx_tmp6 = false;
            						}
HXDLIN(2183)						if (_hx_tmp6) {
HXLINE(2185)							::String soundToPlay = note->hitsound;
HXLINE(2186)							if (::hx::IsEq( _gthis->_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic),HX_("gf",1f,5a,00,00) )) {
HXLINE(2187)								soundToPlay = (HX_("GF_",60,1d,36,00) + ::Std_obj::string((data + 1)));
            							}
HXLINE(2189)							{
HXLINE(2189)								 ::flixel::_hx_system::frontEnds::SoundFrontEnd _this = ::flixel::FlxG_obj::sound;
HXDLIN(2189)								 ::flixel::sound::FlxSound _this1 = _this->play(::backend::Paths_obj::sound(soundToPlay,null()),null(),null(),null(),null(),null());
HXDLIN(2189)								Float pan;
HXDLIN(2189)								if ((note->noteData < 4)) {
HXLINE(2189)									pan = ((Float)-0.3);
            								}
            								else {
HXLINE(2189)									pan = ((Float)0.3);
            								}
HXDLIN(2189)								_this1->_transform->pan = pan;
HXDLIN(2189)								_this1->updateTransform();
            							}
HXLINE(2190)							playedSound[data] = true;
            						}
HXLINE(2193)						data = note->noteData;
HXLINE(2194)						if (::hx::IsNotEq( note->mustPress, ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic) )) {
HXLINE(2196)							data = (data + 4);
            						}
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1695_update)
HXDLIN(1695)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1696)		this->curStep = this->recalculateSteps(null());
HXLINE(1698)		if ((::flixel::FlxG_obj::sound->music->_time < 0)) {
HXLINE(1699)			::flixel::FlxG_obj::sound->music->pause();
HXLINE(1700)			::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
            		}
            		else {
HXLINE(1702)			if ((::flixel::FlxG_obj::sound->music->_time > ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE(1703)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(1704)				::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
HXLINE(1705)				this->changeSection(null(),null());
            			}
            		}
HXLINE(1707)		::backend::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(1708)		this->_song->__SetField(HX_("song",d5,23,58,4c),this->UI_songTitle->text,::hx::paccDynamic);
HXLINE(1710)		this->strumLineUpdateY();
HXLINE(1711)		{
HXLINE(1711)			int _g = 0;
HXDLIN(1711)			while((_g < 8)){
HXLINE(1711)				_g = (_g + 1);
HXDLIN(1711)				int i = (_g - 1);
HXLINE(1712)				Dynamic( this->strumLineNotes->members->__get(i)).StaticCast<  ::objects::StrumNote >()->set_y(this->strumLine->y);
            			}
            		}
HXLINE(1715)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE(1716)		this->camPos->set_y(this->strumLine->y);
HXLINE(1717)		if (!(this->disableAutoScrolling->checked)) {
HXLINE(1718)			int _hx_tmp = ::Math_obj::ceil(this->strumLine->y);
HXDLIN(1718)			if ((_hx_tmp >= this->gridBG->get_height())) {
HXLINE(1720)				if (::hx::IsNull(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((::states::editors::ChartingState_obj::curSec + 1)) )) {
HXLINE(1722)					this->addSection(null());
            				}
HXLINE(1725)				this->changeSection((::states::editors::ChartingState_obj::curSec + 1),false);
            			}
            			else {
HXLINE(1726)				if ((this->strumLine->y < -10)) {
HXLINE(1727)					this->changeSection((::states::editors::ChartingState_obj::curSec - 1),false);
            				}
            			}
            		}
HXLINE(1734)		bool _hx_tmp1;
HXDLIN(1734)		bool _hx_tmp2;
HXDLIN(1734)		bool _hx_tmp3;
HXDLIN(1734)		if ((::flixel::FlxG_obj::mouse->x > this->gridBG->x)) {
HXLINE(1735)			int _hx_tmp4 = ::flixel::FlxG_obj::mouse->x;
HXDLIN(1735)			Float _hx_tmp5 = this->gridBG->x;
HXLINE(1734)			_hx_tmp3 = (_hx_tmp4 < (_hx_tmp5 + this->gridBG->get_width()));
            		}
            		else {
HXLINE(1734)			_hx_tmp3 = false;
            		}
HXDLIN(1734)		if (_hx_tmp3) {
HXLINE(1734)			_hx_tmp2 = (::flixel::FlxG_obj::mouse->y > this->gridBG->y);
            		}
            		else {
HXLINE(1734)			_hx_tmp2 = false;
            		}
HXDLIN(1734)		if (_hx_tmp2) {
HXLINE(1737)			int _hx_tmp6 = ::flixel::FlxG_obj::mouse->y;
HXDLIN(1737)			Float _hx_tmp7 = this->gridBG->y;
HXDLIN(1737)			int _hx_tmp8 = ::states::editors::ChartingState_obj::GRID_SIZE;
HXDLIN(1737)			Float _hx_tmp9 = ((( (Float)(_hx_tmp8) ) * ( (Float)(this->getSectionBeats(null())) )) * ( (Float)(4) ));
HXLINE(1734)			_hx_tmp1 = (_hx_tmp6 < (_hx_tmp7 + (_hx_tmp9 * this->zoomList->__get(this->curZoom))));
            		}
            		else {
HXLINE(1734)			_hx_tmp1 = false;
            		}
HXDLIN(1734)		if (_hx_tmp1) {
HXLINE(1739)			this->dummyArrow->set_visible(true);
HXLINE(1740)			this->dummyArrow->set_x(( (Float)((::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->x) ) / ( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ))) * ::states::editors::ChartingState_obj::GRID_SIZE)) ));
HXLINE(1741)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1741)			if (_this->keyManager->checkStatusUnsafe(16,_this->status)) {
HXLINE(1742)				this->dummyArrow->set_y(( (Float)(::flixel::FlxG_obj::mouse->y) ));
            			}
            			else {
HXLINE(1745)				Float gridmult = (( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ) / (( (Float)(::states::editors::ChartingState_obj::quantization) ) / ( (Float)(16) )));
HXLINE(1746)				this->dummyArrow->set_y((( (Float)(::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->y) ) / gridmult))) ) * gridmult));
            			}
            		}
            		else {
HXLINE(1749)			this->dummyArrow->set_visible(false);
            		}
HXLINE(1752)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE(1754)			if (::flixel::FlxG_obj::mouse->overlaps(this->curRenderedNotes,null())) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::ChartingState,_gthis) HXARGC(1)
            				void _hx_run( ::objects::Note note){
            					HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1758_update)
HXLINE(1758)					if (::flixel::FlxG_obj::mouse->overlaps(note,null())) {
HXLINE(1760)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1760)						if (_this->keyManager->checkStatusUnsafe(17,_this->status)) {
HXLINE(1762)							_gthis->selectNote(note);
            						}
            						else {
HXLINE(1764)							 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1764)							if (_this1->keyManager->checkStatusUnsafe(18,_this1->status)) {
HXLINE(1766)								_gthis->selectNote(note);
HXLINE(1767)								_gthis->curSelectedNote->set(3,_gthis->curNoteTypes->__get(_gthis->currentType));
HXLINE(1768)								_gthis->updateGrid();
            							}
            							else {
HXLINE(1773)								_gthis->deleteNote(note);
            							}
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1756)				this->curRenderedNotes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis)),null());
            			}
            			else {
HXLINE(1780)				bool _hx_tmp10;
HXDLIN(1780)				bool _hx_tmp11;
HXDLIN(1780)				bool _hx_tmp12;
HXDLIN(1780)				if ((::flixel::FlxG_obj::mouse->x > this->gridBG->x)) {
HXLINE(1781)					int _hx_tmp13 = ::flixel::FlxG_obj::mouse->x;
HXDLIN(1781)					Float _hx_tmp14 = this->gridBG->x;
HXLINE(1780)					_hx_tmp12 = (_hx_tmp13 < (_hx_tmp14 + this->gridBG->get_width()));
            				}
            				else {
HXLINE(1780)					_hx_tmp12 = false;
            				}
HXDLIN(1780)				if (_hx_tmp12) {
HXLINE(1780)					_hx_tmp11 = (::flixel::FlxG_obj::mouse->y > this->gridBG->y);
            				}
            				else {
HXLINE(1780)					_hx_tmp11 = false;
            				}
HXDLIN(1780)				if (_hx_tmp11) {
HXLINE(1783)					int _hx_tmp15 = ::flixel::FlxG_obj::mouse->y;
HXDLIN(1783)					Float _hx_tmp16 = this->gridBG->y;
HXDLIN(1783)					int _hx_tmp17 = ::states::editors::ChartingState_obj::GRID_SIZE;
HXDLIN(1783)					Float _hx_tmp18 = ((( (Float)(_hx_tmp17) ) * ( (Float)(this->getSectionBeats(null())) )) * ( (Float)(4) ));
HXLINE(1780)					_hx_tmp10 = (_hx_tmp15 < (_hx_tmp16 + (_hx_tmp18 * this->zoomList->__get(this->curZoom))));
            				}
            				else {
HXLINE(1780)					_hx_tmp10 = false;
            				}
HXDLIN(1780)				if (_hx_tmp10) {
HXLINE(1785)					::flixel::FlxG_obj::log->advanced(HX_("added note",52,9b,bd,b3),::flixel::_hx_system::debug::log::LogStyle_obj::NORMAL,null());
HXLINE(1786)					this->addNote(null(),null(),null());
            				}
            			}
            		}
HXLINE(1791)		bool blockInput = false;
HXLINE(1792)		{
HXLINE(1792)			int _g1 = 0;
HXDLIN(1792)			::Array< ::Dynamic> _g2 = this->blockPressWhileTypingOn;
HXDLIN(1792)			while((_g1 < _g2->length)){
HXLINE(1792)				 ::flixel::addons::ui::FlxUIInputText inputText = _g2->__get(_g1).StaticCast<  ::flixel::addons::ui::FlxUIInputText >();
HXDLIN(1792)				_g1 = (_g1 + 1);
HXLINE(1793)				if (inputText->hasFocus) {
HXLINE(1794)					::backend::ClientPrefs_obj::toggleVolumeKeys(false);
HXLINE(1795)					blockInput = true;
HXLINE(1796)					goto _hx_goto_115;
            				}
            			}
            			_hx_goto_115:;
            		}
HXLINE(1800)		if (!(blockInput)) {
HXLINE(1801)			int _g3 = 0;
HXDLIN(1801)			::Array< ::Dynamic> _g4 = this->blockPressWhileTypingOnStepper;
HXDLIN(1801)			while((_g3 < _g4->length)){
HXLINE(1801)				 ::flixel::addons::ui::FlxUINumericStepper stepper = _g4->__get(_g3).StaticCast<  ::flixel::addons::ui::FlxUINumericStepper >();
HXDLIN(1801)				_g3 = (_g3 + 1);
HXLINE(1803)				 ::flixel::addons::ui::FlxUIInputText leText = ::hx::TCast<  ::flixel::addons::ui::FlxUIInputText >::cast(stepper->text_field);
HXLINE(1804)				if (leText->hasFocus) {
HXLINE(1805)					::backend::ClientPrefs_obj::toggleVolumeKeys(false);
HXLINE(1806)					blockInput = true;
HXLINE(1807)					goto _hx_goto_116;
            				}
            			}
            			_hx_goto_116:;
            		}
HXLINE(1812)		if (!(blockInput)) {
HXLINE(1813)			::backend::ClientPrefs_obj::toggleVolumeKeys(true);
HXLINE(1814)			{
HXLINE(1814)				int _g5 = 0;
HXDLIN(1814)				::Array< ::Dynamic> _g6 = this->blockPressWhileScrolling;
HXDLIN(1814)				while((_g5 < _g6->length)){
HXLINE(1814)					 ::flixel::addons::ui::FlxUIDropDownMenu dropDownMenu = _g6->__get(_g5).StaticCast<  ::flixel::addons::ui::FlxUIDropDownMenu >();
HXDLIN(1814)					_g5 = (_g5 + 1);
HXLINE(1815)					if (dropDownMenu->dropPanel->visible) {
HXLINE(1816)						blockInput = true;
HXLINE(1817)						goto _hx_goto_117;
            					}
            				}
            				_hx_goto_117:;
            			}
            		}
HXLINE(1822)		if (!(blockInput)) {
HXLINE(1824)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1824)			if (_this1->keyManager->checkStatusUnsafe(27,_this1->status)) {
HXLINE(1826)				if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1827)					 ::flixel::sound::FlxSound _this2 = ::flixel::FlxG_obj::sound->music;
HXDLIN(1827)					_this2->cleanup(_this2->autoDestroy,true);
            				}
HXLINE(1829)				if (::hx::IsNotNull( this->vocals )) {
HXLINE(1831)					this->vocals->pause();
HXLINE(1832)					this->vocals->set_volume(( (Float)(0) ));
            				}
HXLINE(1834)				if (::hx::IsNotNull( this->opponentVocals )) {
HXLINE(1836)					this->opponentVocals->pause();
HXLINE(1837)					this->opponentVocals->set_volume(( (Float)(0) ));
            				}
HXLINE(1840)				this->autosaveSong();
HXLINE(1841)				this->playtesting = true;
HXLINE(1842)				this->playtestingTime = ::backend::Conductor_obj::songPosition;
HXLINE(1843)				this->playtestingOnComplete = ::flixel::FlxG_obj::sound->music->onComplete;
HXLINE(1844)				this->openSubState( ::states::editors::EditorPlayState_obj::__alloc( HX_CTX ,this->playbackSpeed));
            			}
            			else {
HXLINE(1846)				 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1846)				if (_this3->keyManager->checkStatusUnsafe(13,_this3->status)) {
HXLINE(1848)					this->autosaveSong();
HXLINE(1849)					::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE(1850)					::states::PlayState_obj::SONG = this->_song;
HXLINE(1851)					{
HXLINE(1851)						 ::flixel::sound::FlxSound _this4 = ::flixel::FlxG_obj::sound->music;
HXDLIN(1851)						_this4->cleanup(_this4->autoDestroy,true);
            					}
HXLINE(1852)					if (::hx::IsNotNull( this->vocals )) {
HXLINE(1852)						 ::flixel::sound::FlxSound _this5 = this->vocals;
HXDLIN(1852)						_this5->cleanup(_this5->autoDestroy,true);
            					}
HXLINE(1853)					if (::hx::IsNotNull( this->opponentVocals )) {
HXLINE(1853)						 ::flixel::sound::FlxSound _this6 = this->opponentVocals;
HXDLIN(1853)						_this6->cleanup(_this6->autoDestroy,true);
            					}
HXLINE(1856)					::backend::StageData_obj::loadDirectory(this->_song);
HXLINE(1857)					::backend::MusicBeatState_obj::switchState(::states::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::states::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false));
            				}
            			}
HXLINE(1860)			bool _hx_tmp19;
HXDLIN(1860)			if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(1860)				_hx_tmp19 = ::hx::IsGreater( this->curSelectedNote->__get(1),-1 );
            			}
            			else {
HXLINE(1860)				_hx_tmp19 = false;
            			}
HXDLIN(1860)			if (_hx_tmp19) {
HXLINE(1861)				 ::flixel::input::keyboard::FlxKeyList _this7 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1861)				if (_this7->keyManager->checkStatusUnsafe(69,_this7->status)) {
HXLINE(1863)					this->changeNoteSustain(::backend::Conductor_obj::stepCrochet);
            				}
HXLINE(1865)				 ::flixel::input::keyboard::FlxKeyList _this8 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1865)				if (_this8->keyManager->checkStatusUnsafe(81,_this8->status)) {
HXLINE(1867)					this->changeNoteSustain(-(::backend::Conductor_obj::stepCrochet));
            				}
            			}
HXLINE(1872)			 ::flixel::input::keyboard::FlxKeyList _this9 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1872)			if (_this9->keyManager->checkStatusUnsafe(8,_this9->status)) {
HXLINE(1874)				this->autosaveSong();
HXLINE(1875)				::states::PlayState_obj::chartingMode = false;
HXLINE(1876)				::backend::MusicBeatState_obj::switchState( ::states::editors::MasterEditorMenu_obj::__alloc( HX_CTX ,null(),null()));
HXLINE(1877)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp20 = ::flixel::FlxG_obj::sound;
HXDLIN(1877)				::String library = null();
HXDLIN(1877)				 ::openfl::media::Sound file = ::backend::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),HX_("freakyMenu",15,c9,93,86),library);
HXDLIN(1877)				_hx_tmp20->playMusic(file,null(),null(),null());
HXLINE(1878)				::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE(1879)				return;
            			}
HXLINE(1882)			bool _hx_tmp21;
HXDLIN(1882)			 ::flixel::input::keyboard::FlxKeyList _this10 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1882)			if (_this10->keyManager->checkStatusUnsafe(90,_this10->status)) {
HXLINE(1882)				 ::flixel::input::keyboard::FlxKeyList _this11 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1882)				_hx_tmp21 = _this11->keyManager->checkStatusUnsafe(17,_this11->status);
            			}
            			else {
HXLINE(1882)				_hx_tmp21 = false;
            			}
HXDLIN(1882)			if (_hx_tmp21) {
HXLINE(1883)				this->undo();
            			}
HXLINE(1886)			bool _hx_tmp22;
HXDLIN(1886)			bool _hx_tmp23;
HXDLIN(1886)			 ::flixel::input::keyboard::FlxKeyList _this12 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1886)			if (_this12->keyManager->checkStatusUnsafe(90,_this12->status)) {
HXLINE(1886)				_hx_tmp23 = (this->curZoom > 0);
            			}
            			else {
HXLINE(1886)				_hx_tmp23 = false;
            			}
HXDLIN(1886)			if (_hx_tmp23) {
HXLINE(1886)				 ::flixel::input::keyboard::FlxKeyList _this13 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1886)				_hx_tmp22 = !(_this13->keyManager->checkStatusUnsafe(17,_this13->status));
            			}
            			else {
HXLINE(1886)				_hx_tmp22 = false;
            			}
HXDLIN(1886)			if (_hx_tmp22) {
HXLINE(1887)				--this->curZoom;
HXLINE(1888)				this->updateZoom();
            			}
HXLINE(1890)			bool _hx_tmp24;
HXDLIN(1890)			 ::flixel::input::keyboard::FlxKeyList _this14 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1890)			if (_this14->keyManager->checkStatusUnsafe(88,_this14->status)) {
HXLINE(1890)				_hx_tmp24 = (this->curZoom < (this->zoomList->length - 1));
            			}
            			else {
HXLINE(1890)				_hx_tmp24 = false;
            			}
HXDLIN(1890)			if (_hx_tmp24) {
HXLINE(1891)				this->curZoom++;
HXLINE(1892)				this->updateZoom();
            			}
HXLINE(1895)			 ::flixel::input::keyboard::FlxKeyList _this15 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1895)			if (_this15->keyManager->checkStatusUnsafe(9,_this15->status)) {
HXLINE(1897)				 ::flixel::input::keyboard::FlxKeyList _this16 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1897)				if (_this16->keyManager->checkStatusUnsafe(16,_this16->status)) {
HXLINE(1899)					 ::flixel::addons::ui::FlxUITabMenu fh = this->UI_box;
HXDLIN(1899)					fh->set_selected_tab((fh->get_selected_tab() - 1));
HXLINE(1900)					if ((this->UI_box->get_selected_tab() < 0)) {
HXLINE(1901)						this->UI_box->set_selected_tab(2);
            					}
            				}
            				else {
HXLINE(1905)					 ::flixel::addons::ui::FlxUITabMenu fh1 = this->UI_box;
HXDLIN(1905)					fh1->set_selected_tab((fh1->get_selected_tab() + 1));
HXLINE(1906)					if ((this->UI_box->get_selected_tab() >= 3)) {
HXLINE(1907)						this->UI_box->set_selected_tab(0);
            					}
            				}
            			}
HXLINE(1911)			 ::flixel::input::keyboard::FlxKeyList _this17 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1911)			if (_this17->keyManager->checkStatusUnsafe(32,_this17->status)) {
HXLINE(1913)				if (::hx::IsNotNull( this->vocals )) {
HXLINE(1913)					this->vocals->play(null(),null(),null());
            				}
HXLINE(1914)				if (::hx::IsNotNull( this->opponentVocals )) {
HXLINE(1914)					this->opponentVocals->play(null(),null(),null());
            				}
HXLINE(1915)				this->pauseAndSetVocalsTime();
HXLINE(1916)				if (::hx::IsNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(1918)					::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(1919)					if (::hx::IsNotNull( this->vocals )) {
HXLINE(1919)						this->vocals->play(null(),null(),null());
            					}
HXLINE(1920)					if (::hx::IsNotNull( this->opponentVocals )) {
HXLINE(1920)						this->opponentVocals->play(null(),null(),null());
            					}
            				}
            				else {
HXLINE(1922)					::flixel::FlxG_obj::sound->music->pause();
            				}
            			}
HXLINE(1925)			bool _hx_tmp25;
HXDLIN(1925)			 ::flixel::input::keyboard::FlxKeyList _this18 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1925)			if (!(_this18->keyManager->checkStatusUnsafe(18,_this18->status))) {
HXLINE(1925)				 ::flixel::input::keyboard::FlxKeyList _this19 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1925)				_hx_tmp25 = _this19->keyManager->checkStatusUnsafe(82,_this19->status);
            			}
            			else {
HXLINE(1925)				_hx_tmp25 = false;
            			}
HXDLIN(1925)			if (_hx_tmp25) {
HXLINE(1927)				 ::flixel::input::keyboard::FlxKeyList _this20 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1927)				if (_this20->keyManager->checkStatusUnsafe(16,_this20->status)) {
HXLINE(1928)					this->resetSection(true);
            				}
            				else {
HXLINE(1930)					this->resetSection(null());
            				}
            			}
HXLINE(1933)			if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE(1935)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(1936)				if (!(this->mouseQuant)) {
HXLINE(1937)					 ::flixel::sound::FlxSound fh2 = ::flixel::FlxG_obj::sound->music;
HXDLIN(1937)					fh2->set_time((fh2->_time - ((( (Float)(::flixel::FlxG_obj::mouse->wheel) ) * ::backend::Conductor_obj::stepCrochet) * ((Float)0.8))));
            				}
            				else {
HXLINE(1940)					Float time = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(1941)					Float beat = this->curDecBeat;
HXLINE(1942)					Float snap = (( (Float)(::states::editors::ChartingState_obj::quantization) ) / ( (Float)(4) ));
HXLINE(1943)					Float increase = (( (Float)(1) ) / snap);
HXLINE(1944)					if ((::flixel::FlxG_obj::mouse->wheel > 0)) {
HXLINE(1946)						Float m = ::Math_obj::fround((beat * snap));
HXDLIN(1946)						Float fuck = ((m / snap) - increase);
HXLINE(1947)						 ::flixel::sound::FlxSound _hx_tmp26 = ::flixel::FlxG_obj::sound->music;
HXDLIN(1947)						_hx_tmp26->set_time(::backend::Conductor_obj::beatToSeconds(fuck));
            					}
            					else {
HXLINE(1949)						Float m1 = ::Math_obj::fround((beat * snap));
HXDLIN(1949)						Float fuck1 = ((m1 / snap) + increase);
HXLINE(1950)						 ::flixel::sound::FlxSound _hx_tmp27 = ::flixel::FlxG_obj::sound->music;
HXDLIN(1950)						_hx_tmp27->set_time(::backend::Conductor_obj::beatToSeconds(fuck1));
            					}
            				}
HXLINE(1953)				this->pauseAndSetVocalsTime();
            			}
HXLINE(1958)			bool _hx_tmp28;
HXDLIN(1958)			 ::flixel::input::keyboard::FlxKeyList _this21 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1958)			if (!(_this21->keyManager->checkStatusUnsafe(87,_this21->status))) {
HXLINE(1958)				 ::flixel::input::keyboard::FlxKeyList _this22 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1958)				_hx_tmp28 = _this22->keyManager->checkStatusUnsafe(83,_this22->status);
            			}
            			else {
HXLINE(1958)				_hx_tmp28 = true;
            			}
HXDLIN(1958)			if (_hx_tmp28) {
HXLINE(1960)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(1962)				Float holdingShift = ( (Float)(1) );
HXLINE(1963)				 ::flixel::input::keyboard::FlxKeyList _this23 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1963)				if (_this23->keyManager->checkStatusUnsafe(17,_this23->status)) {
HXLINE(1963)					holdingShift = ((Float)0.25);
            				}
            				else {
HXLINE(1964)					 ::flixel::input::keyboard::FlxKeyList _this24 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1964)					if (_this24->keyManager->checkStatusUnsafe(16,_this24->status)) {
HXLINE(1964)						holdingShift = ( (Float)(4) );
            					}
            				}
HXLINE(1966)				Float daTime = ((( (Float)(700) ) * ::flixel::FlxG_obj::elapsed) * holdingShift);
HXLINE(1968)				 ::flixel::sound::FlxSound fh3 = ::flixel::FlxG_obj::sound->music;
HXDLIN(1968)				Float fh4 = fh3->_time;
HXDLIN(1968)				int _hx_tmp29;
HXDLIN(1968)				 ::flixel::input::keyboard::FlxKeyList _this25 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1968)				if (_this25->keyManager->checkStatusUnsafe(87,_this25->status)) {
HXLINE(1968)					_hx_tmp29 = -1;
            				}
            				else {
HXLINE(1968)					_hx_tmp29 = 1;
            				}
HXDLIN(1968)				fh3->set_time((fh4 + (daTime * ( (Float)(_hx_tmp29) ))));
HXLINE(1970)				this->pauseAndSetVocalsTime();
            			}
HXLINE(1973)			if (!(::states::editors::ChartingState_obj::vortex)) {
HXLINE(1974)				bool _hx_tmp30;
HXDLIN(1974)				 ::flixel::input::keyboard::FlxKeyList _this26 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1974)				if (!(_this26->keyManager->checkStatusUnsafe(38,_this26->status))) {
HXLINE(1974)					 ::flixel::input::keyboard::FlxKeyList _this27 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1974)					_hx_tmp30 = _this27->keyManager->checkStatusUnsafe(40,_this27->status);
            				}
            				else {
HXLINE(1974)					_hx_tmp30 = true;
            				}
HXDLIN(1974)				if (_hx_tmp30) {
HXLINE(1976)					::flixel::FlxG_obj::sound->music->pause();
HXLINE(1977)					this->updateCurStep();
HXLINE(1978)					Float time1 = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(1979)					Float beat1 = this->curDecBeat;
HXLINE(1980)					Float snap1 = (( (Float)(::states::editors::ChartingState_obj::quantization) ) / ( (Float)(4) ));
HXLINE(1981)					Float increase1 = (( (Float)(1) ) / snap1);
HXLINE(1982)					 ::flixel::input::keyboard::FlxKeyList _this28 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1982)					if (_this28->keyManager->checkStatusUnsafe(38,_this28->status)) {
HXLINE(1984)						Float m2 = ::Math_obj::fround((beat1 * snap1));
HXDLIN(1984)						Float fuck2 = ((m2 / snap1) - increase1);
HXLINE(1985)						 ::flixel::sound::FlxSound _hx_tmp31 = ::flixel::FlxG_obj::sound->music;
HXDLIN(1985)						_hx_tmp31->set_time(::backend::Conductor_obj::beatToSeconds(fuck2));
            					}
            					else {
HXLINE(1987)						Float m3 = ::Math_obj::fround((beat1 * snap1));
HXDLIN(1987)						Float fuck3 = ((m3 / snap1) + increase1);
HXLINE(1988)						 ::flixel::sound::FlxSound _hx_tmp32 = ::flixel::FlxG_obj::sound->music;
HXDLIN(1988)						_hx_tmp32->set_time(::backend::Conductor_obj::beatToSeconds(fuck3));
            					}
            				}
            			}
HXLINE(1993)			int style = this->currentType;
HXLINE(1995)			 ::flixel::input::keyboard::FlxKeyList _this29 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1995)			if (_this29->keyManager->checkStatusUnsafe(16,_this29->status)) {
HXLINE(1996)				style = 3;
            			}
HXLINE(1999)			Float conductorTime = ::backend::Conductor_obj::songPosition;
HXLINE(2003)			if (!(blockInput)) {
HXLINE(2004)				 ::flixel::input::keyboard::FlxKeyList _this30 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2004)				if (_this30->keyManager->checkStatusUnsafe(39,_this30->status)) {
HXLINE(2005)					::states::editors::ChartingState_obj::curQuant++;
HXLINE(2006)					if ((::states::editors::ChartingState_obj::curQuant > (this->quantizations->length - 1))) {
HXLINE(2007)						::states::editors::ChartingState_obj::curQuant = 0;
            					}
HXLINE(2009)					::states::editors::ChartingState_obj::quantization = this->quantizations->__get(::states::editors::ChartingState_obj::curQuant);
            				}
HXLINE(2012)				 ::flixel::input::keyboard::FlxKeyList _this31 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2012)				if (_this31->keyManager->checkStatusUnsafe(37,_this31->status)) {
HXLINE(2013)					::states::editors::ChartingState_obj::curQuant--;
HXLINE(2014)					if ((::states::editors::ChartingState_obj::curQuant < 0)) {
HXLINE(2015)						::states::editors::ChartingState_obj::curQuant = (this->quantizations->length - 1);
            					}
HXLINE(2017)					::states::editors::ChartingState_obj::quantization = this->quantizations->__get(::states::editors::ChartingState_obj::curQuant);
            				}
HXLINE(2019)				this->quant->animation->play(HX_("q",71,00,00,00),true,false,::states::editors::ChartingState_obj::curQuant);
            			}
HXLINE(2021)			bool _hx_tmp33;
HXDLIN(2021)			if (::states::editors::ChartingState_obj::vortex) {
HXLINE(2021)				_hx_tmp33 = !(blockInput);
            			}
            			else {
HXLINE(2021)				_hx_tmp33 = false;
            			}
HXDLIN(2021)			if (_hx_tmp33) {
HXLINE(2022)				 ::flixel::input::keyboard::FlxKeyList _this32 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2022)				bool controlArray = _this32->keyManager->checkStatusUnsafe(49,_this32->status);
HXDLIN(2022)				 ::flixel::input::keyboard::FlxKeyList _this33 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2022)				bool controlArray1 = _this33->keyManager->checkStatusUnsafe(50,_this33->status);
HXDLIN(2022)				 ::flixel::input::keyboard::FlxKeyList _this34 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2022)				bool controlArray2 = _this34->keyManager->checkStatusUnsafe(51,_this34->status);
HXDLIN(2022)				 ::flixel::input::keyboard::FlxKeyList _this35 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2022)				bool controlArray3 = _this35->keyManager->checkStatusUnsafe(52,_this35->status);
HXLINE(2023)				 ::flixel::input::keyboard::FlxKeyList _this36 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2023)				bool controlArray4 = _this36->keyManager->checkStatusUnsafe(53,_this36->status);
HXDLIN(2023)				 ::flixel::input::keyboard::FlxKeyList _this37 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2023)				bool controlArray5 = _this37->keyManager->checkStatusUnsafe(54,_this37->status);
HXDLIN(2023)				 ::flixel::input::keyboard::FlxKeyList _this38 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2023)				bool controlArray6 = _this38->keyManager->checkStatusUnsafe(55,_this38->status);
HXDLIN(2023)				 ::flixel::input::keyboard::FlxKeyList _this39 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXLINE(2022)				::Array< bool > controlArray7 = ::Array_obj< bool >::__new(8)->init(0,controlArray)->init(1,controlArray1)->init(2,controlArray2)->init(3,controlArray3)->init(4,controlArray4)->init(5,controlArray5)->init(6,controlArray6)->init(7,_this39->keyManager->checkStatusUnsafe(56,_this39->status));
HXLINE(2025)				if (controlArray7->contains(true)) {
HXLINE(2027)					int _g7 = 0;
HXDLIN(2027)					int _g8 = controlArray7->length;
HXDLIN(2027)					while((_g7 < _g8)){
HXLINE(2027)						_g7 = (_g7 + 1);
HXDLIN(2027)						int i1 = (_g7 - 1);
HXLINE(2029)						if (controlArray7->__get(i1)) {
HXLINE(2030)							this->doANoteThing(conductorTime,i1,style);
            						}
            					}
            				}
HXLINE(2034)				Float feces;
HXLINE(2035)				bool _hx_tmp34;
HXDLIN(2035)				 ::flixel::input::keyboard::FlxKeyList _this40 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2035)				if (!(_this40->keyManager->checkStatusUnsafe(38,_this40->status))) {
HXLINE(2035)					 ::flixel::input::keyboard::FlxKeyList _this41 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2035)					_hx_tmp34 = _this41->keyManager->checkStatusUnsafe(40,_this41->status);
            				}
            				else {
HXLINE(2035)					_hx_tmp34 = true;
            				}
HXDLIN(2035)				if (_hx_tmp34) {
HXLINE(2037)					::flixel::FlxG_obj::sound->music->pause();
HXLINE(2040)					this->updateCurStep();
HXLINE(2044)					Float time2 = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(2045)					Float beat2 = this->curDecBeat;
HXLINE(2046)					Float snap2 = (( (Float)(::states::editors::ChartingState_obj::quantization) ) / ( (Float)(4) ));
HXLINE(2047)					Float increase2 = (( (Float)(1) ) / snap2);
HXLINE(2048)					 ::flixel::input::keyboard::FlxKeyList _this42 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2048)					if (_this42->keyManager->checkStatusUnsafe(38,_this42->status)) {
HXLINE(2050)						Float m4 = ::Math_obj::fround((beat2 * snap2));
HXDLIN(2050)						Float fuck4 = ((m4 / snap2) - increase2);
HXLINE(2051)						feces = ::backend::Conductor_obj::beatToSeconds(fuck4);
            					}
            					else {
HXLINE(2053)						Float m5 = ::Math_obj::fround((beat2 * snap2));
HXDLIN(2053)						Float fuck5 = ((m5 / snap2) + increase2);
HXLINE(2054)						feces = ::backend::Conductor_obj::beatToSeconds(fuck5);
            					}
HXLINE(2056)					::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::sound->music, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("time",0d,cc,fc,4c),feces)),((Float)0.1), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
HXLINE(2057)					this->pauseAndSetVocalsTime();
HXLINE(2059)					int dastrum = 0;
HXLINE(2061)					if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(2062)						dastrum = ( (int)(this->curSelectedNote->__get(0)) );
            					}
HXLINE(2065)					Float secStart = this->sectionStartTime(null());
HXLINE(2066)					Float datime = ((feces - secStart) - (( (Float)(dastrum) ) - secStart));
HXLINE(2067)					if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(2069)						 ::flixel::input::keyboard::FlxKeyList _this43 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2069)						bool controlArray8 = _this43->keyManager->checkStatusUnsafe(49,_this43->status);
HXDLIN(2069)						 ::flixel::input::keyboard::FlxKeyList _this44 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2069)						bool controlArray9 = _this44->keyManager->checkStatusUnsafe(50,_this44->status);
HXDLIN(2069)						 ::flixel::input::keyboard::FlxKeyList _this45 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2069)						bool controlArray10 = _this45->keyManager->checkStatusUnsafe(51,_this45->status);
HXDLIN(2069)						 ::flixel::input::keyboard::FlxKeyList _this46 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2069)						bool controlArray11 = _this46->keyManager->checkStatusUnsafe(52,_this46->status);
HXLINE(2070)						 ::flixel::input::keyboard::FlxKeyList _this47 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2070)						bool controlArray12 = _this47->keyManager->checkStatusUnsafe(53,_this47->status);
HXDLIN(2070)						 ::flixel::input::keyboard::FlxKeyList _this48 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2070)						bool controlArray13 = _this48->keyManager->checkStatusUnsafe(54,_this48->status);
HXDLIN(2070)						 ::flixel::input::keyboard::FlxKeyList _this49 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2070)						bool controlArray14 = _this49->keyManager->checkStatusUnsafe(55,_this49->status);
HXDLIN(2070)						 ::flixel::input::keyboard::FlxKeyList _this50 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXLINE(2069)						::Array< bool > controlArray15 = ::Array_obj< bool >::__new(8)->init(0,controlArray8)->init(1,controlArray9)->init(2,controlArray10)->init(3,controlArray11)->init(4,controlArray12)->init(5,controlArray13)->init(6,controlArray14)->init(7,_this50->keyManager->checkStatusUnsafe(56,_this50->status));
HXLINE(2072)						if (controlArray15->contains(true)) {
HXLINE(2075)							{
HXLINE(2075)								int _g9 = 0;
HXDLIN(2075)								int _g10 = controlArray15->length;
HXDLIN(2075)								while((_g9 < _g10)){
HXLINE(2075)									_g9 = (_g9 + 1);
HXDLIN(2075)									int i2 = (_g9 - 1);
HXLINE(2077)									if (controlArray15->__get(i2)) {
HXLINE(2078)										if (::hx::IsEq( this->curSelectedNote->__get(1),i2 )) {
HXLINE(2078)											::cpp::VirtualArray base = this->curSelectedNote;
HXDLIN(2078)											int _hx_tmp35 = 2;
HXDLIN(2078)											base->set(_hx_tmp35,(base->__get(_hx_tmp35) + ((datime - ( (Float)(this->curSelectedNote->__get(2)) )) - ::backend::Conductor_obj::stepCrochet)));
            										}
            									}
            								}
            							}
HXLINE(2080)							this->updateGrid();
HXLINE(2081)							this->updateNoteUI();
            						}
            					}
            				}
            			}
HXLINE(2086)			int shiftThing = 1;
HXLINE(2087)			 ::flixel::input::keyboard::FlxKeyList _this51 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2087)			if (_this51->keyManager->checkStatusUnsafe(16,_this51->status)) {
HXLINE(2088)				shiftThing = 4;
            			}
HXLINE(2090)			 ::flixel::input::keyboard::FlxKeyList _this52 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2090)			if (_this52->keyManager->checkStatusUnsafe(68,_this52->status)) {
HXLINE(2091)				this->changeSection((::states::editors::ChartingState_obj::curSec + shiftThing),null());
            			}
HXLINE(2092)			 ::flixel::input::keyboard::FlxKeyList _this53 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2092)			if (_this53->keyManager->checkStatusUnsafe(65,_this53->status)) {
HXLINE(2093)				if ((::states::editors::ChartingState_obj::curSec <= 0)) {
HXLINE(2094)					this->changeSection((( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length - 1),null());
            				}
            				else {
HXLINE(2096)					this->changeSection((::states::editors::ChartingState_obj::curSec - shiftThing),null());
            				}
            			}
            		}
            		else {
HXLINE(2099)			 ::flixel::input::keyboard::FlxKeyList _this54 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2099)			if (_this54->keyManager->checkStatusUnsafe(13,_this54->status)) {
HXLINE(2100)				int _g11 = 0;
HXDLIN(2100)				int _g12 = this->blockPressWhileTypingOn->length;
HXDLIN(2100)				while((_g11 < _g12)){
HXLINE(2100)					_g11 = (_g11 + 1);
HXDLIN(2100)					int i3 = (_g11 - 1);
HXLINE(2101)					if (this->blockPressWhileTypingOn->__get(i3).StaticCast<  ::flixel::addons::ui::FlxUIInputText >()->hasFocus) {
HXLINE(2102)						this->blockPressWhileTypingOn->__get(i3).StaticCast<  ::flixel::addons::ui::FlxUIInputText >()->set_hasFocus(false);
            					}
            				}
            			}
            		}
HXLINE(2107)		 ::flixel::group::FlxTypedGroup _hx_tmp36 = this->strumLineNotes;
HXDLIN(2107)		_hx_tmp36->set_visible(this->quant->set_visible(::states::editors::ChartingState_obj::vortex));
HXLINE(2109)		if ((::flixel::FlxG_obj::sound->music->_time < 0)) {
HXLINE(2110)			::flixel::FlxG_obj::sound->music->pause();
HXLINE(2111)			::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
            		}
            		else {
HXLINE(2113)			if ((::flixel::FlxG_obj::sound->music->_time > ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE(2114)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(2115)				::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
HXLINE(2116)				this->changeSection(null(),null());
            			}
            		}
HXLINE(2118)		::backend::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(2119)		this->strumLineUpdateY();
HXLINE(2120)		this->camPos->set_y(this->strumLine->y);
HXLINE(2121)		{
HXLINE(2121)			int _g13 = 0;
HXDLIN(2121)			while((_g13 < 8)){
HXLINE(2121)				_g13 = (_g13 + 1);
HXDLIN(2121)				int i4 = (_g13 - 1);
HXLINE(2122)				Dynamic( this->strumLineNotes->members->__get(i4)).StaticCast<  ::objects::StrumNote >()->set_y(this->strumLine->y);
HXLINE(2123)				Float _hx_tmp37;
HXDLIN(2123)				if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(2123)					_hx_tmp37 = ( (Float)(1) );
            				}
            				else {
HXLINE(2123)					_hx_tmp37 = ((Float)0.35);
            				}
HXDLIN(2123)				Dynamic( this->strumLineNotes->members->__get(i4)).StaticCast<  ::objects::StrumNote >()->set_alpha(_hx_tmp37);
            			}
            		}
HXLINE(2128)		 ::flixel::input::keyboard::FlxKeyList _this55 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2128)		bool holdingShift1 = _this55->keyManager->checkStatusUnsafe(16,_this55->status);
HXLINE(2129)		 ::flixel::input::keyboard::FlxKeyList _this56 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2129)		bool holdingLB = _this56->keyManager->checkStatusUnsafe(219,_this56->status);
HXLINE(2130)		 ::flixel::input::keyboard::FlxKeyList _this57 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2130)		bool holdingRB = _this57->keyManager->checkStatusUnsafe(221,_this57->status);
HXLINE(2131)		 ::flixel::input::keyboard::FlxKeyList _this58 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2131)		bool pressedLB = _this58->keyManager->checkStatusUnsafe(219,_this58->status);
HXLINE(2132)		 ::flixel::input::keyboard::FlxKeyList _this59 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2132)		bool pressedRB = _this59->keyManager->checkStatusUnsafe(221,_this59->status);
HXLINE(2134)		bool _hx_tmp38;
HXDLIN(2134)		bool _hx_tmp39;
HXDLIN(2134)		if (!(holdingShift1)) {
HXLINE(2134)			_hx_tmp39 = pressedLB;
            		}
            		else {
HXLINE(2134)			_hx_tmp39 = false;
            		}
HXDLIN(2134)		if (!(_hx_tmp39)) {
HXLINE(2134)			if (holdingShift1) {
HXLINE(2134)				_hx_tmp38 = holdingLB;
            			}
            			else {
HXLINE(2134)				_hx_tmp38 = false;
            			}
            		}
            		else {
HXLINE(2134)			_hx_tmp38 = true;
            		}
HXDLIN(2134)		if (_hx_tmp38) {
HXLINE(2135)			 ::states::editors::ChartingState _hx_tmp40 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2135)			_hx_tmp40->playbackSpeed = (_hx_tmp40->playbackSpeed - ((Float)0.01));
            		}
HXLINE(2136)		bool _hx_tmp41;
HXDLIN(2136)		bool _hx_tmp42;
HXDLIN(2136)		if (!(holdingShift1)) {
HXLINE(2136)			_hx_tmp42 = pressedRB;
            		}
            		else {
HXLINE(2136)			_hx_tmp42 = false;
            		}
HXDLIN(2136)		if (!(_hx_tmp42)) {
HXLINE(2136)			if (holdingShift1) {
HXLINE(2136)				_hx_tmp41 = holdingRB;
            			}
            			else {
HXLINE(2136)				_hx_tmp41 = false;
            			}
            		}
            		else {
HXLINE(2136)			_hx_tmp41 = true;
            		}
HXDLIN(2136)		if (_hx_tmp41) {
HXLINE(2137)			 ::states::editors::ChartingState _hx_tmp43 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2137)			_hx_tmp43->playbackSpeed = (_hx_tmp43->playbackSpeed + ((Float)0.01));
            		}
HXLINE(2138)		bool _hx_tmp44;
HXDLIN(2138)		 ::flixel::input::keyboard::FlxKeyList _this60 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2138)		if (_this60->keyManager->checkStatusUnsafe(18,_this60->status)) {
HXLINE(2138)			bool _hx_tmp45;
HXDLIN(2138)			bool _hx_tmp46;
HXDLIN(2138)			if (!(pressedLB)) {
HXLINE(2138)				_hx_tmp46 = pressedRB;
            			}
            			else {
HXLINE(2138)				_hx_tmp46 = true;
            			}
HXDLIN(2138)			if (!(_hx_tmp46)) {
HXLINE(2138)				_hx_tmp45 = holdingLB;
            			}
            			else {
HXLINE(2138)				_hx_tmp45 = true;
            			}
HXDLIN(2138)			if (!(_hx_tmp45)) {
HXLINE(2138)				_hx_tmp44 = holdingRB;
            			}
            			else {
HXLINE(2138)				_hx_tmp44 = true;
            			}
            		}
            		else {
HXLINE(2138)			_hx_tmp44 = false;
            		}
HXDLIN(2138)		if (_hx_tmp44) {
HXLINE(2139)			this->playbackSpeed = ( (Float)(1) );
            		}
HXLINE(2142)		if ((this->playbackSpeed <= ((Float)0.5))) {
HXLINE(2143)			this->playbackSpeed = ((Float)0.5);
            		}
HXLINE(2144)		if ((this->playbackSpeed >= 3)) {
HXLINE(2145)			this->playbackSpeed = ( (Float)(3) );
            		}
HXLINE(2147)		::flixel::FlxG_obj::sound->music->set_pitch(this->playbackSpeed);
HXLINE(2148)		this->vocals->set_pitch(this->playbackSpeed);
HXLINE(2149)		this->opponentVocals->set_pitch(this->playbackSpeed);
HXLINE(2152)		 ::flixel::text::FlxText _hx_tmp47 = this->bpmTxt;
HXLINE(2153)		::String _hx_tmp48 = (::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal((::backend::Conductor_obj::songPosition / ( (Float)(1000) )),2)) + HX_(" / ",31,71,18,00));
HXDLIN(2153)		::String _hx_tmp49 = ((_hx_tmp48 + ::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal((::flixel::FlxG_obj::sound->music->_length / ( (Float)(1000) )),2))) + HX_("\nSection: ",61,ca,0c,ad));
HXDLIN(2153)		::String _hx_tmp50 = ((_hx_tmp49 + ::states::editors::ChartingState_obj::curSec) + HX_("\n\nBeat: ",7c,6a,4b,a7));
HXDLIN(2153)		::String _hx_tmp51 = ((_hx_tmp50 + ::Std_obj::string(this->curDecBeat).substring(0,4)) + HX_("\n\nStep: ",d2,11,01,19));
HXLINE(2152)		_hx_tmp47->set_text(((((_hx_tmp51 + this->curStep) + HX_("\n\nBeat Snap: ",1a,1c,e1,32)) + ::states::editors::ChartingState_obj::quantization) + HX_("th",74,65,00,00)));
HXLINE(2159)		::Array< bool > playedSound = ::Array_obj< bool >::fromData( _hx_array_data_f85b0019_125,4);
HXLINE(2160)		this->curRenderedNotes->forEachAlive( ::Dynamic(new _hx_Closure_1(_gthis,playedSound,elapsed)),null());
HXLINE(2203)		bool _hx_tmp52;
HXDLIN(2203)		if (this->metronome->checked) {
HXLINE(2203)			_hx_tmp52 = (this->lastConductorPos != ::backend::Conductor_obj::songPosition);
            		}
            		else {
HXLINE(2203)			_hx_tmp52 = false;
            		}
HXDLIN(2203)		if (_hx_tmp52) {
HXLINE(2204)			Float metroInterval = (( (Float)(60) ) / this->metronomeStepper->value);
HXLINE(2205)			int metroStep = ::Math_obj::floor((((::backend::Conductor_obj::songPosition + this->metronomeOffsetStepper->value) / metroInterval) / ( (Float)(1000) )));
HXLINE(2206)			int lastMetroStep = ::Math_obj::floor((((this->lastConductorPos + this->metronomeOffsetStepper->value) / metroInterval) / ( (Float)(1000) )));
HXLINE(2207)			if ((metroStep != lastMetroStep)) {
HXLINE(2208)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp53 = ::flixel::FlxG_obj::sound;
HXDLIN(2208)				_hx_tmp53->play(::backend::Paths_obj::sound(HX_("Metronome_Tick",0a,a7,57,13),null()),null(),null(),null(),null(),null());
            			}
            		}
HXLINE(2212)		this->lastConductorPos = ::backend::Conductor_obj::songPosition;
HXLINE(2213)		this->super::update(elapsed);
            	}


void ChartingState_obj::pauseAndSetVocalsTime(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2217_pauseAndSetVocalsTime)
HXLINE(2218)		if (::hx::IsNotNull( this->vocals )) {
HXLINE(2220)			this->vocals->pause();
HXLINE(2221)			this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            		}
HXLINE(2224)		if (::hx::IsNotNull( this->opponentVocals )) {
HXLINE(2226)			this->opponentVocals->pause();
HXLINE(2227)			this->opponentVocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,pauseAndSetVocalsTime,(void))

void ChartingState_obj::updateZoom(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2231_updateZoom)
HXLINE(2232)		Float daZoom = this->zoomList->__get(this->curZoom);
HXLINE(2233)		::String zoomThing = (HX_("1 / ",a0,e5,7b,20) + daZoom);
HXLINE(2234)		if ((daZoom < 1)) {
HXLINE(2234)			zoomThing = (::Math_obj::round((( (Float)(1) ) / daZoom)) + HX_(" / 1",e0,99,4a,15));
            		}
HXLINE(2235)		this->zoomTxt->set_text((HX_("Zoom: ",99,74,4a,2f) + zoomThing));
HXLINE(2236)		this->reloadGridLayer();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateZoom,(void))

void ChartingState_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2240_destroy)
HXLINE(2241)		::objects::Note_obj::globalRgbShaders = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2242)		::backend::NoteTypesConfig_obj::clearNoteTypesData();
HXLINE(2243)		this->super::destroy();
            	}


void ChartingState_obj::reloadGridLayer(){
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2249_reloadGridLayer)
HXLINE(2250)		this->gridLayer->clear();
HXLINE(2251)		int _hx_tmp = this->columns;
HXDLIN(2251)		Float _hx_tmp1 = (( (Float)(this->getSectionBeats(null())) ) * ( (Float)(4) ));
HXDLIN(2251)		this->gridBG = ::flixel::addons::display::FlxGridOverlay_obj::create(1,1,_hx_tmp,::Std_obj::_hx_int((_hx_tmp1 * this->zoomList->__get(this->curZoom))),null(),null(),null());
HXLINE(2252)		this->gridBG->set_antialiasing(false);
HXLINE(2253)		{
HXLINE(2253)			 ::flixel::math::FlxBasePoint this1 = this->gridBG->scale;
HXDLIN(2253)			Float y = ( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) );
HXDLIN(2253)			this1->set_x(( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ));
HXDLIN(2253)			this1->set_y(y);
            		}
HXLINE(2254)		this->gridBG->updateHitbox();
HXLINE(2257)		bool _hx_tmp2;
HXDLIN(2257)		bool _hx_tmp3;
HXDLIN(2257)		if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("chart_waveformInst",24,cd,a4,d3),::hx::paccDynamic)) ))) {
HXLINE(2257)			_hx_tmp3 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("chart_waveformVoices",5f,f3,ae,5f),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(2257)			_hx_tmp3 = true;
            		}
HXDLIN(2257)		if (!(_hx_tmp3)) {
HXLINE(2257)			_hx_tmp2 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("chart_waveformOppVoices",f2,75,72,1f),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(2257)			_hx_tmp2 = true;
            		}
HXDLIN(2257)		if (_hx_tmp2) {
HXLINE(2258)			this->updateWaveform();
            		}
HXLINE(2262)		int leHeight = ::Std_obj::_hx_int(this->gridBG->get_height());
HXLINE(2263)		bool foundNextSec = false;
HXLINE(2264)		Float _hx_tmp4 = this->sectionStartTime(1);
HXDLIN(2264)		if ((_hx_tmp4 <= ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE(2266)			int _hx_tmp5 = this->columns;
HXDLIN(2266)			Float _hx_tmp6 = (( (Float)(this->getSectionBeats((::states::editors::ChartingState_obj::curSec + 1))) ) * ( (Float)(4) ));
HXDLIN(2266)			this->nextGridBG = ::flixel::addons::display::FlxGridOverlay_obj::create(1,1,_hx_tmp5,::Std_obj::_hx_int((_hx_tmp6 * this->zoomList->__get(this->curZoom))),null(),null(),null());
HXLINE(2267)			this->nextGridBG->set_antialiasing(false);
HXLINE(2268)			{
HXLINE(2268)				 ::flixel::math::FlxBasePoint this2 = this->nextGridBG->scale;
HXDLIN(2268)				Float y1 = ( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) );
HXDLIN(2268)				this2->set_x(( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ));
HXDLIN(2268)				this2->set_y(y1);
            			}
HXLINE(2269)			this->nextGridBG->updateHitbox();
HXLINE(2270)			Float leHeight1 = this->gridBG->get_height();
HXDLIN(2270)			leHeight = ::Std_obj::_hx_int((leHeight1 + this->nextGridBG->get_height()));
HXLINE(2271)			foundNextSec = true;
            		}
            		else {
HXLINE(2273)			this->nextGridBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,0,null(),null());
            		}
HXLINE(2274)		 ::flixel::FlxSprite _hx_tmp7 = this->nextGridBG;
HXDLIN(2274)		_hx_tmp7->set_y(this->gridBG->get_height());
HXLINE(2276)		this->gridLayer->add(this->nextGridBG).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2277)		this->gridLayer->add(this->gridBG).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2279)		if (foundNextSec) {
HXLINE(2281)			 ::flixel::FlxSprite gridBlack =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,this->gridBG->get_height(),null())->makeGraphic(1,1,-16777216,null(),null());
HXLINE(2282)			int _hx_tmp8 = ::Std_obj::_hx_int(( (Float)((::states::editors::ChartingState_obj::GRID_SIZE * 9)) ));
HXDLIN(2282)			gridBlack->setGraphicSize(_hx_tmp8,::Std_obj::_hx_int(this->nextGridBG->get_height()));
HXLINE(2283)			gridBlack->updateHitbox();
HXLINE(2284)			gridBlack->set_antialiasing(false);
HXLINE(2285)			gridBlack->set_alpha(((Float)0.4));
HXLINE(2286)			this->gridLayer->add(gridBlack).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE(2289)		Float gridBlackLine = this->gridBG->x;
HXDLIN(2289)		Float gridBlackLine1 = (gridBlackLine + this->gridBG->get_width());
HXDLIN(2289)		 ::flixel::FlxSprite gridBlackLine2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(gridBlackLine1 - ( (Float)((::states::editors::ChartingState_obj::GRID_SIZE * 4)) )),null(),null())->makeGraphic(1,1,-16777216,null(),null());
HXLINE(2290)		gridBlackLine2->setGraphicSize(2,leHeight);
HXLINE(2291)		gridBlackLine2->updateHitbox();
HXLINE(2292)		gridBlackLine2->set_antialiasing(false);
HXLINE(2293)		this->gridLayer->add(gridBlackLine2).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2295)		{
HXLINE(2295)			int _g = 1;
HXDLIN(2295)			int _g1 = ::Std_obj::_hx_int(( (Float)(this->getSectionBeats(null())) ));
HXDLIN(2295)			while((_g < _g1)){
HXLINE(2295)				_g = (_g + 1);
HXDLIN(2295)				int i = (_g - 1);
HXLINE(2296)				 ::flixel::FlxSprite beatsep =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,this->gridBG->x,((( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ) * (( (Float)(4) ) * this->zoomList->__get(this->curZoom))) * ( (Float)(i) )),null())->makeGraphic(1,1,(int)1157562368,null(),null());
HXLINE(2297)				{
HXLINE(2297)					 ::flixel::math::FlxBasePoint this3 = beatsep->scale;
HXDLIN(2297)					this3->set_x(this->gridBG->get_width());
            				}
HXLINE(2298)				beatsep->updateHitbox();
HXLINE(2299)				if (::states::editors::ChartingState_obj::vortex) {
HXLINE(2299)					this->gridLayer->add(beatsep).StaticCast<  ::flixel::FlxSprite >();
            				}
            			}
            		}
HXLINE(2302)		 ::flixel::FlxSprite gridBlackLine3 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->gridBG->x + ::states::editors::ChartingState_obj::GRID_SIZE),null(),null())->makeGraphic(1,1,-16777216,null(),null());
HXLINE(2303)		gridBlackLine3->setGraphicSize(2,leHeight);
HXLINE(2304)		gridBlackLine3->updateHitbox();
HXLINE(2305)		gridBlackLine3->set_antialiasing(false);
HXLINE(2306)		this->gridLayer->add(gridBlackLine3).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2307)		this->updateGrid();
HXLINE(2309)		this->lastSecBeats = ( (Float)(this->getSectionBeats(null())) );
HXLINE(2310)		Float _hx_tmp9 = this->sectionStartTime(1);
HXDLIN(2310)		if ((_hx_tmp9 > ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE(2310)			this->lastSecBeatsNext = ( (Float)(0) );
            		}
            		else {
HXLINE(2311)			this->getSectionBeats((::states::editors::ChartingState_obj::curSec + 1));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,reloadGridLayer,(void))

void ChartingState_obj::strumLineUpdateY(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2316_strumLineUpdateY)
HXDLIN(2316)		 ::flixel::FlxSprite _hx_tmp = this->strumLine;
HXDLIN(2316)		Float _hx_tmp1 = ::backend::Conductor_obj::songPosition;
HXDLIN(2316)		Float _hx_tmp2 = (_hx_tmp1 - this->sectionStartTime(null()));
HXDLIN(2316)		Float _hx_tmp3 = this->getYfromStrum((_hx_tmp2 / ::hx::Mod(this->zoomList->__get(this->curZoom),(::backend::Conductor_obj::stepCrochet * ( (Float)(16) )))),null());
HXDLIN(2316)		_hx_tmp->set_y((_hx_tmp3 / (( (Float)(this->getSectionBeats(null())) ) / ( (Float)(4) ))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,strumLineUpdateY,(void))

void ChartingState_obj::updateWaveform(){
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2323_updateWaveform)
HXLINE(2325)		if (this->waveformPrinted) {
HXLINE(2326)			int width = ::Std_obj::_hx_int(( (Float)((::states::editors::ChartingState_obj::GRID_SIZE * 8)) ));
HXLINE(2327)			int height = ::Std_obj::_hx_int(this->gridBG->get_height());
HXLINE(2328)			bool _hx_tmp;
HXDLIN(2328)			if ((this->lastWaveformHeight != height)) {
HXLINE(2328)				_hx_tmp = ::hx::IsNotNull( this->waveformSprite->get_pixels() );
            			}
            			else {
HXLINE(2328)				_hx_tmp = false;
            			}
HXDLIN(2328)			if (_hx_tmp) {
HXLINE(2330)				this->waveformSprite->get_pixels()->dispose();
HXLINE(2331)				this->waveformSprite->get_pixels()->disposeImage();
HXLINE(2332)				this->waveformSprite->makeGraphic(width,height,16777215,null(),null());
HXLINE(2333)				this->lastWaveformHeight = height;
            			}
HXLINE(2335)			 ::openfl::display::BitmapData _hx_tmp1 = this->waveformSprite->get_pixels();
HXDLIN(2335)			_hx_tmp1->fillRect( ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,width,height),16777215);
            		}
HXLINE(2337)		this->waveformPrinted = false;
HXLINE(2339)		bool _hx_tmp2;
HXDLIN(2339)		bool _hx_tmp3;
HXDLIN(2339)		if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("chart_waveformInst",24,cd,a4,d3),::hx::paccDynamic)) ))) {
HXLINE(2339)			_hx_tmp3 = !(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("chart_waveformVoices",5f,f3,ae,5f),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE(2339)			_hx_tmp3 = false;
            		}
HXDLIN(2339)		if (_hx_tmp3) {
HXLINE(2339)			_hx_tmp2 = !(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("chart_waveformOppVoices",f2,75,72,1f),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE(2339)			_hx_tmp2 = false;
            		}
HXDLIN(2339)		if (_hx_tmp2) {
HXLINE(2341)			return;
            		}
HXLINE(2344)		this->wavData->__get(0).StaticCast< ::Array< ::Dynamic> >()[0] = ::Array_obj< Float >::__new(0);
HXLINE(2345)		this->wavData->__get(0).StaticCast< ::Array< ::Dynamic> >()[1] = ::Array_obj< Float >::__new(0);
HXLINE(2346)		this->wavData->__get(1).StaticCast< ::Array< ::Dynamic> >()[0] = ::Array_obj< Float >::__new(0);
HXLINE(2347)		this->wavData->__get(1).StaticCast< ::Array< ::Dynamic> >()[1] = ::Array_obj< Float >::__new(0);
HXLINE(2349)		int steps = ::Math_obj::round((( (Float)(this->getSectionBeats(null())) ) * ( (Float)(4) )));
HXLINE(2350)		Float st = this->sectionStartTime(null());
HXLINE(2351)		Float et = (st + (::backend::Conductor_obj::stepCrochet * ( (Float)(steps) )));
HXLINE(2353)		 ::flixel::sound::FlxSound sound = ::flixel::FlxG_obj::sound->music;
HXLINE(2354)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("chart_waveformVoices",5f,f3,ae,5f),::hx::paccDynamic)) )) {
HXLINE(2355)			sound = this->vocals;
            		}
            		else {
HXLINE(2356)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("chart_waveformOppVoices",f2,75,72,1f),::hx::paccDynamic)) )) {
HXLINE(2357)				sound = this->opponentVocals;
            			}
            		}
HXLINE(2359)		bool _hx_tmp4;
HXDLIN(2359)		bool _hx_tmp5;
HXDLIN(2359)		if (::hx::IsNotNull( sound )) {
HXLINE(2359)			_hx_tmp5 = ::hx::IsNotNull( sound->_sound );
            		}
            		else {
HXLINE(2359)			_hx_tmp5 = false;
            		}
HXDLIN(2359)		if (_hx_tmp5) {
HXLINE(2359)			_hx_tmp4 = ::hx::IsNotNull( sound->_sound->_hx___buffer );
            		}
            		else {
HXLINE(2359)			_hx_tmp4 = false;
            		}
HXDLIN(2359)		if (_hx_tmp4) {
HXLINE(2360)			 ::haxe::io::Bytes bytes = sound->_sound->_hx___buffer->data->buffer;
HXLINE(2363)			 ::lime::media::AudioBuffer sound1 = sound->_sound->_hx___buffer;
HXLINE(2368)			::Array< ::Dynamic> _hx_tmp6 = this->wavData;
HXLINE(2362)			this->wavData = this->waveformData(sound1,bytes,st,et,1,_hx_tmp6,::Std_obj::_hx_int(this->gridBG->get_height()));
            		}
HXLINE(2374)		int gSize = ::Std_obj::_hx_int(( (Float)((::states::editors::ChartingState_obj::GRID_SIZE * 8)) ));
HXLINE(2375)		int hSize = ::Std_obj::_hx_int((( (Float)(gSize) ) / ( (Float)(2) )));
HXLINE(2376)		Float size = ( (Float)(1) );
HXLINE(2378)		int leftLength;
HXDLIN(2378)		if ((this->wavData->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->length > this->wavData->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->length)) {
HXLINE(2378)			leftLength = this->wavData->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->length;
            		}
            		else {
HXLINE(2378)			leftLength = this->wavData->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->length;
            		}
HXLINE(2379)		int rightLength;
HXDLIN(2379)		if ((this->wavData->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->length > this->wavData->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->length)) {
HXLINE(2379)			rightLength = this->wavData->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->length;
            		}
            		else {
HXLINE(2379)			rightLength = this->wavData->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->length;
            		}
HXLINE(2381)		int length;
HXDLIN(2381)		if ((leftLength > rightLength)) {
HXLINE(2381)			length = leftLength;
            		}
            		else {
HXLINE(2381)			length = rightLength;
            		}
HXLINE(2383)		{
HXLINE(2383)			int _g = 0;
HXDLIN(2383)			int _g1 = length;
HXDLIN(2383)			while((_g < _g1)){
HXLINE(2383)				_g = (_g + 1);
HXDLIN(2383)				int index = (_g - 1);
HXLINE(2385)				Float Value;
HXDLIN(2385)				bool Value1;
HXDLIN(2385)				if ((index < this->wavData->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->length)) {
HXLINE(2385)					Value1 = (index >= 0);
            				}
            				else {
HXLINE(2385)					Value1 = false;
            				}
HXDLIN(2385)				if (Value1) {
HXLINE(2385)					Value = this->wavData->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->__get(index);
            				}
            				else {
HXLINE(2385)					Value = ( (Float)(0) );
            				}
HXDLIN(2385)				Float Value2 = (Value * (( (Float)(gSize) ) / ((Float)1.12)));
HXDLIN(2385)				 ::Dynamic Min = -(hSize);
HXDLIN(2385)				Float lowerBound;
HXDLIN(2385)				bool lowerBound1;
HXDLIN(2385)				if (::hx::IsNotNull( Min )) {
HXLINE(2385)					lowerBound1 = ::hx::IsLess( Value2,Min );
            				}
            				else {
HXLINE(2385)					lowerBound1 = false;
            				}
HXDLIN(2385)				if (lowerBound1) {
HXLINE(2385)					lowerBound = ( (Float)(Min) );
            				}
            				else {
HXLINE(2385)					lowerBound = Value2;
            				}
HXDLIN(2385)				Float lmin;
HXDLIN(2385)				bool lmin1;
HXDLIN(2385)				if (::hx::IsNotNull( hSize )) {
HXLINE(2385)					lmin1 = (lowerBound > hSize);
            				}
            				else {
HXLINE(2385)					lmin1 = false;
            				}
HXDLIN(2385)				if (lmin1) {
HXLINE(2385)					lmin = ( (Float)(hSize) );
            				}
            				else {
HXLINE(2385)					lmin = lowerBound;
            				}
HXDLIN(2385)				Float lmin2 = (lmin / ( (Float)(2) ));
HXLINE(2386)				Float Value3;
HXDLIN(2386)				bool Value4;
HXDLIN(2386)				if ((index < this->wavData->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->length)) {
HXLINE(2386)					Value4 = (index >= 0);
            				}
            				else {
HXLINE(2386)					Value4 = false;
            				}
HXDLIN(2386)				if (Value4) {
HXLINE(2386)					Value3 = this->wavData->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->__get(index);
            				}
            				else {
HXLINE(2386)					Value3 = ( (Float)(0) );
            				}
HXDLIN(2386)				Float Value5 = (Value3 * (( (Float)(gSize) ) / ((Float)1.12)));
HXDLIN(2386)				 ::Dynamic Min1 = -(hSize);
HXDLIN(2386)				Float lowerBound2;
HXDLIN(2386)				bool lowerBound3;
HXDLIN(2386)				if (::hx::IsNotNull( Min1 )) {
HXLINE(2386)					lowerBound3 = ::hx::IsLess( Value5,Min1 );
            				}
            				else {
HXLINE(2386)					lowerBound3 = false;
            				}
HXDLIN(2386)				if (lowerBound3) {
HXLINE(2386)					lowerBound2 = ( (Float)(Min1) );
            				}
            				else {
HXLINE(2386)					lowerBound2 = Value5;
            				}
HXDLIN(2386)				Float lmax;
HXDLIN(2386)				bool lmax1;
HXDLIN(2386)				if (::hx::IsNotNull( hSize )) {
HXLINE(2386)					lmax1 = (lowerBound2 > hSize);
            				}
            				else {
HXLINE(2386)					lmax1 = false;
            				}
HXDLIN(2386)				if (lmax1) {
HXLINE(2386)					lmax = ( (Float)(hSize) );
            				}
            				else {
HXLINE(2386)					lmax = lowerBound2;
            				}
HXDLIN(2386)				Float lmax2 = (lmax / ( (Float)(2) ));
HXLINE(2388)				Float Value6;
HXDLIN(2388)				bool Value7;
HXDLIN(2388)				if ((index < this->wavData->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->length)) {
HXLINE(2388)					Value7 = (index >= 0);
            				}
            				else {
HXLINE(2388)					Value7 = false;
            				}
HXDLIN(2388)				if (Value7) {
HXLINE(2388)					Value6 = this->wavData->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->__get(index);
            				}
            				else {
HXLINE(2388)					Value6 = ( (Float)(0) );
            				}
HXDLIN(2388)				Float Value8 = (Value6 * (( (Float)(gSize) ) / ((Float)1.12)));
HXDLIN(2388)				 ::Dynamic Min2 = -(hSize);
HXDLIN(2388)				Float lowerBound4;
HXDLIN(2388)				bool lowerBound5;
HXDLIN(2388)				if (::hx::IsNotNull( Min2 )) {
HXLINE(2388)					lowerBound5 = ::hx::IsLess( Value8,Min2 );
            				}
            				else {
HXLINE(2388)					lowerBound5 = false;
            				}
HXDLIN(2388)				if (lowerBound5) {
HXLINE(2388)					lowerBound4 = ( (Float)(Min2) );
            				}
            				else {
HXLINE(2388)					lowerBound4 = Value8;
            				}
HXDLIN(2388)				Float rmin;
HXDLIN(2388)				bool rmin1;
HXDLIN(2388)				if (::hx::IsNotNull( hSize )) {
HXLINE(2388)					rmin1 = (lowerBound4 > hSize);
            				}
            				else {
HXLINE(2388)					rmin1 = false;
            				}
HXDLIN(2388)				if (rmin1) {
HXLINE(2388)					rmin = ( (Float)(hSize) );
            				}
            				else {
HXLINE(2388)					rmin = lowerBound4;
            				}
HXDLIN(2388)				Float rmin2 = (rmin / ( (Float)(2) ));
HXLINE(2389)				Float Value9;
HXDLIN(2389)				bool Value10;
HXDLIN(2389)				if ((index < this->wavData->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->length)) {
HXLINE(2389)					Value10 = (index >= 0);
            				}
            				else {
HXLINE(2389)					Value10 = false;
            				}
HXDLIN(2389)				if (Value10) {
HXLINE(2389)					Value9 = this->wavData->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->__get(index);
            				}
            				else {
HXLINE(2389)					Value9 = ( (Float)(0) );
            				}
HXDLIN(2389)				Float Value11 = (Value9 * (( (Float)(gSize) ) / ((Float)1.12)));
HXDLIN(2389)				 ::Dynamic Min3 = -(hSize);
HXDLIN(2389)				Float lowerBound6;
HXDLIN(2389)				bool lowerBound7;
HXDLIN(2389)				if (::hx::IsNotNull( Min3 )) {
HXLINE(2389)					lowerBound7 = ::hx::IsLess( Value11,Min3 );
            				}
            				else {
HXLINE(2389)					lowerBound7 = false;
            				}
HXDLIN(2389)				if (lowerBound7) {
HXLINE(2389)					lowerBound6 = ( (Float)(Min3) );
            				}
            				else {
HXLINE(2389)					lowerBound6 = Value11;
            				}
HXDLIN(2389)				Float rmax;
HXDLIN(2389)				bool rmax1;
HXDLIN(2389)				if (::hx::IsNotNull( hSize )) {
HXLINE(2389)					rmax1 = (lowerBound6 > hSize);
            				}
            				else {
HXLINE(2389)					rmax1 = false;
            				}
HXDLIN(2389)				if (rmax1) {
HXLINE(2389)					rmax = ( (Float)(hSize) );
            				}
            				else {
HXLINE(2389)					rmax = lowerBound6;
            				}
HXDLIN(2389)				Float rmax2 = (rmax / ( (Float)(2) ));
HXLINE(2391)				 ::openfl::display::BitmapData _hx_tmp7 = this->waveformSprite->get_pixels();
HXDLIN(2391)				_hx_tmp7->fillRect( ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(( (Float)(hSize) ) - (lmin2 + rmin2)),(( (Float)(index) ) * size),((lmin2 + rmin2) + (lmax2 + rmax2)),size),-16776961);
            			}
            		}
HXLINE(2394)		this->waveformPrinted = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateWaveform,(void))

::Array< ::Dynamic> ChartingState_obj::waveformData( ::lime::media::AudioBuffer buffer, ::haxe::io::Bytes bytes,Float time,Float endTime,::hx::Null< Float >  __o_multiply,::Array< ::Dynamic> array, ::Dynamic steps){
            		Float multiply = __o_multiply.Default(1);
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2399_waveformData)
HXLINE(2401)		bool _hx_tmp;
HXDLIN(2401)		if (::hx::IsNotNull( buffer )) {
HXLINE(2401)			_hx_tmp = ::hx::IsNull( buffer->data );
            		}
            		else {
HXLINE(2401)			_hx_tmp = true;
            		}
HXDLIN(2401)		if (_hx_tmp) {
HXLINE(2401)			return ::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_137,1))->init(1,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_138,1)))->init(1,::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_139,1))->init(1,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_140,1)));
            		}
HXLINE(2403)		Float khz = (( (Float)(buffer->sampleRate) ) / ( (Float)(1000) ));
HXLINE(2404)		int channels = buffer->channels;
HXLINE(2406)		int index = ::Std_obj::_hx_int((time * khz));
HXLINE(2408)		Float samples = ((endTime - time) * khz);
HXLINE(2410)		if (::hx::IsNull( steps )) {
HXLINE(2410)			steps = 1280;
            		}
HXLINE(2412)		Float samplesPerRow = (samples / ( (Float)(steps) ));
HXLINE(2413)		int samplesPerRowI = ::Std_obj::_hx_int(samplesPerRow);
HXLINE(2415)		int gotIndex = 0;
HXLINE(2417)		Float lmin = ( (Float)(0) );
HXLINE(2418)		Float lmax = ( (Float)(0) );
HXLINE(2420)		Float rmin = ( (Float)(0) );
HXLINE(2421)		Float rmax = ( (Float)(0) );
HXLINE(2423)		Float rows = ( (Float)(0) );
HXLINE(2425)		bool simpleSample = true;
HXLINE(2426)		bool v1 = false;
HXLINE(2428)		if (::hx::IsNull( array )) {
HXLINE(2428)			array = ::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_141,1))->init(1,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_142,1)))->init(1,::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_143,1))->init(1,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_144,1)));
            		}
HXLINE(2430)		while((index < (bytes->length - 1))){
HXLINE(2431)			if ((index >= 0)) {
HXLINE(2432)				int pos = ((index * channels) * 2);
HXDLIN(2432)				int byte = (( (int)(bytes->b->__get(pos)) ) | (( (int)(bytes->b->__get((pos + 1))) ) << 8));
HXLINE(2434)				if ((byte > ((Float)32767.5))) {
HXLINE(2434)					byte = (byte - 65535);
            				}
HXLINE(2436)				Float sample = (( (Float)(byte) ) / ( (Float)(65535) ));
HXLINE(2438)				if ((sample > 0)) {
HXLINE(2439)					if ((sample > lmax)) {
HXLINE(2439)						lmax = sample;
            					}
            					else {
HXLINE(2440)						if ((sample < 0)) {
HXLINE(2441)							if ((sample < lmin)) {
HXLINE(2441)								lmin = sample;
            							}
            						}
            					}
            				}
HXLINE(2443)				if ((channels >= 2)) {
HXLINE(2444)					int pos1 = (((index * channels) * 2) + 2);
HXDLIN(2444)					byte = (( (int)(bytes->b->__get(pos1)) ) | (( (int)(bytes->b->__get((pos1 + 1))) ) << 8));
HXLINE(2446)					if ((byte > ((Float)32767.5))) {
HXLINE(2446)						byte = (byte - 65535);
            					}
HXLINE(2448)					sample = (( (Float)(byte) ) / ( (Float)(65535) ));
HXLINE(2450)					if ((sample > 0)) {
HXLINE(2451)						if ((sample > rmax)) {
HXLINE(2451)							rmax = sample;
            						}
            					}
            					else {
HXLINE(2452)						if ((sample < 0)) {
HXLINE(2453)							if ((sample < rmin)) {
HXLINE(2453)								rmin = sample;
            							}
            						}
            					}
            				}
            			}
HXLINE(2458)			if ((samplesPerRowI > 0)) {
HXLINE(2458)				v1 = (::hx::Mod(index,samplesPerRowI) == 0);
            			}
            			else {
HXLINE(2458)				v1 = false;
            			}
HXLINE(2459)			while(true){
HXLINE(2459)				bool _hx_tmp1;
HXDLIN(2459)				if (simpleSample) {
HXLINE(2459)					_hx_tmp1 = v1;
            				}
            				else {
HXLINE(2459)					_hx_tmp1 = (rows >= samplesPerRow);
            				}
HXDLIN(2459)				if (!(_hx_tmp1)) {
HXLINE(2459)					goto _hx_goto_135;
            				}
HXLINE(2460)				v1 = false;
HXLINE(2461)				rows = (rows - samplesPerRow);
HXLINE(2463)				gotIndex = (gotIndex + 1);
HXLINE(2465)				Float lRMin = (::Math_obj::abs(lmin) * multiply);
HXLINE(2466)				Float lRMax = (lmax * multiply);
HXLINE(2468)				Float rRMin = (::Math_obj::abs(rmin) * multiply);
HXLINE(2469)				Float rRMax = (rmax * multiply);
HXLINE(2471)				if ((gotIndex > array->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->length)) {
HXLINE(2471)					array->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->push(lRMin);
            				}
            				else {
HXLINE(2472)					array->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()[(gotIndex - 1)] = (array->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->__get((gotIndex - 1)) + lRMin);
            				}
HXLINE(2474)				if ((gotIndex > array->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->length)) {
HXLINE(2474)					array->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->push(lRMax);
            				}
            				else {
HXLINE(2475)					array->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()[(gotIndex - 1)] = (array->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->__get((gotIndex - 1)) + lRMax);
            				}
HXLINE(2477)				if ((channels >= 2)) {
HXLINE(2479)					if ((gotIndex > array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->length)) {
HXLINE(2479)						array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->push(rRMin);
            					}
            					else {
HXLINE(2480)						array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()[(gotIndex - 1)] = (array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->__get((gotIndex - 1)) + rRMin);
            					}
HXLINE(2482)					if ((gotIndex > array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->length)) {
HXLINE(2482)						array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->push(rRMax);
            					}
            					else {
HXLINE(2483)						array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()[(gotIndex - 1)] = (array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->__get((gotIndex - 1)) + rRMax);
            					}
            				}
            				else {
HXLINE(2487)					if ((gotIndex > array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->length)) {
HXLINE(2487)						array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->push(lRMin);
            					}
            					else {
HXLINE(2488)						array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()[(gotIndex - 1)] = (array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->__get((gotIndex - 1)) + lRMin);
            					}
HXLINE(2490)					if ((gotIndex > array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->length)) {
HXLINE(2490)						array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->push(lRMax);
            					}
            					else {
HXLINE(2491)						array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()[(gotIndex - 1)] = (array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->__get((gotIndex - 1)) + lRMax);
            					}
            				}
HXLINE(2494)				lmin = ( (Float)(0) );
HXLINE(2495)				lmax = ( (Float)(0) );
HXLINE(2497)				rmin = ( (Float)(0) );
HXLINE(2498)				rmax = ( (Float)(0) );
            			}
            			_hx_goto_135:;
HXLINE(2501)			index = (index + 1);
HXLINE(2502)			rows = (rows + 1);
HXLINE(2503)			if (::hx::IsGreater( gotIndex,steps )) {
HXLINE(2503)				goto _hx_goto_134;
            			}
            		}
            		_hx_goto_134:;
HXLINE(2506)		return array;
            	}


HX_DEFINE_DYNAMIC_FUNC7(ChartingState_obj,waveformData,return )

void ChartingState_obj::changeNoteSustain(Float value){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2513_changeNoteSustain)
HXLINE(2514)		if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(2516)			if (::hx::IsNotNull( this->curSelectedNote->__get(2) )) {
HXLINE(2518)				::cpp::VirtualArray base = this->curSelectedNote;
HXDLIN(2518)				int _hx_tmp = 2;
HXDLIN(2518)				base->set(_hx_tmp,(base->__get(_hx_tmp) + ::Math_obj::ceil(value)));
HXLINE(2519)				this->curSelectedNote->set(2,::Math_obj::max(( (Float)(this->curSelectedNote->__get(2)) ),( (Float)(0) )));
            			}
            		}
HXLINE(2523)		this->updateNoteUI();
HXLINE(2524)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,changeNoteSustain,(void))

int ChartingState_obj::recalculateSteps(::hx::Null< Float >  __o_add){
            		Float add = __o_add.Default(0);
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2528_recalculateSteps)
HXLINE(2529)		 ::Dynamic lastChange =  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("stepTime",79,75,25,a0),0)
            			->setFixed(1,HX_("bpm",df,be,4a,00),( (Float)(0) ))
            			->setFixed(2,HX_("songTime",82,2a,d5,3a),( (Float)(0) )));
HXLINE(2534)		{
HXLINE(2534)			int _g = 0;
HXDLIN(2534)			int _g1 = ::backend::Conductor_obj::bpmChangeMap->length;
HXDLIN(2534)			while((_g < _g1)){
HXLINE(2534)				_g = (_g + 1);
HXDLIN(2534)				int i = (_g - 1);
HXLINE(2536)				if (::hx::IsGreater( ::flixel::FlxG_obj::sound->music->_time,::backend::Conductor_obj::bpmChangeMap->__get(i)->__Field(HX_("songTime",82,2a,d5,3a),::hx::paccDynamic) )) {
HXLINE(2537)					lastChange = ::backend::Conductor_obj::bpmChangeMap->__get(i);
            				}
            			}
            		}
HXLINE(2540)		this->curStep = ( (int)((lastChange->__Field(HX_("stepTime",79,75,25,a0),::hx::paccDynamic) + ::Math_obj::floor((((::flixel::FlxG_obj::sound->music->_time - ( (Float)(lastChange->__Field(HX_("songTime",82,2a,d5,3a),::hx::paccDynamic)) )) + add) / ::backend::Conductor_obj::stepCrochet)))) );
HXLINE(2541)		this->updateBeat();
HXLINE(2543)		return this->curStep;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,recalculateSteps,return )

void ChartingState_obj::resetSection(::hx::Null< bool >  __o_songBeginning){
            		bool songBeginning = __o_songBeginning.Default(false);
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2547_resetSection)
HXLINE(2548)		this->updateGrid();
HXLINE(2550)		::flixel::FlxG_obj::sound->music->pause();
HXLINE(2552)		 ::flixel::sound::FlxSound _hx_tmp = ::flixel::FlxG_obj::sound->music;
HXDLIN(2552)		_hx_tmp->set_time(this->sectionStartTime(null()));
HXLINE(2554)		if (songBeginning) {
HXLINE(2556)			::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
HXLINE(2557)			::states::editors::ChartingState_obj::curSec = 0;
            		}
HXLINE(2560)		this->pauseAndSetVocalsTime();
HXLINE(2561)		this->updateCurStep();
HXLINE(2563)		this->updateGrid();
HXLINE(2564)		this->updateSectionUI();
HXLINE(2565)		this->updateWaveform();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,resetSection,(void))

void ChartingState_obj::changeSection(::hx::Null< int >  __o_sec, ::Dynamic __o_updateMusic){
            		int sec = __o_sec.Default(0);
            		 ::Dynamic updateMusic = __o_updateMusic;
            		if (::hx::IsNull(__o_updateMusic)) updateMusic = true;
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2569_changeSection)
HXLINE(2570)		bool waveformChanged = false;
HXLINE(2571)		if (::hx::IsNotNull(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(sec) )) {
HXLINE(2573)			::states::editors::ChartingState_obj::curSec = sec;
HXLINE(2574)			if (( (bool)(updateMusic) )) {
HXLINE(2576)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(2578)				 ::flixel::sound::FlxSound _hx_tmp = ::flixel::FlxG_obj::sound->music;
HXDLIN(2578)				_hx_tmp->set_time(this->sectionStartTime(null()));
HXLINE(2579)				this->pauseAndSetVocalsTime();
HXLINE(2580)				this->updateCurStep();
            			}
HXLINE(2583)			Float blah1 = ( (Float)(this->getSectionBeats(null())) );
HXLINE(2584)			Float blah2 = ( (Float)(this->getSectionBeats((::states::editors::ChartingState_obj::curSec + 1))) );
HXLINE(2585)			Float _hx_tmp1 = this->sectionStartTime(1);
HXDLIN(2585)			if ((_hx_tmp1 > ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE(2585)				blah2 = ( (Float)(0) );
            			}
HXLINE(2587)			bool _hx_tmp2;
HXDLIN(2587)			if ((blah1 == this->lastSecBeats)) {
HXLINE(2587)				_hx_tmp2 = (blah2 != this->lastSecBeatsNext);
            			}
            			else {
HXLINE(2587)				_hx_tmp2 = true;
            			}
HXDLIN(2587)			if (_hx_tmp2) {
HXLINE(2589)				this->reloadGridLayer();
HXLINE(2590)				waveformChanged = true;
            			}
            			else {
HXLINE(2594)				this->updateGrid();
            			}
HXLINE(2596)			this->updateSectionUI();
            		}
            		else {
HXLINE(2600)			this->changeSection(null(),null());
            		}
HXLINE(2602)		::backend::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(2603)		if (!(waveformChanged)) {
HXLINE(2603)			this->updateWaveform();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,changeSection,(void))

void ChartingState_obj::updateSectionUI(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2607_updateSectionUI)
HXLINE(2608)		 ::Dynamic sec =  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec);
HXLINE(2610)		 ::flixel::addons::ui::FlxUINumericStepper _hx_tmp = this->stepperBeats;
HXDLIN(2610)		_hx_tmp->set_value(( (Float)(this->getSectionBeats(null())) ));
HXLINE(2611)		this->check_mustHitSection->set_checked(( (bool)(sec->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE(2612)		this->check_gfSection->set_checked(( (bool)(sec->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic)) ));
HXLINE(2613)		this->check_altAnim->set_checked(( (bool)(sec->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) ));
HXLINE(2614)		this->check_changeBPM->set_checked(( (bool)(sec->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) ));
HXLINE(2615)		this->stepperSectionBPM->set_value(( (Float)(sec->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE(2617)		this->updateHeads();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateSectionUI,(void))

void ChartingState_obj::updateJsonData(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2629_updateJsonData)
HXDLIN(2629)		int _g = 1;
HXDLIN(2629)		while((_g < 3)){
HXDLIN(2629)			_g = (_g + 1);
HXDLIN(2629)			int i = (_g - 1);
HXLINE(2631)			 ::Dynamic data = this->loadCharacterFile(( (::String)(::Reflect_obj::field(this->_song,(HX_("player",61,eb,b8,37) + i))) ));
HXLINE(2632)			 ::Dynamic _hx_tmp;
HXDLIN(2632)			if (!(this->characterFailed)) {
HXLINE(2632)				_hx_tmp =  ::Dynamic(data->__Field(HX_("healthicon",15,8e,6f,17),::hx::paccDynamic));
            			}
            			else {
HXLINE(2632)				_hx_tmp = HX_("face",9d,b4,b5,43);
            			}
HXDLIN(2632)			::Reflect_obj::setField(this->characterData,(HX_("iconP",b7,a2,d7,b6) + i),_hx_tmp);
HXLINE(2633)			 ::Dynamic _hx_tmp1;
HXDLIN(2633)			if (::hx::IsNotNull( data->__Field(HX_("vocals_file",3d,c5,2d,83),::hx::paccDynamic) )) {
HXLINE(2633)				_hx_tmp1 =  ::Dynamic(data->__Field(HX_("vocals_file",3d,c5,2d,83),::hx::paccDynamic));
            			}
            			else {
HXLINE(2633)				_hx_tmp1 = HX_("",00,00,00,00);
            			}
HXDLIN(2633)			::Reflect_obj::setField(this->characterData,(HX_("vocalsP",32,42,9d,cd) + i),_hx_tmp1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateJsonData,(void))

void ChartingState_obj::updateHeads(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2639_updateHeads)
HXDLIN(2639)		if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(2641)			this->leftIcon->changeIcon(( (::String)(this->characterData->__Field(HX_("iconP1",9a,bd,d6,45),::hx::paccDynamic)) ),null());
HXLINE(2642)			this->rightIcon->changeIcon(( (::String)(this->characterData->__Field(HX_("iconP2",9b,bd,d6,45),::hx::paccDynamic)) ),null());
HXLINE(2643)			if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic)) )) {
HXLINE(2643)				this->leftIcon->changeIcon(HX_("gf",1f,5a,00,00),null());
            			}
            		}
            		else {
HXLINE(2647)			this->leftIcon->changeIcon(( (::String)(this->characterData->__Field(HX_("iconP2",9b,bd,d6,45),::hx::paccDynamic)) ),null());
HXLINE(2648)			this->rightIcon->changeIcon(( (::String)(this->characterData->__Field(HX_("iconP1",9a,bd,d6,45),::hx::paccDynamic)) ),null());
HXLINE(2649)			if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic)) )) {
HXLINE(2649)				this->leftIcon->changeIcon(HX_("gf",1f,5a,00,00),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateHeads,(void))

 ::Dynamic ChartingState_obj::loadCharacterFile(::String _hx_char){
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2654_loadCharacterFile)
HXLINE(2655)		this->characterFailed = false;
HXLINE(2656)		::String characterPath = ((HX_("characters/",45,3c,bf,be) + _hx_char) + HX_(".json",56,f1,d6,c2));
HXLINE(2658)		::String path = ::backend::Paths_obj::modFolders(characterPath);
HXLINE(2659)		if (!(::sys::FileSystem_obj::exists(path))) {
HXLINE(2660)			::String file = characterPath;
HXDLIN(2660)			if (::hx::IsNull( file )) {
HXLINE(2660)				file = HX_("",00,00,00,00);
            			}
HXDLIN(2660)			path = (HX_("assets/shared/",1e,69,1e,47) + file);
            		}
HXLINE(2663)		if (!(::sys::FileSystem_obj::exists(path))) {
HXLINE(2669)			::String file1 = ((HX_("characters/",45,3c,bf,be) + ::objects::Character_obj::DEFAULT_CHARACTER) + HX_(".json",56,f1,d6,c2));
HXDLIN(2669)			if (::hx::IsNull( file1 )) {
HXLINE(2669)				file1 = HX_("",00,00,00,00);
            			}
HXDLIN(2669)			path = (HX_("assets/shared/",1e,69,1e,47) + file1);
HXLINE(2670)			this->characterFailed = true;
            		}
HXLINE(2674)		::String rawJson = ::sys::io::File_obj::getContent(path);
HXLINE(2678)		return  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,rawJson)->doParse();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,loadCharacterFile,return )

void ChartingState_obj::updateNoteUI(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2683_updateNoteUI)
HXDLIN(2683)		if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(2684)			if (::hx::IsNotNull( this->curSelectedNote->__get(2) )) {
HXLINE(2685)				this->stepperSusLength->set_value(( (Float)(this->curSelectedNote->__get(2)) ));
HXLINE(2686)				if (::hx::IsNotNull( this->curSelectedNote->__get(3) )) {
HXLINE(2687)					this->currentType = this->curNoteTypes->indexOf(this->curSelectedNote->__get(3),null());
HXLINE(2688)					if ((this->currentType <= 0)) {
HXLINE(2689)						this->noteTypeDropDown->set_selectedLabel(HX_("",00,00,00,00));
            					}
            					else {
HXLINE(2691)						 ::flixel::addons::ui::FlxUIDropDownMenu _hx_tmp = this->noteTypeDropDown;
HXDLIN(2691)						::String _hx_tmp1 = (this->currentType + HX_(". ",32,28,00,00));
HXDLIN(2691)						_hx_tmp->set_selectedLabel((_hx_tmp1 + ::Std_obj::string(this->curSelectedNote->__get(3))));
            					}
            				}
            			}
            			else {
HXLINE(2695)				this->eventDropDown->set_selectedLabel(( (::String)(this->curSelectedNote->__get(1)->__GetItem(this->curEventSelected)->__GetItem(0)) ));
HXLINE(2696)				int selected = ( (int)(::Std_obj::parseInt(this->eventDropDown->get_selectedId())) );
HXLINE(2697)				bool _hx_tmp2;
HXDLIN(2697)				if ((selected > 0)) {
HXLINE(2697)					_hx_tmp2 = (selected < this->eventStuff->get_length());
            				}
            				else {
HXLINE(2697)					_hx_tmp2 = false;
            				}
HXDLIN(2697)				if (_hx_tmp2) {
HXLINE(2698)					this->descText->set_text(( (::String)(this->eventStuff->__get(selected)->__GetItem(1)) ));
            				}
HXLINE(2700)				this->value1InputText->set_text(( (::String)(this->curSelectedNote->__get(1)->__GetItem(this->curEventSelected)->__GetItem(1)) ));
HXLINE(2701)				this->value2InputText->set_text(( (::String)(this->curSelectedNote->__get(1)->__GetItem(this->curEventSelected)->__GetItem(2)) ));
            			}
HXLINE(2703)			 ::flixel::addons::ui::FlxUIInputText _hx_tmp3 = this->strumTimeInputText;
HXDLIN(2703)			_hx_tmp3->set_text((HX_("",00,00,00,00) + ::Std_obj::string(this->curSelectedNote->__get(0))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateNoteUI,(void))

void ChartingState_obj::updateGrid(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::objects::Note spr){
            			HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2709_updateGrid)
HXLINE(2709)			spr->destroy();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2711_updateGrid)
HXLINE(2711)			spr->destroy();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            		void _hx_run( ::flixel::text::FlxText spr){
            			HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2713_updateGrid)
HXLINE(2713)			spr->destroy();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(1)
            		void _hx_run( ::objects::Note spr){
            			HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2715_updateGrid)
HXLINE(2715)			spr->destroy();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2717_updateGrid)
HXLINE(2717)			spr->destroy();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2708_updateGrid)
HXLINE(2709)		this->curRenderedNotes->forEachAlive( ::Dynamic(new _hx_Closure_0()),null());
HXLINE(2710)		this->curRenderedNotes->clear();
HXLINE(2711)		this->curRenderedSustains->forEachAlive( ::Dynamic(new _hx_Closure_1()),null());
HXLINE(2712)		this->curRenderedSustains->clear();
HXLINE(2713)		this->curRenderedNoteType->forEachAlive( ::Dynamic(new _hx_Closure_2()),null());
HXLINE(2714)		this->curRenderedNoteType->clear();
HXLINE(2715)		this->nextRenderedNotes->forEachAlive( ::Dynamic(new _hx_Closure_3()),null());
HXLINE(2716)		this->nextRenderedNotes->clear();
HXLINE(2717)		this->nextRenderedSustains->forEachAlive( ::Dynamic(new _hx_Closure_4()),null());
HXLINE(2718)		this->nextRenderedSustains->clear();
HXLINE(2720)		bool _hx_tmp;
HXDLIN(2720)		if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE(2720)			_hx_tmp = ::hx::IsGreater(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic),0 );
            		}
            		else {
HXLINE(2720)			_hx_tmp = false;
            		}
HXDLIN(2720)		if (_hx_tmp) {
HXLINE(2722)			::backend::Conductor_obj::set_bpm(( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE(2728)			Float daBPM = ( (Float)(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE(2729)			{
HXLINE(2729)				int _g = 0;
HXDLIN(2729)				int _g1 = ::states::editors::ChartingState_obj::curSec;
HXDLIN(2729)				while((_g < _g1)){
HXLINE(2729)					_g = (_g + 1);
HXDLIN(2729)					int i = (_g - 1);
HXLINE(2730)					if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE(2731)						daBPM = ( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            					}
            				}
            			}
HXLINE(2732)			::backend::Conductor_obj::set_bpm(daBPM);
            		}
HXLINE(2736)		Float beats = ( (Float)(this->getSectionBeats(null())) );
HXLINE(2737)		{
HXLINE(2737)			int _g2 = 0;
HXDLIN(2737)			::cpp::VirtualArray _g3 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(2737)			while((_g2 < _g3->get_length())){
HXLINE(2737)				 ::Dynamic i1 = _g3->__get(_g2);
HXDLIN(2737)				_g2 = (_g2 + 1);
HXLINE(2739)				 ::objects::Note note = this->setupNoteData(( (::cpp::VirtualArray)(i1) ),false);
HXLINE(2740)				this->curRenderedNotes->add(note).StaticCast<  ::objects::Note >();
HXLINE(2741)				if ((note->sustainLength > 0)) {
HXLINE(2743)					 ::flixel::group::FlxTypedGroup _hx_tmp1 = this->curRenderedSustains;
HXDLIN(2743)					_hx_tmp1->add(this->setupSusNote(note,beats)).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE(2746)				bool _hx_tmp2;
HXDLIN(2746)				bool _hx_tmp3;
HXDLIN(2746)				if (::hx::IsNotNull( i1->__GetItem(3) )) {
HXLINE(2746)					_hx_tmp3 = ::hx::IsNotNull( note->noteType );
            				}
            				else {
HXLINE(2746)					_hx_tmp3 = false;
            				}
HXDLIN(2746)				if (_hx_tmp3) {
HXLINE(2746)					_hx_tmp2 = (note->noteType.length > 0);
            				}
            				else {
HXLINE(2746)					_hx_tmp2 = false;
            				}
HXDLIN(2746)				if (_hx_tmp2) {
HXLINE(2747)					int typeInt = this->curNoteTypes->indexOf(i1->__GetItem(3),null());
HXLINE(2748)					::String theType = (HX_("",00,00,00,00) + typeInt);
HXLINE(2749)					if ((typeInt < 0)) {
HXLINE(2749)						theType = HX_("?",3f,00,00,00);
            					}
HXLINE(2751)					 ::states::editors::AttachedFlxText daText =  ::states::editors::AttachedFlxText_obj::__alloc( HX_CTX ,0,0,100,theType,24,null());
HXLINE(2752)					::String file = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN(2752)					::String _hx_tmp4;
HXDLIN(2752)					if (::sys::FileSystem_obj::exists(file)) {
HXLINE(2752)						_hx_tmp4 = file;
            					}
            					else {
HXLINE(2752)						_hx_tmp4 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            					}
HXDLIN(2752)					daText->setFormat(_hx_tmp4,24,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_FAST_dyn(),-16777216,null());
HXLINE(2753)					daText->xAdd = ( (Float)(-32) );
HXLINE(2754)					daText->yAdd = ( (Float)(6) );
HXLINE(2755)					daText->set_borderSize(( (Float)(1) ));
HXLINE(2756)					this->curRenderedNoteType->add(daText).StaticCast<  ::flixel::text::FlxText >();
HXLINE(2757)					daText->sprTracker = note;
            				}
HXLINE(2759)				note->mustPress = ( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE(2760)				if (::hx::IsGreater( i1->__GetItem(1),3 )) {
HXLINE(2760)					note->mustPress = !(note->mustPress);
            				}
            			}
            		}
HXLINE(2764)		Float startThing = this->sectionStartTime(null());
HXLINE(2765)		Float endThing = this->sectionStartTime(1);
HXLINE(2766)		{
HXLINE(2766)			int _g4 = 0;
HXDLIN(2766)			::cpp::VirtualArray _g5 = ( (::cpp::VirtualArray)(this->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) );
HXDLIN(2766)			while((_g4 < _g5->get_length())){
HXLINE(2766)				 ::Dynamic i2 = _g5->__get(_g4);
HXDLIN(2766)				_g4 = (_g4 + 1);
HXLINE(2768)				bool _hx_tmp5;
HXDLIN(2768)				if (::hx::IsGreater( endThing,i2->__GetItem(0) )) {
HXLINE(2768)					_hx_tmp5 = ::hx::IsGreaterEq( i2->__GetItem(0),startThing );
            				}
            				else {
HXLINE(2768)					_hx_tmp5 = false;
            				}
HXDLIN(2768)				if (_hx_tmp5) {
HXLINE(2770)					 ::objects::Note note1 = this->setupNoteData(( (::cpp::VirtualArray)(i2) ),false);
HXLINE(2771)					this->curRenderedNotes->add(note1).StaticCast<  ::objects::Note >();
HXLINE(2773)					::String text = ((((((((HX_("Event: ",20,dd,eb,d3) + note1->eventName) + HX_(" (",08,1c,00,00)) + ::Math_obj::floor(note1->strumTime)) + HX_(" ms)",e3,ed,79,15)) + HX_("\nValue 1: ",7e,4f,b3,9b)) + note1->eventVal1) + HX_("\nValue 2: ",bf,11,b4,9b)) + note1->eventVal2);
HXLINE(2774)					if ((note1->eventLength > 1)) {
HXLINE(2774)						text = ((note1->eventLength + HX_(" Events:\n",29,16,ce,f8)) + note1->eventName);
            					}
HXLINE(2776)					 ::states::editors::AttachedFlxText daText1 =  ::states::editors::AttachedFlxText_obj::__alloc( HX_CTX ,0,0,400,text,12,null());
HXLINE(2777)					::String file1 = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN(2777)					::String _hx_tmp6;
HXDLIN(2777)					if (::sys::FileSystem_obj::exists(file1)) {
HXLINE(2777)						_hx_tmp6 = file1;
            					}
            					else {
HXLINE(2777)						_hx_tmp6 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            					}
HXDLIN(2777)					daText1->setFormat(_hx_tmp6,12,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_FAST_dyn(),-16777216,null());
HXLINE(2778)					daText1->xAdd = ( (Float)(-410) );
HXLINE(2779)					daText1->set_borderSize(( (Float)(1) ));
HXLINE(2780)					if ((note1->eventLength > 1)) {
HXLINE(2780)						 ::states::editors::AttachedFlxText daText2 = daText1;
HXDLIN(2780)						daText2->yAdd = (daText2->yAdd + 8);
            					}
HXLINE(2781)					this->curRenderedNoteType->add(daText1).StaticCast<  ::flixel::text::FlxText >();
HXLINE(2782)					daText1->sprTracker = note1;
            				}
            			}
            		}
HXLINE(2788)		Float beats1 = ( (Float)(this->getSectionBeats(1)) );
HXLINE(2789)		if ((::states::editors::ChartingState_obj::curSec < (( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length - 1))) {
HXLINE(2790)			int _g6 = 0;
HXDLIN(2790)			::cpp::VirtualArray _g7 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((::states::editors::ChartingState_obj::curSec + 1))->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(2790)			while((_g6 < _g7->get_length())){
HXLINE(2790)				 ::Dynamic i3 = _g7->__get(_g6);
HXDLIN(2790)				_g6 = (_g6 + 1);
HXLINE(2792)				 ::objects::Note note2 = this->setupNoteData(( (::cpp::VirtualArray)(i3) ),true);
HXLINE(2793)				note2->set_alpha(((Float)0.6));
HXLINE(2794)				this->nextRenderedNotes->add(note2).StaticCast<  ::objects::Note >();
HXLINE(2795)				if ((note2->sustainLength > 0)) {
HXLINE(2797)					 ::flixel::group::FlxTypedGroup _hx_tmp7 = this->nextRenderedSustains;
HXDLIN(2797)					_hx_tmp7->add(this->setupSusNote(note2,beats1)).StaticCast<  ::flixel::FlxSprite >();
            				}
            			}
            		}
HXLINE(2803)		Float startThing1 = this->sectionStartTime(1);
HXLINE(2804)		Float endThing1 = this->sectionStartTime(2);
HXLINE(2805)		{
HXLINE(2805)			int _g8 = 0;
HXDLIN(2805)			::cpp::VirtualArray _g9 = ( (::cpp::VirtualArray)(this->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) );
HXDLIN(2805)			while((_g8 < _g9->get_length())){
HXLINE(2805)				 ::Dynamic i4 = _g9->__get(_g8);
HXDLIN(2805)				_g8 = (_g8 + 1);
HXLINE(2807)				bool _hx_tmp8;
HXDLIN(2807)				if (::hx::IsGreater( endThing1,i4->__GetItem(0) )) {
HXLINE(2807)					_hx_tmp8 = ::hx::IsGreaterEq( i4->__GetItem(0),startThing1 );
            				}
            				else {
HXLINE(2807)					_hx_tmp8 = false;
            				}
HXDLIN(2807)				if (_hx_tmp8) {
HXLINE(2809)					 ::objects::Note note3 = this->setupNoteData(( (::cpp::VirtualArray)(i4) ),true);
HXLINE(2810)					note3->set_alpha(((Float)0.6));
HXLINE(2811)					this->nextRenderedNotes->add(note3).StaticCast<  ::objects::Note >();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateGrid,(void))

 ::objects::Note ChartingState_obj::setupNoteData(::cpp::VirtualArray i,bool isNextSection){
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2817_setupNoteData)
HXLINE(2818)		int daNoteInfo = ( (int)(i->__get(1)) );
HXLINE(2819)		Float daStrumTime = ( (Float)(i->__get(0)) );
HXLINE(2820)		 ::Dynamic daSus = i->__get(2);
HXLINE(2822)		 ::objects::Note note =  ::objects::Note_obj::__alloc( HX_CTX ,daStrumTime,::hx::Mod(daNoteInfo,4),null(),null(),true,null());
HXLINE(2823)		if (::hx::IsNotNull( daSus )) {
HXLINE(2824)			if (!(::Std_obj::isOfType(i->__get(3),::hx::ClassOf< ::String >()))) {
HXLINE(2826)				i->set(3,this->curNoteTypes->__get(( (int)(i->__get(3)) )));
            			}
HXLINE(2828)			bool _hx_tmp;
HXDLIN(2828)			if ((i->get_length() > 3)) {
HXLINE(2828)				if (::hx::IsNotNull( i->__get(3) )) {
HXLINE(2828)					_hx_tmp = ::hx::IsLess( i->__get(3)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),1 );
            				}
            				else {
HXLINE(2828)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(2828)				_hx_tmp = false;
            			}
HXDLIN(2828)			if (_hx_tmp) {
HXLINE(2830)				i->remove(i->__get(3));
            			}
HXLINE(2832)			note->sustainLength = ( (Float)(daSus) );
HXLINE(2833)			note->set_noteType(( (::String)(i->__get(3)) ));
            		}
            		else {
HXLINE(2835)			note->loadGraphic(::backend::Paths_obj::image(HX_("eventArrow",4f,83,ea,a1),null(),null()),null(),null(),null(),null(),null());
HXLINE(2836)			note->rgbShader->set_enabled(false);
HXLINE(2837)			note->eventName = this->getEventName(( (::cpp::VirtualArray)(i->__get(1)) ));
HXLINE(2838)			note->eventLength = ( (int)(i->__get(1)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXLINE(2839)			if (::hx::IsLess( i->__get(1)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),2 )) {
HXLINE(2841)				note->eventVal1 = ( (::String)(i->__get(1)->__GetItem(0)->__GetItem(1)) );
HXLINE(2842)				note->eventVal2 = ( (::String)(i->__get(1)->__GetItem(0)->__GetItem(2)) );
            			}
HXLINE(2844)			note->noteData = -1;
HXLINE(2845)			daNoteInfo = -1;
            		}
HXLINE(2848)		note->setGraphicSize(::states::editors::ChartingState_obj::GRID_SIZE,::states::editors::ChartingState_obj::GRID_SIZE);
HXLINE(2849)		note->updateHitbox();
HXLINE(2850)		note->set_x(( (Float)((::Math_obj::floor(( (Float)((daNoteInfo * ::states::editors::ChartingState_obj::GRID_SIZE)) )) + ::states::editors::ChartingState_obj::GRID_SIZE)) ));
HXLINE(2851)		bool _hx_tmp1;
HXDLIN(2851)		if (isNextSection) {
HXLINE(2851)			_hx_tmp1 = ::hx::IsNotEq(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic), ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((::states::editors::ChartingState_obj::curSec + 1))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic) );
            		}
            		else {
HXLINE(2851)			_hx_tmp1 = false;
            		}
HXDLIN(2851)		if (_hx_tmp1) {
HXLINE(2852)			if ((daNoteInfo > 3)) {
HXLINE(2853)				note->set_x((note->x - ( (Float)((::states::editors::ChartingState_obj::GRID_SIZE * 4)) )));
            			}
            			else {
HXLINE(2854)				if (::hx::IsNotNull( daSus )) {
HXLINE(2855)					note->set_x((note->x + (::states::editors::ChartingState_obj::GRID_SIZE * 4)));
            				}
            			}
            		}
HXLINE(2859)		 ::Dynamic beats;
HXDLIN(2859)		if (isNextSection) {
HXLINE(2859)			beats = 1;
            		}
            		else {
HXLINE(2859)			beats = 0;
            		}
HXDLIN(2859)		Float beats1 = ( (Float)(this->getSectionBeats(beats)) );
HXLINE(2860)		note->set_y(this->getYfromStrumNotes((daStrumTime - this->sectionStartTime(null())),beats1));
HXLINE(2862)		if ((note->y < -150)) {
HXLINE(2862)			note->set_y(( (Float)(-150) ));
            		}
HXLINE(2863)		return note;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,setupNoteData,return )

::String ChartingState_obj::getEventName(::cpp::VirtualArray names){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2867_getEventName)
HXLINE(2868)		::String retStr = HX_("",00,00,00,00);
HXLINE(2869)		bool addedOne = false;
HXLINE(2870)		{
HXLINE(2870)			int _g = 0;
HXDLIN(2870)			int _g1 = names->get_length();
HXDLIN(2870)			while((_g < _g1)){
HXLINE(2870)				_g = (_g + 1);
HXDLIN(2870)				int i = (_g - 1);
HXLINE(2872)				if (addedOne) {
HXLINE(2872)					retStr = (retStr + HX_(", ",74,26,00,00));
            				}
HXLINE(2873)				retStr = (retStr + names->__get(i)->__GetItem(0));
HXLINE(2874)				addedOne = true;
            			}
            		}
HXLINE(2876)		return retStr;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,getEventName,return )

 ::flixel::FlxSprite ChartingState_obj::setupSusNote( ::objects::Note note,Float beats){
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2879_setupSusNote)
HXLINE(2880)		Float height = ::flixel::math::FlxMath_obj::remapToRange(note->sustainLength,( (Float)(0) ),(::backend::Conductor_obj::stepCrochet * ( (Float)(16) )),( (Float)(0) ),(( (Float)((::states::editors::ChartingState_obj::GRID_SIZE * 16)) ) * this->zoomList->__get(this->curZoom)));
HXDLIN(2880)		int height1 = ::Math_obj::floor(((height + (( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ) * this->zoomList->__get(this->curZoom))) - (( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ) / ( (Float)(2) ))));
HXLINE(2881)		int minHeight = ::Std_obj::_hx_int((((( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ) * this->zoomList->__get(this->curZoom)) / ( (Float)(2) )) + (( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ) / ( (Float)(2) ))));
HXLINE(2882)		if ((height1 < minHeight)) {
HXLINE(2882)			height1 = minHeight;
            		}
HXLINE(2883)		if ((height1 < 1)) {
HXLINE(2883)			height1 = 1;
            		}
HXLINE(2885)		 ::flixel::FlxSprite spr =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((note->x + (( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ) * ((Float)0.5))) - ( (Float)(4) )),(note->y + (( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ) / ( (Float)(2) ))),null())->makeGraphic(8,height1,null(),null(),null());
HXLINE(2886)		return spr;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,setupSusNote,return )

void ChartingState_obj::addSection(::hx::Null< Float >  __o_sectionBeats){
            		Float sectionBeats = __o_sectionBeats.Default(4);
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2890_addSection)
HXLINE(2891)		 ::Dynamic sec =  ::Dynamic(::hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("gfSection",86,e5,63,d4),false)
            			->setFixed(1,HX_("altAnim",da,f3,f2,e5),false)
            			->setFixed(2,HX_("sectionNotes",1c,c8,a7,fe),::cpp::VirtualArray_obj::__new(0))
            			->setFixed(3,HX_("bpm",df,be,4a,00), ::Dynamic(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)))
            			->setFixed(4,HX_("sectionBeats",18,52,2e,0f),sectionBeats)
            			->setFixed(5,HX_("changeBPM",4f,4f,f8,1d),false)
            			->setFixed(6,HX_("mustHitSection",3b,5f,87,62),true));
HXLINE(2901)		( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->push(sec);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,addSection,(void))

void ChartingState_obj::selectNote( ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2905_selectNote)
HXLINE(2906)		int noteDataToCheck = note->noteData;
HXLINE(2908)		if ((noteDataToCheck > -1)) {
HXLINE(2910)			if (::hx::IsNotEq( note->mustPress, ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic) )) {
HXLINE(2910)				noteDataToCheck = (noteDataToCheck + 4);
            			}
HXLINE(2911)			{
HXLINE(2911)				int _g = 0;
HXDLIN(2911)				::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(2911)				while((_g < _g1->get_length())){
HXLINE(2911)					 ::Dynamic i = _g1->__get(_g);
HXDLIN(2911)					_g = (_g + 1);
HXLINE(2913)					bool _hx_tmp;
HXDLIN(2913)					bool _hx_tmp1;
HXDLIN(2913)					bool _hx_tmp2;
HXDLIN(2913)					if (::hx::IsPointerNotEq( i,this->curSelectedNote )) {
HXLINE(2913)						_hx_tmp2 = ::hx::IsGreater( i->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),2 );
            					}
            					else {
HXLINE(2913)						_hx_tmp2 = false;
            					}
HXDLIN(2913)					if (_hx_tmp2) {
HXLINE(2913)						_hx_tmp1 = ::hx::IsEq( i->__GetItem(0),note->strumTime );
            					}
            					else {
HXLINE(2913)						_hx_tmp1 = false;
            					}
HXDLIN(2913)					if (_hx_tmp1) {
HXLINE(2913)						_hx_tmp = ::hx::IsEq( i->__GetItem(1),noteDataToCheck );
            					}
            					else {
HXLINE(2913)						_hx_tmp = false;
            					}
HXDLIN(2913)					if (_hx_tmp) {
HXLINE(2915)						this->curSelectedNote = ( (::cpp::VirtualArray)(i) );
HXLINE(2916)						goto _hx_goto_172;
            					}
            				}
            				_hx_goto_172:;
            			}
            		}
            		else {
HXLINE(2922)			int _g2 = 0;
HXDLIN(2922)			::cpp::VirtualArray _g3 = ( (::cpp::VirtualArray)(this->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) );
HXDLIN(2922)			while((_g2 < _g3->get_length())){
HXLINE(2922)				 ::Dynamic i1 = _g3->__get(_g2);
HXDLIN(2922)				_g2 = (_g2 + 1);
HXLINE(2924)				bool _hx_tmp3;
HXDLIN(2924)				if (::hx::IsPointerNotEq( i1,this->curSelectedNote )) {
HXLINE(2924)					_hx_tmp3 = ::hx::IsEq( i1->__GetItem(0),note->strumTime );
            				}
            				else {
HXLINE(2924)					_hx_tmp3 = false;
            				}
HXDLIN(2924)				if (_hx_tmp3) {
HXLINE(2926)					this->curSelectedNote = ( (::cpp::VirtualArray)(i1) );
HXLINE(2927)					this->curEventSelected = (::Std_obj::_hx_int(( (Float)(this->curSelectedNote->__get(1)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) )) - 1);
HXLINE(2928)					goto _hx_goto_173;
            				}
            			}
            			_hx_goto_173:;
            		}
HXLINE(2932)		this->changeEventSelected(null());
HXLINE(2934)		this->updateGrid();
HXLINE(2935)		this->updateNoteUI();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,selectNote,(void))

void ChartingState_obj::deleteNote( ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2939_deleteNote)
HXLINE(2940)		int noteDataToCheck = note->noteData;
HXLINE(2941)		bool _hx_tmp;
HXDLIN(2941)		if ((noteDataToCheck > -1)) {
HXLINE(2941)			_hx_tmp = ::hx::IsNotEq( note->mustPress, ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic) );
            		}
            		else {
HXLINE(2941)			_hx_tmp = false;
            		}
HXDLIN(2941)		if (_hx_tmp) {
HXLINE(2941)			noteDataToCheck = (noteDataToCheck + 4);
            		}
HXLINE(2943)		if ((note->noteData > -1)) {
HXLINE(2945)			int _g = 0;
HXDLIN(2945)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(2945)			while((_g < _g1->get_length())){
HXLINE(2945)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(2945)				_g = (_g + 1);
HXLINE(2947)				bool _hx_tmp1;
HXDLIN(2947)				if (::hx::IsEq( i->__GetItem(0),note->strumTime )) {
HXLINE(2947)					_hx_tmp1 = ::hx::IsEq( i->__GetItem(1),noteDataToCheck );
            				}
            				else {
HXLINE(2947)					_hx_tmp1 = false;
            				}
HXDLIN(2947)				if (_hx_tmp1) {
HXLINE(2949)					if (::hx::IsPointerEq( i,this->curSelectedNote )) {
HXLINE(2949)						this->curSelectedNote = null();
            					}
HXLINE(2951)					( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(i);
HXLINE(2952)					goto _hx_goto_175;
            				}
            			}
            			_hx_goto_175:;
            		}
            		else {
HXLINE(2958)			int _g2 = 0;
HXDLIN(2958)			::cpp::VirtualArray _g3 = ( (::cpp::VirtualArray)(this->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) );
HXDLIN(2958)			while((_g2 < _g3->get_length())){
HXLINE(2958)				 ::Dynamic i1 = _g3->__get(_g2);
HXDLIN(2958)				_g2 = (_g2 + 1);
HXLINE(2960)				if (::hx::IsEq( i1->__GetItem(0),note->strumTime )) {
HXLINE(2962)					if (::hx::IsPointerEq( i1,this->curSelectedNote )) {
HXLINE(2964)						this->curSelectedNote = null();
HXLINE(2965)						this->changeEventSelected(null());
            					}
HXLINE(2968)					( (::cpp::VirtualArray)(this->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) )->remove(i1);
HXLINE(2969)					goto _hx_goto_176;
            				}
            			}
            			_hx_goto_176:;
            		}
HXLINE(2974)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,deleteNote,(void))

void ChartingState_obj::doANoteThing( ::Dynamic cs,int d, ::Dynamic style){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2977_doANoteThing)
HXDLIN(2977)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2978)		::Array< bool > delnote = ::Array_obj< bool >::fromData( _hx_array_data_f85b0019_179,1);
HXLINE(2979)		if (Dynamic( this->strumLineNotes->members->__get(d)).StaticCast<  ::objects::StrumNote >()->overlaps(this->curRenderedNotes,null(),null())) {
            			HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0,::Array< bool >,delnote, ::states::editors::ChartingState,_gthis,int,d) HXARGC(1)
            			void _hx_run( ::objects::Note note){
            				HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2983_doANoteThing)
HXLINE(2983)				bool _hx_tmp;
HXDLIN(2983)				Float x = (Dynamic( _gthis->strumLineNotes->members->__get(d)).StaticCast<  ::objects::StrumNote >()->x + 1);
HXDLIN(2983)				Float y = (_gthis->strumLine->y + 1);
HXDLIN(2983)				 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN(2983)				point->_inPool = false;
HXDLIN(2983)				if (note->overlapsPoint(point,null(),null())) {
HXLINE(2983)					_hx_tmp = (note->noteData == ::hx::Mod(d,4));
            				}
            				else {
HXLINE(2983)					_hx_tmp = false;
            				}
HXDLIN(2983)				if (_hx_tmp) {
HXLINE(2986)					if (!(delnote->__get(0))) {
HXLINE(2986)						_gthis->deleteNote(note);
            					}
HXLINE(2987)					delnote[0] = true;
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2981)			this->curRenderedNotes->forEachAlive( ::Dynamic(new _hx_Closure_0(delnote,_gthis,d)),null());
            		}
HXLINE(2992)		if (!(delnote->__get(0))) {
HXLINE(2993)			this->addNote(cs,d,style);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(ChartingState_obj,doANoteThing,(void))

void ChartingState_obj::clearSong(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2997_clearSong)
HXLINE(2998)		{
HXLINE(2998)			int _g = 0;
HXDLIN(2998)			int _g1 = ( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(2998)			while((_g < _g1)){
HXLINE(2998)				_g = (_g + 1);
HXDLIN(2998)				int daSection = (_g - 1);
HXLINE(3000)				 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::cpp::VirtualArray_obj::__new(0),::hx::paccDynamic);
            			}
            		}
HXLINE(3003)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,clearSong,(void))

void ChartingState_obj::addNote( ::Dynamic strum, ::Dynamic data, ::Dynamic type){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3007_addNote)
HXLINE(3011)		Float noteStrum = this->dummyArrow->y;
HXDLIN(3011)		Float noteStrum1 = this->getStrumTime((noteStrum * (( (Float)(this->getSectionBeats(null())) ) / ( (Float)(4) ))),false);
HXDLIN(3011)		Float noteStrum2 = (noteStrum1 + this->sectionStartTime(null()));
HXLINE(3012)		int noteData = ::Math_obj::floor((( (Float)((::flixel::FlxG_obj::mouse->x - ::states::editors::ChartingState_obj::GRID_SIZE)) ) / ( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) )));
HXLINE(3013)		int noteSus = 0;
HXLINE(3014)		bool daAlt = false;
HXLINE(3015)		int daType = this->currentType;
HXLINE(3017)		if (::hx::IsNotNull( strum )) {
HXLINE(3017)			noteStrum2 = ( (Float)(strum) );
            		}
HXLINE(3018)		if (::hx::IsNotNull( data )) {
HXLINE(3018)			noteData = ( (int)(data) );
            		}
HXLINE(3019)		if (::hx::IsNotNull( type )) {
HXLINE(3019)			daType = ( (int)(type) );
            		}
HXLINE(3021)		if ((noteData > -1)) {
HXLINE(3023)			( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(::cpp::VirtualArray_obj::__new(4)->init(0,noteStrum2)->init(1,noteData)->init(2,noteSus)->init(3,this->curNoteTypes->__get(daType)));
HXLINE(3024)			this->curSelectedNote = ( (::cpp::VirtualArray)( ::Dynamic( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem((( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->get_length() - 1))) );
            		}
            		else {
HXLINE(3028)			 ::Dynamic event = this->eventStuff->__get(( (int)(::Std_obj::parseInt(this->eventDropDown->get_selectedId())) ))->__GetItem(0);
HXLINE(3029)			::String text1 = this->value1InputText->text;
HXLINE(3030)			::String text2 = this->value2InputText->text;
HXLINE(3031)			( (::cpp::VirtualArray)(this->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) )->push(::cpp::VirtualArray_obj::__new(2)->init(0,noteStrum2)->init(1,::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,event)->init(1,text1)->init(2,text2))));
HXLINE(3032)			this->curSelectedNote = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic))->__GetItem((( (::cpp::VirtualArray)(this->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) )->get_length() - 1))) );
HXLINE(3033)			this->curEventSelected = 0;
            		}
HXLINE(3035)		this->changeEventSelected(null());
HXLINE(3037)		bool _hx_tmp;
HXDLIN(3037)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(3037)		if (_this->keyManager->checkStatusUnsafe(17,_this->status)) {
HXLINE(3037)			_hx_tmp = (noteData > -1);
            		}
            		else {
HXLINE(3037)			_hx_tmp = false;
            		}
HXDLIN(3037)		if (_hx_tmp) {
HXLINE(3039)			( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::states::editors::ChartingState_obj::curSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(::cpp::VirtualArray_obj::__new(4)->init(0,noteStrum2)->init(1,::hx::Mod((noteData + 4),8))->init(2,noteSus)->init(3,this->curNoteTypes->__get(daType)));
            		}
HXLINE(3043)		 ::flixel::addons::ui::FlxUIInputText _hx_tmp1 = this->strumTimeInputText;
HXDLIN(3043)		_hx_tmp1->set_text((HX_("",00,00,00,00) + ::Std_obj::string(this->curSelectedNote->__get(0))));
HXLINE(3045)		this->updateGrid();
HXLINE(3046)		this->updateNoteUI();
            	}


HX_DEFINE_DYNAMIC_FUNC3(ChartingState_obj,addNote,(void))

void ChartingState_obj::redo(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3051_redo)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,redo,(void))

void ChartingState_obj::undo(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3058_undo)
HXDLIN(3058)		this->undos->pop();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,undo,(void))

Float ChartingState_obj::getStrumTime(Float yPos,::hx::Null< bool >  __o_doZoomCalc){
            		bool doZoomCalc = __o_doZoomCalc.Default(true);
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3065_getStrumTime)
HXLINE(3066)		Float leZoom = this->zoomList->__get(this->curZoom);
HXLINE(3067)		if (!(doZoomCalc)) {
HXLINE(3067)			leZoom = ( (Float)(1) );
            		}
HXLINE(3068)		Float _hx_tmp = this->gridBG->y;
HXDLIN(3068)		Float _hx_tmp1 = this->gridBG->y;
HXDLIN(3068)		Float _hx_tmp2 = (_hx_tmp1 + (this->gridBG->get_height() * leZoom));
HXDLIN(3068)		return ::flixel::math::FlxMath_obj::remapToRange(yPos,_hx_tmp,_hx_tmp2,( (Float)(0) ),(( (Float)(16) ) * ::backend::Conductor_obj::stepCrochet));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,getStrumTime,return )

Float ChartingState_obj::getYfromStrum(Float strumTime,::hx::Null< bool >  __o_doZoomCalc){
            		bool doZoomCalc = __o_doZoomCalc.Default(true);
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3072_getYfromStrum)
HXLINE(3073)		Float leZoom = this->zoomList->__get(this->curZoom);
HXLINE(3074)		if (!(doZoomCalc)) {
HXLINE(3074)			leZoom = ( (Float)(1) );
            		}
HXLINE(3075)		Float _hx_tmp = (( (Float)(16) ) * ::backend::Conductor_obj::stepCrochet);
HXDLIN(3075)		Float _hx_tmp1 = this->gridBG->y;
HXDLIN(3075)		Float _hx_tmp2 = this->gridBG->y;
HXDLIN(3075)		return ::flixel::math::FlxMath_obj::remapToRange(strumTime,( (Float)(0) ),_hx_tmp,_hx_tmp1,(_hx_tmp2 + (this->gridBG->get_height() * leZoom)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,getYfromStrum,return )

Float ChartingState_obj::getYfromStrumNotes(Float strumTime,Float beats){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3079_getYfromStrumNotes)
HXLINE(3080)		Float value = (strumTime / ((beats * ( (Float)(4) )) * ::backend::Conductor_obj::stepCrochet));
HXLINE(3081)		return (((((( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ) * beats) * ( (Float)(4) )) * this->zoomList->__get(this->curZoom)) * value) + this->gridBG->y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,getYfromStrumNotes,return )

::cpp::VirtualArray ChartingState_obj::getNotes(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3085_getNotes)
HXLINE(3086)		::cpp::VirtualArray noteData = ::cpp::VirtualArray_obj::__new(0);
HXLINE(3088)		{
HXLINE(3088)			int _g = 0;
HXDLIN(3088)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3088)			while((_g < _g1->length)){
HXLINE(3088)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(3088)				_g = (_g + 1);
HXLINE(3090)				noteData->push( ::Dynamic(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)));
            			}
            		}
HXLINE(3093)		return noteData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,getNotes,return )

void ChartingState_obj::loadJson(::String song){
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3099_loadJson)
HXDLIN(3099)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(3102)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(3103)			 ::Dynamic num = null();
HXDLIN(3103)			 ::Dynamic _hx_tmp;
HXDLIN(3103)			if (::hx::IsNull( num )) {
HXLINE(3103)				_hx_tmp = ::states::PlayState_obj::storyDifficulty;
            			}
            			else {
HXLINE(3103)				_hx_tmp = num;
            			}
HXDLIN(3103)			if ((::backend::Difficulty_obj::list->__get(( (int)(_hx_tmp) )) != ::backend::Difficulty_obj::defaultDifficulty)) {
HXLINE(3104)				 ::Dynamic num1 = null();
HXDLIN(3104)				 ::Dynamic _hx_tmp1;
HXDLIN(3104)				if (::hx::IsNull( num1 )) {
HXLINE(3104)					_hx_tmp1 = ::states::PlayState_obj::storyDifficulty;
            				}
            				else {
HXLINE(3104)					_hx_tmp1 = num1;
            				}
HXDLIN(3104)				if (::hx::IsNull( ::backend::Difficulty_obj::list->__get(( (int)(_hx_tmp1) )) )) {
HXLINE(3105)					::String _hx_tmp2 = song.toLowerCase();
HXDLIN(3105)					::states::PlayState_obj::SONG = ::backend::Song_obj::loadFromJson(_hx_tmp2,song.toLowerCase());
            				}
            				else {
HXLINE(3107)					::String _hx_tmp3 = (song.toLowerCase() + HX_("-",2d,00,00,00));
HXDLIN(3107)					 ::Dynamic num2 = null();
HXDLIN(3107)					 ::Dynamic _hx_tmp4;
HXDLIN(3107)					if (::hx::IsNull( num2 )) {
HXLINE(3107)						_hx_tmp4 = ::states::PlayState_obj::storyDifficulty;
            					}
            					else {
HXLINE(3107)						_hx_tmp4 = num2;
            					}
HXDLIN(3107)					::String _hx_tmp5 = (_hx_tmp3 + ::backend::Difficulty_obj::list->__get(( (int)(_hx_tmp4) )));
HXDLIN(3107)					::states::PlayState_obj::SONG = ::backend::Song_obj::loadFromJson(_hx_tmp5,song.toLowerCase());
            				}
            			}
            			else {
HXLINE(3110)				::String _hx_tmp6 = song.toLowerCase();
HXDLIN(3110)				::states::PlayState_obj::SONG = ::backend::Song_obj::loadFromJson(_hx_tmp6,song.toLowerCase());
            			}
HXLINE(3111)			::backend::MusicBeatState_obj::resetState();
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(3113)				 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE(3114)				{
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::ChartingState,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3132_loadJson)
HXLINE(3133)						_gthis->remove(_gthis->missingText,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3134)						_gthis->missingText->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(3115)					 ::Dynamic _hx_tmp7 = ::haxe::Log_obj::trace;
HXDLIN(3115)					::String _hx_tmp8 = (HX_("ERROR! ",87,5a,de,69) + ::Std_obj::string(e));
HXDLIN(3115)					_hx_tmp7(_hx_tmp8,::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),3115,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("loadJson",6e,13,08,b7)));
HXLINE(3117)					::String errorStr = e->toString();
HXLINE(3118)					if (::StringTools_obj::startsWith(errorStr,HX_("[file_contents,assets/data/",a3,60,54,a0))) {
HXLINE(3118)						errorStr = (HX_("Missing file: ",bc,9d,68,d4) + errorStr.substring(27,(errorStr.length - 1)));
            					}
HXLINE(3120)					if (::hx::IsNull( this->missingText )) {
HXLINE(3122)						this->missingText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,50,0,(::flixel::FlxG_obj::width - 100),HX_("",00,00,00,00),24,null());
HXLINE(3123)						 ::flixel::text::FlxText _hx_tmp9 = this->missingText;
HXDLIN(3123)						::String file = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN(3123)						::String _hx_tmp10;
HXDLIN(3123)						if (::sys::FileSystem_obj::exists(file)) {
HXLINE(3123)							_hx_tmp10 = file;
            						}
            						else {
HXLINE(3123)							_hx_tmp10 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            						}
HXDLIN(3123)						_hx_tmp9->setFormat(_hx_tmp10,24,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(3124)						{
HXLINE(3124)							 ::flixel::math::FlxBasePoint this1 = this->missingText->scrollFactor;
HXDLIN(3124)							this1->set_x(( (Float)(0) ));
HXDLIN(3124)							this1->set_y(( (Float)(0) ));
            						}
HXLINE(3125)						this->add(this->missingText);
            					}
            					else {
HXLINE(3127)						this->missingTextTimer->cancel();
            					}
HXLINE(3129)					this->missingText->set_text((HX_("ERROR WHILE LOADING CHART:\n",03,b4,d7,53) + errorStr));
HXLINE(3130)					{
HXLINE(3130)						 ::flixel::text::FlxText _this = this->missingText;
HXDLIN(3130)						int axes = 16;
HXDLIN(3130)						bool _hx_tmp11;
HXDLIN(3130)						if ((axes != 1)) {
HXLINE(3130)							_hx_tmp11 = (axes == 17);
            						}
            						else {
HXLINE(3130)							_hx_tmp11 = true;
            						}
HXDLIN(3130)						if (_hx_tmp11) {
HXLINE(3130)							int _hx_tmp12 = ::flixel::FlxG_obj::width;
HXDLIN(3130)							_this->set_x(((( (Float)(_hx_tmp12) ) - _this->get_width()) / ( (Float)(2) )));
            						}
HXDLIN(3130)						bool _hx_tmp13;
HXDLIN(3130)						if ((axes != 16)) {
HXLINE(3130)							_hx_tmp13 = (axes == 17);
            						}
            						else {
HXLINE(3130)							_hx_tmp13 = true;
            						}
HXDLIN(3130)						if (_hx_tmp13) {
HXLINE(3130)							int _hx_tmp14 = ::flixel::FlxG_obj::height;
HXDLIN(3130)							_this->set_y(((( (Float)(_hx_tmp14) ) - _this->get_height()) / ( (Float)(2) )));
            						}
            					}
HXLINE(3132)					this->missingTextTimer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(5, ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE(3136)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp15 = ::flixel::FlxG_obj::sound;
HXDLIN(3136)					_hx_tmp15->play(::backend::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,loadJson,(void))

void ChartingState_obj::autosaveSong(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3141_autosaveSong)
HXLINE(3142)		 ::Dynamic replacer = null();
HXDLIN(3142)		::String space = null();
HXDLIN(3142)		::String _hx_tmp = ::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("song",d5,23,58,4c),this->_song)),replacer,space);
HXDLIN(3142)		::flixel::FlxG_obj::save->data->__SetField(HX_("autosave",2c,4e,9a,44),_hx_tmp,::hx::paccDynamic);
HXLINE(3145)		::flixel::FlxG_obj::save->flush(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,autosaveSong,(void))

void ChartingState_obj::clearEvents(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3148_clearEvents)
HXLINE(3149)		this->_song->__SetField(HX_("events",19,4f,6a,96),::cpp::VirtualArray_obj::__new(0),::hx::paccDynamic);
HXLINE(3150)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,clearEvents,(void))

void ChartingState_obj::saveLevel(){
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3154_saveLevel)
HXLINE(3155)		bool _hx_tmp;
HXDLIN(3155)		if (::hx::IsNotNull( this->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic) )) {
HXLINE(3155)			_hx_tmp = (( (::cpp::VirtualArray)(this->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) )->get_length() > 1);
            		}
            		else {
HXLINE(3155)			_hx_tmp = false;
            		}
HXDLIN(3155)		if (_hx_tmp) {
HXLINE(3155)			( (::cpp::VirtualArray)(this->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) )->sort(this->sortByTime_dyn());
            		}
HXLINE(3156)		 ::Dynamic json =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("song",d5,23,58,4c),this->_song));
HXLINE(3160)		 ::Dynamic replacer = null();
HXDLIN(3160)		::String data = ::haxe::format::JsonPrinter_obj::print(json,replacer,HX_("\t",09,00,00,00));
HXLINE(3162)		bool _hx_tmp1;
HXDLIN(3162)		if (::hx::IsNotNull( data )) {
HXLINE(3162)			_hx_tmp1 = (data.length > 0);
            		}
            		else {
HXLINE(3162)			_hx_tmp1 = false;
            		}
HXDLIN(3162)		if (_hx_tmp1) {
HXLINE(3164)			this->_file =  ::openfl::net::FileReference_obj::__alloc( HX_CTX );
HXLINE(3165)			this->_file->addEventListener(HX_("select",fc,1a,33,6a),this->onSaveComplete_dyn(),null(),null(),null());
HXLINE(3166)			this->_file->addEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null(),null(),null());
HXLINE(3167)			this->_file->addEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null(),null(),null());
HXLINE(3168)			 ::openfl::net::FileReference _hx_tmp2 = this->_file;
HXDLIN(3168)			::String _hx_tmp3 = ::StringTools_obj::trim(data);
HXDLIN(3168)			::String path = ( (::String)(this->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(3168)			 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(3168)			 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(3168)			::String path1 = invalidChars->split(::StringTools_obj::replace(path,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(3168)			_hx_tmp2->save(_hx_tmp3,(hideChars->split(path1)->join(HX_("",00,00,00,00)).toLowerCase() + HX_(".json",56,f1,d6,c2)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,saveLevel,(void))

int ChartingState_obj::sortByTime(::cpp::VirtualArray Obj1,::cpp::VirtualArray Obj2){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3174_sortByTime)
HXDLIN(3174)		Float Value1 = ( (Float)(Obj1->__get(0)) );
HXDLIN(3174)		Float Value2 = ( (Float)(Obj2->__get(0)) );
HXDLIN(3174)		int result = 0;
HXDLIN(3174)		if ((Value1 < Value2)) {
HXDLIN(3174)			result = -1;
            		}
            		else {
HXDLIN(3174)			if ((Value1 > Value2)) {
HXDLIN(3174)				result = 1;
            			}
            		}
HXDLIN(3174)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,sortByTime,return )

void ChartingState_obj::saveEvents(){
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3178_saveEvents)
HXLINE(3179)		bool _hx_tmp;
HXDLIN(3179)		if (::hx::IsNotNull( this->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic) )) {
HXLINE(3179)			_hx_tmp = (( (::cpp::VirtualArray)(this->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) )->get_length() > 1);
            		}
            		else {
HXLINE(3179)			_hx_tmp = false;
            		}
HXDLIN(3179)		if (_hx_tmp) {
HXLINE(3179)			( (::cpp::VirtualArray)(this->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) )->sort(this->sortByTime_dyn());
            		}
HXLINE(3180)		 ::Dynamic eventsSong =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("events",19,4f,6a,96), ::Dynamic(this->_song->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic))));
HXLINE(3183)		 ::Dynamic json =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("song",d5,23,58,4c),eventsSong));
HXLINE(3187)		 ::Dynamic replacer = null();
HXDLIN(3187)		::String data = ::haxe::format::JsonPrinter_obj::print(json,replacer,HX_("\t",09,00,00,00));
HXLINE(3189)		bool _hx_tmp1;
HXDLIN(3189)		if (::hx::IsNotNull( data )) {
HXLINE(3189)			_hx_tmp1 = (data.length > 0);
            		}
            		else {
HXLINE(3189)			_hx_tmp1 = false;
            		}
HXDLIN(3189)		if (_hx_tmp1) {
HXLINE(3191)			this->_file =  ::openfl::net::FileReference_obj::__alloc( HX_CTX );
HXLINE(3192)			this->_file->addEventListener(HX_("select",fc,1a,33,6a),this->onSaveComplete_dyn(),null(),null(),null());
HXLINE(3193)			this->_file->addEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null(),null(),null());
HXLINE(3194)			this->_file->addEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null(),null(),null());
HXLINE(3195)			 ::openfl::net::FileReference _hx_tmp2 = this->_file;
HXDLIN(3195)			_hx_tmp2->save(::StringTools_obj::trim(data),HX_("events.json",9d,47,9a,dc));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,saveEvents,(void))

void ChartingState_obj::onSaveComplete( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3200_onSaveComplete)
HXLINE(3201)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(3202)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(3203)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(3204)		this->_file = null();
HXLINE(3205)		::flixel::FlxG_obj::log->advanced(HX_("Successfully saved LEVEL DATA.",16,91,32,7d),::flixel::_hx_system::debug::log::LogStyle_obj::NOTICE,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveComplete,(void))

void ChartingState_obj::onSaveCancel( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3212_onSaveCancel)
HXLINE(3213)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(3214)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(3215)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(3216)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveCancel,(void))

void ChartingState_obj::onSaveError( ::openfl::events::IOErrorEvent _){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3223_onSaveError)
HXLINE(3224)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(3225)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(3226)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(3227)		this->_file = null();
HXLINE(3228)		::flixel::FlxG_obj::log->advanced(HX_("Problem saving Level data",eb,f5,24,5b),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveError,(void))

 ::Dynamic ChartingState_obj::getSectionBeats( ::Dynamic section){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3232_getSectionBeats)
HXLINE(3233)		if (::hx::IsNull( section )) {
HXLINE(3233)			section = ::states::editors::ChartingState_obj::curSec;
            		}
HXLINE(3234)		 ::Dynamic val = null();
HXLINE(3236)		if (::hx::IsNotNull(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(( (int)(section) )) )) {
HXLINE(3236)			val =  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(( (int)(section) ))->__Field(HX_("sectionBeats",18,52,2e,0f),::hx::paccDynamic);
            		}
HXLINE(3237)		if (::hx::IsNotNull( val )) {
HXLINE(3237)			return val;
            		}
            		else {
HXLINE(3237)			return 4;
            		}
HXDLIN(3237)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,getSectionBeats,return )

::Array< ::String > ChartingState_obj::noteTypeList;

bool ChartingState_obj::goToPlayState;

int ChartingState_obj::curSec;

int ChartingState_obj::lastSection;

::String ChartingState_obj::lastSong;

int ChartingState_obj::GRID_SIZE;

int ChartingState_obj::quantization;

int ChartingState_obj::curQuant;

bool ChartingState_obj::vortex;


::hx::ObjectPtr< ChartingState_obj > ChartingState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< ChartingState_obj > __this = new ChartingState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< ChartingState_obj > ChartingState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	ChartingState_obj *__this = (ChartingState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ChartingState_obj), true, "states.editors.ChartingState"));
	*(void **)__this = ChartingState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

ChartingState_obj::ChartingState_obj()
{
}

void ChartingState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ChartingState);
	HX_MARK_MEMBER_NAME(ignoreWarnings,"ignoreWarnings");
	HX_MARK_MEMBER_NAME(curNoteTypes,"curNoteTypes");
	HX_MARK_MEMBER_NAME(undos,"undos");
	HX_MARK_MEMBER_NAME(redos,"redos");
	HX_MARK_MEMBER_NAME(eventStuff,"eventStuff");
	HX_MARK_MEMBER_NAME(_file,"_file");
	HX_MARK_MEMBER_NAME(UI_box,"UI_box");
	HX_MARK_MEMBER_NAME(bpmTxt,"bpmTxt");
	HX_MARK_MEMBER_NAME(camPos,"camPos");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(quant,"quant");
	HX_MARK_MEMBER_NAME(strumLineNotes,"strumLineNotes");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(amountSteps,"amountSteps");
	HX_MARK_MEMBER_NAME(bullshitUI,"bullshitUI");
	HX_MARK_MEMBER_NAME(highlight,"highlight");
	HX_MARK_MEMBER_NAME(CAM_OFFSET,"CAM_OFFSET");
	HX_MARK_MEMBER_NAME(dummyArrow,"dummyArrow");
	HX_MARK_MEMBER_NAME(curRenderedSustains,"curRenderedSustains");
	HX_MARK_MEMBER_NAME(curRenderedNotes,"curRenderedNotes");
	HX_MARK_MEMBER_NAME(curRenderedNoteType,"curRenderedNoteType");
	HX_MARK_MEMBER_NAME(nextRenderedSustains,"nextRenderedSustains");
	HX_MARK_MEMBER_NAME(nextRenderedNotes,"nextRenderedNotes");
	HX_MARK_MEMBER_NAME(gridBG,"gridBG");
	HX_MARK_MEMBER_NAME(nextGridBG,"nextGridBG");
	HX_MARK_MEMBER_NAME(daquantspot,"daquantspot");
	HX_MARK_MEMBER_NAME(curEventSelected,"curEventSelected");
	HX_MARK_MEMBER_NAME(curUndoIndex,"curUndoIndex");
	HX_MARK_MEMBER_NAME(curRedoIndex,"curRedoIndex");
	HX_MARK_MEMBER_NAME(_song,"_song");
	HX_MARK_MEMBER_NAME(curSelectedNote,"curSelectedNote");
	HX_MARK_MEMBER_NAME(playbackSpeed,"playbackSpeed");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(opponentVocals,"opponentVocals");
	HX_MARK_MEMBER_NAME(leftIcon,"leftIcon");
	HX_MARK_MEMBER_NAME(rightIcon,"rightIcon");
	HX_MARK_MEMBER_NAME(value1InputText,"value1InputText");
	HX_MARK_MEMBER_NAME(value2InputText,"value2InputText");
	HX_MARK_MEMBER_NAME(currentSongName,"currentSongName");
	HX_MARK_MEMBER_NAME(zoomTxt,"zoomTxt");
	HX_MARK_MEMBER_NAME(zoomList,"zoomList");
	HX_MARK_MEMBER_NAME(curZoom,"curZoom");
	HX_MARK_MEMBER_NAME(blockPressWhileTypingOn,"blockPressWhileTypingOn");
	HX_MARK_MEMBER_NAME(blockPressWhileTypingOnStepper,"blockPressWhileTypingOnStepper");
	HX_MARK_MEMBER_NAME(blockPressWhileScrolling,"blockPressWhileScrolling");
	HX_MARK_MEMBER_NAME(waveformSprite,"waveformSprite");
	HX_MARK_MEMBER_NAME(gridLayer,"gridLayer");
	HX_MARK_MEMBER_NAME(quantizations,"quantizations");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(mouseQuant,"mouseQuant");
	HX_MARK_MEMBER_NAME(check_mute_inst,"check_mute_inst");
	HX_MARK_MEMBER_NAME(check_mute_vocals,"check_mute_vocals");
	HX_MARK_MEMBER_NAME(check_mute_vocals_opponent,"check_mute_vocals_opponent");
	HX_MARK_MEMBER_NAME(check_vortex,"check_vortex");
	HX_MARK_MEMBER_NAME(check_warnings,"check_warnings");
	HX_MARK_MEMBER_NAME(playSoundBf,"playSoundBf");
	HX_MARK_MEMBER_NAME(playSoundDad,"playSoundDad");
	HX_MARK_MEMBER_NAME(UI_songTitle,"UI_songTitle");
	HX_MARK_MEMBER_NAME(stageDropDown,"stageDropDown");
	HX_MARK_MEMBER_NAME(sliderRate,"sliderRate");
	HX_MARK_MEMBER_NAME(stepperBeats,"stepperBeats");
	HX_MARK_MEMBER_NAME(check_mustHitSection,"check_mustHitSection");
	HX_MARK_MEMBER_NAME(check_gfSection,"check_gfSection");
	HX_MARK_MEMBER_NAME(check_changeBPM,"check_changeBPM");
	HX_MARK_MEMBER_NAME(stepperSectionBPM,"stepperSectionBPM");
	HX_MARK_MEMBER_NAME(check_altAnim,"check_altAnim");
	HX_MARK_MEMBER_NAME(sectionToCopy,"sectionToCopy");
	HX_MARK_MEMBER_NAME(notesCopied,"notesCopied");
	HX_MARK_MEMBER_NAME(stepperSusLength,"stepperSusLength");
	HX_MARK_MEMBER_NAME(strumTimeInputText,"strumTimeInputText");
	HX_MARK_MEMBER_NAME(noteTypeDropDown,"noteTypeDropDown");
	HX_MARK_MEMBER_NAME(currentType,"currentType");
	HX_MARK_MEMBER_NAME(eventDropDown,"eventDropDown");
	HX_MARK_MEMBER_NAME(descText,"descText");
	HX_MARK_MEMBER_NAME(selectedEventText,"selectedEventText");
	HX_MARK_MEMBER_NAME(metronome,"metronome");
	HX_MARK_MEMBER_NAME(mouseScrollingQuant,"mouseScrollingQuant");
	HX_MARK_MEMBER_NAME(metronomeStepper,"metronomeStepper");
	HX_MARK_MEMBER_NAME(metronomeOffsetStepper,"metronomeOffsetStepper");
	HX_MARK_MEMBER_NAME(disableAutoScrolling,"disableAutoScrolling");
	HX_MARK_MEMBER_NAME(instVolume,"instVolume");
	HX_MARK_MEMBER_NAME(voicesVolume,"voicesVolume");
	HX_MARK_MEMBER_NAME(voicesOppVolume,"voicesOppVolume");
	HX_MARK_MEMBER_NAME(gameOverCharacterInputText,"gameOverCharacterInputText");
	HX_MARK_MEMBER_NAME(gameOverSoundInputText,"gameOverSoundInputText");
	HX_MARK_MEMBER_NAME(gameOverLoopInputText,"gameOverLoopInputText");
	HX_MARK_MEMBER_NAME(gameOverEndInputText,"gameOverEndInputText");
	HX_MARK_MEMBER_NAME(noteSkinInputText,"noteSkinInputText");
	HX_MARK_MEMBER_NAME(noteSplashesInputText,"noteSplashesInputText");
	HX_MARK_MEMBER_NAME(playtesting,"playtesting");
	HX_MARK_MEMBER_NAME(playtestingTime,"playtestingTime");
	HX_MARK_MEMBER_NAME(playtestingOnComplete,"playtestingOnComplete");
	HX_MARK_MEMBER_NAME(updatedSection,"updatedSection");
	HX_MARK_MEMBER_NAME(lastConductorPos,"lastConductorPos");
	HX_MARK_MEMBER_NAME(colorSine,"colorSine");
	HX_MARK_MEMBER_NAME(lastSecBeats,"lastSecBeats");
	HX_MARK_MEMBER_NAME(lastSecBeatsNext,"lastSecBeatsNext");
	HX_MARK_MEMBER_NAME(columns,"columns");
	HX_MARK_MEMBER_NAME(waveformPrinted,"waveformPrinted");
	HX_MARK_MEMBER_NAME(wavData,"wavData");
	HX_MARK_MEMBER_NAME(lastWaveformHeight,"lastWaveformHeight");
	HX_MARK_MEMBER_NAME(characterData,"characterData");
	HX_MARK_MEMBER_NAME(characterFailed,"characterFailed");
	HX_MARK_MEMBER_NAME(missingText,"missingText");
	HX_MARK_MEMBER_NAME(missingTextTimer,"missingTextTimer");
	 ::backend::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ChartingState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(ignoreWarnings,"ignoreWarnings");
	HX_VISIT_MEMBER_NAME(curNoteTypes,"curNoteTypes");
	HX_VISIT_MEMBER_NAME(undos,"undos");
	HX_VISIT_MEMBER_NAME(redos,"redos");
	HX_VISIT_MEMBER_NAME(eventStuff,"eventStuff");
	HX_VISIT_MEMBER_NAME(_file,"_file");
	HX_VISIT_MEMBER_NAME(UI_box,"UI_box");
	HX_VISIT_MEMBER_NAME(bpmTxt,"bpmTxt");
	HX_VISIT_MEMBER_NAME(camPos,"camPos");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(quant,"quant");
	HX_VISIT_MEMBER_NAME(strumLineNotes,"strumLineNotes");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(amountSteps,"amountSteps");
	HX_VISIT_MEMBER_NAME(bullshitUI,"bullshitUI");
	HX_VISIT_MEMBER_NAME(highlight,"highlight");
	HX_VISIT_MEMBER_NAME(CAM_OFFSET,"CAM_OFFSET");
	HX_VISIT_MEMBER_NAME(dummyArrow,"dummyArrow");
	HX_VISIT_MEMBER_NAME(curRenderedSustains,"curRenderedSustains");
	HX_VISIT_MEMBER_NAME(curRenderedNotes,"curRenderedNotes");
	HX_VISIT_MEMBER_NAME(curRenderedNoteType,"curRenderedNoteType");
	HX_VISIT_MEMBER_NAME(nextRenderedSustains,"nextRenderedSustains");
	HX_VISIT_MEMBER_NAME(nextRenderedNotes,"nextRenderedNotes");
	HX_VISIT_MEMBER_NAME(gridBG,"gridBG");
	HX_VISIT_MEMBER_NAME(nextGridBG,"nextGridBG");
	HX_VISIT_MEMBER_NAME(daquantspot,"daquantspot");
	HX_VISIT_MEMBER_NAME(curEventSelected,"curEventSelected");
	HX_VISIT_MEMBER_NAME(curUndoIndex,"curUndoIndex");
	HX_VISIT_MEMBER_NAME(curRedoIndex,"curRedoIndex");
	HX_VISIT_MEMBER_NAME(_song,"_song");
	HX_VISIT_MEMBER_NAME(curSelectedNote,"curSelectedNote");
	HX_VISIT_MEMBER_NAME(playbackSpeed,"playbackSpeed");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(opponentVocals,"opponentVocals");
	HX_VISIT_MEMBER_NAME(leftIcon,"leftIcon");
	HX_VISIT_MEMBER_NAME(rightIcon,"rightIcon");
	HX_VISIT_MEMBER_NAME(value1InputText,"value1InputText");
	HX_VISIT_MEMBER_NAME(value2InputText,"value2InputText");
	HX_VISIT_MEMBER_NAME(currentSongName,"currentSongName");
	HX_VISIT_MEMBER_NAME(zoomTxt,"zoomTxt");
	HX_VISIT_MEMBER_NAME(zoomList,"zoomList");
	HX_VISIT_MEMBER_NAME(curZoom,"curZoom");
	HX_VISIT_MEMBER_NAME(blockPressWhileTypingOn,"blockPressWhileTypingOn");
	HX_VISIT_MEMBER_NAME(blockPressWhileTypingOnStepper,"blockPressWhileTypingOnStepper");
	HX_VISIT_MEMBER_NAME(blockPressWhileScrolling,"blockPressWhileScrolling");
	HX_VISIT_MEMBER_NAME(waveformSprite,"waveformSprite");
	HX_VISIT_MEMBER_NAME(gridLayer,"gridLayer");
	HX_VISIT_MEMBER_NAME(quantizations,"quantizations");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(mouseQuant,"mouseQuant");
	HX_VISIT_MEMBER_NAME(check_mute_inst,"check_mute_inst");
	HX_VISIT_MEMBER_NAME(check_mute_vocals,"check_mute_vocals");
	HX_VISIT_MEMBER_NAME(check_mute_vocals_opponent,"check_mute_vocals_opponent");
	HX_VISIT_MEMBER_NAME(check_vortex,"check_vortex");
	HX_VISIT_MEMBER_NAME(check_warnings,"check_warnings");
	HX_VISIT_MEMBER_NAME(playSoundBf,"playSoundBf");
	HX_VISIT_MEMBER_NAME(playSoundDad,"playSoundDad");
	HX_VISIT_MEMBER_NAME(UI_songTitle,"UI_songTitle");
	HX_VISIT_MEMBER_NAME(stageDropDown,"stageDropDown");
	HX_VISIT_MEMBER_NAME(sliderRate,"sliderRate");
	HX_VISIT_MEMBER_NAME(stepperBeats,"stepperBeats");
	HX_VISIT_MEMBER_NAME(check_mustHitSection,"check_mustHitSection");
	HX_VISIT_MEMBER_NAME(check_gfSection,"check_gfSection");
	HX_VISIT_MEMBER_NAME(check_changeBPM,"check_changeBPM");
	HX_VISIT_MEMBER_NAME(stepperSectionBPM,"stepperSectionBPM");
	HX_VISIT_MEMBER_NAME(check_altAnim,"check_altAnim");
	HX_VISIT_MEMBER_NAME(sectionToCopy,"sectionToCopy");
	HX_VISIT_MEMBER_NAME(notesCopied,"notesCopied");
	HX_VISIT_MEMBER_NAME(stepperSusLength,"stepperSusLength");
	HX_VISIT_MEMBER_NAME(strumTimeInputText,"strumTimeInputText");
	HX_VISIT_MEMBER_NAME(noteTypeDropDown,"noteTypeDropDown");
	HX_VISIT_MEMBER_NAME(currentType,"currentType");
	HX_VISIT_MEMBER_NAME(eventDropDown,"eventDropDown");
	HX_VISIT_MEMBER_NAME(descText,"descText");
	HX_VISIT_MEMBER_NAME(selectedEventText,"selectedEventText");
	HX_VISIT_MEMBER_NAME(metronome,"metronome");
	HX_VISIT_MEMBER_NAME(mouseScrollingQuant,"mouseScrollingQuant");
	HX_VISIT_MEMBER_NAME(metronomeStepper,"metronomeStepper");
	HX_VISIT_MEMBER_NAME(metronomeOffsetStepper,"metronomeOffsetStepper");
	HX_VISIT_MEMBER_NAME(disableAutoScrolling,"disableAutoScrolling");
	HX_VISIT_MEMBER_NAME(instVolume,"instVolume");
	HX_VISIT_MEMBER_NAME(voicesVolume,"voicesVolume");
	HX_VISIT_MEMBER_NAME(voicesOppVolume,"voicesOppVolume");
	HX_VISIT_MEMBER_NAME(gameOverCharacterInputText,"gameOverCharacterInputText");
	HX_VISIT_MEMBER_NAME(gameOverSoundInputText,"gameOverSoundInputText");
	HX_VISIT_MEMBER_NAME(gameOverLoopInputText,"gameOverLoopInputText");
	HX_VISIT_MEMBER_NAME(gameOverEndInputText,"gameOverEndInputText");
	HX_VISIT_MEMBER_NAME(noteSkinInputText,"noteSkinInputText");
	HX_VISIT_MEMBER_NAME(noteSplashesInputText,"noteSplashesInputText");
	HX_VISIT_MEMBER_NAME(playtesting,"playtesting");
	HX_VISIT_MEMBER_NAME(playtestingTime,"playtestingTime");
	HX_VISIT_MEMBER_NAME(playtestingOnComplete,"playtestingOnComplete");
	HX_VISIT_MEMBER_NAME(updatedSection,"updatedSection");
	HX_VISIT_MEMBER_NAME(lastConductorPos,"lastConductorPos");
	HX_VISIT_MEMBER_NAME(colorSine,"colorSine");
	HX_VISIT_MEMBER_NAME(lastSecBeats,"lastSecBeats");
	HX_VISIT_MEMBER_NAME(lastSecBeatsNext,"lastSecBeatsNext");
	HX_VISIT_MEMBER_NAME(columns,"columns");
	HX_VISIT_MEMBER_NAME(waveformPrinted,"waveformPrinted");
	HX_VISIT_MEMBER_NAME(wavData,"wavData");
	HX_VISIT_MEMBER_NAME(lastWaveformHeight,"lastWaveformHeight");
	HX_VISIT_MEMBER_NAME(characterData,"characterData");
	HX_VISIT_MEMBER_NAME(characterFailed,"characterFailed");
	HX_VISIT_MEMBER_NAME(missingText,"missingText");
	HX_VISIT_MEMBER_NAME(missingTextTimer,"missingTextTimer");
	 ::backend::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ChartingState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return ::hx::Val( text ); }
		if (HX_FIELD_EQ(inName,"redo") ) { return ::hx::Val( redo_dyn() ); }
		if (HX_FIELD_EQ(inName,"undo") ) { return ::hx::Val( undo_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"undos") ) { return ::hx::Val( undos ); }
		if (HX_FIELD_EQ(inName,"redos") ) { return ::hx::Val( redos ); }
		if (HX_FIELD_EQ(inName,"_file") ) { return ::hx::Val( _file ); }
		if (HX_FIELD_EQ(inName,"quant") ) { return ::hx::Val( quant ); }
		if (HX_FIELD_EQ(inName,"_song") ) { return ::hx::Val( _song ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { return ::hx::Val( UI_box ); }
		if (HX_FIELD_EQ(inName,"bpmTxt") ) { return ::hx::Val( bpmTxt ); }
		if (HX_FIELD_EQ(inName,"camPos") ) { return ::hx::Val( camPos ); }
		if (HX_FIELD_EQ(inName,"gridBG") ) { return ::hx::Val( gridBG ); }
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"zoomTxt") ) { return ::hx::Val( zoomTxt ); }
		if (HX_FIELD_EQ(inName,"curZoom") ) { return ::hx::Val( curZoom ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"columns") ) { return ::hx::Val( columns ); }
		if (HX_FIELD_EQ(inName,"wavData") ) { return ::hx::Val( wavData ); }
		if (HX_FIELD_EQ(inName,"addNote") ) { return ::hx::Val( addNote_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"leftIcon") ) { return ::hx::Val( leftIcon ); }
		if (HX_FIELD_EQ(inName,"zoomList") ) { return ::hx::Val( zoomList ); }
		if (HX_FIELD_EQ(inName,"descText") ) { return ::hx::Val( descText ); }
		if (HX_FIELD_EQ(inName,"loadSong") ) { return ::hx::Val( loadSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"getEvent") ) { return ::hx::Val( getEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNotes") ) { return ::hx::Val( getNotes_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadJson") ) { return ::hx::Val( loadJson_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"highlight") ) { return ::hx::Val( highlight ); }
		if (HX_FIELD_EQ(inName,"rightIcon") ) { return ::hx::Val( rightIcon ); }
		if (HX_FIELD_EQ(inName,"gridLayer") ) { return ::hx::Val( gridLayer ); }
		if (HX_FIELD_EQ(inName,"addSongUI") ) { return ::hx::Val( addSongUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"addNoteUI") ) { return ::hx::Val( addNoteUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"metronome") ) { return ::hx::Val( metronome ); }
		if (HX_FIELD_EQ(inName,"addDataUI") ) { return ::hx::Val( addDataUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"colorSine") ) { return ::hx::Val( colorSine ); }
		if (HX_FIELD_EQ(inName,"clearSong") ) { return ::hx::Val( clearSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"saveLevel") ) { return ::hx::Val( saveLevel_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"eventStuff") ) { return ::hx::Val( eventStuff ); }
		if (HX_FIELD_EQ(inName,"bullshitUI") ) { return ::hx::Val( bullshitUI ); }
		if (HX_FIELD_EQ(inName,"CAM_OFFSET") ) { return ::hx::Val( CAM_OFFSET ); }
		if (HX_FIELD_EQ(inName,"dummyArrow") ) { return ::hx::Val( dummyArrow ); }
		if (HX_FIELD_EQ(inName,"nextGridBG") ) { return ::hx::Val( nextGridBG ); }
		if (HX_FIELD_EQ(inName,"mouseQuant") ) { return ::hx::Val( mouseQuant ); }
		if (HX_FIELD_EQ(inName,"sliderRate") ) { return ::hx::Val( sliderRate ); }
		if (HX_FIELD_EQ(inName,"instVolume") ) { return ::hx::Val( instVolume ); }
		if (HX_FIELD_EQ(inName,"generateUI") ) { return ::hx::Val( generateUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateZoom") ) { return ::hx::Val( updateZoom_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateGrid") ) { return ::hx::Val( updateGrid_dyn() ); }
		if (HX_FIELD_EQ(inName,"addSection") ) { return ::hx::Val( addSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"selectNote") ) { return ::hx::Val( selectNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"deleteNote") ) { return ::hx::Val( deleteNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"sortByTime") ) { return ::hx::Val( sortByTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"saveEvents") ) { return ::hx::Val( saveEvents_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"amountSteps") ) { return ::hx::Val( amountSteps ); }
		if (HX_FIELD_EQ(inName,"daquantspot") ) { return ::hx::Val( daquantspot ); }
		if (HX_FIELD_EQ(inName,"playSoundBf") ) { return ::hx::Val( playSoundBf ); }
		if (HX_FIELD_EQ(inName,"notesCopied") ) { return ::hx::Val( notesCopied ); }
		if (HX_FIELD_EQ(inName,"currentType") ) { return ::hx::Val( currentType ); }
		if (HX_FIELD_EQ(inName,"addEventsUI") ) { return ::hx::Val( addEventsUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"playtesting") ) { return ::hx::Val( playtesting ); }
		if (HX_FIELD_EQ(inName,"updateHeads") ) { return ::hx::Val( updateHeads_dyn() ); }
		if (HX_FIELD_EQ(inName,"missingText") ) { return ::hx::Val( missingText ); }
		if (HX_FIELD_EQ(inName,"clearEvents") ) { return ::hx::Val( clearEvents_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveError") ) { return ::hx::Val( onSaveError_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"curNoteTypes") ) { return ::hx::Val( curNoteTypes ); }
		if (HX_FIELD_EQ(inName,"curUndoIndex") ) { return ::hx::Val( curUndoIndex ); }
		if (HX_FIELD_EQ(inName,"curRedoIndex") ) { return ::hx::Val( curRedoIndex ); }
		if (HX_FIELD_EQ(inName,"check_vortex") ) { return ::hx::Val( check_vortex ); }
		if (HX_FIELD_EQ(inName,"playSoundDad") ) { return ::hx::Val( playSoundDad ); }
		if (HX_FIELD_EQ(inName,"UI_songTitle") ) { return ::hx::Val( UI_songTitle ); }
		if (HX_FIELD_EQ(inName,"stepperBeats") ) { return ::hx::Val( stepperBeats ); }
		if (HX_FIELD_EQ(inName,"addSectionUI") ) { return ::hx::Val( addSectionUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"voicesVolume") ) { return ::hx::Val( voicesVolume ); }
		if (HX_FIELD_EQ(inName,"generateSong") ) { return ::hx::Val( generateSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"lastSecBeats") ) { return ::hx::Val( lastSecBeats ); }
		if (HX_FIELD_EQ(inName,"waveformData") ) { return ::hx::Val( waveformData_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetSection") ) { return ::hx::Val( resetSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateNoteUI") ) { return ::hx::Val( updateNoteUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"getEventName") ) { return ::hx::Val( getEventName_dyn() ); }
		if (HX_FIELD_EQ(inName,"setupSusNote") ) { return ::hx::Val( setupSusNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"doANoteThing") ) { return ::hx::Val( doANoteThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"getStrumTime") ) { return ::hx::Val( getStrumTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"autosaveSong") ) { return ::hx::Val( autosaveSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveCancel") ) { return ::hx::Val( onSaveCancel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"playbackSpeed") ) { return ::hx::Val( playbackSpeed ); }
		if (HX_FIELD_EQ(inName,"quantizations") ) { return ::hx::Val( quantizations ); }
		if (HX_FIELD_EQ(inName,"stageDropDown") ) { return ::hx::Val( stageDropDown ); }
		if (HX_FIELD_EQ(inName,"check_altAnim") ) { return ::hx::Val( check_altAnim ); }
		if (HX_FIELD_EQ(inName,"sectionToCopy") ) { return ::hx::Val( sectionToCopy ); }
		if (HX_FIELD_EQ(inName,"eventDropDown") ) { return ::hx::Val( eventDropDown ); }
		if (HX_FIELD_EQ(inName,"addChartingUI") ) { return ::hx::Val( addChartingUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return ::hx::Val( closeSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeSection") ) { return ::hx::Val( changeSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"characterData") ) { return ::hx::Val( characterData ); }
		if (HX_FIELD_EQ(inName,"setupNoteData") ) { return ::hx::Val( setupNoteData_dyn() ); }
		if (HX_FIELD_EQ(inName,"getYfromStrum") ) { return ::hx::Val( getYfromStrum_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"ignoreWarnings") ) { return ::hx::Val( ignoreWarnings ); }
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { return ::hx::Val( strumLineNotes ); }
		if (HX_FIELD_EQ(inName,"opponentVocals") ) { return ::hx::Val( opponentVocals ); }
		if (HX_FIELD_EQ(inName,"waveformSprite") ) { return ::hx::Val( waveformSprite ); }
		if (HX_FIELD_EQ(inName,"check_warnings") ) { return ::hx::Val( check_warnings ); }
		if (HX_FIELD_EQ(inName,"updatedSection") ) { return ::hx::Val( updatedSection ); }
		if (HX_FIELD_EQ(inName,"updateWaveform") ) { return ::hx::Val( updateWaveform_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateJsonData") ) { return ::hx::Val( updateJsonData_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveComplete") ) { return ::hx::Val( onSaveComplete_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"curSelectedNote") ) { return ::hx::Val( curSelectedNote ); }
		if (HX_FIELD_EQ(inName,"value1InputText") ) { return ::hx::Val( value1InputText ); }
		if (HX_FIELD_EQ(inName,"value2InputText") ) { return ::hx::Val( value2InputText ); }
		if (HX_FIELD_EQ(inName,"currentSongName") ) { return ::hx::Val( currentSongName ); }
		if (HX_FIELD_EQ(inName,"check_mute_inst") ) { return ::hx::Val( check_mute_inst ); }
		if (HX_FIELD_EQ(inName,"check_gfSection") ) { return ::hx::Val( check_gfSection ); }
		if (HX_FIELD_EQ(inName,"check_changeBPM") ) { return ::hx::Val( check_changeBPM ); }
		if (HX_FIELD_EQ(inName,"voicesOppVolume") ) { return ::hx::Val( voicesOppVolume ); }
		if (HX_FIELD_EQ(inName,"playtestingTime") ) { return ::hx::Val( playtestingTime ); }
		if (HX_FIELD_EQ(inName,"reloadGridLayer") ) { return ::hx::Val( reloadGridLayer_dyn() ); }
		if (HX_FIELD_EQ(inName,"waveformPrinted") ) { return ::hx::Val( waveformPrinted ); }
		if (HX_FIELD_EQ(inName,"updateSectionUI") ) { return ::hx::Val( updateSectionUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"characterFailed") ) { return ::hx::Val( characterFailed ); }
		if (HX_FIELD_EQ(inName,"getSectionBeats") ) { return ::hx::Val( getSectionBeats_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"curRenderedNotes") ) { return ::hx::Val( curRenderedNotes ); }
		if (HX_FIELD_EQ(inName,"curEventSelected") ) { return ::hx::Val( curEventSelected ); }
		if (HX_FIELD_EQ(inName,"stepperSusLength") ) { return ::hx::Val( stepperSusLength ); }
		if (HX_FIELD_EQ(inName,"noteTypeDropDown") ) { return ::hx::Val( noteTypeDropDown ); }
		if (HX_FIELD_EQ(inName,"metronomeStepper") ) { return ::hx::Val( metronomeStepper ); }
		if (HX_FIELD_EQ(inName,"sectionStartTime") ) { return ::hx::Val( sectionStartTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"lastConductorPos") ) { return ::hx::Val( lastConductorPos ); }
		if (HX_FIELD_EQ(inName,"lastSecBeatsNext") ) { return ::hx::Val( lastSecBeatsNext ); }
		if (HX_FIELD_EQ(inName,"strumLineUpdateY") ) { return ::hx::Val( strumLineUpdateY_dyn() ); }
		if (HX_FIELD_EQ(inName,"recalculateSteps") ) { return ::hx::Val( recalculateSteps_dyn() ); }
		if (HX_FIELD_EQ(inName,"missingTextTimer") ) { return ::hx::Val( missingTextTimer ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nextRenderedNotes") ) { return ::hx::Val( nextRenderedNotes ); }
		if (HX_FIELD_EQ(inName,"check_mute_vocals") ) { return ::hx::Val( check_mute_vocals ); }
		if (HX_FIELD_EQ(inName,"stepperSectionBPM") ) { return ::hx::Val( stepperSectionBPM ); }
		if (HX_FIELD_EQ(inName,"selectedEventText") ) { return ::hx::Val( selectedEventText ); }
		if (HX_FIELD_EQ(inName,"noteSkinInputText") ) { return ::hx::Val( noteSkinInputText ); }
		if (HX_FIELD_EQ(inName,"changeNoteSustain") ) { return ::hx::Val( changeNoteSustain_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadCharacterFile") ) { return ::hx::Val( loadCharacterFile_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"strumTimeInputText") ) { return ::hx::Val( strumTimeInputText ); }
		if (HX_FIELD_EQ(inName,"setAllLabelsOffset") ) { return ::hx::Val( setAllLabelsOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"lastWaveformHeight") ) { return ::hx::Val( lastWaveformHeight ); }
		if (HX_FIELD_EQ(inName,"getYfromStrumNotes") ) { return ::hx::Val( getYfromStrumNotes_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"curRenderedSustains") ) { return ::hx::Val( curRenderedSustains ); }
		if (HX_FIELD_EQ(inName,"curRenderedNoteType") ) { return ::hx::Val( curRenderedNoteType ); }
		if (HX_FIELD_EQ(inName,"changeEventSelected") ) { return ::hx::Val( changeEventSelected_dyn() ); }
		if (HX_FIELD_EQ(inName,"mouseScrollingQuant") ) { return ::hx::Val( mouseScrollingQuant ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"nextRenderedSustains") ) { return ::hx::Val( nextRenderedSustains ); }
		if (HX_FIELD_EQ(inName,"check_mustHitSection") ) { return ::hx::Val( check_mustHitSection ); }
		if (HX_FIELD_EQ(inName,"disableAutoScrolling") ) { return ::hx::Val( disableAutoScrolling ); }
		if (HX_FIELD_EQ(inName,"gameOverEndInputText") ) { return ::hx::Val( gameOverEndInputText ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"gameOverLoopInputText") ) { return ::hx::Val( gameOverLoopInputText ); }
		if (HX_FIELD_EQ(inName,"noteSplashesInputText") ) { return ::hx::Val( noteSplashesInputText ); }
		if (HX_FIELD_EQ(inName,"playtestingOnComplete") ) { return ::hx::Val( playtestingOnComplete ); }
		if (HX_FIELD_EQ(inName,"pauseAndSetVocalsTime") ) { return ::hx::Val( pauseAndSetVocalsTime_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"metronomeOffsetStepper") ) { return ::hx::Val( metronomeOffsetStepper ); }
		if (HX_FIELD_EQ(inName,"gameOverSoundInputText") ) { return ::hx::Val( gameOverSoundInputText ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"blockPressWhileTypingOn") ) { return ::hx::Val( blockPressWhileTypingOn ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"blockPressWhileScrolling") ) { return ::hx::Val( blockPressWhileScrolling ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"check_mute_vocals_opponent") ) { return ::hx::Val( check_mute_vocals_opponent ); }
		if (HX_FIELD_EQ(inName,"gameOverCharacterInputText") ) { return ::hx::Val( gameOverCharacterInputText ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"blockPressWhileTypingOnStepper") ) { return ::hx::Val( blockPressWhileTypingOnStepper ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ChartingState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"curSec") ) { outValue = ( curSec ); return true; }
		if (HX_FIELD_EQ(inName,"vortex") ) { outValue = ( vortex ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lastSong") ) { outValue = ( lastSong ); return true; }
		if (HX_FIELD_EQ(inName,"curQuant") ) { outValue = ( curQuant ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"GRID_SIZE") ) { outValue = ( GRID_SIZE ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastSection") ) { outValue = ( lastSection ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"noteTypeList") ) { outValue = ( noteTypeList ); return true; }
		if (HX_FIELD_EQ(inName,"quantization") ) { outValue = ( quantization ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"goToPlayState") ) { outValue = ( goToPlayState ); return true; }
	}
	return false;
}

::hx::Val ChartingState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"undos") ) { undos=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"redos") ) { redos=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_file") ) { _file=inValue.Cast<  ::openfl::net::FileReference >(); return inValue; }
		if (HX_FIELD_EQ(inName,"quant") ) { quant=inValue.Cast<  ::objects::AttachedSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_song") ) { _song=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { UI_box=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bpmTxt") ) { bpmTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camPos") ) { camPos=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridBG") ) { gridBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zoomTxt") ) { zoomTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curZoom") ) { curZoom=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"columns") ) { columns=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wavData") ) { wavData=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"leftIcon") ) { leftIcon=inValue.Cast<  ::objects::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zoomList") ) { zoomList=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"descText") ) { descText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"highlight") ) { highlight=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightIcon") ) { rightIcon=inValue.Cast<  ::objects::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridLayer") ) { gridLayer=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"metronome") ) { metronome=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colorSine") ) { colorSine=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"eventStuff") ) { eventStuff=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bullshitUI") ) { bullshitUI=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CAM_OFFSET") ) { CAM_OFFSET=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dummyArrow") ) { dummyArrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nextGridBG") ) { nextGridBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseQuant") ) { mouseQuant=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sliderRate") ) { sliderRate=inValue.Cast<  ::flixel::addons::ui::FlxUISlider >(); return inValue; }
		if (HX_FIELD_EQ(inName,"instVolume") ) { instVolume=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"amountSteps") ) { amountSteps=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"daquantspot") ) { daquantspot=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playSoundBf") ) { playSoundBf=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"notesCopied") ) { notesCopied=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentType") ) { currentType=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playtesting") ) { playtesting=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"missingText") ) { missingText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"curNoteTypes") ) { curNoteTypes=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curUndoIndex") ) { curUndoIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curRedoIndex") ) { curRedoIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_vortex") ) { check_vortex=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playSoundDad") ) { playSoundDad=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UI_songTitle") ) { UI_songTitle=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperBeats") ) { stepperBeats=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"voicesVolume") ) { voicesVolume=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastSecBeats") ) { lastSecBeats=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"playbackSpeed") ) { playbackSpeed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"quantizations") ) { quantizations=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stageDropDown") ) { stageDropDown=inValue.Cast<  ::flixel::addons::ui::FlxUIDropDownMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_altAnim") ) { check_altAnim=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sectionToCopy") ) { sectionToCopy=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventDropDown") ) { eventDropDown=inValue.Cast<  ::flixel::addons::ui::FlxUIDropDownMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"characterData") ) { characterData=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"ignoreWarnings") ) { ignoreWarnings=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { strumLineNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opponentVocals") ) { opponentVocals=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"waveformSprite") ) { waveformSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_warnings") ) { check_warnings=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updatedSection") ) { updatedSection=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"curSelectedNote") ) { curSelectedNote=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"value1InputText") ) { value1InputText=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"value2InputText") ) { value2InputText=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentSongName") ) { currentSongName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_mute_inst") ) { check_mute_inst=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_gfSection") ) { check_gfSection=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_changeBPM") ) { check_changeBPM=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"voicesOppVolume") ) { voicesOppVolume=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playtestingTime") ) { playtestingTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"waveformPrinted") ) { waveformPrinted=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"characterFailed") ) { characterFailed=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"curRenderedNotes") ) { curRenderedNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curEventSelected") ) { curEventSelected=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperSusLength") ) { stepperSusLength=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteTypeDropDown") ) { noteTypeDropDown=inValue.Cast<  ::flixel::addons::ui::FlxUIDropDownMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"metronomeStepper") ) { metronomeStepper=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastConductorPos") ) { lastConductorPos=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastSecBeatsNext") ) { lastSecBeatsNext=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"missingTextTimer") ) { missingTextTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nextRenderedNotes") ) { nextRenderedNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_mute_vocals") ) { check_mute_vocals=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperSectionBPM") ) { stepperSectionBPM=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectedEventText") ) { selectedEventText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteSkinInputText") ) { noteSkinInputText=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"strumTimeInputText") ) { strumTimeInputText=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastWaveformHeight") ) { lastWaveformHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"curRenderedSustains") ) { curRenderedSustains=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curRenderedNoteType") ) { curRenderedNoteType=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseScrollingQuant") ) { mouseScrollingQuant=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"nextRenderedSustains") ) { nextRenderedSustains=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_mustHitSection") ) { check_mustHitSection=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"disableAutoScrolling") ) { disableAutoScrolling=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gameOverEndInputText") ) { gameOverEndInputText=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"gameOverLoopInputText") ) { gameOverLoopInputText=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteSplashesInputText") ) { noteSplashesInputText=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playtestingOnComplete") ) { playtestingOnComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"metronomeOffsetStepper") ) { metronomeOffsetStepper=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gameOverSoundInputText") ) { gameOverSoundInputText=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"blockPressWhileTypingOn") ) { blockPressWhileTypingOn=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"blockPressWhileScrolling") ) { blockPressWhileScrolling=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"check_mute_vocals_opponent") ) { check_mute_vocals_opponent=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gameOverCharacterInputText") ) { gameOverCharacterInputText=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"blockPressWhileTypingOnStepper") ) { blockPressWhileTypingOnStepper=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ChartingState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"curSec") ) { curSec=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"vortex") ) { vortex=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lastSong") ) { lastSong=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"curQuant") ) { curQuant=ioValue.Cast< int >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"GRID_SIZE") ) { GRID_SIZE=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastSection") ) { lastSection=ioValue.Cast< int >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"noteTypeList") ) { noteTypeList=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"quantization") ) { quantization=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"goToPlayState") ) { goToPlayState=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void ChartingState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("ignoreWarnings",c9,0d,e8,46));
	outFields->push(HX_("curNoteTypes",87,65,03,ee));
	outFields->push(HX_("undos",cf,99,e3,a6));
	outFields->push(HX_("redos",b5,f0,bc,e6));
	outFields->push(HX_("eventStuff",7a,a0,75,00));
	outFields->push(HX_("_file",5b,ea,cc,f6));
	outFields->push(HX_("UI_box",60,07,ac,43));
	outFields->push(HX_("bpmTxt",d1,bc,26,f4));
	outFields->push(HX_("camPos",c5,54,7c,b7));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("quant",83,7e,e7,5d));
	outFields->push(HX_("strumLineNotes",24,f1,48,a4));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("amountSteps",af,2a,91,a5));
	outFields->push(HX_("bullshitUI",67,a9,a3,d3));
	outFields->push(HX_("highlight",34,56,00,ed));
	outFields->push(HX_("CAM_OFFSET",23,b1,2e,98));
	outFields->push(HX_("dummyArrow",81,8a,75,ae));
	outFields->push(HX_("curRenderedSustains",65,b2,8a,50));
	outFields->push(HX_("curRenderedNotes",2c,e1,fb,dc));
	outFields->push(HX_("curRenderedNoteType",c1,b7,da,f3));
	outFields->push(HX_("nextRenderedSustains",d8,07,f7,96));
	outFields->push(HX_("nextRenderedNotes",d9,f5,6d,f4));
	outFields->push(HX_("gridBG",0b,ce,23,18));
	outFields->push(HX_("nextGridBG",5e,7f,55,cd));
	outFields->push(HX_("daquantspot",e8,b3,6e,47));
	outFields->push(HX_("curEventSelected",f5,b2,2f,83));
	outFields->push(HX_("curUndoIndex",ae,2c,ee,82));
	outFields->push(HX_("curRedoIndex",94,ee,53,07));
	outFields->push(HX_("_song",b4,3f,69,ff));
	outFields->push(HX_("curSelectedNote",8d,49,f4,47));
	outFields->push(HX_("playbackSpeed",6c,73,8d,56));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("opponentVocals",db,d1,18,64));
	outFields->push(HX_("leftIcon",20,2b,ae,4c));
	outFields->push(HX_("rightIcon",75,3d,79,b0));
	outFields->push(HX_("value1InputText",17,f2,52,45));
	outFields->push(HX_("value2InputText",f6,69,9d,05));
	outFields->push(HX_("currentSongName",19,8a,29,0b));
	outFields->push(HX_("zoomTxt",1d,71,9e,64));
	outFields->push(HX_("zoomList",11,71,af,a0));
	outFields->push(HX_("curZoom",b3,14,0e,bc));
	outFields->push(HX_("blockPressWhileTypingOn",71,5f,34,ba));
	outFields->push(HX_("blockPressWhileTypingOnStepper",a0,0d,9b,fa));
	outFields->push(HX_("blockPressWhileScrolling",9a,a6,3b,0c));
	outFields->push(HX_("waveformSprite",62,23,1b,4c));
	outFields->push(HX_("gridLayer",2b,cd,83,64));
	outFields->push(HX_("quantizations",52,ec,de,ff));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("mouseQuant",1e,72,b4,7b));
	outFields->push(HX_("check_mute_inst",b5,5c,b4,05));
	outFields->push(HX_("check_mute_vocals",0d,83,75,dc));
	outFields->push(HX_("check_mute_vocals_opponent",4f,e4,58,8c));
	outFields->push(HX_("check_vortex",45,4a,f6,f1));
	outFields->push(HX_("check_warnings",2e,3c,0d,95));
	outFields->push(HX_("playSoundBf",df,38,00,fb));
	outFields->push(HX_("playSoundDad",cc,0a,33,a5));
	outFields->push(HX_("UI_songTitle",98,d4,53,2f));
	outFields->push(HX_("stageDropDown",0f,b5,6b,4d));
	outFields->push(HX_("sliderRate",a1,69,96,4f));
	outFields->push(HX_("stepperBeats",6c,d3,fd,5a));
	outFields->push(HX_("check_mustHitSection",12,30,fc,78));
	outFields->push(HX_("check_gfSection",0f,c4,ae,b2));
	outFields->push(HX_("check_changeBPM",d8,2d,43,fc));
	outFields->push(HX_("stepperSectionBPM",6b,ba,b7,95));
	outFields->push(HX_("check_altAnim",23,ee,53,2e));
	outFields->push(HX_("sectionToCopy",95,9a,ef,19));
	outFields->push(HX_("notesCopied",65,7e,06,92));
	outFields->push(HX_("stepperSusLength",06,e6,fc,95));
	outFields->push(HX_("strumTimeInputText",01,cd,57,94));
	outFields->push(HX_("noteTypeDropDown",1d,20,c5,82));
	outFields->push(HX_("currentType",93,cb,9a,85));
	outFields->push(HX_("eventDropDown",6b,ce,0b,a2));
	outFields->push(HX_("descText",9e,53,35,f3));
	outFields->push(HX_("selectedEventText",0c,e8,ef,68));
	outFields->push(HX_("metronome",32,23,9e,00));
	outFields->push(HX_("mouseScrollingQuant",53,5c,93,0b));
	outFields->push(HX_("metronomeStepper",ff,b3,47,cf));
	outFields->push(HX_("metronomeOffsetStepper",2c,93,6c,12));
	outFields->push(HX_("disableAutoScrolling",7e,ea,49,43));
	outFields->push(HX_("instVolume",40,fa,90,9f));
	outFields->push(HX_("voicesVolume",3b,cb,86,73));
	outFields->push(HX_("voicesOppVolume",a8,b8,2e,3b));
	outFields->push(HX_("gameOverCharacterInputText",f4,98,5e,89));
	outFields->push(HX_("gameOverSoundInputText",0e,98,81,77));
	outFields->push(HX_("gameOverLoopInputText",8d,8c,1f,d0));
	outFields->push(HX_("gameOverEndInputText",02,72,5c,88));
	outFields->push(HX_("noteSkinInputText",48,c4,a8,3c));
	outFields->push(HX_("noteSplashesInputText",30,65,ff,7a));
	outFields->push(HX_("playtesting",5c,fc,e0,34));
	outFields->push(HX_("playtestingTime",89,52,c2,4f));
	outFields->push(HX_("updatedSection",ea,f8,55,de));
	outFields->push(HX_("lastConductorPos",63,a7,e7,75));
	outFields->push(HX_("colorSine",50,21,c1,27));
	outFields->push(HX_("lastSecBeats",62,b9,06,54));
	outFields->push(HX_("lastSecBeatsNext",75,c3,77,91));
	outFields->push(HX_("columns",dd,ac,59,f3));
	outFields->push(HX_("waveformPrinted",cf,ff,4c,70));
	outFields->push(HX_("wavData",76,29,9d,3b));
	outFields->push(HX_("lastWaveformHeight",3a,18,59,92));
	outFields->push(HX_("characterData",73,e6,4f,3b));
	outFields->push(HX_("characterFailed",46,ba,66,61));
	outFields->push(HX_("missingText",33,63,02,c1));
	outFields->push(HX_("missingTextTimer",92,53,0d,b4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ChartingState_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(ChartingState_obj,ignoreWarnings),HX_("ignoreWarnings",c9,0d,e8,46)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(ChartingState_obj,curNoteTypes),HX_("curNoteTypes",87,65,03,ee)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(ChartingState_obj,undos),HX_("undos",cf,99,e3,a6)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(ChartingState_obj,redos),HX_("redos",b5,f0,bc,e6)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(ChartingState_obj,eventStuff),HX_("eventStuff",7a,a0,75,00)},
	{::hx::fsObject /*  ::openfl::net::FileReference */ ,(int)offsetof(ChartingState_obj,_file),HX_("_file",5b,ea,cc,f6)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(ChartingState_obj,UI_box),HX_("UI_box",60,07,ac,43)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,bpmTxt),HX_("bpmTxt",d1,bc,26,f4)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(ChartingState_obj,camPos),HX_("camPos",c5,54,7c,b7)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsObject /*  ::objects::AttachedSprite */ ,(int)offsetof(ChartingState_obj,quant),HX_("quant",83,7e,e7,5d)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,strumLineNotes),HX_("strumLineNotes",24,f1,48,a4)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,amountSteps),HX_("amountSteps",af,2a,91,a5)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,bullshitUI),HX_("bullshitUI",67,a9,a3,d3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,highlight),HX_("highlight",34,56,00,ed)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,CAM_OFFSET),HX_("CAM_OFFSET",23,b1,2e,98)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,dummyArrow),HX_("dummyArrow",81,8a,75,ae)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,curRenderedSustains),HX_("curRenderedSustains",65,b2,8a,50)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,curRenderedNotes),HX_("curRenderedNotes",2c,e1,fb,dc)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,curRenderedNoteType),HX_("curRenderedNoteType",c1,b7,da,f3)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,nextRenderedSustains),HX_("nextRenderedSustains",d8,07,f7,96)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,nextRenderedNotes),HX_("nextRenderedNotes",d9,f5,6d,f4)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,gridBG),HX_("gridBG",0b,ce,23,18)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,nextGridBG),HX_("nextGridBG",5e,7f,55,cd)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,daquantspot),HX_("daquantspot",e8,b3,6e,47)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,curEventSelected),HX_("curEventSelected",f5,b2,2f,83)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,curUndoIndex),HX_("curUndoIndex",ae,2c,ee,82)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,curRedoIndex),HX_("curRedoIndex",94,ee,53,07)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ChartingState_obj,_song),HX_("_song",b4,3f,69,ff)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(ChartingState_obj,curSelectedNote),HX_("curSelectedNote",8d,49,f4,47)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,playbackSpeed),HX_("playbackSpeed",6c,73,8d,56)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(ChartingState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(ChartingState_obj,opponentVocals),HX_("opponentVocals",db,d1,18,64)},
	{::hx::fsObject /*  ::objects::HealthIcon */ ,(int)offsetof(ChartingState_obj,leftIcon),HX_("leftIcon",20,2b,ae,4c)},
	{::hx::fsObject /*  ::objects::HealthIcon */ ,(int)offsetof(ChartingState_obj,rightIcon),HX_("rightIcon",75,3d,79,b0)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(ChartingState_obj,value1InputText),HX_("value1InputText",17,f2,52,45)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(ChartingState_obj,value2InputText),HX_("value2InputText",f6,69,9d,05)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,currentSongName),HX_("currentSongName",19,8a,29,0b)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,zoomTxt),HX_("zoomTxt",1d,71,9e,64)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(ChartingState_obj,zoomList),HX_("zoomList",11,71,af,a0)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,curZoom),HX_("curZoom",b3,14,0e,bc)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,blockPressWhileTypingOn),HX_("blockPressWhileTypingOn",71,5f,34,ba)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,blockPressWhileTypingOnStepper),HX_("blockPressWhileTypingOnStepper",a0,0d,9b,fa)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,blockPressWhileScrolling),HX_("blockPressWhileScrolling",9a,a6,3b,0c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,waveformSprite),HX_("waveformSprite",62,23,1b,4c)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,gridLayer),HX_("gridLayer",2b,cd,83,64)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(ChartingState_obj,quantizations),HX_("quantizations",52,ec,de,ff)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,text),HX_("text",ad,cc,f9,4c)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,mouseQuant),HX_("mouseQuant",1e,72,b4,7b)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_mute_inst),HX_("check_mute_inst",b5,5c,b4,05)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_mute_vocals),HX_("check_mute_vocals",0d,83,75,dc)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_mute_vocals_opponent),HX_("check_mute_vocals_opponent",4f,e4,58,8c)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_vortex),HX_("check_vortex",45,4a,f6,f1)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_warnings),HX_("check_warnings",2e,3c,0d,95)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,playSoundBf),HX_("playSoundBf",df,38,00,fb)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,playSoundDad),HX_("playSoundDad",cc,0a,33,a5)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(ChartingState_obj,UI_songTitle),HX_("UI_songTitle",98,d4,53,2f)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIDropDownMenu */ ,(int)offsetof(ChartingState_obj,stageDropDown),HX_("stageDropDown",0f,b5,6b,4d)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUISlider */ ,(int)offsetof(ChartingState_obj,sliderRate),HX_("sliderRate",a1,69,96,4f)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperBeats),HX_("stepperBeats",6c,d3,fd,5a)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_mustHitSection),HX_("check_mustHitSection",12,30,fc,78)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_gfSection),HX_("check_gfSection",0f,c4,ae,b2)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_changeBPM),HX_("check_changeBPM",d8,2d,43,fc)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperSectionBPM),HX_("stepperSectionBPM",6b,ba,b7,95)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_altAnim),HX_("check_altAnim",23,ee,53,2e)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,sectionToCopy),HX_("sectionToCopy",95,9a,ef,19)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(ChartingState_obj,notesCopied),HX_("notesCopied",65,7e,06,92)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperSusLength),HX_("stepperSusLength",06,e6,fc,95)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(ChartingState_obj,strumTimeInputText),HX_("strumTimeInputText",01,cd,57,94)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIDropDownMenu */ ,(int)offsetof(ChartingState_obj,noteTypeDropDown),HX_("noteTypeDropDown",1d,20,c5,82)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,currentType),HX_("currentType",93,cb,9a,85)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIDropDownMenu */ ,(int)offsetof(ChartingState_obj,eventDropDown),HX_("eventDropDown",6b,ce,0b,a2)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,descText),HX_("descText",9e,53,35,f3)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,selectedEventText),HX_("selectedEventText",0c,e8,ef,68)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,metronome),HX_("metronome",32,23,9e,00)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,mouseScrollingQuant),HX_("mouseScrollingQuant",53,5c,93,0b)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,metronomeStepper),HX_("metronomeStepper",ff,b3,47,cf)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,metronomeOffsetStepper),HX_("metronomeOffsetStepper",2c,93,6c,12)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,disableAutoScrolling),HX_("disableAutoScrolling",7e,ea,49,43)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,instVolume),HX_("instVolume",40,fa,90,9f)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,voicesVolume),HX_("voicesVolume",3b,cb,86,73)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,voicesOppVolume),HX_("voicesOppVolume",a8,b8,2e,3b)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(ChartingState_obj,gameOverCharacterInputText),HX_("gameOverCharacterInputText",f4,98,5e,89)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(ChartingState_obj,gameOverSoundInputText),HX_("gameOverSoundInputText",0e,98,81,77)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(ChartingState_obj,gameOverLoopInputText),HX_("gameOverLoopInputText",8d,8c,1f,d0)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(ChartingState_obj,gameOverEndInputText),HX_("gameOverEndInputText",02,72,5c,88)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(ChartingState_obj,noteSkinInputText),HX_("noteSkinInputText",48,c4,a8,3c)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(ChartingState_obj,noteSplashesInputText),HX_("noteSplashesInputText",30,65,ff,7a)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,playtesting),HX_("playtesting",5c,fc,e0,34)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,playtestingTime),HX_("playtestingTime",89,52,c2,4f)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ChartingState_obj,playtestingOnComplete),HX_("playtestingOnComplete",74,60,92,a2)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,updatedSection),HX_("updatedSection",ea,f8,55,de)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,lastConductorPos),HX_("lastConductorPos",63,a7,e7,75)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,colorSine),HX_("colorSine",50,21,c1,27)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,lastSecBeats),HX_("lastSecBeats",62,b9,06,54)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,lastSecBeatsNext),HX_("lastSecBeatsNext",75,c3,77,91)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,columns),HX_("columns",dd,ac,59,f3)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,waveformPrinted),HX_("waveformPrinted",cf,ff,4c,70)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,wavData),HX_("wavData",76,29,9d,3b)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,lastWaveformHeight),HX_("lastWaveformHeight",3a,18,59,92)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ChartingState_obj,characterData),HX_("characterData",73,e6,4f,3b)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,characterFailed),HX_("characterFailed",46,ba,66,61)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,missingText),HX_("missingText",33,63,02,c1)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(ChartingState_obj,missingTextTimer),HX_("missingTextTimer",92,53,0d,b4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ChartingState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &ChartingState_obj::noteTypeList,HX_("noteTypeList",4a,36,de,09)},
	{::hx::fsBool,(void *) &ChartingState_obj::goToPlayState,HX_("goToPlayState",3a,b5,7a,82)},
	{::hx::fsInt,(void *) &ChartingState_obj::curSec,HX_("curSec",f1,3d,d0,3e)},
	{::hx::fsInt,(void *) &ChartingState_obj::lastSection,HX_("lastSection",2f,ba,83,12)},
	{::hx::fsString,(void *) &ChartingState_obj::lastSong,HX_("lastSong",4b,3d,a1,df)},
	{::hx::fsInt,(void *) &ChartingState_obj::GRID_SIZE,HX_("GRID_SIZE",1a,98,25,c9)},
	{::hx::fsInt,(void *) &ChartingState_obj::quantization,HX_("quantization",01,75,a7,52)},
	{::hx::fsInt,(void *) &ChartingState_obj::curQuant,HX_("curQuant",e3,78,95,a5)},
	{::hx::fsBool,(void *) &ChartingState_obj::vortex,HX_("vortex",6e,a8,49,63)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ChartingState_obj_sMemberFields[] = {
	HX_("ignoreWarnings",c9,0d,e8,46),
	HX_("curNoteTypes",87,65,03,ee),
	HX_("undos",cf,99,e3,a6),
	HX_("redos",b5,f0,bc,e6),
	HX_("eventStuff",7a,a0,75,00),
	HX_("_file",5b,ea,cc,f6),
	HX_("UI_box",60,07,ac,43),
	HX_("bpmTxt",d1,bc,26,f4),
	HX_("camPos",c5,54,7c,b7),
	HX_("strumLine",dd,79,d7,ee),
	HX_("quant",83,7e,e7,5d),
	HX_("strumLineNotes",24,f1,48,a4),
	HX_("curSong",75,95,6d,b7),
	HX_("amountSteps",af,2a,91,a5),
	HX_("bullshitUI",67,a9,a3,d3),
	HX_("highlight",34,56,00,ed),
	HX_("CAM_OFFSET",23,b1,2e,98),
	HX_("dummyArrow",81,8a,75,ae),
	HX_("curRenderedSustains",65,b2,8a,50),
	HX_("curRenderedNotes",2c,e1,fb,dc),
	HX_("curRenderedNoteType",c1,b7,da,f3),
	HX_("nextRenderedSustains",d8,07,f7,96),
	HX_("nextRenderedNotes",d9,f5,6d,f4),
	HX_("gridBG",0b,ce,23,18),
	HX_("nextGridBG",5e,7f,55,cd),
	HX_("daquantspot",e8,b3,6e,47),
	HX_("curEventSelected",f5,b2,2f,83),
	HX_("curUndoIndex",ae,2c,ee,82),
	HX_("curRedoIndex",94,ee,53,07),
	HX_("_song",b4,3f,69,ff),
	HX_("curSelectedNote",8d,49,f4,47),
	HX_("playbackSpeed",6c,73,8d,56),
	HX_("vocals",5e,10,51,59),
	HX_("opponentVocals",db,d1,18,64),
	HX_("leftIcon",20,2b,ae,4c),
	HX_("rightIcon",75,3d,79,b0),
	HX_("value1InputText",17,f2,52,45),
	HX_("value2InputText",f6,69,9d,05),
	HX_("currentSongName",19,8a,29,0b),
	HX_("zoomTxt",1d,71,9e,64),
	HX_("zoomList",11,71,af,a0),
	HX_("curZoom",b3,14,0e,bc),
	HX_("blockPressWhileTypingOn",71,5f,34,ba),
	HX_("blockPressWhileTypingOnStepper",a0,0d,9b,fa),
	HX_("blockPressWhileScrolling",9a,a6,3b,0c),
	HX_("waveformSprite",62,23,1b,4c),
	HX_("gridLayer",2b,cd,83,64),
	HX_("quantizations",52,ec,de,ff),
	HX_("text",ad,cc,f9,4c),
	HX_("mouseQuant",1e,72,b4,7b),
	HX_("create",fc,66,0f,7c),
	HX_("check_mute_inst",b5,5c,b4,05),
	HX_("check_mute_vocals",0d,83,75,dc),
	HX_("check_mute_vocals_opponent",4f,e4,58,8c),
	HX_("check_vortex",45,4a,f6,f1),
	HX_("check_warnings",2e,3c,0d,95),
	HX_("playSoundBf",df,38,00,fb),
	HX_("playSoundDad",cc,0a,33,a5),
	HX_("UI_songTitle",98,d4,53,2f),
	HX_("stageDropDown",0f,b5,6b,4d),
	HX_("sliderRate",a1,69,96,4f),
	HX_("addSongUI",6a,02,ad,e5),
	HX_("stepperBeats",6c,d3,fd,5a),
	HX_("check_mustHitSection",12,30,fc,78),
	HX_("check_gfSection",0f,c4,ae,b2),
	HX_("check_changeBPM",d8,2d,43,fc),
	HX_("stepperSectionBPM",6b,ba,b7,95),
	HX_("check_altAnim",23,ee,53,2e),
	HX_("sectionToCopy",95,9a,ef,19),
	HX_("notesCopied",65,7e,06,92),
	HX_("addSectionUI",18,75,a5,87),
	HX_("stepperSusLength",06,e6,fc,95),
	HX_("strumTimeInputText",01,cd,57,94),
	HX_("noteTypeDropDown",1d,20,c5,82),
	HX_("currentType",93,cb,9a,85),
	HX_("addNoteUI",c7,f7,d9,e9),
	HX_("eventDropDown",6b,ce,0b,a2),
	HX_("descText",9e,53,35,f3),
	HX_("selectedEventText",0c,e8,ef,68),
	HX_("addEventsUI",ee,88,4b,f2),
	HX_("changeEventSelected",05,f1,bb,14),
	HX_("setAllLabelsOffset",31,82,3c,24),
	HX_("metronome",32,23,9e,00),
	HX_("mouseScrollingQuant",53,5c,93,0b),
	HX_("metronomeStepper",ff,b3,47,cf),
	HX_("metronomeOffsetStepper",2c,93,6c,12),
	HX_("disableAutoScrolling",7e,ea,49,43),
	HX_("instVolume",40,fa,90,9f),
	HX_("voicesVolume",3b,cb,86,73),
	HX_("voicesOppVolume",a8,b8,2e,3b),
	HX_("addChartingUI",99,1b,51,c9),
	HX_("gameOverCharacterInputText",f4,98,5e,89),
	HX_("gameOverSoundInputText",0e,98,81,77),
	HX_("gameOverLoopInputText",8d,8c,1f,d0),
	HX_("gameOverEndInputText",02,72,5c,88),
	HX_("noteSkinInputText",48,c4,a8,3c),
	HX_("noteSplashesInputText",30,65,ff,7a),
	HX_("addDataUI",ff,33,a9,da),
	HX_("loadSong",1b,f5,f7,bc),
	HX_("playtesting",5c,fc,e0,34),
	HX_("playtestingTime",89,52,c2,4f),
	HX_("playtestingOnComplete",74,60,92,a2),
	HX_("closeSubState",49,18,32,04),
	HX_("generateSong",aa,ed,2b,1f),
	HX_("generateUI",c9,a0,60,4e),
	HX_("getEvent",a4,d7,9b,d5),
	HX_("updatedSection",ea,f8,55,de),
	HX_("sectionStartTime",ea,ba,df,45),
	HX_("lastConductorPos",63,a7,e7,75),
	HX_("colorSine",50,21,c1,27),
	HX_("update",09,86,05,87),
	HX_("pauseAndSetVocalsTime",8c,67,3f,e6),
	HX_("updateZoom",bc,8d,ad,09),
	HX_("destroy",fa,2c,86,24),
	HX_("lastSecBeats",62,b9,06,54),
	HX_("lastSecBeatsNext",75,c3,77,91),
	HX_("columns",dd,ac,59,f3),
	HX_("reloadGridLayer",92,a6,58,0d),
	HX_("strumLineUpdateY",d3,15,a7,4d),
	HX_("waveformPrinted",cf,ff,4c,70),
	HX_("wavData",76,29,9d,3b),
	HX_("lastWaveformHeight",3a,18,59,92),
	HX_("updateWaveform",a6,8a,94,26),
	HX_("waveformData",47,1c,55,96),
	HX_("changeNoteSustain",41,6b,40,3c),
	HX_("recalculateSteps",54,5b,74,a1),
	HX_("resetSection",d6,4b,b6,cf),
	HX_("changeSection",55,aa,ac,be),
	HX_("updateSectionUI",30,24,dc,d7),
	HX_("characterData",73,e6,4f,3b),
	HX_("updateJsonData",9b,eb,1e,77),
	HX_("updateHeads",8a,3c,51,0a),
	HX_("characterFailed",46,ba,66,61),
	HX_("loadCharacterFile",bf,34,63,a0),
	HX_("updateNoteUI",af,69,79,31),
	HX_("updateGrid",6f,c1,20,fd),
	HX_("setupNoteData",d9,2a,b6,01),
	HX_("getEventName",0f,18,63,07),
	HX_("setupSusNote",26,7d,12,9f),
	HX_("addSection",c4,31,62,c5),
	HX_("selectNote",0e,8d,a5,b7),
	HX_("deleteNote",bd,f5,56,9c),
	HX_("doANoteThing",66,75,09,51),
	HX_("clearSong",02,0c,19,c0),
	HX_("addNote",b3,5a,47,85),
	HX_("redo",fe,4d,a7,4b),
	HX_("undo",24,c6,a9,4d),
	HX_("getStrumTime",80,ca,77,03),
	HX_("getYfromStrum",1c,4c,46,78),
	HX_("getYfromStrumNotes",85,9a,5c,4e),
	HX_("getNotes",cb,eb,a1,ff),
	HX_("missingText",33,63,02,c1),
	HX_("missingTextTimer",92,53,0d,b4),
	HX_("loadJson",6e,13,08,b7),
	HX_("autosaveSong",21,24,ac,67),
	HX_("clearEvents",86,5c,57,2a),
	HX_("saveLevel",07,1d,10,01),
	HX_("sortByTime",82,fb,30,6f),
	HX_("saveEvents",36,da,23,df),
	HX_("onSaveComplete",d5,ac,3f,bc),
	HX_("onSaveCancel",96,1a,31,d9),
	HX_("onSaveError",2c,b6,19,24),
	HX_("getSectionBeats",ce,a7,18,32),
	::String(null()) };

static void ChartingState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ChartingState_obj::noteTypeList,"noteTypeList");
	HX_MARK_MEMBER_NAME(ChartingState_obj::goToPlayState,"goToPlayState");
	HX_MARK_MEMBER_NAME(ChartingState_obj::curSec,"curSec");
	HX_MARK_MEMBER_NAME(ChartingState_obj::lastSection,"lastSection");
	HX_MARK_MEMBER_NAME(ChartingState_obj::lastSong,"lastSong");
	HX_MARK_MEMBER_NAME(ChartingState_obj::GRID_SIZE,"GRID_SIZE");
	HX_MARK_MEMBER_NAME(ChartingState_obj::quantization,"quantization");
	HX_MARK_MEMBER_NAME(ChartingState_obj::curQuant,"curQuant");
	HX_MARK_MEMBER_NAME(ChartingState_obj::vortex,"vortex");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ChartingState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ChartingState_obj::noteTypeList,"noteTypeList");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::goToPlayState,"goToPlayState");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::curSec,"curSec");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::lastSection,"lastSection");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::lastSong,"lastSong");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::GRID_SIZE,"GRID_SIZE");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::quantization,"quantization");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::curQuant,"curQuant");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::vortex,"vortex");
};

#endif

::hx::Class ChartingState_obj::__mClass;

static ::String ChartingState_obj_sStaticFields[] = {
	HX_("noteTypeList",4a,36,de,09),
	HX_("goToPlayState",3a,b5,7a,82),
	HX_("curSec",f1,3d,d0,3e),
	HX_("lastSection",2f,ba,83,12),
	HX_("lastSong",4b,3d,a1,df),
	HX_("GRID_SIZE",1a,98,25,c9),
	HX_("quantization",01,75,a7,52),
	HX_("curQuant",e3,78,95,a5),
	HX_("vortex",6e,a8,49,63),
	::String(null())
};

void ChartingState_obj::__register()
{
	ChartingState_obj _hx_dummy;
	ChartingState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.editors.ChartingState",19,00,5b,f8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ChartingState_obj::__GetStatic;
	__mClass->mSetStaticField = &ChartingState_obj::__SetStatic;
	__mClass->mMarkFunc = ChartingState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ChartingState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ChartingState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ChartingState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ChartingState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ChartingState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ChartingState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ChartingState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_52_boot)
HXDLIN(  52)		noteTypeList = ::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_203,6);
            	}
{
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_89_boot)
HXDLIN(  89)		goToPlayState = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_94_boot)
HXDLIN(  94)		curSec = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_95_boot)
HXDLIN(  95)		lastSection = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_96_boot)
HXDLIN(  96)		lastSong = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_110_boot)
HXDLIN( 110)		GRID_SIZE = 40;
            	}
{
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_171_boot)
HXDLIN( 171)		quantization = 16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_172_boot)
HXDLIN( 172)		curQuant = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_189_boot)
HXDLIN( 189)		vortex = false;
            	}
}

} // end namespace states
} // end namespace editors
