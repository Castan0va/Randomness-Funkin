// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_backend_Achievements
#include <backend/Achievements.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_objects_AlphaCharacter
#include <objects/AlphaCharacter.h>
#endif
#ifndef INCLUDED_objects_Alphabet
#include <objects/Alphabet.h>
#endif
#ifndef INCLUDED_objects_Bar
#include <objects/Bar.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_states_AchievementsMenuState
#include <states/AchievementsMenuState.h>
#endif
#ifndef INCLUDED_states_ResetAchievementSubstate
#include <states/ResetAchievementSubstate.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0d6e33e363f6b765_254_new,"states.ResetAchievementSubstate","new",0x3ca7bfcf,"states.ResetAchievementSubstate.new","states/AchievementsMenuState.hx",254,0xe610951d)
HX_LOCAL_STACK_FRAME(_hx_pos_0d6e33e363f6b765_297_update,"states.ResetAchievementSubstate","update",0xc3efa5fa,"states.ResetAchievementSubstate.update","states/AchievementsMenuState.hx",297,0xe610951d)
HX_LOCAL_STACK_FRAME(_hx_pos_0d6e33e363f6b765_332_update,"states.ResetAchievementSubstate","update",0xc3efa5fa,"states.ResetAchievementSubstate.update","states/AchievementsMenuState.hx",332,0xe610951d)
HX_LOCAL_STACK_FRAME(_hx_pos_0d6e33e363f6b765_333_update,"states.ResetAchievementSubstate","update",0xc3efa5fa,"states.ResetAchievementSubstate.update","states/AchievementsMenuState.hx",333,0xe610951d)
HX_LOCAL_STACK_FRAME(_hx_pos_0d6e33e363f6b765_346_updateOptions,"states.ResetAchievementSubstate","updateOptions",0x3411c884,"states.ResetAchievementSubstate.updateOptions","states/AchievementsMenuState.hx",346,0xe610951d)
static const Float _hx_array_data_b7222c5d_6[] = {
	0.75,(Float)1,
};
static const Float _hx_array_data_b7222c5d_7[] = {
	0.6,1.25,
};
namespace states{

void ResetAchievementSubstate_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_0d6e33e363f6b765_254_new)
HXLINE( 256)		this->onYes = false;
HXLINE( 262)		super::__construct();
HXLINE( 264)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-16777216,null(),null());
HXLINE( 265)		bg->set_alpha(( (Float)(0) ));
HXLINE( 266)		{
HXLINE( 266)			 ::flixel::math::FlxBasePoint this1 = bg->scrollFactor;
HXDLIN( 266)			this1->set_x(( (Float)(0) ));
HXDLIN( 266)			this1->set_y(( (Float)(0) ));
            		}
HXLINE( 267)		this->add(bg);
HXLINE( 268)		::flixel::tweens::FlxTween_obj::tween(bg, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)0.6))),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 270)		 ::objects::Alphabet text =  ::objects::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(180) ),HX_("Reset Achievement:",1c,42,34,0d),true);
HXLINE( 271)		{
HXLINE( 271)			int axes = 1;
HXDLIN( 271)			bool _hx_tmp;
HXDLIN( 271)			if ((axes != 1)) {
HXLINE( 271)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE( 271)				_hx_tmp = true;
            			}
HXDLIN( 271)			if (_hx_tmp) {
HXLINE( 271)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 271)				text->set_x(((( (Float)(_hx_tmp1) ) - text->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 271)			bool _hx_tmp2;
HXDLIN( 271)			if ((axes != 16)) {
HXLINE( 271)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE( 271)				_hx_tmp2 = true;
            			}
HXDLIN( 271)			if (_hx_tmp2) {
HXLINE( 271)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN( 271)				text->set_y(((( (Float)(_hx_tmp3) ) - text->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 272)		{
HXLINE( 272)			 ::flixel::math::FlxBasePoint this2 = text->scrollFactor;
HXDLIN( 272)			this2->set_x(( (Float)(0) ));
HXDLIN( 272)			this2->set_y(( (Float)(0) ));
            		}
HXLINE( 273)		this->add(text);
HXLINE( 275)		 ::states::AchievementsMenuState state = ( ( ::states::AchievementsMenuState)(::flixel::FlxG_obj::game->_state) );
HXLINE( 276)		 ::flixel::text::FlxText text1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,50,(text->y + 90),(::flixel::FlxG_obj::width - 100),( (::String)(state->options->__get(state->curSelected)->__Field(HX_("displayName",ad,11,f2,30),::hx::paccDynamic)) ),40,null());
HXLINE( 277)		::String file = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN( 277)		::String _hx_tmp4;
HXDLIN( 277)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 277)			_hx_tmp4 = file;
            		}
            		else {
HXLINE( 277)			_hx_tmp4 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN( 277)		text1->setFormat(_hx_tmp4,40,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 278)		{
HXLINE( 278)			 ::flixel::math::FlxBasePoint this3 = text1->scrollFactor;
HXDLIN( 278)			this3->set_x(( (Float)(0) ));
HXDLIN( 278)			this3->set_y(( (Float)(0) ));
            		}
HXLINE( 279)		text1->set_borderSize(( (Float)(2) ));
HXLINE( 280)		this->add(text1);
HXLINE( 282)		this->yesText =  ::objects::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),(text1->y + 120),HX_("Yes",07,e1,43,00),true);
HXLINE( 283)		{
HXLINE( 283)			 ::objects::Alphabet _this = this->yesText;
HXDLIN( 283)			int axes1 = 1;
HXDLIN( 283)			bool _hx_tmp5;
HXDLIN( 283)			if ((axes1 != 1)) {
HXLINE( 283)				_hx_tmp5 = (axes1 == 17);
            			}
            			else {
HXLINE( 283)				_hx_tmp5 = true;
            			}
HXDLIN( 283)			if (_hx_tmp5) {
HXLINE( 283)				int _hx_tmp6 = ::flixel::FlxG_obj::width;
HXDLIN( 283)				_this->set_x(((( (Float)(_hx_tmp6) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 283)			bool _hx_tmp7;
HXDLIN( 283)			if ((axes1 != 16)) {
HXLINE( 283)				_hx_tmp7 = (axes1 == 17);
            			}
            			else {
HXLINE( 283)				_hx_tmp7 = true;
            			}
HXDLIN( 283)			if (_hx_tmp7) {
HXLINE( 283)				int _hx_tmp8 = ::flixel::FlxG_obj::height;
HXDLIN( 283)				_this->set_y(((( (Float)(_hx_tmp8) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 284)		 ::objects::Alphabet fh = this->yesText;
HXDLIN( 284)		fh->set_x((fh->x - ( (Float)(200) )));
HXLINE( 285)		{
HXLINE( 285)			 ::flixel::math::FlxBasePoint this4 = this->yesText->scrollFactor;
HXDLIN( 285)			this4->set_x(( (Float)(0) ));
HXDLIN( 285)			this4->set_y(( (Float)(0) ));
            		}
HXLINE( 286)		{
HXLINE( 286)			int _g = 0;
HXDLIN( 286)			::Array< ::Dynamic> _g1 = this->yesText->letters;
HXDLIN( 286)			while((_g < _g1->length)){
HXLINE( 286)				 ::objects::AlphaCharacter letter = _g1->__get(_g).StaticCast<  ::objects::AlphaCharacter >();
HXDLIN( 286)				_g = (_g + 1);
HXDLIN( 286)				letter->set_color(-65536);
            			}
            		}
HXLINE( 287)		this->add(this->yesText);
HXLINE( 288)		this->noText =  ::objects::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),(text1->y + 120),HX_("No",61,44,00,00),true);
HXLINE( 289)		{
HXLINE( 289)			 ::objects::Alphabet _this1 = this->noText;
HXDLIN( 289)			int axes2 = 1;
HXDLIN( 289)			bool _hx_tmp9;
HXDLIN( 289)			if ((axes2 != 1)) {
HXLINE( 289)				_hx_tmp9 = (axes2 == 17);
            			}
            			else {
HXLINE( 289)				_hx_tmp9 = true;
            			}
HXDLIN( 289)			if (_hx_tmp9) {
HXLINE( 289)				int _hx_tmp10 = ::flixel::FlxG_obj::width;
HXDLIN( 289)				_this1->set_x(((( (Float)(_hx_tmp10) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 289)			bool _hx_tmp11;
HXDLIN( 289)			if ((axes2 != 16)) {
HXLINE( 289)				_hx_tmp11 = (axes2 == 17);
            			}
            			else {
HXLINE( 289)				_hx_tmp11 = true;
            			}
HXDLIN( 289)			if (_hx_tmp11) {
HXLINE( 289)				int _hx_tmp12 = ::flixel::FlxG_obj::height;
HXDLIN( 289)				_this1->set_y(((( (Float)(_hx_tmp12) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 290)		 ::objects::Alphabet fh1 = this->noText;
HXDLIN( 290)		fh1->set_x((fh1->x + 200));
HXLINE( 291)		{
HXLINE( 291)			 ::flixel::math::FlxBasePoint this5 = this->noText->scrollFactor;
HXDLIN( 291)			this5->set_x(( (Float)(0) ));
HXDLIN( 291)			this5->set_y(( (Float)(0) ));
            		}
HXLINE( 292)		this->add(this->noText);
HXLINE( 293)		this->updateOptions();
            	}

Dynamic ResetAchievementSubstate_obj::__CreateEmpty() { return new ResetAchievementSubstate_obj; }

void *ResetAchievementSubstate_obj::_hx_vtable = 0;

Dynamic ResetAchievementSubstate_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ResetAchievementSubstate_obj > _hx_result = new ResetAchievementSubstate_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ResetAchievementSubstate_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x563293a6) {
			if (inClassId<=(int)0x3c0818b8) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x3c0818b8;
			} else {
				return inClassId==(int)0x563293a6;
			}
		} else {
			return inClassId==(int)0x5661ffbf || inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x6f49d0f3 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void ResetAchievementSubstate_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_0d6e33e363f6b765_297_update)
HXLINE( 298)		if (::backend::Controls_obj::instance->get_BACK()) {
HXLINE( 300)			this->close();
HXLINE( 301)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 301)			_hx_tmp->play(::backend::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
HXLINE( 302)			return;
            		}
HXLINE( 305)		this->super::update(elapsed);
HXLINE( 307)		bool _hx_tmp1;
HXDLIN( 307)		if (!(::backend::Controls_obj::instance->get_UI_LEFT_P())) {
HXLINE( 307)			_hx_tmp1 = ::backend::Controls_obj::instance->get_UI_RIGHT_P();
            		}
            		else {
HXLINE( 307)			_hx_tmp1 = true;
            		}
HXDLIN( 307)		if (_hx_tmp1) {
HXLINE( 308)			this->onYes = !(this->onYes);
HXLINE( 309)			this->updateOptions();
            		}
HXLINE( 312)		if (::backend::Controls_obj::instance->get_ACCEPT()) {
HXLINE( 314)			if (this->onYes) {
HXLINE( 316)				 ::states::AchievementsMenuState state = ( ( ::states::AchievementsMenuState)(::flixel::FlxG_obj::game->_state) );
HXLINE( 317)				 ::Dynamic option = state->options->__get(state->curSelected);
HXLINE( 319)				::backend::Achievements_obj::variables->remove(( (::String)(option->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ));
HXLINE( 320)				::backend::Achievements_obj::achievementsUnlocked->remove( ::Dynamic(option->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)));
HXLINE( 321)				option->__SetField(HX_("unlocked",23,34,0e,5c),false,::hx::paccDynamic);
HXLINE( 322)				option->__SetField(HX_("curProgress",4d,b9,69,07),0,::hx::paccDynamic);
HXLINE( 323)				option->__SetField(HX_("name",4b,72,ff,48),state->nameText->set_text(HX_("???",1f,05,30,00)),::hx::paccDynamic);
HXLINE( 324)				if (::hx::IsGreater( option->__Field(HX_("maxProgress",71,02,f1,fb),::hx::paccDynamic),0 )) {
HXLINE( 324)					 ::flixel::text::FlxText state1 = state->progressTxt;
HXDLIN( 324)					state1->set_text((HX_("0 / ",01,af,d2,1f) + ::Std_obj::string( ::Dynamic(option->__Field(HX_("maxProgress",71,02,f1,fb),::hx::paccDynamic)))));
            				}
HXLINE( 325)				 ::flixel::FlxSprite state2 = Dynamic( state->grpOptions->group->members->__get(state->curSelected)).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 325)				state2->loadGraphic(::backend::Paths_obj::image(HX_("achievements/lockedachievement",ba,b8,0b,f8),null(),null()),null(),null(),null(),null(),null());
HXLINE( 326)				Dynamic( state->grpOptions->group->members->__get(state->curSelected)).StaticCast<  ::flixel::FlxSprite >()->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 328)				if (state->progressBar->visible) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::AchievementsMenuState,state) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_STACKFRAME(&_hx_pos_0d6e33e363f6b765_332_update)
HXLINE( 332)						state->progressBar->updateBar();
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::AchievementsMenuState,state) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_STACKFRAME(&_hx_pos_0d6e33e363f6b765_333_update)
HXLINE( 333)						state->progressBar->updateBar();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 330)					if (::hx::IsNotNull( state->barTween )) {
HXLINE( 330)						state->barTween->cancel();
            					}
HXLINE( 331)					state->barTween = ::flixel::tweens::FlxTween_obj::tween(state->progressBar, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("percent",c5,aa,da,78),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(state)))
            						->setFixed(2,HX_("onUpdate",88,7c,b2,66), ::Dynamic(new _hx_Closure_1(state)))));
            				}
HXLINE( 336)				::backend::Achievements_obj::save();
HXLINE( 337)				::flixel::FlxG_obj::save->flush(null());
HXLINE( 339)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN( 339)				_hx_tmp2->play(::backend::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
            			}
HXLINE( 341)			this->close();
HXLINE( 342)			return;
            		}
            	}


void ResetAchievementSubstate_obj::updateOptions(){
            	HX_STACKFRAME(&_hx_pos_0d6e33e363f6b765_346_updateOptions)
HXLINE( 347)		::Array< Float > scales = ::Array_obj< Float >::fromData( _hx_array_data_b7222c5d_6,2);
HXLINE( 348)		::Array< Float > alphas = ::Array_obj< Float >::fromData( _hx_array_data_b7222c5d_7,2);
HXLINE( 349)		int confirmInt;
HXDLIN( 349)		if (this->onYes) {
HXLINE( 349)			confirmInt = 1;
            		}
            		else {
HXLINE( 349)			confirmInt = 0;
            		}
HXLINE( 351)		this->yesText->set_alpha(alphas->__get(confirmInt));
HXLINE( 352)		{
HXLINE( 352)			 ::flixel::math::FlxBasePoint this1 = this->yesText->scale;
HXDLIN( 352)			this1->set_x(scales->__get(confirmInt));
HXDLIN( 352)			this1->set_y(scales->__get(confirmInt));
            		}
HXLINE( 353)		this->noText->set_alpha(alphas->__get((1 - confirmInt)));
HXLINE( 354)		{
HXLINE( 354)			 ::flixel::math::FlxBasePoint this2 = this->noText->scale;
HXDLIN( 354)			this2->set_x(scales->__get((1 - confirmInt)));
HXDLIN( 354)			this2->set_y(scales->__get((1 - confirmInt)));
            		}
HXLINE( 355)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 355)		_hx_tmp->play(::backend::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ResetAchievementSubstate_obj,updateOptions,(void))


::hx::ObjectPtr< ResetAchievementSubstate_obj > ResetAchievementSubstate_obj::__new() {
	::hx::ObjectPtr< ResetAchievementSubstate_obj > __this = new ResetAchievementSubstate_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ResetAchievementSubstate_obj > ResetAchievementSubstate_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ResetAchievementSubstate_obj *__this = (ResetAchievementSubstate_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ResetAchievementSubstate_obj), true, "states.ResetAchievementSubstate"));
	*(void **)__this = ResetAchievementSubstate_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ResetAchievementSubstate_obj::ResetAchievementSubstate_obj()
{
}

void ResetAchievementSubstate_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ResetAchievementSubstate);
	HX_MARK_MEMBER_NAME(onYes,"onYes");
	HX_MARK_MEMBER_NAME(yesText,"yesText");
	HX_MARK_MEMBER_NAME(noText,"noText");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ResetAchievementSubstate_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(onYes,"onYes");
	HX_VISIT_MEMBER_NAME(yesText,"yesText");
	HX_VISIT_MEMBER_NAME(noText,"noText");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ResetAchievementSubstate_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"onYes") ) { return ::hx::Val( onYes ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"noText") ) { return ::hx::Val( noText ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"yesText") ) { return ::hx::Val( yesText ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"updateOptions") ) { return ::hx::Val( updateOptions_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ResetAchievementSubstate_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"onYes") ) { onYes=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"noText") ) { noText=inValue.Cast<  ::objects::Alphabet >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"yesText") ) { yesText=inValue.Cast<  ::objects::Alphabet >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ResetAchievementSubstate_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("onYes",48,bd,73,32));
	outFields->push(HX_("yesText",74,41,98,78));
	outFields->push(HX_("noText",8e,0d,8f,1c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ResetAchievementSubstate_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(ResetAchievementSubstate_obj,onYes),HX_("onYes",48,bd,73,32)},
	{::hx::fsObject /*  ::objects::Alphabet */ ,(int)offsetof(ResetAchievementSubstate_obj,yesText),HX_("yesText",74,41,98,78)},
	{::hx::fsObject /*  ::objects::Alphabet */ ,(int)offsetof(ResetAchievementSubstate_obj,noText),HX_("noText",8e,0d,8f,1c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ResetAchievementSubstate_obj_sStaticStorageInfo = 0;
#endif

static ::String ResetAchievementSubstate_obj_sMemberFields[] = {
	HX_("onYes",48,bd,73,32),
	HX_("yesText",74,41,98,78),
	HX_("noText",8e,0d,8f,1c),
	HX_("update",09,86,05,87),
	HX_("updateOptions",55,98,6c,ab),
	::String(null()) };

::hx::Class ResetAchievementSubstate_obj::__mClass;

void ResetAchievementSubstate_obj::__register()
{
	ResetAchievementSubstate_obj _hx_dummy;
	ResetAchievementSubstate_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.ResetAchievementSubstate",5d,2c,22,b7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ResetAchievementSubstate_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ResetAchievementSubstate_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ResetAchievementSubstate_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ResetAchievementSubstate_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
