// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_states_ModItem
#include <states/ModItem.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_tjson_TJSON
#include <tjson/TJSON.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_55cb4d94dc38dd25_802_new,"states.ModItem","new",0x7cf14f1b,"states.ModItem.new","states/ModsMenuState.hx",802,0xd12771ea)
namespace states{

void ModItem_obj::__construct(::String folder){
            	HX_GC_STACKFRAME(&_hx_pos_55cb4d94dc38dd25_802_new)
HXLINE( 817)		this->settings = null();
HXLINE( 816)		this->mustRestart = false;
HXLINE( 815)		this->folder = HX_("unknownMod",58,fd,4e,7b);
HXLINE( 814)		this->pack = null();
HXLINE( 813)		this->bgColor = -10069249;
HXLINE( 812)		this->iconFps = 10;
HXLINE( 811)		this->desc = HX_("No description provided.",88,46,cb,66);
HXLINE( 810)		this->name = HX_("Unknown Mod",ec,ea,28,30);
HXLINE( 807)		this->totalFrames = 0;
HXLINE( 821)		super::__construct(null(),null(),null());
HXLINE( 823)		this->folder = folder;
HXLINE( 824)		this->pack = ::backend::Mods_obj::getPack(folder);
HXLINE( 826)		::String key = ((HX_("",00,00,00,00) + folder) + HX_("/data/settings.json",9d,ef,09,8c));
HXDLIN( 826)		if (::hx::IsNull( key )) {
HXLINE( 826)			key = HX_("",00,00,00,00);
            		}
HXDLIN( 826)		::String path = (HX_("mods/",9e,2f,58,0c) + key);
HXLINE( 827)		if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 829)			::String data = ::sys::io::File_obj::getContent(path);
HXLINE( 830)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 833)				this->settings = ( (::cpp::VirtualArray)(::tjson::TJSON_obj::parse(data,null(),null())) );
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE( 835)					 ::Dynamic e = _g;
HXLINE( 836)					{
HXLINE( 837)						::String errorTitle = (HX_("Mod name: ",6f,0f,ef,f4) + ::backend::Mods_obj::currentModDirectory);
HXLINE( 838)						::String errorMsg = (HX_("An error occurred: ",96,0b,5f,5d) + ::Std_obj::string(e));
HXLINE( 840)						::lime::app::Application_obj::current->_hx___window->alert(errorMsg,errorTitle);
HXLINE( 842)						::haxe::Log_obj::trace((((HX_("",00,00,00,00) + errorTitle) + HX_(" - ",73,6f,18,00)) + errorMsg),::hx::SourceInfo(HX_("source/states/ModsMenuState.hx",76,c1,45,9f),842,HX_("states.ModItem",a9,25,87,ec),HX_("new",60,d0,53,00)));
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE( 846)		this->selectBg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-1,null(),null());
HXLINE( 847)		this->selectBg->set_alpha(((Float)0.8));
HXLINE( 848)		this->selectBg->set_visible(false);
HXLINE( 849)		this->add(this->selectBg);
HXLINE( 851)		this->icon =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,5,5,null());
HXLINE( 852)		this->icon->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 853)		this->add(this->icon);
HXLINE( 855)		this->text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,95,38,230,HX_("",00,00,00,00),16,null());
HXLINE( 856)		 ::flixel::text::FlxText _hx_tmp = this->text;
HXDLIN( 856)		::String file = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN( 856)		::String _hx_tmp1;
HXDLIN( 856)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 856)			_hx_tmp1 = file;
            		}
            		else {
HXLINE( 856)			_hx_tmp1 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN( 856)		_hx_tmp->setFormat(_hx_tmp1,16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 857)		this->text->set_borderSize(( (Float)(2) ));
HXLINE( 858)		 ::flixel::text::FlxText fh = this->text;
HXDLIN( 858)		Float fh1 = fh->y;
HXDLIN( 858)		fh->set_y((fh1 - ( (Float)(::Std_obj::_hx_int((this->text->get_height() / ( (Float)(2) )))) )));
HXLINE( 859)		this->add(this->text);
HXLINE( 861)		bool isPixel = false;
HXLINE( 862)		::String key1 = ((HX_("",00,00,00,00) + folder) + HX_("/pack.png",c3,2b,f8,d1));
HXDLIN( 862)		if (::hx::IsNull( key1 )) {
HXLINE( 862)			key1 = HX_("",00,00,00,00);
            		}
HXDLIN( 862)		 ::flixel::graphics::FlxGraphic bmp = ::backend::Paths_obj::cacheBitmap((HX_("mods/",9e,2f,58,0c) + key1),null(),null());
HXLINE( 863)		if (::hx::IsNull( bmp )) {
HXLINE( 865)			::String key2 = ((HX_("",00,00,00,00) + folder) + HX_("/pack-pixel.png",7c,55,79,f8));
HXDLIN( 865)			if (::hx::IsNull( key2 )) {
HXLINE( 865)				key2 = HX_("",00,00,00,00);
            			}
HXDLIN( 865)			bmp = ::backend::Paths_obj::cacheBitmap((HX_("mods/",9e,2f,58,0c) + key2),null(),null());
HXLINE( 866)			isPixel = true;
            		}
HXLINE( 869)		if (::hx::IsNotNull( bmp )) {
HXLINE( 871)			this->icon->loadGraphic(bmp,true,150,150,null(),null());
HXLINE( 872)			if (isPixel) {
HXLINE( 872)				this->icon->set_antialiasing(false);
            			}
            		}
            		else {
HXLINE( 874)			 ::flixel::FlxSprite _hx_tmp2 = this->icon;
HXDLIN( 874)			_hx_tmp2->loadGraphic(::backend::Paths_obj::image(HX_("unknownMod",58,fd,4e,7b),null(),null()),true,150,150,null(),null());
            		}
HXLINE( 875)		{
HXLINE( 875)			 ::flixel::math::FlxBasePoint this1 = this->icon->scale;
HXDLIN( 875)			this1->set_x(((Float)0.5));
HXDLIN( 875)			this1->set_y(((Float)0.5));
            		}
HXLINE( 876)		this->icon->updateHitbox();
HXLINE( 878)		this->name = folder;
HXLINE( 879)		if (::hx::IsNotNull( this->pack )) {
HXLINE( 881)			if (::hx::IsNotNull( this->pack->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic) )) {
HXLINE( 881)				this->name = ( (::String)(this->pack->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
            			}
HXLINE( 882)			if (::hx::IsNotNull( this->pack->__Field(HX_("description",fc,08,1d,5f),::hx::paccDynamic) )) {
HXLINE( 882)				this->desc = ( (::String)(this->pack->__Field(HX_("description",fc,08,1d,5f),::hx::paccDynamic)) );
            			}
HXLINE( 883)			if (::hx::IsNotNull( this->pack->__Field(HX_("iconFramerate",d4,a6,89,79),::hx::paccDynamic) )) {
HXLINE( 883)				this->iconFps = ( (int)(this->pack->__Field(HX_("iconFramerate",d4,a6,89,79),::hx::paccDynamic)) );
            			}
HXLINE( 884)			if (::hx::IsNotNull( this->pack->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic) )) {
HXLINE( 886)				int Red;
HXDLIN( 886)				if (::hx::IsNotNull(  ::Dynamic(this->pack->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic))->__GetItem(0) )) {
HXLINE( 886)					Red = ( (int)( ::Dynamic(this->pack->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic))->__GetItem(0)) );
            				}
            				else {
HXLINE( 886)					Red = 170;
            				}
HXDLIN( 886)				int Green;
HXLINE( 887)				if (::hx::IsNotNull(  ::Dynamic(this->pack->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic))->__GetItem(1) )) {
HXLINE( 886)					Green = ( (int)( ::Dynamic(this->pack->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic))->__GetItem(1)) );
            				}
            				else {
HXLINE( 886)					Green = 0;
            				}
HXDLIN( 886)				int Blue;
HXLINE( 888)				if (::hx::IsNotNull(  ::Dynamic(this->pack->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic))->__GetItem(2) )) {
HXLINE( 886)					Blue = ( (int)( ::Dynamic(this->pack->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic))->__GetItem(2)) );
            				}
            				else {
HXLINE( 886)					Blue = 255;
            				}
HXDLIN( 886)				int Alpha = 255;
HXDLIN( 886)				int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 886)				{
HXLINE( 886)					color = (color & -16711681);
HXDLIN( 886)					int color1;
HXDLIN( 886)					if ((Red > 255)) {
HXLINE( 886)						color1 = 255;
            					}
            					else {
HXLINE( 886)						if ((Red < 0)) {
HXLINE( 886)							color1 = 0;
            						}
            						else {
HXLINE( 886)							color1 = Red;
            						}
            					}
HXDLIN( 886)					color = (color | (color1 << 16));
            				}
HXDLIN( 886)				{
HXLINE( 886)					color = (color & -65281);
HXDLIN( 886)					int color2;
HXDLIN( 886)					if ((Green > 255)) {
HXLINE( 886)						color2 = 255;
            					}
            					else {
HXLINE( 886)						if ((Green < 0)) {
HXLINE( 886)							color2 = 0;
            						}
            						else {
HXLINE( 886)							color2 = Green;
            						}
            					}
HXDLIN( 886)					color = (color | (color2 << 8));
            				}
HXDLIN( 886)				{
HXLINE( 886)					color = (color & -256);
HXDLIN( 886)					int color3;
HXDLIN( 886)					if ((Blue > 255)) {
HXLINE( 886)						color3 = 255;
            					}
            					else {
HXLINE( 886)						if ((Blue < 0)) {
HXLINE( 886)							color3 = 0;
            						}
            						else {
HXLINE( 886)							color3 = Blue;
            						}
            					}
HXDLIN( 886)					color = (color | color3);
            				}
HXDLIN( 886)				{
HXLINE( 886)					color = (color & 16777215);
HXDLIN( 886)					int color4;
HXDLIN( 886)					if ((Alpha > 255)) {
HXLINE( 886)						color4 = 255;
            					}
            					else {
HXLINE( 886)						if ((Alpha < 0)) {
HXLINE( 886)							color4 = 0;
            						}
            						else {
HXLINE( 886)							color4 = Alpha;
            						}
            					}
HXDLIN( 886)					color = (color | (color4 << 24));
            				}
HXDLIN( 886)				this->bgColor = color;
            			}
HXLINE( 890)			this->mustRestart = ::hx::IsEq( this->pack->__Field(HX_("restart",cf,c7,a5,6a),::hx::paccDynamic),true );
            		}
HXLINE( 892)		this->text->set_text(this->name);
HXLINE( 894)		if (::hx::IsNotNull( bmp )) {
HXLINE( 896)			this->totalFrames = (::Math_obj::floor((( (Float)(bmp->width) ) / ( (Float)(150) ))) * ::Math_obj::floor((( (Float)(bmp->height) ) / ( (Float)(150) ))));
HXLINE( 897)			 ::flixel::animation::FlxAnimationController _hx_tmp3 = this->icon->animation;
HXDLIN( 897)			::Array< int > _g1 = ::Array_obj< int >::__new(0);
HXDLIN( 897)			{
HXLINE( 897)				int _g2 = 0;
HXDLIN( 897)				int _g3 = this->totalFrames;
HXDLIN( 897)				while((_g2 < _g3)){
HXLINE( 897)					_g2 = (_g2 + 1);
HXDLIN( 897)					int i = (_g2 - 1);
HXDLIN( 897)					_g1->push(i);
            				}
            			}
HXDLIN( 897)			_hx_tmp3->add(HX_("icon",79,e7,b2,45),_g1,this->iconFps,null(),null(),null());
HXLINE( 898)			this->icon->animation->play(HX_("icon",79,e7,b2,45),null(),null(),null());
            		}
HXLINE( 900)		{
HXLINE( 900)			 ::flixel::math::FlxBasePoint this2 = this->selectBg->scale;
HXDLIN( 900)			Float x = (this->get_width() + 5);
HXDLIN( 900)			Float y = (this->get_height() + 5);
HXDLIN( 900)			this2->set_x(x);
HXDLIN( 900)			this2->set_y(y);
            		}
HXLINE( 901)		this->selectBg->updateHitbox();
            	}

Dynamic ModItem_obj::__CreateEmpty() { return new ModItem_obj; }

void *ModItem_obj::_hx_vtable = 0;

Dynamic ModItem_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ModItem_obj > _hx_result = new ModItem_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ModItem_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x288ce903) {
			if (inClassId<=(int)0x2809d00b) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x2809d00b;
			} else {
				return inClassId==(int)0x288ce903;
			}
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}


::hx::ObjectPtr< ModItem_obj > ModItem_obj::__new(::String folder) {
	::hx::ObjectPtr< ModItem_obj > __this = new ModItem_obj();
	__this->__construct(folder);
	return __this;
}

::hx::ObjectPtr< ModItem_obj > ModItem_obj::__alloc(::hx::Ctx *_hx_ctx,::String folder) {
	ModItem_obj *__this = (ModItem_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ModItem_obj), true, "states.ModItem"));
	*(void **)__this = ModItem_obj::_hx_vtable;
	__this->__construct(folder);
	return __this;
}

ModItem_obj::ModItem_obj()
{
}

void ModItem_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ModItem);
	HX_MARK_MEMBER_NAME(selectBg,"selectBg");
	HX_MARK_MEMBER_NAME(icon,"icon");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(totalFrames,"totalFrames");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(desc,"desc");
	HX_MARK_MEMBER_NAME(iconFps,"iconFps");
	HX_MARK_MEMBER_NAME(bgColor,"bgColor");
	HX_MARK_MEMBER_NAME(pack,"pack");
	HX_MARK_MEMBER_NAME(folder,"folder");
	HX_MARK_MEMBER_NAME(mustRestart,"mustRestart");
	HX_MARK_MEMBER_NAME(settings,"settings");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ModItem_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(selectBg,"selectBg");
	HX_VISIT_MEMBER_NAME(icon,"icon");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(totalFrames,"totalFrames");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(desc,"desc");
	HX_VISIT_MEMBER_NAME(iconFps,"iconFps");
	HX_VISIT_MEMBER_NAME(bgColor,"bgColor");
	HX_VISIT_MEMBER_NAME(pack,"pack");
	HX_VISIT_MEMBER_NAME(folder,"folder");
	HX_VISIT_MEMBER_NAME(mustRestart,"mustRestart");
	HX_VISIT_MEMBER_NAME(settings,"settings");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ModItem_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { return ::hx::Val( icon ); }
		if (HX_FIELD_EQ(inName,"text") ) { return ::hx::Val( text ); }
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"desc") ) { return ::hx::Val( desc ); }
		if (HX_FIELD_EQ(inName,"pack") ) { return ::hx::Val( pack ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"folder") ) { return ::hx::Val( folder ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"iconFps") ) { return ::hx::Val( iconFps ); }
		if (HX_FIELD_EQ(inName,"bgColor") ) { return ::hx::Val( bgColor ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selectBg") ) { return ::hx::Val( selectBg ); }
		if (HX_FIELD_EQ(inName,"settings") ) { return ::hx::Val( settings ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalFrames") ) { return ::hx::Val( totalFrames ); }
		if (HX_FIELD_EQ(inName,"mustRestart") ) { return ::hx::Val( mustRestart ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ModItem_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { icon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"desc") ) { desc=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pack") ) { pack=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"folder") ) { folder=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"iconFps") ) { iconFps=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bgColor") ) { bgColor=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selectBg") ) { selectBg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"settings") ) { settings=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalFrames") ) { totalFrames=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mustRestart") ) { mustRestart=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ModItem_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("selectBg",e1,0b,6d,b1));
	outFields->push(HX_("icon",79,e7,b2,45));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("totalFrames",8a,a2,bb,72));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("desc",51,5e,66,42));
	outFields->push(HX_("iconFps",f0,c9,07,d6));
	outFields->push(HX_("bgColor",5e,81,83,f7));
	outFields->push(HX_("pack",d9,d6,51,4a));
	outFields->push(HX_("folder",ae,76,90,f9));
	outFields->push(HX_("mustRestart",c6,44,01,a6));
	outFields->push(HX_("settings",e3,7c,3d,8b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ModItem_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ModItem_obj,selectBg),HX_("selectBg",e1,0b,6d,b1)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ModItem_obj,icon),HX_("icon",79,e7,b2,45)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ModItem_obj,text),HX_("text",ad,cc,f9,4c)},
	{::hx::fsInt,(int)offsetof(ModItem_obj,totalFrames),HX_("totalFrames",8a,a2,bb,72)},
	{::hx::fsString,(int)offsetof(ModItem_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsString,(int)offsetof(ModItem_obj,desc),HX_("desc",51,5e,66,42)},
	{::hx::fsInt,(int)offsetof(ModItem_obj,iconFps),HX_("iconFps",f0,c9,07,d6)},
	{::hx::fsInt,(int)offsetof(ModItem_obj,bgColor),HX_("bgColor",5e,81,83,f7)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ModItem_obj,pack),HX_("pack",d9,d6,51,4a)},
	{::hx::fsString,(int)offsetof(ModItem_obj,folder),HX_("folder",ae,76,90,f9)},
	{::hx::fsBool,(int)offsetof(ModItem_obj,mustRestart),HX_("mustRestart",c6,44,01,a6)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(ModItem_obj,settings),HX_("settings",e3,7c,3d,8b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ModItem_obj_sStaticStorageInfo = 0;
#endif

static ::String ModItem_obj_sMemberFields[] = {
	HX_("selectBg",e1,0b,6d,b1),
	HX_("icon",79,e7,b2,45),
	HX_("text",ad,cc,f9,4c),
	HX_("totalFrames",8a,a2,bb,72),
	HX_("name",4b,72,ff,48),
	HX_("desc",51,5e,66,42),
	HX_("iconFps",f0,c9,07,d6),
	HX_("bgColor",5e,81,83,f7),
	HX_("pack",d9,d6,51,4a),
	HX_("folder",ae,76,90,f9),
	HX_("mustRestart",c6,44,01,a6),
	HX_("settings",e3,7c,3d,8b),
	::String(null()) };

::hx::Class ModItem_obj::__mClass;

void ModItem_obj::__register()
{
	ModItem_obj _hx_dummy;
	ModItem_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.ModItem",a9,25,87,ec);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ModItem_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ModItem_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ModItem_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ModItem_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
