// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_ColorTween
#include <flixel/tweens/misc/ColorTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_objects_Alphabet
#include <objects/Alphabet.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_options_BaseOptionsMenu
#include <options/BaseOptionsMenu.h>
#endif
#ifndef INCLUDED_options_ModSettingsSubState
#include <options/ModSettingsSubState.h>
#endif
#ifndef INCLUDED_states_FreeplayState
#include <states/FreeplayState.h>
#endif
#ifndef INCLUDED_states_MainMenuState
#include <states/MainMenuState.h>
#endif
#ifndef INCLUDED_states_MenuButton
#include <states/MenuButton.h>
#endif
#ifndef INCLUDED_states_ModItem
#include <states/ModItem.h>
#endif
#ifndef INCLUDED_states_ModsMenuState
#include <states/ModsMenuState.h>
#endif
#ifndef INCLUDED_states_TitleState
#include <states/TitleState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_26ae12acd656cbf2_18_new,"states.ModsMenuState","new",0x1efcc967,"states.ModsMenuState.new","states/ModsMenuState.hx",18,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_26ae12acd656cbf2_117_create,"states.ModsMenuState","create",0x91288c55,"states.ModsMenuState.create","states/ModsMenuState.hx",117,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_26ae12acd656cbf2_134_create,"states.ModsMenuState","create",0x91288c55,"states.ModsMenuState.create","states/ModsMenuState.hx",134,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_26ae12acd656cbf2_137_create,"states.ModsMenuState","create",0x91288c55,"states.ModsMenuState.create","states/ModsMenuState.hx",137,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_26ae12acd656cbf2_154_create,"states.ModsMenuState","create",0x91288c55,"states.ModsMenuState.create","states/ModsMenuState.hx",154,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_26ae12acd656cbf2_214_create,"states.ModsMenuState","create",0x91288c55,"states.ModsMenuState.create","states/ModsMenuState.hx",214,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_26ae12acd656cbf2_220_create,"states.ModsMenuState","create",0x91288c55,"states.ModsMenuState.create","states/ModsMenuState.hx",220,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_26ae12acd656cbf2_226_create,"states.ModsMenuState","create",0x91288c55,"states.ModsMenuState.create","states/ModsMenuState.hx",226,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_26ae12acd656cbf2_239_create,"states.ModsMenuState","create",0x91288c55,"states.ModsMenuState.create","states/ModsMenuState.hx",239,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_26ae12acd656cbf2_256_create,"states.ModsMenuState","create",0x91288c55,"states.ModsMenuState.create","states/ModsMenuState.hx",256,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_26ae12acd656cbf2_282_create,"states.ModsMenuState","create",0x91288c55,"states.ModsMenuState.create","states/ModsMenuState.hx",282,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_26ae12acd656cbf2_57_create,"states.ModsMenuState","create",0x91288c55,"states.ModsMenuState.create","states/ModsMenuState.hx",57,0xd12771ea)
static const int _hx_array_data_0b9c89f5_19[] = {
	(int)0,
};
static const int _hx_array_data_0b9c89f5_20[] = {
	(int)1,
};
static const int _hx_array_data_0b9c89f5_21[] = {
	(int)2,
};
static const int _hx_array_data_0b9c89f5_22[] = {
	(int)3,
};
static const int _hx_array_data_0b9c89f5_23[] = {
	(int)4,
};
HX_LOCAL_STACK_FRAME(_hx_pos_26ae12acd656cbf2_309_update,"states.ModsMenuState","update",0x9c1eab62,"states.ModsMenuState.update","states/ModsMenuState.hx",309,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_26ae12acd656cbf2_563_changeSelectedButton,"states.ModsMenuState","changeSelectedButton",0x6e82ef56,"states.ModsMenuState.changeSelectedButton","states/ModsMenuState.hx",563,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_26ae12acd656cbf2_595_getButton,"states.ModsMenuState","getButton",0x6676e36f,"states.ModsMenuState.getButton","states/ModsMenuState.hx",595,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_26ae12acd656cbf2_607_changeSelectedMod,"states.ModsMenuState","changeSelectedMod",0x04ce02de,"states.ModsMenuState.changeSelectedMod","states/ModsMenuState.hx",607,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_26ae12acd656cbf2_678_updateModDisplayData,"states.ModsMenuState","updateModDisplayData",0xfa8ef0ec,"states.ModsMenuState.updateModDisplayData","states/ModsMenuState.hx",678,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_26ae12acd656cbf2_669_updateModDisplayData,"states.ModsMenuState","updateModDisplayData",0xfa8ef0ec,"states.ModsMenuState.updateModDisplayData","states/ModsMenuState.hx",669,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_26ae12acd656cbf2_712_updateItemPositions,"states.ModsMenuState","updateItemPositions",0xce680355,"states.ModsMenuState.updateItemPositions","states/ModsMenuState.hx",712,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_26ae12acd656cbf2_735_moveModToPosition,"states.ModsMenuState","moveModToPosition",0xe78c441c,"states.ModsMenuState.moveModToPosition","states/ModsMenuState.hx",735,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_26ae12acd656cbf2_768_checkToggleButtons,"states.ModsMenuState","checkToggleButtons",0x8d3eb5fe,"states.ModsMenuState.checkToggleButtons","states/ModsMenuState.hx",768,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_26ae12acd656cbf2_774_reload,"states.ModsMenuState","reload",0x18f878b2,"states.ModsMenuState.reload","states/ModsMenuState.hx",774,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_26ae12acd656cbf2_784_saveTxt,"states.ModsMenuState","saveTxt",0x0bf507ba,"states.ModsMenuState.saveTxt","states/ModsMenuState.hx",784,0xd12771ea)
namespace states{

void ModsMenuState_obj::__construct(::String startMod){
            	HX_STACKFRAME(&_hx_pos_26ae12acd656cbf2_18_new)
HXLINE( 733)		this->waitingToRestart = false;
HXLINE( 710)		this->centerMod = 2;
HXLINE( 667)		this->colorTween = null();
HXLINE( 306)		this->holdTime = ((Float)0);
HXLINE( 304)		this->gottaClickAgain = false;
HXLINE( 303)		this->holdingElapsed = ((Float)0);
HXLINE( 302)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 302)		point->_inPool = false;
HXDLIN( 302)		this->mouseOffsets = point;
HXLINE( 301)		this->holdingMod = false;
HXLINE( 300)		this->nextAttempt = ((Float)1);
HXLINE(  50)		this->startMod = null();
HXLINE(  49)		this->_lastControllerMode = false;
HXLINE(  46)		this->noModsSine = ((Float)0);
HXLINE(  44)		this->modNameInitialY = ((Float)0);
HXLINE(  43)		this->curSelectedButton = 0;
HXLINE(  42)		this->hoveringOnMods = true;
HXLINE(  40)		this->curSelectedMod = 0;
HXLINE(  32)		this->buttons = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  25)		this->modsList = null();
HXLINE(  53)		this->startMod = startMod;
HXLINE(  54)		super::__construct(null(),null());
            	}

Dynamic ModsMenuState_obj::__CreateEmpty() { return new ModsMenuState_obj; }

void *ModsMenuState_obj::_hx_vtable = 0;

Dynamic ModsMenuState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ModsMenuState_obj > _hx_result = new ModsMenuState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ModsMenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x563293a6) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x53aaab8a || inClassId==(int)0x563293a6;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			if (inClassId<=(int)0x7123119f) {
				return inClassId==(int)0x62817b24 || inClassId==(int)0x7123119f;
			} else {
				return inClassId==(int)0x7c795c9f;
			}
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void ModsMenuState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::ModsMenuState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_26ae12acd656cbf2_117_create)
HXLINE( 118)			_gthis->buttonEnableAll->ignoreCheck = false;
HXLINE( 119)			{
HXLINE( 119)				int _g = 0;
HXDLIN( 119)				::Array< ::Dynamic> _g1 = _gthis->modsGroup->members;
HXDLIN( 119)				while((_g < _g1->length)){
HXLINE( 119)					 ::states::ModItem mod = _g1->__get(_g).StaticCast<  ::states::ModItem >();
HXDLIN( 119)					_g = (_g + 1);
HXLINE( 121)					if (( (::Array< ::String >)(_gthis->modsList->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) )->contains(mod->folder)) {
HXLINE( 123)						( (::Array< ::String >)(_gthis->modsList->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) )->remove(mod->folder);
HXLINE( 124)						( (::Array< ::String >)(_gthis->modsList->__Field(HX_("enabled",81,04,31,7e),::hx::paccDynamic)) )->push(mod->folder);
HXLINE( 125)						mod->icon->set_color(-1);
HXLINE( 126)						mod->text->set_color(-1);
            					}
            				}
            			}
HXLINE( 129)			_gthis->updateModDisplayData();
HXLINE( 130)			_gthis->checkToggleButtons();
HXLINE( 131)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 131)			_hx_tmp->play(::backend::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.6),null(),null(),null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::ModsMenuState,_gthis) HXARGC(1)
            		void _hx_run(bool focus){
            			HX_GC_STACKFRAME(&_hx_pos_26ae12acd656cbf2_134_create)
HXLINE( 134)			if (!(focus)) {
HXLINE( 134)				_gthis->buttonEnableAll->bg->set_color(-16744448);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::ModsMenuState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_26ae12acd656cbf2_137_create)
HXLINE( 138)			_gthis->buttonDisableAll->ignoreCheck = false;
HXLINE( 139)			{
HXLINE( 139)				int _g = 0;
HXDLIN( 139)				::Array< ::Dynamic> _g1 = _gthis->modsGroup->members;
HXDLIN( 139)				while((_g < _g1->length)){
HXLINE( 139)					 ::states::ModItem mod = _g1->__get(_g).StaticCast<  ::states::ModItem >();
HXDLIN( 139)					_g = (_g + 1);
HXLINE( 141)					if (( (::Array< ::String >)(_gthis->modsList->__Field(HX_("enabled",81,04,31,7e),::hx::paccDynamic)) )->contains(mod->folder)) {
HXLINE( 143)						( (::Array< ::String >)(_gthis->modsList->__Field(HX_("enabled",81,04,31,7e),::hx::paccDynamic)) )->remove(mod->folder);
HXLINE( 144)						( (::Array< ::String >)(_gthis->modsList->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) )->push(mod->folder);
HXLINE( 145)						mod->icon->set_color(-39322);
HXLINE( 146)						mod->text->set_color(-8355712);
            					}
            				}
            			}
HXLINE( 149)			_gthis->updateModDisplayData();
HXLINE( 150)			_gthis->checkToggleButtons();
HXLINE( 151)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 151)			_hx_tmp->play(::backend::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.6),null(),null(),null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::states::ModsMenuState,_gthis) HXARGC(1)
            		void _hx_run(bool focus){
            			HX_GC_STACKFRAME(&_hx_pos_26ae12acd656cbf2_154_create)
HXLINE( 154)			if (!(focus)) {
HXLINE( 154)				_gthis->buttonDisableAll->bg->set_color(-39322);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::states::ModsMenuState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_26ae12acd656cbf2_214_create)
HXLINE( 214)			_gthis->moveModToPosition(null(),0);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::states::ModsMenuState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_26ae12acd656cbf2_220_create)
HXLINE( 220)			_gthis->moveModToPosition(null(),(_gthis->curSelectedMod - 1));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::states::ModsMenuState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_26ae12acd656cbf2_226_create)
HXLINE( 226)			_gthis->moveModToPosition(null(),(_gthis->curSelectedMod + 1));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::states::ModsMenuState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_26ae12acd656cbf2_239_create)
HXLINE( 240)			 ::states::ModItem curMod = Dynamic( _gthis->modsGroup->members->__get(_gthis->curSelectedMod)).StaticCast<  ::states::ModItem >();
HXLINE( 241)			bool _hx_tmp;
HXDLIN( 241)			bool _hx_tmp1;
HXDLIN( 241)			if (::hx::IsNotNull( curMod )) {
HXLINE( 241)				_hx_tmp1 = ::hx::IsNotNull( curMod->settings );
            			}
            			else {
HXLINE( 241)				_hx_tmp1 = false;
            			}
HXDLIN( 241)			if (_hx_tmp1) {
HXLINE( 241)				_hx_tmp = (curMod->settings->get_length() > 0);
            			}
            			else {
HXLINE( 241)				_hx_tmp = false;
            			}
HXDLIN( 241)			if (_hx_tmp) {
HXLINE( 243)				 ::states::ModsMenuState _gthis1 = _gthis;
HXDLIN( 243)				_gthis1->openSubState( ::options::ModSettingsSubState_obj::__alloc( HX_CTX ,curMod->settings,curMod->folder,curMod->name));
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8, ::states::ModsMenuState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_26ae12acd656cbf2_256_create)
HXLINE( 257)			 ::states::ModItem curMod = Dynamic( _gthis->modsGroup->members->__get(_gthis->curSelectedMod)).StaticCast<  ::states::ModItem >();
HXLINE( 258)			::String mod = curMod->folder;
HXLINE( 259)			if (!(( (::Array< ::String >)(_gthis->modsList->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) )->contains(mod))) {
HXLINE( 261)				( (::Array< ::String >)(_gthis->modsList->__Field(HX_("enabled",81,04,31,7e),::hx::paccDynamic)) )->remove(mod);
HXLINE( 262)				( (::Array< ::String >)(_gthis->modsList->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) )->push(mod);
            			}
            			else {
HXLINE( 266)				( (::Array< ::String >)(_gthis->modsList->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) )->remove(mod);
HXLINE( 267)				( (::Array< ::String >)(_gthis->modsList->__Field(HX_("enabled",81,04,31,7e),::hx::paccDynamic)) )->push(mod);
            			}
HXLINE( 269)			int button;
HXDLIN( 269)			if (( (::Array< ::String >)(_gthis->modsList->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) )->contains(mod)) {
HXLINE( 269)				button = -39322;
            			}
            			else {
HXLINE( 269)				button = -1;
            			}
HXDLIN( 269)			curMod->icon->set_color(button);
HXLINE( 270)			int button1;
HXDLIN( 270)			if (( (::Array< ::String >)(_gthis->modsList->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) )->contains(mod)) {
HXLINE( 270)				button1 = -8355712;
            			}
            			else {
HXLINE( 270)				button1 = -1;
            			}
HXDLIN( 270)			curMod->text->set_color(button1);
HXLINE( 272)			if (curMod->mustRestart) {
HXLINE( 272)				_gthis->waitingToRestart = true;
            			}
HXLINE( 273)			_gthis->updateModDisplayData();
HXLINE( 274)			_gthis->checkToggleButtons();
HXLINE( 275)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd button2 = ::flixel::FlxG_obj::sound;
HXDLIN( 275)			button2->play(::backend::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.6),null(),null(),null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_9, ::states::ModsMenuState,_gthis, ::states::MenuButton,button4) HXARGC(1)
            		void _hx_run(bool focus){
            			HX_GC_STACKFRAME(&_hx_pos_26ae12acd656cbf2_282_create)
HXLINE( 282)			if (!(focus)) {
HXLINE( 283)				int _hx_tmp;
HXDLIN( 283)				if (( (::Array< ::String >)(_gthis->modsList->__Field(HX_("enabled",81,04,31,7e),::hx::paccDynamic)) )->contains(Dynamic( _gthis->modsGroup->members->__get(_gthis->curSelectedMod)).StaticCast<  ::states::ModItem >()->folder)) {
HXLINE( 283)					_hx_tmp = -16744448;
            				}
            				else {
HXLINE( 283)					_hx_tmp = -39322;
            				}
HXDLIN( 283)				button4->bg->set_color(_hx_tmp);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_26ae12acd656cbf2_57_create)
HXDLIN(  57)		 ::states::ModsMenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  58)		::backend::Paths_obj::clearStoredMemory();
HXLINE(  59)		::backend::Paths_obj::clearUnusedMemory();
HXLINE(  60)		this->persistentUpdate = false;
HXLINE(  62)		if (!(::backend::Mods_obj::updatedOnState)) {
HXLINE(  62)			::backend::Mods_obj::updateModList();
            		}
HXDLIN(  62)		 ::Dynamic list =  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("all",21,f9,49,00),::Array_obj< ::String >::__new(0))
            			->setFixed(1,HX_("disabled",7c,41,04,7c),::Array_obj< ::String >::__new(0))
            			->setFixed(2,HX_("enabled",81,04,31,7e),::Array_obj< ::String >::__new(0)));
HXDLIN(  62)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  62)			int _g = 0;
HXDLIN(  62)			::String path = HX_("modsList.txt",f1,ca,08,ac);
HXDLIN(  62)			::String daList = null();
HXDLIN(  62)			::Array< ::String > formatted = path.split(HX_(":",3a,00,00,00));
HXLINE(  23)			path = formatted->__get((formatted->length - 1));
HXLINE(  62)			if (::sys::FileSystem_obj::exists(path)) {
HXLINE(  24)				daList = ::sys::io::File_obj::getContent(path);
            			}
HXLINE(  62)			::Array< ::String > _g1;
HXDLIN(  62)			if (::hx::IsNotNull( daList )) {
HXLINE(  62)				::Array< ::String > daList1 = ::Array_obj< ::String >::__new(0);
HXLINE(  45)				daList1 = ::StringTools_obj::trim(daList).split(HX_("\n",0a,00,00,00));
HXLINE(  62)				{
HXLINE(  62)					int _g2 = 0;
HXDLIN(  62)					int _g3 = daList1->length;
HXDLIN(  62)					while((_g2 < _g3)){
HXLINE(  62)						_g2 = (_g2 + 1);
HXDLIN(  62)						int i = (_g2 - 1);
HXDLIN(  62)						daList1[i] = ::StringTools_obj::trim(daList1->__get(i));
            					}
            				}
HXDLIN(  62)				_g1 = daList1;
            			}
            			else {
HXLINE(  62)				_g1 = ::Array_obj< ::String >::__new(0);
            			}
HXDLIN(  62)			while((_g < _g1->length)){
HXLINE(  62)				::String mod = _g1->__get(_g);
HXDLIN(  62)				_g = (_g + 1);
HXDLIN(  62)				if ((::StringTools_obj::trim(mod).length < 1)) {
HXLINE(  62)					continue;
            				}
HXDLIN(  62)				::Array< ::String > dat = mod.split(HX_("|",7c,00,00,00));
HXDLIN(  62)				( (::Array< ::String >)(list->__Field(HX_("all",21,f9,49,00),::hx::paccDynamic)) )->push(dat->__get(0));
HXDLIN(  62)				if ((dat->__get(1) == HX_("1",31,00,00,00))) {
HXLINE(  62)					( (::Array< ::String >)(list->__Field(HX_("enabled",81,04,31,7e),::hx::paccDynamic)) )->push(dat->__get(0));
            				}
            				else {
HXLINE(  62)					( (::Array< ::String >)(list->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) )->push(dat->__get(0));
            				}
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g4 = _hx_e;
HXLINE( 166)				 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g4);
HXLINE(  62)				::haxe::Log_obj::trace(e,::hx::SourceInfo(HX_("source/backend/Mods.hx",1e,5b,8b,ff),167,HX_("backend.Mods",2b,aa,ba,a1),HX_("parseList",31,6e,59,cf)));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN(  62)		this->modsList = list;
HXLINE(  63)		::String _hx_tmp;
HXDLIN(  63)		if (::hx::IsNotNull(  ::Dynamic(this->modsList->__Field(HX_("all",21,f9,49,00),::hx::paccDynamic))->__GetItem(0) )) {
HXLINE(  63)			_hx_tmp = ( (::String)( ::Dynamic(this->modsList->__Field(HX_("all",21,f9,49,00),::hx::paccDynamic))->__GetItem(0)) );
            		}
            		else {
HXLINE(  63)			_hx_tmp = HX_("",00,00,00,00);
            		}
HXDLIN(  63)		::backend::Mods_obj::currentModDirectory = _hx_tmp;
HXLINE(  67)		::backend::DiscordClient_obj::changePresence(HX_("In the Menus",0a,c1,ad,c6),null(),null(),null(),null());
HXLINE(  70)		 ::flixel::FlxSprite _hx_tmp1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  70)		this->bg = _hx_tmp1->loadGraphic(::backend::Paths_obj::image(HX_("menuDesat",26,91,04,72),null(),null()),null(),null(),null(),null(),null());
HXLINE(  71)		this->bg->set_color(-10069249);
HXLINE(  72)		this->bg->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  73)		this->add(this->bg);
HXLINE(  74)		{
HXLINE(  74)			 ::flixel::FlxSprite _this = this->bg;
HXDLIN(  74)			int axes = 17;
HXDLIN(  74)			bool _hx_tmp2;
HXDLIN(  74)			if ((axes != 1)) {
HXLINE(  74)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  74)				_hx_tmp2 = true;
            			}
HXDLIN(  74)			if (_hx_tmp2) {
HXLINE(  74)				int _hx_tmp3 = ::flixel::FlxG_obj::width;
HXDLIN(  74)				_this->set_x(((( (Float)(_hx_tmp3) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  74)			bool _hx_tmp4;
HXDLIN(  74)			if ((axes != 16)) {
HXLINE(  74)				_hx_tmp4 = (axes == 17);
            			}
            			else {
HXLINE(  74)				_hx_tmp4 = true;
            			}
HXDLIN(  74)			if (_hx_tmp4) {
HXLINE(  74)				int _hx_tmp5 = ::flixel::FlxG_obj::height;
HXDLIN(  74)				_this->set_y(((( (Float)(_hx_tmp5) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  76)		this->bgList = ::flixel::util::FlxSpriteUtil_obj::drawRoundRect( ::flixel::FlxSprite_obj::__alloc( HX_CTX ,40,40,null())->makeGraphic(340,440,0,null(),null()),( (Float)(0) ),( (Float)(0) ),( (Float)(340) ),( (Float)(440) ),( (Float)(15) ),( (Float)(15) ),-16777216,null(),null());
HXLINE(  77)		this->bgList->set_alpha(((Float)0.6));
HXLINE(  79)		this->modsGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  81)		{
HXLINE(  81)			int _g_current = 0;
HXDLIN(  81)			::Array< ::String > _g_array = ( (::Array< ::String >)(this->modsList->__Field(HX_("all",21,f9,49,00),::hx::paccDynamic)) );
HXDLIN(  81)			while((_g_current < _g_array->length)){
HXLINE(  81)				::String _g_value = _g_array->__get(_g_current);
HXDLIN(  81)				_g_current = (_g_current + 1);
HXDLIN(  81)				int _g_key = (_g_current - 1);
HXDLIN(  81)				int i1 = _g_key;
HXDLIN(  81)				::String mod1 = _g_value;
HXLINE(  82)				{
HXLINE(  83)					if ((this->startMod == mod1)) {
HXLINE(  83)						this->curSelectedMod = i1;
            					}
HXLINE(  85)					 ::states::ModItem modItem =  ::states::ModItem_obj::__alloc( HX_CTX ,mod1);
HXLINE(  86)					if (( (::Array< ::String >)(this->modsList->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) )->contains(mod1)) {
HXLINE(  88)						modItem->icon->set_color(-39322);
HXLINE(  89)						modItem->text->set_color(-8355712);
            					}
HXLINE(  91)					this->modsGroup->add(modItem).StaticCast<  ::states::ModItem >();
            				}
            			}
            		}
HXLINE(  94)		 ::states::ModItem mod2 = Dynamic( this->modsGroup->members->__get(this->curSelectedMod)).StaticCast<  ::states::ModItem >();
HXLINE(  95)		if (::hx::IsNotNull( mod2 )) {
HXLINE(  95)			this->bg->set_color(mod2->bgColor);
            		}
HXLINE(  98)		Float buttonX = this->bgList->x;
HXLINE(  99)		int buttonWidth = ::Std_obj::_hx_int(this->bgList->get_width());
HXLINE( 100)		int buttonHeight = 80;
HXLINE( 102)		Float _hx_tmp6 = this->bgList->y;
HXDLIN( 102)		this->buttonReload =  ::states::MenuButton_obj::__alloc( HX_CTX ,buttonX,((_hx_tmp6 + this->bgList->get_height()) + 20),buttonWidth,buttonHeight,HX_("RELOAD",59,ff,61,b6),null(),this->reload_dyn(),null(),null());
HXLINE( 103)		this->add(this->buttonReload);
HXLINE( 105)		Float myY = this->buttonReload->y;
HXDLIN( 105)		Float myY1 = ((myY + this->buttonReload->bg->get_height()) + 20);
HXLINE( 117)		this->buttonEnableAll =  ::states::MenuButton_obj::__alloc( HX_CTX ,buttonX,myY1,buttonWidth,buttonHeight,HX_("ENABLE ALL",e4,c0,15,8b),null(), ::Dynamic(new _hx_Closure_0(_gthis)),null(),null());
HXLINE( 133)		this->buttonEnableAll->bg->set_color(-16744448);
HXLINE( 134)		this->buttonEnableAll->focusChangeCallback =  ::Dynamic(new _hx_Closure_1(_gthis));
HXLINE( 135)		this->add(this->buttonEnableAll);
HXLINE( 137)		this->buttonDisableAll =  ::states::MenuButton_obj::__alloc( HX_CTX ,buttonX,myY1,buttonWidth,buttonHeight,HX_("DISABLE ALL",a9,2a,0b,e6),null(), ::Dynamic(new _hx_Closure_2(_gthis)),null(),null());
HXLINE( 153)		this->buttonDisableAll->bg->set_color(-39322);
HXLINE( 154)		this->buttonDisableAll->focusChangeCallback =  ::Dynamic(new _hx_Closure_3(_gthis));
HXLINE( 155)		this->add(this->buttonDisableAll);
HXLINE( 156)		this->checkToggleButtons();
HXLINE( 158)		if ((( (::Array< ::String >)(this->modsList->__Field(HX_("all",21,f9,49,00),::hx::paccDynamic)) )->length < 1)) {
HXLINE( 160)			 ::states::MenuButton _hx_tmp7 = this->buttonDisableAll;
HXDLIN( 160)			_hx_tmp7->set_visible(this->buttonDisableAll->set_enabled(false));
HXLINE( 161)			this->buttonEnableAll->set_visible(true);
HXLINE( 163)			Float myX = this->bgList->x;
HXDLIN( 163)			Float myX1 = ((myX + this->bgList->get_width()) + 20);
HXLINE( 164)			this->noModsTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,myX1,0,((( (Float)(::flixel::FlxG_obj::width) ) - myX1) - ( (Float)(20) )),HX_("NO MODS INSTALLED\nPRESS BACK TO EXIT OR INSTALL A MOD",fa,73,fd,5e),48,null());
HXLINE( 165)			if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < ((Float)0.1))) {
HXLINE( 165)				 ::flixel::text::FlxText fh = this->noModsTxt;
HXDLIN( 165)				fh->set_text((fh->text + HX_("\nBITCH.",e6,ce,5d,43)));
            			}
HXLINE( 166)			 ::flixel::text::FlxText _hx_tmp8 = this->noModsTxt;
HXDLIN( 166)			::String file = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN( 166)			::String _hx_tmp9;
HXDLIN( 166)			if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 166)				_hx_tmp9 = file;
            			}
            			else {
HXLINE( 166)				_hx_tmp9 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            			}
HXDLIN( 166)			_hx_tmp8->setFormat(_hx_tmp9,32,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 167)			this->noModsTxt->set_borderSize(( (Float)(2) ));
HXLINE( 168)			this->add(this->noModsTxt);
HXLINE( 169)			{
HXLINE( 169)				 ::flixel::text::FlxText _this1 = this->noModsTxt;
HXDLIN( 169)				int axes1 = 16;
HXDLIN( 169)				bool _hx_tmp10;
HXDLIN( 169)				if ((axes1 != 1)) {
HXLINE( 169)					_hx_tmp10 = (axes1 == 17);
            				}
            				else {
HXLINE( 169)					_hx_tmp10 = true;
            				}
HXDLIN( 169)				if (_hx_tmp10) {
HXLINE( 169)					int _hx_tmp11 = ::flixel::FlxG_obj::width;
HXDLIN( 169)					_this1->set_x(((( (Float)(_hx_tmp11) ) - _this1->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 169)				bool _hx_tmp12;
HXDLIN( 169)				if ((axes1 != 16)) {
HXLINE( 169)					_hx_tmp12 = (axes1 == 17);
            				}
            				else {
HXLINE( 169)					_hx_tmp12 = true;
            				}
HXDLIN( 169)				if (_hx_tmp12) {
HXLINE( 169)					int _hx_tmp13 = ::flixel::FlxG_obj::height;
HXDLIN( 169)					_this1->set_y(((( (Float)(_hx_tmp13) ) - _this1->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 171)			Float txt = (this->bgList->x + 15);
HXDLIN( 171)			Float txt1 = (this->bgList->y + 15);
HXDLIN( 171)			 ::flixel::text::FlxText txt2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,txt,txt1,(this->bgList->get_width() - ( (Float)(30) )),HX_("No Mods found.",1c,da,93,34),16,null());
HXLINE( 172)			::String file1 = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN( 172)			::String _hx_tmp14;
HXDLIN( 172)			if (::sys::FileSystem_obj::exists(file1)) {
HXLINE( 172)				_hx_tmp14 = file1;
            			}
            			else {
HXLINE( 172)				_hx_tmp14 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            			}
HXDLIN( 172)			txt2->setFormat(_hx_tmp14,16,-1,null(),null(),null(),null());
HXLINE( 173)			this->add(txt2);
HXLINE( 175)			::flixel::FlxG_obj::autoPause = false;
HXLINE( 176)			this->changeSelectedMod(null(),null());
HXLINE( 177)			this->super::create();
HXDLIN( 177)			return;
            		}
HXLINE( 181)		Float _hx_tmp15 = this->bgList->x;
HXDLIN( 181)		this->bgTitle = ::flixel::util::FlxSpriteUtil_obj::drawRoundRectComplex( ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((_hx_tmp15 + this->bgList->get_width()) + 20),40,null())->makeGraphic(840,180,0,null(),null()),( (Float)(0) ),( (Float)(0) ),( (Float)(840) ),( (Float)(180) ),( (Float)(15) ),( (Float)(15) ),( (Float)(0) ),( (Float)(0) ),-16777216,null(),null());
HXLINE( 182)		this->bgTitle->set_alpha(((Float)0.6));
HXLINE( 183)		this->add(this->bgTitle);
HXLINE( 185)		this->icon =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->bgTitle->x + 15),(this->bgTitle->y + 15),null());
HXLINE( 186)		this->add(this->icon);
HXLINE( 188)		this->modNameInitialY = (this->icon->y + 80);
HXLINE( 189)		this->modName =  ::objects::Alphabet_obj::__alloc( HX_CTX ,(this->icon->x + 165),this->modNameInitialY,HX_("",00,00,00,00),true);
HXLINE( 190)		this->modName->set_scaleY(((Float)0.8));
HXLINE( 191)		this->add(this->modName);
HXLINE( 193)		this->bgDescription = ::flixel::util::FlxSpriteUtil_obj::drawRoundRectComplex( ::flixel::FlxSprite_obj::__alloc( HX_CTX ,this->bgTitle->x,(this->bgTitle->y + 200),null())->makeGraphic(840,450,0,null(),null()),( (Float)(0) ),( (Float)(0) ),( (Float)(840) ),( (Float)(450) ),( (Float)(0) ),( (Float)(0) ),( (Float)(15) ),( (Float)(15) ),-16777216,null(),null());
HXLINE( 194)		this->bgDescription->set_alpha(((Float)0.6));
HXLINE( 195)		this->add(this->bgDescription);
HXLINE( 197)		Float _hx_tmp16 = (this->bgDescription->x + 15);
HXDLIN( 197)		Float _hx_tmp17 = (this->bgDescription->y + 15);
HXDLIN( 197)		this->modDesc =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp16,_hx_tmp17,(this->bgDescription->get_width() - ( (Float)(30) )),HX_("",00,00,00,00),24,null());
HXLINE( 198)		 ::flixel::text::FlxText _hx_tmp18 = this->modDesc;
HXDLIN( 198)		::String file2 = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN( 198)		::String _hx_tmp19;
HXDLIN( 198)		if (::sys::FileSystem_obj::exists(file2)) {
HXLINE( 198)			_hx_tmp19 = file2;
            		}
            		else {
HXLINE( 198)			_hx_tmp19 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN( 198)		_hx_tmp18->setFormat(_hx_tmp19,24,-1,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE( 199)		this->add(this->modDesc);
HXLINE( 201)		int myHeight = 100;
HXLINE( 202)		Float _hx_tmp20 = (this->bgDescription->x + 15);
HXDLIN( 202)		Float _hx_tmp21 = this->bgDescription->y;
HXDLIN( 202)		Float _hx_tmp22 = (((_hx_tmp21 + this->bgDescription->get_height()) - ( (Float)(myHeight) )) - ( (Float)(25) ));
HXDLIN( 202)		this->modRestartText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp20,_hx_tmp22,(this->bgDescription->get_width() - ( (Float)(30) )),HX_("* Moving or Toggling On/Off this Mod will restart the game.",5b,8a,17,8d),16,null());
HXLINE( 203)		 ::flixel::text::FlxText _hx_tmp23 = this->modRestartText;
HXDLIN( 203)		::String file3 = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN( 203)		::String _hx_tmp24;
HXDLIN( 203)		if (::sys::FileSystem_obj::exists(file3)) {
HXLINE( 203)			_hx_tmp24 = file3;
            		}
            		else {
HXLINE( 203)			_hx_tmp24 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN( 203)		_hx_tmp23->setFormat(_hx_tmp24,16,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE( 204)		this->add(this->modRestartText);
HXLINE( 206)		Float _hx_tmp25 = this->bgDescription->x;
HXDLIN( 206)		Float _hx_tmp26 = this->bgDescription->y;
HXDLIN( 206)		this->bgButtons = ::flixel::util::FlxSpriteUtil_obj::drawRoundRectComplex( ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp25,((_hx_tmp26 + this->bgDescription->get_height()) - ( (Float)(myHeight) )),null())->makeGraphic(840,myHeight,0,null(),null()),( (Float)(0) ),( (Float)(0) ),( (Float)(840) ),( (Float)(myHeight) ),( (Float)(0) ),( (Float)(0) ),( (Float)(15) ),( (Float)(15) ),-1,null(),null());
HXLINE( 207)		this->bgButtons->set_color(-16777216);
HXLINE( 208)		this->bgButtons->set_alpha(((Float)0.2));
HXLINE( 209)		this->add(this->bgButtons);
HXLINE( 211)		Float buttonsX = (this->bgButtons->x + 320);
HXLINE( 212)		Float buttonsY = (this->bgButtons->y + 10);
HXLINE( 214)		 ::states::MenuButton button =  ::states::MenuButton_obj::__alloc( HX_CTX ,buttonsX,buttonsY,80,80,null(),::backend::Paths_obj::image(HX_("modsMenuButtons",71,be,50,a0),null(),null()), ::Dynamic(new _hx_Closure_4(_gthis)),54,54);
HXLINE( 215)		button->icon->animation->add(HX_("icon",79,e7,b2,45),::Array_obj< int >::fromData( _hx_array_data_0b9c89f5_19,1),null(),null(),null(),null());
HXLINE( 216)		button->icon->animation->play(HX_("icon",79,e7,b2,45),true,null(),null());
HXLINE( 217)		this->add(button);
HXLINE( 218)		this->buttons->push(button);
HXLINE( 220)		 ::states::MenuButton button1 =  ::states::MenuButton_obj::__alloc( HX_CTX ,(buttonsX + 100),buttonsY,80,80,null(),::backend::Paths_obj::image(HX_("modsMenuButtons",71,be,50,a0),null(),null()), ::Dynamic(new _hx_Closure_5(_gthis)),54,54);
HXLINE( 221)		button1->icon->animation->add(HX_("icon",79,e7,b2,45),::Array_obj< int >::fromData( _hx_array_data_0b9c89f5_20,1),null(),null(),null(),null());
HXLINE( 222)		button1->icon->animation->play(HX_("icon",79,e7,b2,45),true,null(),null());
HXLINE( 223)		this->add(button1);
HXLINE( 224)		this->buttons->push(button1);
HXLINE( 226)		 ::states::MenuButton button2 =  ::states::MenuButton_obj::__alloc( HX_CTX ,(buttonsX + 200),buttonsY,80,80,null(),::backend::Paths_obj::image(HX_("modsMenuButtons",71,be,50,a0),null(),null()), ::Dynamic(new _hx_Closure_6(_gthis)),54,54);
HXLINE( 227)		button2->icon->animation->add(HX_("icon",79,e7,b2,45),::Array_obj< int >::fromData( _hx_array_data_0b9c89f5_21,1),null(),null(),null(),null());
HXLINE( 228)		button2->icon->animation->play(HX_("icon",79,e7,b2,45),true,null(),null());
HXLINE( 229)		this->add(button2);
HXLINE( 230)		this->buttons->push(button2);
HXLINE( 232)		if ((( (::Array< ::String >)(this->modsList->__Field(HX_("all",21,f9,49,00),::hx::paccDynamic)) )->length < 2)) {
HXLINE( 234)			int _g5 = 0;
HXDLIN( 234)			::Array< ::Dynamic> _g6 = this->buttons;
HXDLIN( 234)			while((_g5 < _g6->length)){
HXLINE( 234)				 ::states::MenuButton button3 = _g6->__get(_g5).StaticCast<  ::states::MenuButton >();
HXDLIN( 234)				_g5 = (_g5 + 1);
HXLINE( 235)				button3->set_enabled(false);
            			}
            		}
HXLINE( 238)		this->settingsButton =  ::states::MenuButton_obj::__alloc( HX_CTX ,(buttonsX + 300),buttonsY,80,80,null(),::backend::Paths_obj::image(HX_("modsMenuButtons",71,be,50,a0),null(),null()), ::Dynamic(new _hx_Closure_7(_gthis)),54,54);
HXLINE( 247)		this->settingsButton->icon->animation->add(HX_("icon",79,e7,b2,45),::Array_obj< int >::fromData( _hx_array_data_0b9c89f5_22,1),null(),null(),null(),null());
HXLINE( 248)		this->settingsButton->icon->animation->play(HX_("icon",79,e7,b2,45),true,null(),null());
HXLINE( 249)		this->add(this->settingsButton);
HXLINE( 250)		this->buttons->push(this->settingsButton);
HXLINE( 252)		bool _hx_tmp27;
HXDLIN( 252)		if (::hx::IsNotNull( Dynamic( this->modsGroup->members->__get(this->curSelectedMod)).StaticCast<  ::states::ModItem >()->settings )) {
HXLINE( 252)			_hx_tmp27 = (Dynamic( this->modsGroup->members->__get(this->curSelectedMod)).StaticCast<  ::states::ModItem >()->settings->get_length() < 1);
            		}
            		else {
HXLINE( 252)			_hx_tmp27 = true;
            		}
HXDLIN( 252)		if (_hx_tmp27) {
HXLINE( 253)			this->settingsButton->set_enabled(false);
            		}
HXLINE( 255)		 ::states::MenuButton button4 =  ::states::MenuButton_obj::__alloc( HX_CTX ,(buttonsX + 400),buttonsY,80,80,null(),::backend::Paths_obj::image(HX_("modsMenuButtons",71,be,50,a0),null(),null()), ::Dynamic(new _hx_Closure_8(_gthis)),54,54);
HXLINE( 277)		button4->icon->animation->add(HX_("icon",79,e7,b2,45),::Array_obj< int >::fromData( _hx_array_data_0b9c89f5_23,1),null(),null(),null(),null());
HXLINE( 278)		button4->icon->animation->play(HX_("icon",79,e7,b2,45),true,null(),null());
HXLINE( 279)		this->add(button4);
HXLINE( 280)		this->buttons->push(button4);
HXLINE( 281)		button4->focusChangeCallback =  ::Dynamic(new _hx_Closure_9(_gthis,button4));
HXLINE( 286)		if ((( (::Array< ::String >)(this->modsList->__Field(HX_("all",21,f9,49,00),::hx::paccDynamic)) )->length < 1)) {
HXLINE( 288)			{
HXLINE( 288)				int _g7 = 0;
HXDLIN( 288)				::Array< ::Dynamic> _g8 = this->buttons;
HXDLIN( 288)				while((_g7 < _g8->length)){
HXLINE( 288)					 ::states::MenuButton btn = _g8->__get(_g7).StaticCast<  ::states::MenuButton >();
HXDLIN( 288)					_g7 = (_g7 + 1);
HXDLIN( 288)					btn->set_enabled(false);
            				}
            			}
HXLINE( 289)			button4->focusChangeCallback = null();
            		}
HXLINE( 292)		this->add(this->bgList);
HXLINE( 293)		this->add(this->modsGroup);
HXLINE( 294)		this->_lastControllerMode = this->get_controls()->controllerMode;
HXLINE( 296)		this->changeSelectedMod(null(),null());
HXLINE( 297)		this->super::create();
            	}


void ModsMenuState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_26ae12acd656cbf2_309_update)
HXLINE( 310)		bool _hx_tmp;
HXDLIN( 310)		if (this->get_controls()->get_BACK()) {
HXLINE( 310)			_hx_tmp = this->hoveringOnMods;
            		}
            		else {
HXLINE( 310)			_hx_tmp = false;
            		}
HXDLIN( 310)		if (_hx_tmp) {
HXLINE( 312)			if (::hx::IsNotNull( this->colorTween )) {
HXLINE( 313)				this->colorTween->cancel();
            			}
HXLINE( 315)			this->saveTxt();
HXLINE( 317)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 317)			_hx_tmp1->play(::backend::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
HXLINE( 318)			if (this->waitingToRestart) {
HXLINE( 321)				::states::TitleState_obj::initialized = false;
HXLINE( 322)				::states::TitleState_obj::closedState = false;
HXLINE( 323)				{
HXLINE( 323)					 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 323)					 ::Dynamic onComplete = null();
HXDLIN( 323)					if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE( 323)						_this->fadeTween->cancel();
            					}
HXDLIN( 323)					_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,( (Float)(0) ),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            				}
HXLINE( 324)				if (::hx::IsNotNull( ::states::FreeplayState_obj::vocals )) {
HXLINE( 326)					{
HXLINE( 326)						 ::flixel::sound::FlxSound _this1 = ::states::FreeplayState_obj::vocals;
HXDLIN( 326)						 ::Dynamic onComplete1 = null();
HXDLIN( 326)						if (::hx::IsNotNull( _this1->fadeTween )) {
HXLINE( 326)							_this1->fadeTween->cancel();
            						}
HXDLIN( 326)						_this1->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this1->_volume,( (Float)(0) ),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete1)),_this1->volumeTween_dyn());
            					}
HXLINE( 327)					::states::FreeplayState_obj::vocals = null();
            				}
HXLINE( 329)				::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.5),false,::flixel::FlxG_obj::resetGame_dyn(),false);
            			}
            			else {
HXLINE( 331)				::backend::MusicBeatState_obj::switchState( ::states::MainMenuState_obj::__alloc( HX_CTX ,null(),null()));
            			}
HXLINE( 333)			this->persistentUpdate = false;
HXLINE( 334)			::flixel::FlxG_obj::autoPause = ::backend::ClientPrefs_obj::data->autoPause;
HXLINE( 335)			::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE( 336)			return;
            		}
HXLINE( 339)		bool _hx_tmp2;
HXDLIN( 339)		 ::flixel::input::mouse::FlxMouse _this2 = ::flixel::FlxG_obj::mouse;
HXDLIN( 339)		if (!((::Math_obj::abs(( (Float)((_this2->x - _this2->_prevX)) )) > 10))) {
HXLINE( 339)			 ::flixel::input::mouse::FlxMouse _this3 = ::flixel::FlxG_obj::mouse;
HXDLIN( 339)			_hx_tmp2 = (::Math_obj::abs(( (Float)((_this3->y - _this3->_prevY)) )) > 10);
            		}
            		else {
HXLINE( 339)			_hx_tmp2 = true;
            		}
HXDLIN( 339)		if (_hx_tmp2) {
HXLINE( 341)			this->get_controls()->controllerMode = false;
HXLINE( 342)			if (!(::flixel::FlxG_obj::mouse->visible)) {
HXLINE( 342)				::flixel::FlxG_obj::mouse->set_visible(true);
            			}
            		}
HXLINE( 345)		if ((this->get_controls()->controllerMode != this->_lastControllerMode)) {
HXLINE( 347)			if (this->get_controls()->controllerMode) {
HXLINE( 347)				::flixel::FlxG_obj::mouse->set_visible(false);
            			}
HXLINE( 348)			this->_lastControllerMode = this->get_controls()->controllerMode;
            		}
HXLINE( 351)		bool _hx_tmp3;
HXDLIN( 351)		if (!(this->get_controls()->get_UI_DOWN_R())) {
HXLINE( 351)			_hx_tmp3 = this->get_controls()->get_UI_UP_R();
            		}
            		else {
HXLINE( 351)			_hx_tmp3 = true;
            		}
HXDLIN( 351)		if (_hx_tmp3) {
HXLINE( 351)			this->holdTime = ( (Float)(0) );
            		}
HXLINE( 353)		if ((( (::Array< ::String >)(this->modsList->__Field(HX_("all",21,f9,49,00),::hx::paccDynamic)) )->length > 0)) {
HXLINE( 355)			bool _hx_tmp4;
HXDLIN( 355)			if (this->get_controls()->controllerMode) {
HXLINE( 355)				_hx_tmp4 = this->holdingMod;
            			}
            			else {
HXLINE( 355)				_hx_tmp4 = false;
            			}
HXDLIN( 355)			if (_hx_tmp4) {
HXLINE( 357)				this->holdingMod = false;
HXLINE( 358)				this->holdingElapsed = ( (Float)(0) );
HXLINE( 359)				this->updateItemPositions();
            			}
HXLINE( 362)			bool lastMode = this->hoveringOnMods;
HXLINE( 363)			if ((( (::Array< ::String >)(this->modsList->__Field(HX_("all",21,f9,49,00),::hx::paccDynamic)) )->length > 1)) {
HXLINE( 365)				if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE( 367)					{
HXLINE( 367)						int _g = (this->centerMod - 2);
HXDLIN( 367)						int _g1 = (this->centerMod + 3);
HXDLIN( 367)						while((_g < _g1)){
HXLINE( 367)							_g = (_g + 1);
HXDLIN( 367)							int i = (_g - 1);
HXLINE( 369)							 ::states::ModItem mod = Dynamic( this->modsGroup->members->__get(i)).StaticCast<  ::states::ModItem >();
HXLINE( 370)							bool _hx_tmp5;
HXDLIN( 370)							bool _hx_tmp6;
HXDLIN( 370)							if (::hx::IsNotNull( mod )) {
HXLINE( 370)								_hx_tmp6 = mod->visible;
            							}
            							else {
HXLINE( 370)								_hx_tmp6 = false;
            							}
HXDLIN( 370)							if (_hx_tmp6) {
HXLINE( 370)								_hx_tmp5 = ::flixel::FlxG_obj::mouse->overlaps(mod,null());
            							}
            							else {
HXLINE( 370)								_hx_tmp5 = false;
            							}
HXDLIN( 370)							if (_hx_tmp5) {
HXLINE( 372)								this->hoveringOnMods = true;
HXLINE( 373)								 ::states::MenuButton button = this->getButton();
HXLINE( 374)								button->ignoreCheck = button->set_onFocus(false);
HXLINE( 375)								this->mouseOffsets->set_x((( (Float)(::flixel::FlxG_obj::mouse->x) ) - mod->x));
HXLINE( 376)								this->mouseOffsets->set_y((( (Float)(::flixel::FlxG_obj::mouse->y) ) - mod->y));
HXLINE( 377)								this->curSelectedMod = i;
HXLINE( 378)								this->changeSelectedMod(null(),null());
HXLINE( 379)								goto _hx_goto_24;
            							}
            						}
            						_hx_goto_24:;
            					}
HXLINE( 382)					this->hoveringOnMods = true;
HXLINE( 383)					 ::states::MenuButton button1 = this->getButton();
HXLINE( 384)					button1->ignoreCheck = button1->set_onFocus(false);
HXLINE( 385)					this->gottaClickAgain = false;
            				}
HXLINE( 388)				if (this->hoveringOnMods) {
HXLINE( 390)					int shiftMult;
HXDLIN( 390)					bool shiftMult1;
HXDLIN( 390)					bool shiftMult2;
HXDLIN( 390)					 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 390)					if (!(_this4->keyManager->checkStatusUnsafe(16,_this4->status))) {
HXLINE( 390)						shiftMult2 = ::flixel::FlxG_obj::gamepads->anyHasState(4,1);
            					}
            					else {
HXLINE( 390)						shiftMult2 = true;
            					}
HXDLIN( 390)					if (!(shiftMult2)) {
HXLINE( 390)						shiftMult1 = ::flixel::FlxG_obj::gamepads->anyHasState(5,1);
            					}
            					else {
HXLINE( 390)						shiftMult1 = true;
            					}
HXDLIN( 390)					if (shiftMult1) {
HXLINE( 390)						shiftMult = 4;
            					}
            					else {
HXLINE( 390)						shiftMult = 1;
            					}
HXLINE( 391)					if (this->get_controls()->get_UI_DOWN_P()) {
HXLINE( 392)						this->changeSelectedMod(shiftMult,null());
            					}
            					else {
HXLINE( 393)						if (this->get_controls()->get_UI_UP_P()) {
HXLINE( 394)							this->changeSelectedMod(-(shiftMult),null());
            						}
            						else {
HXLINE( 395)							if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE( 396)								this->changeSelectedMod((-(::flixel::FlxG_obj::mouse->wheel) * shiftMult),true);
            							}
            							else {
HXLINE( 397)								bool _hx_tmp7;
HXDLIN( 397)								bool _hx_tmp8;
HXDLIN( 397)								bool _hx_tmp9;
HXDLIN( 397)								 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 397)								if (!(_this5->keyManager->checkStatusUnsafe(36,_this5->status))) {
HXLINE( 397)									 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 397)									_hx_tmp9 = _this6->keyManager->checkStatusUnsafe(35,_this6->status);
            								}
            								else {
HXLINE( 397)									_hx_tmp9 = true;
            								}
HXDLIN( 397)								if (!(_hx_tmp9)) {
HXLINE( 397)									_hx_tmp8 = ::flixel::FlxG_obj::gamepads->anyHasState(17,2);
            								}
            								else {
HXLINE( 397)									_hx_tmp8 = true;
            								}
HXDLIN( 397)								if (!(_hx_tmp8)) {
HXLINE( 397)									_hx_tmp7 = ::flixel::FlxG_obj::gamepads->anyHasState(18,2);
            								}
            								else {
HXLINE( 397)									_hx_tmp7 = true;
            								}
HXDLIN( 397)								if (_hx_tmp7) {
HXLINE( 400)									bool _hx_tmp10;
HXDLIN( 400)									 ::flixel::input::keyboard::FlxKeyList _this7 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 400)									if (!(_this7->keyManager->checkStatusUnsafe(35,_this7->status))) {
HXLINE( 400)										_hx_tmp10 = ::flixel::FlxG_obj::gamepads->anyHasState(18,2);
            									}
            									else {
HXLINE( 400)										_hx_tmp10 = true;
            									}
HXDLIN( 400)									if (_hx_tmp10) {
HXLINE( 400)										this->curSelectedMod = (( (::Array< ::String >)(this->modsList->__Field(HX_("all",21,f9,49,00),::hx::paccDynamic)) )->length - 1);
            									}
            									else {
HXLINE( 401)										this->curSelectedMod = 0;
            									}
HXLINE( 402)									this->changeSelectedMod(null(),null());
            								}
            								else {
HXLINE( 404)									bool _hx_tmp11;
HXDLIN( 404)									if (!(this->get_controls()->get_UI_UP())) {
HXLINE( 404)										_hx_tmp11 = this->get_controls()->get_UI_DOWN();
            									}
            									else {
HXLINE( 404)										_hx_tmp11 = true;
            									}
HXDLIN( 404)									if (_hx_tmp11) {
HXLINE( 406)										Float lastHoldTime = this->holdTime;
HXLINE( 407)										 ::states::ModsMenuState _hx_tmp12 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 407)										_hx_tmp12->holdTime = (_hx_tmp12->holdTime + elapsed);
HXLINE( 408)										bool _hx_tmp13;
HXDLIN( 408)										if ((this->holdTime > ((Float)0.5))) {
HXLINE( 408)											_hx_tmp13 = (::Math_obj::floor((lastHoldTime * ( (Float)(8) ))) != ::Math_obj::floor((this->holdTime * ( (Float)(8) ))));
            										}
            										else {
HXLINE( 408)											_hx_tmp13 = false;
            										}
HXDLIN( 408)										if (_hx_tmp13) {
HXLINE( 408)											int _hx_tmp14;
HXDLIN( 408)											if (this->get_controls()->get_UI_UP()) {
HXLINE( 408)												_hx_tmp14 = -1;
            											}
            											else {
HXLINE( 408)												_hx_tmp14 = 1;
            											}
HXDLIN( 408)											this->changeSelectedMod((shiftMult * _hx_tmp14),null());
            										}
            									}
            									else {
HXLINE( 410)										bool _hx_tmp15;
HXDLIN( 410)										 ::flixel::input::mouse::FlxMouseButton _this8 = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN( 410)										bool _hx_tmp16;
HXDLIN( 410)										if ((_this8->current != 1)) {
HXLINE( 410)											_hx_tmp16 = (_this8->current == 2);
            										}
            										else {
HXLINE( 410)											_hx_tmp16 = true;
            										}
HXDLIN( 410)										if (_hx_tmp16) {
HXLINE( 410)											_hx_tmp15 = !(this->gottaClickAgain);
            										}
            										else {
HXLINE( 410)											_hx_tmp15 = false;
            										}
HXDLIN( 410)										if (_hx_tmp15) {
HXLINE( 412)											 ::states::ModItem curMod = Dynamic( this->modsGroup->members->__get(this->curSelectedMod)).StaticCast<  ::states::ModItem >();
HXLINE( 413)											if (::hx::IsNotNull( curMod )) {
HXLINE( 415)												bool _hx_tmp17;
HXDLIN( 415)												bool _hx_tmp18;
HXDLIN( 415)												if (!(this->holdingMod)) {
HXLINE( 415)													 ::flixel::input::mouse::FlxMouse _this9 = ::flixel::FlxG_obj::mouse;
HXDLIN( 415)													if ((_this9->_prevX == _this9->x)) {
HXLINE( 415)														_hx_tmp18 = (_this9->_prevY != _this9->y);
            													}
            													else {
HXLINE( 415)														_hx_tmp18 = true;
            													}
            												}
            												else {
HXLINE( 415)													_hx_tmp18 = false;
            												}
HXDLIN( 415)												if (_hx_tmp18) {
HXLINE( 415)													_hx_tmp17 = ::flixel::FlxG_obj::mouse->overlaps(curMod,null());
            												}
            												else {
HXLINE( 415)													_hx_tmp17 = false;
            												}
HXDLIN( 415)												if (_hx_tmp17) {
HXLINE( 415)													this->holdingMod = true;
            												}
HXLINE( 417)												if (this->holdingMod) {
HXLINE( 419)													bool moved = false;
HXLINE( 420)													{
HXLINE( 420)														int _g2 = (this->centerMod - 2);
HXDLIN( 420)														int _g3 = (this->centerMod + 3);
HXDLIN( 420)														while((_g2 < _g3)){
HXLINE( 420)															_g2 = (_g2 + 1);
HXDLIN( 420)															int i1 = (_g2 - 1);
HXLINE( 422)															 ::states::ModItem mod1 = Dynamic( this->modsGroup->members->__get(i1)).StaticCast<  ::states::ModItem >();
HXLINE( 423)															bool _hx_tmp19;
HXDLIN( 423)															bool _hx_tmp20;
HXDLIN( 423)															bool _hx_tmp21;
HXDLIN( 423)															if (::hx::IsNotNull( mod1 )) {
HXLINE( 423)																_hx_tmp21 = mod1->visible;
            															}
            															else {
HXLINE( 423)																_hx_tmp21 = false;
            															}
HXDLIN( 423)															if (_hx_tmp21) {
HXLINE( 423)																_hx_tmp20 = ::flixel::FlxG_obj::mouse->overlaps(mod1,null());
            															}
            															else {
HXLINE( 423)																_hx_tmp20 = false;
            															}
HXDLIN( 423)															if (_hx_tmp20) {
HXLINE( 423)																_hx_tmp19 = (this->curSelectedMod != i1);
            															}
            															else {
HXLINE( 423)																_hx_tmp19 = false;
            															}
HXDLIN( 423)															if (_hx_tmp19) {
HXLINE( 425)																this->moveModToPosition(null(),i1);
HXLINE( 426)																moved = true;
HXLINE( 427)																goto _hx_goto_25;
            															}
            														}
            														_hx_goto_25:;
            													}
HXLINE( 431)													if (!(moved)) {
HXLINE( 433)														Float factor = ( (Float)(-1) );
HXLINE( 434)														if ((::flixel::FlxG_obj::mouse->y < this->bgList->y)) {
HXLINE( 435)															factor = ::Math_obj::abs(::Math_obj::max(((Float)0.2),::Math_obj::min(((Float)0.5),(((Float)0.5) - ((this->bgList->y - ( (Float)(::flixel::FlxG_obj::mouse->y) )) / ( (Float)(100) ))))));
            														}
            														else {
HXLINE( 436)															int _hx_tmp22 = ::flixel::FlxG_obj::mouse->y;
HXDLIN( 436)															Float _hx_tmp23 = this->bgList->y;
HXDLIN( 436)															if ((_hx_tmp22 > (_hx_tmp23 + this->bgList->get_height()))) {
HXLINE( 437)																Float factor1 = (( (Float)(::flixel::FlxG_obj::mouse->y) ) - this->bgList->y);
HXDLIN( 437)																factor = ::Math_obj::abs(::Math_obj::max(((Float)0.2),::Math_obj::min(((Float)0.5),(((Float)0.5) - ((factor1 - this->bgList->get_height()) / ( (Float)(100) ))))));
            															}
            														}
HXLINE( 439)														if ((factor >= 0)) {
HXLINE( 441)															 ::states::ModsMenuState _hx_tmp24 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 441)															_hx_tmp24->holdingElapsed = (_hx_tmp24->holdingElapsed + elapsed);
HXLINE( 442)															if ((this->holdingElapsed >= factor)) {
HXLINE( 444)																this->holdingElapsed = ( (Float)(0) );
HXLINE( 445)																int newPos = this->curSelectedMod;
HXLINE( 446)																if ((::flixel::FlxG_obj::mouse->y < this->bgList->y)) {
HXLINE( 446)																	newPos = (newPos - 1);
            																}
            																else {
HXLINE( 447)																	newPos = (newPos + 1);
            																}
HXLINE( 448)																this->moveModToPosition(null(),::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)((this->modsGroup->length - 1)) ),( (Float)(newPos) )))));
            															}
            														}
            													}
HXLINE( 452)													curMod->set_x((( (Float)(::flixel::FlxG_obj::mouse->x) ) - this->mouseOffsets->x));
HXLINE( 453)													curMod->set_y((( (Float)(::flixel::FlxG_obj::mouse->y) ) - this->mouseOffsets->y));
            												}
            											}
            										}
            										else {
HXLINE( 458)											bool _hx_tmp25;
HXDLIN( 458)											if ((::flixel::FlxG_obj::mouse->_leftButton->current == -1)) {
HXLINE( 458)												_hx_tmp25 = this->holdingMod;
            											}
            											else {
HXLINE( 458)												_hx_tmp25 = false;
            											}
HXDLIN( 458)											if (_hx_tmp25) {
HXLINE( 460)												this->holdingMod = false;
HXLINE( 461)												this->holdingElapsed = ( (Float)(0) );
HXLINE( 462)												this->updateItemPositions();
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 467)			if ((lastMode == this->hoveringOnMods)) {
HXLINE( 469)				if (this->hoveringOnMods) {
HXLINE( 471)					if (this->get_controls()->get_UI_RIGHT_P()) {
HXLINE( 473)						this->hoveringOnMods = false;
HXLINE( 474)						 ::states::MenuButton button2 = this->getButton();
HXLINE( 475)						button2->ignoreCheck = button2->set_onFocus(false);
HXLINE( 476)						this->curSelectedButton = 0;
HXLINE( 477)						this->changeSelectedButton(null());
            					}
            				}
            				else {
HXLINE( 482)					if (this->get_controls()->get_BACK()) {
HXLINE( 484)						this->hoveringOnMods = true;
HXLINE( 485)						 ::states::MenuButton button3 = this->getButton();
HXLINE( 486)						button3->ignoreCheck = button3->set_onFocus(false);
HXLINE( 487)						this->changeSelectedMod(null(),null());
            					}
            					else {
HXLINE( 489)						if (this->get_controls()->get_ACCEPT()) {
HXLINE( 491)							 ::states::MenuButton button4 = this->getButton();
HXLINE( 492)							if (::hx::IsNotNull( button4->onClick )) {
HXLINE( 492)								button4->onClick();
            							}
            						}
            						else {
HXLINE( 494)							if ((this->curSelectedButton < 0)) {
HXLINE( 496)								if (this->get_controls()->get_UI_UP_P()) {
HXLINE( 498)									switch((int)(this->curSelectedButton)){
            										case (int)-2: {
HXLINE( 501)											this->curSelectedMod = 0;
HXLINE( 502)											this->hoveringOnMods = true;
HXLINE( 503)											 ::states::MenuButton button5 = this->getButton();
HXLINE( 504)											button5->ignoreCheck = button5->set_onFocus(false);
HXLINE( 505)											this->changeSelectedMod(null(),null());
            										}
            										break;
            										case (int)-1: {
HXLINE( 507)											this->changeSelectedButton(-1);
            										}
            										break;
            									}
            								}
            								else {
HXLINE( 510)									if (this->get_controls()->get_UI_DOWN_P()) {
HXLINE( 512)										switch((int)(this->curSelectedButton)){
            											case (int)-2: {
HXLINE( 515)												this->changeSelectedButton(1);
            											}
            											break;
            											case (int)-1: {
HXLINE( 517)												this->curSelectedMod = 0;
HXLINE( 518)												this->hoveringOnMods = true;
HXLINE( 519)												 ::states::MenuButton button6 = this->getButton();
HXLINE( 520)												button6->ignoreCheck = button6->set_onFocus(false);
HXLINE( 521)												this->changeSelectedMod(null(),null());
            											}
            											break;
            										}
            									}
            									else {
HXLINE( 524)										if (this->get_controls()->get_UI_RIGHT_P()) {
HXLINE( 526)											 ::states::MenuButton button7 = this->getButton();
HXLINE( 527)											button7->ignoreCheck = button7->set_onFocus(false);
HXLINE( 528)											this->curSelectedButton = 0;
HXLINE( 529)											this->changeSelectedButton(null());
            										}
            									}
            								}
            							}
            							else {
HXLINE( 532)								if (this->get_controls()->get_UI_LEFT_P()) {
HXLINE( 533)									this->changeSelectedButton(-1);
            								}
            								else {
HXLINE( 534)									if (this->get_controls()->get_UI_RIGHT_P()) {
HXLINE( 535)										this->changeSelectedButton(1);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE( 541)			 ::states::ModsMenuState _hx_tmp26 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 541)			_hx_tmp26->noModsSine = (_hx_tmp26->noModsSine + (( (Float)(180) ) * elapsed));
HXLINE( 542)			this->noModsTxt->set_alpha((( (Float)(1) ) - ::Math_obj::sin(((::Math_obj::PI * this->noModsSine) / ( (Float)(180) )))));
HXLINE( 545)			 ::states::ModsMenuState _hx_tmp27 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 545)			_hx_tmp27->nextAttempt = (_hx_tmp27->nextAttempt - elapsed);
HXLINE( 546)			if ((this->nextAttempt < 0)) {
HXLINE( 548)				this->nextAttempt = ( (Float)(1) );
HXLINE( 550)				::backend::Mods_obj::updateModList();
HXLINE( 551)				if (!(::backend::Mods_obj::updatedOnState)) {
HXLINE( 551)					::backend::Mods_obj::updateModList();
            				}
HXDLIN( 551)				 ::Dynamic list =  ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("all",21,f9,49,00),::Array_obj< ::String >::__new(0))
            					->setFixed(1,HX_("disabled",7c,41,04,7c),::Array_obj< ::String >::__new(0))
            					->setFixed(2,HX_("enabled",81,04,31,7e),::Array_obj< ::String >::__new(0)));
HXDLIN( 551)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 551)					int _g4 = 0;
HXDLIN( 551)					::String path = HX_("modsList.txt",f1,ca,08,ac);
HXDLIN( 551)					::String daList = null();
HXDLIN( 551)					::Array< ::String > formatted = path.split(HX_(":",3a,00,00,00));
HXDLIN( 551)					path = formatted->__get((formatted->length - 1));
HXDLIN( 551)					if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 551)						daList = ::sys::io::File_obj::getContent(path);
            					}
HXDLIN( 551)					::Array< ::String > _g5;
HXDLIN( 551)					if (::hx::IsNotNull( daList )) {
HXLINE( 551)						::Array< ::String > daList1 = ::Array_obj< ::String >::__new(0);
HXDLIN( 551)						daList1 = ::StringTools_obj::trim(daList).split(HX_("\n",0a,00,00,00));
HXDLIN( 551)						{
HXLINE( 551)							int _g6 = 0;
HXDLIN( 551)							int _g7 = daList1->length;
HXDLIN( 551)							while((_g6 < _g7)){
HXLINE( 551)								_g6 = (_g6 + 1);
HXDLIN( 551)								int i2 = (_g6 - 1);
HXDLIN( 551)								daList1[i2] = ::StringTools_obj::trim(daList1->__get(i2));
            							}
            						}
HXDLIN( 551)						_g5 = daList1;
            					}
            					else {
HXLINE( 551)						_g5 = ::Array_obj< ::String >::__new(0);
            					}
HXDLIN( 551)					while((_g4 < _g5->length)){
HXLINE( 551)						::String mod2 = _g5->__get(_g4);
HXDLIN( 551)						_g4 = (_g4 + 1);
HXDLIN( 551)						if ((::StringTools_obj::trim(mod2).length < 1)) {
HXLINE( 551)							continue;
            						}
HXDLIN( 551)						::Array< ::String > dat = mod2.split(HX_("|",7c,00,00,00));
HXDLIN( 551)						( (::Array< ::String >)(list->__Field(HX_("all",21,f9,49,00),::hx::paccDynamic)) )->push(dat->__get(0));
HXDLIN( 551)						if ((dat->__get(1) == HX_("1",31,00,00,00))) {
HXLINE( 551)							( (::Array< ::String >)(list->__Field(HX_("enabled",81,04,31,7e),::hx::paccDynamic)) )->push(dat->__get(0));
            						}
            						else {
HXLINE( 551)							( (::Array< ::String >)(list->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) )->push(dat->__get(0));
            						}
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g8 = _hx_e;
HXLINE( 166)						 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g8);
HXLINE( 551)						::haxe::Log_obj::trace(e,::hx::SourceInfo(HX_("source/backend/Mods.hx",1e,5b,8b,ff),167,HX_("backend.Mods",2b,aa,ba,a1),HX_("parseList",31,6e,59,cf)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN( 551)				this->modsList = list;
HXLINE( 552)				if ((( (::Array< ::String >)(this->modsList->__Field(HX_("all",21,f9,49,00),::hx::paccDynamic)) )->length > 0)) {
HXLINE( 554)					::haxe::Log_obj::trace(HX_("mod(s) found! reloading",0c,ff,ee,f5),::hx::SourceInfo(HX_("source/states/ModsMenuState.hx",76,c1,45,9f),554,HX_("states.ModsMenuState",f5,89,9c,0b),HX_("update",09,86,05,87)));
HXLINE( 555)					this->reload();
            				}
            			}
            		}
HXLINE( 559)		this->super::update(elapsed);
            	}


void ModsMenuState_obj::changeSelectedButton(::hx::Null< int >  __o_add){
            		int add = __o_add.Default(0);
            	HX_STACKFRAME(&_hx_pos_26ae12acd656cbf2_563_changeSelectedButton)
HXLINE( 564)		int max = (this->buttons->length - 1);
HXLINE( 566)		 ::states::MenuButton button = this->getButton();
HXLINE( 567)		button->ignoreCheck = button->set_onFocus(false);
HXLINE( 569)		 ::states::ModsMenuState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 569)		_hx_tmp->curSelectedButton = (_hx_tmp->curSelectedButton + add);
HXLINE( 570)		if ((this->curSelectedButton < -2)) {
HXLINE( 571)			this->curSelectedButton = -2;
            		}
            		else {
HXLINE( 572)			if ((this->curSelectedButton > max)) {
HXLINE( 573)				this->curSelectedButton = max;
            			}
            		}
HXLINE( 575)		 ::states::MenuButton button1 = this->getButton();
HXLINE( 576)		button1->ignoreCheck = button1->set_onFocus(true);
HXLINE( 578)		 ::states::ModItem curMod = Dynamic( this->modsGroup->members->__get(this->curSelectedMod)).StaticCast<  ::states::ModItem >();
HXLINE( 579)		if (::hx::IsNotNull( curMod )) {
HXLINE( 579)			curMod->selectBg->set_visible(false);
            		}
HXLINE( 580)		if ((this->curSelectedButton < 0)) {
HXLINE( 582)			this->bgButtons->set_color(-16777216);
HXLINE( 583)			this->bgButtons->set_alpha(((Float)0.2));
            		}
            		else {
HXLINE( 587)			this->bgButtons->set_color(-1);
HXLINE( 588)			this->bgButtons->set_alpha(((Float)0.8));
            		}
HXLINE( 591)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 591)		_hx_tmp1->play(::backend::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.6),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ModsMenuState_obj,changeSelectedButton,(void))

 ::states::MenuButton ModsMenuState_obj::getButton(){
            	HX_STACKFRAME(&_hx_pos_26ae12acd656cbf2_595_getButton)
HXLINE( 596)		switch((int)(this->curSelectedButton)){
            			case (int)-2: {
HXLINE( 598)				return this->buttonReload;
            			}
            			break;
            			case (int)-1: {
HXLINE( 599)				if (this->buttonEnableAll->enabled) {
HXLINE( 599)					return this->buttonEnableAll;
            				}
            				else {
HXLINE( 599)					return this->buttonDisableAll;
            				}
            			}
            			break;
            		}
HXLINE( 602)		if ((( (::Array< ::String >)(this->modsList->__Field(HX_("all",21,f9,49,00),::hx::paccDynamic)) )->length < 1)) {
HXLINE( 602)			return this->buttonReload;
            		}
HXLINE( 603)		return this->buttons->__get(::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)((this->buttons->length - 1)) ),( (Float)(this->curSelectedButton) ))))).StaticCast<  ::states::MenuButton >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ModsMenuState_obj,getButton,return )

void ModsMenuState_obj::changeSelectedMod(::hx::Null< int >  __o_add,::hx::Null< bool >  __o_isMouseWheel){
            		int add = __o_add.Default(0);
            		bool isMouseWheel = __o_isMouseWheel.Default(false);
            	HX_STACKFRAME(&_hx_pos_26ae12acd656cbf2_607_changeSelectedMod)
HXLINE( 608)		int max = (( (::Array< ::String >)(this->modsList->__Field(HX_("all",21,f9,49,00),::hx::paccDynamic)) )->length - 1);
HXLINE( 609)		if ((max < 0)) {
HXLINE( 609)			return;
            		}
HXLINE( 611)		if (this->hoveringOnMods) {
HXLINE( 613)			 ::states::MenuButton button = this->getButton();
HXLINE( 614)			button->ignoreCheck = button->set_onFocus(false);
            		}
HXLINE( 617)		int lastSelected = this->curSelectedMod;
HXLINE( 618)		 ::states::ModsMenuState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 618)		_hx_tmp->curSelectedMod = (_hx_tmp->curSelectedMod + add);
HXLINE( 620)		bool limited = false;
HXLINE( 621)		if ((this->curSelectedMod < 0)) {
HXLINE( 623)			this->curSelectedMod = 0;
HXLINE( 624)			limited = true;
            		}
            		else {
HXLINE( 626)			if ((this->curSelectedMod > max)) {
HXLINE( 628)				this->curSelectedMod = max;
HXLINE( 629)				limited = true;
            			}
            		}
HXLINE( 632)		bool _hx_tmp1;
HXDLIN( 632)		bool _hx_tmp2;
HXDLIN( 632)		if (!(isMouseWheel)) {
HXLINE( 632)			_hx_tmp2 = limited;
            		}
            		else {
HXLINE( 632)			_hx_tmp2 = false;
            		}
HXDLIN( 632)		if (_hx_tmp2) {
HXLINE( 632)			_hx_tmp1 = (::Math_obj::abs(( (Float)(add) )) == 1);
            		}
            		else {
HXLINE( 632)			_hx_tmp1 = false;
            		}
HXDLIN( 632)		if (_hx_tmp1) {
HXLINE( 634)			if ((add < 0)) {
HXLINE( 636)				this->curSelectedMod = lastSelected;
HXLINE( 637)				this->hoveringOnMods = false;
HXLINE( 638)				this->curSelectedButton = -1;
HXLINE( 639)				this->changeSelectedButton(null());
HXLINE( 640)				return;
            			}
            			else {
HXLINE( 644)				this->curSelectedMod = lastSelected;
HXLINE( 645)				this->hoveringOnMods = false;
HXLINE( 646)				this->curSelectedButton = -2;
HXLINE( 647)				this->changeSelectedButton(null());
HXLINE( 648)				return;
            			}
            		}
HXLINE( 652)		this->holdingMod = false;
HXLINE( 653)		this->holdingElapsed = ( (Float)(0) );
HXLINE( 654)		this->gottaClickAgain = true;
HXLINE( 655)		this->updateModDisplayData();
HXLINE( 656)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp3 = ::flixel::FlxG_obj::sound;
HXDLIN( 656)		_hx_tmp3->play(::backend::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.6),null(),null(),null(),null());
HXLINE( 658)		if (this->hoveringOnMods) {
HXLINE( 660)			 ::states::ModItem curMod = Dynamic( this->modsGroup->members->__get(this->curSelectedMod)).StaticCast<  ::states::ModItem >();
HXLINE( 661)			if (::hx::IsNotNull( curMod )) {
HXLINE( 661)				curMod->selectBg->set_visible(true);
            			}
HXLINE( 662)			this->bgButtons->set_color(-16777216);
HXLINE( 663)			this->bgButtons->set_alpha(((Float)0.2));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ModsMenuState_obj,changeSelectedMod,(void))

void ModsMenuState_obj::updateModDisplayData(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::ModsMenuState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::tweens::FlxTween twn){
            			HX_STACKFRAME(&_hx_pos_26ae12acd656cbf2_678_updateModDisplayData)
HXLINE( 678)			_gthis->colorTween = null();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_26ae12acd656cbf2_669_updateModDisplayData)
HXDLIN( 669)		 ::states::ModsMenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 670)		 ::states::ModItem curMod = Dynamic( this->modsGroup->members->__get(this->curSelectedMod)).StaticCast<  ::states::ModItem >();
HXLINE( 671)		if (::hx::IsNull( curMod )) {
HXLINE( 671)			return;
            		}
HXLINE( 673)		if (::hx::IsNotNull( this->colorTween )) {
HXLINE( 675)			this->colorTween->cancel();
HXLINE( 676)			this->colorTween->destroy();
            		}
HXLINE( 678)		this->colorTween = ::flixel::tweens::FlxTween_obj::color(this->bg,1,this->bg->color,curMod->bgColor, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
HXLINE( 680)		if ((::Math_obj::abs(( (Float)((this->centerMod - this->curSelectedMod)) )) > 2)) {
HXLINE( 682)			if ((this->centerMod < this->curSelectedMod)) {
HXLINE( 683)				this->centerMod = (this->curSelectedMod - 2);
            			}
            			else {
HXLINE( 684)				this->centerMod = (this->curSelectedMod + 2);
            			}
            		}
HXLINE( 686)		this->updateItemPositions();
HXLINE( 688)		this->icon->loadGraphic(curMod->icon->graphic,true,150,150,null(),null());
HXLINE( 689)		this->icon->set_antialiasing(curMod->icon->antialiasing);
HXLINE( 691)		if ((curMod->totalFrames > 0)) {
HXLINE( 693)			 ::flixel::animation::FlxAnimationController _hx_tmp = this->icon->animation;
HXDLIN( 693)			::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN( 693)			{
HXLINE( 693)				int _g1 = 0;
HXDLIN( 693)				int _g2 = curMod->totalFrames;
HXDLIN( 693)				while((_g1 < _g2)){
HXLINE( 693)					_g1 = (_g1 + 1);
HXDLIN( 693)					int i = (_g1 - 1);
HXDLIN( 693)					_g->push(i);
            				}
            			}
HXDLIN( 693)			_hx_tmp->add(HX_("icon",79,e7,b2,45),_g,curMod->iconFps,null(),null(),null());
HXLINE( 694)			this->icon->animation->play(HX_("icon",79,e7,b2,45),null(),null(),null());
HXLINE( 695)			this->icon->animation->_curAnim->set_curFrame(curMod->icon->animation->_curAnim->curFrame);
            		}
HXLINE( 698)		if ((this->modName->scaleX != ((Float)0.8))) {
HXLINE( 698)			this->modName->setScale(((Float)0.8),null());
            		}
HXLINE( 699)		this->modName->set_text(curMod->name);
HXLINE( 700)		Float newScale = ::Math_obj::min((( (Float)(620) ) / (this->modName->get_width() / ((Float)0.8))),((Float)0.8));
HXLINE( 701)		this->modName->setScale(newScale,::Math_obj::min((newScale * ((Float)1.35)),((Float)0.8)));
HXLINE( 702)		 ::objects::Alphabet _hx_tmp1 = this->modName;
HXDLIN( 702)		Float _hx_tmp2 = this->modNameInitialY;
HXDLIN( 702)		_hx_tmp1->set_y((_hx_tmp2 - (this->modName->get_height() / ( (Float)(2) ))));
HXLINE( 703)		this->modRestartText->set_visible(curMod->mustRestart);
HXLINE( 704)		this->modDesc->set_text(curMod->desc);
HXLINE( 706)		{
HXLINE( 706)			int _g3 = 0;
HXDLIN( 706)			::Array< ::Dynamic> _g4 = this->buttons;
HXDLIN( 706)			while((_g3 < _g4->length)){
HXLINE( 706)				 ::states::MenuButton button = _g4->__get(_g3).StaticCast<  ::states::MenuButton >();
HXDLIN( 706)				_g3 = (_g3 + 1);
HXDLIN( 706)				if (::hx::IsNotNull( button->focusChangeCallback )) {
HXLINE( 706)					button->focusChangeCallback(button->onFocus);
            				}
            			}
            		}
HXLINE( 707)		bool _hx_tmp3;
HXDLIN( 707)		if (::hx::IsNotNull( curMod->settings )) {
HXLINE( 707)			_hx_tmp3 = (curMod->settings->get_length() > 0);
            		}
            		else {
HXLINE( 707)			_hx_tmp3 = false;
            		}
HXDLIN( 707)		this->settingsButton->set_enabled(_hx_tmp3);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ModsMenuState_obj,updateModDisplayData,(void))

void ModsMenuState_obj::updateItemPositions(){
            	HX_STACKFRAME(&_hx_pos_26ae12acd656cbf2_712_updateItemPositions)
HXLINE( 713)		Float maxVisible = ::Math_obj::max(( (Float)(4) ),( (Float)((this->centerMod + 2)) ));
HXLINE( 714)		Float minVisible = ::Math_obj::max(( (Float)(0) ),( (Float)((this->centerMod - 2)) ));
HXLINE( 715)		{
HXLINE( 715)			int _g_current = 0;
HXDLIN( 715)			::Array< ::Dynamic> _g_array = this->modsGroup->members;
HXDLIN( 715)			while((_g_current < _g_array->length)){
HXLINE( 715)				 ::states::ModItem _g_value = _g_array->__get(_g_current).StaticCast<  ::states::ModItem >();
HXDLIN( 715)				_g_current = (_g_current + 1);
HXDLIN( 715)				int _g_key = (_g_current - 1);
HXDLIN( 715)				int i = _g_key;
HXDLIN( 715)				 ::states::ModItem mod = _g_value;
HXLINE( 716)				{
HXLINE( 717)					if (::hx::IsNull( mod )) {
HXLINE( 719)						::haxe::Log_obj::trace((((HX_("Mod #",25,57,85,9f) + i) + HX_(" is null, maybe it was ",03,ae,91,9f)) +  ::Dynamic(this->modsList->__Field(HX_("all",21,f9,49,00),::hx::paccDynamic))->__GetItem(i)),::hx::SourceInfo(HX_("source/states/ModsMenuState.hx",76,c1,45,9f),719,HX_("states.ModsMenuState",f5,89,9c,0b),HX_("updateItemPositions",4e,4c,d2,23)));
HXLINE( 720)						continue;
            					}
HXLINE( 723)					bool _hx_tmp;
HXDLIN( 723)					if ((i >= minVisible)) {
HXLINE( 723)						_hx_tmp = (i <= maxVisible);
            					}
            					else {
HXLINE( 723)						_hx_tmp = false;
            					}
HXDLIN( 723)					mod->set_visible(_hx_tmp);
HXLINE( 724)					mod->set_x((this->bgList->x + 5));
HXLINE( 725)					mod->set_y(((this->bgList->y + (86 * ((i - this->centerMod) + 2))) + 5));
HXLINE( 727)					mod->set_alpha(((Float)0.6));
HXLINE( 728)					if ((i == this->curSelectedMod)) {
HXLINE( 728)						mod->set_alpha(( (Float)(1) ));
            					}
HXLINE( 729)					bool _hx_tmp1;
HXDLIN( 729)					if ((i == this->curSelectedMod)) {
HXLINE( 729)						_hx_tmp1 = this->hoveringOnMods;
            					}
            					else {
HXLINE( 729)						_hx_tmp1 = false;
            					}
HXDLIN( 729)					mod->selectBg->set_visible(_hx_tmp1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ModsMenuState_obj,updateItemPositions,(void))

void ModsMenuState_obj::moveModToPosition(::String mod,::hx::Null< int >  __o_position){
            		int position = __o_position.Default(0);
            	HX_STACKFRAME(&_hx_pos_26ae12acd656cbf2_735_moveModToPosition)
HXLINE( 736)		if (::hx::IsNull( mod )) {
HXLINE( 736)			mod = ( (::String)( ::Dynamic(this->modsList->__Field(HX_("all",21,f9,49,00),::hx::paccDynamic))->__GetItem(this->curSelectedMod)) );
            		}
HXLINE( 737)		if ((position >= ( (::Array< ::String >)(this->modsList->__Field(HX_("all",21,f9,49,00),::hx::paccDynamic)) )->length)) {
HXLINE( 737)			position = 0;
            		}
            		else {
HXLINE( 738)			if ((position < 0)) {
HXLINE( 738)				position = (( (::Array< ::String >)(this->modsList->__Field(HX_("all",21,f9,49,00),::hx::paccDynamic)) )->length - 1);
            			}
            		}
HXLINE( 740)		::haxe::Log_obj::trace((((HX_("Moved mod ",4b,82,2e,c3) + mod) + HX_(" to position ",92,cc,de,3c)) + position),::hx::SourceInfo(HX_("source/states/ModsMenuState.hx",76,c1,45,9f),740,HX_("states.ModsMenuState",f5,89,9c,0b),HX_("moveModToPosition",d5,2c,a0,a1)));
HXLINE( 741)		int id = ( (::Array< ::String >)(this->modsList->__Field(HX_("all",21,f9,49,00),::hx::paccDynamic)) )->indexOf(mod,null());
HXLINE( 742)		if ((position == id)) {
HXLINE( 742)			return;
            		}
HXLINE( 744)		 ::states::ModItem curMod = Dynamic( this->modsGroup->members->__get(id)).StaticCast<  ::states::ModItem >();
HXLINE( 745)		if (::hx::IsNull( curMod )) {
HXLINE( 745)			return;
            		}
HXLINE( 747)		bool _hx_tmp;
HXDLIN( 747)		if (!(curMod->mustRestart)) {
HXLINE( 747)			_hx_tmp = Dynamic( this->modsGroup->members->__get(position)).StaticCast<  ::states::ModItem >()->mustRestart;
            		}
            		else {
HXLINE( 747)			_hx_tmp = true;
            		}
HXDLIN( 747)		if (_hx_tmp) {
HXLINE( 747)			this->waitingToRestart = true;
            		}
HXLINE( 749)		this->modsGroup->remove(curMod,true).StaticCast<  ::states::ModItem >();
HXLINE( 750)		( (::Array< ::String >)(this->modsList->__Field(HX_("all",21,f9,49,00),::hx::paccDynamic)) )->remove(mod);
HXLINE( 752)		this->modsGroup->insert(position,curMod).StaticCast<  ::states::ModItem >();
HXLINE( 753)		( (::Array< ::String >)(this->modsList->__Field(HX_("all",21,f9,49,00),::hx::paccDynamic)) )->insert(position,mod);
HXLINE( 755)		this->curSelectedMod = position;
HXLINE( 756)		this->updateModDisplayData();
HXLINE( 757)		this->updateItemPositions();
HXLINE( 759)		if (!(this->hoveringOnMods)) {
HXLINE( 761)			 ::states::ModItem curMod1 = Dynamic( this->modsGroup->members->__get(this->curSelectedMod)).StaticCast<  ::states::ModItem >();
HXLINE( 762)			if (::hx::IsNotNull( curMod1 )) {
HXLINE( 762)				curMod1->selectBg->set_visible(false);
            			}
            		}
HXLINE( 764)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 764)		_hx_tmp1->play(::backend::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.6),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(ModsMenuState_obj,moveModToPosition,(void))

void ModsMenuState_obj::checkToggleButtons(){
            	HX_STACKFRAME(&_hx_pos_26ae12acd656cbf2_768_checkToggleButtons)
HXLINE( 769)		 ::states::MenuButton _hx_tmp = this->buttonEnableAll;
HXDLIN( 769)		_hx_tmp->set_visible(this->buttonEnableAll->set_enabled((( (::Array< ::String >)(this->modsList->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) )->length > 0)));
HXLINE( 770)		 ::states::MenuButton _hx_tmp1 = this->buttonDisableAll;
HXDLIN( 770)		_hx_tmp1->set_visible(this->buttonDisableAll->set_enabled(!(this->buttonEnableAll->visible)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ModsMenuState_obj,checkToggleButtons,(void))

void ModsMenuState_obj::reload(){
            	HX_GC_STACKFRAME(&_hx_pos_26ae12acd656cbf2_774_reload)
HXLINE( 775)		this->saveTxt();
HXLINE( 776)		::flixel::FlxG_obj::autoPause = ::backend::ClientPrefs_obj::data->autoPause;
HXLINE( 777)		::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE( 778)		::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
HXLINE( 779)		 ::states::ModItem curMod = Dynamic( this->modsGroup->members->__get(this->curSelectedMod)).StaticCast<  ::states::ModItem >();
HXLINE( 780)		::String _hx_tmp;
HXDLIN( 780)		if (::hx::IsNotNull( curMod )) {
HXLINE( 780)			_hx_tmp = curMod->folder;
            		}
            		else {
HXLINE( 780)			_hx_tmp = null();
            		}
HXDLIN( 780)		::backend::MusicBeatState_obj::switchState( ::states::ModsMenuState_obj::__alloc( HX_CTX ,_hx_tmp));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ModsMenuState_obj,reload,(void))

void ModsMenuState_obj::saveTxt(){
            	HX_STACKFRAME(&_hx_pos_26ae12acd656cbf2_784_saveTxt)
HXLINE( 785)		::String fileStr = HX_("",00,00,00,00);
HXLINE( 786)		{
HXLINE( 786)			int _g = 0;
HXDLIN( 786)			::Array< ::String > _g1 = ( (::Array< ::String >)(this->modsList->__Field(HX_("all",21,f9,49,00),::hx::paccDynamic)) );
HXDLIN( 786)			while((_g < _g1->length)){
HXLINE( 786)				::String mod = _g1->__get(_g);
HXDLIN( 786)				_g = (_g + 1);
HXLINE( 788)				if ((::StringTools_obj::trim(mod).length < 1)) {
HXLINE( 788)					continue;
            				}
HXLINE( 790)				if ((fileStr.length > 0)) {
HXLINE( 790)					fileStr = (fileStr + HX_("\n",0a,00,00,00));
            				}
HXLINE( 792)				::String on = HX_("1",31,00,00,00);
HXLINE( 793)				if (( (::Array< ::String >)(this->modsList->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) )->contains(mod)) {
HXLINE( 793)					on = HX_("0",30,00,00,00);
            				}
HXLINE( 794)				fileStr = (fileStr + (((HX_("",00,00,00,00) + mod) + HX_("|",7c,00,00,00)) + on));
            			}
            		}
HXLINE( 797)		::String path = HX_("modsList.txt",f1,ca,08,ac);
HXLINE( 798)		::sys::io::File_obj::saveContent(path,fileStr);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ModsMenuState_obj,saveTxt,(void))


::hx::ObjectPtr< ModsMenuState_obj > ModsMenuState_obj::__new(::String startMod) {
	::hx::ObjectPtr< ModsMenuState_obj > __this = new ModsMenuState_obj();
	__this->__construct(startMod);
	return __this;
}

::hx::ObjectPtr< ModsMenuState_obj > ModsMenuState_obj::__alloc(::hx::Ctx *_hx_ctx,::String startMod) {
	ModsMenuState_obj *__this = (ModsMenuState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ModsMenuState_obj), true, "states.ModsMenuState"));
	*(void **)__this = ModsMenuState_obj::_hx_vtable;
	__this->__construct(startMod);
	return __this;
}

ModsMenuState_obj::ModsMenuState_obj()
{
}

void ModsMenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ModsMenuState);
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(icon,"icon");
	HX_MARK_MEMBER_NAME(modName,"modName");
	HX_MARK_MEMBER_NAME(modDesc,"modDesc");
	HX_MARK_MEMBER_NAME(modRestartText,"modRestartText");
	HX_MARK_MEMBER_NAME(modsList,"modsList");
	HX_MARK_MEMBER_NAME(bgList,"bgList");
	HX_MARK_MEMBER_NAME(buttonReload,"buttonReload");
	HX_MARK_MEMBER_NAME(buttonEnableAll,"buttonEnableAll");
	HX_MARK_MEMBER_NAME(buttonDisableAll,"buttonDisableAll");
	HX_MARK_MEMBER_NAME(buttons,"buttons");
	HX_MARK_MEMBER_NAME(settingsButton,"settingsButton");
	HX_MARK_MEMBER_NAME(bgTitle,"bgTitle");
	HX_MARK_MEMBER_NAME(bgDescription,"bgDescription");
	HX_MARK_MEMBER_NAME(bgButtons,"bgButtons");
	HX_MARK_MEMBER_NAME(modsGroup,"modsGroup");
	HX_MARK_MEMBER_NAME(curSelectedMod,"curSelectedMod");
	HX_MARK_MEMBER_NAME(hoveringOnMods,"hoveringOnMods");
	HX_MARK_MEMBER_NAME(curSelectedButton,"curSelectedButton");
	HX_MARK_MEMBER_NAME(modNameInitialY,"modNameInitialY");
	HX_MARK_MEMBER_NAME(noModsSine,"noModsSine");
	HX_MARK_MEMBER_NAME(noModsTxt,"noModsTxt");
	HX_MARK_MEMBER_NAME(_lastControllerMode,"_lastControllerMode");
	HX_MARK_MEMBER_NAME(startMod,"startMod");
	HX_MARK_MEMBER_NAME(nextAttempt,"nextAttempt");
	HX_MARK_MEMBER_NAME(holdingMod,"holdingMod");
	HX_MARK_MEMBER_NAME(mouseOffsets,"mouseOffsets");
	HX_MARK_MEMBER_NAME(holdingElapsed,"holdingElapsed");
	HX_MARK_MEMBER_NAME(gottaClickAgain,"gottaClickAgain");
	HX_MARK_MEMBER_NAME(holdTime,"holdTime");
	HX_MARK_MEMBER_NAME(colorTween,"colorTween");
	HX_MARK_MEMBER_NAME(centerMod,"centerMod");
	HX_MARK_MEMBER_NAME(waitingToRestart,"waitingToRestart");
	 ::backend::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ModsMenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(icon,"icon");
	HX_VISIT_MEMBER_NAME(modName,"modName");
	HX_VISIT_MEMBER_NAME(modDesc,"modDesc");
	HX_VISIT_MEMBER_NAME(modRestartText,"modRestartText");
	HX_VISIT_MEMBER_NAME(modsList,"modsList");
	HX_VISIT_MEMBER_NAME(bgList,"bgList");
	HX_VISIT_MEMBER_NAME(buttonReload,"buttonReload");
	HX_VISIT_MEMBER_NAME(buttonEnableAll,"buttonEnableAll");
	HX_VISIT_MEMBER_NAME(buttonDisableAll,"buttonDisableAll");
	HX_VISIT_MEMBER_NAME(buttons,"buttons");
	HX_VISIT_MEMBER_NAME(settingsButton,"settingsButton");
	HX_VISIT_MEMBER_NAME(bgTitle,"bgTitle");
	HX_VISIT_MEMBER_NAME(bgDescription,"bgDescription");
	HX_VISIT_MEMBER_NAME(bgButtons,"bgButtons");
	HX_VISIT_MEMBER_NAME(modsGroup,"modsGroup");
	HX_VISIT_MEMBER_NAME(curSelectedMod,"curSelectedMod");
	HX_VISIT_MEMBER_NAME(hoveringOnMods,"hoveringOnMods");
	HX_VISIT_MEMBER_NAME(curSelectedButton,"curSelectedButton");
	HX_VISIT_MEMBER_NAME(modNameInitialY,"modNameInitialY");
	HX_VISIT_MEMBER_NAME(noModsSine,"noModsSine");
	HX_VISIT_MEMBER_NAME(noModsTxt,"noModsTxt");
	HX_VISIT_MEMBER_NAME(_lastControllerMode,"_lastControllerMode");
	HX_VISIT_MEMBER_NAME(startMod,"startMod");
	HX_VISIT_MEMBER_NAME(nextAttempt,"nextAttempt");
	HX_VISIT_MEMBER_NAME(holdingMod,"holdingMod");
	HX_VISIT_MEMBER_NAME(mouseOffsets,"mouseOffsets");
	HX_VISIT_MEMBER_NAME(holdingElapsed,"holdingElapsed");
	HX_VISIT_MEMBER_NAME(gottaClickAgain,"gottaClickAgain");
	HX_VISIT_MEMBER_NAME(holdTime,"holdTime");
	HX_VISIT_MEMBER_NAME(colorTween,"colorTween");
	HX_VISIT_MEMBER_NAME(centerMod,"centerMod");
	HX_VISIT_MEMBER_NAME(waitingToRestart,"waitingToRestart");
	 ::backend::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ModsMenuState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { return ::hx::Val( icon ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bgList") ) { return ::hx::Val( bgList ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"reload") ) { return ::hx::Val( reload_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"modName") ) { return ::hx::Val( modName ); }
		if (HX_FIELD_EQ(inName,"modDesc") ) { return ::hx::Val( modDesc ); }
		if (HX_FIELD_EQ(inName,"buttons") ) { return ::hx::Val( buttons ); }
		if (HX_FIELD_EQ(inName,"bgTitle") ) { return ::hx::Val( bgTitle ); }
		if (HX_FIELD_EQ(inName,"saveTxt") ) { return ::hx::Val( saveTxt_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modsList") ) { return ::hx::Val( modsList ); }
		if (HX_FIELD_EQ(inName,"startMod") ) { return ::hx::Val( startMod ); }
		if (HX_FIELD_EQ(inName,"holdTime") ) { return ::hx::Val( holdTime ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"bgButtons") ) { return ::hx::Val( bgButtons ); }
		if (HX_FIELD_EQ(inName,"modsGroup") ) { return ::hx::Val( modsGroup ); }
		if (HX_FIELD_EQ(inName,"noModsTxt") ) { return ::hx::Val( noModsTxt ); }
		if (HX_FIELD_EQ(inName,"getButton") ) { return ::hx::Val( getButton_dyn() ); }
		if (HX_FIELD_EQ(inName,"centerMod") ) { return ::hx::Val( centerMod ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"noModsSine") ) { return ::hx::Val( noModsSine ); }
		if (HX_FIELD_EQ(inName,"holdingMod") ) { return ::hx::Val( holdingMod ); }
		if (HX_FIELD_EQ(inName,"colorTween") ) { return ::hx::Val( colorTween ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"nextAttempt") ) { return ::hx::Val( nextAttempt ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"buttonReload") ) { return ::hx::Val( buttonReload ); }
		if (HX_FIELD_EQ(inName,"mouseOffsets") ) { return ::hx::Val( mouseOffsets ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"bgDescription") ) { return ::hx::Val( bgDescription ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"modRestartText") ) { return ::hx::Val( modRestartText ); }
		if (HX_FIELD_EQ(inName,"settingsButton") ) { return ::hx::Val( settingsButton ); }
		if (HX_FIELD_EQ(inName,"curSelectedMod") ) { return ::hx::Val( curSelectedMod ); }
		if (HX_FIELD_EQ(inName,"hoveringOnMods") ) { return ::hx::Val( hoveringOnMods ); }
		if (HX_FIELD_EQ(inName,"holdingElapsed") ) { return ::hx::Val( holdingElapsed ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"buttonEnableAll") ) { return ::hx::Val( buttonEnableAll ); }
		if (HX_FIELD_EQ(inName,"modNameInitialY") ) { return ::hx::Val( modNameInitialY ); }
		if (HX_FIELD_EQ(inName,"gottaClickAgain") ) { return ::hx::Val( gottaClickAgain ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"buttonDisableAll") ) { return ::hx::Val( buttonDisableAll ); }
		if (HX_FIELD_EQ(inName,"waitingToRestart") ) { return ::hx::Val( waitingToRestart ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"curSelectedButton") ) { return ::hx::Val( curSelectedButton ); }
		if (HX_FIELD_EQ(inName,"changeSelectedMod") ) { return ::hx::Val( changeSelectedMod_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveModToPosition") ) { return ::hx::Val( moveModToPosition_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"checkToggleButtons") ) { return ::hx::Val( checkToggleButtons_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_lastControllerMode") ) { return ::hx::Val( _lastControllerMode ); }
		if (HX_FIELD_EQ(inName,"updateItemPositions") ) { return ::hx::Val( updateItemPositions_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"changeSelectedButton") ) { return ::hx::Val( changeSelectedButton_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateModDisplayData") ) { return ::hx::Val( updateModDisplayData_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ModsMenuState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { icon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bgList") ) { bgList=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"modName") ) { modName=inValue.Cast<  ::objects::Alphabet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"modDesc") ) { modDesc=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buttons") ) { buttons=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bgTitle") ) { bgTitle=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modsList") ) { modsList=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startMod") ) { startMod=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holdTime") ) { holdTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"bgButtons") ) { bgButtons=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"modsGroup") ) { modsGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noModsTxt") ) { noModsTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"centerMod") ) { centerMod=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"noModsSine") ) { noModsSine=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holdingMod") ) { holdingMod=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colorTween") ) { colorTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"nextAttempt") ) { nextAttempt=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"buttonReload") ) { buttonReload=inValue.Cast<  ::states::MenuButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseOffsets") ) { mouseOffsets=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"bgDescription") ) { bgDescription=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"modRestartText") ) { modRestartText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"settingsButton") ) { settingsButton=inValue.Cast<  ::states::MenuButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSelectedMod") ) { curSelectedMod=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hoveringOnMods") ) { hoveringOnMods=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holdingElapsed") ) { holdingElapsed=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"buttonEnableAll") ) { buttonEnableAll=inValue.Cast<  ::states::MenuButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"modNameInitialY") ) { modNameInitialY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gottaClickAgain") ) { gottaClickAgain=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"buttonDisableAll") ) { buttonDisableAll=inValue.Cast<  ::states::MenuButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"waitingToRestart") ) { waitingToRestart=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"curSelectedButton") ) { curSelectedButton=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_lastControllerMode") ) { _lastControllerMode=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ModsMenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("icon",79,e7,b2,45));
	outFields->push(HX_("modName",2d,3e,2b,de));
	outFields->push(HX_("modDesc",33,2a,92,d7));
	outFields->push(HX_("modRestartText",7a,a8,96,fb));
	outFields->push(HX_("modsList",6f,28,9a,c7));
	outFields->push(HX_("bgList",c3,64,cb,af));
	outFields->push(HX_("buttonReload",eb,2a,9d,ab));
	outFields->push(HX_("buttonEnableAll",0c,66,85,b9));
	outFields->push(HX_("buttonDisableAll",ab,70,10,b8));
	outFields->push(HX_("buttons",41,52,75,ca));
	outFields->push(HX_("settingsButton",35,9f,7f,6a));
	outFields->push(HX_("bgTitle",93,25,62,bd));
	outFields->push(HX_("bgDescription",37,c7,04,6b));
	outFields->push(HX_("bgButtons",fc,96,7c,5b));
	outFields->push(HX_("modsGroup",0e,36,38,04));
	outFields->push(HX_("curSelectedMod",87,51,7c,85));
	outFields->push(HX_("hoveringOnMods",76,b5,59,0f));
	outFields->push(HX_("curSelectedButton",4d,70,ee,0c));
	outFields->push(HX_("modNameInitialY",a2,d2,49,46));
	outFields->push(HX_("noModsSine",bf,67,98,bc));
	outFields->push(HX_("noModsTxt",3e,11,82,34));
	outFields->push(HX_("_lastControllerMode",34,63,09,11));
	outFields->push(HX_("startMod",80,c3,96,42));
	outFields->push(HX_("nextAttempt",5a,40,e2,06));
	outFields->push(HX_("holdingMod",7f,3d,74,8a));
	outFields->push(HX_("mouseOffsets",db,59,0a,b9));
	outFields->push(HX_("holdingElapsed",79,61,28,76));
	outFields->push(HX_("gottaClickAgain",11,43,0f,ea));
	outFields->push(HX_("holdTime",ec,cc,bf,3e));
	outFields->push(HX_("colorTween",08,c2,dc,3d));
	outFields->push(HX_("centerMod",ed,3b,ef,d6));
	outFields->push(HX_("waitingToRestart",47,dc,23,70));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ModsMenuState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ModsMenuState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ModsMenuState_obj,icon),HX_("icon",79,e7,b2,45)},
	{::hx::fsObject /*  ::objects::Alphabet */ ,(int)offsetof(ModsMenuState_obj,modName),HX_("modName",2d,3e,2b,de)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ModsMenuState_obj,modDesc),HX_("modDesc",33,2a,92,d7)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ModsMenuState_obj,modRestartText),HX_("modRestartText",7a,a8,96,fb)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ModsMenuState_obj,modsList),HX_("modsList",6f,28,9a,c7)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ModsMenuState_obj,bgList),HX_("bgList",c3,64,cb,af)},
	{::hx::fsObject /*  ::states::MenuButton */ ,(int)offsetof(ModsMenuState_obj,buttonReload),HX_("buttonReload",eb,2a,9d,ab)},
	{::hx::fsObject /*  ::states::MenuButton */ ,(int)offsetof(ModsMenuState_obj,buttonEnableAll),HX_("buttonEnableAll",0c,66,85,b9)},
	{::hx::fsObject /*  ::states::MenuButton */ ,(int)offsetof(ModsMenuState_obj,buttonDisableAll),HX_("buttonDisableAll",ab,70,10,b8)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ModsMenuState_obj,buttons),HX_("buttons",41,52,75,ca)},
	{::hx::fsObject /*  ::states::MenuButton */ ,(int)offsetof(ModsMenuState_obj,settingsButton),HX_("settingsButton",35,9f,7f,6a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ModsMenuState_obj,bgTitle),HX_("bgTitle",93,25,62,bd)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ModsMenuState_obj,bgDescription),HX_("bgDescription",37,c7,04,6b)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ModsMenuState_obj,bgButtons),HX_("bgButtons",fc,96,7c,5b)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ModsMenuState_obj,modsGroup),HX_("modsGroup",0e,36,38,04)},
	{::hx::fsInt,(int)offsetof(ModsMenuState_obj,curSelectedMod),HX_("curSelectedMod",87,51,7c,85)},
	{::hx::fsBool,(int)offsetof(ModsMenuState_obj,hoveringOnMods),HX_("hoveringOnMods",76,b5,59,0f)},
	{::hx::fsInt,(int)offsetof(ModsMenuState_obj,curSelectedButton),HX_("curSelectedButton",4d,70,ee,0c)},
	{::hx::fsFloat,(int)offsetof(ModsMenuState_obj,modNameInitialY),HX_("modNameInitialY",a2,d2,49,46)},
	{::hx::fsFloat,(int)offsetof(ModsMenuState_obj,noModsSine),HX_("noModsSine",bf,67,98,bc)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ModsMenuState_obj,noModsTxt),HX_("noModsTxt",3e,11,82,34)},
	{::hx::fsBool,(int)offsetof(ModsMenuState_obj,_lastControllerMode),HX_("_lastControllerMode",34,63,09,11)},
	{::hx::fsString,(int)offsetof(ModsMenuState_obj,startMod),HX_("startMod",80,c3,96,42)},
	{::hx::fsFloat,(int)offsetof(ModsMenuState_obj,nextAttempt),HX_("nextAttempt",5a,40,e2,06)},
	{::hx::fsBool,(int)offsetof(ModsMenuState_obj,holdingMod),HX_("holdingMod",7f,3d,74,8a)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(ModsMenuState_obj,mouseOffsets),HX_("mouseOffsets",db,59,0a,b9)},
	{::hx::fsFloat,(int)offsetof(ModsMenuState_obj,holdingElapsed),HX_("holdingElapsed",79,61,28,76)},
	{::hx::fsBool,(int)offsetof(ModsMenuState_obj,gottaClickAgain),HX_("gottaClickAgain",11,43,0f,ea)},
	{::hx::fsFloat,(int)offsetof(ModsMenuState_obj,holdTime),HX_("holdTime",ec,cc,bf,3e)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(ModsMenuState_obj,colorTween),HX_("colorTween",08,c2,dc,3d)},
	{::hx::fsInt,(int)offsetof(ModsMenuState_obj,centerMod),HX_("centerMod",ed,3b,ef,d6)},
	{::hx::fsBool,(int)offsetof(ModsMenuState_obj,waitingToRestart),HX_("waitingToRestart",47,dc,23,70)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ModsMenuState_obj_sStaticStorageInfo = 0;
#endif

static ::String ModsMenuState_obj_sMemberFields[] = {
	HX_("bg",c5,55,00,00),
	HX_("icon",79,e7,b2,45),
	HX_("modName",2d,3e,2b,de),
	HX_("modDesc",33,2a,92,d7),
	HX_("modRestartText",7a,a8,96,fb),
	HX_("modsList",6f,28,9a,c7),
	HX_("bgList",c3,64,cb,af),
	HX_("buttonReload",eb,2a,9d,ab),
	HX_("buttonEnableAll",0c,66,85,b9),
	HX_("buttonDisableAll",ab,70,10,b8),
	HX_("buttons",41,52,75,ca),
	HX_("settingsButton",35,9f,7f,6a),
	HX_("bgTitle",93,25,62,bd),
	HX_("bgDescription",37,c7,04,6b),
	HX_("bgButtons",fc,96,7c,5b),
	HX_("modsGroup",0e,36,38,04),
	HX_("curSelectedMod",87,51,7c,85),
	HX_("hoveringOnMods",76,b5,59,0f),
	HX_("curSelectedButton",4d,70,ee,0c),
	HX_("modNameInitialY",a2,d2,49,46),
	HX_("noModsSine",bf,67,98,bc),
	HX_("noModsTxt",3e,11,82,34),
	HX_("_lastControllerMode",34,63,09,11),
	HX_("startMod",80,c3,96,42),
	HX_("create",fc,66,0f,7c),
	HX_("nextAttempt",5a,40,e2,06),
	HX_("holdingMod",7f,3d,74,8a),
	HX_("mouseOffsets",db,59,0a,b9),
	HX_("holdingElapsed",79,61,28,76),
	HX_("gottaClickAgain",11,43,0f,ea),
	HX_("holdTime",ec,cc,bf,3e),
	HX_("update",09,86,05,87),
	HX_("changeSelectedButton",3d,80,18,d6),
	HX_("getButton",28,eb,36,56),
	HX_("changeSelectedMod",97,eb,e1,be),
	HX_("colorTween",08,c2,dc,3d),
	HX_("updateModDisplayData",d3,81,24,62),
	HX_("centerMod",ed,3b,ef,d6),
	HX_("updateItemPositions",4e,4c,d2,23),
	HX_("waitingToRestart",47,dc,23,70),
	HX_("moveModToPosition",d5,2c,a0,a1),
	HX_("checkToggleButtons",25,6f,96,a4),
	HX_("reload",59,53,df,03),
	HX_("saveTxt",33,7f,0d,ab),
	::String(null()) };

::hx::Class ModsMenuState_obj::__mClass;

void ModsMenuState_obj::__register()
{
	ModsMenuState_obj _hx_dummy;
	ModsMenuState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.ModsMenuState",f5,89,9c,0b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ModsMenuState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ModsMenuState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ModsMenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ModsMenuState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
