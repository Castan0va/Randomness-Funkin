// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_backend_Song
#include <backend/Song.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_effects_FlxFlicker
#include <flixel/effects/FlxFlicker.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Application
#include <openfl/display/Application.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_options_OptionsState
#include <options/OptionsState.h>
#endif
#ifndef INCLUDED_states_CreditsState
#include <states/CreditsState.h>
#endif
#ifndef INCLUDED_states_FreeplayState
#include <states/FreeplayState.h>
#endif
#ifndef INCLUDED_states_GalleryState
#include <states/GalleryState.h>
#endif
#ifndef INCLUDED_states_LoadingState
#include <states/LoadingState.h>
#endif
#ifndef INCLUDED_states_MainMenuState
#include <states/MainMenuState.h>
#endif
#ifndef INCLUDED_states_ModsMenuState
#include <states/ModsMenuState.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_states_StoryMenuState
#include <states/StoryMenuState.h>
#endif
#ifndef INCLUDED_states_TitleState
#include <states/TitleState.h>
#endif
#ifndef INCLUDED_states_editors_MasterEditorMenu
#include <states/editors/MasterEditorMenu.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_89e648ab22b7047a_10_new,"states.MainMenuState","new",0x55e2079f,"states.MainMenuState.new","states/MainMenuState.hx",10,0x1c04e2b2)
static const ::String _hx_array_data_36084c2d_1[] = {
	HX_("story_mode",2d,63,e6,a4),HX_("freeplay",a0,90,86,22),HX_("options",5e,33,fe,df),HX_("gallery",92,80,b7,fa),HX_("credits",1a,0e,5e,13),
};
HX_LOCAL_STACK_FRAME(_hx_pos_89e648ab22b7047a_37_create,"states.MainMenuState","create",0x17a2011d,"states.MainMenuState.create","states/MainMenuState.hx",37,0x1c04e2b2)
static const ::String _hx_array_data_36084c2d_7[] = {
	HX_("bg1",cc,b6,4a,00),HX_("bg2",cd,b6,4a,00),HX_("bg3",ce,b6,4a,00),HX_("bg4",cf,b6,4a,00),
};
static const ::String _hx_array_data_36084c2d_8[] = {
	HX_("menuchar1",9c,96,5e,4d),HX_("menuchar2",9d,96,5e,4d),HX_("menuchar3",9e,96,5e,4d),HX_("menuchar4",9f,96,5e,4d),HX_("menuchar5",a0,96,5e,4d),HX_("menuchar6",a1,96,5e,4d),HX_("menuchar7",a2,96,5e,4d),
};
HX_LOCAL_STACK_FRAME(_hx_pos_89e648ab22b7047a_202_update,"states.MainMenuState","update",0x2298202a,"states.MainMenuState.update","states/MainMenuState.hx",202,0x1c04e2b2)
HX_LOCAL_STACK_FRAME(_hx_pos_89e648ab22b7047a_253_update,"states.MainMenuState","update",0x2298202a,"states.MainMenuState.update","states/MainMenuState.hx",253,0x1c04e2b2)
HX_LOCAL_STACK_FRAME(_hx_pos_89e648ab22b7047a_294_update,"states.MainMenuState","update",0x2298202a,"states.MainMenuState.update","states/MainMenuState.hx",294,0x1c04e2b2)
HX_LOCAL_STACK_FRAME(_hx_pos_89e648ab22b7047a_313_changeItem,"states.MainMenuState","changeItem",0xa229b944,"states.MainMenuState.changeItem","states/MainMenuState.hx",313,0x1c04e2b2)
HX_LOCAL_STACK_FRAME(_hx_pos_89e648ab22b7047a_12_boot,"states.MainMenuState","boot",0xc7fda413,"states.MainMenuState.boot","states/MainMenuState.hx",12,0x1c04e2b2)
HX_LOCAL_STACK_FRAME(_hx_pos_89e648ab22b7047a_13_boot,"states.MainMenuState","boot",0xc7fda413,"states.MainMenuState.boot","states/MainMenuState.hx",13,0x1c04e2b2)
namespace states{

void MainMenuState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_89e648ab22b7047a_10_new)
HXLINE( 199)		this->selectedSomethin = false;
HXLINE(  25)		this->optionShit = ::Array_obj< ::String >::fromData( _hx_array_data_36084c2d_1,5);
HXLINE(  21)		this->specialcheck = false;
HXLINE(  10)		super::__construct(TransIn,TransOut);
            	}

Dynamic MainMenuState_obj::__CreateEmpty() { return new MainMenuState_obj; }

void *MainMenuState_obj::_hx_vtable = 0;

Dynamic MainMenuState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MainMenuState_obj > _hx_result = new MainMenuState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MainMenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x53aaab8a) {
		if (inClassId<=(int)0x2b1dec0f) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2b1dec0f;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x53aaab8a;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			if (inClassId<=(int)0x62817b24) {
				return inClassId==(int)0x563293a6 || inClassId==(int)0x62817b24;
			} else {
				return inClassId==(int)0x7c795c9f;
			}
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void MainMenuState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_89e648ab22b7047a_37_create)
HXLINE(  39)		::openfl::Lib_obj::get_application()->_hx___window->set_title(HX_("Randomness Funkin - Main Menu",0a,91,7f,a8));
HXLINE(  41)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE(  44)		{
HXLINE(  44)			::backend::Mods_obj::globalMods = ::Array_obj< ::String >::__new(0);
HXDLIN(  44)			{
HXLINE(  44)				int _g = 0;
HXDLIN(  44)				if (!(::backend::Mods_obj::updatedOnState)) {
HXLINE(  44)					::backend::Mods_obj::updateModList();
            				}
HXDLIN(  44)				::Array< ::String > list_enabled = ::Array_obj< ::String >::__new(0);
HXDLIN(  44)				::Array< ::String > list_disabled = ::Array_obj< ::String >::__new(0);
HXDLIN(  44)				::Array< ::String > list_all = ::Array_obj< ::String >::__new(0);
HXDLIN(  44)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  44)					int _g1 = 0;
HXDLIN(  44)					::String path = HX_("modsList.txt",f1,ca,08,ac);
HXDLIN(  44)					::String daList = null();
HXDLIN(  44)					::Array< ::String > formatted = path.split(HX_(":",3a,00,00,00));
HXLINE(  23)					path = formatted->__get((formatted->length - 1));
HXLINE(  44)					if (::sys::FileSystem_obj::exists(path)) {
HXLINE(  24)						daList = ::sys::io::File_obj::getContent(path);
            					}
HXLINE(  44)					::Array< ::String > _g2;
HXDLIN(  44)					if (::hx::IsNotNull( daList )) {
HXLINE(  44)						::Array< ::String > daList1 = ::Array_obj< ::String >::__new(0);
HXLINE(  45)						daList1 = ::StringTools_obj::trim(daList).split(HX_("\n",0a,00,00,00));
HXLINE(  44)						{
HXLINE(  44)							int _g3 = 0;
HXDLIN(  44)							int _g4 = daList1->length;
HXDLIN(  44)							while((_g3 < _g4)){
HXLINE(  44)								_g3 = (_g3 + 1);
HXDLIN(  44)								int i = (_g3 - 1);
HXDLIN(  44)								daList1[i] = ::StringTools_obj::trim(daList1->__get(i));
            							}
            						}
HXDLIN(  44)						_g2 = daList1;
            					}
            					else {
HXLINE(  44)						_g2 = ::Array_obj< ::String >::__new(0);
            					}
HXDLIN(  44)					while((_g1 < _g2->length)){
HXLINE(  44)						::String mod = _g2->__get(_g1);
HXDLIN(  44)						_g1 = (_g1 + 1);
HXDLIN(  44)						if ((::StringTools_obj::trim(mod).length < 1)) {
HXLINE(  44)							continue;
            						}
HXDLIN(  44)						::Array< ::String > dat = mod.split(HX_("|",7c,00,00,00));
HXDLIN(  44)						list_all->push(dat->__get(0));
HXDLIN(  44)						if ((dat->__get(1) == HX_("1",31,00,00,00))) {
HXLINE(  44)							list_enabled->push(dat->__get(0));
            						}
            						else {
HXLINE(  44)							list_disabled->push(dat->__get(0));
            						}
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g5 = _hx_e;
HXLINE( 166)						 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g5);
HXLINE(  44)						::haxe::Log_obj::trace(e,::hx::SourceInfo(HX_("source/backend/Mods.hx",1e,5b,8b,ff),167,HX_("backend.Mods",2b,aa,ba,a1),HX_("parseList",31,6e,59,cf)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN(  44)				::Array< ::String > _g6 = list_enabled;
HXDLIN(  44)				while((_g < _g6->length)){
HXLINE(  44)					::String mod1 = _g6->__get(_g);
HXDLIN(  44)					_g = (_g + 1);
HXDLIN(  44)					 ::Dynamic pack = ::backend::Mods_obj::getPack(mod1);
HXDLIN(  44)					bool _hx_tmp;
HXDLIN(  44)					if (::hx::IsNotNull( pack )) {
HXLINE(  44)						_hx_tmp = ( (bool)(pack->__Field(HX_("runsGlobally",98,2d,b5,06),::hx::paccDynamic)) );
            					}
            					else {
HXLINE(  44)						_hx_tmp = false;
            					}
HXDLIN(  44)					if (_hx_tmp) {
HXLINE(  44)						::backend::Mods_obj::globalMods->push(mod1);
            					}
            				}
            			}
            		}
HXLINE(  46)		::backend::Mods_obj::loadTopMod();
HXLINE(  50)		::backend::DiscordClient_obj::changePresence(HX_("In the Menus",0a,c1,ad,c6),null(),null(),null(),null());
HXLINE(  53)		this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(  54)		this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(  56)		this->persistentUpdate = (this->persistentDraw = true);
HXLINE(  57)		::Array< ::String > bgList = ::Array_obj< ::String >::fromData( _hx_array_data_36084c2d_7,4);
HXLINE(  58)		Float yScroll = ::Math_obj::max((((Float)0.25) - (((Float)0.05) * ( (Float)((this->optionShit->length - 4)) ))),((Float)0.1));
HXLINE(  59)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-80,null(),null());
HXDLIN(  59)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(::backend::Paths_obj::image(bgList->__get(::flixel::FlxG_obj::random->_hx_int(0,(bgList->length - 1),null())),null(),null()),null(),null(),null(),null(),null());
HXLINE(  60)		bg1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  61)		{
HXLINE(  61)			 ::flixel::math::FlxBasePoint this1 = bg1->scrollFactor;
HXDLIN(  61)			this1->set_x(( (Float)(0) ));
HXDLIN(  61)			this1->set_y(yScroll);
            		}
HXLINE(  62)		bg1->setGraphicSize(((Float)1504.),((Float)893.));
HXLINE(  63)		bg1->updateHitbox();
HXLINE(  64)		{
HXLINE(  64)			int axes = 17;
HXDLIN(  64)			bool _hx_tmp1;
HXDLIN(  64)			if ((axes != 1)) {
HXLINE(  64)				_hx_tmp1 = (axes == 17);
            			}
            			else {
HXLINE(  64)				_hx_tmp1 = true;
            			}
HXDLIN(  64)			if (_hx_tmp1) {
HXLINE(  64)				int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN(  64)				bg1->set_x(((( (Float)(_hx_tmp2) ) - bg1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  64)			bool _hx_tmp3;
HXDLIN(  64)			if ((axes != 16)) {
HXLINE(  64)				_hx_tmp3 = (axes == 17);
            			}
            			else {
HXLINE(  64)				_hx_tmp3 = true;
            			}
HXDLIN(  64)			if (_hx_tmp3) {
HXLINE(  64)				int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN(  64)				bg1->set_y(((( (Float)(_hx_tmp4) ) - bg1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  65)		this->add(bg1);
HXLINE(  67)		 ::flixel::FlxSprite underlay =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-640,0,null());
HXDLIN(  67)		 ::flixel::FlxSprite underlay1 = underlay->loadGraphic(::backend::Paths_obj::image(HX_("underlaythingy",17,a0,05,f4),null(),null()),null(),null(),null(),null(),null());
HXLINE(  68)		underlay1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  69)		underlay1->set_alpha(((Float)0.32));
HXLINE(  70)		underlay1->setGraphicSize(((Float)1504.),((Float)893.));
HXLINE(  71)		{
HXLINE(  71)			 ::flixel::math::FlxBasePoint this2 = underlay1->scrollFactor;
HXDLIN(  71)			this2->set_x(( (Float)(0) ));
HXDLIN(  71)			this2->set_y(( (Float)(0) ));
            		}
HXLINE(  74)		 ::flixel::FlxSprite checker =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(  74)		 ::flixel::FlxSprite checker1 = checker->loadGraphic(::backend::Paths_obj::image(HX_("underlaything2",d0,9f,05,f4),null(),null()),null(),null(),null(),null(),null());
HXLINE(  75)		checker1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  76)		checker1->set_alpha(((Float)0.2));
HXLINE(  77)		checker1->setGraphicSize(((Float)1504.),((Float)846.));
HXLINE(  78)		{
HXLINE(  78)			 ::flixel::math::FlxBasePoint this3 = checker1->scrollFactor;
HXDLIN(  78)			this3->set_x(( (Float)(0) ));
HXDLIN(  78)			this3->set_y(( (Float)(0) ));
            		}
HXLINE(  79)		this->add(checker1);
HXLINE(  81)		::flixel::tweens::FlxTween_obj::tween(checker1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),((Float)-49.35))
            			->setFixed(1,HX_("y",79,00,00,00),((Float)-49.35))),1, ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),0)
            			->setFixed(1,HX_("loopDelay",7f,f6,d2,04),0)
            			->setFixed(2,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::linear_dyn())
            			->setFixed(3,HX_("type",ba,f2,08,4d),::flixel::tweens::FlxTween_obj::LOOPING)));
HXLINE(  83)		this->add(underlay1);
HXLINE(  85)		 ::flixel::FlxSprite logo =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(  85)		 ::flixel::FlxSprite logo1 = logo->loadGraphic(::backend::Paths_obj::image(HX_("logomenu",8a,76,ac,89),null(),null()),null(),null(),null(),null(),null());
HXLINE(  86)		logo1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  87)		{
HXLINE(  87)			 ::flixel::math::FlxBasePoint this4 = logo1->scrollFactor;
HXDLIN(  87)			this4->set_x(( (Float)(0) ));
HXDLIN(  87)			this4->set_y(( (Float)(0) ));
            		}
HXLINE(  88)		{
HXLINE(  88)			 ::flixel::math::FlxBasePoint this5 = logo1->scale;
HXDLIN(  88)			this5->set_x(((Float)0.5));
HXDLIN(  88)			this5->set_y(((Float)0.5));
            		}
HXLINE(  89)		logo1->setPosition(80,-380);
HXLINE(  90)		{
HXLINE(  90)			int axes1 = 1;
HXDLIN(  90)			bool _hx_tmp5;
HXDLIN(  90)			if ((axes1 != 1)) {
HXLINE(  90)				_hx_tmp5 = (axes1 == 17);
            			}
            			else {
HXLINE(  90)				_hx_tmp5 = true;
            			}
HXDLIN(  90)			if (_hx_tmp5) {
HXLINE(  90)				int _hx_tmp6 = ::flixel::FlxG_obj::width;
HXDLIN(  90)				logo1->set_x(((( (Float)(_hx_tmp6) ) - logo1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  90)			bool _hx_tmp7;
HXDLIN(  90)			if ((axes1 != 16)) {
HXLINE(  90)				_hx_tmp7 = (axes1 == 17);
            			}
            			else {
HXLINE(  90)				_hx_tmp7 = true;
            			}
HXDLIN(  90)			if (_hx_tmp7) {
HXLINE(  90)				int _hx_tmp8 = ::flixel::FlxG_obj::height;
HXDLIN(  90)				logo1->set_y(((( (Float)(_hx_tmp8) ) - logo1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  92)		::Array< ::String > imageList = ::Array_obj< ::String >::fromData( _hx_array_data_36084c2d_8,7);
HXLINE(  93)		this->randImage =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,50,1000,::backend::Paths_obj::image(imageList->__get(::flixel::FlxG_obj::random->_hx_int(0,(imageList->length - 1),null())),null(),null()));
HXLINE(  94)		this->randImage->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  95)		{
HXLINE(  95)			 ::flixel::math::FlxBasePoint this6 = this->randImage->scrollFactor;
HXDLIN(  95)			this6->set_x(( (Float)(0) ));
HXDLIN(  95)			this6->set_y(( (Float)(0) ));
            		}
HXLINE(  96)		this->add(this->randImage);
HXLINE(  97)		this->add(logo1);
HXLINE(  99)		this->rareblud =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,700,1000,::backend::Paths_obj::image(HX_("menucharRARE",97,17,82,84),null(),null()));
HXLINE( 100)		this->rareblud->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 101)		{
HXLINE( 101)			 ::flixel::math::FlxBasePoint this7 = this->rareblud->scrollFactor;
HXDLIN( 101)			this7->set_x(( (Float)(0) ));
HXDLIN( 101)			this7->set_y(( (Float)(0) ));
            		}
HXLINE( 104)		if (((::Math_obj::random() * ( (Float)(1500) )) < 1)) {
HXLINE( 105)			this->randImage->set_visible(false);
HXLINE( 106)			this->add(this->rareblud);
HXLINE( 107)			::flixel::tweens::FlxTween_obj::tween(this->rareblud, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("x",78,00,00,00),700)
            				->setFixed(1,HX_("y",79,00,00,00),160)),((Float)1.2), ::Dynamic(::hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.2))
            				->setFixed(1,HX_("loopDelay",7f,f6,d2,04),0)
            				->setFixed(2,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())
            				->setFixed(3,HX_("type",ba,f2,08,4d),::flixel::tweens::FlxTween_obj::ONESHOT)));
            		}
HXLINE( 110)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE( 111)		this->add(this->camFollow);
HXLINE( 113)		 ::flixel::FlxSprite _hx_tmp9 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-80,null(),null());
HXDLIN( 113)		this->magenta = _hx_tmp9->loadGraphic(::backend::Paths_obj::image(HX_("menuDesat",26,91,04,72),null(),null()),null(),null(),null(),null(),null());
HXLINE( 114)		this->magenta->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 115)		{
HXLINE( 115)			 ::flixel::math::FlxBasePoint this8 = this->magenta->scrollFactor;
HXDLIN( 115)			this8->set_x(( (Float)(0) ));
HXDLIN( 115)			this8->set_y(yScroll);
            		}
HXLINE( 116)		 ::flixel::FlxSprite _hx_tmp10 = this->magenta;
HXDLIN( 116)		_hx_tmp10->setGraphicSize(::Std_obj::_hx_int((this->magenta->get_width() * ((Float)1.175))),null());
HXLINE( 117)		this->magenta->updateHitbox();
HXLINE( 118)		this->magenta->set_visible(false);
HXLINE( 119)		this->magenta->set_color(-167525);
HXLINE( 120)		this->add(this->magenta);
HXLINE( 122)		 ::flixel::FlxSprite bottomborder =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 122)		 ::flixel::FlxSprite bottomborder1 = bottomborder->loadGraphic(::backend::Paths_obj::image(HX_("menuborderbottom",f6,64,58,ac),null(),null()),null(),null(),null(),null(),null());
HXLINE( 123)		bottomborder1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 124)		{
HXLINE( 124)			 ::flixel::math::FlxBasePoint this9 = bottomborder1->scrollFactor;
HXDLIN( 124)			this9->set_x(( (Float)(0) ));
HXDLIN( 124)			this9->set_y(( (Float)(0) ));
            		}
HXLINE( 125)		this->add(bottomborder1);
HXLINE( 127)		this->menuItems =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 128)		this->add(this->menuItems);
HXLINE( 130)		{
HXLINE( 130)			int _g7 = 0;
HXDLIN( 130)			int _g8 = this->optionShit->length;
HXDLIN( 130)			while((_g7 < _g8)){
HXLINE( 130)				_g7 = (_g7 + 1);
HXDLIN( 130)				int i1 = (_g7 - 1);
HXLINE( 132)				Float offset = (( (Float)(108) ) - (::Math_obj::max(( (Float)(this->optionShit->length) ),( (Float)(4) )) * ( (Float)(80) )));
HXLINE( 133)				 ::flixel::FlxSprite menuItem =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-80,((i1 * 140) + offset),null());
HXLINE( 134)				menuItem->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 135)				::String key = (HX_("mainmenu/menu_",a9,7b,4b,27) + this->optionShit->__get(i1));
HXDLIN( 135)				::String library = null();
HXDLIN( 135)				 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(key,library,true);
HXDLIN( 135)				bool xmlExists = false;
HXDLIN( 135)				::String xml = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e)));
HXDLIN( 135)				if (::sys::FileSystem_obj::exists(xml)) {
HXLINE( 385)					xmlExists = true;
            				}
HXLINE( 135)				 ::Dynamic _hx_tmp11;
HXDLIN( 135)				if (xmlExists) {
HXLINE( 135)					_hx_tmp11 = ::sys::io::File_obj::getContent(xml);
            				}
            				else {
HXLINE( 135)					_hx_tmp11 = ::backend::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e)),null(),library,null());
            				}
HXDLIN( 135)				menuItem->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded,_hx_tmp11));
HXLINE( 136)				menuItem->animation->addByPrefix(HX_("idle",14,a7,b3,45),(this->optionShit->__get(i1) + HX_(" basic",8e,b6,25,79)),24,null(),null(),null());
HXLINE( 137)				menuItem->animation->addByPrefix(HX_("selected",5b,2a,6d,b1),(this->optionShit->__get(i1) + HX_(" white",89,d6,28,95)),24,null(),null(),null());
HXLINE( 138)				menuItem->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 139)				this->menuItems->add(menuItem).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 140)				Float scr = (( (Float)((this->optionShit->length - 4)) ) * ((Float)0.135));
HXLINE( 141)				if ((this->optionShit->length < 6)) {
HXLINE( 142)					scr = ( (Float)(0) );
            				}
HXLINE( 143)				{
HXLINE( 143)					 ::flixel::math::FlxBasePoint this10 = menuItem->scrollFactor;
HXDLIN( 143)					this10->set_x(( (Float)(0) ));
HXDLIN( 143)					this10->set_y(scr);
            				}
HXLINE( 144)				menuItem->updateHitbox();
HXLINE( 145)				{
HXLINE( 145)					 ::flixel::math::FlxBasePoint this11 = menuItem->scale;
HXDLIN( 145)					this11->set_x(((Float)0.45));
HXDLIN( 145)					this11->set_y(((Float)0.45));
            				}
            			}
            		}
HXLINE( 148)		 ::flixel::FlxSprite topborder =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 148)		 ::flixel::FlxSprite topborder1 = topborder->loadGraphic(::backend::Paths_obj::image(HX_("menubordertop",aa,83,ca,65),null(),null()),null(),null(),null(),null(),null());
HXLINE( 149)		topborder1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 150)		{
HXLINE( 150)			 ::flixel::math::FlxBasePoint this12 = topborder1->scrollFactor;
HXDLIN( 150)			this12->set_x(( (Float)(0) ));
HXDLIN( 150)			this12->set_y(( (Float)(0) ));
            		}
HXLINE( 151)		this->add(topborder1);
HXLINE( 153)		 ::flixel::text::FlxText psychVer =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,12,(::flixel::FlxG_obj::height - 44),0,(HX_("Psych Engine v",5d,a0,37,c7) + ::states::MainMenuState_obj::psychEngineVersion),12,null());
HXLINE( 154)		{
HXLINE( 154)			 ::flixel::math::FlxBasePoint this13 = psychVer->scrollFactor;
HXDLIN( 154)			this13->set_x(( (Float)(0) ));
HXDLIN( 154)			this13->set_y(( (Float)(0) ));
            		}
HXLINE( 155)		psychVer->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 156)		this->add(psychVer);
HXLINE( 157)		int fnfVer = (::flixel::FlxG_obj::height - 24);
HXDLIN( 157)		 ::flixel::text::FlxText fnfVer1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,12,fnfVer,0,(HX_("Friday Night Funkin' v",03,65,b0,2f) + ::lime::app::Application_obj::current->meta->get(HX_("version",18,e7,f1,7c))),12,null());
HXLINE( 158)		{
HXLINE( 158)			 ::flixel::math::FlxBasePoint this14 = fnfVer1->scrollFactor;
HXDLIN( 158)			this14->set_x(( (Float)(0) ));
HXDLIN( 158)			this14->set_y(( (Float)(0) ));
            		}
HXLINE( 159)		fnfVer1->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 160)		this->add(fnfVer1);
HXLINE( 161)		this->changeItem(null());
HXLINE( 174)		this->super::create();
HXLINE( 176)		::flixel::FlxG_obj::camera->follow(this->camFollow,null(),9);
HXLINE( 178)		Dynamic( this->menuItems->members->__get(0)).StaticCast<  ::flixel::FlxSprite >()->setPosition(-730,-250);
HXLINE( 179)		Dynamic( this->menuItems->members->__get(1)).StaticCast<  ::flixel::FlxSprite >()->setPosition(-700,-95);
HXLINE( 180)		Dynamic( this->menuItems->members->__get(2)).StaticCast<  ::flixel::FlxSprite >()->setPosition(-700,30);
HXLINE( 181)		Dynamic( this->menuItems->members->__get(3)).StaticCast<  ::flixel::FlxSprite >()->setPosition(-700,155);
HXLINE( 182)		Dynamic( this->menuItems->members->__get(4)).StaticCast<  ::flixel::FlxSprite >()->setPosition(-707,315);
HXLINE( 184)		{
HXLINE( 184)			 ::flixel::math::FlxBasePoint this15 = Dynamic( this->menuItems->members->__get(4)).StaticCast<  ::flixel::FlxSprite >()->scale;
HXDLIN( 184)			this15->set_x(((Float)0.4));
HXDLIN( 184)			this15->set_y(((Float)0.4));
            		}
HXLINE( 186)		::flixel::tweens::FlxTween_obj::tween(this->randImage, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),50)
            			->setFixed(1,HX_("y",79,00,00,00),0)),((Float)1.2), ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.2))
            			->setFixed(1,HX_("loopDelay",7f,f6,d2,04),0)
            			->setFixed(2,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())
            			->setFixed(3,HX_("type",ba,f2,08,4d),::flixel::tweens::FlxTween_obj::ONESHOT)));
HXLINE( 187)		::flixel::tweens::FlxTween_obj::tween(logo1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),190)
            			->setFixed(1,HX_("y",79,00,00,00),-170)),1, ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.2))
            			->setFixed(1,HX_("loopDelay",7f,f6,d2,04),0)
            			->setFixed(2,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())
            			->setFixed(3,HX_("type",ba,f2,08,4d),::flixel::tweens::FlxTween_obj::ONESHOT)));
HXLINE( 188)		::flixel::tweens::FlxTween_obj::tween(logo1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),190)
            			->setFixed(1,HX_("y",79,00,00,00),-190)),2, ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)1.2))
            			->setFixed(1,HX_("loopDelay",7f,f6,d2,04),0)
            			->setFixed(2,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())
            			->setFixed(3,HX_("type",ba,f2,08,4d),::flixel::tweens::FlxTween_obj::PINGPONG)));
HXLINE( 189)		::flixel::tweens::FlxTween_obj::tween(underlay1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),0)
            			->setFixed(1,HX_("y",79,00,00,00),0)),((Float)1.5), ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.6))
            			->setFixed(1,HX_("loopDelay",7f,f6,d2,04),0)
            			->setFixed(2,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())
            			->setFixed(3,HX_("type",ba,f2,08,4d),::flixel::tweens::FlxTween_obj::ONESHOT)));
HXLINE( 191)		::flixel::tweens::FlxTween_obj::tween(Dynamic( this->menuItems->members->__get(0)).StaticCast<  ::flixel::FlxSprite >(), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),-110)
            			->setFixed(1,HX_("y",79,00,00,00),-250)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),1)
            			->setFixed(1,HX_("loopDelay",7f,f6,d2,04),0)
            			->setFixed(2,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backOut_dyn())
            			->setFixed(3,HX_("type",ba,f2,08,4d),::flixel::tweens::FlxTween_obj::ONESHOT)));
HXLINE( 192)		::flixel::tweens::FlxTween_obj::tween(Dynamic( this->menuItems->members->__get(1)).StaticCast<  ::flixel::FlxSprite >(), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),-80)
            			->setFixed(1,HX_("y",79,00,00,00),-95)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)1.2))
            			->setFixed(1,HX_("loopDelay",7f,f6,d2,04),0)
            			->setFixed(2,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backOut_dyn())
            			->setFixed(3,HX_("type",ba,f2,08,4d),::flixel::tweens::FlxTween_obj::ONESHOT)));
HXLINE( 193)		::flixel::tweens::FlxTween_obj::tween(Dynamic( this->menuItems->members->__get(2)).StaticCast<  ::flixel::FlxSprite >(), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),-80)
            			->setFixed(1,HX_("y",79,00,00,00),30)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)1.4))
            			->setFixed(1,HX_("loopDelay",7f,f6,d2,04),0)
            			->setFixed(2,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backOut_dyn())
            			->setFixed(3,HX_("type",ba,f2,08,4d),::flixel::tweens::FlxTween_obj::ONESHOT)));
HXLINE( 194)		::flixel::tweens::FlxTween_obj::tween(Dynamic( this->menuItems->members->__get(3)).StaticCast<  ::flixel::FlxSprite >(), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),-80)
            			->setFixed(1,HX_("y",79,00,00,00),155)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)1.6))
            			->setFixed(1,HX_("loopDelay",7f,f6,d2,04),0)
            			->setFixed(2,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backOut_dyn())
            			->setFixed(3,HX_("type",ba,f2,08,4d),::flixel::tweens::FlxTween_obj::ONESHOT)));
HXLINE( 195)		::flixel::tweens::FlxTween_obj::tween(Dynamic( this->menuItems->members->__get(4)).StaticCast<  ::flixel::FlxSprite >(), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),-87)
            			->setFixed(1,HX_("y",79,00,00,00),315)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)1.8))
            			->setFixed(1,HX_("loopDelay",7f,f6,d2,04),0)
            			->setFixed(2,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backOut_dyn())
            			->setFixed(3,HX_("type",ba,f2,08,4d),::flixel::tweens::FlxTween_obj::ONESHOT)));
            	}


void MainMenuState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_89e648ab22b7047a_202_update)
HXDLIN( 202)		 ::states::MainMenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 203)		Dynamic( this->menuItems->members->__get(0)).StaticCast<  ::flixel::FlxSprite >()->updateHitbox();
HXLINE( 204)		Dynamic( this->menuItems->members->__get(1)).StaticCast<  ::flixel::FlxSprite >()->updateHitbox();
HXLINE( 205)		Dynamic( this->menuItems->members->__get(2)).StaticCast<  ::flixel::FlxSprite >()->updateHitbox();
HXLINE( 206)		Dynamic( this->menuItems->members->__get(3)).StaticCast<  ::flixel::FlxSprite >()->updateHitbox();
HXLINE( 207)		Dynamic( this->menuItems->members->__get(4)).StaticCast<  ::flixel::FlxSprite >()->updateHitbox();
HXLINE( 209)		bool _hx_tmp;
HXDLIN( 209)		if (::flixel::FlxG_obj::mouse->overlaps(this->rareblud,null())) {
HXLINE( 209)			_hx_tmp = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
            		}
            		else {
HXLINE( 209)			_hx_tmp = false;
            		}
HXDLIN( 209)		if (_hx_tmp) {
HXLINE( 211)			::states::PlayState_obj::SONG = ::backend::Song_obj::loadFromJson(HX_("dunner",be,3c,9b,a2),HX_("dunner",be,3c,9b,a2));
HXLINE( 212)			::backend::MusicBeatState_obj::switchState(::states::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::states::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false));
            		}
HXLINE( 215)		if ((::flixel::FlxG_obj::sound->music->_volume < ((Float)0.8))) {
HXLINE( 217)			 ::flixel::sound::FlxSound fh = ::flixel::FlxG_obj::sound->music;
HXDLIN( 217)			fh->set_volume((fh->_volume + (((Float)0.5) * elapsed)));
HXLINE( 218)			if (::hx::IsNotNull( ::states::FreeplayState_obj::vocals )) {
HXLINE( 219)				 ::flixel::sound::FlxSound fh1 = ::states::FreeplayState_obj::vocals;
HXDLIN( 219)				fh1->set_volume((fh1->_volume + (((Float)0.5) * elapsed)));
            			}
            		}
HXLINE( 222)		if (!(this->selectedSomethin)) {
HXLINE( 224)			if (this->get_controls()->get_UI_UP_P()) {
HXLINE( 225)				this->changeItem(-1);
            			}
HXLINE( 227)			if (this->get_controls()->get_UI_DOWN_P()) {
HXLINE( 228)				this->changeItem(1);
            			}
HXLINE( 230)			if (this->get_controls()->get_BACK()) {
HXLINE( 232)				this->selectedSomethin = true;
HXLINE( 233)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 233)				_hx_tmp1->play(::backend::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
HXLINE( 234)				::backend::MusicBeatState_obj::switchState( ::states::TitleState_obj::__alloc( HX_CTX ,null(),null()));
            			}
HXLINE( 237)			if (this->get_controls()->get_ACCEPT()) {
HXLINE( 239)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN( 239)				_hx_tmp2->play(::backend::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),null(),null(),null(),null(),null());
HXLINE( 240)				if ((this->optionShit->__get(::states::MainMenuState_obj::curSelected) == HX_("donate",6f,f1,29,2e))) {
HXLINE( 242)					::String url = HX_("https://ninja-muffin24.itch.io/funkin",69,b0,72,92);
HXDLIN( 242)					if (!( ::EReg_obj::__alloc( HX_CTX ,HX_("^.\\w+?:/*",16,3c,ef,2d),HX_("",00,00,00,00))->match(url))) {
HXLINE( 242)						url = (HX_("https://",cf,b4,ae,3e) + url);
            					}
HXDLIN( 242)					::openfl::Lib_obj::getURL( ::openfl::net::URLRequest_obj::__alloc( HX_CTX ,url),HX_("_blank",95,26,d9,b0));
            				}
            				else {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::MainMenuState,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::effects::FlxFlicker flick){
            						HX_GC_STACKFRAME(&_hx_pos_89e648ab22b7047a_253_update)
HXLINE( 253)						::String _hx_switch_0 = _gthis->optionShit->__get(::states::MainMenuState_obj::curSelected);
            						if (  (_hx_switch_0==HX_("credits",1a,0e,5e,13)) ){
HXLINE( 271)							::backend::MusicBeatState_obj::switchState( ::states::CreditsState_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 271)							goto _hx_goto_9;
            						}
            						if (  (_hx_switch_0==HX_("freeplay",a0,90,86,22)) ){
HXLINE( 258)							::backend::MusicBeatState_obj::switchState( ::states::FreeplayState_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 258)							goto _hx_goto_9;
            						}
            						if (  (_hx_switch_0==HX_("gallery",92,80,b7,fa)) ){
HXLINE( 273)							::backend::MusicBeatState_obj::switchState( ::states::GalleryState_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 273)							goto _hx_goto_9;
            						}
            						if (  (_hx_switch_0==HX_("mods",71,d3,60,48)) ){
HXLINE( 262)							::backend::MusicBeatState_obj::switchState( ::states::ModsMenuState_obj::__alloc( HX_CTX ,null()));
HXDLIN( 262)							goto _hx_goto_9;
            						}
            						if (  (_hx_switch_0==HX_("options",5e,33,fe,df)) ){
HXLINE( 275)							::backend::MusicBeatState_obj::switchState( ::options::OptionsState_obj::__alloc( HX_CTX ,null(),null()));
HXLINE( 276)							::options::OptionsState_obj::onPlayState = false;
HXLINE( 277)							if (::hx::IsNotNull( ::states::PlayState_obj::SONG )) {
HXLINE( 279)								::states::PlayState_obj::SONG->__SetField(HX_("arrowSkin",e6,d4,f8,07),null(),::hx::paccDynamic);
HXLINE( 280)								::states::PlayState_obj::SONG->__SetField(HX_("splashSkin",84,03,e1,a1),null(),::hx::paccDynamic);
HXLINE( 281)								::states::PlayState_obj::stageUI = HX_("normal",27,72,69,30);
            							}
HXLINE( 274)							goto _hx_goto_9;
            						}
            						if (  (_hx_switch_0==HX_("story_mode",2d,63,e6,a4)) ){
HXLINE( 256)							::backend::MusicBeatState_obj::switchState( ::states::StoryMenuState_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 256)							goto _hx_goto_9;
            						}
            						_hx_goto_9:;
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 246)					this->selectedSomethin = true;
HXLINE( 248)					if (::backend::ClientPrefs_obj::data->flashing) {
HXLINE( 249)						::flixel::effects::FlxFlicker_obj::flicker(this->magenta,((Float)1.1),((Float)0.15),false,null(),null(),null());
            					}
HXLINE( 251)					::flixel::effects::FlxFlicker_obj::flicker(Dynamic( this->menuItems->members->__get(::states::MainMenuState_obj::curSelected)).StaticCast<  ::flixel::FlxSprite >(),1,((Float)0.06),false,false, ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE( 286)					{
HXLINE( 286)						int _g = 0;
HXDLIN( 286)						int _g1 = this->menuItems->members->get_length();
HXDLIN( 286)						while((_g < _g1)){
            							HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::states::MainMenuState,_gthis,int,i) HXARGC(1)
            							void _hx_run( ::flixel::tweens::FlxTween twn){
            								HX_GC_STACKFRAME(&_hx_pos_89e648ab22b7047a_294_update)
HXLINE( 294)								Dynamic( _gthis->menuItems->members->__get(i)).StaticCast<  ::flixel::FlxSprite >()->kill();
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE( 286)							_g = (_g + 1);
HXDLIN( 286)							int i = (_g - 1);
HXLINE( 288)							if ((i == ::states::MainMenuState_obj::curSelected)) {
HXLINE( 289)								continue;
            							}
HXLINE( 290)							::flixel::tweens::FlxTween_obj::tween(Dynamic( this->menuItems->members->__get(i)).StaticCast<  ::flixel::FlxSprite >(), ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())
            								->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(_gthis,i)))));
            						}
            					}
            				}
            			}
HXLINE( 301)			if (this->get_controls()->justPressed(HX_("debug_1",05,20,57,5b))) {
HXLINE( 303)				this->selectedSomethin = true;
HXLINE( 304)				::backend::MusicBeatState_obj::switchState( ::states::editors::MasterEditorMenu_obj::__alloc( HX_CTX ,null(),null()));
            			}
            		}
HXLINE( 309)		this->super::update(elapsed);
            	}


void MainMenuState_obj::changeItem(::hx::Null< int >  __o_huh){
            		int huh = __o_huh.Default(0);
            	HX_STACKFRAME(&_hx_pos_89e648ab22b7047a_313_changeItem)
HXLINE( 314)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 314)		_hx_tmp->play(::backend::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 315)		Dynamic( this->menuItems->members->__get(::states::MainMenuState_obj::curSelected)).StaticCast<  ::flixel::FlxSprite >()->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 316)		Dynamic( this->menuItems->members->__get(::states::MainMenuState_obj::curSelected)).StaticCast<  ::flixel::FlxSprite >()->updateHitbox();
HXLINE( 318)		 ::Dynamic _hx_tmp1 = ::hx::ClassOf< ::states::MainMenuState >();
HXDLIN( 318)		::states::MainMenuState_obj::curSelected = (::states::MainMenuState_obj::curSelected + huh);
HXLINE( 320)		if ((::states::MainMenuState_obj::curSelected >= this->menuItems->length)) {
HXLINE( 321)			::states::MainMenuState_obj::curSelected = 0;
            		}
HXLINE( 322)		if ((::states::MainMenuState_obj::curSelected < 0)) {
HXLINE( 323)			::states::MainMenuState_obj::curSelected = (this->menuItems->length - 1);
            		}
HXLINE( 325)		Dynamic( this->menuItems->members->__get(::states::MainMenuState_obj::curSelected)).StaticCast<  ::flixel::FlxSprite >()->animation->play(HX_("selected",5b,2a,6d,b1),null(),null(),null());
HXLINE( 326)		Dynamic( this->menuItems->members->__get(::states::MainMenuState_obj::curSelected)).StaticCast<  ::flixel::FlxSprite >()->centerOffsets(null());
HXLINE( 328)		 ::flixel::FlxObject _hx_tmp2 = this->camFollow;
HXDLIN( 328)		Float _hx_tmp3 = Dynamic( this->menuItems->members->__get(::states::MainMenuState_obj::curSelected)).StaticCast<  ::flixel::FlxSprite >()->getGraphicMidpoint(null())->x;
HXLINE( 329)		Float _hx_tmp4 = Dynamic( this->menuItems->members->__get(::states::MainMenuState_obj::curSelected)).StaticCast<  ::flixel::FlxSprite >()->getGraphicMidpoint(null())->y;
HXDLIN( 329)		int _hx_tmp5;
HXDLIN( 329)		if ((this->menuItems->length > 4)) {
HXLINE( 329)			_hx_tmp5 = (this->menuItems->length * 8);
            		}
            		else {
HXLINE( 329)			_hx_tmp5 = 0;
            		}
HXLINE( 328)		_hx_tmp2->setPosition(_hx_tmp3,(_hx_tmp4 - ( (Float)(_hx_tmp5) )));
            	}


HX_DEFINE_DYNAMIC_FUNC1(MainMenuState_obj,changeItem,(void))

::String MainMenuState_obj::psychEngineVersion;

int MainMenuState_obj::curSelected;


::hx::ObjectPtr< MainMenuState_obj > MainMenuState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< MainMenuState_obj > __this = new MainMenuState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< MainMenuState_obj > MainMenuState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	MainMenuState_obj *__this = (MainMenuState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MainMenuState_obj), true, "states.MainMenuState"));
	*(void **)__this = MainMenuState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

MainMenuState_obj::MainMenuState_obj()
{
}

void MainMenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MainMenuState);
	HX_MARK_MEMBER_NAME(randImage,"randImage");
	HX_MARK_MEMBER_NAME(rareblud,"rareblud");
	HX_MARK_MEMBER_NAME(logo,"logo");
	HX_MARK_MEMBER_NAME(topborder,"topborder");
	HX_MARK_MEMBER_NAME(bottomborder,"bottomborder");
	HX_MARK_MEMBER_NAME(underlay,"underlay");
	HX_MARK_MEMBER_NAME(checker,"checker");
	HX_MARK_MEMBER_NAME(specialcheck,"specialcheck");
	HX_MARK_MEMBER_NAME(menuItems,"menuItems");
	HX_MARK_MEMBER_NAME(optionShit,"optionShit");
	HX_MARK_MEMBER_NAME(magenta,"magenta");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(selectedSomethin,"selectedSomethin");
	 ::backend::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MainMenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(randImage,"randImage");
	HX_VISIT_MEMBER_NAME(rareblud,"rareblud");
	HX_VISIT_MEMBER_NAME(logo,"logo");
	HX_VISIT_MEMBER_NAME(topborder,"topborder");
	HX_VISIT_MEMBER_NAME(bottomborder,"bottomborder");
	HX_VISIT_MEMBER_NAME(underlay,"underlay");
	HX_VISIT_MEMBER_NAME(checker,"checker");
	HX_VISIT_MEMBER_NAME(specialcheck,"specialcheck");
	HX_VISIT_MEMBER_NAME(menuItems,"menuItems");
	HX_VISIT_MEMBER_NAME(optionShit,"optionShit");
	HX_VISIT_MEMBER_NAME(magenta,"magenta");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(selectedSomethin,"selectedSomethin");
	 ::backend::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MainMenuState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"logo") ) { return ::hx::Val( logo ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"checker") ) { return ::hx::Val( checker ); }
		if (HX_FIELD_EQ(inName,"magenta") ) { return ::hx::Val( magenta ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rareblud") ) { return ::hx::Val( rareblud ); }
		if (HX_FIELD_EQ(inName,"underlay") ) { return ::hx::Val( underlay ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"randImage") ) { return ::hx::Val( randImage ); }
		if (HX_FIELD_EQ(inName,"topborder") ) { return ::hx::Val( topborder ); }
		if (HX_FIELD_EQ(inName,"menuItems") ) { return ::hx::Val( menuItems ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { return ::hx::Val( optionShit ); }
		if (HX_FIELD_EQ(inName,"changeItem") ) { return ::hx::Val( changeItem_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"bottomborder") ) { return ::hx::Val( bottomborder ); }
		if (HX_FIELD_EQ(inName,"specialcheck") ) { return ::hx::Val( specialcheck ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectedSomethin") ) { return ::hx::Val( selectedSomethin ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MainMenuState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"psychEngineVersion") ) { outValue = ( psychEngineVersion ); return true; }
	}
	return false;
}

::hx::Val MainMenuState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"logo") ) { logo=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"checker") ) { checker=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"magenta") ) { magenta=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rareblud") ) { rareblud=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"underlay") ) { underlay=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"randImage") ) { randImage=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"topborder") ) { topborder=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"menuItems") ) { menuItems=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { optionShit=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"bottomborder") ) { bottomborder=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"specialcheck") ) { specialcheck=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectedSomethin") ) { selectedSomethin=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MainMenuState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"psychEngineVersion") ) { psychEngineVersion=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void MainMenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("randImage",76,ab,1d,c6));
	outFields->push(HX_("rareblud",bb,cc,59,37));
	outFields->push(HX_("logo",6b,9f,b7,47));
	outFields->push(HX_("topborder",41,51,c1,f7));
	outFields->push(HX_("bottomborder",17,b6,77,a8));
	outFields->push(HX_("underlay",4c,76,1c,71));
	outFields->push(HX_("checker",35,b3,24,13));
	outFields->push(HX_("specialcheck",ef,6f,9e,06));
	outFields->push(HX_("menuItems",e1,15,e5,5c));
	outFields->push(HX_("optionShit",d5,2d,ee,91));
	outFields->push(HX_("magenta",29,ba,9d,0e));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("selectedSomethin",c8,ec,fb,99));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MainMenuState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuState_obj,randImage),HX_("randImage",76,ab,1d,c6)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuState_obj,rareblud),HX_("rareblud",bb,cc,59,37)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuState_obj,logo),HX_("logo",6b,9f,b7,47)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuState_obj,topborder),HX_("topborder",41,51,c1,f7)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuState_obj,bottomborder),HX_("bottomborder",17,b6,77,a8)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuState_obj,underlay),HX_("underlay",4c,76,1c,71)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuState_obj,checker),HX_("checker",35,b3,24,13)},
	{::hx::fsBool,(int)offsetof(MainMenuState_obj,specialcheck),HX_("specialcheck",ef,6f,9e,06)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MainMenuState_obj,menuItems),HX_("menuItems",e1,15,e5,5c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(MainMenuState_obj,optionShit),HX_("optionShit",d5,2d,ee,91)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuState_obj,magenta),HX_("magenta",29,ba,9d,0e)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(MainMenuState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsBool,(int)offsetof(MainMenuState_obj,selectedSomethin),HX_("selectedSomethin",c8,ec,fb,99)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MainMenuState_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &MainMenuState_obj::psychEngineVersion,HX_("psychEngineVersion",3b,61,cc,fc)},
	{::hx::fsInt,(void *) &MainMenuState_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MainMenuState_obj_sMemberFields[] = {
	HX_("randImage",76,ab,1d,c6),
	HX_("rareblud",bb,cc,59,37),
	HX_("logo",6b,9f,b7,47),
	HX_("topborder",41,51,c1,f7),
	HX_("bottomborder",17,b6,77,a8),
	HX_("underlay",4c,76,1c,71),
	HX_("checker",35,b3,24,13),
	HX_("specialcheck",ef,6f,9e,06),
	HX_("menuItems",e1,15,e5,5c),
	HX_("optionShit",d5,2d,ee,91),
	HX_("magenta",29,ba,9d,0e),
	HX_("camFollow",e0,6e,47,22),
	HX_("create",fc,66,0f,7c),
	HX_("selectedSomethin",c8,ec,fb,99),
	HX_("update",09,86,05,87),
	HX_("changeItem",a3,fa,08,20),
	::String(null()) };

static void MainMenuState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MainMenuState_obj::psychEngineVersion,"psychEngineVersion");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::curSelected,"curSelected");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MainMenuState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::psychEngineVersion,"psychEngineVersion");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::curSelected,"curSelected");
};

#endif

::hx::Class MainMenuState_obj::__mClass;

static ::String MainMenuState_obj_sStaticFields[] = {
	HX_("psychEngineVersion",3b,61,cc,fc),
	HX_("curSelected",fb,eb,ab,32),
	::String(null())
};

void MainMenuState_obj::__register()
{
	MainMenuState_obj _hx_dummy;
	MainMenuState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.MainMenuState",2d,4c,08,36);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MainMenuState_obj::__GetStatic;
	__mClass->mSetStaticField = &MainMenuState_obj::__SetStatic;
	__mClass->mMarkFunc = MainMenuState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MainMenuState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MainMenuState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MainMenuState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MainMenuState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MainMenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MainMenuState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MainMenuState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_89e648ab22b7047a_12_boot)
HXDLIN(  12)		psychEngineVersion = HX_("0.7.3",fe,8c,cd,c1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_89e648ab22b7047a_13_boot)
HXDLIN(  13)		curSelected = 0;
            	}
}

} // end namespace states
