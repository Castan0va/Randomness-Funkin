// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_objects_Alignment
#include <objects/Alignment.h>
#endif
#ifndef INCLUDED_objects_Alphabet
#include <objects/Alphabet.h>
#endif
#ifndef INCLUDED_objects_AttachedSprite
#include <objects/AttachedSprite.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Application
#include <openfl/display/Application.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_states_GalleryState
#include <states/GalleryState.h>
#endif
#ifndef INCLUDED_states_MainMenuState
#include <states/MainMenuState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_47ca6c36334795a8_5_new,"states.GalleryState","new",0xb9dbe55d,"states.GalleryState.new","states/GalleryState.hx",5,0x9336ddd2)
HX_LOCAL_STACK_FRAME(_hx_pos_47ca6c36334795a8_22_create,"states.GalleryState","create",0x4706ce1f,"states.GalleryState.create","states/GalleryState.hx",22,0x9336ddd2)
static const ::String _hx_array_data_f994f2eb_7[] = {
	HX_("Cool Pictures lol",95,74,6d,c6),
};
static const ::String _hx_array_data_f994f2eb_8[] = {
	HX_("",00,00,00,00),HX_("coolPicture",f5,78,21,16),HX_("Test Picture lolololol",30,f3,5d,44),HX_("",00,00,00,00),HX_("444444",80,a8,eb,dd),
};
static const ::String _hx_array_data_f994f2eb_9[] = {
	HX_("",00,00,00,00),HX_("uncoolPicture",3c,ef,5b,37),HX_("Test Picture the sequel",dc,44,e0,73),HX_("",00,00,00,00),HX_("444444",80,a8,eb,dd),
};
static const ::String _hx_array_data_f994f2eb_10[] = {
	HX_("",00,00,00,00),HX_("equallyCoolandUncoolPicture",8f,1c,a9,a0),HX_("Test Picture but its overused",f8,bd,9a,a4),HX_("",00,00,00,00),HX_("444444",80,a8,eb,dd),
};
HX_LOCAL_STACK_FRAME(_hx_pos_47ca6c36334795a8_151_update,"states.GalleryState","update",0x51fced2c,"states.GalleryState.update","states/GalleryState.hx",151,0x9336ddd2)
HX_LOCAL_STACK_FRAME(_hx_pos_47ca6c36334795a8_232_changeSelection,"states.GalleryState","changeSelection",0x2747b539,"states.GalleryState.changeSelection","states/GalleryState.hx",232,0x9336ddd2)
HX_LOCAL_STACK_FRAME(_hx_pos_47ca6c36334795a8_269_pushModCreditsToList,"states.GalleryState","pushModCreditsToList",0x759f816e,"states.GalleryState.pushModCreditsToList","states/GalleryState.hx",269,0x9336ddd2)
static const ::String _hx_array_data_f994f2eb_18[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_47ca6c36334795a8_289_unselectableCheck,"states.GalleryState","unselectableCheck",0x567e4dd6,"states.GalleryState.unselectableCheck","states/GalleryState.hx",289,0x9336ddd2)
namespace states{

void GalleryState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_47ca6c36334795a8_5_new)
HXLINE( 230)		this->moveTween = null();
HXLINE( 149)		this->holdTime = ((Float)0);
HXLINE( 148)		this->quitting = false;
HXLINE(  19)		this->offsetThing = ((Float)-75);
HXLINE(  11)		this->creditsStuff = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  10)		this->iconArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(   7)		this->curSelected = -1;
HXLINE(   5)		super::__construct(TransIn,TransOut);
            	}

Dynamic GalleryState_obj::__CreateEmpty() { return new GalleryState_obj; }

void *GalleryState_obj::_hx_vtable = 0;

Dynamic GalleryState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GalleryState_obj > _hx_result = new GalleryState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool GalleryState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x563293a6) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x53aaab8a || inClassId==(int)0x563293a6;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			if (inClassId<=(int)0x79768e81) {
				return inClassId==(int)0x62817b24 || inClassId==(int)0x79768e81;
			} else {
				return inClassId==(int)0x7c795c9f;
			}
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void GalleryState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_47ca6c36334795a8_22_create)
HXLINE(  23)		::openfl::Lib_obj::get_application()->_hx___window->set_title(HX_("Randomness Funkin - Gallery",96,6d,23,58));
HXLINE(  27)		::backend::DiscordClient_obj::changePresence(HX_("In the Menus",0a,c1,ad,c6),null(),null(),null(),null());
HXLINE(  30)		this->persistentUpdate = true;
HXLINE(  31)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  31)		this->bg = _hx_tmp->loadGraphic(::backend::Paths_obj::image(HX_("bggallery",6d,9d,6d,be),null(),null()),null(),null(),null(),null(),null());
HXLINE(  32)		this->bg->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  33)		this->add(this->bg);
HXLINE(  34)		{
HXLINE(  34)			 ::flixel::FlxSprite _this = this->bg;
HXDLIN(  34)			int axes = 17;
HXDLIN(  34)			bool _hx_tmp1;
HXDLIN(  34)			if ((axes != 1)) {
HXLINE(  34)				_hx_tmp1 = (axes == 17);
            			}
            			else {
HXLINE(  34)				_hx_tmp1 = true;
            			}
HXDLIN(  34)			if (_hx_tmp1) {
HXLINE(  34)				int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN(  34)				_this->set_x(((( (Float)(_hx_tmp2) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  34)			bool _hx_tmp3;
HXDLIN(  34)			if ((axes != 16)) {
HXLINE(  34)				_hx_tmp3 = (axes == 17);
            			}
            			else {
HXLINE(  34)				_hx_tmp3 = true;
            			}
HXDLIN(  34)			if (_hx_tmp3) {
HXLINE(  34)				int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN(  34)				_this->set_y(((( (Float)(_hx_tmp4) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  36)		 ::flixel::FlxSprite checker =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(  36)		 ::flixel::FlxSprite checker1 = checker->loadGraphic(::backend::Paths_obj::image(HX_("underlaything2",d0,9f,05,f4),null(),null()),null(),null(),null(),null(),null());
HXLINE(  37)		checker1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  38)		checker1->set_alpha(((Float)0.2));
HXLINE(  39)		checker1->setGraphicSize(((Float)1504.),((Float)846.));
HXLINE(  40)		{
HXLINE(  40)			 ::flixel::math::FlxBasePoint this1 = checker1->scrollFactor;
HXDLIN(  40)			this1->set_x(( (Float)(0) ));
HXDLIN(  40)			this1->set_y(( (Float)(0) ));
            		}
HXLINE(  41)		this->add(checker1);
HXLINE(  43)		::flixel::tweens::FlxTween_obj::tween(checker1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),((Float)-49.35))
            			->setFixed(1,HX_("y",79,00,00,00),((Float)-49.35))),1, ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),0)
            			->setFixed(1,HX_("loopDelay",7f,f6,d2,04),0)
            			->setFixed(2,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::linear_dyn())
            			->setFixed(3,HX_("type",ba,f2,08,4d),::flixel::tweens::FlxTween_obj::LOOPING)));
HXLINE(  45)		this->grpOptions =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  46)		this->add(this->grpOptions);
HXLINE(  49)		{
HXLINE(  49)			int _g = 0;
HXDLIN(  49)			if (!(::backend::Mods_obj::updatedOnState)) {
HXLINE(  49)				::backend::Mods_obj::updateModList();
            			}
HXDLIN(  49)			::Array< ::String > list_enabled = ::Array_obj< ::String >::__new(0);
HXDLIN(  49)			::Array< ::String > list_disabled = ::Array_obj< ::String >::__new(0);
HXDLIN(  49)			::Array< ::String > list_all = ::Array_obj< ::String >::__new(0);
HXDLIN(  49)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  49)				int _g1 = 0;
HXDLIN(  49)				::String path = HX_("modsList.txt",f1,ca,08,ac);
HXDLIN(  49)				::String daList = null();
HXDLIN(  49)				::Array< ::String > formatted = path.split(HX_(":",3a,00,00,00));
HXLINE(  23)				path = formatted->__get((formatted->length - 1));
HXLINE(  49)				if (::sys::FileSystem_obj::exists(path)) {
HXLINE(  24)					daList = ::sys::io::File_obj::getContent(path);
            				}
HXLINE(  49)				::Array< ::String > _g2;
HXDLIN(  49)				if (::hx::IsNotNull( daList )) {
HXLINE(  49)					::Array< ::String > daList1 = ::Array_obj< ::String >::__new(0);
HXLINE(  45)					daList1 = ::StringTools_obj::trim(daList).split(HX_("\n",0a,00,00,00));
HXLINE(  49)					{
HXLINE(  49)						int _g3 = 0;
HXDLIN(  49)						int _g4 = daList1->length;
HXDLIN(  49)						while((_g3 < _g4)){
HXLINE(  49)							_g3 = (_g3 + 1);
HXDLIN(  49)							int i = (_g3 - 1);
HXDLIN(  49)							daList1[i] = ::StringTools_obj::trim(daList1->__get(i));
            						}
            					}
HXDLIN(  49)					_g2 = daList1;
            				}
            				else {
HXLINE(  49)					_g2 = ::Array_obj< ::String >::__new(0);
            				}
HXDLIN(  49)				while((_g1 < _g2->length)){
HXLINE(  49)					::String mod = _g2->__get(_g1);
HXDLIN(  49)					_g1 = (_g1 + 1);
HXDLIN(  49)					if ((::StringTools_obj::trim(mod).length < 1)) {
HXLINE(  49)						continue;
            					}
HXDLIN(  49)					::Array< ::String > dat = mod.split(HX_("|",7c,00,00,00));
HXDLIN(  49)					list_all->push(dat->__get(0));
HXDLIN(  49)					if ((dat->__get(1) == HX_("1",31,00,00,00))) {
HXLINE(  49)						list_enabled->push(dat->__get(0));
            					}
            					else {
HXLINE(  49)						list_disabled->push(dat->__get(0));
            					}
            				}
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g5 = _hx_e;
HXLINE( 166)					 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g5);
HXLINE(  49)					::haxe::Log_obj::trace(e,::hx::SourceInfo(HX_("source/backend/Mods.hx",1e,5b,8b,ff),167,HX_("backend.Mods",2b,aa,ba,a1),HX_("parseList",31,6e,59,cf)));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXDLIN(  49)			::Array< ::String > _g6 = list_enabled;
HXDLIN(  49)			while((_g < _g6->length)){
HXLINE(  49)				::String mod1 = _g6->__get(_g);
HXDLIN(  49)				_g = (_g + 1);
HXDLIN(  49)				this->pushModCreditsToList(mod1);
            			}
            		}
HXLINE(  52)		::Array< ::Dynamic> defaultList = ::Array_obj< ::Dynamic>::__new(4)->init(0,::Array_obj< ::String >::fromData( _hx_array_data_f994f2eb_7,1))->init(1,::Array_obj< ::String >::fromData( _hx_array_data_f994f2eb_8,5))->init(2,::Array_obj< ::String >::fromData( _hx_array_data_f994f2eb_9,5))->init(3,::Array_obj< ::String >::fromData( _hx_array_data_f994f2eb_10,5));
HXLINE(  59)		{
HXLINE(  59)			int _g7 = 0;
HXDLIN(  59)			while((_g7 < defaultList->length)){
HXLINE(  59)				::Array< ::String > i1 = defaultList->__get(_g7).StaticCast< ::Array< ::String > >();
HXDLIN(  59)				_g7 = (_g7 + 1);
HXLINE(  60)				this->creditsStuff->push(i1);
            			}
            		}
HXLINE(  63)		{
HXLINE(  63)			int _g8 = 0;
HXDLIN(  63)			int _g9 = this->creditsStuff->length;
HXDLIN(  63)			while((_g8 < _g9)){
HXLINE(  63)				_g8 = (_g8 + 1);
HXDLIN(  63)				int i2 = (_g8 - 1);
HXLINE(  65)				bool isSelectable = !(this->unselectableCheck(i2));
HXLINE(  66)				 ::objects::Alphabet optionText =  ::objects::Alphabet_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )),( (Float)(300) ),this->creditsStuff->__get(i2).StaticCast< ::Array< ::String > >()->__get(0),!(isSelectable));
HXLINE(  67)				optionText->isMenuItem = true;
HXLINE(  68)				optionText->targetY = i2;
HXLINE(  69)				optionText->set_alpha(( (Float)(0) ));
HXLINE(  70)				optionText->changeX = false;
HXLINE(  71)				optionText->snapToPosition();
HXLINE(  72)				this->grpOptions->add(optionText).StaticCast<  ::objects::Alphabet >();
HXLINE(  74)				if (isSelectable) {
HXLINE(  75)					if (::hx::IsNotNull( this->creditsStuff->__get(i2).StaticCast< ::Array< ::String > >()->__get(5) )) {
HXLINE(  77)						::backend::Mods_obj::currentModDirectory = this->creditsStuff->__get(i2).StaticCast< ::Array< ::String > >()->__get(5);
            					}
HXLINE(  80)					::String str = HX_("gallery/missing_picture",e8,f0,ee,77);
HXLINE(  81)					bool _hx_tmp5;
HXDLIN(  81)					if (::hx::IsNotNull( this->creditsStuff->__get(i2).StaticCast< ::Array< ::String > >()->__get(1) )) {
HXLINE(  81)						_hx_tmp5 = (this->creditsStuff->__get(i2).StaticCast< ::Array< ::String > >()->__get(1).length > 0);
            					}
            					else {
HXLINE(  81)						_hx_tmp5 = false;
            					}
HXDLIN(  81)					if (_hx_tmp5) {
HXLINE(  83)						::String fileName = (HX_("gallery/",5d,ff,d8,65) + this->creditsStuff->__get(i2).StaticCast< ::Array< ::String > >()->__get(1));
HXLINE(  84)						if (::backend::Paths_obj::fileExists(((HX_("images/",77,50,74,c1) + fileName) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),null(),null())) {
HXLINE(  84)							str = fileName;
            						}
            						else {
HXLINE(  85)							if (::backend::Paths_obj::fileExists(((HX_("images/",77,50,74,c1) + fileName) + HX_("-pixel.png",f4,c0,84,ba)),HX_("IMAGE",3b,57,57,3b),null(),null())) {
HXLINE(  85)								str = (fileName + HX_("-pixel",39,03,b3,c0));
            							}
            						}
            					}
HXLINE(  88)					 ::objects::AttachedSprite icon =  ::objects::AttachedSprite_obj::__alloc( HX_CTX ,str,null(),null(),null());
HXLINE(  89)					if (::StringTools_obj::endsWith(str,HX_("-pixel",39,03,b3,c0))) {
HXLINE(  89)						icon->set_antialiasing(false);
            					}
HXLINE(  90)					icon->xAdd = (optionText->get_width() + 10);
HXLINE(  91)					icon->sprTracker = optionText;
HXLINE(  94)					this->iconArray->push(icon);
HXLINE(  95)					this->add(icon);
HXLINE(  96)					::backend::Mods_obj::currentModDirectory = HX_("",00,00,00,00);
HXLINE(  98)					if ((this->curSelected == -1)) {
HXLINE(  98)						this->curSelected = i2;
            					}
            				}
            				else {
HXLINE( 100)					optionText->set_alignment(::objects::Alignment_obj::CENTERED_dyn());
            				}
            			}
            		}
HXLINE( 103)		 ::flixel::FlxSprite overlay =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 103)		 ::flixel::FlxSprite overlay1 = overlay->loadGraphic(::backend::Paths_obj::image(HX_("galleryborder",fe,86,af,34),null(),null()),null(),null(),null(),null(),null());
HXLINE( 104)		overlay1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 105)		{
HXLINE( 105)			 ::flixel::math::FlxBasePoint this2 = overlay1->scrollFactor;
HXDLIN( 105)			this2->set_x(( (Float)(0) ));
HXDLIN( 105)			this2->set_y(( (Float)(0) ));
            		}
HXLINE( 106)		overlay1->setGraphicSize(1280,720);
HXLINE( 107)		this->add(overlay1);
HXLINE( 109)		 ::flixel::FlxSprite gallery =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 109)		 ::flixel::FlxSprite gallery1 = gallery->loadGraphic(::backend::Paths_obj::image(HX_("logallery",6f,48,6f,c5),null(),null()),null(),null(),null(),null(),null());
HXLINE( 110)		gallery1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 111)		{
HXLINE( 111)			 ::flixel::math::FlxBasePoint this3 = gallery1->scrollFactor;
HXDLIN( 111)			this3->set_x(( (Float)(0) ));
HXDLIN( 111)			this3->set_y(( (Float)(0) ));
            		}
HXLINE( 112)		{
HXLINE( 112)			 ::flixel::math::FlxBasePoint this4 = gallery1->scale;
HXDLIN( 112)			this4->set_x(((Float)0.5));
HXDLIN( 112)			this4->set_y(((Float)0.5));
            		}
HXLINE( 113)		gallery1->setPosition(10,0);
HXLINE( 115)		::flixel::tweens::FlxTween_obj::tween(gallery1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),500)
            			->setFixed(1,HX_("y",79,00,00,00),-500)),2, ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),0)
            			->setFixed(1,HX_("loopDelay",7f,f6,d2,04),0)
            			->setFixed(2,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())
            			->setFixed(3,HX_("type",ba,f2,08,4d),::flixel::tweens::FlxTween_obj::PINGPONG)));
HXLINE( 117)		 ::flixel::FlxSprite arrowleft =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 117)		 ::flixel::FlxSprite arrowleft1 = arrowleft->loadGraphic(::backend::Paths_obj::image(HX_("arrowleft",50,9a,7a,18),null(),null()),null(),null(),null(),null(),null());
HXLINE( 118)		arrowleft1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 119)		{
HXLINE( 119)			 ::flixel::math::FlxBasePoint this5 = arrowleft1->scrollFactor;
HXDLIN( 119)			this5->set_x(( (Float)(0) ));
HXDLIN( 119)			this5->set_y(( (Float)(0) ));
            		}
HXLINE( 120)		arrowleft1->setGraphicSize(1280,720);
HXLINE( 121)		this->add(arrowleft1);
HXLINE( 123)		 ::flixel::FlxSprite arrowright =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 123)		 ::flixel::FlxSprite arrowright1 = arrowright->loadGraphic(::backend::Paths_obj::image(HX_("arrowright",73,79,d9,c9),null(),null()),null(),null(),null(),null(),null());
HXLINE( 124)		arrowright1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 125)		{
HXLINE( 125)			 ::flixel::math::FlxBasePoint this6 = arrowright1->scrollFactor;
HXDLIN( 125)			this6->set_x(( (Float)(0) ));
HXDLIN( 125)			this6->set_y(( (Float)(0) ));
            		}
HXLINE( 126)		arrowright1->setGraphicSize(1280,720);
HXLINE( 127)		this->add(arrowright1);
HXLINE( 129)		this->descBox =  ::objects::AttachedSprite_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 130)		this->descBox->makeGraphic(1,1,-16777216,null(),null());
HXLINE( 131)		this->descBox->xAdd = ( (Float)(-10) );
HXLINE( 132)		this->descBox->yAdd = ( (Float)(-10) );
HXLINE( 133)		this->descBox->alphaMult = ((Float)0.6);
HXLINE( 134)		this->descBox->set_alpha(((Float)0.6));
HXLINE( 135)		this->add(this->descBox);
HXLINE( 137)		this->descText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,50,((::flixel::FlxG_obj::height + this->offsetThing) - ( (Float)(25) )),1180,HX_("",00,00,00,00),32,null());
HXLINE( 138)		 ::flixel::text::FlxText _hx_tmp6 = this->descText;
HXDLIN( 138)		::String file = ::backend::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN( 138)		::String _hx_tmp7;
HXDLIN( 138)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 138)			_hx_tmp7 = file;
            		}
            		else {
HXLINE( 138)			_hx_tmp7 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN( 138)		_hx_tmp6->setFormat(_hx_tmp7,32,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 139)		{
HXLINE( 139)			 ::flixel::math::FlxBasePoint this7 = this->descText->scrollFactor;
HXDLIN( 139)			this7->set_x(( (Float)(0) ));
HXDLIN( 139)			this7->set_y(( (Float)(0) ));
            		}
HXLINE( 141)		this->descBox->sprTracker = this->descText;
HXLINE( 142)		this->add(this->descText);
HXLINE( 144)		this->changeSelection(null());
HXLINE( 145)		this->super::create();
            	}


void GalleryState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_47ca6c36334795a8_151_update)
HXLINE( 152)		if ((::flixel::FlxG_obj::sound->music->_volume < ((Float)0.7))) {
HXLINE( 154)			 ::flixel::sound::FlxSound fh = ::flixel::FlxG_obj::sound->music;
HXDLIN( 154)			fh->set_volume((fh->_volume + (((Float)0.5) * ::flixel::FlxG_obj::elapsed)));
            		}
HXLINE( 157)		if (!(this->quitting)) {
HXLINE( 159)			if ((this->creditsStuff->length > 1)) {
HXLINE( 161)				int shiftMult = 1;
HXLINE( 162)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 162)				if (_this->keyManager->checkStatusUnsafe(16,_this->status)) {
HXLINE( 162)					shiftMult = 3;
            				}
HXLINE( 164)				bool upP = this->get_controls()->get_UI_LEFT_P();
HXLINE( 165)				bool downP = this->get_controls()->get_UI_RIGHT_P();
HXLINE( 167)				if (upP) {
HXLINE( 169)					this->changeSelection(-(shiftMult));
HXLINE( 170)					this->holdTime = ( (Float)(0) );
            				}
HXLINE( 172)				if (downP) {
HXLINE( 174)					this->changeSelection(shiftMult);
HXLINE( 175)					this->holdTime = ( (Float)(0) );
            				}
HXLINE( 178)				bool _hx_tmp;
HXDLIN( 178)				if (!(this->get_controls()->get_UI_DOWN())) {
HXLINE( 178)					_hx_tmp = this->get_controls()->get_UI_UP();
            				}
            				else {
HXLINE( 178)					_hx_tmp = true;
            				}
HXDLIN( 178)				if (_hx_tmp) {
HXLINE( 180)					int checkLastHold = ::Math_obj::floor(((this->holdTime - ((Float)0.5)) * ( (Float)(10) )));
HXLINE( 181)					 ::states::GalleryState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 181)					_hx_tmp1->holdTime = (_hx_tmp1->holdTime + elapsed);
HXLINE( 182)					int checkNewHold = ::Math_obj::floor(((this->holdTime - ((Float)0.5)) * ( (Float)(10) )));
HXLINE( 184)					bool _hx_tmp2;
HXDLIN( 184)					if ((this->holdTime > ((Float)0.5))) {
HXLINE( 184)						_hx_tmp2 = ((checkNewHold - checkLastHold) > 0);
            					}
            					else {
HXLINE( 184)						_hx_tmp2 = false;
            					}
HXDLIN( 184)					if (_hx_tmp2) {
HXLINE( 186)						int _hx_tmp3;
HXDLIN( 186)						if (this->get_controls()->get_UI_UP()) {
HXLINE( 186)							_hx_tmp3 = -(shiftMult);
            						}
            						else {
HXLINE( 186)							_hx_tmp3 = shiftMult;
            						}
HXDLIN( 186)						this->changeSelection(((checkNewHold - checkLastHold) * _hx_tmp3));
            					}
            				}
            			}
HXLINE( 191)			bool _hx_tmp4;
HXDLIN( 191)			if (this->get_controls()->get_ACCEPT()) {
HXLINE( 191)				if (::hx::IsNotNull( this->creditsStuff->__get(this->curSelected).StaticCast< ::Array< ::String > >()->__get(3) )) {
HXLINE( 191)					_hx_tmp4 = (this->creditsStuff->__get(this->curSelected).StaticCast< ::Array< ::String > >()->__get(3).length > 4);
            				}
            				else {
HXLINE( 191)					_hx_tmp4 = true;
            				}
            			}
            			else {
HXLINE( 191)				_hx_tmp4 = false;
            			}
HXDLIN( 191)			if (_hx_tmp4) {
HXLINE( 192)				::String url = this->creditsStuff->__get(this->curSelected).StaticCast< ::Array< ::String > >()->__get(3);
HXDLIN( 192)				if (!( ::EReg_obj::__alloc( HX_CTX ,HX_("^.\\w+?:/*",16,3c,ef,2d),HX_("",00,00,00,00))->match(url))) {
HXLINE( 192)					url = (HX_("https://",cf,b4,ae,3e) + url);
            				}
HXDLIN( 192)				::openfl::Lib_obj::getURL( ::openfl::net::URLRequest_obj::__alloc( HX_CTX ,url),HX_("_blank",95,26,d9,b0));
            			}
HXLINE( 194)			if (this->get_controls()->get_BACK()) {
HXLINE( 196)				if (::hx::IsNotNull( this->colorTween )) {
HXLINE( 197)					this->colorTween->cancel();
            				}
HXLINE( 199)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp5 = ::flixel::FlxG_obj::sound;
HXDLIN( 199)				_hx_tmp5->play(::backend::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
HXLINE( 200)				::backend::MusicBeatState_obj::switchState( ::states::MainMenuState_obj::__alloc( HX_CTX ,null(),null()));
HXLINE( 201)				this->quitting = true;
            			}
            		}
HXLINE( 205)		{
HXLINE( 205)			int _g = 0;
HXDLIN( 205)			::Array< ::Dynamic> _g1 = this->grpOptions->members;
HXDLIN( 205)			while((_g < _g1->length)){
HXLINE( 205)				 ::objects::Alphabet item = _g1->__get(_g).StaticCast<  ::objects::Alphabet >();
HXDLIN( 205)				_g = (_g + 1);
HXLINE( 207)				if (!(item->bold)) {
HXLINE( 209)					Float lerpVal = ::Math_obj::exp((-(elapsed) * ( (Float)(12) )));
HXLINE( 210)					if ((item->targetY == 0)) {
HXLINE( 212)						Float lastX = item->x;
HXLINE( 213)						Float lastY = item->y;
HXLINE( 214)						{
HXLINE( 214)							int axes = 1;
HXDLIN( 214)							bool _hx_tmp6;
HXDLIN( 214)							if ((axes != 1)) {
HXLINE( 214)								_hx_tmp6 = (axes == 17);
            							}
            							else {
HXLINE( 214)								_hx_tmp6 = true;
            							}
HXDLIN( 214)							if (_hx_tmp6) {
HXLINE( 214)								int _hx_tmp7 = ::flixel::FlxG_obj::width;
HXDLIN( 214)								item->set_x(((( (Float)(_hx_tmp7) ) - item->get_width()) / ( (Float)(2) )));
            							}
HXDLIN( 214)							bool _hx_tmp8;
HXDLIN( 214)							if ((axes != 16)) {
HXLINE( 214)								_hx_tmp8 = (axes == 17);
            							}
            							else {
HXLINE( 214)								_hx_tmp8 = true;
            							}
HXDLIN( 214)							if (_hx_tmp8) {
HXLINE( 214)								int _hx_tmp9 = ::flixel::FlxG_obj::height;
HXDLIN( 214)								item->set_y(((( (Float)(_hx_tmp9) ) - item->get_height()) / ( (Float)(2) )));
            							}
            						}
HXLINE( 215)						{
HXLINE( 215)							int axes1 = 16;
HXDLIN( 215)							bool _hx_tmp10;
HXDLIN( 215)							if ((axes1 != 1)) {
HXLINE( 215)								_hx_tmp10 = (axes1 == 17);
            							}
            							else {
HXLINE( 215)								_hx_tmp10 = true;
            							}
HXDLIN( 215)							if (_hx_tmp10) {
HXLINE( 215)								int _hx_tmp11 = ::flixel::FlxG_obj::width;
HXDLIN( 215)								item->set_x(((( (Float)(_hx_tmp11) ) - item->get_width()) / ( (Float)(2) )));
            							}
HXDLIN( 215)							bool _hx_tmp12;
HXDLIN( 215)							if ((axes1 != 16)) {
HXLINE( 215)								_hx_tmp12 = (axes1 == 17);
            							}
            							else {
HXLINE( 215)								_hx_tmp12 = true;
            							}
HXDLIN( 215)							if (_hx_tmp12) {
HXLINE( 215)								int _hx_tmp13 = ::flixel::FlxG_obj::height;
HXDLIN( 215)								item->set_y(((( (Float)(_hx_tmp13) ) - item->get_height()) / ( (Float)(2) )));
            							}
            						}
HXLINE( 216)						item->set_x((lerpVal * lastX));
HXLINE( 217)						item->set_y((-20 + (lerpVal * (lastY - ( (Float)(-20) )))));
            					}
            					else {
HXLINE( 221)						{
HXLINE( 221)							int axes2 = 16;
HXDLIN( 221)							bool _hx_tmp14;
HXDLIN( 221)							if ((axes2 != 1)) {
HXLINE( 221)								_hx_tmp14 = (axes2 == 17);
            							}
            							else {
HXLINE( 221)								_hx_tmp14 = true;
            							}
HXDLIN( 221)							if (_hx_tmp14) {
HXLINE( 221)								int _hx_tmp15 = ::flixel::FlxG_obj::width;
HXDLIN( 221)								item->set_x(((( (Float)(_hx_tmp15) ) - item->get_width()) / ( (Float)(2) )));
            							}
HXDLIN( 221)							bool _hx_tmp16;
HXDLIN( 221)							if ((axes2 != 16)) {
HXLINE( 221)								_hx_tmp16 = (axes2 == 17);
            							}
            							else {
HXLINE( 221)								_hx_tmp16 = true;
            							}
HXDLIN( 221)							if (_hx_tmp16) {
HXLINE( 221)								int _hx_tmp17 = ::flixel::FlxG_obj::height;
HXDLIN( 221)								item->set_y(((( (Float)(_hx_tmp17) ) - item->get_height()) / ( (Float)(2) )));
            							}
            						}
HXLINE( 222)						item->set_x(( (Float)(0) ));
HXLINE( 223)						item->set_y((-20 + (lerpVal * ( (Float)(0) ))));
            					}
            				}
            			}
            		}
HXLINE( 227)		this->super::update(elapsed);
            	}


void GalleryState_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_47ca6c36334795a8_232_changeSelection)
HXLINE( 233)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 233)		_hx_tmp->play(::backend::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.4),null(),null(),null(),null());
HXLINE( 234)		do {
HXLINE( 235)			 ::states::GalleryState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 235)			_hx_tmp1->curSelected = (_hx_tmp1->curSelected + change);
HXLINE( 236)			if ((this->curSelected < 0)) {
HXLINE( 237)				this->curSelected = (this->creditsStuff->length - 1);
            			}
HXLINE( 238)			if ((this->curSelected >= this->creditsStuff->length)) {
HXLINE( 239)				this->curSelected = 0;
            			}
            		} while(this->unselectableCheck(this->curSelected));
;
HXLINE( 242)		::String color = this->creditsStuff->__get(this->curSelected).StaticCast< ::Array< ::String > >()->__get(4);
HXDLIN( 242)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\t\n\r]",ac,57,71,6b),HX_("",00,00,00,00));
HXDLIN( 242)		::String color1 = ::StringTools_obj::trim(hideChars->split(color)->join(HX_("",00,00,00,00)));
HXDLIN( 242)		if (::StringTools_obj::startsWith(color1,HX_("0x",48,2a,00,00))) {
HXLINE( 242)			color1 = color1.substring((color1.length - 6),null());
            		}
HXDLIN( 242)		 ::Dynamic colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color1);
HXDLIN( 242)		if (::hx::IsNull( colorNum )) {
HXLINE( 242)			colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString((HX_("#",23,00,00,00) + color1));
            		}
HXDLIN( 242)		int newColor;
HXDLIN( 242)		if (::hx::IsNotNull( colorNum )) {
HXLINE( 242)			newColor = ( (int)(colorNum) );
            		}
            		else {
HXLINE( 242)			newColor = -1;
            		}
HXLINE( 245)		int bullShit = 0;
HXLINE( 247)		{
HXLINE( 247)			int _g = 0;
HXDLIN( 247)			::Array< ::Dynamic> _g1 = this->grpOptions->members;
HXDLIN( 247)			while((_g < _g1->length)){
HXLINE( 247)				 ::objects::Alphabet item = _g1->__get(_g).StaticCast<  ::objects::Alphabet >();
HXDLIN( 247)				_g = (_g + 1);
HXLINE( 249)				item->targetY = (bullShit - this->curSelected);
HXLINE( 250)				bullShit = (bullShit + 1);
HXLINE( 252)				if (!(this->unselectableCheck((bullShit - 1)))) {
HXLINE( 253)					item->set_alpha(( (Float)(0) ));
HXLINE( 254)					if ((item->targetY == 0)) {
HXLINE( 255)						item->set_alpha(( (Float)(1) ));
            					}
            				}
            			}
            		}
HXLINE( 260)		this->descText->set_text(this->creditsStuff->__get(this->curSelected).StaticCast< ::Array< ::String > >()->__get(2));
HXLINE( 261)		 ::flixel::text::FlxText _hx_tmp2 = this->descText;
HXDLIN( 261)		int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN( 261)		Float _hx_tmp4 = (( (Float)(_hx_tmp3) ) - this->descText->get_height());
HXDLIN( 261)		_hx_tmp2->set_y(((_hx_tmp4 + this->offsetThing) + 20));
HXLINE( 263)		this->descBox->setGraphicSize(0,0);
HXLINE( 264)		this->descBox->updateHitbox();
            	}


HX_DEFINE_DYNAMIC_FUNC1(GalleryState_obj,changeSelection,(void))

void GalleryState_obj::pushModCreditsToList(::String folder){
            	HX_STACKFRAME(&_hx_pos_47ca6c36334795a8_269_pushModCreditsToList)
HXLINE( 270)		::String creditsFile = null();
HXLINE( 271)		bool _hx_tmp;
HXDLIN( 271)		if (::hx::IsNotNull( folder )) {
HXLINE( 271)			_hx_tmp = (::StringTools_obj::trim(folder).length > 0);
            		}
            		else {
HXLINE( 271)			_hx_tmp = false;
            		}
HXDLIN( 271)		if (_hx_tmp) {
HXLINE( 271)			::String key = (folder + HX_("/data/credits.txt",a6,fd,31,d1));
HXDLIN( 271)			if (::hx::IsNull( key )) {
HXLINE( 271)				key = HX_("",00,00,00,00);
            			}
HXDLIN( 271)			creditsFile = (HX_("mods/",9e,2f,58,0c) + key);
            		}
            		else {
HXLINE( 272)			::String key1 = HX_("data/credits.txt",77,6f,6e,c6);
HXDLIN( 272)			if (::hx::IsNull( key1 )) {
HXLINE( 272)				key1 = HX_("",00,00,00,00);
            			}
HXDLIN( 272)			creditsFile = (HX_("mods/",9e,2f,58,0c) + key1);
            		}
HXLINE( 274)		if (::sys::FileSystem_obj::exists(creditsFile)) {
HXLINE( 276)			::Array< ::String > firstarray = ::sys::io::File_obj::getContent(creditsFile).split(HX_("\n",0a,00,00,00));
HXLINE( 277)			{
HXLINE( 277)				int _g = 0;
HXDLIN( 277)				while((_g < firstarray->length)){
HXLINE( 277)					::String i = firstarray->__get(_g);
HXDLIN( 277)					_g = (_g + 1);
HXLINE( 279)					::Array< ::String > arr = ::StringTools_obj::replace(i,HX_("\\n",92,50,00,00),HX_("\n",0a,00,00,00)).split(HX_("::",c0,32,00,00));
HXLINE( 280)					if ((arr->length >= 5)) {
HXLINE( 280)						arr->push(folder);
            					}
HXLINE( 281)					this->creditsStuff->push(arr);
            				}
            			}
HXLINE( 283)			this->creditsStuff->push(::Array_obj< ::String >::fromData( _hx_array_data_f994f2eb_18,1));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(GalleryState_obj,pushModCreditsToList,(void))

bool GalleryState_obj::unselectableCheck(int num){
            	HX_STACKFRAME(&_hx_pos_47ca6c36334795a8_289_unselectableCheck)
HXDLIN( 289)		return (this->creditsStuff->__get(num).StaticCast< ::Array< ::String > >()->length <= 1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(GalleryState_obj,unselectableCheck,return )


::hx::ObjectPtr< GalleryState_obj > GalleryState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< GalleryState_obj > __this = new GalleryState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< GalleryState_obj > GalleryState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	GalleryState_obj *__this = (GalleryState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GalleryState_obj), true, "states.GalleryState"));
	*(void **)__this = GalleryState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

GalleryState_obj::GalleryState_obj()
{
}

void GalleryState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GalleryState);
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(grpOptions,"grpOptions");
	HX_MARK_MEMBER_NAME(iconArray,"iconArray");
	HX_MARK_MEMBER_NAME(creditsStuff,"creditsStuff");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(descText,"descText");
	HX_MARK_MEMBER_NAME(intendedColor,"intendedColor");
	HX_MARK_MEMBER_NAME(colorTween,"colorTween");
	HX_MARK_MEMBER_NAME(descBox,"descBox");
	HX_MARK_MEMBER_NAME(offsetThing,"offsetThing");
	HX_MARK_MEMBER_NAME(quitting,"quitting");
	HX_MARK_MEMBER_NAME(holdTime,"holdTime");
	HX_MARK_MEMBER_NAME(moveTween,"moveTween");
	 ::backend::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GalleryState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(grpOptions,"grpOptions");
	HX_VISIT_MEMBER_NAME(iconArray,"iconArray");
	HX_VISIT_MEMBER_NAME(creditsStuff,"creditsStuff");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(descText,"descText");
	HX_VISIT_MEMBER_NAME(intendedColor,"intendedColor");
	HX_VISIT_MEMBER_NAME(colorTween,"colorTween");
	HX_VISIT_MEMBER_NAME(descBox,"descBox");
	HX_VISIT_MEMBER_NAME(offsetThing,"offsetThing");
	HX_VISIT_MEMBER_NAME(quitting,"quitting");
	HX_VISIT_MEMBER_NAME(holdTime,"holdTime");
	HX_VISIT_MEMBER_NAME(moveTween,"moveTween");
	 ::backend::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val GalleryState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"descBox") ) { return ::hx::Val( descBox ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"descText") ) { return ::hx::Val( descText ); }
		if (HX_FIELD_EQ(inName,"quitting") ) { return ::hx::Val( quitting ); }
		if (HX_FIELD_EQ(inName,"holdTime") ) { return ::hx::Val( holdTime ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"iconArray") ) { return ::hx::Val( iconArray ); }
		if (HX_FIELD_EQ(inName,"moveTween") ) { return ::hx::Val( moveTween ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpOptions") ) { return ::hx::Val( grpOptions ); }
		if (HX_FIELD_EQ(inName,"colorTween") ) { return ::hx::Val( colorTween ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		if (HX_FIELD_EQ(inName,"offsetThing") ) { return ::hx::Val( offsetThing ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"creditsStuff") ) { return ::hx::Val( creditsStuff ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"intendedColor") ) { return ::hx::Val( intendedColor ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"unselectableCheck") ) { return ::hx::Val( unselectableCheck_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"pushModCreditsToList") ) { return ::hx::Val( pushModCreditsToList_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val GalleryState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"descBox") ) { descBox=inValue.Cast<  ::objects::AttachedSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"descText") ) { descText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"quitting") ) { quitting=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holdTime") ) { holdTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"iconArray") ) { iconArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"moveTween") ) { moveTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpOptions") ) { grpOptions=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colorTween") ) { colorTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetThing") ) { offsetThing=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"creditsStuff") ) { creditsStuff=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"intendedColor") ) { intendedColor=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GalleryState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("grpOptions",f9,45,d8,00));
	outFields->push(HX_("iconArray",60,3f,53,5f));
	outFields->push(HX_("creditsStuff",7a,9a,7e,73));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("descText",9e,53,35,f3));
	outFields->push(HX_("intendedColor",b8,fb,ff,5a));
	outFields->push(HX_("colorTween",08,c2,dc,3d));
	outFields->push(HX_("descBox",3a,20,25,19));
	outFields->push(HX_("offsetThing",5b,0b,0a,a8));
	outFields->push(HX_("quitting",3d,a0,84,53));
	outFields->push(HX_("holdTime",ec,cc,bf,3e));
	outFields->push(HX_("moveTween",9a,79,37,d7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GalleryState_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(GalleryState_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(GalleryState_obj,grpOptions),HX_("grpOptions",f9,45,d8,00)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(GalleryState_obj,iconArray),HX_("iconArray",60,3f,53,5f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(GalleryState_obj,creditsStuff),HX_("creditsStuff",7a,9a,7e,73)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(GalleryState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(GalleryState_obj,descText),HX_("descText",9e,53,35,f3)},
	{::hx::fsInt,(int)offsetof(GalleryState_obj,intendedColor),HX_("intendedColor",b8,fb,ff,5a)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(GalleryState_obj,colorTween),HX_("colorTween",08,c2,dc,3d)},
	{::hx::fsObject /*  ::objects::AttachedSprite */ ,(int)offsetof(GalleryState_obj,descBox),HX_("descBox",3a,20,25,19)},
	{::hx::fsFloat,(int)offsetof(GalleryState_obj,offsetThing),HX_("offsetThing",5b,0b,0a,a8)},
	{::hx::fsBool,(int)offsetof(GalleryState_obj,quitting),HX_("quitting",3d,a0,84,53)},
	{::hx::fsFloat,(int)offsetof(GalleryState_obj,holdTime),HX_("holdTime",ec,cc,bf,3e)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(GalleryState_obj,moveTween),HX_("moveTween",9a,79,37,d7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *GalleryState_obj_sStaticStorageInfo = 0;
#endif

static ::String GalleryState_obj_sMemberFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	HX_("grpOptions",f9,45,d8,00),
	HX_("iconArray",60,3f,53,5f),
	HX_("creditsStuff",7a,9a,7e,73),
	HX_("bg",c5,55,00,00),
	HX_("descText",9e,53,35,f3),
	HX_("intendedColor",b8,fb,ff,5a),
	HX_("colorTween",08,c2,dc,3d),
	HX_("descBox",3a,20,25,19),
	HX_("offsetThing",5b,0b,0a,a8),
	HX_("create",fc,66,0f,7c),
	HX_("quitting",3d,a0,84,53),
	HX_("holdTime",ec,cc,bf,3e),
	HX_("update",09,86,05,87),
	HX_("moveTween",9a,79,37,d7),
	HX_("changeSelection",bc,98,b5,48),
	HX_("pushModCreditsToList",0b,03,bb,6c),
	HX_("unselectableCheck",19,58,ce,19),
	::String(null()) };

::hx::Class GalleryState_obj::__mClass;

void GalleryState_obj::__register()
{
	GalleryState_obj _hx_dummy;
	GalleryState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.GalleryState",eb,f2,94,f9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GalleryState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GalleryState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GalleryState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GalleryState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
