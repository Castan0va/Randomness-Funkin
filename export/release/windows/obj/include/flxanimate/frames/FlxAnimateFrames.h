// Generated by Haxe 4.3.2
#ifndef INCLUDED_flxanimate_frames_FlxAnimateFrames
#define INCLUDED_flxanimate_frames_FlxAnimateFrames

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
HX_DECLARE_CLASS2(flixel,graphics,FlxGraphic)
HX_DECLARE_CLASS3(flixel,graphics,frames,FlxAtlasFrames)
HX_DECLARE_CLASS3(flixel,graphics,frames,FlxFrame)
HX_DECLARE_CLASS3(flixel,graphics,frames,FlxFramesCollection)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flxanimate,frames,FlxAnimateFrames)
HX_DECLARE_CLASS2(haxe,ds,List)

namespace flxanimate{
namespace frames{


class HXCPP_CLASS_ATTRIBUTES FlxAnimateFrames_obj : public  ::flixel::graphics::frames::FlxAtlasFrames_obj
{
	public:
		typedef  ::flixel::graphics::frames::FlxAtlasFrames_obj super;
		typedef FlxAnimateFrames_obj OBJ_;
		FlxAnimateFrames_obj();

	public:
		enum { _hx_ClassId = 0x42bbdcd2 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flxanimate.frames.FlxAnimateFrames")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flxanimate.frames.FlxAnimateFrames"); }
		static ::hx::ObjectPtr< FlxAnimateFrames_obj > __new();
		static ::hx::ObjectPtr< FlxAnimateFrames_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxAnimateFrames_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxAnimateFrames",75,35,08,65); }

		static void __boot();
		static  ::Dynamic data;
		static  ::haxe::ds::List zip;
		static  ::flixel::graphics::frames::FlxAtlasFrames fromTextureAtlas(::String Path);
		static ::Dynamic fromTextureAtlas_dyn();

		static  ::flixel::graphics::frames::FlxAtlasFrames fromSparrow( ::Dynamic Path, ::Dynamic Image);
		static ::Dynamic fromSparrow_dyn();

		static  ::flxanimate::frames::FlxAnimateFrames fromAnimateAtlas( ::Dynamic Data, ::Dynamic Image);
		static ::Dynamic fromAnimateAtlas_dyn();

		static  ::flixel::graphics::frames::FlxAtlasFrames fromJson( ::Dynamic Path, ::Dynamic Image);
		static ::Dynamic fromJson_dyn();

		static  ::flixel::graphics::frames::FlxAtlasFrames fromEdgeAnimate(::String Path, ::Dynamic Image);
		static ::Dynamic fromEdgeAnimate_dyn();

		static  ::flixel::graphics::frames::FlxAtlasFrames fromStarling( ::Dynamic Path, ::Dynamic Image);
		static ::Dynamic fromStarling_dyn();

		static  ::flixel::graphics::frames::FlxAtlasFrames fromCocos2D(::String Path, ::Dynamic Image);
		static ::Dynamic fromCocos2D_dyn();

		static  ::flixel::graphics::frames::FlxAtlasFrames fromEaselJS(::String Path, ::Dynamic Image);
		static ::Dynamic fromEaselJS_dyn();

		static void cocosHelper(::String FrameName, ::Dynamic FrameData, ::flixel::graphics::frames::FlxAtlasFrames Frames);
		static ::Dynamic cocosHelper_dyn();

		static void starlingHelper(::String FrameName, ::Dynamic FrameData, ::flixel::graphics::frames::FlxAtlasFrames Frames);
		static ::Dynamic starlingHelper_dyn();

		static  ::flixel::graphics::frames::FlxFrame textureAtlasHelper( ::flixel::graphics::FlxGraphic SpriteMap, ::Dynamic limb, ::Dynamic curMeta);
		static ::Dynamic textureAtlasHelper_dyn();

		static void texturePackerHelper(::String FrameName, ::Dynamic FrameData, ::flixel::graphics::frames::FlxAtlasFrames Frames);
		static ::Dynamic texturePackerHelper_dyn();

		static int max(int a,int b);
		static ::Dynamic max_dyn();

		::Array< ::Dynamic> parents;
		 ::flxanimate::frames::FlxAnimateFrames animateConcat( ::flixel::graphics::frames::FlxFramesCollection frames);
		::Dynamic animateConcat_dyn();

};

} // end namespace flxanimate
} // end namespace frames

#endif /* INCLUDED_flxanimate_frames_FlxAnimateFrames */ 
