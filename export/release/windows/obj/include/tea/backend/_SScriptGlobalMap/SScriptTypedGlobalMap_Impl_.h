// Generated by Haxe 4.3.2
#ifndef INCLUDED_tea_backend__SScriptGlobalMap_SScriptTypedGlobalMap_Impl_
#define INCLUDED_tea_backend__SScriptGlobalMap_SScriptTypedGlobalMap_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,BalancedTree)
HX_DECLARE_CLASS2(haxe,ds,EnumValueMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,ds,ObjectMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS3(tea,backend,_SScriptGlobalMap,SScriptTypedGlobalMap_Impl_)

namespace tea{
namespace backend{
namespace _SScriptGlobalMap{


class HXCPP_CLASS_ATTRIBUTES SScriptTypedGlobalMap_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef SScriptTypedGlobalMap_Impl__obj OBJ_;
		SScriptTypedGlobalMap_Impl__obj();

	public:
		enum { _hx_ClassId = 0x647e9637 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="tea.backend._SScriptGlobalMap.SScriptTypedGlobalMap_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"tea.backend._SScriptGlobalMap.SScriptTypedGlobalMap_Impl_"); }

		inline static ::hx::ObjectPtr< SScriptTypedGlobalMap_Impl__obj > __new() {
			::hx::ObjectPtr< SScriptTypedGlobalMap_Impl__obj > __this = new SScriptTypedGlobalMap_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< SScriptTypedGlobalMap_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			SScriptTypedGlobalMap_Impl__obj *__this = (SScriptTypedGlobalMap_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SScriptTypedGlobalMap_Impl__obj), false, "tea.backend._SScriptGlobalMap.SScriptTypedGlobalMap_Impl_"));
			*(void **)__this = SScriptTypedGlobalMap_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~SScriptTypedGlobalMap_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("SScriptTypedGlobalMap_Impl_",ed,6e,fb,e3); }

		static void set(::Dynamic this1, ::Dynamic key, ::Dynamic value);
		static ::Dynamic set_dyn();

		static  ::Dynamic get(::Dynamic this1, ::Dynamic key);
		static ::Dynamic get_dyn();

		static bool exists(::Dynamic this1, ::Dynamic key);
		static ::Dynamic exists_dyn();

		static bool remove(::Dynamic this1, ::Dynamic key);
		static ::Dynamic remove_dyn();

		static  ::Dynamic keys(::Dynamic this1);
		static ::Dynamic keys_dyn();

		static  ::Dynamic iterator(::Dynamic this1);
		static ::Dynamic iterator_dyn();

		static  ::Dynamic keyValueIterator(::Dynamic this1);
		static ::Dynamic keyValueIterator_dyn();

		static ::Dynamic copy(::Dynamic this1);
		static ::Dynamic copy_dyn();

		static ::String toString(::Dynamic this1);
		static ::Dynamic toString_dyn();

		static void clear(::Dynamic this1);
		static ::Dynamic clear_dyn();

		static  ::Dynamic arrayWrite(::Dynamic this1, ::Dynamic k, ::Dynamic v);
		static ::Dynamic arrayWrite_dyn();

		static  ::haxe::ds::StringMap toStringMap(::Dynamic t);
		static ::Dynamic toStringMap_dyn();

		static  ::haxe::ds::IntMap toIntMap(::Dynamic t);
		static ::Dynamic toIntMap_dyn();

		static  ::haxe::ds::EnumValueMap toEnumValueMapMap(::Dynamic t);
		static ::Dynamic toEnumValueMapMap_dyn();

		static  ::haxe::ds::ObjectMap toObjectMap(::Dynamic t);
		static ::Dynamic toObjectMap_dyn();

		static  ::haxe::ds::StringMap fromStringMap( ::haxe::ds::StringMap map);
		static ::Dynamic fromStringMap_dyn();

		static  ::haxe::ds::IntMap fromIntMap( ::haxe::ds::IntMap map);
		static ::Dynamic fromIntMap_dyn();

		static  ::haxe::ds::ObjectMap fromObjectMap( ::haxe::ds::ObjectMap map);
		static ::Dynamic fromObjectMap_dyn();

};

} // end namespace tea
} // end namespace backend
} // end namespace _SScriptGlobalMap

#endif /* INCLUDED_tea_backend__SScriptGlobalMap_SScriptTypedGlobalMap_Impl_ */ 
