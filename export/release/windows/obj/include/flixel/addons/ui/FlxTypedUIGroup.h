// Generated by Haxe 4.3.2
#ifndef INCLUDED_flixel_addons_ui_FlxTypedUIGroup
#define INCLUDED_flixel_addons_ui_FlxTypedUIGroup

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedSpriteContainer
#include <flixel/group/FlxTypedSpriteContainer.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,IFlxBasic)
HX_DECLARE_CLASS1(flixel,IFlxSprite)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxTypedUIGroup)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIWidget)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteContainer)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,math,FlxRect)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)

namespace flixel{
namespace addons{
namespace ui{


class HXCPP_CLASS_ATTRIBUTES FlxTypedUIGroup_obj : public  ::flixel::group::FlxTypedSpriteContainer_obj
{
	public:
		typedef  ::flixel::group::FlxTypedSpriteContainer_obj super;
		typedef FlxTypedUIGroup_obj OBJ_;
		FlxTypedUIGroup_obj();

	public:
		enum { _hx_ClassId = 0x296a9148 };

		void __construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.addons.ui.FlxTypedUIGroup")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.addons.ui.FlxTypedUIGroup"); }
		static ::hx::ObjectPtr< FlxTypedUIGroup_obj > __new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y);
		static ::hx::ObjectPtr< FlxTypedUIGroup_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxTypedUIGroup_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("FlxTypedUIGroup",93,b4,6f,e9); }

		::String name;
		bool broadcastToFlxUI;
		bool autoBounds;
		virtual  ::Dynamic add( ::Dynamic sprite);

		 ::Dynamic remove( ::Dynamic sprite,::hx::Null< bool >  splice);

		void setScrollFactor(Float x,Float y);
		::Dynamic setScrollFactor_dyn();

		bool hasThis( ::Dynamic sprite);
		::Dynamic hasThis_dyn();

		bool contains( ::Dynamic sprite);
		::Dynamic contains_dyn();

		void calcBounds( ::flixel::math::FlxRect rect);
		::Dynamic calcBounds_dyn();

		void floorAll();
		::Dynamic floorAll_dyn();

};

} // end namespace flixel
} // end namespace addons
} // end namespace ui

#endif /* INCLUDED_flixel_addons_ui_FlxTypedUIGroup */ 
