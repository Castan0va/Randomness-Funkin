// Generated by Haxe 4.3.2
#ifndef INCLUDED_states_editors_CharacterEditorState
#define INCLUDED_states_editors_CharacterEditorState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
HX_DECLARE_CLASS1(backend,MusicBeatState)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxCamera)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS1(flixel,IFlxBasic)
HX_DECLARE_CLASS1(flixel,IFlxSprite)
HX_DECLARE_CLASS3(flixel,addons,transition,FlxTransitionableState)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxInputText)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxTypedUIGroup)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUICheckBox)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUIDropDownMenu)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUIInputText)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUINumericStepper)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUIState)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUITabMenu)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,ICursorPointable)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IEventGetter)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIClickable)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIState)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIWidget)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IHasParams)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,ILabeled)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IResizable)
HX_DECLARE_CLASS2(flixel,group,FlxTypedContainer)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteContainer)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,math,FlxBasePoint)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS1(flxanimate,FlxAnimate)
HX_DECLARE_CLASS1(objects,Bar)
HX_DECLARE_CLASS1(objects,Character)
HX_DECLARE_CLASS1(objects,HealthIcon)
HX_DECLARE_CLASS2(openfl,events,ErrorEvent)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IOErrorEvent)
HX_DECLARE_CLASS2(openfl,events,TextEvent)
HX_DECLARE_CLASS2(openfl,net,FileReference)
HX_DECLARE_CLASS2(states,editors,CharacterEditorState)

namespace states{
namespace editors{


class HXCPP_CLASS_ATTRIBUTES CharacterEditorState_obj : public  ::backend::MusicBeatState_obj
{
	public:
		typedef  ::backend::MusicBeatState_obj super;
		typedef CharacterEditorState_obj OBJ_;
		CharacterEditorState_obj();

	public:
		enum { _hx_ClassId = 0x1f7e1d37 };

		void __construct(::String _hx_char,::hx::Null< bool >  __o_goToPlayState);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.editors.CharacterEditorState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.editors.CharacterEditorState"); }
		static ::hx::ObjectPtr< CharacterEditorState_obj > __new(::String _hx_char,::hx::Null< bool >  __o_goToPlayState);
		static ::hx::ObjectPtr< CharacterEditorState_obj > __alloc(::hx::Ctx *_hx_ctx,::String _hx_char,::hx::Null< bool >  __o_goToPlayState);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CharacterEditorState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CharacterEditorState",1b,d8,00,38); }

		 ::objects::Character character;
		 ::flixel::FlxSprite ghost;
		 ::flxanimate::FlxAnimate animateGhost;
		::String animateGhostImage;
		 ::flixel::FlxSprite cameraFollowPointer;
		bool isAnimateSprite;
		 ::flixel::group::FlxTypedSpriteGroup silhouettes;
		 ::flixel::math::FlxBasePoint dadPosition;
		 ::flixel::math::FlxBasePoint bfPosition;
		 ::flixel::FlxSprite helpBg;
		 ::flixel::group::FlxTypedSpriteGroup helpTexts;
		 ::flixel::text::FlxText cameraZoomText;
		 ::flixel::text::FlxText frameAdvanceText;
		 ::objects::Bar healthBar;
		 ::objects::HealthIcon healthIcon;
		::Array< Float > copiedOffset;
		::String _char;
		bool _goToPlayState;
		::Array< ::Dynamic> anims;
		 ::flixel::group::FlxTypedGroup animsTxtGroup;
		int curAnim;
		 ::flixel::FlxCamera camEditor;
		 ::flixel::FlxCamera camHUD;
		 ::flixel::addons::ui::FlxUITabMenu UI_box;
		 ::flixel::addons::ui::FlxUITabMenu UI_characterbox;
		void create();

		void addHelpScreen();
		::Dynamic addHelpScreen_dyn();

		void addCharacter(::hx::Null< bool >  reload);
		::Dynamic addCharacter_dyn();

		void makeUIMenu();
		::Dynamic makeUIMenu_dyn();

		Float ghostAlpha;
		void addGhostUI();
		::Dynamic addGhostUI_dyn();

		 ::flixel::addons::ui::FlxUICheckBox check_player;
		 ::flixel::addons::ui::FlxUIDropDownMenu charDropDown;
		void addSettingsUI();
		::Dynamic addSettingsUI_dyn();

		 ::flixel::addons::ui::FlxUIDropDownMenu animationDropDown;
		 ::flixel::addons::ui::FlxUIInputText animationInputText;
		 ::flixel::addons::ui::FlxUIInputText animationNameInputText;
		 ::flixel::addons::ui::FlxUIInputText animationIndicesInputText;
		 ::flixel::addons::ui::FlxUINumericStepper animationFramerate;
		 ::flixel::addons::ui::FlxUICheckBox animationLoopCheckBox;
		void addAnimationsUI();
		::Dynamic addAnimationsUI_dyn();

		 ::flixel::addons::ui::FlxUIInputText imageInputText;
		 ::flixel::addons::ui::FlxUIInputText healthIconInputText;
		 ::flixel::addons::ui::FlxUIInputText vocalsInputText;
		 ::flixel::addons::ui::FlxUINumericStepper singDurationStepper;
		 ::flixel::addons::ui::FlxUINumericStepper scaleStepper;
		 ::flixel::addons::ui::FlxUINumericStepper positionXStepper;
		 ::flixel::addons::ui::FlxUINumericStepper positionYStepper;
		 ::flixel::addons::ui::FlxUINumericStepper positionCameraXStepper;
		 ::flixel::addons::ui::FlxUINumericStepper positionCameraYStepper;
		 ::flixel::addons::ui::FlxUICheckBox flipXCheckBox;
		 ::flixel::addons::ui::FlxUICheckBox noAntialiasingCheckBox;
		 ::flixel::addons::ui::FlxUINumericStepper healthColorStepperR;
		 ::flixel::addons::ui::FlxUINumericStepper healthColorStepperG;
		 ::flixel::addons::ui::FlxUINumericStepper healthColorStepperB;
		void addCharacterUI();
		::Dynamic addCharacterUI_dyn();

		void getEvent(::String id, ::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params);

		void reloadCharacterImage();
		::Dynamic reloadCharacterImage_dyn();

		void reloadCharacterOptions();
		::Dynamic reloadCharacterOptions_dyn();

		Float holdingArrowsTime;
		Float holdingArrowsElapsed;
		Float holdingFrameTime;
		Float holdingFrameElapsed;
		::Array< Float > undoOffsets;
		void update(Float elapsed);

		::String assetFolder;
		void loadBG();
		::Dynamic loadBG_dyn();

		void updatePointerPos( ::Dynamic snap);
		::Dynamic updatePointerPos_dyn();

		void updateHealthBar();
		::Dynamic updateHealthBar_dyn();

		void updatePresence();
		::Dynamic updatePresence_dyn();

		void reloadAnimList();
		::Dynamic reloadAnimList_dyn();

		void updateTextColors();
		::Dynamic updateTextColors_dyn();

		void updateCharacterPositions();
		::Dynamic updateCharacterPositions_dyn();

		bool predictCharacterIsNotPlayer(::String name);
		::Dynamic predictCharacterIsNotPlayer_dyn();

		void addAnimation(::String anim,::String name,Float fps,bool loop,::Array< int > indices);
		::Dynamic addAnimation_dyn();

		 ::Dynamic newAnim(::String anim,::String name);
		::Dynamic newAnim_dyn();

		::Array< ::String > characterList;
		void reloadCharacterDropDown();
		::Dynamic reloadCharacterDropDown_dyn();

		void reloadAnimationDropDown();
		::Dynamic reloadAnimationDropDown_dyn();

		 ::openfl::net::FileReference _file;
		void onSaveComplete( ::openfl::events::Event _);
		::Dynamic onSaveComplete_dyn();

		void onSaveCancel( ::openfl::events::Event _);
		::Dynamic onSaveCancel_dyn();

		void onSaveError( ::openfl::events::IOErrorEvent _);
		::Dynamic onSaveError_dyn();

		void saveCharacter();
		::Dynamic saveCharacter_dyn();

};

} // end namespace states
} // end namespace editors

#endif /* INCLUDED_states_editors_CharacterEditorState */ 
